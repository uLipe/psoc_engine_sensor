ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_add_q7.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_add_q7,"ax",%progbits
  18              		.align	2
  19              		.global	arm_add_q7
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_add_q7, %function
  23              	arm_add_q7:
  24              	.LFB82:
  25              		.file 1 "Source\\BasicMathFunctions\\arm_add_q7.c"
   1:Source\BasicMathFunctions/arm_add_q7.c **** /* ----------------------------------------------------------------------
   2:Source\BasicMathFunctions/arm_add_q7.c ****  * Project:      CMSIS DSP Library
   3:Source\BasicMathFunctions/arm_add_q7.c ****  * Title:        arm_add_q7.c
   4:Source\BasicMathFunctions/arm_add_q7.c ****  * Description:  Q7 vector addition
   5:Source\BasicMathFunctions/arm_add_q7.c ****  *
   6:Source\BasicMathFunctions/arm_add_q7.c ****  * $Date:        27. January 2017
   7:Source\BasicMathFunctions/arm_add_q7.c ****  * $Revision:    V.1.5.1
   8:Source\BasicMathFunctions/arm_add_q7.c ****  *
   9:Source\BasicMathFunctions/arm_add_q7.c ****  * Target Processor: Cortex-M cores
  10:Source\BasicMathFunctions/arm_add_q7.c ****  * -------------------------------------------------------------------- */
  11:Source\BasicMathFunctions/arm_add_q7.c **** /*
  12:Source\BasicMathFunctions/arm_add_q7.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\BasicMathFunctions/arm_add_q7.c ****  *
  14:Source\BasicMathFunctions/arm_add_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\BasicMathFunctions/arm_add_q7.c ****  *
  16:Source\BasicMathFunctions/arm_add_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\BasicMathFunctions/arm_add_q7.c ****  * not use this file except in compliance with the License.
  18:Source\BasicMathFunctions/arm_add_q7.c ****  * You may obtain a copy of the License at
  19:Source\BasicMathFunctions/arm_add_q7.c ****  *
  20:Source\BasicMathFunctions/arm_add_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\BasicMathFunctions/arm_add_q7.c ****  *
  22:Source\BasicMathFunctions/arm_add_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\BasicMathFunctions/arm_add_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\BasicMathFunctions/arm_add_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\BasicMathFunctions/arm_add_q7.c ****  * See the License for the specific language governing permissions and
  26:Source\BasicMathFunctions/arm_add_q7.c ****  * limitations under the License.
  27:Source\BasicMathFunctions/arm_add_q7.c ****  */
  28:Source\BasicMathFunctions/arm_add_q7.c **** 
  29:Source\BasicMathFunctions/arm_add_q7.c **** #include "arm_math.h"
  30:Source\BasicMathFunctions/arm_add_q7.c **** 
  31:Source\BasicMathFunctions/arm_add_q7.c **** /**
  32:Source\BasicMathFunctions/arm_add_q7.c ****  * @ingroup groupMath
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 2


  33:Source\BasicMathFunctions/arm_add_q7.c ****  */
  34:Source\BasicMathFunctions/arm_add_q7.c **** 
  35:Source\BasicMathFunctions/arm_add_q7.c **** /**
  36:Source\BasicMathFunctions/arm_add_q7.c ****  * @addtogroup BasicAdd
  37:Source\BasicMathFunctions/arm_add_q7.c ****  * @{
  38:Source\BasicMathFunctions/arm_add_q7.c ****  */
  39:Source\BasicMathFunctions/arm_add_q7.c **** 
  40:Source\BasicMathFunctions/arm_add_q7.c **** /**
  41:Source\BasicMathFunctions/arm_add_q7.c ****  * @brief Q7 vector addition.
  42:Source\BasicMathFunctions/arm_add_q7.c ****  * @param[in]       *pSrcA points to the first input vector
  43:Source\BasicMathFunctions/arm_add_q7.c ****  * @param[in]       *pSrcB points to the second input vector
  44:Source\BasicMathFunctions/arm_add_q7.c ****  * @param[out]      *pDst points to the output vector
  45:Source\BasicMathFunctions/arm_add_q7.c ****  * @param[in]       blockSize number of samples in each vector
  46:Source\BasicMathFunctions/arm_add_q7.c ****  * @return none.
  47:Source\BasicMathFunctions/arm_add_q7.c ****  *
  48:Source\BasicMathFunctions/arm_add_q7.c ****  * <b>Scaling and Overflow Behavior:</b>
  49:Source\BasicMathFunctions/arm_add_q7.c ****  * \par
  50:Source\BasicMathFunctions/arm_add_q7.c ****  * The function uses saturating arithmetic.
  51:Source\BasicMathFunctions/arm_add_q7.c ****  * Results outside of the allowable Q7 range [0x80 0x7F] will be saturated.
  52:Source\BasicMathFunctions/arm_add_q7.c ****  */
  53:Source\BasicMathFunctions/arm_add_q7.c **** 
  54:Source\BasicMathFunctions/arm_add_q7.c **** void arm_add_q7(
  55:Source\BasicMathFunctions/arm_add_q7.c ****   q7_t * pSrcA,
  56:Source\BasicMathFunctions/arm_add_q7.c ****   q7_t * pSrcB,
  57:Source\BasicMathFunctions/arm_add_q7.c ****   q7_t * pDst,
  58:Source\BasicMathFunctions/arm_add_q7.c ****   uint32_t blockSize)
  59:Source\BasicMathFunctions/arm_add_q7.c **** {
  26              		.loc 1 59 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 8AB0     		sub	sp, sp, #40
  33              		.cfi_def_cfa_offset 48
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 B960     		str	r1, [r7, #8]
  38 000a 7A60     		str	r2, [r7, #4]
  39 000c 3B60     		str	r3, [r7]
  60:Source\BasicMathFunctions/arm_add_q7.c ****   uint32_t blkCnt;                               /* loop counter */
  61:Source\BasicMathFunctions/arm_add_q7.c **** 
  62:Source\BasicMathFunctions/arm_add_q7.c **** #if defined (ARM_MATH_DSP)
  63:Source\BasicMathFunctions/arm_add_q7.c **** 
  64:Source\BasicMathFunctions/arm_add_q7.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  65:Source\BasicMathFunctions/arm_add_q7.c **** 
  66:Source\BasicMathFunctions/arm_add_q7.c **** 
  67:Source\BasicMathFunctions/arm_add_q7.c ****   /*loop Unrolling */
  68:Source\BasicMathFunctions/arm_add_q7.c ****   blkCnt = blockSize >> 2u;
  69:Source\BasicMathFunctions/arm_add_q7.c **** 
  70:Source\BasicMathFunctions/arm_add_q7.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  71:Source\BasicMathFunctions/arm_add_q7.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  72:Source\BasicMathFunctions/arm_add_q7.c ****   while (blkCnt > 0u)
  73:Source\BasicMathFunctions/arm_add_q7.c ****   {
  74:Source\BasicMathFunctions/arm_add_q7.c ****     /* C = A + B */
  75:Source\BasicMathFunctions/arm_add_q7.c ****     /* Add and then store the results in the destination buffer. */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 3


  76:Source\BasicMathFunctions/arm_add_q7.c ****     *__SIMD32(pDst)++ = __QADD8(*__SIMD32(pSrcA)++, *__SIMD32(pSrcB)++);
  77:Source\BasicMathFunctions/arm_add_q7.c **** 
  78:Source\BasicMathFunctions/arm_add_q7.c ****     /* Decrement the loop counter */
  79:Source\BasicMathFunctions/arm_add_q7.c ****     blkCnt--;
  80:Source\BasicMathFunctions/arm_add_q7.c ****   }
  81:Source\BasicMathFunctions/arm_add_q7.c **** 
  82:Source\BasicMathFunctions/arm_add_q7.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
  83:Source\BasicMathFunctions/arm_add_q7.c ****    ** No loop unrolling is used. */
  84:Source\BasicMathFunctions/arm_add_q7.c ****   blkCnt = blockSize % 0x4u;
  85:Source\BasicMathFunctions/arm_add_q7.c **** 
  86:Source\BasicMathFunctions/arm_add_q7.c ****   while (blkCnt > 0u)
  87:Source\BasicMathFunctions/arm_add_q7.c ****   {
  88:Source\BasicMathFunctions/arm_add_q7.c ****     /* C = A + B */
  89:Source\BasicMathFunctions/arm_add_q7.c ****     /* Add and then store the results in the destination buffer. */
  90:Source\BasicMathFunctions/arm_add_q7.c ****     *pDst++ = (q7_t) __SSAT(*pSrcA++ + *pSrcB++, 8);
  91:Source\BasicMathFunctions/arm_add_q7.c **** 
  92:Source\BasicMathFunctions/arm_add_q7.c ****     /* Decrement the loop counter */
  93:Source\BasicMathFunctions/arm_add_q7.c ****     blkCnt--;
  94:Source\BasicMathFunctions/arm_add_q7.c ****   }
  95:Source\BasicMathFunctions/arm_add_q7.c **** 
  96:Source\BasicMathFunctions/arm_add_q7.c **** #else
  97:Source\BasicMathFunctions/arm_add_q7.c **** 
  98:Source\BasicMathFunctions/arm_add_q7.c ****   /* Run the below code for Cortex-M0 */
  99:Source\BasicMathFunctions/arm_add_q7.c **** 
 100:Source\BasicMathFunctions/arm_add_q7.c **** 
 101:Source\BasicMathFunctions/arm_add_q7.c **** 
 102:Source\BasicMathFunctions/arm_add_q7.c ****   /* Initialize blkCnt with number of samples */
 103:Source\BasicMathFunctions/arm_add_q7.c ****   blkCnt = blockSize;
  40              		.loc 1 103 0
  41 000e 3B68     		ldr	r3, [r7]
  42 0010 7B62     		str	r3, [r7, #36]
 104:Source\BasicMathFunctions/arm_add_q7.c **** 
 105:Source\BasicMathFunctions/arm_add_q7.c ****   while (blkCnt > 0u)
  43              		.loc 1 105 0
  44 0012 3EE0     		b	.L2
  45              	.L9:
 106:Source\BasicMathFunctions/arm_add_q7.c ****   {
 107:Source\BasicMathFunctions/arm_add_q7.c ****     /* C = A + B */
 108:Source\BasicMathFunctions/arm_add_q7.c ****     /* Add and then store the results in the destination buffer. */
 109:Source\BasicMathFunctions/arm_add_q7.c ****     *pDst++ = (q7_t) __SSAT((q15_t) * pSrcA++ + *pSrcB++, 8);
  46              		.loc 1 109 0
  47 0014 7B68     		ldr	r3, [r7, #4]
  48 0016 5A1C     		add	r2, r3, #1
  49 0018 7A60     		str	r2, [r7, #4]
  50 001a FA68     		ldr	r2, [r7, #12]
  51 001c 511C     		add	r1, r2, #1
  52 001e F960     		str	r1, [r7, #12]
  53 0020 1278     		ldrb	r2, [r2]
  54 0022 51B2     		sxtb	r1, r2
  55 0024 BA68     		ldr	r2, [r7, #8]
  56 0026 501C     		add	r0, r2, #1
  57 0028 B860     		str	r0, [r7, #8]
  58 002a 1278     		ldrb	r2, [r2]
  59 002c 52B2     		sxtb	r2, r2
  60 002e 8A18     		add	r2, r1, r2
  61 0030 3A62     		str	r2, [r7, #32]
  62 0032 0822     		mov	r2, #8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 4


  63 0034 FA61     		str	r2, [r7, #28]
  64              	.LBB4:
  65              	.LBB5:
  66              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 5


  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 6


 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 7


 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 8


 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 9


 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 10


 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 11


 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 12


 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 13


 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 14


 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 15


 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 16


 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
  67              		.loc 2 699 0
  68 0036 0122     		mov	r2, #1
  69 0038 BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  70              		.loc 2 700 0
  71 003a 0022     		mov	r2, #0
  72 003c 7A61     		str	r2, [r7, #20]
  73 003e 05E0     		b	.L3
  74              	.L4:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
  75              		.loc 2 702 0
  76 0040 BA69     		ldr	r2, [r7, #24]
  77 0042 5200     		lsl	r2, r2, #1
  78 0044 BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  79              		.loc 2 700 0
  80 0046 7A69     		ldr	r2, [r7, #20]
  81 0048 0132     		add	r2, r2, #1
  82 004a 7A61     		str	r2, [r7, #20]
  83              	.L3:
  84 004c FA69     		ldr	r2, [r7, #28]
  85 004e 013A     		sub	r2, r2, #1
  86 0050 7969     		ldr	r1, [r7, #20]
  87 0052 9142     		cmp	r1, r2
  88 0054 F4D3     		bcc	.L4
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
  89              		.loc 2 705 0
  90 0056 3A6A     		ldr	r2, [r7, #32]
  91 0058 002A     		cmp	r2, #0
  92 005a 09DD     		ble	.L5
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
  93              		.loc 2 707 0
  94 005c BA69     		ldr	r2, [r7, #24]
  95 005e 013A     		sub	r2, r2, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 17


  96 0060 BA61     		str	r2, [r7, #24]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
  97              		.loc 2 709 0
  98 0062 396A     		ldr	r1, [r7, #32]
  99 0064 BA69     		ldr	r2, [r7, #24]
 100 0066 9142     		cmp	r1, r2
 101 0068 0CDD     		ble	.L10
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 102              		.loc 2 711 0
 103 006a BA69     		ldr	r2, [r7, #24]
 104 006c 3A62     		str	r2, [r7, #32]
 105 006e 0AE0     		b	.L7
 106              	.L5:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 107              		.loc 2 716 0
 108 0070 BA69     		ldr	r2, [r7, #24]
 109 0072 5242     		neg	r2, r2
 110 0074 3A61     		str	r2, [r7, #16]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 111              		.loc 2 718 0
 112 0076 396A     		ldr	r1, [r7, #32]
 113 0078 3A69     		ldr	r2, [r7, #16]
 114 007a 9142     		cmp	r1, r2
 115 007c 03DA     		bge	.L7
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 116              		.loc 2 720 0
 117 007e 3A69     		ldr	r2, [r7, #16]
 118 0080 3A62     		str	r2, [r7, #32]
 119 0082 00E0     		b	.L7
 120              	.L10:
 711:.\Include/arm_math.h ****       }
 121              		.loc 2 711 0
 122 0084 C046     		mov	r8, r8
 123              	.L7:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 124              		.loc 2 723 0
 125 0086 3A6A     		ldr	r2, [r7, #32]
 126              	.LBE5:
 127              	.LBE4:
 128              		.loc 1 109 0
 129 0088 D2B2     		uxtb	r2, r2
 130 008a 1A70     		strb	r2, [r3]
 110:Source\BasicMathFunctions/arm_add_q7.c **** 
 111:Source\BasicMathFunctions/arm_add_q7.c ****     /* Decrement the loop counter */
 112:Source\BasicMathFunctions/arm_add_q7.c ****     blkCnt--;
 131              		.loc 1 112 0
 132 008c 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 18


 133 008e 013B     		sub	r3, r3, #1
 134 0090 7B62     		str	r3, [r7, #36]
 135              	.L2:
 105:Source\BasicMathFunctions/arm_add_q7.c ****   {
 136              		.loc 1 105 0
 137 0092 7B6A     		ldr	r3, [r7, #36]
 138 0094 002B     		cmp	r3, #0
 139 0096 BDD1     		bne	.L9
 113:Source\BasicMathFunctions/arm_add_q7.c ****   }
 114:Source\BasicMathFunctions/arm_add_q7.c **** 
 115:Source\BasicMathFunctions/arm_add_q7.c **** #endif /* #if defined (ARM_MATH_DSP) */
 116:Source\BasicMathFunctions/arm_add_q7.c **** 
 117:Source\BasicMathFunctions/arm_add_q7.c **** 
 118:Source\BasicMathFunctions/arm_add_q7.c **** }
 140              		.loc 1 118 0
 141 0098 BD46     		mov	sp, r7
 142 009a 0AB0     		add	sp, sp, #40
 143              		@ sp needed
 144 009c 80BD     		pop	{r7, pc}
 145              		.cfi_endproc
 146              	.LFE82:
 147              		.size	arm_add_q7, .-arm_add_q7
 148 009e C046     		.text
 149              	.Letext0:
 150              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 151              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 152              		.section	.debug_info,"",%progbits
 153              	.Ldebug_info0:
 154 0000 EF010000 		.4byte	0x1ef
 155 0004 0400     		.2byte	0x4
 156 0006 00000000 		.4byte	.Ldebug_abbrev0
 157 000a 04       		.byte	0x4
 158 000b 01       		.uleb128 0x1
 159 000c 3B010000 		.4byte	.LASF31
 160 0010 01       		.byte	0x1
 161 0011 D2000000 		.4byte	.LASF32
 162 0015 29000000 		.4byte	.LASF33
 163 0019 00000000 		.4byte	.Ldebug_ranges0+0
 164 001d 00000000 		.4byte	0
 165 0021 00000000 		.4byte	.Ldebug_line0
 166 0025 02       		.uleb128 0x2
 167 0026 00000000 		.4byte	.LASF2
 168 002a 03       		.byte	0x3
 169 002b 1B       		.byte	0x1b
 170 002c 30000000 		.4byte	0x30
 171 0030 03       		.uleb128 0x3
 172 0031 01       		.byte	0x1
 173 0032 06       		.byte	0x6
 174 0033 39020000 		.4byte	.LASF0
 175 0037 03       		.uleb128 0x3
 176 0038 01       		.byte	0x1
 177 0039 08       		.byte	0x8
 178 003a 93000000 		.4byte	.LASF1
 179 003e 02       		.uleb128 0x2
 180 003f 09000000 		.4byte	.LASF3
 181 0043 03       		.byte	0x3
 182 0044 29       		.byte	0x29
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 19


 183 0045 49000000 		.4byte	0x49
 184 0049 03       		.uleb128 0x3
 185 004a 02       		.byte	0x2
 186 004b 05       		.byte	0x5
 187 004c 0A020000 		.4byte	.LASF4
 188 0050 03       		.uleb128 0x3
 189 0051 02       		.byte	0x2
 190 0052 07       		.byte	0x7
 191 0053 BA000000 		.4byte	.LASF5
 192 0057 02       		.uleb128 0x2
 193 0058 1F000000 		.4byte	.LASF6
 194 005c 03       		.byte	0x3
 195 005d 3F       		.byte	0x3f
 196 005e 62000000 		.4byte	0x62
 197 0062 03       		.uleb128 0x3
 198 0063 04       		.byte	0x4
 199 0064 05       		.byte	0x5
 200 0065 24020000 		.4byte	.LASF7
 201 0069 02       		.uleb128 0x2
 202 006a 07010000 		.4byte	.LASF8
 203 006e 03       		.byte	0x3
 204 006f 41       		.byte	0x41
 205 0070 74000000 		.4byte	0x74
 206 0074 03       		.uleb128 0x3
 207 0075 04       		.byte	0x4
 208 0076 07       		.byte	0x7
 209 0077 A8000000 		.4byte	.LASF9
 210 007b 03       		.uleb128 0x3
 211 007c 08       		.byte	0x8
 212 007d 05       		.byte	0x5
 213 007e ED010000 		.4byte	.LASF10
 214 0082 03       		.uleb128 0x3
 215 0083 08       		.byte	0x8
 216 0084 07       		.byte	0x7
 217 0085 24010000 		.4byte	.LASF11
 218 0089 04       		.uleb128 0x4
 219 008a 04       		.byte	0x4
 220 008b 05       		.byte	0x5
 221 008c 696E7400 		.ascii	"int\000"
 222 0090 03       		.uleb128 0x3
 223 0091 04       		.byte	0x4
 224 0092 07       		.byte	0x7
 225 0093 17010000 		.4byte	.LASF12
 226 0097 02       		.uleb128 0x2
 227 0098 86000000 		.4byte	.LASF13
 228 009c 04       		.byte	0x4
 229 009d 14       		.byte	0x14
 230 009e 25000000 		.4byte	0x25
 231 00a2 02       		.uleb128 0x2
 232 00a3 CD010000 		.4byte	.LASF14
 233 00a7 04       		.byte	0x4
 234 00a8 20       		.byte	0x20
 235 00a9 3E000000 		.4byte	0x3e
 236 00ad 02       		.uleb128 0x2
 237 00ae DC010000 		.4byte	.LASF15
 238 00b2 04       		.byte	0x4
 239 00b3 2C       		.byte	0x2c
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 20


 240 00b4 57000000 		.4byte	0x57
 241 00b8 02       		.uleb128 0x2
 242 00b9 1B020000 		.4byte	.LASF16
 243 00bd 04       		.byte	0x4
 244 00be 2D       		.byte	0x2d
 245 00bf 69000000 		.4byte	0x69
 246 00c3 03       		.uleb128 0x3
 247 00c4 04       		.byte	0x4
 248 00c5 07       		.byte	0x7
 249 00c6 E4010000 		.4byte	.LASF17
 250 00ca 03       		.uleb128 0x3
 251 00cb 01       		.byte	0x1
 252 00cc 08       		.byte	0x8
 253 00cd 05020000 		.4byte	.LASF18
 254 00d1 03       		.uleb128 0x3
 255 00d2 08       		.byte	0x8
 256 00d3 04       		.byte	0x4
 257 00d4 00010000 		.4byte	.LASF19
 258 00d8 03       		.uleb128 0x3
 259 00d9 04       		.byte	0x4
 260 00da 04       		.byte	0x4
 261 00db 80000000 		.4byte	.LASF20
 262 00df 03       		.uleb128 0x3
 263 00e0 08       		.byte	0x8
 264 00e1 04       		.byte	0x4
 265 00e2 2D020000 		.4byte	.LASF21
 266 00e6 05       		.uleb128 0x5
 267 00e7 12010000 		.4byte	.LASF22
 268 00eb 02       		.byte	0x2
 269 00ec 9101     		.2byte	0x191
 270 00ee 97000000 		.4byte	0x97
 271 00f2 05       		.uleb128 0x5
 272 00f3 7A000000 		.4byte	.LASF23
 273 00f7 02       		.byte	0x2
 274 00f8 9601     		.2byte	0x196
 275 00fa A2000000 		.4byte	0xa2
 276 00fe 05       		.uleb128 0x5
 277 00ff 8D000000 		.4byte	.LASF24
 278 0103 02       		.byte	0x2
 279 0104 9B01     		.2byte	0x19b
 280 0106 AD000000 		.4byte	0xad
 281 010a 06       		.uleb128 0x6
 282 010b 04       		.byte	0x4
 283 010c E6000000 		.4byte	0xe6
 284 0110 07       		.uleb128 0x7
 285 0111 D5010000 		.4byte	.LASF34
 286 0115 02       		.byte	0x2
 287 0116 B402     		.2byte	0x2b4
 288 0118 FE000000 		.4byte	0xfe
 289 011c 03       		.byte	0x3
 290 011d 58010000 		.4byte	0x158
 291 0121 08       		.uleb128 0x8
 292 0122 7800     		.ascii	"x\000"
 293 0124 02       		.byte	0x2
 294 0125 B502     		.2byte	0x2b5
 295 0127 FE000000 		.4byte	0xfe
 296 012b 08       		.uleb128 0x8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 21


 297 012c 7900     		.ascii	"y\000"
 298 012e 02       		.byte	0x2
 299 012f B602     		.2byte	0x2b6
 300 0131 B8000000 		.4byte	0xb8
 301 0135 09       		.uleb128 0x9
 302 0136 14020000 		.4byte	.LASF25
 303 013a 02       		.byte	0x2
 304 013b B802     		.2byte	0x2b8
 305 013d AD000000 		.4byte	0xad
 306 0141 09       		.uleb128 0x9
 307 0142 F9000000 		.4byte	.LASF26
 308 0146 02       		.byte	0x2
 309 0147 B802     		.2byte	0x2b8
 310 0149 AD000000 		.4byte	0xad
 311 014d 0A       		.uleb128 0xa
 312 014e 6900     		.ascii	"i\000"
 313 0150 02       		.byte	0x2
 314 0151 B902     		.2byte	0x2b9
 315 0153 B8000000 		.4byte	0xb8
 316 0157 00       		.byte	0
 317 0158 0B       		.uleb128 0xb
 318 0159 6F000000 		.4byte	.LASF35
 319 015d 01       		.byte	0x1
 320 015e 36       		.byte	0x36
 321 015f 00000000 		.4byte	.LFB82
 322 0163 9E000000 		.4byte	.LFE82-.LFB82
 323 0167 01       		.uleb128 0x1
 324 0168 9C       		.byte	0x9c
 325 0169 0C       		.uleb128 0xc
 326 016a 13000000 		.4byte	.LASF27
 327 016e 01       		.byte	0x1
 328 016f 37       		.byte	0x37
 329 0170 0A010000 		.4byte	0x10a
 330 0174 02       		.uleb128 0x2
 331 0175 91       		.byte	0x91
 332 0176 5C       		.sleb128 -36
 333 0177 0C       		.uleb128 0xc
 334 0178 19000000 		.4byte	.LASF28
 335 017c 01       		.byte	0x1
 336 017d 38       		.byte	0x38
 337 017e 0A010000 		.4byte	0x10a
 338 0182 02       		.uleb128 0x2
 339 0183 91       		.byte	0x91
 340 0184 58       		.sleb128 -40
 341 0185 0C       		.uleb128 0xc
 342 0186 CD000000 		.4byte	.LASF29
 343 018a 01       		.byte	0x1
 344 018b 39       		.byte	0x39
 345 018c 0A010000 		.4byte	0x10a
 346 0190 02       		.uleb128 0x2
 347 0191 91       		.byte	0x91
 348 0192 54       		.sleb128 -44
 349 0193 0C       		.uleb128 0xc
 350 0194 FB010000 		.4byte	.LASF30
 351 0198 01       		.byte	0x1
 352 0199 3A       		.byte	0x3a
 353 019a B8000000 		.4byte	0xb8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 22


 354 019e 02       		.uleb128 0x2
 355 019f 91       		.byte	0x91
 356 01a0 50       		.sleb128 -48
 357 01a1 0D       		.uleb128 0xd
 358 01a2 A1000000 		.4byte	.LASF36
 359 01a6 01       		.byte	0x1
 360 01a7 3C       		.byte	0x3c
 361 01a8 B8000000 		.4byte	0xb8
 362 01ac 02       		.uleb128 0x2
 363 01ad 91       		.byte	0x91
 364 01ae 74       		.sleb128 -12
 365 01af 0E       		.uleb128 0xe
 366 01b0 10010000 		.4byte	0x110
 367 01b4 36000000 		.4byte	.LBB4
 368 01b8 52000000 		.4byte	.LBE4-.LBB4
 369 01bc 01       		.byte	0x1
 370 01bd 6D       		.byte	0x6d
 371 01be 0F       		.uleb128 0xf
 372 01bf 2B010000 		.4byte	0x12b
 373 01c3 02       		.uleb128 0x2
 374 01c4 91       		.byte	0x91
 375 01c5 6C       		.sleb128 -20
 376 01c6 0F       		.uleb128 0xf
 377 01c7 21010000 		.4byte	0x121
 378 01cb 02       		.uleb128 0x2
 379 01cc 91       		.byte	0x91
 380 01cd 70       		.sleb128 -16
 381 01ce 10       		.uleb128 0x10
 382 01cf 36000000 		.4byte	.LBB5
 383 01d3 52000000 		.4byte	.LBE5-.LBB5
 384 01d7 11       		.uleb128 0x11
 385 01d8 35010000 		.4byte	0x135
 386 01dc 02       		.uleb128 0x2
 387 01dd 91       		.byte	0x91
 388 01de 68       		.sleb128 -24
 389 01df 11       		.uleb128 0x11
 390 01e0 41010000 		.4byte	0x141
 391 01e4 02       		.uleb128 0x2
 392 01e5 91       		.byte	0x91
 393 01e6 60       		.sleb128 -32
 394 01e7 11       		.uleb128 0x11
 395 01e8 4D010000 		.4byte	0x14d
 396 01ec 02       		.uleb128 0x2
 397 01ed 91       		.byte	0x91
 398 01ee 64       		.sleb128 -28
 399 01ef 00       		.byte	0
 400 01f0 00       		.byte	0
 401 01f1 00       		.byte	0
 402 01f2 00       		.byte	0
 403              		.section	.debug_abbrev,"",%progbits
 404              	.Ldebug_abbrev0:
 405 0000 01       		.uleb128 0x1
 406 0001 11       		.uleb128 0x11
 407 0002 01       		.byte	0x1
 408 0003 25       		.uleb128 0x25
 409 0004 0E       		.uleb128 0xe
 410 0005 13       		.uleb128 0x13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 23


 411 0006 0B       		.uleb128 0xb
 412 0007 03       		.uleb128 0x3
 413 0008 0E       		.uleb128 0xe
 414 0009 1B       		.uleb128 0x1b
 415 000a 0E       		.uleb128 0xe
 416 000b 55       		.uleb128 0x55
 417 000c 17       		.uleb128 0x17
 418 000d 11       		.uleb128 0x11
 419 000e 01       		.uleb128 0x1
 420 000f 10       		.uleb128 0x10
 421 0010 17       		.uleb128 0x17
 422 0011 00       		.byte	0
 423 0012 00       		.byte	0
 424 0013 02       		.uleb128 0x2
 425 0014 16       		.uleb128 0x16
 426 0015 00       		.byte	0
 427 0016 03       		.uleb128 0x3
 428 0017 0E       		.uleb128 0xe
 429 0018 3A       		.uleb128 0x3a
 430 0019 0B       		.uleb128 0xb
 431 001a 3B       		.uleb128 0x3b
 432 001b 0B       		.uleb128 0xb
 433 001c 49       		.uleb128 0x49
 434 001d 13       		.uleb128 0x13
 435 001e 00       		.byte	0
 436 001f 00       		.byte	0
 437 0020 03       		.uleb128 0x3
 438 0021 24       		.uleb128 0x24
 439 0022 00       		.byte	0
 440 0023 0B       		.uleb128 0xb
 441 0024 0B       		.uleb128 0xb
 442 0025 3E       		.uleb128 0x3e
 443 0026 0B       		.uleb128 0xb
 444 0027 03       		.uleb128 0x3
 445 0028 0E       		.uleb128 0xe
 446 0029 00       		.byte	0
 447 002a 00       		.byte	0
 448 002b 04       		.uleb128 0x4
 449 002c 24       		.uleb128 0x24
 450 002d 00       		.byte	0
 451 002e 0B       		.uleb128 0xb
 452 002f 0B       		.uleb128 0xb
 453 0030 3E       		.uleb128 0x3e
 454 0031 0B       		.uleb128 0xb
 455 0032 03       		.uleb128 0x3
 456 0033 08       		.uleb128 0x8
 457 0034 00       		.byte	0
 458 0035 00       		.byte	0
 459 0036 05       		.uleb128 0x5
 460 0037 16       		.uleb128 0x16
 461 0038 00       		.byte	0
 462 0039 03       		.uleb128 0x3
 463 003a 0E       		.uleb128 0xe
 464 003b 3A       		.uleb128 0x3a
 465 003c 0B       		.uleb128 0xb
 466 003d 3B       		.uleb128 0x3b
 467 003e 05       		.uleb128 0x5
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 24


 468 003f 49       		.uleb128 0x49
 469 0040 13       		.uleb128 0x13
 470 0041 00       		.byte	0
 471 0042 00       		.byte	0
 472 0043 06       		.uleb128 0x6
 473 0044 0F       		.uleb128 0xf
 474 0045 00       		.byte	0
 475 0046 0B       		.uleb128 0xb
 476 0047 0B       		.uleb128 0xb
 477 0048 49       		.uleb128 0x49
 478 0049 13       		.uleb128 0x13
 479 004a 00       		.byte	0
 480 004b 00       		.byte	0
 481 004c 07       		.uleb128 0x7
 482 004d 2E       		.uleb128 0x2e
 483 004e 01       		.byte	0x1
 484 004f 03       		.uleb128 0x3
 485 0050 0E       		.uleb128 0xe
 486 0051 3A       		.uleb128 0x3a
 487 0052 0B       		.uleb128 0xb
 488 0053 3B       		.uleb128 0x3b
 489 0054 05       		.uleb128 0x5
 490 0055 27       		.uleb128 0x27
 491 0056 19       		.uleb128 0x19
 492 0057 49       		.uleb128 0x49
 493 0058 13       		.uleb128 0x13
 494 0059 20       		.uleb128 0x20
 495 005a 0B       		.uleb128 0xb
 496 005b 01       		.uleb128 0x1
 497 005c 13       		.uleb128 0x13
 498 005d 00       		.byte	0
 499 005e 00       		.byte	0
 500 005f 08       		.uleb128 0x8
 501 0060 05       		.uleb128 0x5
 502 0061 00       		.byte	0
 503 0062 03       		.uleb128 0x3
 504 0063 08       		.uleb128 0x8
 505 0064 3A       		.uleb128 0x3a
 506 0065 0B       		.uleb128 0xb
 507 0066 3B       		.uleb128 0x3b
 508 0067 05       		.uleb128 0x5
 509 0068 49       		.uleb128 0x49
 510 0069 13       		.uleb128 0x13
 511 006a 00       		.byte	0
 512 006b 00       		.byte	0
 513 006c 09       		.uleb128 0x9
 514 006d 34       		.uleb128 0x34
 515 006e 00       		.byte	0
 516 006f 03       		.uleb128 0x3
 517 0070 0E       		.uleb128 0xe
 518 0071 3A       		.uleb128 0x3a
 519 0072 0B       		.uleb128 0xb
 520 0073 3B       		.uleb128 0x3b
 521 0074 05       		.uleb128 0x5
 522 0075 49       		.uleb128 0x49
 523 0076 13       		.uleb128 0x13
 524 0077 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 25


 525 0078 00       		.byte	0
 526 0079 0A       		.uleb128 0xa
 527 007a 34       		.uleb128 0x34
 528 007b 00       		.byte	0
 529 007c 03       		.uleb128 0x3
 530 007d 08       		.uleb128 0x8
 531 007e 3A       		.uleb128 0x3a
 532 007f 0B       		.uleb128 0xb
 533 0080 3B       		.uleb128 0x3b
 534 0081 05       		.uleb128 0x5
 535 0082 49       		.uleb128 0x49
 536 0083 13       		.uleb128 0x13
 537 0084 00       		.byte	0
 538 0085 00       		.byte	0
 539 0086 0B       		.uleb128 0xb
 540 0087 2E       		.uleb128 0x2e
 541 0088 01       		.byte	0x1
 542 0089 3F       		.uleb128 0x3f
 543 008a 19       		.uleb128 0x19
 544 008b 03       		.uleb128 0x3
 545 008c 0E       		.uleb128 0xe
 546 008d 3A       		.uleb128 0x3a
 547 008e 0B       		.uleb128 0xb
 548 008f 3B       		.uleb128 0x3b
 549 0090 0B       		.uleb128 0xb
 550 0091 27       		.uleb128 0x27
 551 0092 19       		.uleb128 0x19
 552 0093 11       		.uleb128 0x11
 553 0094 01       		.uleb128 0x1
 554 0095 12       		.uleb128 0x12
 555 0096 06       		.uleb128 0x6
 556 0097 40       		.uleb128 0x40
 557 0098 18       		.uleb128 0x18
 558 0099 9742     		.uleb128 0x2117
 559 009b 19       		.uleb128 0x19
 560 009c 00       		.byte	0
 561 009d 00       		.byte	0
 562 009e 0C       		.uleb128 0xc
 563 009f 05       		.uleb128 0x5
 564 00a0 00       		.byte	0
 565 00a1 03       		.uleb128 0x3
 566 00a2 0E       		.uleb128 0xe
 567 00a3 3A       		.uleb128 0x3a
 568 00a4 0B       		.uleb128 0xb
 569 00a5 3B       		.uleb128 0x3b
 570 00a6 0B       		.uleb128 0xb
 571 00a7 49       		.uleb128 0x49
 572 00a8 13       		.uleb128 0x13
 573 00a9 02       		.uleb128 0x2
 574 00aa 18       		.uleb128 0x18
 575 00ab 00       		.byte	0
 576 00ac 00       		.byte	0
 577 00ad 0D       		.uleb128 0xd
 578 00ae 34       		.uleb128 0x34
 579 00af 00       		.byte	0
 580 00b0 03       		.uleb128 0x3
 581 00b1 0E       		.uleb128 0xe
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 26


 582 00b2 3A       		.uleb128 0x3a
 583 00b3 0B       		.uleb128 0xb
 584 00b4 3B       		.uleb128 0x3b
 585 00b5 0B       		.uleb128 0xb
 586 00b6 49       		.uleb128 0x49
 587 00b7 13       		.uleb128 0x13
 588 00b8 02       		.uleb128 0x2
 589 00b9 18       		.uleb128 0x18
 590 00ba 00       		.byte	0
 591 00bb 00       		.byte	0
 592 00bc 0E       		.uleb128 0xe
 593 00bd 1D       		.uleb128 0x1d
 594 00be 01       		.byte	0x1
 595 00bf 31       		.uleb128 0x31
 596 00c0 13       		.uleb128 0x13
 597 00c1 11       		.uleb128 0x11
 598 00c2 01       		.uleb128 0x1
 599 00c3 12       		.uleb128 0x12
 600 00c4 06       		.uleb128 0x6
 601 00c5 58       		.uleb128 0x58
 602 00c6 0B       		.uleb128 0xb
 603 00c7 59       		.uleb128 0x59
 604 00c8 0B       		.uleb128 0xb
 605 00c9 00       		.byte	0
 606 00ca 00       		.byte	0
 607 00cb 0F       		.uleb128 0xf
 608 00cc 05       		.uleb128 0x5
 609 00cd 00       		.byte	0
 610 00ce 31       		.uleb128 0x31
 611 00cf 13       		.uleb128 0x13
 612 00d0 02       		.uleb128 0x2
 613 00d1 18       		.uleb128 0x18
 614 00d2 00       		.byte	0
 615 00d3 00       		.byte	0
 616 00d4 10       		.uleb128 0x10
 617 00d5 0B       		.uleb128 0xb
 618 00d6 01       		.byte	0x1
 619 00d7 11       		.uleb128 0x11
 620 00d8 01       		.uleb128 0x1
 621 00d9 12       		.uleb128 0x12
 622 00da 06       		.uleb128 0x6
 623 00db 00       		.byte	0
 624 00dc 00       		.byte	0
 625 00dd 11       		.uleb128 0x11
 626 00de 34       		.uleb128 0x34
 627 00df 00       		.byte	0
 628 00e0 31       		.uleb128 0x31
 629 00e1 13       		.uleb128 0x13
 630 00e2 02       		.uleb128 0x2
 631 00e3 18       		.uleb128 0x18
 632 00e4 00       		.byte	0
 633 00e5 00       		.byte	0
 634 00e6 00       		.byte	0
 635              		.section	.debug_aranges,"",%progbits
 636 0000 1C000000 		.4byte	0x1c
 637 0004 0200     		.2byte	0x2
 638 0006 00000000 		.4byte	.Ldebug_info0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 27


 639 000a 04       		.byte	0x4
 640 000b 00       		.byte	0
 641 000c 0000     		.2byte	0
 642 000e 0000     		.2byte	0
 643 0010 00000000 		.4byte	.LFB82
 644 0014 9E000000 		.4byte	.LFE82-.LFB82
 645 0018 00000000 		.4byte	0
 646 001c 00000000 		.4byte	0
 647              		.section	.debug_ranges,"",%progbits
 648              	.Ldebug_ranges0:
 649 0000 00000000 		.4byte	.LFB82
 650 0004 9E000000 		.4byte	.LFE82
 651 0008 00000000 		.4byte	0
 652 000c 00000000 		.4byte	0
 653              		.section	.debug_line,"",%progbits
 654              	.Ldebug_line0:
 655 0000 8B010000 		.section	.debug_str,"MS",%progbits,1
 655      02004D01 
 655      00000201 
 655      FB0E0D00 
 655      01010101 
 656              	.LASF2:
 657 0000 5F5F696E 		.ascii	"__int8_t\000"
 657      74385F74 
 657      00
 658              	.LASF3:
 659 0009 5F5F696E 		.ascii	"__int16_t\000"
 659      7431365F 
 659      7400
 660              	.LASF27:
 661 0013 70537263 		.ascii	"pSrcA\000"
 661      4100
 662              	.LASF28:
 663 0019 70537263 		.ascii	"pSrcB\000"
 663      4200
 664              	.LASF6:
 665 001f 5F5F696E 		.ascii	"__int32_t\000"
 665      7433325F 
 665      7400
 666              	.LASF33:
 667 0029 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 667      73657273 
 667      5C666E65 
 667      7665735C 
 667      446F6375 
 668 0056 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 668      655F7370 
 668      6565645F 
 668      73656E73 
 668      6F722E63 
 669              	.LASF35:
 670 006f 61726D5F 		.ascii	"arm_add_q7\000"
 670      6164645F 
 670      713700
 671              	.LASF23:
 672 007a 7131355F 		.ascii	"q15_t\000"
 672      7400
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 28


 673              	.LASF20:
 674 0080 666C6F61 		.ascii	"float\000"
 674      7400
 675              	.LASF13:
 676 0086 696E7438 		.ascii	"int8_t\000"
 676      5F7400
 677              	.LASF24:
 678 008d 7133315F 		.ascii	"q31_t\000"
 678      7400
 679              	.LASF1:
 680 0093 756E7369 		.ascii	"unsigned char\000"
 680      676E6564 
 680      20636861 
 680      7200
 681              	.LASF36:
 682 00a1 626C6B43 		.ascii	"blkCnt\000"
 682      6E7400
 683              	.LASF9:
 684 00a8 6C6F6E67 		.ascii	"long unsigned int\000"
 684      20756E73 
 684      69676E65 
 684      6420696E 
 684      7400
 685              	.LASF5:
 686 00ba 73686F72 		.ascii	"short unsigned int\000"
 686      7420756E 
 686      7369676E 
 686      65642069 
 686      6E7400
 687              	.LASF29:
 688 00cd 70447374 		.ascii	"pDst\000"
 688      00
 689              	.LASF32:
 690 00d2 536F7572 		.ascii	"Source\\BasicMathFunctions\\arm_add_q7.c\000"
 690      63655C42 
 690      61736963 
 690      4D617468 
 690      46756E63 
 691              	.LASF26:
 692 00f9 6E65674D 		.ascii	"negMin\000"
 692      696E00
 693              	.LASF19:
 694 0100 646F7562 		.ascii	"double\000"
 694      6C6500
 695              	.LASF8:
 696 0107 5F5F7569 		.ascii	"__uint32_t\000"
 696      6E743332 
 696      5F7400
 697              	.LASF22:
 698 0112 71375F74 		.ascii	"q7_t\000"
 698      00
 699              	.LASF12:
 700 0117 756E7369 		.ascii	"unsigned int\000"
 700      676E6564 
 700      20696E74 
 700      00
 701              	.LASF11:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 29


 702 0124 6C6F6E67 		.ascii	"long long unsigned int\000"
 702      206C6F6E 
 702      6720756E 
 702      7369676E 
 702      65642069 
 703              	.LASF31:
 704 013b 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 704      4320342E 
 704      392E3320 
 704      32303135 
 704      30333033 
 705 016e 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 705      20726576 
 705      6973696F 
 705      6E203232 
 705      31323230 
 706 01a1 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 706      30202D66 
 706      66756E63 
 706      74696F6E 
 706      2D736563 
 707              	.LASF14:
 708 01cd 696E7431 		.ascii	"int16_t\000"
 708      365F7400 
 709              	.LASF34:
 710 01d5 5F5F5353 		.ascii	"__SSAT\000"
 710      415400
 711              	.LASF15:
 712 01dc 696E7433 		.ascii	"int32_t\000"
 712      325F7400 
 713              	.LASF17:
 714 01e4 73697A65 		.ascii	"sizetype\000"
 714      74797065 
 714      00
 715              	.LASF10:
 716 01ed 6C6F6E67 		.ascii	"long long int\000"
 716      206C6F6E 
 716      6720696E 
 716      7400
 717              	.LASF30:
 718 01fb 626C6F63 		.ascii	"blockSize\000"
 718      6B53697A 
 718      6500
 719              	.LASF18:
 720 0205 63686172 		.ascii	"char\000"
 720      00
 721              	.LASF4:
 722 020a 73686F72 		.ascii	"short int\000"
 722      7420696E 
 722      7400
 723              	.LASF25:
 724 0214 706F734D 		.ascii	"posMax\000"
 724      617800
 725              	.LASF16:
 726 021b 75696E74 		.ascii	"uint32_t\000"
 726      33325F74 
 726      00
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnC1HtG.s 			page 30


 727              	.LASF7:
 728 0224 6C6F6E67 		.ascii	"long int\000"
 728      20696E74 
 728      00
 729              	.LASF21:
 730 022d 6C6F6E67 		.ascii	"long double\000"
 730      20646F75 
 730      626C6500 
 731              	.LASF0:
 732 0239 7369676E 		.ascii	"signed char\000"
 732      65642063 
 732      68617200 
 733              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
