ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_mat_mult_q31.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_lmul
  18              		.section	.text.arm_mat_mult_q31,"ax",%progbits
  19              		.align	2
  20              		.global	arm_mat_mult_q31
  21              		.code	16
  22              		.thumb_func
  23              		.type	arm_mat_mult_q31, %function
  24              	arm_mat_mult_q31:
  25              	.LFB82:
  26              		.file 1 "Source\\MatrixFunctions\\arm_mat_mult_q31.c"
   1:Source\MatrixFunctions/arm_mat_mult_q31.c **** /* ----------------------------------------------------------------------
   2:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * Project:      CMSIS DSP Library
   3:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * Title:        arm_mat_mult_q31.c
   4:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * Description:  Q31 matrix multiplication
   5:Source\MatrixFunctions/arm_mat_mult_q31.c ****  *
   6:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * $Date:        27. January 2017
   7:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * $Revision:    V.1.5.1
   8:Source\MatrixFunctions/arm_mat_mult_q31.c ****  *
   9:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * Target Processor: Cortex-M cores
  10:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * -------------------------------------------------------------------- */
  11:Source\MatrixFunctions/arm_mat_mult_q31.c **** /*
  12:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\MatrixFunctions/arm_mat_mult_q31.c ****  *
  14:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\MatrixFunctions/arm_mat_mult_q31.c ****  *
  16:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * not use this file except in compliance with the License.
  18:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * You may obtain a copy of the License at
  19:Source\MatrixFunctions/arm_mat_mult_q31.c ****  *
  20:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\MatrixFunctions/arm_mat_mult_q31.c ****  *
  22:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * See the License for the specific language governing permissions and
  26:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * limitations under the License.
  27:Source\MatrixFunctions/arm_mat_mult_q31.c ****  */
  28:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
  29:Source\MatrixFunctions/arm_mat_mult_q31.c **** #include "arm_math.h"
  30:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
  31:Source\MatrixFunctions/arm_mat_mult_q31.c **** /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 2


  32:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * @ingroup groupMatrix
  33:Source\MatrixFunctions/arm_mat_mult_q31.c ****  */
  34:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
  35:Source\MatrixFunctions/arm_mat_mult_q31.c **** /**
  36:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * @addtogroup MatrixMult
  37:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * @{
  38:Source\MatrixFunctions/arm_mat_mult_q31.c ****  */
  39:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
  40:Source\MatrixFunctions/arm_mat_mult_q31.c **** /**
  41:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * @brief Q31 matrix multiplication
  42:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * @param[in]       *pSrcA points to the first input matrix structure
  43:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * @param[in]       *pSrcB points to the second input matrix structure
  44:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * @param[out]      *pDst points to output matrix structure
  45:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * @return     		The function returns either
  46:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  47:Source\MatrixFunctions/arm_mat_mult_q31.c ****  *
  48:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * @details
  49:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:Source\MatrixFunctions/arm_mat_mult_q31.c ****  *
  51:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * \par
  52:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * The function is implemented using an internal 64-bit accumulator.
  53:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * The accumulator has a 2.62 format and maintains full precision of the intermediate
  54:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * multiplication results but provides only a single guard bit. There is no saturation
  55:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * on intermediate additions. Thus, if the accumulator overflows it wraps around and
  56:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * distorts the result. The input signals should be scaled down to avoid intermediate
  57:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * overflows. The input is thus scaled down by log2(numColsA) bits
  58:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * to avoid overflows, as a total of numColsA additions are performed internally.
  59:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * The 2.62 accumulator is right shifted by 31 bits and saturated to 1.31 format to yield the final
  60:Source\MatrixFunctions/arm_mat_mult_q31.c ****  *
  61:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * \par
  62:Source\MatrixFunctions/arm_mat_mult_q31.c ****  * See <code>arm_mat_mult_fast_q31()</code> for a faster but less precise implementation of this fu
  63:Source\MatrixFunctions/arm_mat_mult_q31.c ****  *
  64:Source\MatrixFunctions/arm_mat_mult_q31.c ****  */
  65:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
  66:Source\MatrixFunctions/arm_mat_mult_q31.c **** arm_status arm_mat_mult_q31(
  67:Source\MatrixFunctions/arm_mat_mult_q31.c ****   const arm_matrix_instance_q31 * pSrcA,
  68:Source\MatrixFunctions/arm_mat_mult_q31.c ****   const arm_matrix_instance_q31 * pSrcB,
  69:Source\MatrixFunctions/arm_mat_mult_q31.c ****   arm_matrix_instance_q31 * pDst)
  70:Source\MatrixFunctions/arm_mat_mult_q31.c **** {
  27              		.loc 1 70 0
  28              		.cfi_startproc
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              		.cfi_def_cfa_offset 20
  31              		.cfi_offset 4, -20
  32              		.cfi_offset 5, -16
  33              		.cfi_offset 6, -12
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 9DB0     		sub	sp, sp, #116
  37              		.cfi_def_cfa_offset 136
  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40 0006 F862     		str	r0, [r7, #44]
  41 0008 B962     		str	r1, [r7, #40]
  42 000a 7A62     		str	r2, [r7, #36]
  71:Source\MatrixFunctions/arm_mat_mult_q31.c ****   q31_t *pIn1 = pSrcA->pData;                    /* input data matrix pointer A */
  43              		.loc 1 71 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 3


  44 000c FB6A     		ldr	r3, [r7, #44]
  45 000e 5B68     		ldr	r3, [r3, #4]
  46 0010 FB66     		str	r3, [r7, #108]
  72:Source\MatrixFunctions/arm_mat_mult_q31.c ****   q31_t *pIn2 = pSrcB->pData;                    /* input data matrix pointer B */
  47              		.loc 1 72 0
  48 0012 BB6A     		ldr	r3, [r7, #40]
  49 0014 5B68     		ldr	r3, [r3, #4]
  50 0016 BB66     		str	r3, [r7, #104]
  73:Source\MatrixFunctions/arm_mat_mult_q31.c ****   q31_t *pInA = pSrcA->pData;                    /* input data matrix pointer A */
  51              		.loc 1 73 0
  52 0018 FB6A     		ldr	r3, [r7, #44]
  53 001a 5B68     		ldr	r3, [r3, #4]
  54 001c 7B66     		str	r3, [r7, #100]
  74:Source\MatrixFunctions/arm_mat_mult_q31.c ****   q31_t *pOut = pDst->pData;                     /* output data matrix pointer */
  55              		.loc 1 74 0
  56 001e 7B6A     		ldr	r3, [r7, #36]
  57 0020 5B68     		ldr	r3, [r3, #4]
  58 0022 FB64     		str	r3, [r7, #76]
  75:Source\MatrixFunctions/arm_mat_mult_q31.c ****   q31_t *px;                                     /* Temporary output data matrix pointer */
  76:Source\MatrixFunctions/arm_mat_mult_q31.c ****   q63_t sum;                                     /* Accumulator */
  77:Source\MatrixFunctions/arm_mat_mult_q31.c ****   uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
  59              		.loc 1 77 0
  60 0024 2A23     		mov	r3, #42
  61 0026 2022     		mov	r2, #32
  62 0028 9446     		mov	ip, r2
  63 002a BC44     		add	ip, ip, r7
  64 002c 6344     		add	r3, r3, ip
  65 002e FA6A     		ldr	r2, [r7, #44]
  66 0030 1288     		ldrh	r2, [r2]
  67 0032 1A80     		strh	r2, [r3]
  78:Source\MatrixFunctions/arm_mat_mult_q31.c ****   uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  68              		.loc 1 78 0
  69 0034 2823     		mov	r3, #40
  70 0036 2022     		mov	r2, #32
  71 0038 9446     		mov	ip, r2
  72 003a BC44     		add	ip, ip, r7
  73 003c 6344     		add	r3, r3, ip
  74 003e BA6A     		ldr	r2, [r7, #40]
  75 0040 5288     		ldrh	r2, [r2, #2]
  76 0042 1A80     		strh	r2, [r3]
  79:Source\MatrixFunctions/arm_mat_mult_q31.c ****   uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
  77              		.loc 1 79 0
  78 0044 2623     		mov	r3, #38
  79 0046 2022     		mov	r2, #32
  80 0048 9446     		mov	ip, r2
  81 004a BC44     		add	ip, ip, r7
  82 004c 6344     		add	r3, r3, ip
  83 004e FA6A     		ldr	r2, [r7, #44]
  84 0050 5288     		ldrh	r2, [r2, #2]
  85 0052 1A80     		strh	r2, [r3]
  80:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
  81:Source\MatrixFunctions/arm_mat_mult_q31.c **** #if defined (ARM_MATH_DSP)
  82:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
  83:Source\MatrixFunctions/arm_mat_mult_q31.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  84:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
  85:Source\MatrixFunctions/arm_mat_mult_q31.c ****   uint16_t col, i = 0u, j, row = numRowsA, colCnt;      /* loop counters */
  86:Source\MatrixFunctions/arm_mat_mult_q31.c ****   arm_status status;                             /* status of matrix multiplication */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 4


  87:Source\MatrixFunctions/arm_mat_mult_q31.c ****   q31_t a0, a1, a2, a3, b0, b1, b2, b3;
  88:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
  89:Source\MatrixFunctions/arm_mat_mult_q31.c **** #ifdef ARM_MATH_MATRIX_CHECK
  90:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
  91:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
  92:Source\MatrixFunctions/arm_mat_mult_q31.c ****   /* Check for matrix mismatch condition */
  93:Source\MatrixFunctions/arm_mat_mult_q31.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
  94:Source\MatrixFunctions/arm_mat_mult_q31.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
  95:Source\MatrixFunctions/arm_mat_mult_q31.c ****   {
  96:Source\MatrixFunctions/arm_mat_mult_q31.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  97:Source\MatrixFunctions/arm_mat_mult_q31.c ****     status = ARM_MATH_SIZE_MISMATCH;
  98:Source\MatrixFunctions/arm_mat_mult_q31.c ****   }
  99:Source\MatrixFunctions/arm_mat_mult_q31.c ****   else
 100:Source\MatrixFunctions/arm_mat_mult_q31.c **** #endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
 101:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 102:Source\MatrixFunctions/arm_mat_mult_q31.c ****   {
 103:Source\MatrixFunctions/arm_mat_mult_q31.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 104:Source\MatrixFunctions/arm_mat_mult_q31.c ****     /* row loop */
 105:Source\MatrixFunctions/arm_mat_mult_q31.c ****     do
 106:Source\MatrixFunctions/arm_mat_mult_q31.c ****     {
 107:Source\MatrixFunctions/arm_mat_mult_q31.c ****       /* Output pointer is set to starting address of the row being processed */
 108:Source\MatrixFunctions/arm_mat_mult_q31.c ****       px = pOut + i;
 109:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 110:Source\MatrixFunctions/arm_mat_mult_q31.c ****       /* For every row wise process, the column loop counter is to be initiated */
 111:Source\MatrixFunctions/arm_mat_mult_q31.c ****       col = numColsB;
 112:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 113:Source\MatrixFunctions/arm_mat_mult_q31.c ****       /* For every row wise process, the pIn2 pointer is set
 114:Source\MatrixFunctions/arm_mat_mult_q31.c ****        ** to the starting address of the pSrcB data */
 115:Source\MatrixFunctions/arm_mat_mult_q31.c ****       pIn2 = pSrcB->pData;
 116:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 117:Source\MatrixFunctions/arm_mat_mult_q31.c ****       j = 0u;
 118:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 119:Source\MatrixFunctions/arm_mat_mult_q31.c ****       /* column loop */
 120:Source\MatrixFunctions/arm_mat_mult_q31.c ****       do
 121:Source\MatrixFunctions/arm_mat_mult_q31.c ****       {
 122:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 123:Source\MatrixFunctions/arm_mat_mult_q31.c ****         sum = 0;
 124:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 125:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* Initiate the pointer pIn1 to point to the starting address of pInA */
 126:Source\MatrixFunctions/arm_mat_mult_q31.c ****         pIn1 = pInA;
 127:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 128:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 129:Source\MatrixFunctions/arm_mat_mult_q31.c ****         colCnt = numColsA >> 2;
 130:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 131:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 132:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* matrix multiplication */
 133:Source\MatrixFunctions/arm_mat_mult_q31.c ****         while (colCnt > 0u)
 134:Source\MatrixFunctions/arm_mat_mult_q31.c ****         {
 135:Source\MatrixFunctions/arm_mat_mult_q31.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 136:Source\MatrixFunctions/arm_mat_mult_q31.c ****           /* Perform the multiply-accumulates */
 137:Source\MatrixFunctions/arm_mat_mult_q31.c ****           b0 = *pIn2;
 138:Source\MatrixFunctions/arm_mat_mult_q31.c ****           pIn2 += numColsB;
 139:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 140:Source\MatrixFunctions/arm_mat_mult_q31.c ****           a0 = *pIn1++;
 141:Source\MatrixFunctions/arm_mat_mult_q31.c ****           a1 = *pIn1++;
 142:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 143:Source\MatrixFunctions/arm_mat_mult_q31.c ****           b1 = *pIn2;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 5


 144:Source\MatrixFunctions/arm_mat_mult_q31.c ****           pIn2 += numColsB;
 145:Source\MatrixFunctions/arm_mat_mult_q31.c ****           b2 = *pIn2;
 146:Source\MatrixFunctions/arm_mat_mult_q31.c ****           pIn2 += numColsB;
 147:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 148:Source\MatrixFunctions/arm_mat_mult_q31.c ****           sum += (q63_t) a0 *b0;
 149:Source\MatrixFunctions/arm_mat_mult_q31.c ****           sum += (q63_t) a1 *b1;
 150:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 151:Source\MatrixFunctions/arm_mat_mult_q31.c ****           a2 = *pIn1++;
 152:Source\MatrixFunctions/arm_mat_mult_q31.c ****           a3 = *pIn1++;
 153:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 154:Source\MatrixFunctions/arm_mat_mult_q31.c ****           b3 = *pIn2;
 155:Source\MatrixFunctions/arm_mat_mult_q31.c ****           pIn2 += numColsB;
 156:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 157:Source\MatrixFunctions/arm_mat_mult_q31.c ****           sum += (q63_t) a2 *b2;
 158:Source\MatrixFunctions/arm_mat_mult_q31.c ****           sum += (q63_t) a3 *b3;
 159:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 160:Source\MatrixFunctions/arm_mat_mult_q31.c ****           /* Decrement the loop counter */
 161:Source\MatrixFunctions/arm_mat_mult_q31.c ****           colCnt--;
 162:Source\MatrixFunctions/arm_mat_mult_q31.c ****         }
 163:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 164:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* If the columns of pSrcA is not a multiple of 4, compute any remaining output samples her
 165:Source\MatrixFunctions/arm_mat_mult_q31.c ****          ** No loop unrolling is used. */
 166:Source\MatrixFunctions/arm_mat_mult_q31.c ****         colCnt = numColsA % 0x4u;
 167:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 168:Source\MatrixFunctions/arm_mat_mult_q31.c ****         while (colCnt > 0u)
 169:Source\MatrixFunctions/arm_mat_mult_q31.c ****         {
 170:Source\MatrixFunctions/arm_mat_mult_q31.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 171:Source\MatrixFunctions/arm_mat_mult_q31.c ****           /* Perform the multiply-accumulates */
 172:Source\MatrixFunctions/arm_mat_mult_q31.c ****           sum += (q63_t) * pIn1++ * *pIn2;
 173:Source\MatrixFunctions/arm_mat_mult_q31.c ****           pIn2 += numColsB;
 174:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 175:Source\MatrixFunctions/arm_mat_mult_q31.c ****           /* Decrement the loop counter */
 176:Source\MatrixFunctions/arm_mat_mult_q31.c ****           colCnt--;
 177:Source\MatrixFunctions/arm_mat_mult_q31.c ****         }
 178:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 179:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* Convert the result from 2.62 to 1.31 format and store in destination buffer */
 180:Source\MatrixFunctions/arm_mat_mult_q31.c ****         *px++ = (q31_t) (sum >> 31);
 181:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 182:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* Update the pointer pIn2 to point to the  starting address of the next column */
 183:Source\MatrixFunctions/arm_mat_mult_q31.c ****         j++;
 184:Source\MatrixFunctions/arm_mat_mult_q31.c ****         pIn2 = (pSrcB->pData) + j;
 185:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 186:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* Decrement the column loop counter */
 187:Source\MatrixFunctions/arm_mat_mult_q31.c ****         col--;
 188:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 189:Source\MatrixFunctions/arm_mat_mult_q31.c ****       } while (col > 0u);
 190:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 191:Source\MatrixFunctions/arm_mat_mult_q31.c **** #else
 192:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 193:Source\MatrixFunctions/arm_mat_mult_q31.c ****   /* Run the below code for Cortex-M0 */
 194:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 195:Source\MatrixFunctions/arm_mat_mult_q31.c ****   q31_t *pInB = pSrcB->pData;                    /* input data matrix pointer B */
  86              		.loc 1 195 0
  87 0054 BB6A     		ldr	r3, [r7, #40]
  88 0056 5B68     		ldr	r3, [r3, #4]
  89 0058 3B64     		str	r3, [r7, #64]
 196:Source\MatrixFunctions/arm_mat_mult_q31.c ****   uint16_t col, i = 0u, row = numRowsA, colCnt;  /* loop counters */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 6


  90              		.loc 1 196 0
  91 005a 3423     		mov	r3, #52
  92 005c 2022     		mov	r2, #32
  93 005e 9446     		mov	ip, r2
  94 0060 BC44     		add	ip, ip, r7
  95 0062 6344     		add	r3, r3, ip
  96 0064 0022     		mov	r2, #0
  97 0066 1A80     		strh	r2, [r3]
  98 0068 3223     		mov	r3, #50
  99 006a 2022     		mov	r2, #32
 100 006c 9446     		mov	ip, r2
 101 006e BC44     		add	ip, ip, r7
 102 0070 6344     		add	r3, r3, ip
 103 0072 2A22     		mov	r2, #42
 104 0074 2021     		mov	r1, #32
 105 0076 8C46     		mov	ip, r1
 106 0078 BC44     		add	ip, ip, r7
 107 007a 6244     		add	r2, r2, ip
 108 007c 1288     		ldrh	r2, [r2]
 109 007e 1A80     		strh	r2, [r3]
 110              	.L8:
 197:Source\MatrixFunctions/arm_mat_mult_q31.c ****   arm_status status;                             /* status of matrix multiplication */
 198:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 199:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 200:Source\MatrixFunctions/arm_mat_mult_q31.c **** #ifdef ARM_MATH_MATRIX_CHECK
 201:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 202:Source\MatrixFunctions/arm_mat_mult_q31.c ****   /* Check for matrix mismatch condition */
 203:Source\MatrixFunctions/arm_mat_mult_q31.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
 204:Source\MatrixFunctions/arm_mat_mult_q31.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
 205:Source\MatrixFunctions/arm_mat_mult_q31.c ****   {
 206:Source\MatrixFunctions/arm_mat_mult_q31.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 207:Source\MatrixFunctions/arm_mat_mult_q31.c ****     status = ARM_MATH_SIZE_MISMATCH;
 208:Source\MatrixFunctions/arm_mat_mult_q31.c ****   }
 209:Source\MatrixFunctions/arm_mat_mult_q31.c ****   else
 210:Source\MatrixFunctions/arm_mat_mult_q31.c **** #endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
 211:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 212:Source\MatrixFunctions/arm_mat_mult_q31.c ****   {
 213:Source\MatrixFunctions/arm_mat_mult_q31.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 214:Source\MatrixFunctions/arm_mat_mult_q31.c ****     /* row loop */
 215:Source\MatrixFunctions/arm_mat_mult_q31.c ****     do
 216:Source\MatrixFunctions/arm_mat_mult_q31.c ****     {
 217:Source\MatrixFunctions/arm_mat_mult_q31.c ****       /* Output pointer is set to starting address of the row being processed */
 218:Source\MatrixFunctions/arm_mat_mult_q31.c ****       px = pOut + i;
 111              		.loc 1 218 0
 112 0080 3423     		mov	r3, #52
 113 0082 2022     		mov	r2, #32
 114 0084 9446     		mov	ip, r2
 115 0086 BC44     		add	ip, ip, r7
 116 0088 6344     		add	r3, r3, ip
 117 008a 1B88     		ldrh	r3, [r3]
 118 008c 9B00     		lsl	r3, r3, #2
 119 008e FA6C     		ldr	r2, [r7, #76]
 120 0090 D318     		add	r3, r2, r3
 121 0092 3B66     		str	r3, [r7, #96]
 219:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 220:Source\MatrixFunctions/arm_mat_mult_q31.c ****       /* For every row wise process, the column loop counter is to be initiated */
 221:Source\MatrixFunctions/arm_mat_mult_q31.c ****       col = numColsB;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 7


 122              		.loc 1 221 0
 123 0094 3623     		mov	r3, #54
 124 0096 2022     		mov	r2, #32
 125 0098 9446     		mov	ip, r2
 126 009a BC44     		add	ip, ip, r7
 127 009c 6344     		add	r3, r3, ip
 128 009e 2822     		mov	r2, #40
 129 00a0 2021     		mov	r1, #32
 130 00a2 8C46     		mov	ip, r1
 131 00a4 BC44     		add	ip, ip, r7
 132 00a6 6244     		add	r2, r2, ip
 133 00a8 1288     		ldrh	r2, [r2]
 134 00aa 1A80     		strh	r2, [r3]
 222:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 223:Source\MatrixFunctions/arm_mat_mult_q31.c ****       /* For every row wise process, the pIn2 pointer is set
 224:Source\MatrixFunctions/arm_mat_mult_q31.c ****        ** to the starting address of the pSrcB data */
 225:Source\MatrixFunctions/arm_mat_mult_q31.c ****       pIn2 = pSrcB->pData;
 135              		.loc 1 225 0
 136 00ac BB6A     		ldr	r3, [r7, #40]
 137 00ae 5B68     		ldr	r3, [r3, #4]
 138 00b0 BB66     		str	r3, [r7, #104]
 139              	.L7:
 226:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 227:Source\MatrixFunctions/arm_mat_mult_q31.c ****       /* column loop */
 228:Source\MatrixFunctions/arm_mat_mult_q31.c ****       do
 229:Source\MatrixFunctions/arm_mat_mult_q31.c ****       {
 230:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 231:Source\MatrixFunctions/arm_mat_mult_q31.c ****         sum = 0;
 140              		.loc 1 231 0
 141 00b2 0023     		mov	r3, #0
 142 00b4 0024     		mov	r4, #0
 143 00b6 BB65     		str	r3, [r7, #88]
 144 00b8 FC65     		str	r4, [r7, #92]
 232:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 233:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* Initiate the pointer pIn1 to point to the starting address of pInA */
 234:Source\MatrixFunctions/arm_mat_mult_q31.c ****         pIn1 = pInA;
 145              		.loc 1 234 0
 146 00ba 7B6E     		ldr	r3, [r7, #100]
 147 00bc FB66     		str	r3, [r7, #108]
 235:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 236:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* Matrix A columns number of MAC operations are to be performed */
 237:Source\MatrixFunctions/arm_mat_mult_q31.c ****         colCnt = numColsA;
 148              		.loc 1 237 0
 149 00be 3023     		mov	r3, #48
 150 00c0 2022     		mov	r2, #32
 151 00c2 9446     		mov	ip, r2
 152 00c4 BC44     		add	ip, ip, r7
 153 00c6 6344     		add	r3, r3, ip
 154 00c8 2622     		mov	r2, #38
 155 00ca 2021     		mov	r1, #32
 156 00cc 8C46     		mov	ip, r1
 157 00ce BC44     		add	ip, ip, r7
 158 00d0 6244     		add	r2, r2, ip
 159 00d2 1288     		ldrh	r2, [r2]
 160 00d4 1A80     		strh	r2, [r3]
 238:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 239:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* matrix multiplication */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 8


 240:Source\MatrixFunctions/arm_mat_mult_q31.c ****         while (colCnt > 0u)
 161              		.loc 1 240 0
 162 00d6 32E0     		b	.L2
 163              	.L3:
 241:Source\MatrixFunctions/arm_mat_mult_q31.c ****         {
 242:Source\MatrixFunctions/arm_mat_mult_q31.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 243:Source\MatrixFunctions/arm_mat_mult_q31.c ****           /* Perform the multiply-accumulates */
 244:Source\MatrixFunctions/arm_mat_mult_q31.c ****           sum += (q63_t) * pIn1++ * *pIn2;
 164              		.loc 1 244 0
 165 00d8 FB6E     		ldr	r3, [r7, #108]
 166 00da 1A1D     		add	r2, r3, #4
 167 00dc FA66     		str	r2, [r7, #108]
 168 00de 1B68     		ldr	r3, [r3]
 169 00e0 BB61     		str	r3, [r7, #24]
 170 00e2 DB17     		asr	r3, r3, #31
 171 00e4 FB61     		str	r3, [r7, #28]
 172 00e6 BB6E     		ldr	r3, [r7, #104]
 173 00e8 1B68     		ldr	r3, [r3]
 174 00ea 3B61     		str	r3, [r7, #16]
 175 00ec DB17     		asr	r3, r3, #31
 176 00ee 7B61     		str	r3, [r7, #20]
 177 00f0 B869     		ldr	r0, [r7, #24]
 178 00f2 F969     		ldr	r1, [r7, #28]
 179 00f4 3A69     		ldr	r2, [r7, #16]
 180 00f6 7B69     		ldr	r3, [r7, #20]
 181 00f8 FFF7FEFF 		bl	__aeabi_lmul
 182 00fc 031C     		mov	r3, r0
 183 00fe 0C1C     		mov	r4, r1
 184 0100 191C     		mov	r1, r3
 185 0102 221C     		mov	r2, r4
 186 0104 BB6D     		ldr	r3, [r7, #88]
 187 0106 FC6D     		ldr	r4, [r7, #92]
 188 0108 5B18     		add	r3, r3, r1
 189 010a 5441     		adc	r4, r4, r2
 190 010c BB65     		str	r3, [r7, #88]
 191 010e FC65     		str	r4, [r7, #92]
 245:Source\MatrixFunctions/arm_mat_mult_q31.c ****           pIn2 += numColsB;
 192              		.loc 1 245 0
 193 0110 2823     		mov	r3, #40
 194 0112 2022     		mov	r2, #32
 195 0114 9446     		mov	ip, r2
 196 0116 BC44     		add	ip, ip, r7
 197 0118 6344     		add	r3, r3, ip
 198 011a 1B88     		ldrh	r3, [r3]
 199 011c 9B00     		lsl	r3, r3, #2
 200 011e BA6E     		ldr	r2, [r7, #104]
 201 0120 D318     		add	r3, r2, r3
 202 0122 BB66     		str	r3, [r7, #104]
 246:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 247:Source\MatrixFunctions/arm_mat_mult_q31.c ****           /* Decrement the loop counter */
 248:Source\MatrixFunctions/arm_mat_mult_q31.c ****           colCnt--;
 203              		.loc 1 248 0
 204 0124 3023     		mov	r3, #48
 205 0126 2022     		mov	r2, #32
 206 0128 9446     		mov	ip, r2
 207 012a BC44     		add	ip, ip, r7
 208 012c 6344     		add	r3, r3, ip
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 9


 209 012e 1A88     		ldrh	r2, [r3]
 210 0130 3023     		mov	r3, #48
 211 0132 2021     		mov	r1, #32
 212 0134 8C46     		mov	ip, r1
 213 0136 BC44     		add	ip, ip, r7
 214 0138 6344     		add	r3, r3, ip
 215 013a 013A     		sub	r2, r2, #1
 216 013c 1A80     		strh	r2, [r3]
 217              	.L2:
 240:Source\MatrixFunctions/arm_mat_mult_q31.c ****         {
 218              		.loc 1 240 0
 219 013e 3023     		mov	r3, #48
 220 0140 2022     		mov	r2, #32
 221 0142 9446     		mov	ip, r2
 222 0144 BC44     		add	ip, ip, r7
 223 0146 6344     		add	r3, r3, ip
 224 0148 1B88     		ldrh	r3, [r3]
 225 014a 002B     		cmp	r3, #0
 226 014c C4D1     		bne	.L3
 249:Source\MatrixFunctions/arm_mat_mult_q31.c ****         }
 250:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 251:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* Convert the result from 2.62 to 1.31 format and store in destination buffer */
 252:Source\MatrixFunctions/arm_mat_mult_q31.c ****         *px++ = (q31_t) clip_q63_to_q31(sum >> 31);
 227              		.loc 1 252 0
 228 014e 396E     		ldr	r1, [r7, #96]
 229 0150 0B1D     		add	r3, r1, #4
 230 0152 3B66     		str	r3, [r7, #96]
 231 0154 FB6D     		ldr	r3, [r7, #92]
 232 0156 5B00     		lsl	r3, r3, #1
 233 0158 BA6D     		ldr	r2, [r7, #88]
 234 015a D50F     		lsr	r5, r2, #31
 235 015c 1D43     		orr	r5, r3
 236 015e FB6D     		ldr	r3, [r7, #92]
 237 0160 DE17     		asr	r6, r3, #31
 238 0162 3D63     		str	r5, [r7, #48]
 239 0164 7E63     		str	r6, [r7, #52]
 240              	.LBB4:
 241              	.LBB5:
 242              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 10


  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 11


  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 12


 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 13


 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 14


 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 15


 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 16


 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 17


 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 18


 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 243              		.loc 2 513 0
 244 0166 7B6B     		ldr	r3, [r7, #52]
 245 0168 1B00     		asr	r3, r3, #0
 246 016a BB60     		str	r3, [r7, #8]
 247 016c 7B6B     		ldr	r3, [r7, #52]
 248 016e DB17     		asr	r3, r3, #31
 249 0170 FB60     		str	r3, [r7, #12]
 250 0172 BA68     		ldr	r2, [r7, #8]
 251 0174 3B6B     		ldr	r3, [r7, #48]
 252 0176 DB17     		asr	r3, r3, #31
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 253              		.loc 2 514 0
 254 0178 9A42     		cmp	r2, r3
 255 017a 09D0     		beq	.L4
 256 017c 7B6B     		ldr	r3, [r7, #52]
 257 017e DB17     		asr	r3, r3, #31
 258 0180 3B60     		str	r3, [r7]
 259 0182 7B6B     		ldr	r3, [r7, #52]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 19


 260 0184 DB17     		asr	r3, r3, #31
 261 0186 7B60     		str	r3, [r7, #4]
 262 0188 3A68     		ldr	r2, [r7]
 263 018a 374B     		ldr	r3, .L11
 264 018c 5340     		eor	r3, r2
 265 018e 00E0     		b	.L10
 266              	.L4:
 267 0190 3B6B     		ldr	r3, [r7, #48]
 268              	.L10:
 269              	.LBE5:
 270              	.LBE4:
 271              		.loc 1 252 0
 272 0192 0B60     		str	r3, [r1]
 253:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 254:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* Decrement the column loop counter */
 255:Source\MatrixFunctions/arm_mat_mult_q31.c ****         col--;
 273              		.loc 1 255 0
 274 0194 3623     		mov	r3, #54
 275 0196 2022     		mov	r2, #32
 276 0198 9446     		mov	ip, r2
 277 019a BC44     		add	ip, ip, r7
 278 019c 6344     		add	r3, r3, ip
 279 019e 1A88     		ldrh	r2, [r3]
 280 01a0 3623     		mov	r3, #54
 281 01a2 2021     		mov	r1, #32
 282 01a4 8C46     		mov	ip, r1
 283 01a6 BC44     		add	ip, ip, r7
 284 01a8 6344     		add	r3, r3, ip
 285 01aa 013A     		sub	r2, r2, #1
 286 01ac 1A80     		strh	r2, [r3]
 256:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 257:Source\MatrixFunctions/arm_mat_mult_q31.c ****         /* Update the pointer pIn2 to point to the  starting address of the next column */
 258:Source\MatrixFunctions/arm_mat_mult_q31.c ****         pIn2 = pInB + (numColsB - col);
 287              		.loc 1 258 0
 288 01ae 2823     		mov	r3, #40
 289 01b0 2022     		mov	r2, #32
 290 01b2 9446     		mov	ip, r2
 291 01b4 BC44     		add	ip, ip, r7
 292 01b6 6344     		add	r3, r3, ip
 293 01b8 1A88     		ldrh	r2, [r3]
 294 01ba 3623     		mov	r3, #54
 295 01bc 2021     		mov	r1, #32
 296 01be 8C46     		mov	ip, r1
 297 01c0 BC44     		add	ip, ip, r7
 298 01c2 6344     		add	r3, r3, ip
 299 01c4 1B88     		ldrh	r3, [r3]
 300 01c6 D31A     		sub	r3, r2, r3
 301 01c8 9B00     		lsl	r3, r3, #2
 302 01ca 3A6C     		ldr	r2, [r7, #64]
 303 01cc D318     		add	r3, r2, r3
 304 01ce BB66     		str	r3, [r7, #104]
 259:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 260:Source\MatrixFunctions/arm_mat_mult_q31.c ****       } while (col > 0u);
 305              		.loc 1 260 0
 306 01d0 3623     		mov	r3, #54
 307 01d2 2022     		mov	r2, #32
 308 01d4 9446     		mov	ip, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 20


 309 01d6 BC44     		add	ip, ip, r7
 310 01d8 6344     		add	r3, r3, ip
 311 01da 1B88     		ldrh	r3, [r3]
 312 01dc 002B     		cmp	r3, #0
 313 01de 00D0     		beq	.LCB261
 314 01e0 67E7     		b	.L7	@long jump
 315              	.LCB261:
 261:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 262:Source\MatrixFunctions/arm_mat_mult_q31.c **** #endif
 263:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 264:Source\MatrixFunctions/arm_mat_mult_q31.c ****       /* Update the pointer pInA to point to the  starting address of the next row */
 265:Source\MatrixFunctions/arm_mat_mult_q31.c ****       i = i + numColsB;
 316              		.loc 1 265 0
 317 01e2 3423     		mov	r3, #52
 318 01e4 2022     		mov	r2, #32
 319 01e6 BA18     		add	r2, r7, r2
 320 01e8 D018     		add	r0, r2, r3
 321 01ea 3423     		mov	r3, #52
 322 01ec 2022     		mov	r2, #32
 323 01ee 9446     		mov	ip, r2
 324 01f0 BC44     		add	ip, ip, r7
 325 01f2 6344     		add	r3, r3, ip
 326 01f4 2822     		mov	r2, #40
 327 01f6 2021     		mov	r1, #32
 328 01f8 7918     		add	r1, r7, r1
 329 01fa 8918     		add	r1, r1, r2
 330 01fc 1A88     		ldrh	r2, [r3]
 331 01fe 0B88     		ldrh	r3, [r1]
 332 0200 D318     		add	r3, r2, r3
 333 0202 0380     		strh	r3, [r0]
 266:Source\MatrixFunctions/arm_mat_mult_q31.c ****       pInA = pInA + numColsA;
 334              		.loc 1 266 0
 335 0204 2623     		mov	r3, #38
 336 0206 2022     		mov	r2, #32
 337 0208 9446     		mov	ip, r2
 338 020a BC44     		add	ip, ip, r7
 339 020c 6344     		add	r3, r3, ip
 340 020e 1B88     		ldrh	r3, [r3]
 341 0210 9B00     		lsl	r3, r3, #2
 342 0212 7A6E     		ldr	r2, [r7, #100]
 343 0214 D318     		add	r3, r2, r3
 344 0216 7B66     		str	r3, [r7, #100]
 267:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 268:Source\MatrixFunctions/arm_mat_mult_q31.c ****       /* Decrement the row loop counter */
 269:Source\MatrixFunctions/arm_mat_mult_q31.c ****       row--;
 345              		.loc 1 269 0
 346 0218 3223     		mov	r3, #50
 347 021a 2022     		mov	r2, #32
 348 021c 9446     		mov	ip, r2
 349 021e BC44     		add	ip, ip, r7
 350 0220 6344     		add	r3, r3, ip
 351 0222 1A88     		ldrh	r2, [r3]
 352 0224 3223     		mov	r3, #50
 353 0226 2021     		mov	r1, #32
 354 0228 8C46     		mov	ip, r1
 355 022a BC44     		add	ip, ip, r7
 356 022c 6344     		add	r3, r3, ip
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 21


 357 022e 013A     		sub	r2, r2, #1
 358 0230 1A80     		strh	r2, [r3]
 270:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 271:Source\MatrixFunctions/arm_mat_mult_q31.c ****     } while (row > 0u);
 359              		.loc 1 271 0
 360 0232 3223     		mov	r3, #50
 361 0234 2022     		mov	r2, #32
 362 0236 9446     		mov	ip, r2
 363 0238 BC44     		add	ip, ip, r7
 364 023a 6344     		add	r3, r3, ip
 365 023c 1B88     		ldrh	r3, [r3]
 366 023e 002B     		cmp	r3, #0
 367 0240 00D0     		beq	.LCB309
 368 0242 1DE7     		b	.L8	@long jump
 369              	.LCB309:
 272:Source\MatrixFunctions/arm_mat_mult_q31.c **** 
 273:Source\MatrixFunctions/arm_mat_mult_q31.c ****     /* set status as ARM_MATH_SUCCESS */
 274:Source\MatrixFunctions/arm_mat_mult_q31.c ****     status = ARM_MATH_SUCCESS;
 370              		.loc 1 274 0
 371 0244 1F23     		mov	r3, #31
 372 0246 2022     		mov	r2, #32
 373 0248 9446     		mov	ip, r2
 374 024a BC44     		add	ip, ip, r7
 375 024c 6344     		add	r3, r3, ip
 376 024e 0022     		mov	r2, #0
 377 0250 1A70     		strb	r2, [r3]
 275:Source\MatrixFunctions/arm_mat_mult_q31.c ****   }
 276:Source\MatrixFunctions/arm_mat_mult_q31.c ****   /* Return to application */
 277:Source\MatrixFunctions/arm_mat_mult_q31.c ****   return (status);
 378              		.loc 1 277 0
 379 0252 1F23     		mov	r3, #31
 380 0254 2022     		mov	r2, #32
 381 0256 9446     		mov	ip, r2
 382 0258 BC44     		add	ip, ip, r7
 383 025a 6344     		add	r3, r3, ip
 384 025c 1B78     		ldrb	r3, [r3]
 385 025e 5BB2     		sxtb	r3, r3
 278:Source\MatrixFunctions/arm_mat_mult_q31.c **** }
 386              		.loc 1 278 0
 387 0260 181C     		mov	r0, r3
 388 0262 BD46     		mov	sp, r7
 389 0264 1DB0     		add	sp, sp, #116
 390              		@ sp needed
 391 0266 F0BD     		pop	{r4, r5, r6, r7, pc}
 392              	.L12:
 393              		.align	2
 394              	.L11:
 395 0268 FFFFFF7F 		.word	2147483647
 396              		.cfi_endproc
 397              	.LFE82:
 398              		.size	arm_mat_mult_q31, .-arm_mat_mult_q31
 399              		.text
 400              	.Letext0:
 401              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 402              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 403              		.section	.debug_info,"",%progbits
 404              	.Ldebug_info0:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 22


 405 0000 C7020000 		.4byte	0x2c7
 406 0004 0400     		.2byte	0x4
 407 0006 00000000 		.4byte	.Ldebug_abbrev0
 408 000a 04       		.byte	0x4
 409 000b 01       		.uleb128 0x1
 410 000c 93010000 		.4byte	.LASF47
 411 0010 01       		.byte	0x1
 412 0011 1C010000 		.4byte	.LASF48
 413 0015 4B000000 		.4byte	.LASF49
 414 0019 00000000 		.4byte	.Ldebug_ranges0+0
 415 001d 00000000 		.4byte	0
 416 0021 00000000 		.4byte	.Ldebug_line0
 417 0025 02       		.uleb128 0x2
 418 0026 01       		.byte	0x1
 419 0027 06       		.byte	0x6
 420 0028 F4020000 		.4byte	.LASF0
 421 002c 02       		.uleb128 0x2
 422 002d 01       		.byte	0x1
 423 002e 08       		.byte	0x8
 424 002f A9000000 		.4byte	.LASF1
 425 0033 02       		.uleb128 0x2
 426 0034 02       		.byte	0x2
 427 0035 05       		.byte	0x5
 428 0036 B6020000 		.4byte	.LASF2
 429 003a 03       		.uleb128 0x3
 430 003b 01010000 		.4byte	.LASF4
 431 003f 03       		.byte	0x3
 432 0040 2B       		.byte	0x2b
 433 0041 45000000 		.4byte	0x45
 434 0045 02       		.uleb128 0x2
 435 0046 02       		.byte	0x2
 436 0047 07       		.byte	0x7
 437 0048 DF000000 		.4byte	.LASF3
 438 004c 03       		.uleb128 0x3
 439 004d 41000000 		.4byte	.LASF5
 440 0051 03       		.byte	0x3
 441 0052 3F       		.byte	0x3f
 442 0053 57000000 		.4byte	0x57
 443 0057 02       		.uleb128 0x2
 444 0058 04       		.byte	0x4
 445 0059 05       		.byte	0x5
 446 005a D4020000 		.4byte	.LASF6
 447 005e 02       		.uleb128 0x2
 448 005f 04       		.byte	0x4
 449 0060 07       		.byte	0x7
 450 0061 CD000000 		.4byte	.LASF7
 451 0065 03       		.uleb128 0x3
 452 0066 F7000000 		.4byte	.LASF8
 453 006a 03       		.byte	0x3
 454 006b 59       		.byte	0x59
 455 006c 70000000 		.4byte	0x70
 456 0070 02       		.uleb128 0x2
 457 0071 08       		.byte	0x8
 458 0072 05       		.byte	0x5
 459 0073 72020000 		.4byte	.LASF9
 460 0077 02       		.uleb128 0x2
 461 0078 08       		.byte	0x8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 23


 462 0079 07       		.byte	0x7
 463 007a 7C010000 		.4byte	.LASF10
 464 007e 04       		.uleb128 0x4
 465 007f 04       		.byte	0x4
 466 0080 05       		.byte	0x5
 467 0081 696E7400 		.ascii	"int\000"
 468 0085 02       		.uleb128 0x2
 469 0086 04       		.byte	0x4
 470 0087 07       		.byte	0x7
 471 0088 6F010000 		.4byte	.LASF11
 472 008c 03       		.uleb128 0x3
 473 008d C0020000 		.4byte	.LASF12
 474 0091 04       		.byte	0x4
 475 0092 21       		.byte	0x21
 476 0093 3A000000 		.4byte	0x3a
 477 0097 03       		.uleb128 0x3
 478 0098 49020000 		.4byte	.LASF13
 479 009c 04       		.byte	0x4
 480 009d 2C       		.byte	0x2c
 481 009e 4C000000 		.4byte	0x4c
 482 00a2 03       		.uleb128 0x3
 483 00a3 00000000 		.4byte	.LASF14
 484 00a7 04       		.byte	0x4
 485 00a8 38       		.byte	0x38
 486 00a9 65000000 		.4byte	0x65
 487 00ad 02       		.uleb128 0x2
 488 00ae 04       		.byte	0x4
 489 00af 07       		.byte	0x7
 490 00b0 51020000 		.4byte	.LASF15
 491 00b4 02       		.uleb128 0x2
 492 00b5 01       		.byte	0x1
 493 00b6 08       		.byte	0x8
 494 00b7 90020000 		.4byte	.LASF16
 495 00bb 02       		.uleb128 0x2
 496 00bc 08       		.byte	0x8
 497 00bd 04       		.byte	0x4
 498 00be 0C010000 		.4byte	.LASF17
 499 00c2 02       		.uleb128 0x2
 500 00c3 04       		.byte	0x4
 501 00c4 04       		.byte	0x4
 502 00c5 EE020000 		.4byte	.LASF18
 503 00c9 02       		.uleb128 0x2
 504 00ca 08       		.byte	0x8
 505 00cb 04       		.byte	0x4
 506 00cc E2020000 		.4byte	.LASF19
 507 00d0 05       		.uleb128 0x5
 508 00d1 01       		.byte	0x1
 509 00d2 02       		.byte	0x2
 510 00d3 8401     		.2byte	0x184
 511 00d5 04010000 		.4byte	0x104
 512 00d9 06       		.uleb128 0x6
 513 00da A5020000 		.4byte	.LASF20
 514 00de 00       		.sleb128 0
 515 00df 06       		.uleb128 0x6
 516 00e0 46010000 		.4byte	.LASF21
 517 00e4 7F       		.sleb128 -1
 518 00e5 06       		.uleb128 0x6
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 24


 519 00e6 1A000000 		.4byte	.LASF22
 520 00ea 7E       		.sleb128 -2
 521 00eb 06       		.uleb128 0x6
 522 00ec 25020000 		.4byte	.LASF23
 523 00f0 7D       		.sleb128 -3
 524 00f1 06       		.uleb128 0x6
 525 00f2 95020000 		.4byte	.LASF24
 526 00f6 7C       		.sleb128 -4
 527 00f7 06       		.uleb128 0x6
 528 00f8 1A030000 		.4byte	.LASF25
 529 00fc 7B       		.sleb128 -5
 530 00fd 06       		.uleb128 0x6
 531 00fe B7000000 		.4byte	.LASF26
 532 0102 7A       		.sleb128 -6
 533 0103 00       		.byte	0
 534 0104 07       		.uleb128 0x7
 535 0105 C9020000 		.4byte	.LASF27
 536 0109 02       		.byte	0x2
 537 010a 8C01     		.2byte	0x18c
 538 010c D0000000 		.4byte	0xd0
 539 0110 07       		.uleb128 0x7
 540 0111 A3000000 		.4byte	.LASF28
 541 0115 02       		.byte	0x2
 542 0116 9B01     		.2byte	0x19b
 543 0118 97000000 		.4byte	0x97
 544 011c 07       		.uleb128 0x7
 545 011d 43020000 		.4byte	.LASF29
 546 0121 02       		.byte	0x2
 547 0122 A001     		.2byte	0x1a0
 548 0124 A2000000 		.4byte	0xa2
 549 0128 08       		.uleb128 0x8
 550 0129 04       		.byte	0x4
 551 012a 10010000 		.4byte	0x110
 552 012e 09       		.uleb128 0x9
 553 012f 08       		.byte	0x8
 554 0130 02       		.byte	0x2
 555 0131 B905     		.2byte	0x5b9
 556 0133 5F010000 		.4byte	0x15f
 557 0137 0A       		.uleb128 0xa
 558 0138 00030000 		.4byte	.LASF30
 559 013c 02       		.byte	0x2
 560 013d BB05     		.2byte	0x5bb
 561 013f 8C000000 		.4byte	0x8c
 562 0143 00       		.byte	0
 563 0144 0A       		.uleb128 0xa
 564 0145 08030000 		.4byte	.LASF31
 565 0149 02       		.byte	0x2
 566 014a BC05     		.2byte	0x5bc
 567 014c 8C000000 		.4byte	0x8c
 568 0150 02       		.byte	0x2
 569 0151 0A       		.uleb128 0xa
 570 0152 98000000 		.4byte	.LASF32
 571 0156 02       		.byte	0x2
 572 0157 BD05     		.2byte	0x5bd
 573 0159 28010000 		.4byte	0x128
 574 015d 04       		.byte	0x4
 575 015e 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 25


 576 015f 07       		.uleb128 0x7
 577 0160 5A020000 		.4byte	.LASF33
 578 0164 02       		.byte	0x2
 579 0165 BE05     		.2byte	0x5be
 580 0167 2E010000 		.4byte	0x12e
 581 016b 0B       		.uleb128 0xb
 582 016c 80020000 		.4byte	.LASF50
 583 0170 02       		.byte	0x2
 584 0171 FE01     		.2byte	0x1fe
 585 0173 10010000 		.4byte	0x110
 586 0177 03       		.byte	0x3
 587 0178 87010000 		.4byte	0x187
 588 017c 0C       		.uleb128 0xc
 589 017d 7800     		.ascii	"x\000"
 590 017f 02       		.byte	0x2
 591 0180 FF01     		.2byte	0x1ff
 592 0182 1C010000 		.4byte	0x11c
 593 0186 00       		.byte	0
 594 0187 0D       		.uleb128 0xd
 595 0188 5E010000 		.4byte	.LASF51
 596 018c 01       		.byte	0x1
 597 018d 42       		.byte	0x42
 598 018e 04010000 		.4byte	0x104
 599 0192 00000000 		.4byte	.LFB82
 600 0196 6C020000 		.4byte	.LFE82-.LFB82
 601 019a 01       		.uleb128 0x1
 602 019b 9C       		.byte	0x9c
 603 019c B9020000 		.4byte	0x2b9
 604 01a0 0E       		.uleb128 0xe
 605 01a1 30000000 		.4byte	.LASF34
 606 01a5 01       		.byte	0x1
 607 01a6 43       		.byte	0x43
 608 01a7 B9020000 		.4byte	0x2b9
 609 01ab 03       		.uleb128 0x3
 610 01ac 91       		.byte	0x91
 611 01ad A47F     		.sleb128 -92
 612 01af 0E       		.uleb128 0xe
 613 01b0 36000000 		.4byte	.LASF35
 614 01b4 01       		.byte	0x1
 615 01b5 44       		.byte	0x44
 616 01b6 B9020000 		.4byte	0x2b9
 617 01ba 03       		.uleb128 0x3
 618 01bb 91       		.byte	0x91
 619 01bc A07F     		.sleb128 -96
 620 01be 0E       		.uleb128 0xe
 621 01bf F2000000 		.4byte	.LASF36
 622 01c3 01       		.byte	0x1
 623 01c4 45       		.byte	0x45
 624 01c5 C4020000 		.4byte	0x2c4
 625 01c9 03       		.uleb128 0x3
 626 01ca 91       		.byte	0x91
 627 01cb 9C7F     		.sleb128 -100
 628 01cd 0F       		.uleb128 0xf
 629 01ce 10030000 		.4byte	.LASF37
 630 01d2 01       		.byte	0x1
 631 01d3 47       		.byte	0x47
 632 01d4 28010000 		.4byte	0x128
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 26


 633 01d8 02       		.uleb128 0x2
 634 01d9 91       		.byte	0x91
 635 01da 64       		.sleb128 -28
 636 01db 0F       		.uleb128 0xf
 637 01dc 15030000 		.4byte	.LASF38
 638 01e0 01       		.byte	0x1
 639 01e1 48       		.byte	0x48
 640 01e2 28010000 		.4byte	0x128
 641 01e6 02       		.uleb128 0x2
 642 01e7 91       		.byte	0x91
 643 01e8 60       		.sleb128 -32
 644 01e9 0F       		.uleb128 0xf
 645 01ea DD020000 		.4byte	.LASF39
 646 01ee 01       		.byte	0x1
 647 01ef 49       		.byte	0x49
 648 01f0 28010000 		.4byte	0x128
 649 01f4 02       		.uleb128 0x2
 650 01f5 91       		.byte	0x91
 651 01f6 5C       		.sleb128 -36
 652 01f7 0F       		.uleb128 0xf
 653 01f8 9E000000 		.4byte	.LASF40
 654 01fc 01       		.byte	0x1
 655 01fd 4A       		.byte	0x4a
 656 01fe 28010000 		.4byte	0x128
 657 0202 02       		.uleb128 0x2
 658 0203 91       		.byte	0x91
 659 0204 44       		.sleb128 -60
 660 0205 10       		.uleb128 0x10
 661 0206 707800   		.ascii	"px\000"
 662 0209 01       		.byte	0x1
 663 020a 4B       		.byte	0x4b
 664 020b 28010000 		.4byte	0x128
 665 020f 02       		.uleb128 0x2
 666 0210 91       		.byte	0x91
 667 0211 58       		.sleb128 -40
 668 0212 10       		.uleb128 0x10
 669 0213 73756D00 		.ascii	"sum\000"
 670 0217 01       		.byte	0x1
 671 0218 4C       		.byte	0x4c
 672 0219 1C010000 		.4byte	0x11c
 673 021d 02       		.uleb128 0x2
 674 021e 91       		.byte	0x91
 675 021f 50       		.sleb128 -48
 676 0220 0F       		.uleb128 0xf
 677 0221 13010000 		.4byte	.LASF41
 678 0225 01       		.byte	0x1
 679 0226 4D       		.byte	0x4d
 680 0227 8C000000 		.4byte	0x8c
 681 022b 02       		.uleb128 0x2
 682 022c 91       		.byte	0x91
 683 022d 42       		.sleb128 -62
 684 022e 0F       		.uleb128 0xf
 685 022f 11000000 		.4byte	.LASF42
 686 0233 01       		.byte	0x1
 687 0234 4E       		.byte	0x4e
 688 0235 8C000000 		.4byte	0x8c
 689 0239 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 27


 690 023a 91       		.byte	0x91
 691 023b 40       		.sleb128 -64
 692 023c 0F       		.uleb128 0xf
 693 023d 08000000 		.4byte	.LASF43
 694 0241 01       		.byte	0x1
 695 0242 4F       		.byte	0x4f
 696 0243 8C000000 		.4byte	0x8c
 697 0247 03       		.uleb128 0x3
 698 0248 91       		.byte	0x91
 699 0249 BE7F     		.sleb128 -66
 700 024b 0F       		.uleb128 0xf
 701 024c 3C000000 		.4byte	.LASF44
 702 0250 01       		.byte	0x1
 703 0251 C3       		.byte	0xc3
 704 0252 28010000 		.4byte	0x128
 705 0256 03       		.uleb128 0x3
 706 0257 91       		.byte	0x91
 707 0258 B87F     		.sleb128 -72
 708 025a 10       		.uleb128 0x10
 709 025b 636F6C00 		.ascii	"col\000"
 710 025f 01       		.byte	0x1
 711 0260 C4       		.byte	0xc4
 712 0261 8C000000 		.4byte	0x8c
 713 0265 02       		.uleb128 0x2
 714 0266 91       		.byte	0x91
 715 0267 4E       		.sleb128 -50
 716 0268 10       		.uleb128 0x10
 717 0269 6900     		.ascii	"i\000"
 718 026b 01       		.byte	0x1
 719 026c C4       		.byte	0xc4
 720 026d 8C000000 		.4byte	0x8c
 721 0271 02       		.uleb128 0x2
 722 0272 91       		.byte	0x91
 723 0273 4C       		.sleb128 -52
 724 0274 10       		.uleb128 0x10
 725 0275 726F7700 		.ascii	"row\000"
 726 0279 01       		.byte	0x1
 727 027a C4       		.byte	0xc4
 728 027b 8C000000 		.4byte	0x8c
 729 027f 02       		.uleb128 0x2
 730 0280 91       		.byte	0x91
 731 0281 4A       		.sleb128 -54
 732 0282 0F       		.uleb128 0xf
 733 0283 3C020000 		.4byte	.LASF45
 734 0287 01       		.byte	0x1
 735 0288 C4       		.byte	0xc4
 736 0289 8C000000 		.4byte	0x8c
 737 028d 02       		.uleb128 0x2
 738 028e 91       		.byte	0x91
 739 028f 48       		.sleb128 -56
 740 0290 0F       		.uleb128 0xf
 741 0291 91000000 		.4byte	.LASF46
 742 0295 01       		.byte	0x1
 743 0296 C5       		.byte	0xc5
 744 0297 04010000 		.4byte	0x104
 745 029b 03       		.uleb128 0x3
 746 029c 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 28


 747 029d B77F     		.sleb128 -73
 748 029f 11       		.uleb128 0x11
 749 02a0 6B010000 		.4byte	0x16b
 750 02a4 66010000 		.4byte	.LBB4
 751 02a8 2C000000 		.4byte	.LBE4-.LBB4
 752 02ac 01       		.byte	0x1
 753 02ad FC       		.byte	0xfc
 754 02ae 12       		.uleb128 0x12
 755 02af 7C010000 		.4byte	0x17c
 756 02b3 03       		.uleb128 0x3
 757 02b4 91       		.byte	0x91
 758 02b5 A87F     		.sleb128 -88
 759 02b7 00       		.byte	0
 760 02b8 00       		.byte	0
 761 02b9 08       		.uleb128 0x8
 762 02ba 04       		.byte	0x4
 763 02bb BF020000 		.4byte	0x2bf
 764 02bf 13       		.uleb128 0x13
 765 02c0 5F010000 		.4byte	0x15f
 766 02c4 08       		.uleb128 0x8
 767 02c5 04       		.byte	0x4
 768 02c6 5F010000 		.4byte	0x15f
 769 02ca 00       		.byte	0
 770              		.section	.debug_abbrev,"",%progbits
 771              	.Ldebug_abbrev0:
 772 0000 01       		.uleb128 0x1
 773 0001 11       		.uleb128 0x11
 774 0002 01       		.byte	0x1
 775 0003 25       		.uleb128 0x25
 776 0004 0E       		.uleb128 0xe
 777 0005 13       		.uleb128 0x13
 778 0006 0B       		.uleb128 0xb
 779 0007 03       		.uleb128 0x3
 780 0008 0E       		.uleb128 0xe
 781 0009 1B       		.uleb128 0x1b
 782 000a 0E       		.uleb128 0xe
 783 000b 55       		.uleb128 0x55
 784 000c 17       		.uleb128 0x17
 785 000d 11       		.uleb128 0x11
 786 000e 01       		.uleb128 0x1
 787 000f 10       		.uleb128 0x10
 788 0010 17       		.uleb128 0x17
 789 0011 00       		.byte	0
 790 0012 00       		.byte	0
 791 0013 02       		.uleb128 0x2
 792 0014 24       		.uleb128 0x24
 793 0015 00       		.byte	0
 794 0016 0B       		.uleb128 0xb
 795 0017 0B       		.uleb128 0xb
 796 0018 3E       		.uleb128 0x3e
 797 0019 0B       		.uleb128 0xb
 798 001a 03       		.uleb128 0x3
 799 001b 0E       		.uleb128 0xe
 800 001c 00       		.byte	0
 801 001d 00       		.byte	0
 802 001e 03       		.uleb128 0x3
 803 001f 16       		.uleb128 0x16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 29


 804 0020 00       		.byte	0
 805 0021 03       		.uleb128 0x3
 806 0022 0E       		.uleb128 0xe
 807 0023 3A       		.uleb128 0x3a
 808 0024 0B       		.uleb128 0xb
 809 0025 3B       		.uleb128 0x3b
 810 0026 0B       		.uleb128 0xb
 811 0027 49       		.uleb128 0x49
 812 0028 13       		.uleb128 0x13
 813 0029 00       		.byte	0
 814 002a 00       		.byte	0
 815 002b 04       		.uleb128 0x4
 816 002c 24       		.uleb128 0x24
 817 002d 00       		.byte	0
 818 002e 0B       		.uleb128 0xb
 819 002f 0B       		.uleb128 0xb
 820 0030 3E       		.uleb128 0x3e
 821 0031 0B       		.uleb128 0xb
 822 0032 03       		.uleb128 0x3
 823 0033 08       		.uleb128 0x8
 824 0034 00       		.byte	0
 825 0035 00       		.byte	0
 826 0036 05       		.uleb128 0x5
 827 0037 04       		.uleb128 0x4
 828 0038 01       		.byte	0x1
 829 0039 0B       		.uleb128 0xb
 830 003a 0B       		.uleb128 0xb
 831 003b 3A       		.uleb128 0x3a
 832 003c 0B       		.uleb128 0xb
 833 003d 3B       		.uleb128 0x3b
 834 003e 05       		.uleb128 0x5
 835 003f 01       		.uleb128 0x1
 836 0040 13       		.uleb128 0x13
 837 0041 00       		.byte	0
 838 0042 00       		.byte	0
 839 0043 06       		.uleb128 0x6
 840 0044 28       		.uleb128 0x28
 841 0045 00       		.byte	0
 842 0046 03       		.uleb128 0x3
 843 0047 0E       		.uleb128 0xe
 844 0048 1C       		.uleb128 0x1c
 845 0049 0D       		.uleb128 0xd
 846 004a 00       		.byte	0
 847 004b 00       		.byte	0
 848 004c 07       		.uleb128 0x7
 849 004d 16       		.uleb128 0x16
 850 004e 00       		.byte	0
 851 004f 03       		.uleb128 0x3
 852 0050 0E       		.uleb128 0xe
 853 0051 3A       		.uleb128 0x3a
 854 0052 0B       		.uleb128 0xb
 855 0053 3B       		.uleb128 0x3b
 856 0054 05       		.uleb128 0x5
 857 0055 49       		.uleb128 0x49
 858 0056 13       		.uleb128 0x13
 859 0057 00       		.byte	0
 860 0058 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 30


 861 0059 08       		.uleb128 0x8
 862 005a 0F       		.uleb128 0xf
 863 005b 00       		.byte	0
 864 005c 0B       		.uleb128 0xb
 865 005d 0B       		.uleb128 0xb
 866 005e 49       		.uleb128 0x49
 867 005f 13       		.uleb128 0x13
 868 0060 00       		.byte	0
 869 0061 00       		.byte	0
 870 0062 09       		.uleb128 0x9
 871 0063 13       		.uleb128 0x13
 872 0064 01       		.byte	0x1
 873 0065 0B       		.uleb128 0xb
 874 0066 0B       		.uleb128 0xb
 875 0067 3A       		.uleb128 0x3a
 876 0068 0B       		.uleb128 0xb
 877 0069 3B       		.uleb128 0x3b
 878 006a 05       		.uleb128 0x5
 879 006b 01       		.uleb128 0x1
 880 006c 13       		.uleb128 0x13
 881 006d 00       		.byte	0
 882 006e 00       		.byte	0
 883 006f 0A       		.uleb128 0xa
 884 0070 0D       		.uleb128 0xd
 885 0071 00       		.byte	0
 886 0072 03       		.uleb128 0x3
 887 0073 0E       		.uleb128 0xe
 888 0074 3A       		.uleb128 0x3a
 889 0075 0B       		.uleb128 0xb
 890 0076 3B       		.uleb128 0x3b
 891 0077 05       		.uleb128 0x5
 892 0078 49       		.uleb128 0x49
 893 0079 13       		.uleb128 0x13
 894 007a 38       		.uleb128 0x38
 895 007b 0B       		.uleb128 0xb
 896 007c 00       		.byte	0
 897 007d 00       		.byte	0
 898 007e 0B       		.uleb128 0xb
 899 007f 2E       		.uleb128 0x2e
 900 0080 01       		.byte	0x1
 901 0081 03       		.uleb128 0x3
 902 0082 0E       		.uleb128 0xe
 903 0083 3A       		.uleb128 0x3a
 904 0084 0B       		.uleb128 0xb
 905 0085 3B       		.uleb128 0x3b
 906 0086 05       		.uleb128 0x5
 907 0087 27       		.uleb128 0x27
 908 0088 19       		.uleb128 0x19
 909 0089 49       		.uleb128 0x49
 910 008a 13       		.uleb128 0x13
 911 008b 20       		.uleb128 0x20
 912 008c 0B       		.uleb128 0xb
 913 008d 01       		.uleb128 0x1
 914 008e 13       		.uleb128 0x13
 915 008f 00       		.byte	0
 916 0090 00       		.byte	0
 917 0091 0C       		.uleb128 0xc
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 31


 918 0092 05       		.uleb128 0x5
 919 0093 00       		.byte	0
 920 0094 03       		.uleb128 0x3
 921 0095 08       		.uleb128 0x8
 922 0096 3A       		.uleb128 0x3a
 923 0097 0B       		.uleb128 0xb
 924 0098 3B       		.uleb128 0x3b
 925 0099 05       		.uleb128 0x5
 926 009a 49       		.uleb128 0x49
 927 009b 13       		.uleb128 0x13
 928 009c 00       		.byte	0
 929 009d 00       		.byte	0
 930 009e 0D       		.uleb128 0xd
 931 009f 2E       		.uleb128 0x2e
 932 00a0 01       		.byte	0x1
 933 00a1 3F       		.uleb128 0x3f
 934 00a2 19       		.uleb128 0x19
 935 00a3 03       		.uleb128 0x3
 936 00a4 0E       		.uleb128 0xe
 937 00a5 3A       		.uleb128 0x3a
 938 00a6 0B       		.uleb128 0xb
 939 00a7 3B       		.uleb128 0x3b
 940 00a8 0B       		.uleb128 0xb
 941 00a9 27       		.uleb128 0x27
 942 00aa 19       		.uleb128 0x19
 943 00ab 49       		.uleb128 0x49
 944 00ac 13       		.uleb128 0x13
 945 00ad 11       		.uleb128 0x11
 946 00ae 01       		.uleb128 0x1
 947 00af 12       		.uleb128 0x12
 948 00b0 06       		.uleb128 0x6
 949 00b1 40       		.uleb128 0x40
 950 00b2 18       		.uleb128 0x18
 951 00b3 9642     		.uleb128 0x2116
 952 00b5 19       		.uleb128 0x19
 953 00b6 01       		.uleb128 0x1
 954 00b7 13       		.uleb128 0x13
 955 00b8 00       		.byte	0
 956 00b9 00       		.byte	0
 957 00ba 0E       		.uleb128 0xe
 958 00bb 05       		.uleb128 0x5
 959 00bc 00       		.byte	0
 960 00bd 03       		.uleb128 0x3
 961 00be 0E       		.uleb128 0xe
 962 00bf 3A       		.uleb128 0x3a
 963 00c0 0B       		.uleb128 0xb
 964 00c1 3B       		.uleb128 0x3b
 965 00c2 0B       		.uleb128 0xb
 966 00c3 49       		.uleb128 0x49
 967 00c4 13       		.uleb128 0x13
 968 00c5 02       		.uleb128 0x2
 969 00c6 18       		.uleb128 0x18
 970 00c7 00       		.byte	0
 971 00c8 00       		.byte	0
 972 00c9 0F       		.uleb128 0xf
 973 00ca 34       		.uleb128 0x34
 974 00cb 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 32


 975 00cc 03       		.uleb128 0x3
 976 00cd 0E       		.uleb128 0xe
 977 00ce 3A       		.uleb128 0x3a
 978 00cf 0B       		.uleb128 0xb
 979 00d0 3B       		.uleb128 0x3b
 980 00d1 0B       		.uleb128 0xb
 981 00d2 49       		.uleb128 0x49
 982 00d3 13       		.uleb128 0x13
 983 00d4 02       		.uleb128 0x2
 984 00d5 18       		.uleb128 0x18
 985 00d6 00       		.byte	0
 986 00d7 00       		.byte	0
 987 00d8 10       		.uleb128 0x10
 988 00d9 34       		.uleb128 0x34
 989 00da 00       		.byte	0
 990 00db 03       		.uleb128 0x3
 991 00dc 08       		.uleb128 0x8
 992 00dd 3A       		.uleb128 0x3a
 993 00de 0B       		.uleb128 0xb
 994 00df 3B       		.uleb128 0x3b
 995 00e0 0B       		.uleb128 0xb
 996 00e1 49       		.uleb128 0x49
 997 00e2 13       		.uleb128 0x13
 998 00e3 02       		.uleb128 0x2
 999 00e4 18       		.uleb128 0x18
 1000 00e5 00       		.byte	0
 1001 00e6 00       		.byte	0
 1002 00e7 11       		.uleb128 0x11
 1003 00e8 1D       		.uleb128 0x1d
 1004 00e9 01       		.byte	0x1
 1005 00ea 31       		.uleb128 0x31
 1006 00eb 13       		.uleb128 0x13
 1007 00ec 11       		.uleb128 0x11
 1008 00ed 01       		.uleb128 0x1
 1009 00ee 12       		.uleb128 0x12
 1010 00ef 06       		.uleb128 0x6
 1011 00f0 58       		.uleb128 0x58
 1012 00f1 0B       		.uleb128 0xb
 1013 00f2 59       		.uleb128 0x59
 1014 00f3 0B       		.uleb128 0xb
 1015 00f4 00       		.byte	0
 1016 00f5 00       		.byte	0
 1017 00f6 12       		.uleb128 0x12
 1018 00f7 05       		.uleb128 0x5
 1019 00f8 00       		.byte	0
 1020 00f9 31       		.uleb128 0x31
 1021 00fa 13       		.uleb128 0x13
 1022 00fb 02       		.uleb128 0x2
 1023 00fc 18       		.uleb128 0x18
 1024 00fd 00       		.byte	0
 1025 00fe 00       		.byte	0
 1026 00ff 13       		.uleb128 0x13
 1027 0100 26       		.uleb128 0x26
 1028 0101 00       		.byte	0
 1029 0102 49       		.uleb128 0x49
 1030 0103 13       		.uleb128 0x13
 1031 0104 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 33


 1032 0105 00       		.byte	0
 1033 0106 00       		.byte	0
 1034              		.section	.debug_aranges,"",%progbits
 1035 0000 1C000000 		.4byte	0x1c
 1036 0004 0200     		.2byte	0x2
 1037 0006 00000000 		.4byte	.Ldebug_info0
 1038 000a 04       		.byte	0x4
 1039 000b 00       		.byte	0
 1040 000c 0000     		.2byte	0
 1041 000e 0000     		.2byte	0
 1042 0010 00000000 		.4byte	.LFB82
 1043 0014 6C020000 		.4byte	.LFE82-.LFB82
 1044 0018 00000000 		.4byte	0
 1045 001c 00000000 		.4byte	0
 1046              		.section	.debug_ranges,"",%progbits
 1047              	.Ldebug_ranges0:
 1048 0000 00000000 		.4byte	.LFB82
 1049 0004 6C020000 		.4byte	.LFE82
 1050 0008 00000000 		.4byte	0
 1051 000c 00000000 		.4byte	0
 1052              		.section	.debug_line,"",%progbits
 1053              	.Ldebug_line0:
 1054 0000 9F010000 		.section	.debug_str,"MS",%progbits,1
 1054      02005001 
 1054      00000201 
 1054      FB0E0D00 
 1054      01010101 
 1055              	.LASF14:
 1056 0000 696E7436 		.ascii	"int64_t\000"
 1056      345F7400 
 1057              	.LASF43:
 1058 0008 6E756D43 		.ascii	"numColsA\000"
 1058      6F6C7341 
 1058      00
 1059              	.LASF42:
 1060 0011 6E756D43 		.ascii	"numColsB\000"
 1060      6F6C7342 
 1060      00
 1061              	.LASF22:
 1062 001a 41524D5F 		.ascii	"ARM_MATH_LENGTH_ERROR\000"
 1062      4D415448 
 1062      5F4C454E 
 1062      4754485F 
 1062      4552524F 
 1063              	.LASF34:
 1064 0030 70537263 		.ascii	"pSrcA\000"
 1064      4100
 1065              	.LASF35:
 1066 0036 70537263 		.ascii	"pSrcB\000"
 1066      4200
 1067              	.LASF44:
 1068 003c 70496E42 		.ascii	"pInB\000"
 1068      00
 1069              	.LASF5:
 1070 0041 5F5F696E 		.ascii	"__int32_t\000"
 1070      7433325F 
 1070      7400
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 34


 1071              	.LASF49:
 1072 004b 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 1072      73657273 
 1072      5C666E65 
 1072      7665735C 
 1072      446F6375 
 1073 0078 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 1073      655F7370 
 1073      6565645F 
 1073      73656E73 
 1073      6F722E63 
 1074              	.LASF46:
 1075 0091 73746174 		.ascii	"status\000"
 1075      757300
 1076              	.LASF32:
 1077 0098 70446174 		.ascii	"pData\000"
 1077      6100
 1078              	.LASF40:
 1079 009e 704F7574 		.ascii	"pOut\000"
 1079      00
 1080              	.LASF28:
 1081 00a3 7133315F 		.ascii	"q31_t\000"
 1081      7400
 1082              	.LASF1:
 1083 00a9 756E7369 		.ascii	"unsigned char\000"
 1083      676E6564 
 1083      20636861 
 1083      7200
 1084              	.LASF26:
 1085 00b7 41524D5F 		.ascii	"ARM_MATH_TEST_FAILURE\000"
 1085      4D415448 
 1085      5F544553 
 1085      545F4641 
 1085      494C5552 
 1086              	.LASF7:
 1087 00cd 6C6F6E67 		.ascii	"long unsigned int\000"
 1087      20756E73 
 1087      69676E65 
 1087      6420696E 
 1087      7400
 1088              	.LASF3:
 1089 00df 73686F72 		.ascii	"short unsigned int\000"
 1089      7420756E 
 1089      7369676E 
 1089      65642069 
 1089      6E7400
 1090              	.LASF36:
 1091 00f2 70447374 		.ascii	"pDst\000"
 1091      00
 1092              	.LASF8:
 1093 00f7 5F5F696E 		.ascii	"__int64_t\000"
 1093      7436345F 
 1093      7400
 1094              	.LASF4:
 1095 0101 5F5F7569 		.ascii	"__uint16_t\000"
 1095      6E743136 
 1095      5F7400
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 35


 1096              	.LASF17:
 1097 010c 646F7562 		.ascii	"double\000"
 1097      6C6500
 1098              	.LASF41:
 1099 0113 6E756D52 		.ascii	"numRowsA\000"
 1099      6F777341 
 1099      00
 1100              	.LASF48:
 1101 011c 536F7572 		.ascii	"Source\\MatrixFunctions\\arm_mat_mult_q31.c\000"
 1101      63655C4D 
 1101      61747269 
 1101      7846756E 
 1101      6374696F 
 1102              	.LASF21:
 1103 0146 41524D5F 		.ascii	"ARM_MATH_ARGUMENT_ERROR\000"
 1103      4D415448 
 1103      5F415247 
 1103      554D454E 
 1103      545F4552 
 1104              	.LASF51:
 1105 015e 61726D5F 		.ascii	"arm_mat_mult_q31\000"
 1105      6D61745F 
 1105      6D756C74 
 1105      5F713331 
 1105      00
 1106              	.LASF11:
 1107 016f 756E7369 		.ascii	"unsigned int\000"
 1107      676E6564 
 1107      20696E74 
 1107      00
 1108              	.LASF10:
 1109 017c 6C6F6E67 		.ascii	"long long unsigned int\000"
 1109      206C6F6E 
 1109      6720756E 
 1109      7369676E 
 1109      65642069 
 1110              	.LASF47:
 1111 0193 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1111      4320342E 
 1111      392E3320 
 1111      32303135 
 1111      30333033 
 1112 01c6 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 1112      20726576 
 1112      6973696F 
 1112      6E203232 
 1112      31323230 
 1113 01f9 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 1113      30202D66 
 1113      66756E63 
 1113      74696F6E 
 1113      2D736563 
 1114              	.LASF23:
 1115 0225 41524D5F 		.ascii	"ARM_MATH_SIZE_MISMATCH\000"
 1115      4D415448 
 1115      5F53495A 
 1115      455F4D49 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 36


 1115      534D4154 
 1116              	.LASF45:
 1117 023c 636F6C43 		.ascii	"colCnt\000"
 1117      6E7400
 1118              	.LASF29:
 1119 0243 7136335F 		.ascii	"q63_t\000"
 1119      7400
 1120              	.LASF13:
 1121 0249 696E7433 		.ascii	"int32_t\000"
 1121      325F7400 
 1122              	.LASF15:
 1123 0251 73697A65 		.ascii	"sizetype\000"
 1123      74797065 
 1123      00
 1124              	.LASF33:
 1125 025a 61726D5F 		.ascii	"arm_matrix_instance_q31\000"
 1125      6D617472 
 1125      69785F69 
 1125      6E737461 
 1125      6E63655F 
 1126              	.LASF9:
 1127 0272 6C6F6E67 		.ascii	"long long int\000"
 1127      206C6F6E 
 1127      6720696E 
 1127      7400
 1128              	.LASF50:
 1129 0280 636C6970 		.ascii	"clip_q63_to_q31\000"
 1129      5F713633 
 1129      5F746F5F 
 1129      71333100 
 1130              	.LASF16:
 1131 0290 63686172 		.ascii	"char\000"
 1131      00
 1132              	.LASF24:
 1133 0295 41524D5F 		.ascii	"ARM_MATH_NANINF\000"
 1133      4D415448 
 1133      5F4E414E 
 1133      494E4600 
 1134              	.LASF20:
 1135 02a5 41524D5F 		.ascii	"ARM_MATH_SUCCESS\000"
 1135      4D415448 
 1135      5F535543 
 1135      43455353 
 1135      00
 1136              	.LASF2:
 1137 02b6 73686F72 		.ascii	"short int\000"
 1137      7420696E 
 1137      7400
 1138              	.LASF12:
 1139 02c0 75696E74 		.ascii	"uint16_t\000"
 1139      31365F74 
 1139      00
 1140              	.LASF27:
 1141 02c9 61726D5F 		.ascii	"arm_status\000"
 1141      73746174 
 1141      757300
 1142              	.LASF6:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctNF9Rj.s 			page 37


 1143 02d4 6C6F6E67 		.ascii	"long int\000"
 1143      20696E74 
 1143      00
 1144              	.LASF39:
 1145 02dd 70496E41 		.ascii	"pInA\000"
 1145      00
 1146              	.LASF19:
 1147 02e2 6C6F6E67 		.ascii	"long double\000"
 1147      20646F75 
 1147      626C6500 
 1148              	.LASF18:
 1149 02ee 666C6F61 		.ascii	"float\000"
 1149      7400
 1150              	.LASF0:
 1151 02f4 7369676E 		.ascii	"signed char\000"
 1151      65642063 
 1151      68617200 
 1152              	.LASF30:
 1153 0300 6E756D52 		.ascii	"numRows\000"
 1153      6F777300 
 1154              	.LASF31:
 1155 0308 6E756D43 		.ascii	"numCols\000"
 1155      6F6C7300 
 1156              	.LASF37:
 1157 0310 70496E31 		.ascii	"pIn1\000"
 1157      00
 1158              	.LASF38:
 1159 0315 70496E32 		.ascii	"pIn2\000"
 1159      00
 1160              	.LASF25:
 1161 031a 41524D5F 		.ascii	"ARM_MATH_SINGULAR\000"
 1161      4D415448 
 1161      5F53494E 
 1161      47554C41 
 1161      5200
 1162              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
