ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_add_q31.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_add_q31,"ax",%progbits
  18              		.align	2
  19              		.global	arm_add_q31
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_add_q31, %function
  23              	arm_add_q31:
  24              	.LFB82:
  25              		.file 1 "Source\\BasicMathFunctions\\arm_add_q31.c"
   1:Source\BasicMathFunctions/arm_add_q31.c **** /* ----------------------------------------------------------------------
   2:Source\BasicMathFunctions/arm_add_q31.c ****  * Project:      CMSIS DSP Library
   3:Source\BasicMathFunctions/arm_add_q31.c ****  * Title:        arm_add_q31.c
   4:Source\BasicMathFunctions/arm_add_q31.c ****  * Description:  Q31 vector addition
   5:Source\BasicMathFunctions/arm_add_q31.c ****  *
   6:Source\BasicMathFunctions/arm_add_q31.c ****  * $Date:        27. January 2017
   7:Source\BasicMathFunctions/arm_add_q31.c ****  * $Revision:    V.1.5.1
   8:Source\BasicMathFunctions/arm_add_q31.c ****  *
   9:Source\BasicMathFunctions/arm_add_q31.c ****  * Target Processor: Cortex-M cores
  10:Source\BasicMathFunctions/arm_add_q31.c ****  * -------------------------------------------------------------------- */
  11:Source\BasicMathFunctions/arm_add_q31.c **** /*
  12:Source\BasicMathFunctions/arm_add_q31.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\BasicMathFunctions/arm_add_q31.c ****  *
  14:Source\BasicMathFunctions/arm_add_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\BasicMathFunctions/arm_add_q31.c ****  *
  16:Source\BasicMathFunctions/arm_add_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\BasicMathFunctions/arm_add_q31.c ****  * not use this file except in compliance with the License.
  18:Source\BasicMathFunctions/arm_add_q31.c ****  * You may obtain a copy of the License at
  19:Source\BasicMathFunctions/arm_add_q31.c ****  *
  20:Source\BasicMathFunctions/arm_add_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\BasicMathFunctions/arm_add_q31.c ****  *
  22:Source\BasicMathFunctions/arm_add_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\BasicMathFunctions/arm_add_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\BasicMathFunctions/arm_add_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\BasicMathFunctions/arm_add_q31.c ****  * See the License for the specific language governing permissions and
  26:Source\BasicMathFunctions/arm_add_q31.c ****  * limitations under the License.
  27:Source\BasicMathFunctions/arm_add_q31.c ****  */
  28:Source\BasicMathFunctions/arm_add_q31.c **** 
  29:Source\BasicMathFunctions/arm_add_q31.c **** #include "arm_math.h"
  30:Source\BasicMathFunctions/arm_add_q31.c **** 
  31:Source\BasicMathFunctions/arm_add_q31.c **** /**
  32:Source\BasicMathFunctions/arm_add_q31.c ****  * @ingroup groupMath
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 2


  33:Source\BasicMathFunctions/arm_add_q31.c ****  */
  34:Source\BasicMathFunctions/arm_add_q31.c **** 
  35:Source\BasicMathFunctions/arm_add_q31.c **** /**
  36:Source\BasicMathFunctions/arm_add_q31.c ****  * @addtogroup BasicAdd
  37:Source\BasicMathFunctions/arm_add_q31.c ****  * @{
  38:Source\BasicMathFunctions/arm_add_q31.c ****  */
  39:Source\BasicMathFunctions/arm_add_q31.c **** 
  40:Source\BasicMathFunctions/arm_add_q31.c **** 
  41:Source\BasicMathFunctions/arm_add_q31.c **** /**
  42:Source\BasicMathFunctions/arm_add_q31.c ****  * @brief Q31 vector addition.
  43:Source\BasicMathFunctions/arm_add_q31.c ****  * @param[in]       *pSrcA points to the first input vector
  44:Source\BasicMathFunctions/arm_add_q31.c ****  * @param[in]       *pSrcB points to the second input vector
  45:Source\BasicMathFunctions/arm_add_q31.c ****  * @param[out]      *pDst points to the output vector
  46:Source\BasicMathFunctions/arm_add_q31.c ****  * @param[in]       blockSize number of samples in each vector
  47:Source\BasicMathFunctions/arm_add_q31.c ****  * @return none.
  48:Source\BasicMathFunctions/arm_add_q31.c ****  *
  49:Source\BasicMathFunctions/arm_add_q31.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:Source\BasicMathFunctions/arm_add_q31.c ****  * \par
  51:Source\BasicMathFunctions/arm_add_q31.c ****  * The function uses saturating arithmetic.
  52:Source\BasicMathFunctions/arm_add_q31.c ****  * Results outside of the allowable Q31 range[0x80000000 0x7FFFFFFF] will be saturated.
  53:Source\BasicMathFunctions/arm_add_q31.c ****  */
  54:Source\BasicMathFunctions/arm_add_q31.c **** 
  55:Source\BasicMathFunctions/arm_add_q31.c **** void arm_add_q31(
  56:Source\BasicMathFunctions/arm_add_q31.c ****   q31_t * pSrcA,
  57:Source\BasicMathFunctions/arm_add_q31.c ****   q31_t * pSrcB,
  58:Source\BasicMathFunctions/arm_add_q31.c ****   q31_t * pDst,
  59:Source\BasicMathFunctions/arm_add_q31.c ****   uint32_t blockSize)
  60:Source\BasicMathFunctions/arm_add_q31.c **** {
  26              		.loc 1 60 0
  27              		.cfi_startproc
  28 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  29              		.cfi_def_cfa_offset 20
  30              		.cfi_offset 4, -20
  31              		.cfi_offset 5, -16
  32              		.cfi_offset 6, -12
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 8FB0     		sub	sp, sp, #60
  36              		.cfi_def_cfa_offset 80
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7862     		str	r0, [r7, #36]
  40 0008 3962     		str	r1, [r7, #32]
  41 000a FA61     		str	r2, [r7, #28]
  42 000c BB61     		str	r3, [r7, #24]
  61:Source\BasicMathFunctions/arm_add_q31.c ****   uint32_t blkCnt;                               /* loop counter */
  62:Source\BasicMathFunctions/arm_add_q31.c **** 
  63:Source\BasicMathFunctions/arm_add_q31.c **** #if defined (ARM_MATH_DSP)
  64:Source\BasicMathFunctions/arm_add_q31.c **** 
  65:Source\BasicMathFunctions/arm_add_q31.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  66:Source\BasicMathFunctions/arm_add_q31.c ****   q31_t inA1, inA2, inA3, inA4;
  67:Source\BasicMathFunctions/arm_add_q31.c ****   q31_t inB1, inB2, inB3, inB4;
  68:Source\BasicMathFunctions/arm_add_q31.c **** 
  69:Source\BasicMathFunctions/arm_add_q31.c ****   /*loop Unrolling */
  70:Source\BasicMathFunctions/arm_add_q31.c ****   blkCnt = blockSize >> 2u;
  71:Source\BasicMathFunctions/arm_add_q31.c **** 
  72:Source\BasicMathFunctions/arm_add_q31.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 3


  73:Source\BasicMathFunctions/arm_add_q31.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  74:Source\BasicMathFunctions/arm_add_q31.c ****   while (blkCnt > 0u)
  75:Source\BasicMathFunctions/arm_add_q31.c ****   {
  76:Source\BasicMathFunctions/arm_add_q31.c ****     /* C = A + B */
  77:Source\BasicMathFunctions/arm_add_q31.c ****     /* Add and then store the results in the destination buffer. */
  78:Source\BasicMathFunctions/arm_add_q31.c ****     inA1 = *pSrcA++;
  79:Source\BasicMathFunctions/arm_add_q31.c ****     inA2 = *pSrcA++;
  80:Source\BasicMathFunctions/arm_add_q31.c ****     inB1 = *pSrcB++;
  81:Source\BasicMathFunctions/arm_add_q31.c ****     inB2 = *pSrcB++;
  82:Source\BasicMathFunctions/arm_add_q31.c **** 
  83:Source\BasicMathFunctions/arm_add_q31.c ****     inA3 = *pSrcA++;
  84:Source\BasicMathFunctions/arm_add_q31.c ****     inA4 = *pSrcA++;
  85:Source\BasicMathFunctions/arm_add_q31.c ****     inB3 = *pSrcB++;
  86:Source\BasicMathFunctions/arm_add_q31.c ****     inB4 = *pSrcB++;
  87:Source\BasicMathFunctions/arm_add_q31.c **** 
  88:Source\BasicMathFunctions/arm_add_q31.c ****     *pDst++ = __QADD(inA1, inB1);
  89:Source\BasicMathFunctions/arm_add_q31.c ****     *pDst++ = __QADD(inA2, inB2);
  90:Source\BasicMathFunctions/arm_add_q31.c ****     *pDst++ = __QADD(inA3, inB3);
  91:Source\BasicMathFunctions/arm_add_q31.c ****     *pDst++ = __QADD(inA4, inB4);
  92:Source\BasicMathFunctions/arm_add_q31.c **** 
  93:Source\BasicMathFunctions/arm_add_q31.c ****     /* Decrement the loop counter */
  94:Source\BasicMathFunctions/arm_add_q31.c ****     blkCnt--;
  95:Source\BasicMathFunctions/arm_add_q31.c ****   }
  96:Source\BasicMathFunctions/arm_add_q31.c **** 
  97:Source\BasicMathFunctions/arm_add_q31.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
  98:Source\BasicMathFunctions/arm_add_q31.c ****    ** No loop unrolling is used. */
  99:Source\BasicMathFunctions/arm_add_q31.c ****   blkCnt = blockSize % 0x4u;
 100:Source\BasicMathFunctions/arm_add_q31.c **** 
 101:Source\BasicMathFunctions/arm_add_q31.c ****   while (blkCnt > 0u)
 102:Source\BasicMathFunctions/arm_add_q31.c ****   {
 103:Source\BasicMathFunctions/arm_add_q31.c ****     /* C = A + B */
 104:Source\BasicMathFunctions/arm_add_q31.c ****     /* Add and then store the results in the destination buffer. */
 105:Source\BasicMathFunctions/arm_add_q31.c ****     *pDst++ = __QADD(*pSrcA++, *pSrcB++);
 106:Source\BasicMathFunctions/arm_add_q31.c **** 
 107:Source\BasicMathFunctions/arm_add_q31.c ****     /* Decrement the loop counter */
 108:Source\BasicMathFunctions/arm_add_q31.c ****     blkCnt--;
 109:Source\BasicMathFunctions/arm_add_q31.c ****   }
 110:Source\BasicMathFunctions/arm_add_q31.c **** 
 111:Source\BasicMathFunctions/arm_add_q31.c **** #else
 112:Source\BasicMathFunctions/arm_add_q31.c **** 
 113:Source\BasicMathFunctions/arm_add_q31.c ****   /* Run the below code for Cortex-M0 */
 114:Source\BasicMathFunctions/arm_add_q31.c **** 
 115:Source\BasicMathFunctions/arm_add_q31.c **** 
 116:Source\BasicMathFunctions/arm_add_q31.c **** 
 117:Source\BasicMathFunctions/arm_add_q31.c ****   /* Initialize blkCnt with number of samples */
 118:Source\BasicMathFunctions/arm_add_q31.c ****   blkCnt = blockSize;
  43              		.loc 1 118 0
  44 000e BB69     		ldr	r3, [r7, #24]
  45 0010 7B63     		str	r3, [r7, #52]
 119:Source\BasicMathFunctions/arm_add_q31.c **** 
 120:Source\BasicMathFunctions/arm_add_q31.c ****   while (blkCnt > 0u)
  46              		.loc 1 120 0
  47 0012 30E0     		b	.L2
  48              	.L6:
 121:Source\BasicMathFunctions/arm_add_q31.c ****   {
 122:Source\BasicMathFunctions/arm_add_q31.c ****     /* C = A + B */
 123:Source\BasicMathFunctions/arm_add_q31.c ****     /* Add and then store the results in the destination buffer. */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 4


 124:Source\BasicMathFunctions/arm_add_q31.c ****     *pDst++ = (q31_t) clip_q63_to_q31((q63_t) * pSrcA++ + *pSrcB++);
  49              		.loc 1 124 0
  50 0014 FA69     		ldr	r2, [r7, #28]
  51 0016 131D     		add	r3, r2, #4
  52 0018 FB61     		str	r3, [r7, #28]
  53 001a 7B6A     		ldr	r3, [r7, #36]
  54 001c 191D     		add	r1, r3, #4
  55 001e 7962     		str	r1, [r7, #36]
  56 0020 1B68     		ldr	r3, [r3]
  57 0022 1D1C     		mov	r5, r3
  58 0024 DB17     		asr	r3, r3, #31
  59 0026 1E1C     		mov	r6, r3
  60 0028 3B6A     		ldr	r3, [r7, #32]
  61 002a 191D     		add	r1, r3, #4
  62 002c 3962     		str	r1, [r7, #32]
  63 002e 1B68     		ldr	r3, [r3]
  64 0030 3B61     		str	r3, [r7, #16]
  65 0032 DB17     		asr	r3, r3, #31
  66 0034 7B61     		str	r3, [r7, #20]
  67 0036 3B69     		ldr	r3, [r7, #16]
  68 0038 7C69     		ldr	r4, [r7, #20]
  69 003a 5B19     		add	r3, r3, r5
  70 003c 7441     		adc	r4, r4, r6
  71 003e BB62     		str	r3, [r7, #40]
  72 0040 FC62     		str	r4, [r7, #44]
  73              	.LBB4:
  74              	.LBB5:
  75              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 5


  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 6


  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 7


 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 8


 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 9


 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 10


 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 11


 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 12


 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 13


 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
  76              		.loc 2 513 0
  77 0042 FB6A     		ldr	r3, [r7, #44]
  78 0044 1B00     		asr	r3, r3, #0
  79 0046 BB60     		str	r3, [r7, #8]
  80 0048 FB6A     		ldr	r3, [r7, #44]
  81 004a DB17     		asr	r3, r3, #31
  82 004c FB60     		str	r3, [r7, #12]
  83 004e B968     		ldr	r1, [r7, #8]
  84 0050 BB6A     		ldr	r3, [r7, #40]
  85 0052 DB17     		asr	r3, r3, #31
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
  86              		.loc 2 514 0
  87 0054 9942     		cmp	r1, r3
  88 0056 09D0     		beq	.L3
  89 0058 FB6A     		ldr	r3, [r7, #44]
  90 005a DB17     		asr	r3, r3, #31
  91 005c 3B60     		str	r3, [r7]
  92 005e FB6A     		ldr	r3, [r7, #44]
  93 0060 DB17     		asr	r3, r3, #31
  94 0062 7B60     		str	r3, [r7, #4]
  95 0064 3968     		ldr	r1, [r7]
  96 0066 074B     		ldr	r3, .L8
  97 0068 4B40     		eor	r3, r1
  98 006a 00E0     		b	.L7
  99              	.L3:
 100 006c BB6A     		ldr	r3, [r7, #40]
 101              	.L7:
 102              	.LBE5:
 103              	.LBE4:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 14


 104              		.loc 1 124 0
 105 006e 1360     		str	r3, [r2]
 125:Source\BasicMathFunctions/arm_add_q31.c **** 
 126:Source\BasicMathFunctions/arm_add_q31.c ****     /* Decrement the loop counter */
 127:Source\BasicMathFunctions/arm_add_q31.c ****     blkCnt--;
 106              		.loc 1 127 0
 107 0070 7B6B     		ldr	r3, [r7, #52]
 108 0072 013B     		sub	r3, r3, #1
 109 0074 7B63     		str	r3, [r7, #52]
 110              	.L2:
 120:Source\BasicMathFunctions/arm_add_q31.c ****   {
 111              		.loc 1 120 0
 112 0076 7B6B     		ldr	r3, [r7, #52]
 113 0078 002B     		cmp	r3, #0
 114 007a CBD1     		bne	.L6
 128:Source\BasicMathFunctions/arm_add_q31.c ****   }
 129:Source\BasicMathFunctions/arm_add_q31.c **** 
 130:Source\BasicMathFunctions/arm_add_q31.c **** #endif /* #if defined (ARM_MATH_DSP) */
 131:Source\BasicMathFunctions/arm_add_q31.c **** 
 132:Source\BasicMathFunctions/arm_add_q31.c **** }
 115              		.loc 1 132 0
 116 007c BD46     		mov	sp, r7
 117 007e 0FB0     		add	sp, sp, #60
 118              		@ sp needed
 119 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 120              	.L9:
 121 0082 C046     		.align	2
 122              	.L8:
 123 0084 FFFFFF7F 		.word	2147483647
 124              		.cfi_endproc
 125              	.LFE82:
 126              		.size	arm_add_q31, .-arm_add_q31
 127              		.text
 128              	.Letext0:
 129              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 130              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 131              		.section	.debug_info,"",%progbits
 132              	.Ldebug_info0:
 133 0000 77010000 		.4byte	0x177
 134 0004 0400     		.2byte	0x4
 135 0006 00000000 		.4byte	.Ldebug_abbrev0
 136 000a 04       		.byte	0x4
 137 000b 01       		.uleb128 0x1
 138 000c F3000000 		.4byte	.LASF26
 139 0010 01       		.byte	0x1
 140 0011 85010000 		.4byte	.LASF27
 141 0015 22000000 		.4byte	.LASF28
 142 0019 00000000 		.4byte	.Ldebug_ranges0+0
 143 001d 00000000 		.4byte	0
 144 0021 00000000 		.4byte	.Ldebug_line0
 145 0025 02       		.uleb128 0x2
 146 0026 01       		.byte	0x1
 147 0027 06       		.byte	0x6
 148 0028 21020000 		.4byte	.LASF0
 149 002c 02       		.uleb128 0x2
 150 002d 01       		.byte	0x1
 151 002e 08       		.byte	0x8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 15


 152 002f 74000000 		.4byte	.LASF1
 153 0033 02       		.uleb128 0x2
 154 0034 02       		.byte	0x2
 155 0035 05       		.byte	0x5
 156 0036 F9010000 		.4byte	.LASF2
 157 003a 02       		.uleb128 0x2
 158 003b 02       		.byte	0x2
 159 003c 07       		.byte	0x7
 160 003d 9B000000 		.4byte	.LASF3
 161 0041 03       		.uleb128 0x3
 162 0042 18000000 		.4byte	.LASF5
 163 0046 03       		.byte	0x3
 164 0047 3F       		.byte	0x3f
 165 0048 4C000000 		.4byte	0x4c
 166 004c 02       		.uleb128 0x2
 167 004d 04       		.byte	0x4
 168 004e 05       		.byte	0x5
 169 004f 0C020000 		.4byte	.LASF4
 170 0053 03       		.uleb128 0x3
 171 0054 C4000000 		.4byte	.LASF6
 172 0058 03       		.byte	0x3
 173 0059 41       		.byte	0x41
 174 005a 5E000000 		.4byte	0x5e
 175 005e 02       		.uleb128 0x2
 176 005f 04       		.byte	0x4
 177 0060 07       		.byte	0x7
 178 0061 89000000 		.4byte	.LASF7
 179 0065 03       		.uleb128 0x3
 180 0066 B3000000 		.4byte	.LASF8
 181 006a 03       		.byte	0x3
 182 006b 59       		.byte	0x59
 183 006c 70000000 		.4byte	0x70
 184 0070 02       		.uleb128 0x2
 185 0071 08       		.byte	0x8
 186 0072 05       		.byte	0x5
 187 0073 CC010000 		.4byte	.LASF9
 188 0077 02       		.uleb128 0x2
 189 0078 08       		.byte	0x8
 190 0079 07       		.byte	0x7
 191 007a DC000000 		.4byte	.LASF10
 192 007e 04       		.uleb128 0x4
 193 007f 04       		.byte	0x4
 194 0080 05       		.byte	0x5
 195 0081 696E7400 		.ascii	"int\000"
 196 0085 02       		.uleb128 0x2
 197 0086 04       		.byte	0x4
 198 0087 07       		.byte	0x7
 199 0088 CF000000 		.4byte	.LASF11
 200 008c 03       		.uleb128 0x3
 201 008d B3010000 		.4byte	.LASF12
 202 0091 04       		.byte	0x4
 203 0092 2C       		.byte	0x2c
 204 0093 41000000 		.4byte	0x41
 205 0097 03       		.uleb128 0x3
 206 0098 03020000 		.4byte	.LASF13
 207 009c 04       		.byte	0x4
 208 009d 2D       		.byte	0x2d
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 16


 209 009e 53000000 		.4byte	0x53
 210 00a2 03       		.uleb128 0x3
 211 00a3 C4010000 		.4byte	.LASF14
 212 00a7 04       		.byte	0x4
 213 00a8 38       		.byte	0x38
 214 00a9 65000000 		.4byte	0x65
 215 00ad 02       		.uleb128 0x2
 216 00ae 04       		.byte	0x4
 217 00af 07       		.byte	0x7
 218 00b0 BB010000 		.4byte	.LASF15
 219 00b4 02       		.uleb128 0x2
 220 00b5 01       		.byte	0x1
 221 00b6 08       		.byte	0x8
 222 00b7 F4010000 		.4byte	.LASF16
 223 00bb 02       		.uleb128 0x2
 224 00bc 08       		.byte	0x8
 225 00bd 04       		.byte	0x4
 226 00be BD000000 		.4byte	.LASF17
 227 00c2 02       		.uleb128 0x2
 228 00c3 04       		.byte	0x4
 229 00c4 04       		.byte	0x4
 230 00c5 68000000 		.4byte	.LASF18
 231 00c9 02       		.uleb128 0x2
 232 00ca 08       		.byte	0x8
 233 00cb 04       		.byte	0x4
 234 00cc 15020000 		.4byte	.LASF19
 235 00d0 05       		.uleb128 0x5
 236 00d1 6E000000 		.4byte	.LASF20
 237 00d5 02       		.byte	0x2
 238 00d6 9B01     		.2byte	0x19b
 239 00d8 8C000000 		.4byte	0x8c
 240 00dc 05       		.uleb128 0x5
 241 00dd AD010000 		.4byte	.LASF21
 242 00e1 02       		.byte	0x2
 243 00e2 A001     		.2byte	0x1a0
 244 00e4 A2000000 		.4byte	0xa2
 245 00e8 06       		.uleb128 0x6
 246 00e9 04       		.byte	0x4
 247 00ea D0000000 		.4byte	0xd0
 248 00ee 07       		.uleb128 0x7
 249 00ef E4010000 		.4byte	.LASF29
 250 00f3 02       		.byte	0x2
 251 00f4 FE01     		.2byte	0x1fe
 252 00f6 D0000000 		.4byte	0xd0
 253 00fa 03       		.byte	0x3
 254 00fb 0A010000 		.4byte	0x10a
 255 00ff 08       		.uleb128 0x8
 256 0100 7800     		.ascii	"x\000"
 257 0102 02       		.byte	0x2
 258 0103 FF01     		.2byte	0x1ff
 259 0105 DC000000 		.4byte	0xdc
 260 0109 00       		.byte	0
 261 010a 09       		.uleb128 0x9
 262 010b 00000000 		.4byte	.LASF30
 263 010f 01       		.byte	0x1
 264 0110 37       		.byte	0x37
 265 0111 00000000 		.4byte	.LFB82
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 17


 266 0115 88000000 		.4byte	.LFE82-.LFB82
 267 0119 01       		.uleb128 0x1
 268 011a 9C       		.byte	0x9c
 269 011b 0A       		.uleb128 0xa
 270 011c 0C000000 		.4byte	.LASF22
 271 0120 01       		.byte	0x1
 272 0121 38       		.byte	0x38
 273 0122 E8000000 		.4byte	0xe8
 274 0126 02       		.uleb128 0x2
 275 0127 91       		.byte	0x91
 276 0128 54       		.sleb128 -44
 277 0129 0A       		.uleb128 0xa
 278 012a 12000000 		.4byte	.LASF23
 279 012e 01       		.byte	0x1
 280 012f 39       		.byte	0x39
 281 0130 E8000000 		.4byte	0xe8
 282 0134 02       		.uleb128 0x2
 283 0135 91       		.byte	0x91
 284 0136 50       		.sleb128 -48
 285 0137 0A       		.uleb128 0xa
 286 0138 AE000000 		.4byte	.LASF24
 287 013c 01       		.byte	0x1
 288 013d 3A       		.byte	0x3a
 289 013e E8000000 		.4byte	0xe8
 290 0142 02       		.uleb128 0x2
 291 0143 91       		.byte	0x91
 292 0144 4C       		.sleb128 -52
 293 0145 0A       		.uleb128 0xa
 294 0146 DA010000 		.4byte	.LASF25
 295 014a 01       		.byte	0x1
 296 014b 3B       		.byte	0x3b
 297 014c 97000000 		.4byte	0x97
 298 0150 02       		.uleb128 0x2
 299 0151 91       		.byte	0x91
 300 0152 48       		.sleb128 -56
 301 0153 0B       		.uleb128 0xb
 302 0154 82000000 		.4byte	.LASF31
 303 0158 01       		.byte	0x1
 304 0159 3D       		.byte	0x3d
 305 015a 97000000 		.4byte	0x97
 306 015e 02       		.uleb128 0x2
 307 015f 91       		.byte	0x91
 308 0160 64       		.sleb128 -28
 309 0161 0C       		.uleb128 0xc
 310 0162 EE000000 		.4byte	0xee
 311 0166 42000000 		.4byte	.LBB4
 312 016a 2C000000 		.4byte	.LBE4-.LBB4
 313 016e 01       		.byte	0x1
 314 016f 7C       		.byte	0x7c
 315 0170 0D       		.uleb128 0xd
 316 0171 FF000000 		.4byte	0xff
 317 0175 02       		.uleb128 0x2
 318 0176 91       		.byte	0x91
 319 0177 58       		.sleb128 -40
 320 0178 00       		.byte	0
 321 0179 00       		.byte	0
 322 017a 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 18


 323              		.section	.debug_abbrev,"",%progbits
 324              	.Ldebug_abbrev0:
 325 0000 01       		.uleb128 0x1
 326 0001 11       		.uleb128 0x11
 327 0002 01       		.byte	0x1
 328 0003 25       		.uleb128 0x25
 329 0004 0E       		.uleb128 0xe
 330 0005 13       		.uleb128 0x13
 331 0006 0B       		.uleb128 0xb
 332 0007 03       		.uleb128 0x3
 333 0008 0E       		.uleb128 0xe
 334 0009 1B       		.uleb128 0x1b
 335 000a 0E       		.uleb128 0xe
 336 000b 55       		.uleb128 0x55
 337 000c 17       		.uleb128 0x17
 338 000d 11       		.uleb128 0x11
 339 000e 01       		.uleb128 0x1
 340 000f 10       		.uleb128 0x10
 341 0010 17       		.uleb128 0x17
 342 0011 00       		.byte	0
 343 0012 00       		.byte	0
 344 0013 02       		.uleb128 0x2
 345 0014 24       		.uleb128 0x24
 346 0015 00       		.byte	0
 347 0016 0B       		.uleb128 0xb
 348 0017 0B       		.uleb128 0xb
 349 0018 3E       		.uleb128 0x3e
 350 0019 0B       		.uleb128 0xb
 351 001a 03       		.uleb128 0x3
 352 001b 0E       		.uleb128 0xe
 353 001c 00       		.byte	0
 354 001d 00       		.byte	0
 355 001e 03       		.uleb128 0x3
 356 001f 16       		.uleb128 0x16
 357 0020 00       		.byte	0
 358 0021 03       		.uleb128 0x3
 359 0022 0E       		.uleb128 0xe
 360 0023 3A       		.uleb128 0x3a
 361 0024 0B       		.uleb128 0xb
 362 0025 3B       		.uleb128 0x3b
 363 0026 0B       		.uleb128 0xb
 364 0027 49       		.uleb128 0x49
 365 0028 13       		.uleb128 0x13
 366 0029 00       		.byte	0
 367 002a 00       		.byte	0
 368 002b 04       		.uleb128 0x4
 369 002c 24       		.uleb128 0x24
 370 002d 00       		.byte	0
 371 002e 0B       		.uleb128 0xb
 372 002f 0B       		.uleb128 0xb
 373 0030 3E       		.uleb128 0x3e
 374 0031 0B       		.uleb128 0xb
 375 0032 03       		.uleb128 0x3
 376 0033 08       		.uleb128 0x8
 377 0034 00       		.byte	0
 378 0035 00       		.byte	0
 379 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 19


 380 0037 16       		.uleb128 0x16
 381 0038 00       		.byte	0
 382 0039 03       		.uleb128 0x3
 383 003a 0E       		.uleb128 0xe
 384 003b 3A       		.uleb128 0x3a
 385 003c 0B       		.uleb128 0xb
 386 003d 3B       		.uleb128 0x3b
 387 003e 05       		.uleb128 0x5
 388 003f 49       		.uleb128 0x49
 389 0040 13       		.uleb128 0x13
 390 0041 00       		.byte	0
 391 0042 00       		.byte	0
 392 0043 06       		.uleb128 0x6
 393 0044 0F       		.uleb128 0xf
 394 0045 00       		.byte	0
 395 0046 0B       		.uleb128 0xb
 396 0047 0B       		.uleb128 0xb
 397 0048 49       		.uleb128 0x49
 398 0049 13       		.uleb128 0x13
 399 004a 00       		.byte	0
 400 004b 00       		.byte	0
 401 004c 07       		.uleb128 0x7
 402 004d 2E       		.uleb128 0x2e
 403 004e 01       		.byte	0x1
 404 004f 03       		.uleb128 0x3
 405 0050 0E       		.uleb128 0xe
 406 0051 3A       		.uleb128 0x3a
 407 0052 0B       		.uleb128 0xb
 408 0053 3B       		.uleb128 0x3b
 409 0054 05       		.uleb128 0x5
 410 0055 27       		.uleb128 0x27
 411 0056 19       		.uleb128 0x19
 412 0057 49       		.uleb128 0x49
 413 0058 13       		.uleb128 0x13
 414 0059 20       		.uleb128 0x20
 415 005a 0B       		.uleb128 0xb
 416 005b 01       		.uleb128 0x1
 417 005c 13       		.uleb128 0x13
 418 005d 00       		.byte	0
 419 005e 00       		.byte	0
 420 005f 08       		.uleb128 0x8
 421 0060 05       		.uleb128 0x5
 422 0061 00       		.byte	0
 423 0062 03       		.uleb128 0x3
 424 0063 08       		.uleb128 0x8
 425 0064 3A       		.uleb128 0x3a
 426 0065 0B       		.uleb128 0xb
 427 0066 3B       		.uleb128 0x3b
 428 0067 05       		.uleb128 0x5
 429 0068 49       		.uleb128 0x49
 430 0069 13       		.uleb128 0x13
 431 006a 00       		.byte	0
 432 006b 00       		.byte	0
 433 006c 09       		.uleb128 0x9
 434 006d 2E       		.uleb128 0x2e
 435 006e 01       		.byte	0x1
 436 006f 3F       		.uleb128 0x3f
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 20


 437 0070 19       		.uleb128 0x19
 438 0071 03       		.uleb128 0x3
 439 0072 0E       		.uleb128 0xe
 440 0073 3A       		.uleb128 0x3a
 441 0074 0B       		.uleb128 0xb
 442 0075 3B       		.uleb128 0x3b
 443 0076 0B       		.uleb128 0xb
 444 0077 27       		.uleb128 0x27
 445 0078 19       		.uleb128 0x19
 446 0079 11       		.uleb128 0x11
 447 007a 01       		.uleb128 0x1
 448 007b 12       		.uleb128 0x12
 449 007c 06       		.uleb128 0x6
 450 007d 40       		.uleb128 0x40
 451 007e 18       		.uleb128 0x18
 452 007f 9742     		.uleb128 0x2117
 453 0081 19       		.uleb128 0x19
 454 0082 00       		.byte	0
 455 0083 00       		.byte	0
 456 0084 0A       		.uleb128 0xa
 457 0085 05       		.uleb128 0x5
 458 0086 00       		.byte	0
 459 0087 03       		.uleb128 0x3
 460 0088 0E       		.uleb128 0xe
 461 0089 3A       		.uleb128 0x3a
 462 008a 0B       		.uleb128 0xb
 463 008b 3B       		.uleb128 0x3b
 464 008c 0B       		.uleb128 0xb
 465 008d 49       		.uleb128 0x49
 466 008e 13       		.uleb128 0x13
 467 008f 02       		.uleb128 0x2
 468 0090 18       		.uleb128 0x18
 469 0091 00       		.byte	0
 470 0092 00       		.byte	0
 471 0093 0B       		.uleb128 0xb
 472 0094 34       		.uleb128 0x34
 473 0095 00       		.byte	0
 474 0096 03       		.uleb128 0x3
 475 0097 0E       		.uleb128 0xe
 476 0098 3A       		.uleb128 0x3a
 477 0099 0B       		.uleb128 0xb
 478 009a 3B       		.uleb128 0x3b
 479 009b 0B       		.uleb128 0xb
 480 009c 49       		.uleb128 0x49
 481 009d 13       		.uleb128 0x13
 482 009e 02       		.uleb128 0x2
 483 009f 18       		.uleb128 0x18
 484 00a0 00       		.byte	0
 485 00a1 00       		.byte	0
 486 00a2 0C       		.uleb128 0xc
 487 00a3 1D       		.uleb128 0x1d
 488 00a4 01       		.byte	0x1
 489 00a5 31       		.uleb128 0x31
 490 00a6 13       		.uleb128 0x13
 491 00a7 11       		.uleb128 0x11
 492 00a8 01       		.uleb128 0x1
 493 00a9 12       		.uleb128 0x12
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 21


 494 00aa 06       		.uleb128 0x6
 495 00ab 58       		.uleb128 0x58
 496 00ac 0B       		.uleb128 0xb
 497 00ad 59       		.uleb128 0x59
 498 00ae 0B       		.uleb128 0xb
 499 00af 00       		.byte	0
 500 00b0 00       		.byte	0
 501 00b1 0D       		.uleb128 0xd
 502 00b2 05       		.uleb128 0x5
 503 00b3 00       		.byte	0
 504 00b4 31       		.uleb128 0x31
 505 00b5 13       		.uleb128 0x13
 506 00b6 02       		.uleb128 0x2
 507 00b7 18       		.uleb128 0x18
 508 00b8 00       		.byte	0
 509 00b9 00       		.byte	0
 510 00ba 00       		.byte	0
 511              		.section	.debug_aranges,"",%progbits
 512 0000 1C000000 		.4byte	0x1c
 513 0004 0200     		.2byte	0x2
 514 0006 00000000 		.4byte	.Ldebug_info0
 515 000a 04       		.byte	0x4
 516 000b 00       		.byte	0
 517 000c 0000     		.2byte	0
 518 000e 0000     		.2byte	0
 519 0010 00000000 		.4byte	.LFB82
 520 0014 88000000 		.4byte	.LFE82-.LFB82
 521 0018 00000000 		.4byte	0
 522 001c 00000000 		.4byte	0
 523              		.section	.debug_ranges,"",%progbits
 524              	.Ldebug_ranges0:
 525 0000 00000000 		.4byte	.LFB82
 526 0004 88000000 		.4byte	.LFE82
 527 0008 00000000 		.4byte	0
 528 000c 00000000 		.4byte	0
 529              		.section	.debug_line,"",%progbits
 530              	.Ldebug_line0:
 531 0000 7D010000 		.section	.debug_str,"MS",%progbits,1
 531      02004E01 
 531      00000201 
 531      FB0E0D00 
 531      01010101 
 532              	.LASF30:
 533 0000 61726D5F 		.ascii	"arm_add_q31\000"
 533      6164645F 
 533      71333100 
 534              	.LASF22:
 535 000c 70537263 		.ascii	"pSrcA\000"
 535      4100
 536              	.LASF23:
 537 0012 70537263 		.ascii	"pSrcB\000"
 537      4200
 538              	.LASF5:
 539 0018 5F5F696E 		.ascii	"__int32_t\000"
 539      7433325F 
 539      7400
 540              	.LASF28:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 22


 541 0022 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 541      73657273 
 541      5C666E65 
 541      7665735C 
 541      446F6375 
 542 004f 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 542      655F7370 
 542      6565645F 
 542      73656E73 
 542      6F722E63 
 543              	.LASF18:
 544 0068 666C6F61 		.ascii	"float\000"
 544      7400
 545              	.LASF20:
 546 006e 7133315F 		.ascii	"q31_t\000"
 546      7400
 547              	.LASF1:
 548 0074 756E7369 		.ascii	"unsigned char\000"
 548      676E6564 
 548      20636861 
 548      7200
 549              	.LASF31:
 550 0082 626C6B43 		.ascii	"blkCnt\000"
 550      6E7400
 551              	.LASF7:
 552 0089 6C6F6E67 		.ascii	"long unsigned int\000"
 552      20756E73 
 552      69676E65 
 552      6420696E 
 552      7400
 553              	.LASF3:
 554 009b 73686F72 		.ascii	"short unsigned int\000"
 554      7420756E 
 554      7369676E 
 554      65642069 
 554      6E7400
 555              	.LASF24:
 556 00ae 70447374 		.ascii	"pDst\000"
 556      00
 557              	.LASF8:
 558 00b3 5F5F696E 		.ascii	"__int64_t\000"
 558      7436345F 
 558      7400
 559              	.LASF17:
 560 00bd 646F7562 		.ascii	"double\000"
 560      6C6500
 561              	.LASF6:
 562 00c4 5F5F7569 		.ascii	"__uint32_t\000"
 562      6E743332 
 562      5F7400
 563              	.LASF11:
 564 00cf 756E7369 		.ascii	"unsigned int\000"
 564      676E6564 
 564      20696E74 
 564      00
 565              	.LASF10:
 566 00dc 6C6F6E67 		.ascii	"long long unsigned int\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 23


 566      206C6F6E 
 566      6720756E 
 566      7369676E 
 566      65642069 
 567              	.LASF26:
 568 00f3 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 568      4320342E 
 568      392E3320 
 568      32303135 
 568      30333033 
 569 0126 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 569      20726576 
 569      6973696F 
 569      6E203232 
 569      31323230 
 570 0159 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 570      30202D66 
 570      66756E63 
 570      74696F6E 
 570      2D736563 
 571              	.LASF27:
 572 0185 536F7572 		.ascii	"Source\\BasicMathFunctions\\arm_add_q31.c\000"
 572      63655C42 
 572      61736963 
 572      4D617468 
 572      46756E63 
 573              	.LASF21:
 574 01ad 7136335F 		.ascii	"q63_t\000"
 574      7400
 575              	.LASF12:
 576 01b3 696E7433 		.ascii	"int32_t\000"
 576      325F7400 
 577              	.LASF15:
 578 01bb 73697A65 		.ascii	"sizetype\000"
 578      74797065 
 578      00
 579              	.LASF14:
 580 01c4 696E7436 		.ascii	"int64_t\000"
 580      345F7400 
 581              	.LASF9:
 582 01cc 6C6F6E67 		.ascii	"long long int\000"
 582      206C6F6E 
 582      6720696E 
 582      7400
 583              	.LASF25:
 584 01da 626C6F63 		.ascii	"blockSize\000"
 584      6B53697A 
 584      6500
 585              	.LASF29:
 586 01e4 636C6970 		.ascii	"clip_q63_to_q31\000"
 586      5F713633 
 586      5F746F5F 
 586      71333100 
 587              	.LASF16:
 588 01f4 63686172 		.ascii	"char\000"
 588      00
 589              	.LASF2:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnkZ3Dc.s 			page 24


 590 01f9 73686F72 		.ascii	"short int\000"
 590      7420696E 
 590      7400
 591              	.LASF13:
 592 0203 75696E74 		.ascii	"uint32_t\000"
 592      33325F74 
 592      00
 593              	.LASF4:
 594 020c 6C6F6E67 		.ascii	"long int\000"
 594      20696E74 
 594      00
 595              	.LASF19:
 596 0215 6C6F6E67 		.ascii	"long double\000"
 596      20646F75 
 596      626C6500 
 597              	.LASF0:
 598 0221 7369676E 		.ascii	"signed char\000"
 598      65642063 
 598      68617200 
 599              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
