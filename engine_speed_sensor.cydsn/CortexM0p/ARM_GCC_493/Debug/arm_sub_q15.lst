ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_sub_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_sub_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_sub_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_sub_q15, %function
  23              	arm_sub_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\BasicMathFunctions\\arm_sub_q15.c"
   1:Source\BasicMathFunctions/arm_sub_q15.c **** /* ----------------------------------------------------------------------
   2:Source\BasicMathFunctions/arm_sub_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\BasicMathFunctions/arm_sub_q15.c ****  * Title:        arm_sub_q15.c
   4:Source\BasicMathFunctions/arm_sub_q15.c ****  * Description:  Q15 vector subtraction
   5:Source\BasicMathFunctions/arm_sub_q15.c ****  *
   6:Source\BasicMathFunctions/arm_sub_q15.c ****  * $Date:        27. January 2017
   7:Source\BasicMathFunctions/arm_sub_q15.c ****  * $Revision:    V.1.5.1
   8:Source\BasicMathFunctions/arm_sub_q15.c ****  *
   9:Source\BasicMathFunctions/arm_sub_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\BasicMathFunctions/arm_sub_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\BasicMathFunctions/arm_sub_q15.c **** /*
  12:Source\BasicMathFunctions/arm_sub_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\BasicMathFunctions/arm_sub_q15.c ****  *
  14:Source\BasicMathFunctions/arm_sub_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\BasicMathFunctions/arm_sub_q15.c ****  *
  16:Source\BasicMathFunctions/arm_sub_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\BasicMathFunctions/arm_sub_q15.c ****  * not use this file except in compliance with the License.
  18:Source\BasicMathFunctions/arm_sub_q15.c ****  * You may obtain a copy of the License at
  19:Source\BasicMathFunctions/arm_sub_q15.c ****  *
  20:Source\BasicMathFunctions/arm_sub_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\BasicMathFunctions/arm_sub_q15.c ****  *
  22:Source\BasicMathFunctions/arm_sub_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\BasicMathFunctions/arm_sub_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\BasicMathFunctions/arm_sub_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\BasicMathFunctions/arm_sub_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\BasicMathFunctions/arm_sub_q15.c ****  * limitations under the License.
  27:Source\BasicMathFunctions/arm_sub_q15.c ****  */
  28:Source\BasicMathFunctions/arm_sub_q15.c **** 
  29:Source\BasicMathFunctions/arm_sub_q15.c **** #include "arm_math.h"
  30:Source\BasicMathFunctions/arm_sub_q15.c **** 
  31:Source\BasicMathFunctions/arm_sub_q15.c **** /**
  32:Source\BasicMathFunctions/arm_sub_q15.c ****  * @ingroup groupMath
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 2


  33:Source\BasicMathFunctions/arm_sub_q15.c ****  */
  34:Source\BasicMathFunctions/arm_sub_q15.c **** 
  35:Source\BasicMathFunctions/arm_sub_q15.c **** /**
  36:Source\BasicMathFunctions/arm_sub_q15.c ****  * @addtogroup BasicSub
  37:Source\BasicMathFunctions/arm_sub_q15.c ****  * @{
  38:Source\BasicMathFunctions/arm_sub_q15.c ****  */
  39:Source\BasicMathFunctions/arm_sub_q15.c **** 
  40:Source\BasicMathFunctions/arm_sub_q15.c **** /**
  41:Source\BasicMathFunctions/arm_sub_q15.c ****  * @brief Q15 vector subtraction.
  42:Source\BasicMathFunctions/arm_sub_q15.c ****  * @param[in]       *pSrcA points to the first input vector
  43:Source\BasicMathFunctions/arm_sub_q15.c ****  * @param[in]       *pSrcB points to the second input vector
  44:Source\BasicMathFunctions/arm_sub_q15.c ****  * @param[out]      *pDst points to the output vector
  45:Source\BasicMathFunctions/arm_sub_q15.c ****  * @param[in]       blockSize number of samples in each vector
  46:Source\BasicMathFunctions/arm_sub_q15.c ****  * @return none.
  47:Source\BasicMathFunctions/arm_sub_q15.c ****  *
  48:Source\BasicMathFunctions/arm_sub_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  49:Source\BasicMathFunctions/arm_sub_q15.c ****  * \par
  50:Source\BasicMathFunctions/arm_sub_q15.c ****  * The function uses saturating arithmetic.
  51:Source\BasicMathFunctions/arm_sub_q15.c ****  * Results outside of the allowable Q15 range [0x8000 0x7FFF] will be saturated.
  52:Source\BasicMathFunctions/arm_sub_q15.c ****  */
  53:Source\BasicMathFunctions/arm_sub_q15.c **** 
  54:Source\BasicMathFunctions/arm_sub_q15.c **** void arm_sub_q15(
  55:Source\BasicMathFunctions/arm_sub_q15.c ****   q15_t * pSrcA,
  56:Source\BasicMathFunctions/arm_sub_q15.c ****   q15_t * pSrcB,
  57:Source\BasicMathFunctions/arm_sub_q15.c ****   q15_t * pDst,
  58:Source\BasicMathFunctions/arm_sub_q15.c ****   uint32_t blockSize)
  59:Source\BasicMathFunctions/arm_sub_q15.c **** {
  26              		.loc 1 59 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 8AB0     		sub	sp, sp, #40
  33              		.cfi_def_cfa_offset 48
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 B960     		str	r1, [r7, #8]
  38 000a 7A60     		str	r2, [r7, #4]
  39 000c 3B60     		str	r3, [r7]
  60:Source\BasicMathFunctions/arm_sub_q15.c ****   uint32_t blkCnt;                               /* loop counter */
  61:Source\BasicMathFunctions/arm_sub_q15.c **** 
  62:Source\BasicMathFunctions/arm_sub_q15.c **** 
  63:Source\BasicMathFunctions/arm_sub_q15.c **** #if defined (ARM_MATH_DSP)
  64:Source\BasicMathFunctions/arm_sub_q15.c **** 
  65:Source\BasicMathFunctions/arm_sub_q15.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  66:Source\BasicMathFunctions/arm_sub_q15.c ****   q31_t inA1, inA2;
  67:Source\BasicMathFunctions/arm_sub_q15.c ****   q31_t inB1, inB2;
  68:Source\BasicMathFunctions/arm_sub_q15.c **** 
  69:Source\BasicMathFunctions/arm_sub_q15.c ****   /*loop Unrolling */
  70:Source\BasicMathFunctions/arm_sub_q15.c ****   blkCnt = blockSize >> 2u;
  71:Source\BasicMathFunctions/arm_sub_q15.c **** 
  72:Source\BasicMathFunctions/arm_sub_q15.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  73:Source\BasicMathFunctions/arm_sub_q15.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  74:Source\BasicMathFunctions/arm_sub_q15.c ****   while (blkCnt > 0u)
  75:Source\BasicMathFunctions/arm_sub_q15.c ****   {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 3


  76:Source\BasicMathFunctions/arm_sub_q15.c ****     /* C = A - B */
  77:Source\BasicMathFunctions/arm_sub_q15.c ****     /* Subtract and then store the results in the destination buffer two samples at a time. */
  78:Source\BasicMathFunctions/arm_sub_q15.c ****     inA1 = *__SIMD32(pSrcA)++;
  79:Source\BasicMathFunctions/arm_sub_q15.c ****     inA2 = *__SIMD32(pSrcA)++;
  80:Source\BasicMathFunctions/arm_sub_q15.c ****     inB1 = *__SIMD32(pSrcB)++;
  81:Source\BasicMathFunctions/arm_sub_q15.c ****     inB2 = *__SIMD32(pSrcB)++;
  82:Source\BasicMathFunctions/arm_sub_q15.c **** 
  83:Source\BasicMathFunctions/arm_sub_q15.c ****     *__SIMD32(pDst)++ = __QSUB16(inA1, inB1);
  84:Source\BasicMathFunctions/arm_sub_q15.c ****     *__SIMD32(pDst)++ = __QSUB16(inA2, inB2);
  85:Source\BasicMathFunctions/arm_sub_q15.c **** 
  86:Source\BasicMathFunctions/arm_sub_q15.c ****     /* Decrement the loop counter */
  87:Source\BasicMathFunctions/arm_sub_q15.c ****     blkCnt--;
  88:Source\BasicMathFunctions/arm_sub_q15.c ****   }
  89:Source\BasicMathFunctions/arm_sub_q15.c **** 
  90:Source\BasicMathFunctions/arm_sub_q15.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
  91:Source\BasicMathFunctions/arm_sub_q15.c ****    ** No loop unrolling is used. */
  92:Source\BasicMathFunctions/arm_sub_q15.c ****   blkCnt = blockSize % 0x4u;
  93:Source\BasicMathFunctions/arm_sub_q15.c **** 
  94:Source\BasicMathFunctions/arm_sub_q15.c ****   while (blkCnt > 0u)
  95:Source\BasicMathFunctions/arm_sub_q15.c ****   {
  96:Source\BasicMathFunctions/arm_sub_q15.c ****     /* C = A - B */
  97:Source\BasicMathFunctions/arm_sub_q15.c ****     /* Subtract and then store the result in the destination buffer. */
  98:Source\BasicMathFunctions/arm_sub_q15.c ****     *pDst++ = (q15_t) __QSUB16(*pSrcA++, *pSrcB++);
  99:Source\BasicMathFunctions/arm_sub_q15.c **** 
 100:Source\BasicMathFunctions/arm_sub_q15.c ****     /* Decrement the loop counter */
 101:Source\BasicMathFunctions/arm_sub_q15.c ****     blkCnt--;
 102:Source\BasicMathFunctions/arm_sub_q15.c ****   }
 103:Source\BasicMathFunctions/arm_sub_q15.c **** 
 104:Source\BasicMathFunctions/arm_sub_q15.c **** #else
 105:Source\BasicMathFunctions/arm_sub_q15.c **** 
 106:Source\BasicMathFunctions/arm_sub_q15.c ****   /* Run the below code for Cortex-M0 */
 107:Source\BasicMathFunctions/arm_sub_q15.c **** 
 108:Source\BasicMathFunctions/arm_sub_q15.c ****   /* Initialize blkCnt with number of samples */
 109:Source\BasicMathFunctions/arm_sub_q15.c ****   blkCnt = blockSize;
  40              		.loc 1 109 0
  41 000e 3B68     		ldr	r3, [r7]
  42 0010 7B62     		str	r3, [r7, #36]
 110:Source\BasicMathFunctions/arm_sub_q15.c **** 
 111:Source\BasicMathFunctions/arm_sub_q15.c ****   while (blkCnt > 0u)
  43              		.loc 1 111 0
  44 0012 3EE0     		b	.L2
  45              	.L9:
 112:Source\BasicMathFunctions/arm_sub_q15.c ****   {
 113:Source\BasicMathFunctions/arm_sub_q15.c ****     /* C = A - B */
 114:Source\BasicMathFunctions/arm_sub_q15.c ****     /* Subtract and then store the result in the destination buffer. */
 115:Source\BasicMathFunctions/arm_sub_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) * pSrcA++ - *pSrcB++), 16);
  46              		.loc 1 115 0
  47 0014 7B68     		ldr	r3, [r7, #4]
  48 0016 9A1C     		add	r2, r3, #2
  49 0018 7A60     		str	r2, [r7, #4]
  50 001a FA68     		ldr	r2, [r7, #12]
  51 001c 911C     		add	r1, r2, #2
  52 001e F960     		str	r1, [r7, #12]
  53 0020 1288     		ldrh	r2, [r2]
  54 0022 11B2     		sxth	r1, r2
  55 0024 BA68     		ldr	r2, [r7, #8]
  56 0026 901C     		add	r0, r2, #2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 4


  57 0028 B860     		str	r0, [r7, #8]
  58 002a 1288     		ldrh	r2, [r2]
  59 002c 12B2     		sxth	r2, r2
  60 002e 8A1A     		sub	r2, r1, r2
  61 0030 3A62     		str	r2, [r7, #32]
  62 0032 1022     		mov	r2, #16
  63 0034 FA61     		str	r2, [r7, #28]
  64              	.LBB4:
  65              	.LBB5:
  66              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 5


  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 6


 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 7


 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 8


 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 9


 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 10


 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 11


 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 12


 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 13


 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 14


 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 15


 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 16


 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
  67              		.loc 2 699 0
  68 0036 0122     		mov	r2, #1
  69 0038 BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  70              		.loc 2 700 0
  71 003a 0022     		mov	r2, #0
  72 003c 7A61     		str	r2, [r7, #20]
  73 003e 05E0     		b	.L3
  74              	.L4:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
  75              		.loc 2 702 0
  76 0040 BA69     		ldr	r2, [r7, #24]
  77 0042 5200     		lsl	r2, r2, #1
  78 0044 BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  79              		.loc 2 700 0
  80 0046 7A69     		ldr	r2, [r7, #20]
  81 0048 0132     		add	r2, r2, #1
  82 004a 7A61     		str	r2, [r7, #20]
  83              	.L3:
  84 004c FA69     		ldr	r2, [r7, #28]
  85 004e 013A     		sub	r2, r2, #1
  86 0050 7969     		ldr	r1, [r7, #20]
  87 0052 9142     		cmp	r1, r2
  88 0054 F4D3     		bcc	.L4
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
  89              		.loc 2 705 0
  90 0056 3A6A     		ldr	r2, [r7, #32]
  91 0058 002A     		cmp	r2, #0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 17


  92 005a 09DD     		ble	.L5
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
  93              		.loc 2 707 0
  94 005c BA69     		ldr	r2, [r7, #24]
  95 005e 013A     		sub	r2, r2, #1
  96 0060 BA61     		str	r2, [r7, #24]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
  97              		.loc 2 709 0
  98 0062 396A     		ldr	r1, [r7, #32]
  99 0064 BA69     		ldr	r2, [r7, #24]
 100 0066 9142     		cmp	r1, r2
 101 0068 0CDD     		ble	.L10
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 102              		.loc 2 711 0
 103 006a BA69     		ldr	r2, [r7, #24]
 104 006c 3A62     		str	r2, [r7, #32]
 105 006e 0AE0     		b	.L7
 106              	.L5:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 107              		.loc 2 716 0
 108 0070 BA69     		ldr	r2, [r7, #24]
 109 0072 5242     		neg	r2, r2
 110 0074 3A61     		str	r2, [r7, #16]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 111              		.loc 2 718 0
 112 0076 396A     		ldr	r1, [r7, #32]
 113 0078 3A69     		ldr	r2, [r7, #16]
 114 007a 9142     		cmp	r1, r2
 115 007c 03DA     		bge	.L7
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 116              		.loc 2 720 0
 117 007e 3A69     		ldr	r2, [r7, #16]
 118 0080 3A62     		str	r2, [r7, #32]
 119 0082 00E0     		b	.L7
 120              	.L10:
 711:.\Include/arm_math.h ****       }
 121              		.loc 2 711 0
 122 0084 C046     		mov	r8, r8
 123              	.L7:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 124              		.loc 2 723 0
 125 0086 3A6A     		ldr	r2, [r7, #32]
 126              	.LBE5:
 127              	.LBE4:
 128              		.loc 1 115 0
 129 0088 92B2     		uxth	r2, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 18


 130 008a 1A80     		strh	r2, [r3]
 116:Source\BasicMathFunctions/arm_sub_q15.c **** 
 117:Source\BasicMathFunctions/arm_sub_q15.c ****     /* Decrement the loop counter */
 118:Source\BasicMathFunctions/arm_sub_q15.c ****     blkCnt--;
 131              		.loc 1 118 0
 132 008c 7B6A     		ldr	r3, [r7, #36]
 133 008e 013B     		sub	r3, r3, #1
 134 0090 7B62     		str	r3, [r7, #36]
 135              	.L2:
 111:Source\BasicMathFunctions/arm_sub_q15.c ****   {
 136              		.loc 1 111 0
 137 0092 7B6A     		ldr	r3, [r7, #36]
 138 0094 002B     		cmp	r3, #0
 139 0096 BDD1     		bne	.L9
 119:Source\BasicMathFunctions/arm_sub_q15.c ****   }
 120:Source\BasicMathFunctions/arm_sub_q15.c **** 
 121:Source\BasicMathFunctions/arm_sub_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 122:Source\BasicMathFunctions/arm_sub_q15.c **** 
 123:Source\BasicMathFunctions/arm_sub_q15.c **** 
 124:Source\BasicMathFunctions/arm_sub_q15.c **** }
 140              		.loc 1 124 0
 141 0098 BD46     		mov	sp, r7
 142 009a 0AB0     		add	sp, sp, #40
 143              		@ sp needed
 144 009c 80BD     		pop	{r7, pc}
 145              		.cfi_endproc
 146              	.LFE82:
 147              		.size	arm_sub_q15, .-arm_sub_q15
 148 009e C046     		.text
 149              	.Letext0:
 150              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 151              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 152              		.section	.debug_info,"",%progbits
 153              	.Ldebug_info0:
 154 0000 CD010000 		.4byte	0x1cd
 155 0004 0400     		.2byte	0x4
 156 0006 00000000 		.4byte	.Ldebug_abbrev0
 157 000a 04       		.byte	0x4
 158 000b 01       		.uleb128 0x1
 159 000c 28010000 		.4byte	.LASF28
 160 0010 01       		.byte	0x1
 161 0011 00000000 		.4byte	.LASF29
 162 0015 48000000 		.4byte	.LASF30
 163 0019 00000000 		.4byte	.Ldebug_ranges0+0
 164 001d 00000000 		.4byte	0
 165 0021 00000000 		.4byte	.Ldebug_line0
 166 0025 02       		.uleb128 0x2
 167 0026 01       		.byte	0x1
 168 0027 06       		.byte	0x6
 169 0028 26020000 		.4byte	.LASF0
 170 002c 02       		.uleb128 0x2
 171 002d 01       		.byte	0x1
 172 002e 08       		.byte	0x8
 173 002f A0000000 		.4byte	.LASF1
 174 0033 03       		.uleb128 0x3
 175 0034 28000000 		.4byte	.LASF4
 176 0038 03       		.byte	0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 19


 177 0039 29       		.byte	0x29
 178 003a 3E000000 		.4byte	0x3e
 179 003e 02       		.uleb128 0x2
 180 003f 02       		.byte	0x2
 181 0040 05       		.byte	0x5
 182 0041 F7010000 		.4byte	.LASF2
 183 0045 02       		.uleb128 0x2
 184 0046 02       		.byte	0x2
 185 0047 07       		.byte	0x7
 186 0048 D3000000 		.4byte	.LASF3
 187 004c 03       		.uleb128 0x3
 188 004d 3E000000 		.4byte	.LASF5
 189 0051 03       		.byte	0x3
 190 0052 3F       		.byte	0x3f
 191 0053 57000000 		.4byte	0x57
 192 0057 02       		.uleb128 0x2
 193 0058 04       		.byte	0x4
 194 0059 05       		.byte	0x5
 195 005a 11020000 		.4byte	.LASF6
 196 005e 03       		.uleb128 0x3
 197 005f F9000000 		.4byte	.LASF7
 198 0063 03       		.byte	0x3
 199 0064 41       		.byte	0x41
 200 0065 69000000 		.4byte	0x69
 201 0069 02       		.uleb128 0x2
 202 006a 04       		.byte	0x4
 203 006b 07       		.byte	0x7
 204 006c C1000000 		.4byte	.LASF8
 205 0070 02       		.uleb128 0x2
 206 0071 08       		.byte	0x8
 207 0072 05       		.byte	0x5
 208 0073 DA010000 		.4byte	.LASF9
 209 0077 02       		.uleb128 0x2
 210 0078 08       		.byte	0x8
 211 0079 07       		.byte	0x7
 212 007a 11010000 		.4byte	.LASF10
 213 007e 04       		.uleb128 0x4
 214 007f 04       		.byte	0x4
 215 0080 05       		.byte	0x5
 216 0081 696E7400 		.ascii	"int\000"
 217 0085 02       		.uleb128 0x2
 218 0086 04       		.byte	0x4
 219 0087 07       		.byte	0x7
 220 0088 04010000 		.4byte	.LASF11
 221 008c 03       		.uleb128 0x3
 222 008d BA010000 		.4byte	.LASF12
 223 0091 04       		.byte	0x4
 224 0092 20       		.byte	0x20
 225 0093 33000000 		.4byte	0x33
 226 0097 03       		.uleb128 0x3
 227 0098 C9010000 		.4byte	.LASF13
 228 009c 04       		.byte	0x4
 229 009d 2C       		.byte	0x2c
 230 009e 4C000000 		.4byte	0x4c
 231 00a2 03       		.uleb128 0x3
 232 00a3 08020000 		.4byte	.LASF14
 233 00a7 04       		.byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 20


 234 00a8 2D       		.byte	0x2d
 235 00a9 5E000000 		.4byte	0x5e
 236 00ad 02       		.uleb128 0x2
 237 00ae 04       		.byte	0x4
 238 00af 07       		.byte	0x7
 239 00b0 D1010000 		.4byte	.LASF15
 240 00b4 02       		.uleb128 0x2
 241 00b5 01       		.byte	0x1
 242 00b6 08       		.byte	0x8
 243 00b7 F2010000 		.4byte	.LASF16
 244 00bb 02       		.uleb128 0x2
 245 00bc 08       		.byte	0x8
 246 00bd 04       		.byte	0x4
 247 00be F2000000 		.4byte	.LASF17
 248 00c2 02       		.uleb128 0x2
 249 00c3 04       		.byte	0x4
 250 00c4 04       		.byte	0x4
 251 00c5 94000000 		.4byte	.LASF18
 252 00c9 02       		.uleb128 0x2
 253 00ca 08       		.byte	0x8
 254 00cb 04       		.byte	0x4
 255 00cc 1A020000 		.4byte	.LASF19
 256 00d0 05       		.uleb128 0x5
 257 00d1 8E000000 		.4byte	.LASF20
 258 00d5 02       		.byte	0x2
 259 00d6 9601     		.2byte	0x196
 260 00d8 8C000000 		.4byte	0x8c
 261 00dc 05       		.uleb128 0x5
 262 00dd 9A000000 		.4byte	.LASF21
 263 00e1 02       		.byte	0x2
 264 00e2 9B01     		.2byte	0x19b
 265 00e4 97000000 		.4byte	0x97
 266 00e8 06       		.uleb128 0x6
 267 00e9 04       		.byte	0x4
 268 00ea D0000000 		.4byte	0xd0
 269 00ee 07       		.uleb128 0x7
 270 00ef C2010000 		.4byte	.LASF31
 271 00f3 02       		.byte	0x2
 272 00f4 B402     		.2byte	0x2b4
 273 00f6 DC000000 		.4byte	0xdc
 274 00fa 03       		.byte	0x3
 275 00fb 36010000 		.4byte	0x136
 276 00ff 08       		.uleb128 0x8
 277 0100 7800     		.ascii	"x\000"
 278 0102 02       		.byte	0x2
 279 0103 B502     		.2byte	0x2b5
 280 0105 DC000000 		.4byte	0xdc
 281 0109 08       		.uleb128 0x8
 282 010a 7900     		.ascii	"y\000"
 283 010c 02       		.byte	0x2
 284 010d B602     		.2byte	0x2b6
 285 010f A2000000 		.4byte	0xa2
 286 0113 09       		.uleb128 0x9
 287 0114 01020000 		.4byte	.LASF22
 288 0118 02       		.byte	0x2
 289 0119 B802     		.2byte	0x2b8
 290 011b 97000000 		.4byte	0x97
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 21


 291 011f 09       		.uleb128 0x9
 292 0120 EB000000 		.4byte	.LASF23
 293 0124 02       		.byte	0x2
 294 0125 B802     		.2byte	0x2b8
 295 0127 97000000 		.4byte	0x97
 296 012b 0A       		.uleb128 0xa
 297 012c 6900     		.ascii	"i\000"
 298 012e 02       		.byte	0x2
 299 012f B902     		.2byte	0x2b9
 300 0131 A2000000 		.4byte	0xa2
 301 0135 00       		.byte	0
 302 0136 0B       		.uleb128 0xb
 303 0137 B5000000 		.4byte	.LASF32
 304 013b 01       		.byte	0x1
 305 013c 36       		.byte	0x36
 306 013d 00000000 		.4byte	.LFB82
 307 0141 9E000000 		.4byte	.LFE82-.LFB82
 308 0145 01       		.uleb128 0x1
 309 0146 9C       		.byte	0x9c
 310 0147 0C       		.uleb128 0xc
 311 0148 32000000 		.4byte	.LASF24
 312 014c 01       		.byte	0x1
 313 014d 37       		.byte	0x37
 314 014e E8000000 		.4byte	0xe8
 315 0152 02       		.uleb128 0x2
 316 0153 91       		.byte	0x91
 317 0154 5C       		.sleb128 -36
 318 0155 0C       		.uleb128 0xc
 319 0156 38000000 		.4byte	.LASF25
 320 015a 01       		.byte	0x1
 321 015b 38       		.byte	0x38
 322 015c E8000000 		.4byte	0xe8
 323 0160 02       		.uleb128 0x2
 324 0161 91       		.byte	0x91
 325 0162 58       		.sleb128 -40
 326 0163 0C       		.uleb128 0xc
 327 0164 E6000000 		.4byte	.LASF26
 328 0168 01       		.byte	0x1
 329 0169 39       		.byte	0x39
 330 016a E8000000 		.4byte	0xe8
 331 016e 02       		.uleb128 0x2
 332 016f 91       		.byte	0x91
 333 0170 54       		.sleb128 -44
 334 0171 0C       		.uleb128 0xc
 335 0172 E8010000 		.4byte	.LASF27
 336 0176 01       		.byte	0x1
 337 0177 3A       		.byte	0x3a
 338 0178 A2000000 		.4byte	0xa2
 339 017c 02       		.uleb128 0x2
 340 017d 91       		.byte	0x91
 341 017e 50       		.sleb128 -48
 342 017f 0D       		.uleb128 0xd
 343 0180 AE000000 		.4byte	.LASF33
 344 0184 01       		.byte	0x1
 345 0185 3C       		.byte	0x3c
 346 0186 A2000000 		.4byte	0xa2
 347 018a 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 22


 348 018b 91       		.byte	0x91
 349 018c 74       		.sleb128 -12
 350 018d 0E       		.uleb128 0xe
 351 018e EE000000 		.4byte	0xee
 352 0192 36000000 		.4byte	.LBB4
 353 0196 52000000 		.4byte	.LBE4-.LBB4
 354 019a 01       		.byte	0x1
 355 019b 73       		.byte	0x73
 356 019c 0F       		.uleb128 0xf
 357 019d 09010000 		.4byte	0x109
 358 01a1 02       		.uleb128 0x2
 359 01a2 91       		.byte	0x91
 360 01a3 6C       		.sleb128 -20
 361 01a4 0F       		.uleb128 0xf
 362 01a5 FF000000 		.4byte	0xff
 363 01a9 02       		.uleb128 0x2
 364 01aa 91       		.byte	0x91
 365 01ab 70       		.sleb128 -16
 366 01ac 10       		.uleb128 0x10
 367 01ad 36000000 		.4byte	.LBB5
 368 01b1 52000000 		.4byte	.LBE5-.LBB5
 369 01b5 11       		.uleb128 0x11
 370 01b6 13010000 		.4byte	0x113
 371 01ba 02       		.uleb128 0x2
 372 01bb 91       		.byte	0x91
 373 01bc 68       		.sleb128 -24
 374 01bd 11       		.uleb128 0x11
 375 01be 1F010000 		.4byte	0x11f
 376 01c2 02       		.uleb128 0x2
 377 01c3 91       		.byte	0x91
 378 01c4 60       		.sleb128 -32
 379 01c5 11       		.uleb128 0x11
 380 01c6 2B010000 		.4byte	0x12b
 381 01ca 02       		.uleb128 0x2
 382 01cb 91       		.byte	0x91
 383 01cc 64       		.sleb128 -28
 384 01cd 00       		.byte	0
 385 01ce 00       		.byte	0
 386 01cf 00       		.byte	0
 387 01d0 00       		.byte	0
 388              		.section	.debug_abbrev,"",%progbits
 389              	.Ldebug_abbrev0:
 390 0000 01       		.uleb128 0x1
 391 0001 11       		.uleb128 0x11
 392 0002 01       		.byte	0x1
 393 0003 25       		.uleb128 0x25
 394 0004 0E       		.uleb128 0xe
 395 0005 13       		.uleb128 0x13
 396 0006 0B       		.uleb128 0xb
 397 0007 03       		.uleb128 0x3
 398 0008 0E       		.uleb128 0xe
 399 0009 1B       		.uleb128 0x1b
 400 000a 0E       		.uleb128 0xe
 401 000b 55       		.uleb128 0x55
 402 000c 17       		.uleb128 0x17
 403 000d 11       		.uleb128 0x11
 404 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 23


 405 000f 10       		.uleb128 0x10
 406 0010 17       		.uleb128 0x17
 407 0011 00       		.byte	0
 408 0012 00       		.byte	0
 409 0013 02       		.uleb128 0x2
 410 0014 24       		.uleb128 0x24
 411 0015 00       		.byte	0
 412 0016 0B       		.uleb128 0xb
 413 0017 0B       		.uleb128 0xb
 414 0018 3E       		.uleb128 0x3e
 415 0019 0B       		.uleb128 0xb
 416 001a 03       		.uleb128 0x3
 417 001b 0E       		.uleb128 0xe
 418 001c 00       		.byte	0
 419 001d 00       		.byte	0
 420 001e 03       		.uleb128 0x3
 421 001f 16       		.uleb128 0x16
 422 0020 00       		.byte	0
 423 0021 03       		.uleb128 0x3
 424 0022 0E       		.uleb128 0xe
 425 0023 3A       		.uleb128 0x3a
 426 0024 0B       		.uleb128 0xb
 427 0025 3B       		.uleb128 0x3b
 428 0026 0B       		.uleb128 0xb
 429 0027 49       		.uleb128 0x49
 430 0028 13       		.uleb128 0x13
 431 0029 00       		.byte	0
 432 002a 00       		.byte	0
 433 002b 04       		.uleb128 0x4
 434 002c 24       		.uleb128 0x24
 435 002d 00       		.byte	0
 436 002e 0B       		.uleb128 0xb
 437 002f 0B       		.uleb128 0xb
 438 0030 3E       		.uleb128 0x3e
 439 0031 0B       		.uleb128 0xb
 440 0032 03       		.uleb128 0x3
 441 0033 08       		.uleb128 0x8
 442 0034 00       		.byte	0
 443 0035 00       		.byte	0
 444 0036 05       		.uleb128 0x5
 445 0037 16       		.uleb128 0x16
 446 0038 00       		.byte	0
 447 0039 03       		.uleb128 0x3
 448 003a 0E       		.uleb128 0xe
 449 003b 3A       		.uleb128 0x3a
 450 003c 0B       		.uleb128 0xb
 451 003d 3B       		.uleb128 0x3b
 452 003e 05       		.uleb128 0x5
 453 003f 49       		.uleb128 0x49
 454 0040 13       		.uleb128 0x13
 455 0041 00       		.byte	0
 456 0042 00       		.byte	0
 457 0043 06       		.uleb128 0x6
 458 0044 0F       		.uleb128 0xf
 459 0045 00       		.byte	0
 460 0046 0B       		.uleb128 0xb
 461 0047 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 24


 462 0048 49       		.uleb128 0x49
 463 0049 13       		.uleb128 0x13
 464 004a 00       		.byte	0
 465 004b 00       		.byte	0
 466 004c 07       		.uleb128 0x7
 467 004d 2E       		.uleb128 0x2e
 468 004e 01       		.byte	0x1
 469 004f 03       		.uleb128 0x3
 470 0050 0E       		.uleb128 0xe
 471 0051 3A       		.uleb128 0x3a
 472 0052 0B       		.uleb128 0xb
 473 0053 3B       		.uleb128 0x3b
 474 0054 05       		.uleb128 0x5
 475 0055 27       		.uleb128 0x27
 476 0056 19       		.uleb128 0x19
 477 0057 49       		.uleb128 0x49
 478 0058 13       		.uleb128 0x13
 479 0059 20       		.uleb128 0x20
 480 005a 0B       		.uleb128 0xb
 481 005b 01       		.uleb128 0x1
 482 005c 13       		.uleb128 0x13
 483 005d 00       		.byte	0
 484 005e 00       		.byte	0
 485 005f 08       		.uleb128 0x8
 486 0060 05       		.uleb128 0x5
 487 0061 00       		.byte	0
 488 0062 03       		.uleb128 0x3
 489 0063 08       		.uleb128 0x8
 490 0064 3A       		.uleb128 0x3a
 491 0065 0B       		.uleb128 0xb
 492 0066 3B       		.uleb128 0x3b
 493 0067 05       		.uleb128 0x5
 494 0068 49       		.uleb128 0x49
 495 0069 13       		.uleb128 0x13
 496 006a 00       		.byte	0
 497 006b 00       		.byte	0
 498 006c 09       		.uleb128 0x9
 499 006d 34       		.uleb128 0x34
 500 006e 00       		.byte	0
 501 006f 03       		.uleb128 0x3
 502 0070 0E       		.uleb128 0xe
 503 0071 3A       		.uleb128 0x3a
 504 0072 0B       		.uleb128 0xb
 505 0073 3B       		.uleb128 0x3b
 506 0074 05       		.uleb128 0x5
 507 0075 49       		.uleb128 0x49
 508 0076 13       		.uleb128 0x13
 509 0077 00       		.byte	0
 510 0078 00       		.byte	0
 511 0079 0A       		.uleb128 0xa
 512 007a 34       		.uleb128 0x34
 513 007b 00       		.byte	0
 514 007c 03       		.uleb128 0x3
 515 007d 08       		.uleb128 0x8
 516 007e 3A       		.uleb128 0x3a
 517 007f 0B       		.uleb128 0xb
 518 0080 3B       		.uleb128 0x3b
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 25


 519 0081 05       		.uleb128 0x5
 520 0082 49       		.uleb128 0x49
 521 0083 13       		.uleb128 0x13
 522 0084 00       		.byte	0
 523 0085 00       		.byte	0
 524 0086 0B       		.uleb128 0xb
 525 0087 2E       		.uleb128 0x2e
 526 0088 01       		.byte	0x1
 527 0089 3F       		.uleb128 0x3f
 528 008a 19       		.uleb128 0x19
 529 008b 03       		.uleb128 0x3
 530 008c 0E       		.uleb128 0xe
 531 008d 3A       		.uleb128 0x3a
 532 008e 0B       		.uleb128 0xb
 533 008f 3B       		.uleb128 0x3b
 534 0090 0B       		.uleb128 0xb
 535 0091 27       		.uleb128 0x27
 536 0092 19       		.uleb128 0x19
 537 0093 11       		.uleb128 0x11
 538 0094 01       		.uleb128 0x1
 539 0095 12       		.uleb128 0x12
 540 0096 06       		.uleb128 0x6
 541 0097 40       		.uleb128 0x40
 542 0098 18       		.uleb128 0x18
 543 0099 9742     		.uleb128 0x2117
 544 009b 19       		.uleb128 0x19
 545 009c 00       		.byte	0
 546 009d 00       		.byte	0
 547 009e 0C       		.uleb128 0xc
 548 009f 05       		.uleb128 0x5
 549 00a0 00       		.byte	0
 550 00a1 03       		.uleb128 0x3
 551 00a2 0E       		.uleb128 0xe
 552 00a3 3A       		.uleb128 0x3a
 553 00a4 0B       		.uleb128 0xb
 554 00a5 3B       		.uleb128 0x3b
 555 00a6 0B       		.uleb128 0xb
 556 00a7 49       		.uleb128 0x49
 557 00a8 13       		.uleb128 0x13
 558 00a9 02       		.uleb128 0x2
 559 00aa 18       		.uleb128 0x18
 560 00ab 00       		.byte	0
 561 00ac 00       		.byte	0
 562 00ad 0D       		.uleb128 0xd
 563 00ae 34       		.uleb128 0x34
 564 00af 00       		.byte	0
 565 00b0 03       		.uleb128 0x3
 566 00b1 0E       		.uleb128 0xe
 567 00b2 3A       		.uleb128 0x3a
 568 00b3 0B       		.uleb128 0xb
 569 00b4 3B       		.uleb128 0x3b
 570 00b5 0B       		.uleb128 0xb
 571 00b6 49       		.uleb128 0x49
 572 00b7 13       		.uleb128 0x13
 573 00b8 02       		.uleb128 0x2
 574 00b9 18       		.uleb128 0x18
 575 00ba 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 26


 576 00bb 00       		.byte	0
 577 00bc 0E       		.uleb128 0xe
 578 00bd 1D       		.uleb128 0x1d
 579 00be 01       		.byte	0x1
 580 00bf 31       		.uleb128 0x31
 581 00c0 13       		.uleb128 0x13
 582 00c1 11       		.uleb128 0x11
 583 00c2 01       		.uleb128 0x1
 584 00c3 12       		.uleb128 0x12
 585 00c4 06       		.uleb128 0x6
 586 00c5 58       		.uleb128 0x58
 587 00c6 0B       		.uleb128 0xb
 588 00c7 59       		.uleb128 0x59
 589 00c8 0B       		.uleb128 0xb
 590 00c9 00       		.byte	0
 591 00ca 00       		.byte	0
 592 00cb 0F       		.uleb128 0xf
 593 00cc 05       		.uleb128 0x5
 594 00cd 00       		.byte	0
 595 00ce 31       		.uleb128 0x31
 596 00cf 13       		.uleb128 0x13
 597 00d0 02       		.uleb128 0x2
 598 00d1 18       		.uleb128 0x18
 599 00d2 00       		.byte	0
 600 00d3 00       		.byte	0
 601 00d4 10       		.uleb128 0x10
 602 00d5 0B       		.uleb128 0xb
 603 00d6 01       		.byte	0x1
 604 00d7 11       		.uleb128 0x11
 605 00d8 01       		.uleb128 0x1
 606 00d9 12       		.uleb128 0x12
 607 00da 06       		.uleb128 0x6
 608 00db 00       		.byte	0
 609 00dc 00       		.byte	0
 610 00dd 11       		.uleb128 0x11
 611 00de 34       		.uleb128 0x34
 612 00df 00       		.byte	0
 613 00e0 31       		.uleb128 0x31
 614 00e1 13       		.uleb128 0x13
 615 00e2 02       		.uleb128 0x2
 616 00e3 18       		.uleb128 0x18
 617 00e4 00       		.byte	0
 618 00e5 00       		.byte	0
 619 00e6 00       		.byte	0
 620              		.section	.debug_aranges,"",%progbits
 621 0000 1C000000 		.4byte	0x1c
 622 0004 0200     		.2byte	0x2
 623 0006 00000000 		.4byte	.Ldebug_info0
 624 000a 04       		.byte	0x4
 625 000b 00       		.byte	0
 626 000c 0000     		.2byte	0
 627 000e 0000     		.2byte	0
 628 0010 00000000 		.4byte	.LFB82
 629 0014 9E000000 		.4byte	.LFE82-.LFB82
 630 0018 00000000 		.4byte	0
 631 001c 00000000 		.4byte	0
 632              		.section	.debug_ranges,"",%progbits
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 27


 633              	.Ldebug_ranges0:
 634 0000 00000000 		.4byte	.LFB82
 635 0004 9E000000 		.4byte	.LFE82
 636 0008 00000000 		.4byte	0
 637 000c 00000000 		.4byte	0
 638              		.section	.debug_line,"",%progbits
 639              	.Ldebug_line0:
 640 0000 8C010000 		.section	.debug_str,"MS",%progbits,1
 640      02004E01 
 640      00000201 
 640      FB0E0D00 
 640      01010101 
 641              	.LASF29:
 642 0000 536F7572 		.ascii	"Source\\BasicMathFunctions\\arm_sub_q15.c\000"
 642      63655C42 
 642      61736963 
 642      4D617468 
 642      46756E63 
 643              	.LASF4:
 644 0028 5F5F696E 		.ascii	"__int16_t\000"
 644      7431365F 
 644      7400
 645              	.LASF24:
 646 0032 70537263 		.ascii	"pSrcA\000"
 646      4100
 647              	.LASF25:
 648 0038 70537263 		.ascii	"pSrcB\000"
 648      4200
 649              	.LASF5:
 650 003e 5F5F696E 		.ascii	"__int32_t\000"
 650      7433325F 
 650      7400
 651              	.LASF30:
 652 0048 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 652      73657273 
 652      5C666E65 
 652      7665735C 
 652      446F6375 
 653 0075 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 653      655F7370 
 653      6565645F 
 653      73656E73 
 653      6F722E63 
 654              	.LASF20:
 655 008e 7131355F 		.ascii	"q15_t\000"
 655      7400
 656              	.LASF18:
 657 0094 666C6F61 		.ascii	"float\000"
 657      7400
 658              	.LASF21:
 659 009a 7133315F 		.ascii	"q31_t\000"
 659      7400
 660              	.LASF1:
 661 00a0 756E7369 		.ascii	"unsigned char\000"
 661      676E6564 
 661      20636861 
 661      7200
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 28


 662              	.LASF33:
 663 00ae 626C6B43 		.ascii	"blkCnt\000"
 663      6E7400
 664              	.LASF32:
 665 00b5 61726D5F 		.ascii	"arm_sub_q15\000"
 665      7375625F 
 665      71313500 
 666              	.LASF8:
 667 00c1 6C6F6E67 		.ascii	"long unsigned int\000"
 667      20756E73 
 667      69676E65 
 667      6420696E 
 667      7400
 668              	.LASF3:
 669 00d3 73686F72 		.ascii	"short unsigned int\000"
 669      7420756E 
 669      7369676E 
 669      65642069 
 669      6E7400
 670              	.LASF26:
 671 00e6 70447374 		.ascii	"pDst\000"
 671      00
 672              	.LASF23:
 673 00eb 6E65674D 		.ascii	"negMin\000"
 673      696E00
 674              	.LASF17:
 675 00f2 646F7562 		.ascii	"double\000"
 675      6C6500
 676              	.LASF7:
 677 00f9 5F5F7569 		.ascii	"__uint32_t\000"
 677      6E743332 
 677      5F7400
 678              	.LASF11:
 679 0104 756E7369 		.ascii	"unsigned int\000"
 679      676E6564 
 679      20696E74 
 679      00
 680              	.LASF10:
 681 0111 6C6F6E67 		.ascii	"long long unsigned int\000"
 681      206C6F6E 
 681      6720756E 
 681      7369676E 
 681      65642069 
 682              	.LASF28:
 683 0128 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 683      4320342E 
 683      392E3320 
 683      32303135 
 683      30333033 
 684 015b 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 684      20726576 
 684      6973696F 
 684      6E203232 
 684      31323230 
 685 018e 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 685      30202D66 
 685      66756E63 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccxcS3pZ.s 			page 29


 685      74696F6E 
 685      2D736563 
 686              	.LASF12:
 687 01ba 696E7431 		.ascii	"int16_t\000"
 687      365F7400 
 688              	.LASF31:
 689 01c2 5F5F5353 		.ascii	"__SSAT\000"
 689      415400
 690              	.LASF13:
 691 01c9 696E7433 		.ascii	"int32_t\000"
 691      325F7400 
 692              	.LASF15:
 693 01d1 73697A65 		.ascii	"sizetype\000"
 693      74797065 
 693      00
 694              	.LASF9:
 695 01da 6C6F6E67 		.ascii	"long long int\000"
 695      206C6F6E 
 695      6720696E 
 695      7400
 696              	.LASF27:
 697 01e8 626C6F63 		.ascii	"blockSize\000"
 697      6B53697A 
 697      6500
 698              	.LASF16:
 699 01f2 63686172 		.ascii	"char\000"
 699      00
 700              	.LASF2:
 701 01f7 73686F72 		.ascii	"short int\000"
 701      7420696E 
 701      7400
 702              	.LASF22:
 703 0201 706F734D 		.ascii	"posMax\000"
 703      617800
 704              	.LASF14:
 705 0208 75696E74 		.ascii	"uint32_t\000"
 705      33325F74 
 705      00
 706              	.LASF6:
 707 0211 6C6F6E67 		.ascii	"long int\000"
 707      20696E74 
 707      00
 708              	.LASF19:
 709 021a 6C6F6E67 		.ascii	"long double\000"
 709      20646F75 
 709      626C6500 
 710              	.LASF0:
 711 0226 7369676E 		.ascii	"signed char\000"
 711      65642063 
 711      68617200 
 712              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
