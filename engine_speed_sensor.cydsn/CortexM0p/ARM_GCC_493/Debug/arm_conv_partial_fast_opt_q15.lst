ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_conv_partial_fast_opt_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_conv_partial_fast_opt_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_conv_partial_fast_opt_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_conv_partial_fast_opt_q15, %function
  23              	arm_conv_partial_fast_opt_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\FilteringFunctions\\arm_conv_partial_fast_opt_q15.c"
   1:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** /* ----------------------------------------------------------------------
   2:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * Title:        arm_conv_partial_fast_opt_q15.c
   4:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * Description:  Fast Q15 Partial convolution
   5:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  *
   6:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * $Date:        27. January 2017
   7:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * $Revision:    V.1.5.1
   8:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  *
   9:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** /*
  12:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  *
  14:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  *
  16:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * not use this file except in compliance with the License.
  18:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * You may obtain a copy of the License at
  19:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  *
  20:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  *
  22:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * limitations under the License.
  27:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  */
  28:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
  29:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #include "arm_math.h"
  30:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
  31:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** /**
  32:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @ingroup groupFilters
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 2


  33:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  */
  34:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
  35:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** /**
  36:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @addtogroup PartialConv
  37:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @{
  38:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  */
  39:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
  40:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** /**
  41:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @brief Partial convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4.
  42:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @param[in]       *pSrcA points to the first input sequence.
  43:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @param[in]       srcALen length of the first input sequence.
  44:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @param[in]       *pSrcB points to the second input sequence.
  45:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @param[in]       srcBLen length of the second input sequence.
  46:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @param[out]      *pDst points to the location where the output result is written.
  47:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @param[in]       firstIndex is the first output sample to start with.
  48:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @param[in]       numPoints is the number of output points to be computed.
  49:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @param[in]       *pScratch1 points to scratch buffer of size max(srcALen, srcBLen) + 2*min(srcAL
  50:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @param[in]       *pScratch2 points to scratch buffer of size min(srcALen, srcBLen).
  51:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * @return Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMENT
  52:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  *
  53:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * See <code>arm_conv_partial_q15()</code> for a slower implementation of this function which uses 
  54:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  *
  55:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  * \par Restrictions
  56:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  *  If the silicon does not support unaligned memory access enable the macro UNALIGNED_SUPPORT_DISA
  57:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  *	In this case input, output, scratch1 and scratch2 buffers should be aligned by 32-bit
  58:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  *
  59:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****  */
  60:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
  61:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #ifndef UNALIGNED_SUPPORT_DISABLE
  62:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
  63:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** arm_status arm_conv_partial_fast_opt_q15(
  64:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q15_t * pSrcA,
  65:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   uint32_t srcALen,
  66:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q15_t * pSrcB,
  67:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   uint32_t srcBLen,
  68:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q15_t * pDst,
  69:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   uint32_t firstIndex,
  70:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   uint32_t numPoints,
  71:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q15_t * pScratch1,
  72:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q15_t * pScratch2)
  73:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** {
  26              		.loc 1 73 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 CEB0     		sub	sp, sp, #312
  33              		.cfi_def_cfa_offset 320
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 B960     		str	r1, [r7, #8]
  38 000a 7A60     		str	r2, [r7, #4]
  39 000c 3B60     		str	r3, [r7]
  74:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
  75:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q15_t *pOut = pDst;                            /* output pointer */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 3


  40              		.loc 1 75 0
  41 000e A023     		mov	r3, #160
  42 0010 5B00     		lsl	r3, r3, #1
  43 0012 FB18     		add	r3, r7, r3
  44 0014 1B68     		ldr	r3, [r3]
  45 0016 FB61     		str	r3, [r7, #28]
  76:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q15_t *pScr1 = pScratch1;                      /* Temporary pointer for scratch1 */
  46              		.loc 1 76 0
  47 0018 A623     		mov	r3, #166
  48 001a 5B00     		lsl	r3, r3, #1
  49 001c FB18     		add	r3, r7, r3
  50 001e 1B68     		ldr	r3, [r3]
  51 0020 BB61     		str	r3, [r7, #24]
  77:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q15_t *pScr2 = pScratch2;                      /* Temporary pointer for scratch1 */
  52              		.loc 1 77 0
  53 0022 A823     		mov	r3, #168
  54 0024 5B00     		lsl	r3, r3, #1
  55 0026 FB18     		add	r3, r7, r3
  56 0028 1B68     		ldr	r3, [r3]
  57 002a 9A22     		mov	r2, #154
  58 002c 5200     		lsl	r2, r2, #1
  59 002e BA18     		add	r2, r7, r2
  60 0030 1360     		str	r3, [r2]
  78:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q31_t acc0, acc1, acc2, acc3;                  /* Accumulator */
  79:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q31_t x1, x2, x3;                              /* Temporary variables to hold state and coefficie
  80:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q31_t y1, y2;                                  /* State variables */
  81:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q15_t *pIn1;                                   /* inputA pointer */
  82:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q15_t *pIn2;                                   /* inputB pointer */
  83:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q15_t *px;                                     /* Intermediate inputA pointer  */
  84:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   q15_t *py;                                     /* Intermediate inputB pointer  */
  85:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   uint32_t j, k, blkCnt;                         /* loop counter */
  86:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   arm_status status;
  87:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
  88:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   uint32_t tapCnt;                               /* loop count */
  89:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
  90:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   /* Check for range of output samples to be calculated */
  91:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   if ((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
  61              		.loc 1 91 0
  62 0032 A223     		mov	r3, #162
  63 0034 5B00     		lsl	r3, r3, #1
  64 0036 FB18     		add	r3, r7, r3
  65 0038 1A68     		ldr	r2, [r3]
  66 003a A423     		mov	r3, #164
  67 003c 5B00     		lsl	r3, r3, #1
  68 003e FB18     		add	r3, r7, r3
  69 0040 1B68     		ldr	r3, [r3]
  70 0042 D218     		add	r2, r2, r3
  71 0044 3968     		ldr	r1, [r7]
  72 0046 BB68     		ldr	r3, [r7, #8]
  73 0048 CB18     		add	r3, r1, r3
  74 004a 013B     		sub	r3, r3, #1
  75 004c 9A42     		cmp	r2, r3
  76 004e 06D9     		bls	.L2
  92:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   {
  93:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Set status as ARM_MATH_ARGUMENT_ERROR */
  94:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     status = ARM_MATH_ARGUMENT_ERROR;
  77              		.loc 1 94 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 4


  78 0050 0C23     		mov	r3, #12
  79 0052 FF33     		add	r3, r3, #255
  80 0054 FB18     		add	r3, r7, r3
  81 0056 FF22     		mov	r2, #255
  82 0058 1A70     		strb	r2, [r3]
  83 005a 00F092FD 		bl	.L3	@ far jump
  84              	.L2:
  95:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   }
  96:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   else
  97:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   {
  98:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
  99:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* The algorithm implementation is based on the lengths of the inputs. */
 100:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* srcB is always made to slide across srcA. */
 101:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* So srcBLen is always considered as shorter or equal to srcALen */
 102:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     if (srcALen >= srcBLen)
  85              		.loc 1 102 0
  86 005e BA68     		ldr	r2, [r7, #8]
  87 0060 3B68     		ldr	r3, [r7]
  88 0062 9A42     		cmp	r2, r3
  89 0064 07D3     		bcc	.L4
 103:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     {
 104:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Initialization of inputA pointer */
 105:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       pIn1 = pSrcA;
  90              		.loc 1 105 0
  91 0066 FB68     		ldr	r3, [r7, #12]
  92 0068 8C22     		mov	r2, #140
  93 006a 5200     		lsl	r2, r2, #1
  94 006c BA18     		add	r2, r7, r2
  95 006e 1360     		str	r3, [r2]
 106:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 107:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Initialization of inputB pointer */
 108:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       pIn2 = pSrcB;
  96              		.loc 1 108 0
  97 0070 7B68     		ldr	r3, [r7, #4]
  98 0072 7B61     		str	r3, [r7, #20]
  99 0074 10E0     		b	.L5
 100              	.L4:
 109:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     }
 110:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     else
 111:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     {
 112:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Initialization of inputA pointer */
 113:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       pIn1 = pSrcB;
 101              		.loc 1 113 0
 102 0076 7B68     		ldr	r3, [r7, #4]
 103 0078 8C22     		mov	r2, #140
 104 007a 5200     		lsl	r2, r2, #1
 105 007c BA18     		add	r2, r7, r2
 106 007e 1360     		str	r3, [r2]
 114:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 115:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Initialization of inputB pointer */
 116:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       pIn2 = pSrcA;
 107              		.loc 1 116 0
 108 0080 FB68     		ldr	r3, [r7, #12]
 109 0082 7B61     		str	r3, [r7, #20]
 117:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 118:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* srcBLen is always considered as shorter or equal to srcALen */
 119:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       j = srcBLen;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 5


 110              		.loc 1 119 0
 111 0084 3B68     		ldr	r3, [r7]
 112 0086 7A1C     		add	r2, r7, #1
 113 0088 FF32     		add	r2, r2, #255
 114 008a 1360     		str	r3, [r2]
 120:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       srcBLen = srcALen;
 115              		.loc 1 120 0
 116 008c BB68     		ldr	r3, [r7, #8]
 117 008e 3B60     		str	r3, [r7]
 121:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       srcALen = j;
 118              		.loc 1 121 0
 119 0090 7B1C     		add	r3, r7, #1
 120 0092 FF33     		add	r3, r3, #255
 121 0094 1B68     		ldr	r3, [r3]
 122 0096 BB60     		str	r3, [r7, #8]
 123              	.L5:
 122:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     }
 123:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 124:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Temporary pointer for scratch2 */
 125:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     py = pScratch2;
 124              		.loc 1 125 0
 125 0098 A823     		mov	r3, #168
 126 009a 5B00     		lsl	r3, r3, #1
 127 009c FB18     		add	r3, r7, r3
 128 009e 1B68     		ldr	r3, [r3]
 129 00a0 FC22     		mov	r2, #252
 130 00a2 BA18     		add	r2, r7, r2
 131 00a4 1360     		str	r3, [r2]
 126:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 127:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* pointer to take end of scratch2 buffer */
 128:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     pScr2 = pScratch2 + srcBLen - 1;
 132              		.loc 1 128 0
 133 00a6 3B68     		ldr	r3, [r7]
 134 00a8 984A     		ldr	r2, .L67
 135 00aa 9446     		mov	ip, r2
 136 00ac 6344     		add	r3, r3, ip
 137 00ae 5B00     		lsl	r3, r3, #1
 138 00b0 A822     		mov	r2, #168
 139 00b2 5200     		lsl	r2, r2, #1
 140 00b4 BA18     		add	r2, r7, r2
 141 00b6 1268     		ldr	r2, [r2]
 142 00b8 D318     		add	r3, r2, r3
 143 00ba 9A22     		mov	r2, #154
 144 00bc 5200     		lsl	r2, r2, #1
 145 00be BA18     		add	r2, r7, r2
 146 00c0 1360     		str	r3, [r2]
 129:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 130:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* points to smaller length sequence */
 131:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     px = pIn2;
 147              		.loc 1 131 0
 148 00c2 7B69     		ldr	r3, [r7, #20]
 149 00c4 8A22     		mov	r2, #138
 150 00c6 5200     		lsl	r2, r2, #1
 151 00c8 BA18     		add	r2, r7, r2
 152 00ca 1360     		str	r3, [r2]
 132:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 133:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Apply loop unrolling and do 4 Copies simultaneously. */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 6


 134:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     k = srcBLen >> 2u;
 153              		.loc 1 134 0
 154 00cc 3B68     		ldr	r3, [r7]
 155 00ce 9B08     		lsr	r3, r3, #2
 156 00d0 8822     		mov	r2, #136
 157 00d2 5200     		lsl	r2, r2, #1
 158 00d4 BA18     		add	r2, r7, r2
 159 00d6 1360     		str	r3, [r2]
 135:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 136:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* First part of the processing with loop unrolling copies 4 data points at a time.
 137:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****      ** a second loop below copies for the remaining 1 to 3 samples. */
 138:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 139:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Copy smaller length input sequence in reverse order into second scratch buffer */
 140:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     while (k > 0u)
 160              		.loc 1 140 0
 161 00d8 58E0     		b	.L6
 162              	.L7:
 141:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     {
 142:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* copy second buffer in reversal manner */
 143:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       *pScr2-- = *px++;
 163              		.loc 1 143 0
 164 00da 9A23     		mov	r3, #154
 165 00dc 5B00     		lsl	r3, r3, #1
 166 00de FB18     		add	r3, r7, r3
 167 00e0 1B68     		ldr	r3, [r3]
 168 00e2 9A1E     		sub	r2, r3, #2
 169 00e4 9A21     		mov	r1, #154
 170 00e6 4900     		lsl	r1, r1, #1
 171 00e8 7918     		add	r1, r7, r1
 172 00ea 0A60     		str	r2, [r1]
 173 00ec 8A22     		mov	r2, #138
 174 00ee 5200     		lsl	r2, r2, #1
 175 00f0 BA18     		add	r2, r7, r2
 176 00f2 1268     		ldr	r2, [r2]
 177 00f4 911C     		add	r1, r2, #2
 178 00f6 8A20     		mov	r0, #138
 179 00f8 4000     		lsl	r0, r0, #1
 180 00fa 3818     		add	r0, r7, r0
 181 00fc 0160     		str	r1, [r0]
 182 00fe 1288     		ldrh	r2, [r2]
 183 0100 1A80     		strh	r2, [r3]
 144:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       *pScr2-- = *px++;
 184              		.loc 1 144 0
 185 0102 9A23     		mov	r3, #154
 186 0104 5B00     		lsl	r3, r3, #1
 187 0106 FB18     		add	r3, r7, r3
 188 0108 1B68     		ldr	r3, [r3]
 189 010a 9A1E     		sub	r2, r3, #2
 190 010c 9A21     		mov	r1, #154
 191 010e 4900     		lsl	r1, r1, #1
 192 0110 7918     		add	r1, r7, r1
 193 0112 0A60     		str	r2, [r1]
 194 0114 8A22     		mov	r2, #138
 195 0116 5200     		lsl	r2, r2, #1
 196 0118 BA18     		add	r2, r7, r2
 197 011a 1268     		ldr	r2, [r2]
 198 011c 911C     		add	r1, r2, #2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 7


 199 011e 8A20     		mov	r0, #138
 200 0120 4000     		lsl	r0, r0, #1
 201 0122 3818     		add	r0, r7, r0
 202 0124 0160     		str	r1, [r0]
 203 0126 1288     		ldrh	r2, [r2]
 204 0128 1A80     		strh	r2, [r3]
 145:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       *pScr2-- = *px++;
 205              		.loc 1 145 0
 206 012a 9A23     		mov	r3, #154
 207 012c 5B00     		lsl	r3, r3, #1
 208 012e FB18     		add	r3, r7, r3
 209 0130 1B68     		ldr	r3, [r3]
 210 0132 9A1E     		sub	r2, r3, #2
 211 0134 9A21     		mov	r1, #154
 212 0136 4900     		lsl	r1, r1, #1
 213 0138 7918     		add	r1, r7, r1
 214 013a 0A60     		str	r2, [r1]
 215 013c 8A22     		mov	r2, #138
 216 013e 5200     		lsl	r2, r2, #1
 217 0140 BA18     		add	r2, r7, r2
 218 0142 1268     		ldr	r2, [r2]
 219 0144 911C     		add	r1, r2, #2
 220 0146 8A20     		mov	r0, #138
 221 0148 4000     		lsl	r0, r0, #1
 222 014a 3818     		add	r0, r7, r0
 223 014c 0160     		str	r1, [r0]
 224 014e 1288     		ldrh	r2, [r2]
 225 0150 1A80     		strh	r2, [r3]
 146:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       *pScr2-- = *px++;
 226              		.loc 1 146 0
 227 0152 9A23     		mov	r3, #154
 228 0154 5B00     		lsl	r3, r3, #1
 229 0156 FB18     		add	r3, r7, r3
 230 0158 1B68     		ldr	r3, [r3]
 231 015a 9A1E     		sub	r2, r3, #2
 232 015c 9A21     		mov	r1, #154
 233 015e 4900     		lsl	r1, r1, #1
 234 0160 7918     		add	r1, r7, r1
 235 0162 0A60     		str	r2, [r1]
 236 0164 8A22     		mov	r2, #138
 237 0166 5200     		lsl	r2, r2, #1
 238 0168 BA18     		add	r2, r7, r2
 239 016a 1268     		ldr	r2, [r2]
 240 016c 911C     		add	r1, r2, #2
 241 016e 8A20     		mov	r0, #138
 242 0170 4000     		lsl	r0, r0, #1
 243 0172 3818     		add	r0, r7, r0
 244 0174 0160     		str	r1, [r0]
 245 0176 1288     		ldrh	r2, [r2]
 246 0178 1A80     		strh	r2, [r3]
 147:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 148:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Decrement the loop counter */
 149:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       k--;
 247              		.loc 1 149 0
 248 017a 8823     		mov	r3, #136
 249 017c 5B00     		lsl	r3, r3, #1
 250 017e FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 8


 251 0180 1B68     		ldr	r3, [r3]
 252 0182 013B     		sub	r3, r3, #1
 253 0184 8822     		mov	r2, #136
 254 0186 5200     		lsl	r2, r2, #1
 255 0188 BA18     		add	r2, r7, r2
 256 018a 1360     		str	r3, [r2]
 257              	.L6:
 140:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     {
 258              		.loc 1 140 0
 259 018c 8823     		mov	r3, #136
 260 018e 5B00     		lsl	r3, r3, #1
 261 0190 FB18     		add	r3, r7, r3
 262 0192 1B68     		ldr	r3, [r3]
 263 0194 002B     		cmp	r3, #0
 264 0196 A0D1     		bne	.L7
 150:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     }
 151:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 152:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* If the count is not a multiple of 4, copy remaining samples here.
 153:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****      ** No loop unrolling is used. */
 154:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     k = srcBLen % 0x4u;
 265              		.loc 1 154 0
 266 0198 3B68     		ldr	r3, [r7]
 267 019a 0322     		mov	r2, #3
 268 019c 1340     		and	r3, r2
 269 019e 8822     		mov	r2, #136
 270 01a0 5200     		lsl	r2, r2, #1
 271 01a2 BA18     		add	r2, r7, r2
 272 01a4 1360     		str	r3, [r2]
 155:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 156:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     while (k > 0u)
 273              		.loc 1 156 0
 274 01a6 1CE0     		b	.L8
 275              	.L9:
 157:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     {
 158:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* copy second buffer in reversal manner for remaining samples */
 159:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       *pScr2-- = *px++;
 276              		.loc 1 159 0
 277 01a8 9A23     		mov	r3, #154
 278 01aa 5B00     		lsl	r3, r3, #1
 279 01ac FB18     		add	r3, r7, r3
 280 01ae 1B68     		ldr	r3, [r3]
 281 01b0 9A1E     		sub	r2, r3, #2
 282 01b2 9A21     		mov	r1, #154
 283 01b4 4900     		lsl	r1, r1, #1
 284 01b6 7918     		add	r1, r7, r1
 285 01b8 0A60     		str	r2, [r1]
 286 01ba 8A22     		mov	r2, #138
 287 01bc 5200     		lsl	r2, r2, #1
 288 01be BA18     		add	r2, r7, r2
 289 01c0 1268     		ldr	r2, [r2]
 290 01c2 911C     		add	r1, r2, #2
 291 01c4 8A20     		mov	r0, #138
 292 01c6 4000     		lsl	r0, r0, #1
 293 01c8 3818     		add	r0, r7, r0
 294 01ca 0160     		str	r1, [r0]
 295 01cc 1288     		ldrh	r2, [r2]
 296 01ce 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 9


 160:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 161:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Decrement the loop counter */
 162:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       k--;
 297              		.loc 1 162 0
 298 01d0 8823     		mov	r3, #136
 299 01d2 5B00     		lsl	r3, r3, #1
 300 01d4 FB18     		add	r3, r7, r3
 301 01d6 1B68     		ldr	r3, [r3]
 302 01d8 013B     		sub	r3, r3, #1
 303 01da 8822     		mov	r2, #136
 304 01dc 5200     		lsl	r2, r2, #1
 305 01de BA18     		add	r2, r7, r2
 306 01e0 1360     		str	r3, [r2]
 307              	.L8:
 156:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     {
 308              		.loc 1 156 0
 309 01e2 8823     		mov	r3, #136
 310 01e4 5B00     		lsl	r3, r3, #1
 311 01e6 FB18     		add	r3, r7, r3
 312 01e8 1B68     		ldr	r3, [r3]
 313 01ea 002B     		cmp	r3, #0
 314 01ec DCD1     		bne	.L9
 163:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     }
 164:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 165:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Initialze temporary scratch pointer */
 166:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     pScr1 = pScratch1;
 315              		.loc 1 166 0
 316 01ee A623     		mov	r3, #166
 317 01f0 5B00     		lsl	r3, r3, #1
 318 01f2 FB18     		add	r3, r7, r3
 319 01f4 1B68     		ldr	r3, [r3]
 320 01f6 BB61     		str	r3, [r7, #24]
 167:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 168:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Assuming scratch1 buffer is aligned by 32-bit */
 169:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Fill (srcBLen - 1u) zeros in scratch buffer */
 170:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     arm_fill_q15(0, pScr1, (srcBLen - 1u));
 321              		.loc 1 170 0
 322 01f8 BA69     		ldr	r2, [r7, #24]
 323 01fa 3B68     		ldr	r3, [r7]
 324 01fc 013B     		sub	r3, r3, #1
 325 01fe 0020     		mov	r0, #0
 326 0200 111C     		mov	r1, r2
 327 0202 1A1C     		mov	r2, r3
 328 0204 FFF7FEFF 		bl	arm_fill_q15
 171:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 172:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Update temporary scratch pointer */
 173:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     pScr1 += (srcBLen - 1u);
 329              		.loc 1 173 0
 330 0208 BA69     		ldr	r2, [r7, #24]
 331 020a 3B68     		ldr	r3, [r7]
 332 020c 3F49     		ldr	r1, .L67
 333 020e 8C46     		mov	ip, r1
 334 0210 6344     		add	r3, r3, ip
 335 0212 5B00     		lsl	r3, r3, #1
 336 0214 D318     		add	r3, r2, r3
 337 0216 BB61     		str	r3, [r7, #24]
 174:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 10


 175:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Copy bigger length sequence(srcALen) samples in scratch1 buffer */
 176:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 177:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Copy (srcALen) samples in scratch buffer */
 178:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     arm_copy_q15(pIn1, pScr1, srcALen);
 338              		.loc 1 178 0
 339 0218 BA69     		ldr	r2, [r7, #24]
 340 021a 8C23     		mov	r3, #140
 341 021c 5B00     		lsl	r3, r3, #1
 342 021e FB18     		add	r3, r7, r3
 343 0220 1968     		ldr	r1, [r3]
 344 0222 BB68     		ldr	r3, [r7, #8]
 345 0224 081C     		mov	r0, r1
 346 0226 111C     		mov	r1, r2
 347 0228 1A1C     		mov	r2, r3
 348 022a FFF7FEFF 		bl	arm_copy_q15
 179:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 180:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Update pointers */
 181:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     pScr1 += srcALen;
 349              		.loc 1 181 0
 350 022e BA69     		ldr	r2, [r7, #24]
 351 0230 BB68     		ldr	r3, [r7, #8]
 352 0232 5B00     		lsl	r3, r3, #1
 353 0234 D318     		add	r3, r2, r3
 354 0236 BB61     		str	r3, [r7, #24]
 182:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 183:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Fill (srcBLen - 1u) zeros at end of scratch buffer */
 184:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     arm_fill_q15(0, pScr1, (srcBLen - 1u));
 355              		.loc 1 184 0
 356 0238 BA69     		ldr	r2, [r7, #24]
 357 023a 3B68     		ldr	r3, [r7]
 358 023c 013B     		sub	r3, r3, #1
 359 023e 0020     		mov	r0, #0
 360 0240 111C     		mov	r1, r2
 361 0242 1A1C     		mov	r2, r3
 362 0244 FFF7FEFF 		bl	arm_fill_q15
 185:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 186:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Update pointer */
 187:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     pScr1 += (srcBLen - 1u);
 363              		.loc 1 187 0
 364 0248 BA69     		ldr	r2, [r7, #24]
 365 024a 3B68     		ldr	r3, [r7]
 366 024c 2F49     		ldr	r1, .L67
 367 024e 8C46     		mov	ip, r1
 368 0250 6344     		add	r3, r3, ip
 369 0252 5B00     		lsl	r3, r3, #1
 370 0254 D318     		add	r3, r2, r3
 371 0256 BB61     		str	r3, [r7, #24]
 188:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 189:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Initialization of pIn2 pointer */
 190:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     pIn2 = py;
 372              		.loc 1 190 0
 373 0258 FC23     		mov	r3, #252
 374 025a FB18     		add	r3, r7, r3
 375 025c 1B68     		ldr	r3, [r3]
 376 025e 7B61     		str	r3, [r7, #20]
 191:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 192:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     pScratch1 += firstIndex;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 11


 377              		.loc 1 192 0
 378 0260 A223     		mov	r3, #162
 379 0262 5B00     		lsl	r3, r3, #1
 380 0264 FB18     		add	r3, r7, r3
 381 0266 1B68     		ldr	r3, [r3]
 382 0268 5B00     		lsl	r3, r3, #1
 383 026a A622     		mov	r2, #166
 384 026c 5200     		lsl	r2, r2, #1
 385 026e BA18     		add	r2, r7, r2
 386 0270 1268     		ldr	r2, [r2]
 387 0272 D318     		add	r3, r2, r3
 388 0274 A622     		mov	r2, #166
 389 0276 5200     		lsl	r2, r2, #1
 390 0278 BA18     		add	r2, r7, r2
 391 027a 1360     		str	r3, [r2]
 193:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 194:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     pOut = pDst + firstIndex;
 392              		.loc 1 194 0
 393 027c A223     		mov	r3, #162
 394 027e 5B00     		lsl	r3, r3, #1
 395 0280 FB18     		add	r3, r7, r3
 396 0282 1B68     		ldr	r3, [r3]
 397 0284 5B00     		lsl	r3, r3, #1
 398 0286 A022     		mov	r2, #160
 399 0288 5200     		lsl	r2, r2, #1
 400 028a BA18     		add	r2, r7, r2
 401 028c 1268     		ldr	r2, [r2]
 402 028e D318     		add	r3, r2, r3
 403 0290 FB61     		str	r3, [r7, #28]
 195:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 196:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* First part of the processing with loop unrolling process 4 data points at a time.
 197:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****      ** a second loop below process for the remaining 1 to 3 samples. */
 198:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 199:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Actual convolution process starts here */
 200:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     blkCnt = (numPoints) >> 2;
 404              		.loc 1 200 0
 405 0292 A423     		mov	r3, #164
 406 0294 5B00     		lsl	r3, r3, #1
 407 0296 FB18     		add	r3, r7, r3
 408 0298 1B68     		ldr	r3, [r3]
 409 029a 9B08     		lsr	r3, r3, #2
 410 029c 8622     		mov	r2, #134
 411 029e 5200     		lsl	r2, r2, #1
 412 02a0 BA18     		add	r2, r7, r2
 413 02a2 1360     		str	r3, [r2]
 201:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 202:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     while (blkCnt > 0)
 414              		.loc 1 202 0
 415 02a4 8CE3     		b	.L10
 416              	.L47:
 203:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     {
 204:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Initialze temporary scratch pointer as scratch1 */
 205:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       pScr1 = pScratch1;
 417              		.loc 1 205 0
 418 02a6 A623     		mov	r3, #166
 419 02a8 5B00     		lsl	r3, r3, #1
 420 02aa FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 12


 421 02ac 1B68     		ldr	r3, [r3]
 422 02ae BB61     		str	r3, [r7, #24]
 206:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 207:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Clear Accumlators */
 208:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       acc0 = 0;
 423              		.loc 1 208 0
 424 02b0 0023     		mov	r3, #0
 425 02b2 9822     		mov	r2, #152
 426 02b4 5200     		lsl	r2, r2, #1
 427 02b6 BA18     		add	r2, r7, r2
 428 02b8 1360     		str	r3, [r2]
 209:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       acc1 = 0;
 429              		.loc 1 209 0
 430 02ba 0023     		mov	r3, #0
 431 02bc 9622     		mov	r2, #150
 432 02be 5200     		lsl	r2, r2, #1
 433 02c0 BA18     		add	r2, r7, r2
 434 02c2 1360     		str	r3, [r2]
 210:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       acc2 = 0;
 435              		.loc 1 210 0
 436 02c4 0023     		mov	r3, #0
 437 02c6 9422     		mov	r2, #148
 438 02c8 5200     		lsl	r2, r2, #1
 439 02ca BA18     		add	r2, r7, r2
 440 02cc 1360     		str	r3, [r2]
 211:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       acc3 = 0;
 441              		.loc 1 211 0
 442 02ce 0023     		mov	r3, #0
 443 02d0 9222     		mov	r2, #146
 444 02d2 5200     		lsl	r2, r2, #1
 445 02d4 BA18     		add	r2, r7, r2
 446 02d6 1360     		str	r3, [r2]
 212:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 213:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Read two samples from scratch1 buffer */
 214:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       x1 = *__SIMD32(pScr1)++;
 447              		.loc 1 214 0
 448 02d8 1823     		mov	r3, #24
 449 02da FB18     		add	r3, r7, r3
 450 02dc 1A68     		ldr	r2, [r3]
 451 02de 111D     		add	r1, r2, #4
 452 02e0 1960     		str	r1, [r3]
 453 02e2 1368     		ldr	r3, [r2]
 454 02e4 9022     		mov	r2, #144
 455 02e6 5200     		lsl	r2, r2, #1
 456 02e8 BA18     		add	r2, r7, r2
 457 02ea 1360     		str	r3, [r2]
 215:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 216:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Read next two samples from scratch1 buffer */
 217:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       x2 = *__SIMD32(pScr1)++;
 458              		.loc 1 217 0
 459 02ec 1823     		mov	r3, #24
 460 02ee FB18     		add	r3, r7, r3
 461 02f0 1A68     		ldr	r2, [r3]
 462 02f2 111D     		add	r1, r2, #4
 463 02f4 1960     		str	r1, [r3]
 464 02f6 1368     		ldr	r3, [r2]
 465 02f8 8E22     		mov	r2, #142
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 13


 466 02fa 5200     		lsl	r2, r2, #1
 467 02fc BA18     		add	r2, r7, r2
 468 02fe 1360     		str	r3, [r2]
 218:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 219:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       tapCnt = (srcBLen) >> 2u;
 469              		.loc 1 219 0
 470 0300 3B68     		ldr	r3, [r7]
 471 0302 9B08     		lsr	r3, r3, #2
 472 0304 7A1D     		add	r2, r7, #5
 473 0306 FF32     		add	r2, r2, #255
 474 0308 1360     		str	r3, [r2]
 220:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 221:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       while (tapCnt > 0u)
 475              		.loc 1 221 0
 476 030a D8E1     		b	.L11
 477              	.L68:
 478              		.align	2
 479              	.L67:
 480 030c FFFFFF7F 		.word	2147483647
 481              	.L20:
 222:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       {
 223:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 224:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* Read four samples from smaller buffer */
 225:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         y1 = _SIMD32_OFFSET(pIn2);
 482              		.loc 1 225 0
 483 0310 7B69     		ldr	r3, [r7, #20]
 484 0312 1B68     		ldr	r3, [r3]
 485 0314 F822     		mov	r2, #248
 486 0316 BA18     		add	r2, r7, r2
 487 0318 1360     		str	r3, [r2]
 226:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         y2 = _SIMD32_OFFSET(pIn2 + 2u);
 488              		.loc 1 226 0
 489 031a 7B69     		ldr	r3, [r7, #20]
 490 031c 5B68     		ldr	r3, [r3, #4]
 491 031e F422     		mov	r2, #244
 492 0320 BA18     		add	r2, r7, r2
 493 0322 1360     		str	r3, [r2]
 227:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 228:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* multiply and accumlate */
 229:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc0 = __SMLAD(x1, y1, acc0);
 494              		.loc 1 229 0
 495 0324 9023     		mov	r3, #144
 496 0326 5B00     		lsl	r3, r3, #1
 497 0328 FB18     		add	r3, r7, r3
 498 032a 1968     		ldr	r1, [r3]
 499 032c F823     		mov	r3, #248
 500 032e FB18     		add	r3, r7, r3
 501 0330 1A68     		ldr	r2, [r3]
 502 0332 9823     		mov	r3, #152
 503 0334 5B00     		lsl	r3, r3, #1
 504 0336 FB18     		add	r3, r7, r3
 505 0338 1B68     		ldr	r3, [r3]
 506 033a EC20     		mov	r0, #236
 507 033c 3818     		add	r0, r7, r0
 508 033e 0160     		str	r1, [r0]
 509 0340 E821     		mov	r1, #232
 510 0342 7918     		add	r1, r7, r1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 14


 511 0344 0A60     		str	r2, [r1]
 512 0346 E422     		mov	r2, #228
 513 0348 BA18     		add	r2, r7, r2
 514 034a 1360     		str	r3, [r2]
 515              	.LBB30:
 516              	.LBB31:
 517              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 15


  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 16


 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 17


 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 18


 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 19


 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 20


 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 21


 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 22


 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 23


 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 24


 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 25


 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 26


 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 724:.\Include/arm_math.h ****   }
 725:.\Include/arm_math.h **** #endif /* end of ARM_MATH_CM0_FAMILY */
 726:.\Include/arm_math.h **** 
 727:.\Include/arm_math.h **** 
 728:.\Include/arm_math.h ****   /*
 729:.\Include/arm_math.h ****    * @brief C custom defined intrinsic function for M3 and M0 processors
 730:.\Include/arm_math.h ****    */
 731:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 732:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 733:.\Include/arm_math.h **** 
 734:.\Include/arm_math.h ****   /*
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 27


 735:.\Include/arm_math.h ****    * @brief C custom defined QADD8 for M3 and M0 processors
 736:.\Include/arm_math.h ****    */
 737:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD8(
 738:.\Include/arm_math.h ****   uint32_t x,
 739:.\Include/arm_math.h ****   uint32_t y)
 740:.\Include/arm_math.h ****   {
 741:.\Include/arm_math.h ****     q31_t r, s, t, u;
 742:.\Include/arm_math.h **** 
 743:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) + (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 744:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) + (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 745:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) + (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 746:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) + (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 747:.\Include/arm_math.h **** 
 748:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 749:.\Include/arm_math.h ****   }
 750:.\Include/arm_math.h **** 
 751:.\Include/arm_math.h **** 
 752:.\Include/arm_math.h ****   /*
 753:.\Include/arm_math.h ****    * @brief C custom defined QSUB8 for M3 and M0 processors
 754:.\Include/arm_math.h ****    */
 755:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB8(
 756:.\Include/arm_math.h ****   uint32_t x,
 757:.\Include/arm_math.h ****   uint32_t y)
 758:.\Include/arm_math.h ****   {
 759:.\Include/arm_math.h ****     q31_t r, s, t, u;
 760:.\Include/arm_math.h **** 
 761:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) - (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 762:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) - (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 763:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) - (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 764:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) - (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 765:.\Include/arm_math.h **** 
 766:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 767:.\Include/arm_math.h ****   }
 768:.\Include/arm_math.h **** 
 769:.\Include/arm_math.h **** 
 770:.\Include/arm_math.h ****   /*
 771:.\Include/arm_math.h ****    * @brief C custom defined QADD16 for M3 and M0 processors
 772:.\Include/arm_math.h ****    */
 773:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD16(
 774:.\Include/arm_math.h ****   uint32_t x,
 775:.\Include/arm_math.h ****   uint32_t y)
 776:.\Include/arm_math.h ****   {
 777:.\Include/arm_math.h **** /*  q31_t r,     s;  without initialisation 'arm_offset_q15 test' fails  but 'intrinsic' tests pass
 778:.\Include/arm_math.h ****     q31_t r = 0, s = 0;
 779:.\Include/arm_math.h **** 
 780:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 781:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 782:.\Include/arm_math.h **** 
 783:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 784:.\Include/arm_math.h ****   }
 785:.\Include/arm_math.h **** 
 786:.\Include/arm_math.h **** 
 787:.\Include/arm_math.h ****   /*
 788:.\Include/arm_math.h ****    * @brief C custom defined SHADD16 for M3 and M0 processors
 789:.\Include/arm_math.h ****    */
 790:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHADD16(
 791:.\Include/arm_math.h ****   uint32_t x,
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 28


 792:.\Include/arm_math.h ****   uint32_t y)
 793:.\Include/arm_math.h ****   {
 794:.\Include/arm_math.h ****     q31_t r, s;
 795:.\Include/arm_math.h **** 
 796:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 797:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 798:.\Include/arm_math.h **** 
 799:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 800:.\Include/arm_math.h ****   }
 801:.\Include/arm_math.h **** 
 802:.\Include/arm_math.h **** 
 803:.\Include/arm_math.h ****   /*
 804:.\Include/arm_math.h ****    * @brief C custom defined QSUB16 for M3 and M0 processors
 805:.\Include/arm_math.h ****    */
 806:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB16(
 807:.\Include/arm_math.h ****   uint32_t x,
 808:.\Include/arm_math.h ****   uint32_t y)
 809:.\Include/arm_math.h ****   {
 810:.\Include/arm_math.h ****     q31_t r, s;
 811:.\Include/arm_math.h **** 
 812:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 813:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 814:.\Include/arm_math.h **** 
 815:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 816:.\Include/arm_math.h ****   }
 817:.\Include/arm_math.h **** 
 818:.\Include/arm_math.h **** 
 819:.\Include/arm_math.h ****   /*
 820:.\Include/arm_math.h ****    * @brief C custom defined SHSUB16 for M3 and M0 processors
 821:.\Include/arm_math.h ****    */
 822:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSUB16(
 823:.\Include/arm_math.h ****   uint32_t x,
 824:.\Include/arm_math.h ****   uint32_t y)
 825:.\Include/arm_math.h ****   {
 826:.\Include/arm_math.h ****     q31_t r, s;
 827:.\Include/arm_math.h **** 
 828:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 829:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 830:.\Include/arm_math.h **** 
 831:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 832:.\Include/arm_math.h ****   }
 833:.\Include/arm_math.h **** 
 834:.\Include/arm_math.h **** 
 835:.\Include/arm_math.h ****   /*
 836:.\Include/arm_math.h ****    * @brief C custom defined QASX for M3 and M0 processors
 837:.\Include/arm_math.h ****    */
 838:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QASX(
 839:.\Include/arm_math.h ****   uint32_t x,
 840:.\Include/arm_math.h ****   uint32_t y)
 841:.\Include/arm_math.h ****   {
 842:.\Include/arm_math.h ****     q31_t r, s;
 843:.\Include/arm_math.h **** 
 844:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 845:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 846:.\Include/arm_math.h **** 
 847:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 848:.\Include/arm_math.h ****   }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 29


 849:.\Include/arm_math.h **** 
 850:.\Include/arm_math.h **** 
 851:.\Include/arm_math.h ****   /*
 852:.\Include/arm_math.h ****    * @brief C custom defined SHASX for M3 and M0 processors
 853:.\Include/arm_math.h ****    */
 854:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHASX(
 855:.\Include/arm_math.h ****   uint32_t x,
 856:.\Include/arm_math.h ****   uint32_t y)
 857:.\Include/arm_math.h ****   {
 858:.\Include/arm_math.h ****     q31_t r, s;
 859:.\Include/arm_math.h **** 
 860:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 861:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 862:.\Include/arm_math.h **** 
 863:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 864:.\Include/arm_math.h ****   }
 865:.\Include/arm_math.h **** 
 866:.\Include/arm_math.h **** 
 867:.\Include/arm_math.h ****   /*
 868:.\Include/arm_math.h ****    * @brief C custom defined QSAX for M3 and M0 processors
 869:.\Include/arm_math.h ****    */
 870:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSAX(
 871:.\Include/arm_math.h ****   uint32_t x,
 872:.\Include/arm_math.h ****   uint32_t y)
 873:.\Include/arm_math.h ****   {
 874:.\Include/arm_math.h ****     q31_t r, s;
 875:.\Include/arm_math.h **** 
 876:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 877:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 878:.\Include/arm_math.h **** 
 879:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 880:.\Include/arm_math.h ****   }
 881:.\Include/arm_math.h **** 
 882:.\Include/arm_math.h **** 
 883:.\Include/arm_math.h ****   /*
 884:.\Include/arm_math.h ****    * @brief C custom defined SHSAX for M3 and M0 processors
 885:.\Include/arm_math.h ****    */
 886:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSAX(
 887:.\Include/arm_math.h ****   uint32_t x,
 888:.\Include/arm_math.h ****   uint32_t y)
 889:.\Include/arm_math.h ****   {
 890:.\Include/arm_math.h ****     q31_t r, s;
 891:.\Include/arm_math.h **** 
 892:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 893:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 894:.\Include/arm_math.h **** 
 895:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 896:.\Include/arm_math.h ****   }
 897:.\Include/arm_math.h **** 
 898:.\Include/arm_math.h **** 
 899:.\Include/arm_math.h ****   /*
 900:.\Include/arm_math.h ****    * @brief C custom defined SMUSDX for M3 and M0 processors
 901:.\Include/arm_math.h ****    */
 902:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUSDX(
 903:.\Include/arm_math.h ****   uint32_t x,
 904:.\Include/arm_math.h ****   uint32_t y)
 905:.\Include/arm_math.h ****   {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 30


 906:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 907:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 908:.\Include/arm_math.h ****   }
 909:.\Include/arm_math.h **** 
 910:.\Include/arm_math.h ****   /*
 911:.\Include/arm_math.h ****    * @brief C custom defined SMUADX for M3 and M0 processors
 912:.\Include/arm_math.h ****    */
 913:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUADX(
 914:.\Include/arm_math.h ****   uint32_t x,
 915:.\Include/arm_math.h ****   uint32_t y)
 916:.\Include/arm_math.h ****   {
 917:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 918:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 919:.\Include/arm_math.h ****   }
 920:.\Include/arm_math.h **** 
 921:.\Include/arm_math.h **** 
 922:.\Include/arm_math.h ****   /*
 923:.\Include/arm_math.h ****    * @brief C custom defined QADD for M3 and M0 processors
 924:.\Include/arm_math.h ****    */
 925:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QADD(
 926:.\Include/arm_math.h ****   int32_t x,
 927:.\Include/arm_math.h ****   int32_t y)
 928:.\Include/arm_math.h ****   {
 929:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x + (q31_t)y)));
 930:.\Include/arm_math.h ****   }
 931:.\Include/arm_math.h **** 
 932:.\Include/arm_math.h **** 
 933:.\Include/arm_math.h ****   /*
 934:.\Include/arm_math.h ****    * @brief C custom defined QSUB for M3 and M0 processors
 935:.\Include/arm_math.h ****    */
 936:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QSUB(
 937:.\Include/arm_math.h ****   int32_t x,
 938:.\Include/arm_math.h ****   int32_t y)
 939:.\Include/arm_math.h ****   {
 940:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x - (q31_t)y)));
 941:.\Include/arm_math.h ****   }
 942:.\Include/arm_math.h **** 
 943:.\Include/arm_math.h **** 
 944:.\Include/arm_math.h ****   /*
 945:.\Include/arm_math.h ****    * @brief C custom defined SMLAD for M3 and M0 processors
 946:.\Include/arm_math.h ****    */
 947:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLAD(
 948:.\Include/arm_math.h ****   uint32_t x,
 949:.\Include/arm_math.h ****   uint32_t y,
 950:.\Include/arm_math.h ****   uint32_t sum)
 951:.\Include/arm_math.h ****   {
 952:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 518              		.loc 2 952 0
 519 034c EC23     		mov	r3, #236
 520 034e FB18     		add	r3, r7, r3
 521 0350 1B68     		ldr	r3, [r3]
 522 0352 1B04     		lsl	r3, r3, #16
 523 0354 1B14     		asr	r3, r3, #16
 524 0356 E822     		mov	r2, #232
 525 0358 BA18     		add	r2, r7, r2
 526 035a 1268     		ldr	r2, [r2]
 527 035c 1204     		lsl	r2, r2, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 31


 528 035e 1214     		asr	r2, r2, #16
 529 0360 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 530              		.loc 2 953 0
 531 0362 EC23     		mov	r3, #236
 532 0364 FB18     		add	r3, r7, r3
 533 0366 1B68     		ldr	r3, [r3]
 534 0368 1B14     		asr	r3, r3, #16
 535 036a E821     		mov	r1, #232
 536 036c 7918     		add	r1, r7, r1
 537 036e 0968     		ldr	r1, [r1]
 538 0370 0914     		asr	r1, r1, #16
 539 0372 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 540              		.loc 2 952 0
 541 0374 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 542              		.loc 2 954 0
 543 0376 E423     		mov	r3, #228
 544 0378 FB18     		add	r3, r7, r3
 545 037a 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 546              		.loc 2 953 0
 547 037c D318     		add	r3, r2, r3
 548              	.LBE31:
 549              	.LBE30:
 550              		.loc 1 229 0
 551 037e 9822     		mov	r2, #152
 552 0380 5200     		lsl	r2, r2, #1
 553 0382 BA18     		add	r2, r7, r2
 554 0384 1360     		str	r3, [r2]
 230:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc2 = __SMLAD(x2, y1, acc2);
 555              		.loc 1 230 0
 556 0386 8E23     		mov	r3, #142
 557 0388 5B00     		lsl	r3, r3, #1
 558 038a FB18     		add	r3, r7, r3
 559 038c 1968     		ldr	r1, [r3]
 560 038e F823     		mov	r3, #248
 561 0390 FB18     		add	r3, r7, r3
 562 0392 1A68     		ldr	r2, [r3]
 563 0394 9423     		mov	r3, #148
 564 0396 5B00     		lsl	r3, r3, #1
 565 0398 FB18     		add	r3, r7, r3
 566 039a 1B68     		ldr	r3, [r3]
 567 039c E020     		mov	r0, #224
 568 039e 3818     		add	r0, r7, r0
 569 03a0 0160     		str	r1, [r0]
 570 03a2 DC21     		mov	r1, #220
 571 03a4 7918     		add	r1, r7, r1
 572 03a6 0A60     		str	r2, [r1]
 573 03a8 D822     		mov	r2, #216
 574 03aa BA18     		add	r2, r7, r2
 575 03ac 1360     		str	r3, [r2]
 576              	.LBB32:
 577              	.LBB33:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 578              		.loc 2 952 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 32


 579 03ae E023     		mov	r3, #224
 580 03b0 FB18     		add	r3, r7, r3
 581 03b2 1B68     		ldr	r3, [r3]
 582 03b4 1B04     		lsl	r3, r3, #16
 583 03b6 1B14     		asr	r3, r3, #16
 584 03b8 DC22     		mov	r2, #220
 585 03ba BA18     		add	r2, r7, r2
 586 03bc 1268     		ldr	r2, [r2]
 587 03be 1204     		lsl	r2, r2, #16
 588 03c0 1214     		asr	r2, r2, #16
 589 03c2 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 590              		.loc 2 953 0
 591 03c4 E023     		mov	r3, #224
 592 03c6 FB18     		add	r3, r7, r3
 593 03c8 1B68     		ldr	r3, [r3]
 594 03ca 1B14     		asr	r3, r3, #16
 595 03cc DC21     		mov	r1, #220
 596 03ce 7918     		add	r1, r7, r1
 597 03d0 0968     		ldr	r1, [r1]
 598 03d2 0914     		asr	r1, r1, #16
 599 03d4 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 600              		.loc 2 952 0
 601 03d6 D218     		add	r2, r2, r3
 602              		.loc 2 954 0
 603 03d8 D823     		mov	r3, #216
 604 03da FB18     		add	r3, r7, r3
 605 03dc 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 606              		.loc 2 953 0
 607 03de D318     		add	r3, r2, r3
 608              	.LBE33:
 609              	.LBE32:
 610              		.loc 1 230 0
 611 03e0 9422     		mov	r2, #148
 612 03e2 5200     		lsl	r2, r2, #1
 613 03e4 BA18     		add	r2, r7, r2
 614 03e6 1360     		str	r3, [r2]
 231:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 232:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* pack input data */
 233:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 234:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         x3 = __PKHBT(x2, x1, 0);
 615              		.loc 1 234 0
 616 03e8 8E23     		mov	r3, #142
 617 03ea 5B00     		lsl	r3, r3, #1
 618 03ec FB18     		add	r3, r7, r3
 619 03ee 1B68     		ldr	r3, [r3]
 620 03f0 1B04     		lsl	r3, r3, #16
 621 03f2 1A0C     		lsr	r2, r3, #16
 622 03f4 9023     		mov	r3, #144
 623 03f6 5B00     		lsl	r3, r3, #1
 624 03f8 FB18     		add	r3, r7, r3
 625 03fa 1B68     		ldr	r3, [r3]
 626 03fc 1B0C     		lsr	r3, r3, #16
 627 03fe 1B04     		lsl	r3, r3, #16
 628 0400 1343     		orr	r3, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 33


 629 0402 F022     		mov	r2, #240
 630 0404 BA18     		add	r2, r7, r2
 631 0406 1360     		str	r3, [r2]
 235:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #else
 236:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         x3 = __PKHBT(x1, x2, 0);
 237:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #endif
 238:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 239:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* multiply and accumlate */
 240:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc1 = __SMLADX(x3, y1, acc1);
 632              		.loc 1 240 0
 633 0408 F023     		mov	r3, #240
 634 040a FB18     		add	r3, r7, r3
 635 040c 1968     		ldr	r1, [r3]
 636 040e F823     		mov	r3, #248
 637 0410 FB18     		add	r3, r7, r3
 638 0412 1A68     		ldr	r2, [r3]
 639 0414 9623     		mov	r3, #150
 640 0416 5B00     		lsl	r3, r3, #1
 641 0418 FB18     		add	r3, r7, r3
 642 041a 1B68     		ldr	r3, [r3]
 643 041c D420     		mov	r0, #212
 644 041e 3818     		add	r0, r7, r0
 645 0420 0160     		str	r1, [r0]
 646 0422 D021     		mov	r1, #208
 647 0424 7918     		add	r1, r7, r1
 648 0426 0A60     		str	r2, [r1]
 649 0428 CC22     		mov	r2, #204
 650 042a BA18     		add	r2, r7, r2
 651 042c 1360     		str	r3, [r2]
 652              	.LBB34:
 653              	.LBB35:
 955:.\Include/arm_math.h ****   }
 956:.\Include/arm_math.h **** 
 957:.\Include/arm_math.h **** 
 958:.\Include/arm_math.h ****   /*
 959:.\Include/arm_math.h ****    * @brief C custom defined SMLADX for M3 and M0 processors
 960:.\Include/arm_math.h ****    */
 961:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLADX(
 962:.\Include/arm_math.h ****   uint32_t x,
 963:.\Include/arm_math.h ****   uint32_t y,
 964:.\Include/arm_math.h ****   uint32_t sum)
 965:.\Include/arm_math.h ****   {
 966:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 654              		.loc 2 966 0
 655 042e D423     		mov	r3, #212
 656 0430 FB18     		add	r3, r7, r3
 657 0432 1B68     		ldr	r3, [r3]
 658 0434 1B04     		lsl	r3, r3, #16
 659 0436 1B14     		asr	r3, r3, #16
 660 0438 D022     		mov	r2, #208
 661 043a BA18     		add	r2, r7, r2
 662 043c 1268     		ldr	r2, [r2]
 663 043e 1214     		asr	r2, r2, #16
 664 0440 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 665              		.loc 2 967 0
 666 0442 D423     		mov	r3, #212
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 34


 667 0444 FB18     		add	r3, r7, r3
 668 0446 1B68     		ldr	r3, [r3]
 669 0448 1B14     		asr	r3, r3, #16
 670 044a D021     		mov	r1, #208
 671 044c 7918     		add	r1, r7, r1
 672 044e 0968     		ldr	r1, [r1]
 673 0450 0904     		lsl	r1, r1, #16
 674 0452 0914     		asr	r1, r1, #16
 675 0454 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 676              		.loc 2 966 0
 677 0456 D218     		add	r2, r2, r3
 968:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 678              		.loc 2 968 0
 679 0458 CC23     		mov	r3, #204
 680 045a FB18     		add	r3, r7, r3
 681 045c 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 682              		.loc 2 967 0
 683 045e D318     		add	r3, r2, r3
 684              	.LBE35:
 685              	.LBE34:
 686              		.loc 1 240 0
 687 0460 9622     		mov	r2, #150
 688 0462 5200     		lsl	r2, r2, #1
 689 0464 BA18     		add	r2, r7, r2
 690 0466 1360     		str	r3, [r2]
 241:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 242:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* Read next two samples from scratch1 buffer */
 243:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         x1 = _SIMD32_OFFSET(pScr1);
 691              		.loc 1 243 0
 692 0468 BB69     		ldr	r3, [r7, #24]
 693 046a 1B68     		ldr	r3, [r3]
 694 046c 9022     		mov	r2, #144
 695 046e 5200     		lsl	r2, r2, #1
 696 0470 BA18     		add	r2, r7, r2
 697 0472 1360     		str	r3, [r2]
 244:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 245:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* multiply and accumlate */
 246:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc0 = __SMLAD(x2, y2, acc0);
 698              		.loc 1 246 0
 699 0474 8E23     		mov	r3, #142
 700 0476 5B00     		lsl	r3, r3, #1
 701 0478 FB18     		add	r3, r7, r3
 702 047a 1968     		ldr	r1, [r3]
 703 047c F423     		mov	r3, #244
 704 047e FB18     		add	r3, r7, r3
 705 0480 1A68     		ldr	r2, [r3]
 706 0482 9823     		mov	r3, #152
 707 0484 5B00     		lsl	r3, r3, #1
 708 0486 FB18     		add	r3, r7, r3
 709 0488 1B68     		ldr	r3, [r3]
 710 048a C820     		mov	r0, #200
 711 048c 3818     		add	r0, r7, r0
 712 048e 0160     		str	r1, [r0]
 713 0490 C421     		mov	r1, #196
 714 0492 7918     		add	r1, r7, r1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 35


 715 0494 0A60     		str	r2, [r1]
 716 0496 C022     		mov	r2, #192
 717 0498 BA18     		add	r2, r7, r2
 718 049a 1360     		str	r3, [r2]
 719              	.LBB36:
 720              	.LBB37:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 721              		.loc 2 952 0
 722 049c C823     		mov	r3, #200
 723 049e FB18     		add	r3, r7, r3
 724 04a0 1B68     		ldr	r3, [r3]
 725 04a2 1B04     		lsl	r3, r3, #16
 726 04a4 1B14     		asr	r3, r3, #16
 727 04a6 C422     		mov	r2, #196
 728 04a8 BA18     		add	r2, r7, r2
 729 04aa 1268     		ldr	r2, [r2]
 730 04ac 1204     		lsl	r2, r2, #16
 731 04ae 1214     		asr	r2, r2, #16
 732 04b0 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 733              		.loc 2 953 0
 734 04b2 C823     		mov	r3, #200
 735 04b4 FB18     		add	r3, r7, r3
 736 04b6 1B68     		ldr	r3, [r3]
 737 04b8 1B14     		asr	r3, r3, #16
 738 04ba C421     		mov	r1, #196
 739 04bc 7918     		add	r1, r7, r1
 740 04be 0968     		ldr	r1, [r1]
 741 04c0 0914     		asr	r1, r1, #16
 742 04c2 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 743              		.loc 2 952 0
 744 04c4 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 745              		.loc 2 954 0
 746 04c6 C023     		mov	r3, #192
 747 04c8 FB18     		add	r3, r7, r3
 748 04ca 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 749              		.loc 2 953 0
 750 04cc D318     		add	r3, r2, r3
 751              	.LBE37:
 752              	.LBE36:
 753              		.loc 1 246 0
 754 04ce 9822     		mov	r2, #152
 755 04d0 5200     		lsl	r2, r2, #1
 756 04d2 BA18     		add	r2, r7, r2
 757 04d4 1360     		str	r3, [r2]
 247:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 248:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc2 = __SMLAD(x1, y2, acc2);
 758              		.loc 1 248 0
 759 04d6 9023     		mov	r3, #144
 760 04d8 5B00     		lsl	r3, r3, #1
 761 04da FB18     		add	r3, r7, r3
 762 04dc 1968     		ldr	r1, [r3]
 763 04de F423     		mov	r3, #244
 764 04e0 FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 36


 765 04e2 1A68     		ldr	r2, [r3]
 766 04e4 9423     		mov	r3, #148
 767 04e6 5B00     		lsl	r3, r3, #1
 768 04e8 FB18     		add	r3, r7, r3
 769 04ea 1B68     		ldr	r3, [r3]
 770 04ec BC20     		mov	r0, #188
 771 04ee 3818     		add	r0, r7, r0
 772 04f0 0160     		str	r1, [r0]
 773 04f2 B821     		mov	r1, #184
 774 04f4 7918     		add	r1, r7, r1
 775 04f6 0A60     		str	r2, [r1]
 776 04f8 B422     		mov	r2, #180
 777 04fa BA18     		add	r2, r7, r2
 778 04fc 1360     		str	r3, [r2]
 779              	.LBB38:
 780              	.LBB39:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 781              		.loc 2 952 0
 782 04fe BC23     		mov	r3, #188
 783 0500 FB18     		add	r3, r7, r3
 784 0502 1B68     		ldr	r3, [r3]
 785 0504 1B04     		lsl	r3, r3, #16
 786 0506 1B14     		asr	r3, r3, #16
 787 0508 B822     		mov	r2, #184
 788 050a BA18     		add	r2, r7, r2
 789 050c 1268     		ldr	r2, [r2]
 790 050e 1204     		lsl	r2, r2, #16
 791 0510 1214     		asr	r2, r2, #16
 792 0512 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 793              		.loc 2 953 0
 794 0514 BC23     		mov	r3, #188
 795 0516 FB18     		add	r3, r7, r3
 796 0518 1B68     		ldr	r3, [r3]
 797 051a 1B14     		asr	r3, r3, #16
 798 051c B821     		mov	r1, #184
 799 051e 7918     		add	r1, r7, r1
 800 0520 0968     		ldr	r1, [r1]
 801 0522 0914     		asr	r1, r1, #16
 802 0524 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 803              		.loc 2 952 0
 804 0526 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 805              		.loc 2 954 0
 806 0528 B423     		mov	r3, #180
 807 052a FB18     		add	r3, r7, r3
 808 052c 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 809              		.loc 2 953 0
 810 052e D318     		add	r3, r2, r3
 811              	.LBE39:
 812              	.LBE38:
 813              		.loc 1 248 0
 814 0530 9422     		mov	r2, #148
 815 0532 5200     		lsl	r2, r2, #1
 816 0534 BA18     		add	r2, r7, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 37


 817 0536 1360     		str	r3, [r2]
 249:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 250:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* pack input data */
 251:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 252:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         x3 = __PKHBT(x1, x2, 0);
 818              		.loc 1 252 0
 819 0538 9023     		mov	r3, #144
 820 053a 5B00     		lsl	r3, r3, #1
 821 053c FB18     		add	r3, r7, r3
 822 053e 1B68     		ldr	r3, [r3]
 823 0540 1B04     		lsl	r3, r3, #16
 824 0542 1A0C     		lsr	r2, r3, #16
 825 0544 8E23     		mov	r3, #142
 826 0546 5B00     		lsl	r3, r3, #1
 827 0548 FB18     		add	r3, r7, r3
 828 054a 1B68     		ldr	r3, [r3]
 829 054c 1B0C     		lsr	r3, r3, #16
 830 054e 1B04     		lsl	r3, r3, #16
 831 0550 1343     		orr	r3, r2
 832 0552 F022     		mov	r2, #240
 833 0554 BA18     		add	r2, r7, r2
 834 0556 1360     		str	r3, [r2]
 253:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #else
 254:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         x3 = __PKHBT(x2, x1, 0);
 255:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #endif
 256:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 257:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc3 = __SMLADX(x3, y1, acc3);
 835              		.loc 1 257 0
 836 0558 F023     		mov	r3, #240
 837 055a FB18     		add	r3, r7, r3
 838 055c 1968     		ldr	r1, [r3]
 839 055e F823     		mov	r3, #248
 840 0560 FB18     		add	r3, r7, r3
 841 0562 1A68     		ldr	r2, [r3]
 842 0564 9223     		mov	r3, #146
 843 0566 5B00     		lsl	r3, r3, #1
 844 0568 FB18     		add	r3, r7, r3
 845 056a 1B68     		ldr	r3, [r3]
 846 056c B020     		mov	r0, #176
 847 056e 3818     		add	r0, r7, r0
 848 0570 0160     		str	r1, [r0]
 849 0572 AC21     		mov	r1, #172
 850 0574 7918     		add	r1, r7, r1
 851 0576 0A60     		str	r2, [r1]
 852 0578 A822     		mov	r2, #168
 853 057a BA18     		add	r2, r7, r2
 854 057c 1360     		str	r3, [r2]
 855              	.LBB40:
 856              	.LBB41:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 857              		.loc 2 966 0
 858 057e B023     		mov	r3, #176
 859 0580 FB18     		add	r3, r7, r3
 860 0582 1B68     		ldr	r3, [r3]
 861 0584 1B04     		lsl	r3, r3, #16
 862 0586 1B14     		asr	r3, r3, #16
 863 0588 AC22     		mov	r2, #172
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 38


 864 058a BA18     		add	r2, r7, r2
 865 058c 1268     		ldr	r2, [r2]
 866 058e 1214     		asr	r2, r2, #16
 867 0590 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 868              		.loc 2 967 0
 869 0592 B023     		mov	r3, #176
 870 0594 FB18     		add	r3, r7, r3
 871 0596 1B68     		ldr	r3, [r3]
 872 0598 1B14     		asr	r3, r3, #16
 873 059a AC21     		mov	r1, #172
 874 059c 7918     		add	r1, r7, r1
 875 059e 0968     		ldr	r1, [r1]
 876 05a0 0904     		lsl	r1, r1, #16
 877 05a2 0914     		asr	r1, r1, #16
 878 05a4 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 879              		.loc 2 966 0
 880 05a6 D218     		add	r2, r2, r3
 881              		.loc 2 968 0
 882 05a8 A823     		mov	r3, #168
 883 05aa FB18     		add	r3, r7, r3
 884 05ac 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 885              		.loc 2 967 0
 886 05ae D318     		add	r3, r2, r3
 887              	.LBE41:
 888              	.LBE40:
 889              		.loc 1 257 0
 890 05b0 9222     		mov	r2, #146
 891 05b2 5200     		lsl	r2, r2, #1
 892 05b4 BA18     		add	r2, r7, r2
 893 05b6 1360     		str	r3, [r2]
 258:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc1 = __SMLADX(x3, y2, acc1);
 894              		.loc 1 258 0
 895 05b8 F023     		mov	r3, #240
 896 05ba FB18     		add	r3, r7, r3
 897 05bc 1968     		ldr	r1, [r3]
 898 05be F423     		mov	r3, #244
 899 05c0 FB18     		add	r3, r7, r3
 900 05c2 1A68     		ldr	r2, [r3]
 901 05c4 9623     		mov	r3, #150
 902 05c6 5B00     		lsl	r3, r3, #1
 903 05c8 FB18     		add	r3, r7, r3
 904 05ca 1B68     		ldr	r3, [r3]
 905 05cc A420     		mov	r0, #164
 906 05ce 3818     		add	r0, r7, r0
 907 05d0 0160     		str	r1, [r0]
 908 05d2 A021     		mov	r1, #160
 909 05d4 7918     		add	r1, r7, r1
 910 05d6 0A60     		str	r2, [r1]
 911 05d8 9C22     		mov	r2, #156
 912 05da BA18     		add	r2, r7, r2
 913 05dc 1360     		str	r3, [r2]
 914              	.LBB42:
 915              	.LBB43:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 39


 916              		.loc 2 966 0
 917 05de A423     		mov	r3, #164
 918 05e0 FB18     		add	r3, r7, r3
 919 05e2 1B68     		ldr	r3, [r3]
 920 05e4 1B04     		lsl	r3, r3, #16
 921 05e6 1B14     		asr	r3, r3, #16
 922 05e8 A022     		mov	r2, #160
 923 05ea BA18     		add	r2, r7, r2
 924 05ec 1268     		ldr	r2, [r2]
 925 05ee 1214     		asr	r2, r2, #16
 926 05f0 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 927              		.loc 2 967 0
 928 05f2 A423     		mov	r3, #164
 929 05f4 FB18     		add	r3, r7, r3
 930 05f6 1B68     		ldr	r3, [r3]
 931 05f8 1B14     		asr	r3, r3, #16
 932 05fa A021     		mov	r1, #160
 933 05fc 7918     		add	r1, r7, r1
 934 05fe 0968     		ldr	r1, [r1]
 935 0600 0904     		lsl	r1, r1, #16
 936 0602 0914     		asr	r1, r1, #16
 937 0604 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 938              		.loc 2 966 0
 939 0606 D218     		add	r2, r2, r3
 940              		.loc 2 968 0
 941 0608 9C23     		mov	r3, #156
 942 060a FB18     		add	r3, r7, r3
 943 060c 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 944              		.loc 2 967 0
 945 060e D318     		add	r3, r2, r3
 946              	.LBE43:
 947              	.LBE42:
 948              		.loc 1 258 0
 949 0610 9622     		mov	r2, #150
 950 0612 5200     		lsl	r2, r2, #1
 951 0614 BA18     		add	r2, r7, r2
 952 0616 1360     		str	r3, [r2]
 259:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 260:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         x2 = _SIMD32_OFFSET(pScr1 + 2u);
 953              		.loc 1 260 0
 954 0618 BB69     		ldr	r3, [r7, #24]
 955 061a 5B68     		ldr	r3, [r3, #4]
 956 061c 8E22     		mov	r2, #142
 957 061e 5200     		lsl	r2, r2, #1
 958 0620 BA18     		add	r2, r7, r2
 959 0622 1360     		str	r3, [r2]
 261:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 262:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 263:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         x3 = __PKHBT(x2, x1, 0);
 960              		.loc 1 263 0
 961 0624 8E23     		mov	r3, #142
 962 0626 5B00     		lsl	r3, r3, #1
 963 0628 FB18     		add	r3, r7, r3
 964 062a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 40


 965 062c 1B04     		lsl	r3, r3, #16
 966 062e 1A0C     		lsr	r2, r3, #16
 967 0630 9023     		mov	r3, #144
 968 0632 5B00     		lsl	r3, r3, #1
 969 0634 FB18     		add	r3, r7, r3
 970 0636 1B68     		ldr	r3, [r3]
 971 0638 1B0C     		lsr	r3, r3, #16
 972 063a 1B04     		lsl	r3, r3, #16
 973 063c 1343     		orr	r3, r2
 974 063e F022     		mov	r2, #240
 975 0640 BA18     		add	r2, r7, r2
 976 0642 1360     		str	r3, [r2]
 264:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #else
 265:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         x3 = __PKHBT(x1, x2, 0);
 266:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #endif
 267:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 268:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc3 = __SMLADX(x3, y2, acc3);
 977              		.loc 1 268 0
 978 0644 F023     		mov	r3, #240
 979 0646 FB18     		add	r3, r7, r3
 980 0648 1968     		ldr	r1, [r3]
 981 064a F423     		mov	r3, #244
 982 064c FB18     		add	r3, r7, r3
 983 064e 1A68     		ldr	r2, [r3]
 984 0650 9223     		mov	r3, #146
 985 0652 5B00     		lsl	r3, r3, #1
 986 0654 FB18     		add	r3, r7, r3
 987 0656 1B68     		ldr	r3, [r3]
 988 0658 9820     		mov	r0, #152
 989 065a 3818     		add	r0, r7, r0
 990 065c 0160     		str	r1, [r0]
 991 065e 9421     		mov	r1, #148
 992 0660 7918     		add	r1, r7, r1
 993 0662 0A60     		str	r2, [r1]
 994 0664 9022     		mov	r2, #144
 995 0666 BA18     		add	r2, r7, r2
 996 0668 1360     		str	r3, [r2]
 997              	.LBB44:
 998              	.LBB45:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 999              		.loc 2 966 0
 1000 066a 9823     		mov	r3, #152
 1001 066c FB18     		add	r3, r7, r3
 1002 066e 1B68     		ldr	r3, [r3]
 1003 0670 1B04     		lsl	r3, r3, #16
 1004 0672 1B14     		asr	r3, r3, #16
 1005 0674 9422     		mov	r2, #148
 1006 0676 BA18     		add	r2, r7, r2
 1007 0678 1268     		ldr	r2, [r2]
 1008 067a 1214     		asr	r2, r2, #16
 1009 067c 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1010              		.loc 2 967 0
 1011 067e 9823     		mov	r3, #152
 1012 0680 FB18     		add	r3, r7, r3
 1013 0682 1B68     		ldr	r3, [r3]
 1014 0684 1B14     		asr	r3, r3, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 41


 1015 0686 9421     		mov	r1, #148
 1016 0688 7918     		add	r1, r7, r1
 1017 068a 0968     		ldr	r1, [r1]
 1018 068c 0904     		lsl	r1, r1, #16
 1019 068e 0914     		asr	r1, r1, #16
 1020 0690 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1021              		.loc 2 966 0
 1022 0692 D218     		add	r2, r2, r3
 1023              		.loc 2 968 0
 1024 0694 9023     		mov	r3, #144
 1025 0696 FB18     		add	r3, r7, r3
 1026 0698 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1027              		.loc 2 967 0
 1028 069a D318     		add	r3, r2, r3
 1029              	.LBE45:
 1030              	.LBE44:
 1031              		.loc 1 268 0
 1032 069c 9222     		mov	r2, #146
 1033 069e 5200     		lsl	r2, r2, #1
 1034 06a0 BA18     		add	r2, r7, r2
 1035 06a2 1360     		str	r3, [r2]
 269:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 270:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* update scratch pointers */
 271:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         pIn2 += 4u;
 1036              		.loc 1 271 0
 1037 06a4 7B69     		ldr	r3, [r7, #20]
 1038 06a6 0833     		add	r3, r3, #8
 1039 06a8 7B61     		str	r3, [r7, #20]
 272:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         pScr1 += 4u;
 1040              		.loc 1 272 0
 1041 06aa BB69     		ldr	r3, [r7, #24]
 1042 06ac 0833     		add	r3, r3, #8
 1043 06ae BB61     		str	r3, [r7, #24]
 273:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 274:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 275:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* Decrement the loop counter */
 276:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         tapCnt--;
 1044              		.loc 1 276 0
 1045 06b0 7B1D     		add	r3, r7, #5
 1046 06b2 FF33     		add	r3, r3, #255
 1047 06b4 1B68     		ldr	r3, [r3]
 1048 06b6 013B     		sub	r3, r3, #1
 1049 06b8 7A1D     		add	r2, r7, #5
 1050 06ba FF32     		add	r2, r2, #255
 1051 06bc 1360     		str	r3, [r2]
 1052              	.L11:
 221:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       {
 1053              		.loc 1 221 0
 1054 06be 7B1D     		add	r3, r7, #5
 1055 06c0 FF33     		add	r3, r3, #255
 1056 06c2 1B68     		ldr	r3, [r3]
 1057 06c4 002B     		cmp	r3, #0
 1058 06c6 00D0     		beq	.LCB934
 1059 06c8 22E6     		b	.L20	@long jump
 1060              	.LCB934:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 42


 277:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       }
 278:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 279:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Update scratch pointer for remaining samples of smaller length sequence */
 280:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       pScr1 -= 4u;
 1061              		.loc 1 280 0
 1062 06ca BB69     		ldr	r3, [r7, #24]
 1063 06cc 083B     		sub	r3, r3, #8
 1064 06ce BB61     		str	r3, [r7, #24]
 281:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 282:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* apply same above for remaining samples of smaller length sequence */
 283:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       tapCnt = (srcBLen) & 3u;
 1065              		.loc 1 283 0
 1066 06d0 3B68     		ldr	r3, [r7]
 1067 06d2 0322     		mov	r2, #3
 1068 06d4 1340     		and	r3, r2
 1069 06d6 7A1D     		add	r2, r7, #5
 1070 06d8 FF32     		add	r2, r2, #255
 1071 06da 1360     		str	r3, [r2]
 284:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 285:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       while (tapCnt > 0u)
 1072              		.loc 1 285 0
 1073 06dc 53E0     		b	.L21
 1074              	.L22:
 286:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       {
 287:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 288:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* accumlate the results */
 289:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc0 += (*pScr1++ * *pIn2);
 1075              		.loc 1 289 0
 1076 06de BB69     		ldr	r3, [r7, #24]
 1077 06e0 9A1C     		add	r2, r3, #2
 1078 06e2 BA61     		str	r2, [r7, #24]
 1079 06e4 1B88     		ldrh	r3, [r3]
 1080 06e6 1BB2     		sxth	r3, r3
 1081 06e8 7A69     		ldr	r2, [r7, #20]
 1082 06ea 1288     		ldrh	r2, [r2]
 1083 06ec 12B2     		sxth	r2, r2
 1084 06ee 5343     		mul	r3, r2
 1085 06f0 9822     		mov	r2, #152
 1086 06f2 5200     		lsl	r2, r2, #1
 1087 06f4 BA18     		add	r2, r7, r2
 1088 06f6 1268     		ldr	r2, [r2]
 1089 06f8 D318     		add	r3, r2, r3
 1090 06fa 9822     		mov	r2, #152
 1091 06fc 5200     		lsl	r2, r2, #1
 1092 06fe BA18     		add	r2, r7, r2
 1093 0700 1360     		str	r3, [r2]
 290:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc1 += (*pScr1++ * *pIn2);
 1094              		.loc 1 290 0
 1095 0702 BB69     		ldr	r3, [r7, #24]
 1096 0704 9A1C     		add	r2, r3, #2
 1097 0706 BA61     		str	r2, [r7, #24]
 1098 0708 1B88     		ldrh	r3, [r3]
 1099 070a 1BB2     		sxth	r3, r3
 1100 070c 7A69     		ldr	r2, [r7, #20]
 1101 070e 1288     		ldrh	r2, [r2]
 1102 0710 12B2     		sxth	r2, r2
 1103 0712 5343     		mul	r3, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 43


 1104 0714 9622     		mov	r2, #150
 1105 0716 5200     		lsl	r2, r2, #1
 1106 0718 BA18     		add	r2, r7, r2
 1107 071a 1268     		ldr	r2, [r2]
 1108 071c D318     		add	r3, r2, r3
 1109 071e 9622     		mov	r2, #150
 1110 0720 5200     		lsl	r2, r2, #1
 1111 0722 BA18     		add	r2, r7, r2
 1112 0724 1360     		str	r3, [r2]
 291:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc2 += (*pScr1++ * *pIn2);
 1113              		.loc 1 291 0
 1114 0726 BB69     		ldr	r3, [r7, #24]
 1115 0728 9A1C     		add	r2, r3, #2
 1116 072a BA61     		str	r2, [r7, #24]
 1117 072c 1B88     		ldrh	r3, [r3]
 1118 072e 1BB2     		sxth	r3, r3
 1119 0730 7A69     		ldr	r2, [r7, #20]
 1120 0732 1288     		ldrh	r2, [r2]
 1121 0734 12B2     		sxth	r2, r2
 1122 0736 5343     		mul	r3, r2
 1123 0738 9422     		mov	r2, #148
 1124 073a 5200     		lsl	r2, r2, #1
 1125 073c BA18     		add	r2, r7, r2
 1126 073e 1268     		ldr	r2, [r2]
 1127 0740 D318     		add	r3, r2, r3
 1128 0742 9422     		mov	r2, #148
 1129 0744 5200     		lsl	r2, r2, #1
 1130 0746 BA18     		add	r2, r7, r2
 1131 0748 1360     		str	r3, [r2]
 292:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc3 += (*pScr1++ * *pIn2++);
 1132              		.loc 1 292 0
 1133 074a BB69     		ldr	r3, [r7, #24]
 1134 074c 9A1C     		add	r2, r3, #2
 1135 074e BA61     		str	r2, [r7, #24]
 1136 0750 1B88     		ldrh	r3, [r3]
 1137 0752 1AB2     		sxth	r2, r3
 1138 0754 7B69     		ldr	r3, [r7, #20]
 1139 0756 991C     		add	r1, r3, #2
 1140 0758 7961     		str	r1, [r7, #20]
 1141 075a 1B88     		ldrh	r3, [r3]
 1142 075c 1BB2     		sxth	r3, r3
 1143 075e 5343     		mul	r3, r2
 1144 0760 9222     		mov	r2, #146
 1145 0762 5200     		lsl	r2, r2, #1
 1146 0764 BA18     		add	r2, r7, r2
 1147 0766 1268     		ldr	r2, [r2]
 1148 0768 D318     		add	r3, r2, r3
 1149 076a 9222     		mov	r2, #146
 1150 076c 5200     		lsl	r2, r2, #1
 1151 076e BA18     		add	r2, r7, r2
 1152 0770 1360     		str	r3, [r2]
 293:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 294:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         pScr1 -= 3u;
 1153              		.loc 1 294 0
 1154 0772 BB69     		ldr	r3, [r7, #24]
 1155 0774 063B     		sub	r3, r3, #6
 1156 0776 BB61     		str	r3, [r7, #24]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 44


 295:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 296:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* Decrement the loop counter */
 297:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         tapCnt--;
 1157              		.loc 1 297 0
 1158 0778 7B1D     		add	r3, r7, #5
 1159 077a FF33     		add	r3, r3, #255
 1160 077c 1B68     		ldr	r3, [r3]
 1161 077e 013B     		sub	r3, r3, #1
 1162 0780 7A1D     		add	r2, r7, #5
 1163 0782 FF32     		add	r2, r2, #255
 1164 0784 1360     		str	r3, [r2]
 1165              	.L21:
 285:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       {
 1166              		.loc 1 285 0
 1167 0786 7B1D     		add	r3, r7, #5
 1168 0788 FF33     		add	r3, r3, #255
 1169 078a 1B68     		ldr	r3, [r3]
 1170 078c 002B     		cmp	r3, #0
 1171 078e A6D1     		bne	.L22
 298:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       }
 299:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 300:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       blkCnt--;
 1172              		.loc 1 300 0
 1173 0790 8623     		mov	r3, #134
 1174 0792 5B00     		lsl	r3, r3, #1
 1175 0794 FB18     		add	r3, r7, r3
 1176 0796 1B68     		ldr	r3, [r3]
 1177 0798 013B     		sub	r3, r3, #1
 1178 079a 8622     		mov	r2, #134
 1179 079c 5200     		lsl	r2, r2, #1
 1180 079e BA18     		add	r2, r7, r2
 1181 07a0 1360     		str	r3, [r2]
 301:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 302:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 303:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Store the results in the accumulators in the destination buffer. */
 304:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 305:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 306:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 307:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       *__SIMD32(pOut)++ =
 1182              		.loc 1 307 0
 1183 07a2 1C23     		mov	r3, #28
 1184 07a4 FB18     		add	r3, r7, r3
 1185 07a6 1A68     		ldr	r2, [r3]
 1186 07a8 111D     		add	r1, r2, #4
 1187 07aa 1960     		str	r1, [r3]
 308:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 1188              		.loc 1 308 0
 1189 07ac 9823     		mov	r3, #152
 1190 07ae 5B00     		lsl	r3, r3, #1
 1191 07b0 FB18     		add	r3, r7, r3
 1192 07b2 1B68     		ldr	r3, [r3]
 1193 07b4 DB13     		asr	r3, r3, #15
 1194 07b6 8C21     		mov	r1, #140
 1195 07b8 7918     		add	r1, r7, r1
 1196 07ba 0B60     		str	r3, [r1]
 1197 07bc 1023     		mov	r3, #16
 1198 07be 8821     		mov	r1, #136
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 45


 1199 07c0 7918     		add	r1, r7, r1
 1200 07c2 0B60     		str	r3, [r1]
 1201              	.LBB46:
 1202              	.LBB47:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 1203              		.loc 2 699 0
 1204 07c4 0123     		mov	r3, #1
 1205 07c6 8421     		mov	r1, #132
 1206 07c8 7918     		add	r1, r7, r1
 1207 07ca 0B60     		str	r3, [r1]
 700:.\Include/arm_math.h ****     {
 1208              		.loc 2 700 0
 1209 07cc 0023     		mov	r3, #0
 1210 07ce 8021     		mov	r1, #128
 1211 07d0 7918     		add	r1, r7, r1
 1212 07d2 0B60     		str	r3, [r1]
 1213 07d4 0DE0     		b	.L23
 1214              	.L24:
 702:.\Include/arm_math.h ****     }
 1215              		.loc 2 702 0
 1216 07d6 8423     		mov	r3, #132
 1217 07d8 FB18     		add	r3, r7, r3
 1218 07da 1B68     		ldr	r3, [r3]
 1219 07dc 5B00     		lsl	r3, r3, #1
 1220 07de 8421     		mov	r1, #132
 1221 07e0 7918     		add	r1, r7, r1
 1222 07e2 0B60     		str	r3, [r1]
 700:.\Include/arm_math.h ****     {
 1223              		.loc 2 700 0
 1224 07e4 8023     		mov	r3, #128
 1225 07e6 FB18     		add	r3, r7, r3
 1226 07e8 1B68     		ldr	r3, [r3]
 1227 07ea 0133     		add	r3, r3, #1
 1228 07ec 8021     		mov	r1, #128
 1229 07ee 7918     		add	r1, r7, r1
 1230 07f0 0B60     		str	r3, [r1]
 1231              	.L23:
 1232 07f2 8823     		mov	r3, #136
 1233 07f4 FB18     		add	r3, r7, r3
 1234 07f6 1B68     		ldr	r3, [r3]
 1235 07f8 013B     		sub	r3, r3, #1
 1236 07fa 8021     		mov	r1, #128
 1237 07fc 7918     		add	r1, r7, r1
 1238 07fe 0968     		ldr	r1, [r1]
 1239 0800 9942     		cmp	r1, r3
 1240 0802 E8D3     		bcc	.L24
 705:.\Include/arm_math.h ****     {
 1241              		.loc 2 705 0
 1242 0804 8C23     		mov	r3, #140
 1243 0806 FB18     		add	r3, r7, r3
 1244 0808 1B68     		ldr	r3, [r3]
 1245 080a 002B     		cmp	r3, #0
 1246 080c 15DD     		ble	.L25
 707:.\Include/arm_math.h **** 
 1247              		.loc 2 707 0
 1248 080e 8423     		mov	r3, #132
 1249 0810 FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 46


 1250 0812 1B68     		ldr	r3, [r3]
 1251 0814 013B     		sub	r3, r3, #1
 1252 0816 8421     		mov	r1, #132
 1253 0818 7918     		add	r1, r7, r1
 1254 081a 0B60     		str	r3, [r1]
 709:.\Include/arm_math.h ****       {
 1255              		.loc 2 709 0
 1256 081c 8C23     		mov	r3, #140
 1257 081e FB18     		add	r3, r7, r3
 1258 0820 1968     		ldr	r1, [r3]
 1259 0822 8423     		mov	r3, #132
 1260 0824 FB18     		add	r3, r7, r3
 1261 0826 1B68     		ldr	r3, [r3]
 1262 0828 9942     		cmp	r1, r3
 1263 082a 16DD     		ble	.L62
 711:.\Include/arm_math.h ****       }
 1264              		.loc 2 711 0
 1265 082c 8423     		mov	r3, #132
 1266 082e FB18     		add	r3, r7, r3
 1267 0830 1B68     		ldr	r3, [r3]
 1268 0832 8C21     		mov	r1, #140
 1269 0834 7918     		add	r1, r7, r1
 1270 0836 0B60     		str	r3, [r1]
 1271 0838 10E0     		b	.L27
 1272              	.L25:
 716:.\Include/arm_math.h **** 
 1273              		.loc 2 716 0
 1274 083a 8423     		mov	r3, #132
 1275 083c FB18     		add	r3, r7, r3
 1276 083e 1B68     		ldr	r3, [r3]
 1277 0840 5B42     		neg	r3, r3
 1278 0842 FB67     		str	r3, [r7, #124]
 718:.\Include/arm_math.h ****       {
 1279              		.loc 2 718 0
 1280 0844 8C23     		mov	r3, #140
 1281 0846 FB18     		add	r3, r7, r3
 1282 0848 1968     		ldr	r1, [r3]
 1283 084a FB6F     		ldr	r3, [r7, #124]
 1284 084c 9942     		cmp	r1, r3
 1285 084e 05DA     		bge	.L27
 720:.\Include/arm_math.h ****       }
 1286              		.loc 2 720 0
 1287 0850 FB6F     		ldr	r3, [r7, #124]
 1288 0852 8C21     		mov	r1, #140
 1289 0854 7918     		add	r1, r7, r1
 1290 0856 0B60     		str	r3, [r1]
 1291 0858 00E0     		b	.L27
 1292              	.L62:
 711:.\Include/arm_math.h ****       }
 1293              		.loc 2 711 0
 1294 085a C046     		mov	r8, r8
 1295              	.L27:
 723:.\Include/arm_math.h ****   }
 1296              		.loc 2 723 0
 1297 085c 8C23     		mov	r3, #140
 1298 085e FB18     		add	r3, r7, r3
 1299 0860 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 47


 1300              	.LBE47:
 1301              	.LBE46:
 1302              		.loc 1 308 0
 1303 0862 1B04     		lsl	r3, r3, #16
 1304 0864 190C     		lsr	r1, r3, #16
 1305 0866 9623     		mov	r3, #150
 1306 0868 5B00     		lsl	r3, r3, #1
 1307 086a FB18     		add	r3, r7, r3
 1308 086c 1B68     		ldr	r3, [r3]
 1309 086e DB13     		asr	r3, r3, #15
 1310 0870 BB67     		str	r3, [r7, #120]
 1311 0872 1023     		mov	r3, #16
 1312 0874 7B67     		str	r3, [r7, #116]
 1313              	.LBB48:
 1314              	.LBB49:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 1315              		.loc 2 699 0
 1316 0876 0123     		mov	r3, #1
 1317 0878 3B67     		str	r3, [r7, #112]
 700:.\Include/arm_math.h ****     {
 1318              		.loc 2 700 0
 1319 087a 0023     		mov	r3, #0
 1320 087c FB66     		str	r3, [r7, #108]
 1321 087e 05E0     		b	.L29
 1322              	.L30:
 702:.\Include/arm_math.h ****     }
 1323              		.loc 2 702 0
 1324 0880 3B6F     		ldr	r3, [r7, #112]
 1325 0882 5B00     		lsl	r3, r3, #1
 1326 0884 3B67     		str	r3, [r7, #112]
 700:.\Include/arm_math.h ****     {
 1327              		.loc 2 700 0
 1328 0886 FB6E     		ldr	r3, [r7, #108]
 1329 0888 0133     		add	r3, r3, #1
 1330 088a FB66     		str	r3, [r7, #108]
 1331              	.L29:
 1332 088c 7B6F     		ldr	r3, [r7, #116]
 1333 088e 013B     		sub	r3, r3, #1
 1334 0890 F86E     		ldr	r0, [r7, #108]
 1335 0892 9842     		cmp	r0, r3
 1336 0894 F4D3     		bcc	.L30
 705:.\Include/arm_math.h ****     {
 1337              		.loc 2 705 0
 1338 0896 BB6F     		ldr	r3, [r7, #120]
 1339 0898 002B     		cmp	r3, #0
 1340 089a 09DD     		ble	.L31
 707:.\Include/arm_math.h **** 
 1341              		.loc 2 707 0
 1342 089c 3B6F     		ldr	r3, [r7, #112]
 1343 089e 013B     		sub	r3, r3, #1
 1344 08a0 3B67     		str	r3, [r7, #112]
 709:.\Include/arm_math.h ****       {
 1345              		.loc 2 709 0
 1346 08a2 B86F     		ldr	r0, [r7, #120]
 1347 08a4 3B6F     		ldr	r3, [r7, #112]
 1348 08a6 9842     		cmp	r0, r3
 1349 08a8 0CDD     		ble	.L63
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 48


 711:.\Include/arm_math.h ****       }
 1350              		.loc 2 711 0
 1351 08aa 3B6F     		ldr	r3, [r7, #112]
 1352 08ac BB67     		str	r3, [r7, #120]
 1353 08ae 0AE0     		b	.L33
 1354              	.L31:
 716:.\Include/arm_math.h **** 
 1355              		.loc 2 716 0
 1356 08b0 3B6F     		ldr	r3, [r7, #112]
 1357 08b2 5B42     		neg	r3, r3
 1358 08b4 BB66     		str	r3, [r7, #104]
 718:.\Include/arm_math.h ****       {
 1359              		.loc 2 718 0
 1360 08b6 B86F     		ldr	r0, [r7, #120]
 1361 08b8 BB6E     		ldr	r3, [r7, #104]
 1362 08ba 9842     		cmp	r0, r3
 1363 08bc 03DA     		bge	.L33
 720:.\Include/arm_math.h ****       }
 1364              		.loc 2 720 0
 1365 08be BB6E     		ldr	r3, [r7, #104]
 1366 08c0 BB67     		str	r3, [r7, #120]
 1367 08c2 00E0     		b	.L33
 1368              	.L63:
 711:.\Include/arm_math.h ****       }
 1369              		.loc 2 711 0
 1370 08c4 C046     		mov	r8, r8
 1371              	.L33:
 723:.\Include/arm_math.h ****   }
 1372              		.loc 2 723 0
 1373 08c6 BB6F     		ldr	r3, [r7, #120]
 1374              	.LBE49:
 1375              	.LBE48:
 1376              		.loc 1 308 0
 1377 08c8 1B04     		lsl	r3, r3, #16
 1378 08ca 0B43     		orr	r3, r1
 307:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 1379              		.loc 1 307 0
 1380 08cc 1360     		str	r3, [r2]
 309:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       *__SIMD32(pOut)++ =
 1381              		.loc 1 309 0
 1382 08ce 1C23     		mov	r3, #28
 1383 08d0 FB18     		add	r3, r7, r3
 1384 08d2 1A68     		ldr	r2, [r3]
 1385 08d4 111D     		add	r1, r2, #4
 1386 08d6 1960     		str	r1, [r3]
 310:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 1387              		.loc 1 310 0
 1388 08d8 9423     		mov	r3, #148
 1389 08da 5B00     		lsl	r3, r3, #1
 1390 08dc FB18     		add	r3, r7, r3
 1391 08de 1B68     		ldr	r3, [r3]
 1392 08e0 DB13     		asr	r3, r3, #15
 1393 08e2 7B66     		str	r3, [r7, #100]
 1394 08e4 1023     		mov	r3, #16
 1395 08e6 3B66     		str	r3, [r7, #96]
 1396              	.LBB50:
 1397              	.LBB51:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 49


 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 1398              		.loc 2 699 0
 1399 08e8 0123     		mov	r3, #1
 1400 08ea FB65     		str	r3, [r7, #92]
 700:.\Include/arm_math.h ****     {
 1401              		.loc 2 700 0
 1402 08ec 0023     		mov	r3, #0
 1403 08ee BB65     		str	r3, [r7, #88]
 1404 08f0 05E0     		b	.L35
 1405              	.L36:
 702:.\Include/arm_math.h ****     }
 1406              		.loc 2 702 0
 1407 08f2 FB6D     		ldr	r3, [r7, #92]
 1408 08f4 5B00     		lsl	r3, r3, #1
 1409 08f6 FB65     		str	r3, [r7, #92]
 700:.\Include/arm_math.h ****     {
 1410              		.loc 2 700 0
 1411 08f8 BB6D     		ldr	r3, [r7, #88]
 1412 08fa 0133     		add	r3, r3, #1
 1413 08fc BB65     		str	r3, [r7, #88]
 1414              	.L35:
 1415 08fe 3B6E     		ldr	r3, [r7, #96]
 1416 0900 013B     		sub	r3, r3, #1
 1417 0902 B96D     		ldr	r1, [r7, #88]
 1418 0904 9942     		cmp	r1, r3
 1419 0906 F4D3     		bcc	.L36
 705:.\Include/arm_math.h ****     {
 1420              		.loc 2 705 0
 1421 0908 7B6E     		ldr	r3, [r7, #100]
 1422 090a 002B     		cmp	r3, #0
 1423 090c 09DD     		ble	.L37
 707:.\Include/arm_math.h **** 
 1424              		.loc 2 707 0
 1425 090e FB6D     		ldr	r3, [r7, #92]
 1426 0910 013B     		sub	r3, r3, #1
 1427 0912 FB65     		str	r3, [r7, #92]
 709:.\Include/arm_math.h ****       {
 1428              		.loc 2 709 0
 1429 0914 796E     		ldr	r1, [r7, #100]
 1430 0916 FB6D     		ldr	r3, [r7, #92]
 1431 0918 9942     		cmp	r1, r3
 1432 091a 0CDD     		ble	.L64
 711:.\Include/arm_math.h ****       }
 1433              		.loc 2 711 0
 1434 091c FB6D     		ldr	r3, [r7, #92]
 1435 091e 7B66     		str	r3, [r7, #100]
 1436 0920 0AE0     		b	.L39
 1437              	.L37:
 716:.\Include/arm_math.h **** 
 1438              		.loc 2 716 0
 1439 0922 FB6D     		ldr	r3, [r7, #92]
 1440 0924 5B42     		neg	r3, r3
 1441 0926 7B65     		str	r3, [r7, #84]
 718:.\Include/arm_math.h ****       {
 1442              		.loc 2 718 0
 1443 0928 796E     		ldr	r1, [r7, #100]
 1444 092a 7B6D     		ldr	r3, [r7, #84]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 50


 1445 092c 9942     		cmp	r1, r3
 1446 092e 03DA     		bge	.L39
 720:.\Include/arm_math.h ****       }
 1447              		.loc 2 720 0
 1448 0930 7B6D     		ldr	r3, [r7, #84]
 1449 0932 7B66     		str	r3, [r7, #100]
 1450 0934 00E0     		b	.L39
 1451              	.L64:
 711:.\Include/arm_math.h ****       }
 1452              		.loc 2 711 0
 1453 0936 C046     		mov	r8, r8
 1454              	.L39:
 723:.\Include/arm_math.h ****   }
 1455              		.loc 2 723 0
 1456 0938 7B6E     		ldr	r3, [r7, #100]
 1457              	.LBE51:
 1458              	.LBE50:
 1459              		.loc 1 310 0
 1460 093a 1B04     		lsl	r3, r3, #16
 1461 093c 190C     		lsr	r1, r3, #16
 1462 093e 9223     		mov	r3, #146
 1463 0940 5B00     		lsl	r3, r3, #1
 1464 0942 FB18     		add	r3, r7, r3
 1465 0944 1B68     		ldr	r3, [r3]
 1466 0946 DB13     		asr	r3, r3, #15
 1467 0948 3B65     		str	r3, [r7, #80]
 1468 094a 1023     		mov	r3, #16
 1469 094c FB64     		str	r3, [r7, #76]
 1470              	.LBB52:
 1471              	.LBB53:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 1472              		.loc 2 699 0
 1473 094e 0123     		mov	r3, #1
 1474 0950 BB64     		str	r3, [r7, #72]
 700:.\Include/arm_math.h ****     {
 1475              		.loc 2 700 0
 1476 0952 0023     		mov	r3, #0
 1477 0954 7B64     		str	r3, [r7, #68]
 1478 0956 05E0     		b	.L41
 1479              	.L42:
 702:.\Include/arm_math.h ****     }
 1480              		.loc 2 702 0
 1481 0958 BB6C     		ldr	r3, [r7, #72]
 1482 095a 5B00     		lsl	r3, r3, #1
 1483 095c BB64     		str	r3, [r7, #72]
 700:.\Include/arm_math.h ****     {
 1484              		.loc 2 700 0
 1485 095e 7B6C     		ldr	r3, [r7, #68]
 1486 0960 0133     		add	r3, r3, #1
 1487 0962 7B64     		str	r3, [r7, #68]
 1488              	.L41:
 1489 0964 FB6C     		ldr	r3, [r7, #76]
 1490 0966 013B     		sub	r3, r3, #1
 1491 0968 786C     		ldr	r0, [r7, #68]
 1492 096a 9842     		cmp	r0, r3
 1493 096c F4D3     		bcc	.L42
 705:.\Include/arm_math.h ****     {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 51


 1494              		.loc 2 705 0
 1495 096e 3B6D     		ldr	r3, [r7, #80]
 1496 0970 002B     		cmp	r3, #0
 1497 0972 09DD     		ble	.L43
 707:.\Include/arm_math.h **** 
 1498              		.loc 2 707 0
 1499 0974 BB6C     		ldr	r3, [r7, #72]
 1500 0976 013B     		sub	r3, r3, #1
 1501 0978 BB64     		str	r3, [r7, #72]
 709:.\Include/arm_math.h ****       {
 1502              		.loc 2 709 0
 1503 097a 386D     		ldr	r0, [r7, #80]
 1504 097c BB6C     		ldr	r3, [r7, #72]
 1505 097e 9842     		cmp	r0, r3
 1506 0980 0CDD     		ble	.L65
 711:.\Include/arm_math.h ****       }
 1507              		.loc 2 711 0
 1508 0982 BB6C     		ldr	r3, [r7, #72]
 1509 0984 3B65     		str	r3, [r7, #80]
 1510 0986 0AE0     		b	.L45
 1511              	.L43:
 716:.\Include/arm_math.h **** 
 1512              		.loc 2 716 0
 1513 0988 BB6C     		ldr	r3, [r7, #72]
 1514 098a 5B42     		neg	r3, r3
 1515 098c 3B64     		str	r3, [r7, #64]
 718:.\Include/arm_math.h ****       {
 1516              		.loc 2 718 0
 1517 098e 386D     		ldr	r0, [r7, #80]
 1518 0990 3B6C     		ldr	r3, [r7, #64]
 1519 0992 9842     		cmp	r0, r3
 1520 0994 03DA     		bge	.L45
 720:.\Include/arm_math.h ****       }
 1521              		.loc 2 720 0
 1522 0996 3B6C     		ldr	r3, [r7, #64]
 1523 0998 3B65     		str	r3, [r7, #80]
 1524 099a 00E0     		b	.L45
 1525              	.L65:
 711:.\Include/arm_math.h ****       }
 1526              		.loc 2 711 0
 1527 099c C046     		mov	r8, r8
 1528              	.L45:
 723:.\Include/arm_math.h ****   }
 1529              		.loc 2 723 0
 1530 099e 3B6D     		ldr	r3, [r7, #80]
 1531              	.LBE53:
 1532              	.LBE52:
 1533              		.loc 1 310 0
 1534 09a0 1B04     		lsl	r3, r3, #16
 1535 09a2 0B43     		orr	r3, r1
 309:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 1536              		.loc 1 309 0
 1537 09a4 1360     		str	r3, [r2]
 311:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 312:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #else
 313:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 314:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       *__SIMD32(pOut)++ =
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 52


 315:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         __PKHBT(__SSAT((acc1 >> 15), 16), __SSAT((acc0 >> 15), 16), 16);
 316:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       *__SIMD32(pOut)++ =
 317:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         __PKHBT(__SSAT((acc3 >> 15), 16), __SSAT((acc2 >> 15), 16), 16);
 318:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 319:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** #endif /*      #ifndef  ARM_MATH_BIG_ENDIAN    */
 320:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 321:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Initialization of inputB pointer */
 322:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       pIn2 = py;
 1538              		.loc 1 322 0
 1539 09a6 FC23     		mov	r3, #252
 1540 09a8 FB18     		add	r3, r7, r3
 1541 09aa 1B68     		ldr	r3, [r3]
 1542 09ac 7B61     		str	r3, [r7, #20]
 323:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 324:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       pScratch1 += 4u;
 1543              		.loc 1 324 0
 1544 09ae A623     		mov	r3, #166
 1545 09b0 5B00     		lsl	r3, r3, #1
 1546 09b2 FB18     		add	r3, r7, r3
 1547 09b4 1B68     		ldr	r3, [r3]
 1548 09b6 0833     		add	r3, r3, #8
 1549 09b8 A622     		mov	r2, #166
 1550 09ba 5200     		lsl	r2, r2, #1
 1551 09bc BA18     		add	r2, r7, r2
 1552 09be 1360     		str	r3, [r2]
 1553              	.L10:
 202:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     {
 1554              		.loc 1 202 0
 1555 09c0 8623     		mov	r3, #134
 1556 09c2 5B00     		lsl	r3, r3, #1
 1557 09c4 FB18     		add	r3, r7, r3
 1558 09c6 1B68     		ldr	r3, [r3]
 1559 09c8 002B     		cmp	r3, #0
 1560 09ca 00D0     		beq	.LCB1394
 1561 09cc 6BE4     		b	.L47	@long jump
 1562              	.LCB1394:
 325:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 326:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     }
 327:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 328:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 329:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     blkCnt = numPoints & 0x3;
 1563              		.loc 1 329 0
 1564 09ce A423     		mov	r3, #164
 1565 09d0 5B00     		lsl	r3, r3, #1
 1566 09d2 FB18     		add	r3, r7, r3
 1567 09d4 1B68     		ldr	r3, [r3]
 1568 09d6 0322     		mov	r2, #3
 1569 09d8 1340     		and	r3, r2
 1570 09da 8622     		mov	r2, #134
 1571 09dc 5200     		lsl	r2, r2, #1
 1572 09de BA18     		add	r2, r7, r2
 1573 09e0 1360     		str	r3, [r2]
 330:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 331:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* Calculate convolution for remaining samples of Bigger length sequence */
 332:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     while (blkCnt > 0)
 1574              		.loc 1 332 0
 1575 09e2 C2E0     		b	.L48
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 53


 1576              	.L60:
 333:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     {
 334:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Initialze temporary scratch pointer as scratch1 */
 335:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       pScr1 = pScratch1;
 1577              		.loc 1 335 0
 1578 09e4 A623     		mov	r3, #166
 1579 09e6 5B00     		lsl	r3, r3, #1
 1580 09e8 FB18     		add	r3, r7, r3
 1581 09ea 1B68     		ldr	r3, [r3]
 1582 09ec BB61     		str	r3, [r7, #24]
 336:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 337:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Clear Accumlators */
 338:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       acc0 = 0;
 1583              		.loc 1 338 0
 1584 09ee 0023     		mov	r3, #0
 1585 09f0 9822     		mov	r2, #152
 1586 09f2 5200     		lsl	r2, r2, #1
 1587 09f4 BA18     		add	r2, r7, r2
 1588 09f6 1360     		str	r3, [r2]
 339:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 340:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       tapCnt = (srcBLen) >> 1u;
 1589              		.loc 1 340 0
 1590 09f8 3B68     		ldr	r3, [r7]
 1591 09fa 5B08     		lsr	r3, r3, #1
 1592 09fc 7A1D     		add	r2, r7, #5
 1593 09fe FF32     		add	r2, r2, #255
 1594 0a00 1360     		str	r3, [r2]
 341:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 342:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       while (tapCnt > 0u)
 1595              		.loc 1 342 0
 1596 0a02 3AE0     		b	.L49
 1597              	.L51:
 343:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       {
 344:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 345:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* Read next two samples from scratch1 buffer */
 346:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         x1 = *__SIMD32(pScr1)++;
 1598              		.loc 1 346 0
 1599 0a04 1823     		mov	r3, #24
 1600 0a06 FB18     		add	r3, r7, r3
 1601 0a08 1A68     		ldr	r2, [r3]
 1602 0a0a 111D     		add	r1, r2, #4
 1603 0a0c 1960     		str	r1, [r3]
 1604 0a0e 1368     		ldr	r3, [r2]
 1605 0a10 9022     		mov	r2, #144
 1606 0a12 5200     		lsl	r2, r2, #1
 1607 0a14 BA18     		add	r2, r7, r2
 1608 0a16 1360     		str	r3, [r2]
 347:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 348:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* Read two samples from smaller buffer */
 349:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         y1 = *__SIMD32(pIn2)++;
 1609              		.loc 1 349 0
 1610 0a18 1423     		mov	r3, #20
 1611 0a1a FB18     		add	r3, r7, r3
 1612 0a1c 1A68     		ldr	r2, [r3]
 1613 0a1e 111D     		add	r1, r2, #4
 1614 0a20 1960     		str	r1, [r3]
 1615 0a22 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 54


 1616 0a24 F822     		mov	r2, #248
 1617 0a26 BA18     		add	r2, r7, r2
 1618 0a28 1360     		str	r3, [r2]
 350:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 351:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc0 = __SMLAD(x1, y1, acc0);
 1619              		.loc 1 351 0
 1620 0a2a 9023     		mov	r3, #144
 1621 0a2c 5B00     		lsl	r3, r3, #1
 1622 0a2e FB18     		add	r3, r7, r3
 1623 0a30 1968     		ldr	r1, [r3]
 1624 0a32 F823     		mov	r3, #248
 1625 0a34 FB18     		add	r3, r7, r3
 1626 0a36 1A68     		ldr	r2, [r3]
 1627 0a38 9823     		mov	r3, #152
 1628 0a3a 5B00     		lsl	r3, r3, #1
 1629 0a3c FB18     		add	r3, r7, r3
 1630 0a3e 1B68     		ldr	r3, [r3]
 1631 0a40 F963     		str	r1, [r7, #60]
 1632 0a42 BA63     		str	r2, [r7, #56]
 1633 0a44 7B63     		str	r3, [r7, #52]
 1634              	.LBB54:
 1635              	.LBB55:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1636              		.loc 2 952 0
 1637 0a46 FB6B     		ldr	r3, [r7, #60]
 1638 0a48 1B04     		lsl	r3, r3, #16
 1639 0a4a 1B14     		asr	r3, r3, #16
 1640 0a4c BA6B     		ldr	r2, [r7, #56]
 1641 0a4e 1204     		lsl	r2, r2, #16
 1642 0a50 1214     		asr	r2, r2, #16
 1643 0a52 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1644              		.loc 2 953 0
 1645 0a54 FB6B     		ldr	r3, [r7, #60]
 1646 0a56 1B14     		asr	r3, r3, #16
 1647 0a58 B96B     		ldr	r1, [r7, #56]
 1648 0a5a 0914     		asr	r1, r1, #16
 1649 0a5c 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1650              		.loc 2 952 0
 1651 0a5e D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 1652              		.loc 2 954 0
 1653 0a60 7B6B     		ldr	r3, [r7, #52]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1654              		.loc 2 953 0
 1655 0a62 D318     		add	r3, r2, r3
 1656              	.LBE55:
 1657              	.LBE54:
 1658              		.loc 1 351 0
 1659 0a64 9822     		mov	r2, #152
 1660 0a66 5200     		lsl	r2, r2, #1
 1661 0a68 BA18     		add	r2, r7, r2
 1662 0a6a 1360     		str	r3, [r2]
 352:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 353:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* Decrement the loop counter */
 354:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         tapCnt--;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 55


 1663              		.loc 1 354 0
 1664 0a6c 7B1D     		add	r3, r7, #5
 1665 0a6e FF33     		add	r3, r3, #255
 1666 0a70 1B68     		ldr	r3, [r3]
 1667 0a72 013B     		sub	r3, r3, #1
 1668 0a74 7A1D     		add	r2, r7, #5
 1669 0a76 FF32     		add	r2, r2, #255
 1670 0a78 1360     		str	r3, [r2]
 1671              	.L49:
 342:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       {
 1672              		.loc 1 342 0
 1673 0a7a 7B1D     		add	r3, r7, #5
 1674 0a7c FF33     		add	r3, r3, #255
 1675 0a7e 1B68     		ldr	r3, [r3]
 1676 0a80 002B     		cmp	r3, #0
 1677 0a82 BFD1     		bne	.L51
 355:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       }
 356:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 357:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       tapCnt = (srcBLen) & 1u;
 1678              		.loc 1 357 0
 1679 0a84 3B68     		ldr	r3, [r7]
 1680 0a86 0122     		mov	r2, #1
 1681 0a88 1340     		and	r3, r2
 1682 0a8a 7A1D     		add	r2, r7, #5
 1683 0a8c FF32     		add	r2, r2, #255
 1684 0a8e 1360     		str	r3, [r2]
 358:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 359:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* apply same above for remaining samples of smaller length sequence */
 360:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       while (tapCnt > 0u)
 1685              		.loc 1 360 0
 1686 0a90 1AE0     		b	.L52
 1687              	.L53:
 361:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       {
 362:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 363:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* accumlate the results */
 364:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         acc0 += (*pScr1++ * *pIn2++);
 1688              		.loc 1 364 0
 1689 0a92 BB69     		ldr	r3, [r7, #24]
 1690 0a94 9A1C     		add	r2, r3, #2
 1691 0a96 BA61     		str	r2, [r7, #24]
 1692 0a98 1B88     		ldrh	r3, [r3]
 1693 0a9a 1AB2     		sxth	r2, r3
 1694 0a9c 7B69     		ldr	r3, [r7, #20]
 1695 0a9e 991C     		add	r1, r3, #2
 1696 0aa0 7961     		str	r1, [r7, #20]
 1697 0aa2 1B88     		ldrh	r3, [r3]
 1698 0aa4 1BB2     		sxth	r3, r3
 1699 0aa6 5343     		mul	r3, r2
 1700 0aa8 9822     		mov	r2, #152
 1701 0aaa 5200     		lsl	r2, r2, #1
 1702 0aac BA18     		add	r2, r7, r2
 1703 0aae 1268     		ldr	r2, [r2]
 1704 0ab0 D318     		add	r3, r2, r3
 1705 0ab2 9822     		mov	r2, #152
 1706 0ab4 5200     		lsl	r2, r2, #1
 1707 0ab6 BA18     		add	r2, r7, r2
 1708 0ab8 1360     		str	r3, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 56


 365:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 366:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         /* Decrement the loop counter */
 367:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****         tapCnt--;
 1709              		.loc 1 367 0
 1710 0aba 7B1D     		add	r3, r7, #5
 1711 0abc FF33     		add	r3, r3, #255
 1712 0abe 1B68     		ldr	r3, [r3]
 1713 0ac0 013B     		sub	r3, r3, #1
 1714 0ac2 7A1D     		add	r2, r7, #5
 1715 0ac4 FF32     		add	r2, r2, #255
 1716 0ac6 1360     		str	r3, [r2]
 1717              	.L52:
 360:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       {
 1718              		.loc 1 360 0
 1719 0ac8 7B1D     		add	r3, r7, #5
 1720 0aca FF33     		add	r3, r3, #255
 1721 0acc 1B68     		ldr	r3, [r3]
 1722 0ace 002B     		cmp	r3, #0
 1723 0ad0 DFD1     		bne	.L53
 368:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       }
 369:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 370:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       blkCnt--;
 1724              		.loc 1 370 0
 1725 0ad2 8623     		mov	r3, #134
 1726 0ad4 5B00     		lsl	r3, r3, #1
 1727 0ad6 FB18     		add	r3, r7, r3
 1728 0ad8 1B68     		ldr	r3, [r3]
 1729 0ada 013B     		sub	r3, r3, #1
 1730 0adc 8622     		mov	r2, #134
 1731 0ade 5200     		lsl	r2, r2, #1
 1732 0ae0 BA18     		add	r2, r7, r2
 1733 0ae2 1360     		str	r3, [r2]
 371:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 372:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* The result is in 2.30 format.  Convert to 1.15 with saturation.
 373:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****        ** Then store the output in the destination buffer. */
 374:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       *pOut++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 1734              		.loc 1 374 0
 1735 0ae4 FB69     		ldr	r3, [r7, #28]
 1736 0ae6 9A1C     		add	r2, r3, #2
 1737 0ae8 FA61     		str	r2, [r7, #28]
 1738 0aea 9822     		mov	r2, #152
 1739 0aec 5200     		lsl	r2, r2, #1
 1740 0aee BA18     		add	r2, r7, r2
 1741 0af0 1268     		ldr	r2, [r2]
 1742 0af2 D213     		asr	r2, r2, #15
 1743 0af4 3A63     		str	r2, [r7, #48]
 1744 0af6 1022     		mov	r2, #16
 1745 0af8 FA62     		str	r2, [r7, #44]
 1746              	.LBB56:
 1747              	.LBB57:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 1748              		.loc 2 699 0
 1749 0afa 0122     		mov	r2, #1
 1750 0afc BA62     		str	r2, [r7, #40]
 700:.\Include/arm_math.h ****     {
 1751              		.loc 2 700 0
 1752 0afe 0022     		mov	r2, #0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 57


 1753 0b00 7A62     		str	r2, [r7, #36]
 1754 0b02 05E0     		b	.L54
 1755              	.L55:
 702:.\Include/arm_math.h ****     }
 1756              		.loc 2 702 0
 1757 0b04 BA6A     		ldr	r2, [r7, #40]
 1758 0b06 5200     		lsl	r2, r2, #1
 1759 0b08 BA62     		str	r2, [r7, #40]
 700:.\Include/arm_math.h ****     {
 1760              		.loc 2 700 0
 1761 0b0a 7A6A     		ldr	r2, [r7, #36]
 1762 0b0c 0132     		add	r2, r2, #1
 1763 0b0e 7A62     		str	r2, [r7, #36]
 1764              	.L54:
 1765 0b10 FA6A     		ldr	r2, [r7, #44]
 1766 0b12 013A     		sub	r2, r2, #1
 1767 0b14 796A     		ldr	r1, [r7, #36]
 1768 0b16 9142     		cmp	r1, r2
 1769 0b18 F4D3     		bcc	.L55
 705:.\Include/arm_math.h ****     {
 1770              		.loc 2 705 0
 1771 0b1a 3A6B     		ldr	r2, [r7, #48]
 1772 0b1c 002A     		cmp	r2, #0
 1773 0b1e 09DD     		ble	.L56
 707:.\Include/arm_math.h **** 
 1774              		.loc 2 707 0
 1775 0b20 BA6A     		ldr	r2, [r7, #40]
 1776 0b22 013A     		sub	r2, r2, #1
 1777 0b24 BA62     		str	r2, [r7, #40]
 709:.\Include/arm_math.h ****       {
 1778              		.loc 2 709 0
 1779 0b26 396B     		ldr	r1, [r7, #48]
 1780 0b28 BA6A     		ldr	r2, [r7, #40]
 1781 0b2a 9142     		cmp	r1, r2
 1782 0b2c 0CDD     		ble	.L66
 711:.\Include/arm_math.h ****       }
 1783              		.loc 2 711 0
 1784 0b2e BA6A     		ldr	r2, [r7, #40]
 1785 0b30 3A63     		str	r2, [r7, #48]
 1786 0b32 0AE0     		b	.L58
 1787              	.L56:
 716:.\Include/arm_math.h **** 
 1788              		.loc 2 716 0
 1789 0b34 BA6A     		ldr	r2, [r7, #40]
 1790 0b36 5242     		neg	r2, r2
 1791 0b38 3A62     		str	r2, [r7, #32]
 718:.\Include/arm_math.h ****       {
 1792              		.loc 2 718 0
 1793 0b3a 396B     		ldr	r1, [r7, #48]
 1794 0b3c 3A6A     		ldr	r2, [r7, #32]
 1795 0b3e 9142     		cmp	r1, r2
 1796 0b40 03DA     		bge	.L58
 720:.\Include/arm_math.h ****       }
 1797              		.loc 2 720 0
 1798 0b42 3A6A     		ldr	r2, [r7, #32]
 1799 0b44 3A63     		str	r2, [r7, #48]
 1800 0b46 00E0     		b	.L58
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 58


 1801              	.L66:
 711:.\Include/arm_math.h ****       }
 1802              		.loc 2 711 0
 1803 0b48 C046     		mov	r8, r8
 1804              	.L58:
 723:.\Include/arm_math.h ****   }
 1805              		.loc 2 723 0
 1806 0b4a 3A6B     		ldr	r2, [r7, #48]
 1807              	.LBE57:
 1808              	.LBE56:
 1809              		.loc 1 374 0
 1810 0b4c 92B2     		uxth	r2, r2
 1811 0b4e 1A80     		strh	r2, [r3]
 375:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 376:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       /* Initialization of inputB pointer */
 377:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       pIn2 = py;
 1812              		.loc 1 377 0
 1813 0b50 FC23     		mov	r3, #252
 1814 0b52 FB18     		add	r3, r7, r3
 1815 0b54 1B68     		ldr	r3, [r3]
 1816 0b56 7B61     		str	r3, [r7, #20]
 378:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 379:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****       pScratch1 += 1u;
 1817              		.loc 1 379 0
 1818 0b58 A623     		mov	r3, #166
 1819 0b5a 5B00     		lsl	r3, r3, #1
 1820 0b5c FB18     		add	r3, r7, r3
 1821 0b5e 1B68     		ldr	r3, [r3]
 1822 0b60 0233     		add	r3, r3, #2
 1823 0b62 A622     		mov	r2, #166
 1824 0b64 5200     		lsl	r2, r2, #1
 1825 0b66 BA18     		add	r2, r7, r2
 1826 0b68 1360     		str	r3, [r2]
 1827              	.L48:
 332:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     {
 1828              		.loc 1 332 0
 1829 0b6a 8623     		mov	r3, #134
 1830 0b6c 5B00     		lsl	r3, r3, #1
 1831 0b6e FB18     		add	r3, r7, r3
 1832 0b70 1B68     		ldr	r3, [r3]
 1833 0b72 002B     		cmp	r3, #0
 1834 0b74 00D0     		beq	.LCB1642
 1835 0b76 35E7     		b	.L60	@long jump
 1836              	.LCB1642:
 380:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** 
 381:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     }
 382:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     /* set status as ARM_MATH_SUCCESS */
 383:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****     status = ARM_MATH_SUCCESS;
 1837              		.loc 1 383 0
 1838 0b78 0C23     		mov	r3, #12
 1839 0b7a FF33     		add	r3, r3, #255
 1840 0b7c FB18     		add	r3, r7, r3
 1841 0b7e 0022     		mov	r2, #0
 1842 0b80 1A70     		strb	r2, [r3]
 1843              	.L3:
 384:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   }
 385:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   /* Return to application */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 59


 386:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c ****   return (status);
 1844              		.loc 1 386 0
 1845 0b82 0C23     		mov	r3, #12
 1846 0b84 FF33     		add	r3, r3, #255
 1847 0b86 FB18     		add	r3, r7, r3
 1848 0b88 1B78     		ldrb	r3, [r3]
 1849 0b8a 5BB2     		sxtb	r3, r3
 387:Source\FilteringFunctions/arm_conv_partial_fast_opt_q15.c **** }
 1850              		.loc 1 387 0
 1851 0b8c 181C     		mov	r0, r3
 1852 0b8e BD46     		mov	sp, r7
 1853 0b90 4EB0     		add	sp, sp, #312
 1854              		@ sp needed
 1855 0b92 80BD     		pop	{r7, pc}
 1856              		.cfi_endproc
 1857              	.LFE82:
 1858              		.size	arm_conv_partial_fast_opt_q15, .-arm_conv_partial_fast_opt_q15
 1859              		.text
 1860              	.Letext0:
 1861              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1862              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1863              		.section	.debug_info,"",%progbits
 1864              	.Ldebug_info0:
 1865 0000 B4060000 		.4byte	0x6b4
 1866 0004 0400     		.2byte	0x4
 1867 0006 00000000 		.4byte	.Ldebug_abbrev0
 1868 000a 04       		.byte	0x4
 1869 000b 01       		.uleb128 0x1
 1870 000c EF000000 		.4byte	.LASF56
 1871 0010 01       		.byte	0x1
 1872 0011 BF020000 		.4byte	.LASF57
 1873 0015 79020000 		.4byte	.LASF58
 1874 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1875 001d 00000000 		.4byte	0
 1876 0021 00000000 		.4byte	.Ldebug_line0
 1877 0025 02       		.uleb128 0x2
 1878 0026 01       		.byte	0x1
 1879 0027 06       		.byte	0x6
 1880 0028 6D000000 		.4byte	.LASF0
 1881 002c 02       		.uleb128 0x2
 1882 002d 01       		.byte	0x1
 1883 002e 08       		.byte	0x8
 1884 002f 49020000 		.4byte	.LASF1
 1885 0033 03       		.uleb128 0x3
 1886 0034 BF000000 		.4byte	.LASF4
 1887 0038 03       		.byte	0x3
 1888 0039 29       		.byte	0x29
 1889 003a 3E000000 		.4byte	0x3e
 1890 003e 02       		.uleb128 0x2
 1891 003f 02       		.byte	0x2
 1892 0040 05       		.byte	0x5
 1893 0041 57020000 		.4byte	.LASF2
 1894 0045 02       		.uleb128 0x2
 1895 0046 02       		.byte	0x2
 1896 0047 07       		.byte	0x7
 1897 0048 9F010000 		.4byte	.LASF3
 1898 004c 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 60


 1899 004d 33030000 		.4byte	.LASF5
 1900 0051 03       		.byte	0x3
 1901 0052 3F       		.byte	0x3f
 1902 0053 57000000 		.4byte	0x57
 1903 0057 02       		.uleb128 0x2
 1904 0058 04       		.byte	0x4
 1905 0059 05       		.byte	0x5
 1906 005a 8D000000 		.4byte	.LASF6
 1907 005e 03       		.uleb128 0x3
 1908 005f B4000000 		.4byte	.LASF7
 1909 0063 03       		.byte	0x3
 1910 0064 41       		.byte	0x41
 1911 0065 69000000 		.4byte	0x69
 1912 0069 02       		.uleb128 0x2
 1913 006a 04       		.byte	0x4
 1914 006b 07       		.byte	0x7
 1915 006c DD000000 		.4byte	.LASF8
 1916 0070 02       		.uleb128 0x2
 1917 0071 08       		.byte	0x8
 1918 0072 05       		.byte	0x5
 1919 0073 5F000000 		.4byte	.LASF9
 1920 0077 02       		.uleb128 0x2
 1921 0078 08       		.byte	0x8
 1922 0079 07       		.byte	0x7
 1923 007a 2E000000 		.4byte	.LASF10
 1924 007e 04       		.uleb128 0x4
 1925 007f 04       		.byte	0x4
 1926 0080 05       		.byte	0x5
 1927 0081 696E7400 		.ascii	"int\000"
 1928 0085 02       		.uleb128 0x2
 1929 0086 04       		.byte	0x4
 1930 0087 07       		.byte	0x7
 1931 0088 C9000000 		.4byte	.LASF11
 1932 008c 03       		.uleb128 0x3
 1933 008d 57000000 		.4byte	.LASF12
 1934 0091 04       		.byte	0x4
 1935 0092 20       		.byte	0x20
 1936 0093 33000000 		.4byte	0x33
 1937 0097 03       		.uleb128 0x3
 1938 0098 41020000 		.4byte	.LASF13
 1939 009c 04       		.byte	0x4
 1940 009d 2C       		.byte	0x2c
 1941 009e 4C000000 		.4byte	0x4c
 1942 00a2 03       		.uleb128 0x3
 1943 00a3 07030000 		.4byte	.LASF14
 1944 00a7 04       		.byte	0x4
 1945 00a8 2D       		.byte	0x2d
 1946 00a9 5E000000 		.4byte	0x5e
 1947 00ad 02       		.uleb128 0x2
 1948 00ae 04       		.byte	0x4
 1949 00af 07       		.byte	0x7
 1950 00b0 DC010000 		.4byte	.LASF15
 1951 00b4 02       		.uleb128 0x2
 1952 00b5 01       		.byte	0x1
 1953 00b6 08       		.byte	0x8
 1954 00b7 17030000 		.4byte	.LASF16
 1955 00bb 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 61


 1956 00bc 08       		.byte	0x8
 1957 00bd 04       		.byte	0x4
 1958 00be A1000000 		.4byte	.LASF17
 1959 00c2 02       		.uleb128 0x2
 1960 00c3 04       		.byte	0x4
 1961 00c4 04       		.byte	0x4
 1962 00c5 11020000 		.4byte	.LASF18
 1963 00c9 02       		.uleb128 0x2
 1964 00ca 08       		.byte	0x8
 1965 00cb 04       		.byte	0x4
 1966 00cc E5010000 		.4byte	.LASF19
 1967 00d0 05       		.uleb128 0x5
 1968 00d1 01       		.byte	0x1
 1969 00d2 02       		.byte	0x2
 1970 00d3 8401     		.2byte	0x184
 1971 00d5 04010000 		.4byte	0x104
 1972 00d9 06       		.uleb128 0x6
 1973 00da 1D000000 		.4byte	.LASF20
 1974 00de 00       		.sleb128 0
 1975 00df 06       		.uleb128 0x6
 1976 00e0 61020000 		.4byte	.LASF21
 1977 00e4 7F       		.sleb128 -1
 1978 00e5 06       		.uleb128 0x6
 1979 00e6 FB010000 		.4byte	.LASF22
 1980 00ea 7E       		.sleb128 -2
 1981 00eb 06       		.uleb128 0x6
 1982 00ec 1C030000 		.4byte	.LASF23
 1983 00f0 7D       		.sleb128 -3
 1984 00f1 06       		.uleb128 0x6
 1985 00f2 31020000 		.4byte	.LASF24
 1986 00f6 7C       		.sleb128 -4
 1987 00f7 06       		.uleb128 0x6
 1988 00f8 17020000 		.4byte	.LASF25
 1989 00fc 7B       		.sleb128 -5
 1990 00fd 06       		.uleb128 0x6
 1991 00fe B2010000 		.4byte	.LASF26
 1992 0102 7A       		.sleb128 -6
 1993 0103 00       		.byte	0
 1994 0104 07       		.uleb128 0x7
 1995 0105 58030000 		.4byte	.LASF27
 1996 0109 02       		.byte	0x2
 1997 010a 8C01     		.2byte	0x18c
 1998 010c D0000000 		.4byte	0xd0
 1999 0110 07       		.uleb128 0x7
 2000 0111 9B000000 		.4byte	.LASF28
 2001 0115 02       		.byte	0x2
 2002 0116 9601     		.2byte	0x196
 2003 0118 8C000000 		.4byte	0x8c
 2004 011c 07       		.uleb128 0x7
 2005 011d F9020000 		.4byte	.LASF29
 2006 0121 02       		.byte	0x2
 2007 0122 9B01     		.2byte	0x19b
 2008 0124 97000000 		.4byte	0x97
 2009 0128 08       		.uleb128 0x8
 2010 0129 04       		.byte	0x4
 2011 012a 10010000 		.4byte	0x110
 2012 012e 09       		.uleb128 0x9
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 62


 2013 012f 3D030000 		.4byte	.LASF30
 2014 0133 02       		.byte	0x2
 2015 0134 B303     		.2byte	0x3b3
 2016 0136 A2000000 		.4byte	0xa2
 2017 013a 03       		.byte	0x3
 2018 013b 60010000 		.4byte	0x160
 2019 013f 0A       		.uleb128 0xa
 2020 0140 7800     		.ascii	"x\000"
 2021 0142 02       		.byte	0x2
 2022 0143 B403     		.2byte	0x3b4
 2023 0145 A2000000 		.4byte	0xa2
 2024 0149 0A       		.uleb128 0xa
 2025 014a 7900     		.ascii	"y\000"
 2026 014c 02       		.byte	0x2
 2027 014d B503     		.2byte	0x3b5
 2028 014f A2000000 		.4byte	0xa2
 2029 0153 0A       		.uleb128 0xa
 2030 0154 73756D00 		.ascii	"sum\000"
 2031 0158 02       		.byte	0x2
 2032 0159 B603     		.2byte	0x3b6
 2033 015b A2000000 		.4byte	0xa2
 2034 015f 00       		.byte	0
 2035 0160 09       		.uleb128 0x9
 2036 0161 63030000 		.4byte	.LASF31
 2037 0165 02       		.byte	0x2
 2038 0166 C103     		.2byte	0x3c1
 2039 0168 A2000000 		.4byte	0xa2
 2040 016c 03       		.byte	0x3
 2041 016d 92010000 		.4byte	0x192
 2042 0171 0A       		.uleb128 0xa
 2043 0172 7800     		.ascii	"x\000"
 2044 0174 02       		.byte	0x2
 2045 0175 C203     		.2byte	0x3c2
 2046 0177 A2000000 		.4byte	0xa2
 2047 017b 0A       		.uleb128 0xa
 2048 017c 7900     		.ascii	"y\000"
 2049 017e 02       		.byte	0x2
 2050 017f C303     		.2byte	0x3c3
 2051 0181 A2000000 		.4byte	0xa2
 2052 0185 0A       		.uleb128 0xa
 2053 0186 73756D00 		.ascii	"sum\000"
 2054 018a 02       		.byte	0x2
 2055 018b C403     		.2byte	0x3c4
 2056 018d A2000000 		.4byte	0xa2
 2057 0191 00       		.byte	0
 2058 0192 09       		.uleb128 0x9
 2059 0193 0F000000 		.4byte	.LASF32
 2060 0197 02       		.byte	0x2
 2061 0198 B402     		.2byte	0x2b4
 2062 019a 1C010000 		.4byte	0x11c
 2063 019e 03       		.byte	0x3
 2064 019f DA010000 		.4byte	0x1da
 2065 01a3 0A       		.uleb128 0xa
 2066 01a4 7800     		.ascii	"x\000"
 2067 01a6 02       		.byte	0x2
 2068 01a7 B502     		.2byte	0x2b5
 2069 01a9 1C010000 		.4byte	0x11c
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 63


 2070 01ad 0A       		.uleb128 0xa
 2071 01ae 7900     		.ascii	"y\000"
 2072 01b0 02       		.byte	0x2
 2073 01b1 B602     		.2byte	0x2b6
 2074 01b3 A2000000 		.4byte	0xa2
 2075 01b7 0B       		.uleb128 0xb
 2076 01b8 10030000 		.4byte	.LASF33
 2077 01bc 02       		.byte	0x2
 2078 01bd B802     		.2byte	0x2b8
 2079 01bf 97000000 		.4byte	0x97
 2080 01c3 0B       		.uleb128 0xb
 2081 01c4 16000000 		.4byte	.LASF34
 2082 01c8 02       		.byte	0x2
 2083 01c9 B802     		.2byte	0x2b8
 2084 01cb 97000000 		.4byte	0x97
 2085 01cf 0C       		.uleb128 0xc
 2086 01d0 6900     		.ascii	"i\000"
 2087 01d2 02       		.byte	0x2
 2088 01d3 B902     		.2byte	0x2b9
 2089 01d5 A2000000 		.4byte	0xa2
 2090 01d9 00       		.byte	0
 2091 01da 0D       		.uleb128 0xd
 2092 01db 81010000 		.4byte	.LASF59
 2093 01df 01       		.byte	0x1
 2094 01e0 3F       		.byte	0x3f
 2095 01e1 04010000 		.4byte	0x104
 2096 01e5 00000000 		.4byte	.LFB82
 2097 01e9 940B0000 		.4byte	.LFE82-.LFB82
 2098 01ed 01       		.uleb128 0x1
 2099 01ee 9C       		.byte	0x9c
 2100 01ef 0E       		.uleb128 0xe
 2101 01f0 A8000000 		.4byte	.LASF35
 2102 01f4 01       		.byte	0x1
 2103 01f5 40       		.byte	0x40
 2104 01f6 28010000 		.4byte	0x128
 2105 01fa 03       		.uleb128 0x3
 2106 01fb 91       		.byte	0x91
 2107 01fc CC7D     		.sleb128 -308
 2108 01fe 0E       		.uleb128 0xe
 2109 01ff FF020000 		.4byte	.LASF36
 2110 0203 01       		.byte	0x1
 2111 0204 41       		.byte	0x41
 2112 0205 A2000000 		.4byte	0xa2
 2113 0209 03       		.uleb128 0x3
 2114 020a 91       		.byte	0x91
 2115 020b C87D     		.sleb128 -312
 2116 020d 0E       		.uleb128 0xe
 2117 020e AE000000 		.4byte	.LASF37
 2118 0212 01       		.byte	0x1
 2119 0213 42       		.byte	0x42
 2120 0214 28010000 		.4byte	0x128
 2121 0218 03       		.uleb128 0x3
 2122 0219 91       		.byte	0x91
 2123 021a C47D     		.sleb128 -316
 2124 021c 0E       		.uleb128 0xe
 2125 021d 29020000 		.4byte	.LASF38
 2126 0221 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 64


 2127 0222 43       		.byte	0x43
 2128 0223 A2000000 		.4byte	0xa2
 2129 0227 03       		.uleb128 0x3
 2130 0228 91       		.byte	0x91
 2131 0229 C07D     		.sleb128 -320
 2132 022b 0E       		.uleb128 0xe
 2133 022c 96000000 		.4byte	.LASF39
 2134 0230 01       		.byte	0x1
 2135 0231 44       		.byte	0x44
 2136 0232 28010000 		.4byte	0x128
 2137 0236 02       		.uleb128 0x2
 2138 0237 91       		.byte	0x91
 2139 0238 00       		.sleb128 0
 2140 0239 0E       		.uleb128 0xe
 2141 023a 4C000000 		.4byte	.LASF40
 2142 023e 01       		.byte	0x1
 2143 023f 45       		.byte	0x45
 2144 0240 A2000000 		.4byte	0xa2
 2145 0244 02       		.uleb128 0x2
 2146 0245 91       		.byte	0x91
 2147 0246 04       		.sleb128 4
 2148 0247 0E       		.uleb128 0xe
 2149 0248 D2010000 		.4byte	.LASF41
 2150 024c 01       		.byte	0x1
 2151 024d 46       		.byte	0x46
 2152 024e A2000000 		.4byte	0xa2
 2153 0252 02       		.uleb128 0x2
 2154 0253 91       		.byte	0x91
 2155 0254 08       		.sleb128 8
 2156 0255 0E       		.uleb128 0xe
 2157 0256 79000000 		.4byte	.LASF42
 2158 025a 01       		.byte	0x1
 2159 025b 47       		.byte	0x47
 2160 025c 28010000 		.4byte	0x128
 2161 0260 02       		.uleb128 0x2
 2162 0261 91       		.byte	0x91
 2163 0262 0C       		.sleb128 12
 2164 0263 0E       		.uleb128 0xe
 2165 0264 83000000 		.4byte	.LASF43
 2166 0268 01       		.byte	0x1
 2167 0269 48       		.byte	0x48
 2168 026a 28010000 		.4byte	0x128
 2169 026e 02       		.uleb128 0x2
 2170 026f 91       		.byte	0x91
 2171 0270 10       		.sleb128 16
 2172 0271 0F       		.uleb128 0xf
 2173 0272 CD010000 		.4byte	.LASF44
 2174 0276 01       		.byte	0x1
 2175 0277 4B       		.byte	0x4b
 2176 0278 28010000 		.4byte	0x128
 2177 027c 03       		.uleb128 0x3
 2178 027d 91       		.byte	0x91
 2179 027e DC7D     		.sleb128 -292
 2180 0280 0F       		.uleb128 0xf
 2181 0281 4C030000 		.4byte	.LASF45
 2182 0285 01       		.byte	0x1
 2183 0286 4C       		.byte	0x4c
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 65


 2184 0287 28010000 		.4byte	0x128
 2185 028b 03       		.uleb128 0x3
 2186 028c 91       		.byte	0x91
 2187 028d D87D     		.sleb128 -296
 2188 028f 0F       		.uleb128 0xf
 2189 0290 52030000 		.4byte	.LASF46
 2190 0294 01       		.byte	0x1
 2191 0295 4D       		.byte	0x4d
 2192 0296 28010000 		.4byte	0x128
 2193 029a 02       		.uleb128 0x2
 2194 029b 91       		.byte	0x91
 2195 029c 74       		.sleb128 -12
 2196 029d 0F       		.uleb128 0xf
 2197 029e 00000000 		.4byte	.LASF47
 2198 02a2 01       		.byte	0x1
 2199 02a3 4E       		.byte	0x4e
 2200 02a4 1C010000 		.4byte	0x11c
 2201 02a8 02       		.uleb128 0x2
 2202 02a9 91       		.byte	0x91
 2203 02aa 70       		.sleb128 -16
 2204 02ab 0F       		.uleb128 0xf
 2205 02ac 05000000 		.4byte	.LASF48
 2206 02b0 01       		.byte	0x1
 2207 02b1 4E       		.byte	0x4e
 2208 02b2 1C010000 		.4byte	0x11c
 2209 02b6 02       		.uleb128 0x2
 2210 02b7 91       		.byte	0x91
 2211 02b8 6C       		.sleb128 -20
 2212 02b9 0F       		.uleb128 0xf
 2213 02ba 0A000000 		.4byte	.LASF49
 2214 02be 01       		.byte	0x1
 2215 02bf 4E       		.byte	0x4e
 2216 02c0 1C010000 		.4byte	0x11c
 2217 02c4 02       		.uleb128 0x2
 2218 02c5 91       		.byte	0x91
 2219 02c6 68       		.sleb128 -24
 2220 02c7 0F       		.uleb128 0xf
 2221 02c8 C8010000 		.4byte	.LASF50
 2222 02cc 01       		.byte	0x1
 2223 02cd 4E       		.byte	0x4e
 2224 02ce 1C010000 		.4byte	0x11c
 2225 02d2 02       		.uleb128 0x2
 2226 02d3 91       		.byte	0x91
 2227 02d4 64       		.sleb128 -28
 2228 02d5 10       		.uleb128 0x10
 2229 02d6 783100   		.ascii	"x1\000"
 2230 02d9 01       		.byte	0x1
 2231 02da 4F       		.byte	0x4f
 2232 02db 1C010000 		.4byte	0x11c
 2233 02df 02       		.uleb128 0x2
 2234 02e0 91       		.byte	0x91
 2235 02e1 60       		.sleb128 -32
 2236 02e2 10       		.uleb128 0x10
 2237 02e3 783200   		.ascii	"x2\000"
 2238 02e6 01       		.byte	0x1
 2239 02e7 4F       		.byte	0x4f
 2240 02e8 1C010000 		.4byte	0x11c
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 66


 2241 02ec 02       		.uleb128 0x2
 2242 02ed 91       		.byte	0x91
 2243 02ee 5C       		.sleb128 -36
 2244 02ef 10       		.uleb128 0x10
 2245 02f0 783300   		.ascii	"x3\000"
 2246 02f3 01       		.byte	0x1
 2247 02f4 4F       		.byte	0x4f
 2248 02f5 1C010000 		.4byte	0x11c
 2249 02f9 03       		.uleb128 0x3
 2250 02fa 91       		.byte	0x91
 2251 02fb B07F     		.sleb128 -80
 2252 02fd 10       		.uleb128 0x10
 2253 02fe 793100   		.ascii	"y1\000"
 2254 0301 01       		.byte	0x1
 2255 0302 50       		.byte	0x50
 2256 0303 1C010000 		.4byte	0x11c
 2257 0307 03       		.uleb128 0x3
 2258 0308 91       		.byte	0x91
 2259 0309 B87F     		.sleb128 -72
 2260 030b 10       		.uleb128 0x10
 2261 030c 793200   		.ascii	"y2\000"
 2262 030f 01       		.byte	0x1
 2263 0310 50       		.byte	0x50
 2264 0311 1C010000 		.4byte	0x11c
 2265 0315 03       		.uleb128 0x3
 2266 0316 91       		.byte	0x91
 2267 0317 B47F     		.sleb128 -76
 2268 0319 0F       		.uleb128 0xf
 2269 031a F1010000 		.4byte	.LASF51
 2270 031e 01       		.byte	0x1
 2271 031f 51       		.byte	0x51
 2272 0320 28010000 		.4byte	0x128
 2273 0324 02       		.uleb128 0x2
 2274 0325 91       		.byte	0x91
 2275 0326 58       		.sleb128 -40
 2276 0327 0F       		.uleb128 0xf
 2277 0328 F6010000 		.4byte	.LASF52
 2278 032c 01       		.byte	0x1
 2279 032d 52       		.byte	0x52
 2280 032e 28010000 		.4byte	0x128
 2281 0332 03       		.uleb128 0x3
 2282 0333 91       		.byte	0x91
 2283 0334 D47D     		.sleb128 -300
 2284 0336 10       		.uleb128 0x10
 2285 0337 707800   		.ascii	"px\000"
 2286 033a 01       		.byte	0x1
 2287 033b 53       		.byte	0x53
 2288 033c 28010000 		.4byte	0x128
 2289 0340 02       		.uleb128 0x2
 2290 0341 91       		.byte	0x91
 2291 0342 54       		.sleb128 -44
 2292 0343 10       		.uleb128 0x10
 2293 0344 707900   		.ascii	"py\000"
 2294 0347 01       		.byte	0x1
 2295 0348 54       		.byte	0x54
 2296 0349 28010000 		.4byte	0x128
 2297 034d 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 67


 2298 034e 91       		.byte	0x91
 2299 034f BC7F     		.sleb128 -68
 2300 0351 10       		.uleb128 0x10
 2301 0352 6A00     		.ascii	"j\000"
 2302 0354 01       		.byte	0x1
 2303 0355 55       		.byte	0x55
 2304 0356 A2000000 		.4byte	0xa2
 2305 035a 02       		.uleb128 0x2
 2306 035b 91       		.byte	0x91
 2307 035c 40       		.sleb128 -64
 2308 035d 10       		.uleb128 0x10
 2309 035e 6B00     		.ascii	"k\000"
 2310 0360 01       		.byte	0x1
 2311 0361 55       		.byte	0x55
 2312 0362 A2000000 		.4byte	0xa2
 2313 0366 02       		.uleb128 0x2
 2314 0367 91       		.byte	0x91
 2315 0368 50       		.sleb128 -48
 2316 0369 0F       		.uleb128 0xf
 2317 036a 45000000 		.4byte	.LASF53
 2318 036e 01       		.byte	0x1
 2319 036f 55       		.byte	0x55
 2320 0370 A2000000 		.4byte	0xa2
 2321 0374 02       		.uleb128 0x2
 2322 0375 91       		.byte	0x91
 2323 0376 4C       		.sleb128 -52
 2324 0377 0F       		.uleb128 0xf
 2325 0378 45030000 		.4byte	.LASF54
 2326 037c 01       		.byte	0x1
 2327 037d 56       		.byte	0x56
 2328 037e 04010000 		.4byte	0x104
 2329 0382 02       		.uleb128 0x2
 2330 0383 91       		.byte	0x91
 2331 0384 4B       		.sleb128 -53
 2332 0385 0F       		.uleb128 0xf
 2333 0386 D6000000 		.4byte	.LASF55
 2334 038a 01       		.byte	0x1
 2335 038b 58       		.byte	0x58
 2336 038c A2000000 		.4byte	0xa2
 2337 0390 02       		.uleb128 0x2
 2338 0391 91       		.byte	0x91
 2339 0392 44       		.sleb128 -60
 2340 0393 11       		.uleb128 0x11
 2341 0394 2E010000 		.4byte	0x12e
 2342 0398 4C030000 		.4byte	.LBB30
 2343 039c 32000000 		.4byte	.LBE30-.LBB30
 2344 03a0 01       		.byte	0x1
 2345 03a1 E5       		.byte	0xe5
 2346 03a2 C2030000 		.4byte	0x3c2
 2347 03a6 12       		.uleb128 0x12
 2348 03a7 53010000 		.4byte	0x153
 2349 03ab 03       		.uleb128 0x3
 2350 03ac 91       		.byte	0x91
 2351 03ad A47F     		.sleb128 -92
 2352 03af 12       		.uleb128 0x12
 2353 03b0 49010000 		.4byte	0x149
 2354 03b4 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 68


 2355 03b5 91       		.byte	0x91
 2356 03b6 A87F     		.sleb128 -88
 2357 03b8 12       		.uleb128 0x12
 2358 03b9 3F010000 		.4byte	0x13f
 2359 03bd 03       		.uleb128 0x3
 2360 03be 91       		.byte	0x91
 2361 03bf AC7F     		.sleb128 -84
 2362 03c1 00       		.byte	0
 2363 03c2 11       		.uleb128 0x11
 2364 03c3 2E010000 		.4byte	0x12e
 2365 03c7 AE030000 		.4byte	.LBB32
 2366 03cb 32000000 		.4byte	.LBE32-.LBB32
 2367 03cf 01       		.byte	0x1
 2368 03d0 E6       		.byte	0xe6
 2369 03d1 F1030000 		.4byte	0x3f1
 2370 03d5 12       		.uleb128 0x12
 2371 03d6 53010000 		.4byte	0x153
 2372 03da 03       		.uleb128 0x3
 2373 03db 91       		.byte	0x91
 2374 03dc 987F     		.sleb128 -104
 2375 03de 12       		.uleb128 0x12
 2376 03df 49010000 		.4byte	0x149
 2377 03e3 03       		.uleb128 0x3
 2378 03e4 91       		.byte	0x91
 2379 03e5 9C7F     		.sleb128 -100
 2380 03e7 12       		.uleb128 0x12
 2381 03e8 3F010000 		.4byte	0x13f
 2382 03ec 03       		.uleb128 0x3
 2383 03ed 91       		.byte	0x91
 2384 03ee A07F     		.sleb128 -96
 2385 03f0 00       		.byte	0
 2386 03f1 11       		.uleb128 0x11
 2387 03f2 60010000 		.4byte	0x160
 2388 03f6 2E040000 		.4byte	.LBB34
 2389 03fa 32000000 		.4byte	.LBE34-.LBB34
 2390 03fe 01       		.byte	0x1
 2391 03ff F0       		.byte	0xf0
 2392 0400 20040000 		.4byte	0x420
 2393 0404 12       		.uleb128 0x12
 2394 0405 85010000 		.4byte	0x185
 2395 0409 03       		.uleb128 0x3
 2396 040a 91       		.byte	0x91
 2397 040b 8C7F     		.sleb128 -116
 2398 040d 12       		.uleb128 0x12
 2399 040e 7B010000 		.4byte	0x17b
 2400 0412 03       		.uleb128 0x3
 2401 0413 91       		.byte	0x91
 2402 0414 907F     		.sleb128 -112
 2403 0416 12       		.uleb128 0x12
 2404 0417 71010000 		.4byte	0x171
 2405 041b 03       		.uleb128 0x3
 2406 041c 91       		.byte	0x91
 2407 041d 947F     		.sleb128 -108
 2408 041f 00       		.byte	0
 2409 0420 11       		.uleb128 0x11
 2410 0421 2E010000 		.4byte	0x12e
 2411 0425 9C040000 		.4byte	.LBB36
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 69


 2412 0429 32000000 		.4byte	.LBE36-.LBB36
 2413 042d 01       		.byte	0x1
 2414 042e F6       		.byte	0xf6
 2415 042f 4F040000 		.4byte	0x44f
 2416 0433 12       		.uleb128 0x12
 2417 0434 53010000 		.4byte	0x153
 2418 0438 03       		.uleb128 0x3
 2419 0439 91       		.byte	0x91
 2420 043a 807F     		.sleb128 -128
 2421 043c 12       		.uleb128 0x12
 2422 043d 49010000 		.4byte	0x149
 2423 0441 03       		.uleb128 0x3
 2424 0442 91       		.byte	0x91
 2425 0443 847F     		.sleb128 -124
 2426 0445 12       		.uleb128 0x12
 2427 0446 3F010000 		.4byte	0x13f
 2428 044a 03       		.uleb128 0x3
 2429 044b 91       		.byte	0x91
 2430 044c 887F     		.sleb128 -120
 2431 044e 00       		.byte	0
 2432 044f 11       		.uleb128 0x11
 2433 0450 2E010000 		.4byte	0x12e
 2434 0454 FE040000 		.4byte	.LBB38
 2435 0458 32000000 		.4byte	.LBE38-.LBB38
 2436 045c 01       		.byte	0x1
 2437 045d F8       		.byte	0xf8
 2438 045e 7E040000 		.4byte	0x47e
 2439 0462 12       		.uleb128 0x12
 2440 0463 53010000 		.4byte	0x153
 2441 0467 03       		.uleb128 0x3
 2442 0468 91       		.byte	0x91
 2443 0469 F47E     		.sleb128 -140
 2444 046b 12       		.uleb128 0x12
 2445 046c 49010000 		.4byte	0x149
 2446 0470 03       		.uleb128 0x3
 2447 0471 91       		.byte	0x91
 2448 0472 F87E     		.sleb128 -136
 2449 0474 12       		.uleb128 0x12
 2450 0475 3F010000 		.4byte	0x13f
 2451 0479 03       		.uleb128 0x3
 2452 047a 91       		.byte	0x91
 2453 047b FC7E     		.sleb128 -132
 2454 047d 00       		.byte	0
 2455 047e 13       		.uleb128 0x13
 2456 047f 60010000 		.4byte	0x160
 2457 0483 7E050000 		.4byte	.LBB40
 2458 0487 32000000 		.4byte	.LBE40-.LBB40
 2459 048b 01       		.byte	0x1
 2460 048c 0101     		.2byte	0x101
 2461 048e AE040000 		.4byte	0x4ae
 2462 0492 12       		.uleb128 0x12
 2463 0493 85010000 		.4byte	0x185
 2464 0497 03       		.uleb128 0x3
 2465 0498 91       		.byte	0x91
 2466 0499 E87E     		.sleb128 -152
 2467 049b 12       		.uleb128 0x12
 2468 049c 7B010000 		.4byte	0x17b
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 70


 2469 04a0 03       		.uleb128 0x3
 2470 04a1 91       		.byte	0x91
 2471 04a2 EC7E     		.sleb128 -148
 2472 04a4 12       		.uleb128 0x12
 2473 04a5 71010000 		.4byte	0x171
 2474 04a9 03       		.uleb128 0x3
 2475 04aa 91       		.byte	0x91
 2476 04ab F07E     		.sleb128 -144
 2477 04ad 00       		.byte	0
 2478 04ae 13       		.uleb128 0x13
 2479 04af 60010000 		.4byte	0x160
 2480 04b3 DE050000 		.4byte	.LBB42
 2481 04b7 32000000 		.4byte	.LBE42-.LBB42
 2482 04bb 01       		.byte	0x1
 2483 04bc 0201     		.2byte	0x102
 2484 04be DE040000 		.4byte	0x4de
 2485 04c2 12       		.uleb128 0x12
 2486 04c3 85010000 		.4byte	0x185
 2487 04c7 03       		.uleb128 0x3
 2488 04c8 91       		.byte	0x91
 2489 04c9 DC7E     		.sleb128 -164
 2490 04cb 12       		.uleb128 0x12
 2491 04cc 7B010000 		.4byte	0x17b
 2492 04d0 03       		.uleb128 0x3
 2493 04d1 91       		.byte	0x91
 2494 04d2 E07E     		.sleb128 -160
 2495 04d4 12       		.uleb128 0x12
 2496 04d5 71010000 		.4byte	0x171
 2497 04d9 03       		.uleb128 0x3
 2498 04da 91       		.byte	0x91
 2499 04db E47E     		.sleb128 -156
 2500 04dd 00       		.byte	0
 2501 04de 13       		.uleb128 0x13
 2502 04df 60010000 		.4byte	0x160
 2503 04e3 6A060000 		.4byte	.LBB44
 2504 04e7 32000000 		.4byte	.LBE44-.LBB44
 2505 04eb 01       		.byte	0x1
 2506 04ec 0C01     		.2byte	0x10c
 2507 04ee 0E050000 		.4byte	0x50e
 2508 04f2 12       		.uleb128 0x12
 2509 04f3 85010000 		.4byte	0x185
 2510 04f7 03       		.uleb128 0x3
 2511 04f8 91       		.byte	0x91
 2512 04f9 D07E     		.sleb128 -176
 2513 04fb 12       		.uleb128 0x12
 2514 04fc 7B010000 		.4byte	0x17b
 2515 0500 03       		.uleb128 0x3
 2516 0501 91       		.byte	0x91
 2517 0502 D47E     		.sleb128 -172
 2518 0504 12       		.uleb128 0x12
 2519 0505 71010000 		.4byte	0x171
 2520 0509 03       		.uleb128 0x3
 2521 050a 91       		.byte	0x91
 2522 050b D87E     		.sleb128 -168
 2523 050d 00       		.byte	0
 2524 050e 13       		.uleb128 0x13
 2525 050f 92010000 		.4byte	0x192
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 71


 2526 0513 C4070000 		.4byte	.LBB46
 2527 0517 9E000000 		.4byte	.LBE46-.LBB46
 2528 051b 01       		.byte	0x1
 2529 051c 3401     		.2byte	0x134
 2530 051e 5A050000 		.4byte	0x55a
 2531 0522 12       		.uleb128 0x12
 2532 0523 AD010000 		.4byte	0x1ad
 2533 0527 03       		.uleb128 0x3
 2534 0528 91       		.byte	0x91
 2535 0529 C87E     		.sleb128 -184
 2536 052b 12       		.uleb128 0x12
 2537 052c A3010000 		.4byte	0x1a3
 2538 0530 03       		.uleb128 0x3
 2539 0531 91       		.byte	0x91
 2540 0532 CC7E     		.sleb128 -180
 2541 0534 14       		.uleb128 0x14
 2542 0535 C4070000 		.4byte	.LBB47
 2543 0539 9E000000 		.4byte	.LBE47-.LBB47
 2544 053d 15       		.uleb128 0x15
 2545 053e B7010000 		.4byte	0x1b7
 2546 0542 03       		.uleb128 0x3
 2547 0543 91       		.byte	0x91
 2548 0544 C47E     		.sleb128 -188
 2549 0546 15       		.uleb128 0x15
 2550 0547 C3010000 		.4byte	0x1c3
 2551 054b 03       		.uleb128 0x3
 2552 054c 91       		.byte	0x91
 2553 054d BC7E     		.sleb128 -196
 2554 054f 15       		.uleb128 0x15
 2555 0550 CF010000 		.4byte	0x1cf
 2556 0554 03       		.uleb128 0x3
 2557 0555 91       		.byte	0x91
 2558 0556 C07E     		.sleb128 -192
 2559 0558 00       		.byte	0
 2560 0559 00       		.byte	0
 2561 055a 13       		.uleb128 0x13
 2562 055b 92010000 		.4byte	0x192
 2563 055f 76080000 		.4byte	.LBB48
 2564 0563 52000000 		.4byte	.LBE48-.LBB48
 2565 0567 01       		.byte	0x1
 2566 0568 3401     		.2byte	0x134
 2567 056a A6050000 		.4byte	0x5a6
 2568 056e 12       		.uleb128 0x12
 2569 056f AD010000 		.4byte	0x1ad
 2570 0573 03       		.uleb128 0x3
 2571 0574 91       		.byte	0x91
 2572 0575 B47E     		.sleb128 -204
 2573 0577 12       		.uleb128 0x12
 2574 0578 A3010000 		.4byte	0x1a3
 2575 057c 03       		.uleb128 0x3
 2576 057d 91       		.byte	0x91
 2577 057e B87E     		.sleb128 -200
 2578 0580 14       		.uleb128 0x14
 2579 0581 76080000 		.4byte	.LBB49
 2580 0585 52000000 		.4byte	.LBE49-.LBB49
 2581 0589 15       		.uleb128 0x15
 2582 058a B7010000 		.4byte	0x1b7
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 72


 2583 058e 03       		.uleb128 0x3
 2584 058f 91       		.byte	0x91
 2585 0590 B07E     		.sleb128 -208
 2586 0592 15       		.uleb128 0x15
 2587 0593 C3010000 		.4byte	0x1c3
 2588 0597 03       		.uleb128 0x3
 2589 0598 91       		.byte	0x91
 2590 0599 A87E     		.sleb128 -216
 2591 059b 15       		.uleb128 0x15
 2592 059c CF010000 		.4byte	0x1cf
 2593 05a0 03       		.uleb128 0x3
 2594 05a1 91       		.byte	0x91
 2595 05a2 AC7E     		.sleb128 -212
 2596 05a4 00       		.byte	0
 2597 05a5 00       		.byte	0
 2598 05a6 13       		.uleb128 0x13
 2599 05a7 92010000 		.4byte	0x192
 2600 05ab E8080000 		.4byte	.LBB50
 2601 05af 52000000 		.4byte	.LBE50-.LBB50
 2602 05b3 01       		.byte	0x1
 2603 05b4 3601     		.2byte	0x136
 2604 05b6 F2050000 		.4byte	0x5f2
 2605 05ba 12       		.uleb128 0x12
 2606 05bb AD010000 		.4byte	0x1ad
 2607 05bf 03       		.uleb128 0x3
 2608 05c0 91       		.byte	0x91
 2609 05c1 A07E     		.sleb128 -224
 2610 05c3 12       		.uleb128 0x12
 2611 05c4 A3010000 		.4byte	0x1a3
 2612 05c8 03       		.uleb128 0x3
 2613 05c9 91       		.byte	0x91
 2614 05ca A47E     		.sleb128 -220
 2615 05cc 14       		.uleb128 0x14
 2616 05cd E8080000 		.4byte	.LBB51
 2617 05d1 52000000 		.4byte	.LBE51-.LBB51
 2618 05d5 15       		.uleb128 0x15
 2619 05d6 B7010000 		.4byte	0x1b7
 2620 05da 03       		.uleb128 0x3
 2621 05db 91       		.byte	0x91
 2622 05dc 9C7E     		.sleb128 -228
 2623 05de 15       		.uleb128 0x15
 2624 05df C3010000 		.4byte	0x1c3
 2625 05e3 03       		.uleb128 0x3
 2626 05e4 91       		.byte	0x91
 2627 05e5 947E     		.sleb128 -236
 2628 05e7 15       		.uleb128 0x15
 2629 05e8 CF010000 		.4byte	0x1cf
 2630 05ec 03       		.uleb128 0x3
 2631 05ed 91       		.byte	0x91
 2632 05ee 987E     		.sleb128 -232
 2633 05f0 00       		.byte	0
 2634 05f1 00       		.byte	0
 2635 05f2 13       		.uleb128 0x13
 2636 05f3 92010000 		.4byte	0x192
 2637 05f7 4E090000 		.4byte	.LBB52
 2638 05fb 52000000 		.4byte	.LBE52-.LBB52
 2639 05ff 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 73


 2640 0600 3601     		.2byte	0x136
 2641 0602 3E060000 		.4byte	0x63e
 2642 0606 12       		.uleb128 0x12
 2643 0607 AD010000 		.4byte	0x1ad
 2644 060b 03       		.uleb128 0x3
 2645 060c 91       		.byte	0x91
 2646 060d 8C7E     		.sleb128 -244
 2647 060f 12       		.uleb128 0x12
 2648 0610 A3010000 		.4byte	0x1a3
 2649 0614 03       		.uleb128 0x3
 2650 0615 91       		.byte	0x91
 2651 0616 907E     		.sleb128 -240
 2652 0618 14       		.uleb128 0x14
 2653 0619 4E090000 		.4byte	.LBB53
 2654 061d 52000000 		.4byte	.LBE53-.LBB53
 2655 0621 15       		.uleb128 0x15
 2656 0622 B7010000 		.4byte	0x1b7
 2657 0626 03       		.uleb128 0x3
 2658 0627 91       		.byte	0x91
 2659 0628 887E     		.sleb128 -248
 2660 062a 15       		.uleb128 0x15
 2661 062b C3010000 		.4byte	0x1c3
 2662 062f 03       		.uleb128 0x3
 2663 0630 91       		.byte	0x91
 2664 0631 807E     		.sleb128 -256
 2665 0633 15       		.uleb128 0x15
 2666 0634 CF010000 		.4byte	0x1cf
 2667 0638 03       		.uleb128 0x3
 2668 0639 91       		.byte	0x91
 2669 063a 847E     		.sleb128 -252
 2670 063c 00       		.byte	0
 2671 063d 00       		.byte	0
 2672 063e 13       		.uleb128 0x13
 2673 063f 2E010000 		.4byte	0x12e
 2674 0643 460A0000 		.4byte	.LBB54
 2675 0647 1E000000 		.4byte	.LBE54-.LBB54
 2676 064b 01       		.byte	0x1
 2677 064c 5F01     		.2byte	0x15f
 2678 064e 6E060000 		.4byte	0x66e
 2679 0652 12       		.uleb128 0x12
 2680 0653 53010000 		.4byte	0x153
 2681 0657 03       		.uleb128 0x3
 2682 0658 91       		.byte	0x91
 2683 0659 F47D     		.sleb128 -268
 2684 065b 12       		.uleb128 0x12
 2685 065c 49010000 		.4byte	0x149
 2686 0660 03       		.uleb128 0x3
 2687 0661 91       		.byte	0x91
 2688 0662 F87D     		.sleb128 -264
 2689 0664 12       		.uleb128 0x12
 2690 0665 3F010000 		.4byte	0x13f
 2691 0669 03       		.uleb128 0x3
 2692 066a 91       		.byte	0x91
 2693 066b FC7D     		.sleb128 -260
 2694 066d 00       		.byte	0
 2695 066e 16       		.uleb128 0x16
 2696 066f 92010000 		.4byte	0x192
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 74


 2697 0673 FA0A0000 		.4byte	.LBB56
 2698 0677 52000000 		.4byte	.LBE56-.LBB56
 2699 067b 01       		.byte	0x1
 2700 067c 7601     		.2byte	0x176
 2701 067e 12       		.uleb128 0x12
 2702 067f AD010000 		.4byte	0x1ad
 2703 0683 03       		.uleb128 0x3
 2704 0684 91       		.byte	0x91
 2705 0685 EC7D     		.sleb128 -276
 2706 0687 12       		.uleb128 0x12
 2707 0688 A3010000 		.4byte	0x1a3
 2708 068c 03       		.uleb128 0x3
 2709 068d 91       		.byte	0x91
 2710 068e F07D     		.sleb128 -272
 2711 0690 14       		.uleb128 0x14
 2712 0691 FA0A0000 		.4byte	.LBB57
 2713 0695 52000000 		.4byte	.LBE57-.LBB57
 2714 0699 15       		.uleb128 0x15
 2715 069a B7010000 		.4byte	0x1b7
 2716 069e 03       		.uleb128 0x3
 2717 069f 91       		.byte	0x91
 2718 06a0 E87D     		.sleb128 -280
 2719 06a2 15       		.uleb128 0x15
 2720 06a3 C3010000 		.4byte	0x1c3
 2721 06a7 03       		.uleb128 0x3
 2722 06a8 91       		.byte	0x91
 2723 06a9 E07D     		.sleb128 -288
 2724 06ab 15       		.uleb128 0x15
 2725 06ac CF010000 		.4byte	0x1cf
 2726 06b0 03       		.uleb128 0x3
 2727 06b1 91       		.byte	0x91
 2728 06b2 E47D     		.sleb128 -284
 2729 06b4 00       		.byte	0
 2730 06b5 00       		.byte	0
 2731 06b6 00       		.byte	0
 2732 06b7 00       		.byte	0
 2733              		.section	.debug_abbrev,"",%progbits
 2734              	.Ldebug_abbrev0:
 2735 0000 01       		.uleb128 0x1
 2736 0001 11       		.uleb128 0x11
 2737 0002 01       		.byte	0x1
 2738 0003 25       		.uleb128 0x25
 2739 0004 0E       		.uleb128 0xe
 2740 0005 13       		.uleb128 0x13
 2741 0006 0B       		.uleb128 0xb
 2742 0007 03       		.uleb128 0x3
 2743 0008 0E       		.uleb128 0xe
 2744 0009 1B       		.uleb128 0x1b
 2745 000a 0E       		.uleb128 0xe
 2746 000b 55       		.uleb128 0x55
 2747 000c 17       		.uleb128 0x17
 2748 000d 11       		.uleb128 0x11
 2749 000e 01       		.uleb128 0x1
 2750 000f 10       		.uleb128 0x10
 2751 0010 17       		.uleb128 0x17
 2752 0011 00       		.byte	0
 2753 0012 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 75


 2754 0013 02       		.uleb128 0x2
 2755 0014 24       		.uleb128 0x24
 2756 0015 00       		.byte	0
 2757 0016 0B       		.uleb128 0xb
 2758 0017 0B       		.uleb128 0xb
 2759 0018 3E       		.uleb128 0x3e
 2760 0019 0B       		.uleb128 0xb
 2761 001a 03       		.uleb128 0x3
 2762 001b 0E       		.uleb128 0xe
 2763 001c 00       		.byte	0
 2764 001d 00       		.byte	0
 2765 001e 03       		.uleb128 0x3
 2766 001f 16       		.uleb128 0x16
 2767 0020 00       		.byte	0
 2768 0021 03       		.uleb128 0x3
 2769 0022 0E       		.uleb128 0xe
 2770 0023 3A       		.uleb128 0x3a
 2771 0024 0B       		.uleb128 0xb
 2772 0025 3B       		.uleb128 0x3b
 2773 0026 0B       		.uleb128 0xb
 2774 0027 49       		.uleb128 0x49
 2775 0028 13       		.uleb128 0x13
 2776 0029 00       		.byte	0
 2777 002a 00       		.byte	0
 2778 002b 04       		.uleb128 0x4
 2779 002c 24       		.uleb128 0x24
 2780 002d 00       		.byte	0
 2781 002e 0B       		.uleb128 0xb
 2782 002f 0B       		.uleb128 0xb
 2783 0030 3E       		.uleb128 0x3e
 2784 0031 0B       		.uleb128 0xb
 2785 0032 03       		.uleb128 0x3
 2786 0033 08       		.uleb128 0x8
 2787 0034 00       		.byte	0
 2788 0035 00       		.byte	0
 2789 0036 05       		.uleb128 0x5
 2790 0037 04       		.uleb128 0x4
 2791 0038 01       		.byte	0x1
 2792 0039 0B       		.uleb128 0xb
 2793 003a 0B       		.uleb128 0xb
 2794 003b 3A       		.uleb128 0x3a
 2795 003c 0B       		.uleb128 0xb
 2796 003d 3B       		.uleb128 0x3b
 2797 003e 05       		.uleb128 0x5
 2798 003f 01       		.uleb128 0x1
 2799 0040 13       		.uleb128 0x13
 2800 0041 00       		.byte	0
 2801 0042 00       		.byte	0
 2802 0043 06       		.uleb128 0x6
 2803 0044 28       		.uleb128 0x28
 2804 0045 00       		.byte	0
 2805 0046 03       		.uleb128 0x3
 2806 0047 0E       		.uleb128 0xe
 2807 0048 1C       		.uleb128 0x1c
 2808 0049 0D       		.uleb128 0xd
 2809 004a 00       		.byte	0
 2810 004b 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 76


 2811 004c 07       		.uleb128 0x7
 2812 004d 16       		.uleb128 0x16
 2813 004e 00       		.byte	0
 2814 004f 03       		.uleb128 0x3
 2815 0050 0E       		.uleb128 0xe
 2816 0051 3A       		.uleb128 0x3a
 2817 0052 0B       		.uleb128 0xb
 2818 0053 3B       		.uleb128 0x3b
 2819 0054 05       		.uleb128 0x5
 2820 0055 49       		.uleb128 0x49
 2821 0056 13       		.uleb128 0x13
 2822 0057 00       		.byte	0
 2823 0058 00       		.byte	0
 2824 0059 08       		.uleb128 0x8
 2825 005a 0F       		.uleb128 0xf
 2826 005b 00       		.byte	0
 2827 005c 0B       		.uleb128 0xb
 2828 005d 0B       		.uleb128 0xb
 2829 005e 49       		.uleb128 0x49
 2830 005f 13       		.uleb128 0x13
 2831 0060 00       		.byte	0
 2832 0061 00       		.byte	0
 2833 0062 09       		.uleb128 0x9
 2834 0063 2E       		.uleb128 0x2e
 2835 0064 01       		.byte	0x1
 2836 0065 03       		.uleb128 0x3
 2837 0066 0E       		.uleb128 0xe
 2838 0067 3A       		.uleb128 0x3a
 2839 0068 0B       		.uleb128 0xb
 2840 0069 3B       		.uleb128 0x3b
 2841 006a 05       		.uleb128 0x5
 2842 006b 27       		.uleb128 0x27
 2843 006c 19       		.uleb128 0x19
 2844 006d 49       		.uleb128 0x49
 2845 006e 13       		.uleb128 0x13
 2846 006f 20       		.uleb128 0x20
 2847 0070 0B       		.uleb128 0xb
 2848 0071 01       		.uleb128 0x1
 2849 0072 13       		.uleb128 0x13
 2850 0073 00       		.byte	0
 2851 0074 00       		.byte	0
 2852 0075 0A       		.uleb128 0xa
 2853 0076 05       		.uleb128 0x5
 2854 0077 00       		.byte	0
 2855 0078 03       		.uleb128 0x3
 2856 0079 08       		.uleb128 0x8
 2857 007a 3A       		.uleb128 0x3a
 2858 007b 0B       		.uleb128 0xb
 2859 007c 3B       		.uleb128 0x3b
 2860 007d 05       		.uleb128 0x5
 2861 007e 49       		.uleb128 0x49
 2862 007f 13       		.uleb128 0x13
 2863 0080 00       		.byte	0
 2864 0081 00       		.byte	0
 2865 0082 0B       		.uleb128 0xb
 2866 0083 34       		.uleb128 0x34
 2867 0084 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 77


 2868 0085 03       		.uleb128 0x3
 2869 0086 0E       		.uleb128 0xe
 2870 0087 3A       		.uleb128 0x3a
 2871 0088 0B       		.uleb128 0xb
 2872 0089 3B       		.uleb128 0x3b
 2873 008a 05       		.uleb128 0x5
 2874 008b 49       		.uleb128 0x49
 2875 008c 13       		.uleb128 0x13
 2876 008d 00       		.byte	0
 2877 008e 00       		.byte	0
 2878 008f 0C       		.uleb128 0xc
 2879 0090 34       		.uleb128 0x34
 2880 0091 00       		.byte	0
 2881 0092 03       		.uleb128 0x3
 2882 0093 08       		.uleb128 0x8
 2883 0094 3A       		.uleb128 0x3a
 2884 0095 0B       		.uleb128 0xb
 2885 0096 3B       		.uleb128 0x3b
 2886 0097 05       		.uleb128 0x5
 2887 0098 49       		.uleb128 0x49
 2888 0099 13       		.uleb128 0x13
 2889 009a 00       		.byte	0
 2890 009b 00       		.byte	0
 2891 009c 0D       		.uleb128 0xd
 2892 009d 2E       		.uleb128 0x2e
 2893 009e 01       		.byte	0x1
 2894 009f 3F       		.uleb128 0x3f
 2895 00a0 19       		.uleb128 0x19
 2896 00a1 03       		.uleb128 0x3
 2897 00a2 0E       		.uleb128 0xe
 2898 00a3 3A       		.uleb128 0x3a
 2899 00a4 0B       		.uleb128 0xb
 2900 00a5 3B       		.uleb128 0x3b
 2901 00a6 0B       		.uleb128 0xb
 2902 00a7 27       		.uleb128 0x27
 2903 00a8 19       		.uleb128 0x19
 2904 00a9 49       		.uleb128 0x49
 2905 00aa 13       		.uleb128 0x13
 2906 00ab 11       		.uleb128 0x11
 2907 00ac 01       		.uleb128 0x1
 2908 00ad 12       		.uleb128 0x12
 2909 00ae 06       		.uleb128 0x6
 2910 00af 40       		.uleb128 0x40
 2911 00b0 18       		.uleb128 0x18
 2912 00b1 9642     		.uleb128 0x2116
 2913 00b3 19       		.uleb128 0x19
 2914 00b4 00       		.byte	0
 2915 00b5 00       		.byte	0
 2916 00b6 0E       		.uleb128 0xe
 2917 00b7 05       		.uleb128 0x5
 2918 00b8 00       		.byte	0
 2919 00b9 03       		.uleb128 0x3
 2920 00ba 0E       		.uleb128 0xe
 2921 00bb 3A       		.uleb128 0x3a
 2922 00bc 0B       		.uleb128 0xb
 2923 00bd 3B       		.uleb128 0x3b
 2924 00be 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 78


 2925 00bf 49       		.uleb128 0x49
 2926 00c0 13       		.uleb128 0x13
 2927 00c1 02       		.uleb128 0x2
 2928 00c2 18       		.uleb128 0x18
 2929 00c3 00       		.byte	0
 2930 00c4 00       		.byte	0
 2931 00c5 0F       		.uleb128 0xf
 2932 00c6 34       		.uleb128 0x34
 2933 00c7 00       		.byte	0
 2934 00c8 03       		.uleb128 0x3
 2935 00c9 0E       		.uleb128 0xe
 2936 00ca 3A       		.uleb128 0x3a
 2937 00cb 0B       		.uleb128 0xb
 2938 00cc 3B       		.uleb128 0x3b
 2939 00cd 0B       		.uleb128 0xb
 2940 00ce 49       		.uleb128 0x49
 2941 00cf 13       		.uleb128 0x13
 2942 00d0 02       		.uleb128 0x2
 2943 00d1 18       		.uleb128 0x18
 2944 00d2 00       		.byte	0
 2945 00d3 00       		.byte	0
 2946 00d4 10       		.uleb128 0x10
 2947 00d5 34       		.uleb128 0x34
 2948 00d6 00       		.byte	0
 2949 00d7 03       		.uleb128 0x3
 2950 00d8 08       		.uleb128 0x8
 2951 00d9 3A       		.uleb128 0x3a
 2952 00da 0B       		.uleb128 0xb
 2953 00db 3B       		.uleb128 0x3b
 2954 00dc 0B       		.uleb128 0xb
 2955 00dd 49       		.uleb128 0x49
 2956 00de 13       		.uleb128 0x13
 2957 00df 02       		.uleb128 0x2
 2958 00e0 18       		.uleb128 0x18
 2959 00e1 00       		.byte	0
 2960 00e2 00       		.byte	0
 2961 00e3 11       		.uleb128 0x11
 2962 00e4 1D       		.uleb128 0x1d
 2963 00e5 01       		.byte	0x1
 2964 00e6 31       		.uleb128 0x31
 2965 00e7 13       		.uleb128 0x13
 2966 00e8 11       		.uleb128 0x11
 2967 00e9 01       		.uleb128 0x1
 2968 00ea 12       		.uleb128 0x12
 2969 00eb 06       		.uleb128 0x6
 2970 00ec 58       		.uleb128 0x58
 2971 00ed 0B       		.uleb128 0xb
 2972 00ee 59       		.uleb128 0x59
 2973 00ef 0B       		.uleb128 0xb
 2974 00f0 01       		.uleb128 0x1
 2975 00f1 13       		.uleb128 0x13
 2976 00f2 00       		.byte	0
 2977 00f3 00       		.byte	0
 2978 00f4 12       		.uleb128 0x12
 2979 00f5 05       		.uleb128 0x5
 2980 00f6 00       		.byte	0
 2981 00f7 31       		.uleb128 0x31
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 79


 2982 00f8 13       		.uleb128 0x13
 2983 00f9 02       		.uleb128 0x2
 2984 00fa 18       		.uleb128 0x18
 2985 00fb 00       		.byte	0
 2986 00fc 00       		.byte	0
 2987 00fd 13       		.uleb128 0x13
 2988 00fe 1D       		.uleb128 0x1d
 2989 00ff 01       		.byte	0x1
 2990 0100 31       		.uleb128 0x31
 2991 0101 13       		.uleb128 0x13
 2992 0102 11       		.uleb128 0x11
 2993 0103 01       		.uleb128 0x1
 2994 0104 12       		.uleb128 0x12
 2995 0105 06       		.uleb128 0x6
 2996 0106 58       		.uleb128 0x58
 2997 0107 0B       		.uleb128 0xb
 2998 0108 59       		.uleb128 0x59
 2999 0109 05       		.uleb128 0x5
 3000 010a 01       		.uleb128 0x1
 3001 010b 13       		.uleb128 0x13
 3002 010c 00       		.byte	0
 3003 010d 00       		.byte	0
 3004 010e 14       		.uleb128 0x14
 3005 010f 0B       		.uleb128 0xb
 3006 0110 01       		.byte	0x1
 3007 0111 11       		.uleb128 0x11
 3008 0112 01       		.uleb128 0x1
 3009 0113 12       		.uleb128 0x12
 3010 0114 06       		.uleb128 0x6
 3011 0115 00       		.byte	0
 3012 0116 00       		.byte	0
 3013 0117 15       		.uleb128 0x15
 3014 0118 34       		.uleb128 0x34
 3015 0119 00       		.byte	0
 3016 011a 31       		.uleb128 0x31
 3017 011b 13       		.uleb128 0x13
 3018 011c 02       		.uleb128 0x2
 3019 011d 18       		.uleb128 0x18
 3020 011e 00       		.byte	0
 3021 011f 00       		.byte	0
 3022 0120 16       		.uleb128 0x16
 3023 0121 1D       		.uleb128 0x1d
 3024 0122 01       		.byte	0x1
 3025 0123 31       		.uleb128 0x31
 3026 0124 13       		.uleb128 0x13
 3027 0125 11       		.uleb128 0x11
 3028 0126 01       		.uleb128 0x1
 3029 0127 12       		.uleb128 0x12
 3030 0128 06       		.uleb128 0x6
 3031 0129 58       		.uleb128 0x58
 3032 012a 0B       		.uleb128 0xb
 3033 012b 59       		.uleb128 0x59
 3034 012c 05       		.uleb128 0x5
 3035 012d 00       		.byte	0
 3036 012e 00       		.byte	0
 3037 012f 00       		.byte	0
 3038              		.section	.debug_aranges,"",%progbits
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 80


 3039 0000 1C000000 		.4byte	0x1c
 3040 0004 0200     		.2byte	0x2
 3041 0006 00000000 		.4byte	.Ldebug_info0
 3042 000a 04       		.byte	0x4
 3043 000b 00       		.byte	0
 3044 000c 0000     		.2byte	0
 3045 000e 0000     		.2byte	0
 3046 0010 00000000 		.4byte	.LFB82
 3047 0014 940B0000 		.4byte	.LFE82-.LFB82
 3048 0018 00000000 		.4byte	0
 3049 001c 00000000 		.4byte	0
 3050              		.section	.debug_ranges,"",%progbits
 3051              	.Ldebug_ranges0:
 3052 0000 00000000 		.4byte	.LFB82
 3053 0004 940B0000 		.4byte	.LFE82
 3054 0008 00000000 		.4byte	0
 3055 000c 00000000 		.4byte	0
 3056              		.section	.debug_line,"",%progbits
 3057              	.Ldebug_line0:
 3058 0000 3B030000 		.section	.debug_str,"MS",%progbits,1
 3058      02006001 
 3058      00000201 
 3058      FB0E0D00 
 3058      01010101 
 3059              	.LASF47:
 3060 0000 61636330 		.ascii	"acc0\000"
 3060      00
 3061              	.LASF48:
 3062 0005 61636331 		.ascii	"acc1\000"
 3062      00
 3063              	.LASF49:
 3064 000a 61636332 		.ascii	"acc2\000"
 3064      00
 3065              	.LASF32:
 3066 000f 5F5F5353 		.ascii	"__SSAT\000"
 3066      415400
 3067              	.LASF34:
 3068 0016 6E65674D 		.ascii	"negMin\000"
 3068      696E00
 3069              	.LASF20:
 3070 001d 41524D5F 		.ascii	"ARM_MATH_SUCCESS\000"
 3070      4D415448 
 3070      5F535543 
 3070      43455353 
 3070      00
 3071              	.LASF10:
 3072 002e 6C6F6E67 		.ascii	"long long unsigned int\000"
 3072      206C6F6E 
 3072      6720756E 
 3072      7369676E 
 3072      65642069 
 3073              	.LASF53:
 3074 0045 626C6B43 		.ascii	"blkCnt\000"
 3074      6E7400
 3075              	.LASF40:
 3076 004c 66697273 		.ascii	"firstIndex\000"
 3076      74496E64 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 81


 3076      657800
 3077              	.LASF12:
 3078 0057 696E7431 		.ascii	"int16_t\000"
 3078      365F7400 
 3079              	.LASF9:
 3080 005f 6C6F6E67 		.ascii	"long long int\000"
 3080      206C6F6E 
 3080      6720696E 
 3080      7400
 3081              	.LASF0:
 3082 006d 7369676E 		.ascii	"signed char\000"
 3082      65642063 
 3082      68617200 
 3083              	.LASF42:
 3084 0079 70536372 		.ascii	"pScratch1\000"
 3084      61746368 
 3084      3100
 3085              	.LASF43:
 3086 0083 70536372 		.ascii	"pScratch2\000"
 3086      61746368 
 3086      3200
 3087              	.LASF6:
 3088 008d 6C6F6E67 		.ascii	"long int\000"
 3088      20696E74 
 3088      00
 3089              	.LASF39:
 3090 0096 70447374 		.ascii	"pDst\000"
 3090      00
 3091              	.LASF28:
 3092 009b 7131355F 		.ascii	"q15_t\000"
 3092      7400
 3093              	.LASF17:
 3094 00a1 646F7562 		.ascii	"double\000"
 3094      6C6500
 3095              	.LASF35:
 3096 00a8 70537263 		.ascii	"pSrcA\000"
 3096      4100
 3097              	.LASF37:
 3098 00ae 70537263 		.ascii	"pSrcB\000"
 3098      4200
 3099              	.LASF7:
 3100 00b4 5F5F7569 		.ascii	"__uint32_t\000"
 3100      6E743332 
 3100      5F7400
 3101              	.LASF4:
 3102 00bf 5F5F696E 		.ascii	"__int16_t\000"
 3102      7431365F 
 3102      7400
 3103              	.LASF11:
 3104 00c9 756E7369 		.ascii	"unsigned int\000"
 3104      676E6564 
 3104      20696E74 
 3104      00
 3105              	.LASF55:
 3106 00d6 74617043 		.ascii	"tapCnt\000"
 3106      6E7400
 3107              	.LASF8:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 82


 3108 00dd 6C6F6E67 		.ascii	"long unsigned int\000"
 3108      20756E73 
 3108      69676E65 
 3108      6420696E 
 3108      7400
 3109              	.LASF56:
 3110 00ef 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3110      4320342E 
 3110      392E3320 
 3110      32303135 
 3110      30333033 
 3111 0122 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 3111      20726576 
 3111      6973696F 
 3111      6E203232 
 3111      31323230 
 3112 0155 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 3112      30202D66 
 3112      66756E63 
 3112      74696F6E 
 3112      2D736563 
 3113              	.LASF59:
 3114 0181 61726D5F 		.ascii	"arm_conv_partial_fast_opt_q15\000"
 3114      636F6E76 
 3114      5F706172 
 3114      7469616C 
 3114      5F666173 
 3115              	.LASF3:
 3116 019f 73686F72 		.ascii	"short unsigned int\000"
 3116      7420756E 
 3116      7369676E 
 3116      65642069 
 3116      6E7400
 3117              	.LASF26:
 3118 01b2 41524D5F 		.ascii	"ARM_MATH_TEST_FAILURE\000"
 3118      4D415448 
 3118      5F544553 
 3118      545F4641 
 3118      494C5552 
 3119              	.LASF50:
 3120 01c8 61636333 		.ascii	"acc3\000"
 3120      00
 3121              	.LASF44:
 3122 01cd 704F7574 		.ascii	"pOut\000"
 3122      00
 3123              	.LASF41:
 3124 01d2 6E756D50 		.ascii	"numPoints\000"
 3124      6F696E74 
 3124      7300
 3125              	.LASF15:
 3126 01dc 73697A65 		.ascii	"sizetype\000"
 3126      74797065 
 3126      00
 3127              	.LASF19:
 3128 01e5 6C6F6E67 		.ascii	"long double\000"
 3128      20646F75 
 3128      626C6500 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 83


 3129              	.LASF51:
 3130 01f1 70496E31 		.ascii	"pIn1\000"
 3130      00
 3131              	.LASF52:
 3132 01f6 70496E32 		.ascii	"pIn2\000"
 3132      00
 3133              	.LASF22:
 3134 01fb 41524D5F 		.ascii	"ARM_MATH_LENGTH_ERROR\000"
 3134      4D415448 
 3134      5F4C454E 
 3134      4754485F 
 3134      4552524F 
 3135              	.LASF18:
 3136 0211 666C6F61 		.ascii	"float\000"
 3136      7400
 3137              	.LASF25:
 3138 0217 41524D5F 		.ascii	"ARM_MATH_SINGULAR\000"
 3138      4D415448 
 3138      5F53494E 
 3138      47554C41 
 3138      5200
 3139              	.LASF38:
 3140 0229 73726342 		.ascii	"srcBLen\000"
 3140      4C656E00 
 3141              	.LASF24:
 3142 0231 41524D5F 		.ascii	"ARM_MATH_NANINF\000"
 3142      4D415448 
 3142      5F4E414E 
 3142      494E4600 
 3143              	.LASF13:
 3144 0241 696E7433 		.ascii	"int32_t\000"
 3144      325F7400 
 3145              	.LASF1:
 3146 0249 756E7369 		.ascii	"unsigned char\000"
 3146      676E6564 
 3146      20636861 
 3146      7200
 3147              	.LASF2:
 3148 0257 73686F72 		.ascii	"short int\000"
 3148      7420696E 
 3148      7400
 3149              	.LASF21:
 3150 0261 41524D5F 		.ascii	"ARM_MATH_ARGUMENT_ERROR\000"
 3150      4D415448 
 3150      5F415247 
 3150      554D454E 
 3150      545F4552 
 3151              	.LASF58:
 3152 0279 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 3152      73657273 
 3152      5C666E65 
 3152      7665735C 
 3152      446F6375 
 3153 02a6 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 3153      655F7370 
 3153      6565645F 
 3153      73656E73 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 84


 3153      6F722E63 
 3154              	.LASF57:
 3155 02bf 536F7572 		.ascii	"Source\\FilteringFunctions\\arm_conv_partial_fast_o"
 3155      63655C46 
 3155      696C7465 
 3155      72696E67 
 3155      46756E63 
 3156 02f0 70745F71 		.ascii	"pt_q15.c\000"
 3156      31352E63 
 3156      00
 3157              	.LASF29:
 3158 02f9 7133315F 		.ascii	"q31_t\000"
 3158      7400
 3159              	.LASF36:
 3160 02ff 73726341 		.ascii	"srcALen\000"
 3160      4C656E00 
 3161              	.LASF14:
 3162 0307 75696E74 		.ascii	"uint32_t\000"
 3162      33325F74 
 3162      00
 3163              	.LASF33:
 3164 0310 706F734D 		.ascii	"posMax\000"
 3164      617800
 3165              	.LASF16:
 3166 0317 63686172 		.ascii	"char\000"
 3166      00
 3167              	.LASF23:
 3168 031c 41524D5F 		.ascii	"ARM_MATH_SIZE_MISMATCH\000"
 3168      4D415448 
 3168      5F53495A 
 3168      455F4D49 
 3168      534D4154 
 3169              	.LASF5:
 3170 0333 5F5F696E 		.ascii	"__int32_t\000"
 3170      7433325F 
 3170      7400
 3171              	.LASF30:
 3172 033d 5F5F534D 		.ascii	"__SMLAD\000"
 3172      4C414400 
 3173              	.LASF54:
 3174 0345 73746174 		.ascii	"status\000"
 3174      757300
 3175              	.LASF45:
 3176 034c 70536372 		.ascii	"pScr1\000"
 3176      3100
 3177              	.LASF46:
 3178 0352 70536372 		.ascii	"pScr2\000"
 3178      3200
 3179              	.LASF27:
 3180 0358 61726D5F 		.ascii	"arm_status\000"
 3180      73746174 
 3180      757300
 3181              	.LASF31:
 3182 0363 5F5F534D 		.ascii	"__SMLADX\000"
 3182      4C414458 
 3182      00
 3183              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccP86E9f.s 			page 85


