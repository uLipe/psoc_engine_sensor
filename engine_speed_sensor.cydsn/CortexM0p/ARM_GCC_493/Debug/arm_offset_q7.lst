ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_offset_q7.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_offset_q7,"ax",%progbits
  18              		.align	2
  19              		.global	arm_offset_q7
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_offset_q7, %function
  23              	arm_offset_q7:
  24              	.LFB82:
  25              		.file 1 "Source\\BasicMathFunctions\\arm_offset_q7.c"
   1:Source\BasicMathFunctions/arm_offset_q7.c **** /* ----------------------------------------------------------------------
   2:Source\BasicMathFunctions/arm_offset_q7.c ****  * Project:      CMSIS DSP Library
   3:Source\BasicMathFunctions/arm_offset_q7.c ****  * Title:        arm_offset_q7.c
   4:Source\BasicMathFunctions/arm_offset_q7.c ****  * Description:  Q7 vector offset
   5:Source\BasicMathFunctions/arm_offset_q7.c ****  *
   6:Source\BasicMathFunctions/arm_offset_q7.c ****  * $Date:        27. January 2017
   7:Source\BasicMathFunctions/arm_offset_q7.c ****  * $Revision:    V.1.5.1
   8:Source\BasicMathFunctions/arm_offset_q7.c ****  *
   9:Source\BasicMathFunctions/arm_offset_q7.c ****  * Target Processor: Cortex-M cores
  10:Source\BasicMathFunctions/arm_offset_q7.c ****  * -------------------------------------------------------------------- */
  11:Source\BasicMathFunctions/arm_offset_q7.c **** /*
  12:Source\BasicMathFunctions/arm_offset_q7.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\BasicMathFunctions/arm_offset_q7.c ****  *
  14:Source\BasicMathFunctions/arm_offset_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\BasicMathFunctions/arm_offset_q7.c ****  *
  16:Source\BasicMathFunctions/arm_offset_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\BasicMathFunctions/arm_offset_q7.c ****  * not use this file except in compliance with the License.
  18:Source\BasicMathFunctions/arm_offset_q7.c ****  * You may obtain a copy of the License at
  19:Source\BasicMathFunctions/arm_offset_q7.c ****  *
  20:Source\BasicMathFunctions/arm_offset_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\BasicMathFunctions/arm_offset_q7.c ****  *
  22:Source\BasicMathFunctions/arm_offset_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\BasicMathFunctions/arm_offset_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\BasicMathFunctions/arm_offset_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\BasicMathFunctions/arm_offset_q7.c ****  * See the License for the specific language governing permissions and
  26:Source\BasicMathFunctions/arm_offset_q7.c ****  * limitations under the License.
  27:Source\BasicMathFunctions/arm_offset_q7.c ****  */
  28:Source\BasicMathFunctions/arm_offset_q7.c **** 
  29:Source\BasicMathFunctions/arm_offset_q7.c **** #include "arm_math.h"
  30:Source\BasicMathFunctions/arm_offset_q7.c **** 
  31:Source\BasicMathFunctions/arm_offset_q7.c **** /**
  32:Source\BasicMathFunctions/arm_offset_q7.c ****  * @ingroup groupMath
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 2


  33:Source\BasicMathFunctions/arm_offset_q7.c ****  */
  34:Source\BasicMathFunctions/arm_offset_q7.c **** 
  35:Source\BasicMathFunctions/arm_offset_q7.c **** /**
  36:Source\BasicMathFunctions/arm_offset_q7.c ****  * @addtogroup offset
  37:Source\BasicMathFunctions/arm_offset_q7.c ****  * @{
  38:Source\BasicMathFunctions/arm_offset_q7.c ****  */
  39:Source\BasicMathFunctions/arm_offset_q7.c **** 
  40:Source\BasicMathFunctions/arm_offset_q7.c **** /**
  41:Source\BasicMathFunctions/arm_offset_q7.c ****  * @brief  Adds a constant offset to a Q7 vector.
  42:Source\BasicMathFunctions/arm_offset_q7.c ****  * @param[in]  *pSrc points to the input vector
  43:Source\BasicMathFunctions/arm_offset_q7.c ****  * @param[in]  offset is the offset to be added
  44:Source\BasicMathFunctions/arm_offset_q7.c ****  * @param[out]  *pDst points to the output vector
  45:Source\BasicMathFunctions/arm_offset_q7.c ****  * @param[in]  blockSize number of samples in the vector
  46:Source\BasicMathFunctions/arm_offset_q7.c ****  * @return none.
  47:Source\BasicMathFunctions/arm_offset_q7.c ****  *
  48:Source\BasicMathFunctions/arm_offset_q7.c ****  * <b>Scaling and Overflow Behavior:</b>
  49:Source\BasicMathFunctions/arm_offset_q7.c ****  * \par
  50:Source\BasicMathFunctions/arm_offset_q7.c ****  * The function uses saturating arithmetic.
  51:Source\BasicMathFunctions/arm_offset_q7.c ****  * Results outside of the allowable Q7 range [0x80 0x7F] are saturated.
  52:Source\BasicMathFunctions/arm_offset_q7.c ****  */
  53:Source\BasicMathFunctions/arm_offset_q7.c **** 
  54:Source\BasicMathFunctions/arm_offset_q7.c **** void arm_offset_q7(
  55:Source\BasicMathFunctions/arm_offset_q7.c ****   q7_t * pSrc,
  56:Source\BasicMathFunctions/arm_offset_q7.c ****   q7_t offset,
  57:Source\BasicMathFunctions/arm_offset_q7.c ****   q7_t * pDst,
  58:Source\BasicMathFunctions/arm_offset_q7.c ****   uint32_t blockSize)
  59:Source\BasicMathFunctions/arm_offset_q7.c **** {
  26              		.loc 1 59 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 8AB0     		sub	sp, sp, #40
  33              		.cfi_def_cfa_offset 48
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 7A60     		str	r2, [r7, #4]
  38 000a 3B60     		str	r3, [r7]
  39 000c 0B23     		mov	r3, #11
  40 000e FB18     		add	r3, r7, r3
  41 0010 0A1C     		add	r2, r1, #0
  42 0012 1A70     		strb	r2, [r3]
  60:Source\BasicMathFunctions/arm_offset_q7.c ****   uint32_t blkCnt;                               /* loop counter */
  61:Source\BasicMathFunctions/arm_offset_q7.c **** 
  62:Source\BasicMathFunctions/arm_offset_q7.c **** #if defined (ARM_MATH_DSP)
  63:Source\BasicMathFunctions/arm_offset_q7.c **** 
  64:Source\BasicMathFunctions/arm_offset_q7.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  65:Source\BasicMathFunctions/arm_offset_q7.c ****   q31_t offset_packed;                           /* Offset packed to 32 bit */
  66:Source\BasicMathFunctions/arm_offset_q7.c **** 
  67:Source\BasicMathFunctions/arm_offset_q7.c **** 
  68:Source\BasicMathFunctions/arm_offset_q7.c ****   /*loop Unrolling */
  69:Source\BasicMathFunctions/arm_offset_q7.c ****   blkCnt = blockSize >> 2u;
  70:Source\BasicMathFunctions/arm_offset_q7.c **** 
  71:Source\BasicMathFunctions/arm_offset_q7.c ****   /* Offset is packed to 32 bit in order to use SIMD32 for addition */
  72:Source\BasicMathFunctions/arm_offset_q7.c ****   offset_packed = __PACKq7(offset, offset, offset, offset);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 3


  73:Source\BasicMathFunctions/arm_offset_q7.c **** 
  74:Source\BasicMathFunctions/arm_offset_q7.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  75:Source\BasicMathFunctions/arm_offset_q7.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  76:Source\BasicMathFunctions/arm_offset_q7.c ****   while (blkCnt > 0u)
  77:Source\BasicMathFunctions/arm_offset_q7.c ****   {
  78:Source\BasicMathFunctions/arm_offset_q7.c ****     /* C = A + offset */
  79:Source\BasicMathFunctions/arm_offset_q7.c ****     /* Add offset and then store the results in the destination bufferfor 4 samples at a time. */
  80:Source\BasicMathFunctions/arm_offset_q7.c ****     *__SIMD32(pDst)++ = __QADD8(*__SIMD32(pSrc)++, offset_packed);
  81:Source\BasicMathFunctions/arm_offset_q7.c **** 
  82:Source\BasicMathFunctions/arm_offset_q7.c ****     /* Decrement the loop counter */
  83:Source\BasicMathFunctions/arm_offset_q7.c ****     blkCnt--;
  84:Source\BasicMathFunctions/arm_offset_q7.c ****   }
  85:Source\BasicMathFunctions/arm_offset_q7.c **** 
  86:Source\BasicMathFunctions/arm_offset_q7.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
  87:Source\BasicMathFunctions/arm_offset_q7.c ****    ** No loop unrolling is used. */
  88:Source\BasicMathFunctions/arm_offset_q7.c ****   blkCnt = blockSize % 0x4u;
  89:Source\BasicMathFunctions/arm_offset_q7.c **** 
  90:Source\BasicMathFunctions/arm_offset_q7.c ****   while (blkCnt > 0u)
  91:Source\BasicMathFunctions/arm_offset_q7.c ****   {
  92:Source\BasicMathFunctions/arm_offset_q7.c ****     /* C = A + offset */
  93:Source\BasicMathFunctions/arm_offset_q7.c ****     /* Add offset and then store the result in the destination buffer. */
  94:Source\BasicMathFunctions/arm_offset_q7.c ****     *pDst++ = (q7_t) __SSAT(*pSrc++ + offset, 8);
  95:Source\BasicMathFunctions/arm_offset_q7.c **** 
  96:Source\BasicMathFunctions/arm_offset_q7.c ****     /* Decrement the loop counter */
  97:Source\BasicMathFunctions/arm_offset_q7.c ****     blkCnt--;
  98:Source\BasicMathFunctions/arm_offset_q7.c ****   }
  99:Source\BasicMathFunctions/arm_offset_q7.c **** 
 100:Source\BasicMathFunctions/arm_offset_q7.c **** #else
 101:Source\BasicMathFunctions/arm_offset_q7.c **** 
 102:Source\BasicMathFunctions/arm_offset_q7.c ****   /* Run the below code for Cortex-M0 */
 103:Source\BasicMathFunctions/arm_offset_q7.c **** 
 104:Source\BasicMathFunctions/arm_offset_q7.c ****   /* Initialize blkCnt with number of samples */
 105:Source\BasicMathFunctions/arm_offset_q7.c ****   blkCnt = blockSize;
  43              		.loc 1 105 0
  44 0014 3B68     		ldr	r3, [r7]
  45 0016 7B62     		str	r3, [r7, #36]
 106:Source\BasicMathFunctions/arm_offset_q7.c **** 
 107:Source\BasicMathFunctions/arm_offset_q7.c ****   while (blkCnt > 0u)
  46              		.loc 1 107 0
  47 0018 3DE0     		b	.L2
  48              	.L9:
 108:Source\BasicMathFunctions/arm_offset_q7.c ****   {
 109:Source\BasicMathFunctions/arm_offset_q7.c ****     /* C = A + offset */
 110:Source\BasicMathFunctions/arm_offset_q7.c ****     /* Add offset and then store the result in the destination buffer. */
 111:Source\BasicMathFunctions/arm_offset_q7.c ****     *pDst++ = (q7_t) __SSAT((q15_t) * pSrc++ + offset, 8);
  49              		.loc 1 111 0
  50 001a 7B68     		ldr	r3, [r7, #4]
  51 001c 5A1C     		add	r2, r3, #1
  52 001e 7A60     		str	r2, [r7, #4]
  53 0020 FA68     		ldr	r2, [r7, #12]
  54 0022 511C     		add	r1, r2, #1
  55 0024 F960     		str	r1, [r7, #12]
  56 0026 1278     		ldrb	r2, [r2]
  57 0028 51B2     		sxtb	r1, r2
  58 002a 0B22     		mov	r2, #11
  59 002c BA18     		add	r2, r7, r2
  60 002e 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 4


  61 0030 52B2     		sxtb	r2, r2
  62 0032 8A18     		add	r2, r1, r2
  63 0034 3A62     		str	r2, [r7, #32]
  64 0036 0822     		mov	r2, #8
  65 0038 FA61     		str	r2, [r7, #28]
  66              	.LBB4:
  67              	.LBB5:
  68              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 5


  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 6


 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 7


 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 8


 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 9


 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 10


 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 11


 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 12


 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 13


 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 14


 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 15


 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 16


 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
  69              		.loc 2 699 0
  70 003a 0122     		mov	r2, #1
  71 003c BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  72              		.loc 2 700 0
  73 003e 0022     		mov	r2, #0
  74 0040 7A61     		str	r2, [r7, #20]
  75 0042 05E0     		b	.L3
  76              	.L4:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
  77              		.loc 2 702 0
  78 0044 BA69     		ldr	r2, [r7, #24]
  79 0046 5200     		lsl	r2, r2, #1
  80 0048 BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  81              		.loc 2 700 0
  82 004a 7A69     		ldr	r2, [r7, #20]
  83 004c 0132     		add	r2, r2, #1
  84 004e 7A61     		str	r2, [r7, #20]
  85              	.L3:
  86 0050 FA69     		ldr	r2, [r7, #28]
  87 0052 013A     		sub	r2, r2, #1
  88 0054 7969     		ldr	r1, [r7, #20]
  89 0056 9142     		cmp	r1, r2
  90 0058 F4D3     		bcc	.L4
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
  91              		.loc 2 705 0
  92 005a 3A6A     		ldr	r2, [r7, #32]
  93 005c 002A     		cmp	r2, #0
  94 005e 09DD     		ble	.L5
 706:.\Include/arm_math.h ****     {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 17


 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
  95              		.loc 2 707 0
  96 0060 BA69     		ldr	r2, [r7, #24]
  97 0062 013A     		sub	r2, r2, #1
  98 0064 BA61     		str	r2, [r7, #24]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
  99              		.loc 2 709 0
 100 0066 396A     		ldr	r1, [r7, #32]
 101 0068 BA69     		ldr	r2, [r7, #24]
 102 006a 9142     		cmp	r1, r2
 103 006c 0CDD     		ble	.L10
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 104              		.loc 2 711 0
 105 006e BA69     		ldr	r2, [r7, #24]
 106 0070 3A62     		str	r2, [r7, #32]
 107 0072 0AE0     		b	.L7
 108              	.L5:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 109              		.loc 2 716 0
 110 0074 BA69     		ldr	r2, [r7, #24]
 111 0076 5242     		neg	r2, r2
 112 0078 3A61     		str	r2, [r7, #16]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 113              		.loc 2 718 0
 114 007a 396A     		ldr	r1, [r7, #32]
 115 007c 3A69     		ldr	r2, [r7, #16]
 116 007e 9142     		cmp	r1, r2
 117 0080 03DA     		bge	.L7
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 118              		.loc 2 720 0
 119 0082 3A69     		ldr	r2, [r7, #16]
 120 0084 3A62     		str	r2, [r7, #32]
 121 0086 00E0     		b	.L7
 122              	.L10:
 711:.\Include/arm_math.h ****       }
 123              		.loc 2 711 0
 124 0088 C046     		mov	r8, r8
 125              	.L7:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 126              		.loc 2 723 0
 127 008a 3A6A     		ldr	r2, [r7, #32]
 128              	.LBE5:
 129              	.LBE4:
 130              		.loc 1 111 0
 131 008c D2B2     		uxtb	r2, r2
 132 008e 1A70     		strb	r2, [r3]
 112:Source\BasicMathFunctions/arm_offset_q7.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 18


 113:Source\BasicMathFunctions/arm_offset_q7.c ****     /* Decrement the loop counter */
 114:Source\BasicMathFunctions/arm_offset_q7.c ****     blkCnt--;
 133              		.loc 1 114 0
 134 0090 7B6A     		ldr	r3, [r7, #36]
 135 0092 013B     		sub	r3, r3, #1
 136 0094 7B62     		str	r3, [r7, #36]
 137              	.L2:
 107:Source\BasicMathFunctions/arm_offset_q7.c ****   {
 138              		.loc 1 107 0
 139 0096 7B6A     		ldr	r3, [r7, #36]
 140 0098 002B     		cmp	r3, #0
 141 009a BED1     		bne	.L9
 115:Source\BasicMathFunctions/arm_offset_q7.c ****   }
 116:Source\BasicMathFunctions/arm_offset_q7.c **** 
 117:Source\BasicMathFunctions/arm_offset_q7.c **** #endif /* #if defined (ARM_MATH_DSP) */
 118:Source\BasicMathFunctions/arm_offset_q7.c **** 
 119:Source\BasicMathFunctions/arm_offset_q7.c **** }
 142              		.loc 1 119 0
 143 009c BD46     		mov	sp, r7
 144 009e 0AB0     		add	sp, sp, #40
 145              		@ sp needed
 146 00a0 80BD     		pop	{r7, pc}
 147              		.cfi_endproc
 148              	.LFE82:
 149              		.size	arm_offset_q7, .-arm_offset_q7
 150 00a2 C046     		.text
 151              	.Letext0:
 152              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 153              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 154              		.section	.debug_info,"",%progbits
 155              	.Ldebug_info0:
 156 0000 EF010000 		.4byte	0x1ef
 157 0004 0400     		.2byte	0x4
 158 0006 00000000 		.4byte	.Ldebug_abbrev0
 159 000a 04       		.byte	0x4
 160 000b 01       		.uleb128 0x1
 161 000c 27010000 		.4byte	.LASF31
 162 0010 01       		.byte	0x1
 163 0011 1D000000 		.4byte	.LASF32
 164 0015 47000000 		.4byte	.LASF33
 165 0019 00000000 		.4byte	.Ldebug_ranges0+0
 166 001d 00000000 		.4byte	0
 167 0021 00000000 		.4byte	.Ldebug_line0
 168 0025 02       		.uleb128 0x2
 169 0026 00000000 		.4byte	.LASF2
 170 002a 03       		.byte	0x3
 171 002b 1B       		.byte	0x1b
 172 002c 30000000 		.4byte	0x30
 173 0030 03       		.uleb128 0x3
 174 0031 01       		.byte	0x1
 175 0032 06       		.byte	0x6
 176 0033 3A020000 		.4byte	.LASF0
 177 0037 03       		.uleb128 0x3
 178 0038 01       		.byte	0x1
 179 0039 08       		.byte	0x8
 180 003a A6000000 		.4byte	.LASF1
 181 003e 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 19


 182 003f 09000000 		.4byte	.LASF3
 183 0043 03       		.byte	0x3
 184 0044 29       		.byte	0x29
 185 0045 49000000 		.4byte	0x49
 186 0049 03       		.uleb128 0x3
 187 004a 02       		.byte	0x2
 188 004b 05       		.byte	0x5
 189 004c FD010000 		.4byte	.LASF4
 190 0050 03       		.uleb128 0x3
 191 0051 02       		.byte	0x2
 192 0052 07       		.byte	0x7
 193 0053 CD000000 		.4byte	.LASF5
 194 0057 02       		.uleb128 0x2
 195 0058 13000000 		.4byte	.LASF6
 196 005c 03       		.byte	0x3
 197 005d 3F       		.byte	0x3f
 198 005e 62000000 		.4byte	0x62
 199 0062 03       		.uleb128 0x3
 200 0063 04       		.byte	0x4
 201 0064 05       		.byte	0x5
 202 0065 17020000 		.4byte	.LASF7
 203 0069 02       		.uleb128 0x2
 204 006a F3000000 		.4byte	.LASF8
 205 006e 03       		.byte	0x3
 206 006f 41       		.byte	0x41
 207 0070 74000000 		.4byte	0x74
 208 0074 03       		.uleb128 0x3
 209 0075 04       		.byte	0x4
 210 0076 07       		.byte	0x7
 211 0077 BB000000 		.4byte	.LASF9
 212 007b 03       		.uleb128 0x3
 213 007c 08       		.byte	0x8
 214 007d 05       		.byte	0x5
 215 007e D9010000 		.4byte	.LASF10
 216 0082 03       		.uleb128 0x3
 217 0083 08       		.byte	0x8
 218 0084 07       		.byte	0x7
 219 0085 10010000 		.4byte	.LASF11
 220 0089 04       		.uleb128 0x4
 221 008a 04       		.byte	0x4
 222 008b 05       		.byte	0x5
 223 008c 696E7400 		.ascii	"int\000"
 224 0090 03       		.uleb128 0x3
 225 0091 04       		.byte	0x4
 226 0092 07       		.byte	0x7
 227 0093 03010000 		.4byte	.LASF12
 228 0097 02       		.uleb128 0x2
 229 0098 8D000000 		.4byte	.LASF13
 230 009c 04       		.byte	0x4
 231 009d 14       		.byte	0x14
 232 009e 25000000 		.4byte	0x25
 233 00a2 02       		.uleb128 0x2
 234 00a3 B9010000 		.4byte	.LASF14
 235 00a7 04       		.byte	0x4
 236 00a8 20       		.byte	0x20
 237 00a9 3E000000 		.4byte	0x3e
 238 00ad 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 20


 239 00ae C8010000 		.4byte	.LASF15
 240 00b2 04       		.byte	0x4
 241 00b3 2C       		.byte	0x2c
 242 00b4 57000000 		.4byte	0x57
 243 00b8 02       		.uleb128 0x2
 244 00b9 0E020000 		.4byte	.LASF16
 245 00bd 04       		.byte	0x4
 246 00be 2D       		.byte	0x2d
 247 00bf 69000000 		.4byte	0x69
 248 00c3 03       		.uleb128 0x3
 249 00c4 04       		.byte	0x4
 250 00c5 07       		.byte	0x7
 251 00c6 D0010000 		.4byte	.LASF17
 252 00ca 03       		.uleb128 0x3
 253 00cb 01       		.byte	0x1
 254 00cc 08       		.byte	0x8
 255 00cd F1010000 		.4byte	.LASF18
 256 00d1 03       		.uleb128 0x3
 257 00d2 08       		.byte	0x8
 258 00d3 04       		.byte	0x4
 259 00d4 EC000000 		.4byte	.LASF19
 260 00d8 03       		.uleb128 0x3
 261 00d9 04       		.byte	0x4
 262 00da 04       		.byte	0x4
 263 00db 9A000000 		.4byte	.LASF20
 264 00df 03       		.uleb128 0x3
 265 00e0 08       		.byte	0x8
 266 00e1 04       		.byte	0x4
 267 00e2 2E020000 		.4byte	.LASF21
 268 00e6 05       		.uleb128 0x5
 269 00e7 FE000000 		.4byte	.LASF22
 270 00eb 02       		.byte	0x2
 271 00ec 9101     		.2byte	0x191
 272 00ee 97000000 		.4byte	0x97
 273 00f2 05       		.uleb128 0x5
 274 00f3 94000000 		.4byte	.LASF23
 275 00f7 02       		.byte	0x2
 276 00f8 9601     		.2byte	0x196
 277 00fa A2000000 		.4byte	0xa2
 278 00fe 05       		.uleb128 0x5
 279 00ff A0000000 		.4byte	.LASF24
 280 0103 02       		.byte	0x2
 281 0104 9B01     		.2byte	0x19b
 282 0106 AD000000 		.4byte	0xad
 283 010a 06       		.uleb128 0x6
 284 010b 04       		.byte	0x4
 285 010c E6000000 		.4byte	0xe6
 286 0110 07       		.uleb128 0x7
 287 0111 C1010000 		.4byte	.LASF34
 288 0115 02       		.byte	0x2
 289 0116 B402     		.2byte	0x2b4
 290 0118 FE000000 		.4byte	0xfe
 291 011c 03       		.byte	0x3
 292 011d 58010000 		.4byte	0x158
 293 0121 08       		.uleb128 0x8
 294 0122 7800     		.ascii	"x\000"
 295 0124 02       		.byte	0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 21


 296 0125 B502     		.2byte	0x2b5
 297 0127 FE000000 		.4byte	0xfe
 298 012b 08       		.uleb128 0x8
 299 012c 7900     		.ascii	"y\000"
 300 012e 02       		.byte	0x2
 301 012f B602     		.2byte	0x2b6
 302 0131 B8000000 		.4byte	0xb8
 303 0135 09       		.uleb128 0x9
 304 0136 07020000 		.4byte	.LASF25
 305 013a 02       		.byte	0x2
 306 013b B802     		.2byte	0x2b8
 307 013d AD000000 		.4byte	0xad
 308 0141 09       		.uleb128 0x9
 309 0142 E5000000 		.4byte	.LASF26
 310 0146 02       		.byte	0x2
 311 0147 B802     		.2byte	0x2b8
 312 0149 AD000000 		.4byte	0xad
 313 014d 0A       		.uleb128 0xa
 314 014e 6900     		.ascii	"i\000"
 315 0150 02       		.byte	0x2
 316 0151 B902     		.2byte	0x2b9
 317 0153 B8000000 		.4byte	0xb8
 318 0157 00       		.byte	0
 319 0158 0B       		.uleb128 0xb
 320 0159 20020000 		.4byte	.LASF35
 321 015d 01       		.byte	0x1
 322 015e 36       		.byte	0x36
 323 015f 00000000 		.4byte	.LFB82
 324 0163 A2000000 		.4byte	.LFE82-.LFB82
 325 0167 01       		.uleb128 0x1
 326 0168 9C       		.byte	0x9c
 327 0169 0C       		.uleb128 0xc
 328 016a 46020000 		.4byte	.LASF27
 329 016e 01       		.byte	0x1
 330 016f 37       		.byte	0x37
 331 0170 0A010000 		.4byte	0x10a
 332 0174 02       		.uleb128 0x2
 333 0175 91       		.byte	0x91
 334 0176 5C       		.sleb128 -36
 335 0177 0C       		.uleb128 0xc
 336 0178 F6010000 		.4byte	.LASF28
 337 017c 01       		.byte	0x1
 338 017d 38       		.byte	0x38
 339 017e E6000000 		.4byte	0xe6
 340 0182 02       		.uleb128 0x2
 341 0183 91       		.byte	0x91
 342 0184 5B       		.sleb128 -37
 343 0185 0C       		.uleb128 0xc
 344 0186 E0000000 		.4byte	.LASF29
 345 018a 01       		.byte	0x1
 346 018b 39       		.byte	0x39
 347 018c 0A010000 		.4byte	0x10a
 348 0190 02       		.uleb128 0x2
 349 0191 91       		.byte	0x91
 350 0192 54       		.sleb128 -44
 351 0193 0C       		.uleb128 0xc
 352 0194 E7010000 		.4byte	.LASF30
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 22


 353 0198 01       		.byte	0x1
 354 0199 3A       		.byte	0x3a
 355 019a B8000000 		.4byte	0xb8
 356 019e 02       		.uleb128 0x2
 357 019f 91       		.byte	0x91
 358 01a0 50       		.sleb128 -48
 359 01a1 0D       		.uleb128 0xd
 360 01a2 B4000000 		.4byte	.LASF36
 361 01a6 01       		.byte	0x1
 362 01a7 3C       		.byte	0x3c
 363 01a8 B8000000 		.4byte	0xb8
 364 01ac 02       		.uleb128 0x2
 365 01ad 91       		.byte	0x91
 366 01ae 74       		.sleb128 -12
 367 01af 0E       		.uleb128 0xe
 368 01b0 10010000 		.4byte	0x110
 369 01b4 3A000000 		.4byte	.LBB4
 370 01b8 52000000 		.4byte	.LBE4-.LBB4
 371 01bc 01       		.byte	0x1
 372 01bd 6F       		.byte	0x6f
 373 01be 0F       		.uleb128 0xf
 374 01bf 2B010000 		.4byte	0x12b
 375 01c3 02       		.uleb128 0x2
 376 01c4 91       		.byte	0x91
 377 01c5 6C       		.sleb128 -20
 378 01c6 0F       		.uleb128 0xf
 379 01c7 21010000 		.4byte	0x121
 380 01cb 02       		.uleb128 0x2
 381 01cc 91       		.byte	0x91
 382 01cd 70       		.sleb128 -16
 383 01ce 10       		.uleb128 0x10
 384 01cf 3A000000 		.4byte	.LBB5
 385 01d3 52000000 		.4byte	.LBE5-.LBB5
 386 01d7 11       		.uleb128 0x11
 387 01d8 35010000 		.4byte	0x135
 388 01dc 02       		.uleb128 0x2
 389 01dd 91       		.byte	0x91
 390 01de 68       		.sleb128 -24
 391 01df 11       		.uleb128 0x11
 392 01e0 41010000 		.4byte	0x141
 393 01e4 02       		.uleb128 0x2
 394 01e5 91       		.byte	0x91
 395 01e6 60       		.sleb128 -32
 396 01e7 11       		.uleb128 0x11
 397 01e8 4D010000 		.4byte	0x14d
 398 01ec 02       		.uleb128 0x2
 399 01ed 91       		.byte	0x91
 400 01ee 64       		.sleb128 -28
 401 01ef 00       		.byte	0
 402 01f0 00       		.byte	0
 403 01f1 00       		.byte	0
 404 01f2 00       		.byte	0
 405              		.section	.debug_abbrev,"",%progbits
 406              	.Ldebug_abbrev0:
 407 0000 01       		.uleb128 0x1
 408 0001 11       		.uleb128 0x11
 409 0002 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 23


 410 0003 25       		.uleb128 0x25
 411 0004 0E       		.uleb128 0xe
 412 0005 13       		.uleb128 0x13
 413 0006 0B       		.uleb128 0xb
 414 0007 03       		.uleb128 0x3
 415 0008 0E       		.uleb128 0xe
 416 0009 1B       		.uleb128 0x1b
 417 000a 0E       		.uleb128 0xe
 418 000b 55       		.uleb128 0x55
 419 000c 17       		.uleb128 0x17
 420 000d 11       		.uleb128 0x11
 421 000e 01       		.uleb128 0x1
 422 000f 10       		.uleb128 0x10
 423 0010 17       		.uleb128 0x17
 424 0011 00       		.byte	0
 425 0012 00       		.byte	0
 426 0013 02       		.uleb128 0x2
 427 0014 16       		.uleb128 0x16
 428 0015 00       		.byte	0
 429 0016 03       		.uleb128 0x3
 430 0017 0E       		.uleb128 0xe
 431 0018 3A       		.uleb128 0x3a
 432 0019 0B       		.uleb128 0xb
 433 001a 3B       		.uleb128 0x3b
 434 001b 0B       		.uleb128 0xb
 435 001c 49       		.uleb128 0x49
 436 001d 13       		.uleb128 0x13
 437 001e 00       		.byte	0
 438 001f 00       		.byte	0
 439 0020 03       		.uleb128 0x3
 440 0021 24       		.uleb128 0x24
 441 0022 00       		.byte	0
 442 0023 0B       		.uleb128 0xb
 443 0024 0B       		.uleb128 0xb
 444 0025 3E       		.uleb128 0x3e
 445 0026 0B       		.uleb128 0xb
 446 0027 03       		.uleb128 0x3
 447 0028 0E       		.uleb128 0xe
 448 0029 00       		.byte	0
 449 002a 00       		.byte	0
 450 002b 04       		.uleb128 0x4
 451 002c 24       		.uleb128 0x24
 452 002d 00       		.byte	0
 453 002e 0B       		.uleb128 0xb
 454 002f 0B       		.uleb128 0xb
 455 0030 3E       		.uleb128 0x3e
 456 0031 0B       		.uleb128 0xb
 457 0032 03       		.uleb128 0x3
 458 0033 08       		.uleb128 0x8
 459 0034 00       		.byte	0
 460 0035 00       		.byte	0
 461 0036 05       		.uleb128 0x5
 462 0037 16       		.uleb128 0x16
 463 0038 00       		.byte	0
 464 0039 03       		.uleb128 0x3
 465 003a 0E       		.uleb128 0xe
 466 003b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 24


 467 003c 0B       		.uleb128 0xb
 468 003d 3B       		.uleb128 0x3b
 469 003e 05       		.uleb128 0x5
 470 003f 49       		.uleb128 0x49
 471 0040 13       		.uleb128 0x13
 472 0041 00       		.byte	0
 473 0042 00       		.byte	0
 474 0043 06       		.uleb128 0x6
 475 0044 0F       		.uleb128 0xf
 476 0045 00       		.byte	0
 477 0046 0B       		.uleb128 0xb
 478 0047 0B       		.uleb128 0xb
 479 0048 49       		.uleb128 0x49
 480 0049 13       		.uleb128 0x13
 481 004a 00       		.byte	0
 482 004b 00       		.byte	0
 483 004c 07       		.uleb128 0x7
 484 004d 2E       		.uleb128 0x2e
 485 004e 01       		.byte	0x1
 486 004f 03       		.uleb128 0x3
 487 0050 0E       		.uleb128 0xe
 488 0051 3A       		.uleb128 0x3a
 489 0052 0B       		.uleb128 0xb
 490 0053 3B       		.uleb128 0x3b
 491 0054 05       		.uleb128 0x5
 492 0055 27       		.uleb128 0x27
 493 0056 19       		.uleb128 0x19
 494 0057 49       		.uleb128 0x49
 495 0058 13       		.uleb128 0x13
 496 0059 20       		.uleb128 0x20
 497 005a 0B       		.uleb128 0xb
 498 005b 01       		.uleb128 0x1
 499 005c 13       		.uleb128 0x13
 500 005d 00       		.byte	0
 501 005e 00       		.byte	0
 502 005f 08       		.uleb128 0x8
 503 0060 05       		.uleb128 0x5
 504 0061 00       		.byte	0
 505 0062 03       		.uleb128 0x3
 506 0063 08       		.uleb128 0x8
 507 0064 3A       		.uleb128 0x3a
 508 0065 0B       		.uleb128 0xb
 509 0066 3B       		.uleb128 0x3b
 510 0067 05       		.uleb128 0x5
 511 0068 49       		.uleb128 0x49
 512 0069 13       		.uleb128 0x13
 513 006a 00       		.byte	0
 514 006b 00       		.byte	0
 515 006c 09       		.uleb128 0x9
 516 006d 34       		.uleb128 0x34
 517 006e 00       		.byte	0
 518 006f 03       		.uleb128 0x3
 519 0070 0E       		.uleb128 0xe
 520 0071 3A       		.uleb128 0x3a
 521 0072 0B       		.uleb128 0xb
 522 0073 3B       		.uleb128 0x3b
 523 0074 05       		.uleb128 0x5
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 25


 524 0075 49       		.uleb128 0x49
 525 0076 13       		.uleb128 0x13
 526 0077 00       		.byte	0
 527 0078 00       		.byte	0
 528 0079 0A       		.uleb128 0xa
 529 007a 34       		.uleb128 0x34
 530 007b 00       		.byte	0
 531 007c 03       		.uleb128 0x3
 532 007d 08       		.uleb128 0x8
 533 007e 3A       		.uleb128 0x3a
 534 007f 0B       		.uleb128 0xb
 535 0080 3B       		.uleb128 0x3b
 536 0081 05       		.uleb128 0x5
 537 0082 49       		.uleb128 0x49
 538 0083 13       		.uleb128 0x13
 539 0084 00       		.byte	0
 540 0085 00       		.byte	0
 541 0086 0B       		.uleb128 0xb
 542 0087 2E       		.uleb128 0x2e
 543 0088 01       		.byte	0x1
 544 0089 3F       		.uleb128 0x3f
 545 008a 19       		.uleb128 0x19
 546 008b 03       		.uleb128 0x3
 547 008c 0E       		.uleb128 0xe
 548 008d 3A       		.uleb128 0x3a
 549 008e 0B       		.uleb128 0xb
 550 008f 3B       		.uleb128 0x3b
 551 0090 0B       		.uleb128 0xb
 552 0091 27       		.uleb128 0x27
 553 0092 19       		.uleb128 0x19
 554 0093 11       		.uleb128 0x11
 555 0094 01       		.uleb128 0x1
 556 0095 12       		.uleb128 0x12
 557 0096 06       		.uleb128 0x6
 558 0097 40       		.uleb128 0x40
 559 0098 18       		.uleb128 0x18
 560 0099 9742     		.uleb128 0x2117
 561 009b 19       		.uleb128 0x19
 562 009c 00       		.byte	0
 563 009d 00       		.byte	0
 564 009e 0C       		.uleb128 0xc
 565 009f 05       		.uleb128 0x5
 566 00a0 00       		.byte	0
 567 00a1 03       		.uleb128 0x3
 568 00a2 0E       		.uleb128 0xe
 569 00a3 3A       		.uleb128 0x3a
 570 00a4 0B       		.uleb128 0xb
 571 00a5 3B       		.uleb128 0x3b
 572 00a6 0B       		.uleb128 0xb
 573 00a7 49       		.uleb128 0x49
 574 00a8 13       		.uleb128 0x13
 575 00a9 02       		.uleb128 0x2
 576 00aa 18       		.uleb128 0x18
 577 00ab 00       		.byte	0
 578 00ac 00       		.byte	0
 579 00ad 0D       		.uleb128 0xd
 580 00ae 34       		.uleb128 0x34
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 26


 581 00af 00       		.byte	0
 582 00b0 03       		.uleb128 0x3
 583 00b1 0E       		.uleb128 0xe
 584 00b2 3A       		.uleb128 0x3a
 585 00b3 0B       		.uleb128 0xb
 586 00b4 3B       		.uleb128 0x3b
 587 00b5 0B       		.uleb128 0xb
 588 00b6 49       		.uleb128 0x49
 589 00b7 13       		.uleb128 0x13
 590 00b8 02       		.uleb128 0x2
 591 00b9 18       		.uleb128 0x18
 592 00ba 00       		.byte	0
 593 00bb 00       		.byte	0
 594 00bc 0E       		.uleb128 0xe
 595 00bd 1D       		.uleb128 0x1d
 596 00be 01       		.byte	0x1
 597 00bf 31       		.uleb128 0x31
 598 00c0 13       		.uleb128 0x13
 599 00c1 11       		.uleb128 0x11
 600 00c2 01       		.uleb128 0x1
 601 00c3 12       		.uleb128 0x12
 602 00c4 06       		.uleb128 0x6
 603 00c5 58       		.uleb128 0x58
 604 00c6 0B       		.uleb128 0xb
 605 00c7 59       		.uleb128 0x59
 606 00c8 0B       		.uleb128 0xb
 607 00c9 00       		.byte	0
 608 00ca 00       		.byte	0
 609 00cb 0F       		.uleb128 0xf
 610 00cc 05       		.uleb128 0x5
 611 00cd 00       		.byte	0
 612 00ce 31       		.uleb128 0x31
 613 00cf 13       		.uleb128 0x13
 614 00d0 02       		.uleb128 0x2
 615 00d1 18       		.uleb128 0x18
 616 00d2 00       		.byte	0
 617 00d3 00       		.byte	0
 618 00d4 10       		.uleb128 0x10
 619 00d5 0B       		.uleb128 0xb
 620 00d6 01       		.byte	0x1
 621 00d7 11       		.uleb128 0x11
 622 00d8 01       		.uleb128 0x1
 623 00d9 12       		.uleb128 0x12
 624 00da 06       		.uleb128 0x6
 625 00db 00       		.byte	0
 626 00dc 00       		.byte	0
 627 00dd 11       		.uleb128 0x11
 628 00de 34       		.uleb128 0x34
 629 00df 00       		.byte	0
 630 00e0 31       		.uleb128 0x31
 631 00e1 13       		.uleb128 0x13
 632 00e2 02       		.uleb128 0x2
 633 00e3 18       		.uleb128 0x18
 634 00e4 00       		.byte	0
 635 00e5 00       		.byte	0
 636 00e6 00       		.byte	0
 637              		.section	.debug_aranges,"",%progbits
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 27


 638 0000 1C000000 		.4byte	0x1c
 639 0004 0200     		.2byte	0x2
 640 0006 00000000 		.4byte	.Ldebug_info0
 641 000a 04       		.byte	0x4
 642 000b 00       		.byte	0
 643 000c 0000     		.2byte	0
 644 000e 0000     		.2byte	0
 645 0010 00000000 		.4byte	.LFB82
 646 0014 A2000000 		.4byte	.LFE82-.LFB82
 647 0018 00000000 		.4byte	0
 648 001c 00000000 		.4byte	0
 649              		.section	.debug_ranges,"",%progbits
 650              	.Ldebug_ranges0:
 651 0000 00000000 		.4byte	.LFB82
 652 0004 A2000000 		.4byte	.LFE82
 653 0008 00000000 		.4byte	0
 654 000c 00000000 		.4byte	0
 655              		.section	.debug_line,"",%progbits
 656              	.Ldebug_line0:
 657 0000 8D010000 		.section	.debug_str,"MS",%progbits,1
 657      02005001 
 657      00000201 
 657      FB0E0D00 
 657      01010101 
 658              	.LASF2:
 659 0000 5F5F696E 		.ascii	"__int8_t\000"
 659      74385F74 
 659      00
 660              	.LASF3:
 661 0009 5F5F696E 		.ascii	"__int16_t\000"
 661      7431365F 
 661      7400
 662              	.LASF6:
 663 0013 5F5F696E 		.ascii	"__int32_t\000"
 663      7433325F 
 663      7400
 664              	.LASF32:
 665 001d 536F7572 		.ascii	"Source\\BasicMathFunctions\\arm_offset_q7.c\000"
 665      63655C42 
 665      61736963 
 665      4D617468 
 665      46756E63 
 666              	.LASF33:
 667 0047 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 667      73657273 
 667      5C666E65 
 667      7665735C 
 667      446F6375 
 668 0074 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 668      655F7370 
 668      6565645F 
 668      73656E73 
 668      6F722E63 
 669              	.LASF13:
 670 008d 696E7438 		.ascii	"int8_t\000"
 670      5F7400
 671              	.LASF23:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 28


 672 0094 7131355F 		.ascii	"q15_t\000"
 672      7400
 673              	.LASF20:
 674 009a 666C6F61 		.ascii	"float\000"
 674      7400
 675              	.LASF24:
 676 00a0 7133315F 		.ascii	"q31_t\000"
 676      7400
 677              	.LASF1:
 678 00a6 756E7369 		.ascii	"unsigned char\000"
 678      676E6564 
 678      20636861 
 678      7200
 679              	.LASF36:
 680 00b4 626C6B43 		.ascii	"blkCnt\000"
 680      6E7400
 681              	.LASF9:
 682 00bb 6C6F6E67 		.ascii	"long unsigned int\000"
 682      20756E73 
 682      69676E65 
 682      6420696E 
 682      7400
 683              	.LASF5:
 684 00cd 73686F72 		.ascii	"short unsigned int\000"
 684      7420756E 
 684      7369676E 
 684      65642069 
 684      6E7400
 685              	.LASF29:
 686 00e0 70447374 		.ascii	"pDst\000"
 686      00
 687              	.LASF26:
 688 00e5 6E65674D 		.ascii	"negMin\000"
 688      696E00
 689              	.LASF19:
 690 00ec 646F7562 		.ascii	"double\000"
 690      6C6500
 691              	.LASF8:
 692 00f3 5F5F7569 		.ascii	"__uint32_t\000"
 692      6E743332 
 692      5F7400
 693              	.LASF22:
 694 00fe 71375F74 		.ascii	"q7_t\000"
 694      00
 695              	.LASF12:
 696 0103 756E7369 		.ascii	"unsigned int\000"
 696      676E6564 
 696      20696E74 
 696      00
 697              	.LASF11:
 698 0110 6C6F6E67 		.ascii	"long long unsigned int\000"
 698      206C6F6E 
 698      6720756E 
 698      7369676E 
 698      65642069 
 699              	.LASF31:
 700 0127 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 29


 700      4320342E 
 700      392E3320 
 700      32303135 
 700      30333033 
 701 015a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 701      20726576 
 701      6973696F 
 701      6E203232 
 701      31323230 
 702 018d 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 702      30202D66 
 702      66756E63 
 702      74696F6E 
 702      2D736563 
 703              	.LASF14:
 704 01b9 696E7431 		.ascii	"int16_t\000"
 704      365F7400 
 705              	.LASF34:
 706 01c1 5F5F5353 		.ascii	"__SSAT\000"
 706      415400
 707              	.LASF15:
 708 01c8 696E7433 		.ascii	"int32_t\000"
 708      325F7400 
 709              	.LASF17:
 710 01d0 73697A65 		.ascii	"sizetype\000"
 710      74797065 
 710      00
 711              	.LASF10:
 712 01d9 6C6F6E67 		.ascii	"long long int\000"
 712      206C6F6E 
 712      6720696E 
 712      7400
 713              	.LASF30:
 714 01e7 626C6F63 		.ascii	"blockSize\000"
 714      6B53697A 
 714      6500
 715              	.LASF18:
 716 01f1 63686172 		.ascii	"char\000"
 716      00
 717              	.LASF28:
 718 01f6 6F666673 		.ascii	"offset\000"
 718      657400
 719              	.LASF4:
 720 01fd 73686F72 		.ascii	"short int\000"
 720      7420696E 
 720      7400
 721              	.LASF25:
 722 0207 706F734D 		.ascii	"posMax\000"
 722      617800
 723              	.LASF16:
 724 020e 75696E74 		.ascii	"uint32_t\000"
 724      33325F74 
 724      00
 725              	.LASF7:
 726 0217 6C6F6E67 		.ascii	"long int\000"
 726      20696E74 
 726      00
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFJAJGj.s 			page 30


 727              	.LASF35:
 728 0220 61726D5F 		.ascii	"arm_offset_q7\000"
 728      6F666673 
 728      65745F71 
 728      3700
 729              	.LASF21:
 730 022e 6C6F6E67 		.ascii	"long double\000"
 730      20646F75 
 730      626C6500 
 731              	.LASF0:
 732 023a 7369676E 		.ascii	"signed char\000"
 732      65642063 
 732      68617200 
 733              	.LASF27:
 734 0246 70537263 		.ascii	"pSrc\000"
 734      00
 735              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
