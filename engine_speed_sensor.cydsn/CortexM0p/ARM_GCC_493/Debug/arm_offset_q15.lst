ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_offset_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_offset_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_offset_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_offset_q15, %function
  23              	arm_offset_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\BasicMathFunctions\\arm_offset_q15.c"
   1:Source\BasicMathFunctions/arm_offset_q15.c **** /* ----------------------------------------------------------------------
   2:Source\BasicMathFunctions/arm_offset_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\BasicMathFunctions/arm_offset_q15.c ****  * Title:        arm_offset_q15.c
   4:Source\BasicMathFunctions/arm_offset_q15.c ****  * Description:  Q15 vector offset
   5:Source\BasicMathFunctions/arm_offset_q15.c ****  *
   6:Source\BasicMathFunctions/arm_offset_q15.c ****  * $Date:        27. January 2017
   7:Source\BasicMathFunctions/arm_offset_q15.c ****  * $Revision:    V.1.5.1
   8:Source\BasicMathFunctions/arm_offset_q15.c ****  *
   9:Source\BasicMathFunctions/arm_offset_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\BasicMathFunctions/arm_offset_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\BasicMathFunctions/arm_offset_q15.c **** /*
  12:Source\BasicMathFunctions/arm_offset_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\BasicMathFunctions/arm_offset_q15.c ****  *
  14:Source\BasicMathFunctions/arm_offset_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\BasicMathFunctions/arm_offset_q15.c ****  *
  16:Source\BasicMathFunctions/arm_offset_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\BasicMathFunctions/arm_offset_q15.c ****  * not use this file except in compliance with the License.
  18:Source\BasicMathFunctions/arm_offset_q15.c ****  * You may obtain a copy of the License at
  19:Source\BasicMathFunctions/arm_offset_q15.c ****  *
  20:Source\BasicMathFunctions/arm_offset_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\BasicMathFunctions/arm_offset_q15.c ****  *
  22:Source\BasicMathFunctions/arm_offset_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\BasicMathFunctions/arm_offset_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\BasicMathFunctions/arm_offset_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\BasicMathFunctions/arm_offset_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\BasicMathFunctions/arm_offset_q15.c ****  * limitations under the License.
  27:Source\BasicMathFunctions/arm_offset_q15.c ****  */
  28:Source\BasicMathFunctions/arm_offset_q15.c **** 
  29:Source\BasicMathFunctions/arm_offset_q15.c **** #include "arm_math.h"
  30:Source\BasicMathFunctions/arm_offset_q15.c **** 
  31:Source\BasicMathFunctions/arm_offset_q15.c **** /**
  32:Source\BasicMathFunctions/arm_offset_q15.c ****  * @ingroup groupMath
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 2


  33:Source\BasicMathFunctions/arm_offset_q15.c ****  */
  34:Source\BasicMathFunctions/arm_offset_q15.c **** 
  35:Source\BasicMathFunctions/arm_offset_q15.c **** /**
  36:Source\BasicMathFunctions/arm_offset_q15.c ****  * @addtogroup offset
  37:Source\BasicMathFunctions/arm_offset_q15.c ****  * @{
  38:Source\BasicMathFunctions/arm_offset_q15.c ****  */
  39:Source\BasicMathFunctions/arm_offset_q15.c **** 
  40:Source\BasicMathFunctions/arm_offset_q15.c **** /**
  41:Source\BasicMathFunctions/arm_offset_q15.c ****  * @brief  Adds a constant offset to a Q15 vector.
  42:Source\BasicMathFunctions/arm_offset_q15.c ****  * @param[in]  *pSrc points to the input vector
  43:Source\BasicMathFunctions/arm_offset_q15.c ****  * @param[in]  offset is the offset to be added
  44:Source\BasicMathFunctions/arm_offset_q15.c ****  * @param[out]  *pDst points to the output vector
  45:Source\BasicMathFunctions/arm_offset_q15.c ****  * @param[in]  blockSize number of samples in the vector
  46:Source\BasicMathFunctions/arm_offset_q15.c ****  * @return none.
  47:Source\BasicMathFunctions/arm_offset_q15.c ****  *
  48:Source\BasicMathFunctions/arm_offset_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  49:Source\BasicMathFunctions/arm_offset_q15.c ****  * \par
  50:Source\BasicMathFunctions/arm_offset_q15.c ****  * The function uses saturating arithmetic.
  51:Source\BasicMathFunctions/arm_offset_q15.c ****  * Results outside of the allowable Q15 range [0x8000 0x7FFF] are saturated.
  52:Source\BasicMathFunctions/arm_offset_q15.c ****  */
  53:Source\BasicMathFunctions/arm_offset_q15.c **** 
  54:Source\BasicMathFunctions/arm_offset_q15.c **** void arm_offset_q15(
  55:Source\BasicMathFunctions/arm_offset_q15.c ****   q15_t * pSrc,
  56:Source\BasicMathFunctions/arm_offset_q15.c ****   q15_t offset,
  57:Source\BasicMathFunctions/arm_offset_q15.c ****   q15_t * pDst,
  58:Source\BasicMathFunctions/arm_offset_q15.c ****   uint32_t blockSize)
  59:Source\BasicMathFunctions/arm_offset_q15.c **** {
  26              		.loc 1 59 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 8AB0     		sub	sp, sp, #40
  33              		.cfi_def_cfa_offset 48
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 7A60     		str	r2, [r7, #4]
  38 000a 3B60     		str	r3, [r7]
  39 000c 0A23     		mov	r3, #10
  40 000e FB18     		add	r3, r7, r3
  41 0010 0A1C     		add	r2, r1, #0
  42 0012 1A80     		strh	r2, [r3]
  60:Source\BasicMathFunctions/arm_offset_q15.c ****   uint32_t blkCnt;                               /* loop counter */
  61:Source\BasicMathFunctions/arm_offset_q15.c **** 
  62:Source\BasicMathFunctions/arm_offset_q15.c **** #if defined (ARM_MATH_DSP)
  63:Source\BasicMathFunctions/arm_offset_q15.c **** 
  64:Source\BasicMathFunctions/arm_offset_q15.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  65:Source\BasicMathFunctions/arm_offset_q15.c ****   q31_t offset_packed;                           /* Offset packed to 32 bit */
  66:Source\BasicMathFunctions/arm_offset_q15.c **** 
  67:Source\BasicMathFunctions/arm_offset_q15.c **** 
  68:Source\BasicMathFunctions/arm_offset_q15.c ****   /*loop Unrolling */
  69:Source\BasicMathFunctions/arm_offset_q15.c ****   blkCnt = blockSize >> 2u;
  70:Source\BasicMathFunctions/arm_offset_q15.c **** 
  71:Source\BasicMathFunctions/arm_offset_q15.c ****   /* Offset is packed to 32 bit in order to use SIMD32 for addition */
  72:Source\BasicMathFunctions/arm_offset_q15.c ****   offset_packed = __PKHBT(offset, offset, 16);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 3


  73:Source\BasicMathFunctions/arm_offset_q15.c **** 
  74:Source\BasicMathFunctions/arm_offset_q15.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  75:Source\BasicMathFunctions/arm_offset_q15.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  76:Source\BasicMathFunctions/arm_offset_q15.c ****   while (blkCnt > 0u)
  77:Source\BasicMathFunctions/arm_offset_q15.c ****   {
  78:Source\BasicMathFunctions/arm_offset_q15.c ****     /* C = A + offset */
  79:Source\BasicMathFunctions/arm_offset_q15.c ****     /* Add offset and then store the results in the destination buffer, 2 samples at a time. */
  80:Source\BasicMathFunctions/arm_offset_q15.c ****     *__SIMD32(pDst)++ = __QADD16(*__SIMD32(pSrc)++, offset_packed);
  81:Source\BasicMathFunctions/arm_offset_q15.c ****     *__SIMD32(pDst)++ = __QADD16(*__SIMD32(pSrc)++, offset_packed);
  82:Source\BasicMathFunctions/arm_offset_q15.c **** 
  83:Source\BasicMathFunctions/arm_offset_q15.c ****     /* Decrement the loop counter */
  84:Source\BasicMathFunctions/arm_offset_q15.c ****     blkCnt--;
  85:Source\BasicMathFunctions/arm_offset_q15.c ****   }
  86:Source\BasicMathFunctions/arm_offset_q15.c **** 
  87:Source\BasicMathFunctions/arm_offset_q15.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
  88:Source\BasicMathFunctions/arm_offset_q15.c ****    ** No loop unrolling is used. */
  89:Source\BasicMathFunctions/arm_offset_q15.c ****   blkCnt = blockSize % 0x4u;
  90:Source\BasicMathFunctions/arm_offset_q15.c **** 
  91:Source\BasicMathFunctions/arm_offset_q15.c ****   while (blkCnt > 0u)
  92:Source\BasicMathFunctions/arm_offset_q15.c ****   {
  93:Source\BasicMathFunctions/arm_offset_q15.c ****     /* C = A + offset */
  94:Source\BasicMathFunctions/arm_offset_q15.c ****     /* Add offset and then store the results in the destination buffer. */
  95:Source\BasicMathFunctions/arm_offset_q15.c ****     *pDst++ = (q15_t) __QADD16(*pSrc++, offset);
  96:Source\BasicMathFunctions/arm_offset_q15.c **** 
  97:Source\BasicMathFunctions/arm_offset_q15.c ****     /* Decrement the loop counter */
  98:Source\BasicMathFunctions/arm_offset_q15.c ****     blkCnt--;
  99:Source\BasicMathFunctions/arm_offset_q15.c ****   }
 100:Source\BasicMathFunctions/arm_offset_q15.c **** 
 101:Source\BasicMathFunctions/arm_offset_q15.c **** #else
 102:Source\BasicMathFunctions/arm_offset_q15.c **** 
 103:Source\BasicMathFunctions/arm_offset_q15.c ****   /* Run the below code for Cortex-M0 */
 104:Source\BasicMathFunctions/arm_offset_q15.c **** 
 105:Source\BasicMathFunctions/arm_offset_q15.c ****   /* Initialize blkCnt with number of samples */
 106:Source\BasicMathFunctions/arm_offset_q15.c ****   blkCnt = blockSize;
  43              		.loc 1 106 0
  44 0014 3B68     		ldr	r3, [r7]
  45 0016 7B62     		str	r3, [r7, #36]
 107:Source\BasicMathFunctions/arm_offset_q15.c **** 
 108:Source\BasicMathFunctions/arm_offset_q15.c ****   while (blkCnt > 0u)
  46              		.loc 1 108 0
  47 0018 3DE0     		b	.L2
  48              	.L9:
 109:Source\BasicMathFunctions/arm_offset_q15.c ****   {
 110:Source\BasicMathFunctions/arm_offset_q15.c ****     /* C = A + offset */
 111:Source\BasicMathFunctions/arm_offset_q15.c ****     /* Add offset and then store the results in the destination buffer. */
 112:Source\BasicMathFunctions/arm_offset_q15.c ****     *pDst++ = (q15_t) __SSAT(((q31_t) * pSrc++ + offset), 16);
  49              		.loc 1 112 0
  50 001a 7B68     		ldr	r3, [r7, #4]
  51 001c 9A1C     		add	r2, r3, #2
  52 001e 7A60     		str	r2, [r7, #4]
  53 0020 FA68     		ldr	r2, [r7, #12]
  54 0022 911C     		add	r1, r2, #2
  55 0024 F960     		str	r1, [r7, #12]
  56 0026 1288     		ldrh	r2, [r2]
  57 0028 11B2     		sxth	r1, r2
  58 002a 0A22     		mov	r2, #10
  59 002c BA18     		add	r2, r7, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 4


  60 002e 0020     		mov	r0, #0
  61 0030 125E     		ldrsh	r2, [r2, r0]
  62 0032 8A18     		add	r2, r1, r2
  63 0034 3A62     		str	r2, [r7, #32]
  64 0036 1022     		mov	r2, #16
  65 0038 FA61     		str	r2, [r7, #28]
  66              	.LBB4:
  67              	.LBB5:
  68              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 5


  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 6


 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 7


 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 8


 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 9


 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 10


 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 11


 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 12


 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 13


 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 14


 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 15


 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 16


 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
  69              		.loc 2 699 0
  70 003a 0122     		mov	r2, #1
  71 003c BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  72              		.loc 2 700 0
  73 003e 0022     		mov	r2, #0
  74 0040 7A61     		str	r2, [r7, #20]
  75 0042 05E0     		b	.L3
  76              	.L4:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
  77              		.loc 2 702 0
  78 0044 BA69     		ldr	r2, [r7, #24]
  79 0046 5200     		lsl	r2, r2, #1
  80 0048 BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  81              		.loc 2 700 0
  82 004a 7A69     		ldr	r2, [r7, #20]
  83 004c 0132     		add	r2, r2, #1
  84 004e 7A61     		str	r2, [r7, #20]
  85              	.L3:
  86 0050 FA69     		ldr	r2, [r7, #28]
  87 0052 013A     		sub	r2, r2, #1
  88 0054 7969     		ldr	r1, [r7, #20]
  89 0056 9142     		cmp	r1, r2
  90 0058 F4D3     		bcc	.L4
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
  91              		.loc 2 705 0
  92 005a 3A6A     		ldr	r2, [r7, #32]
  93 005c 002A     		cmp	r2, #0
  94 005e 09DD     		ble	.L5
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 17


 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
  95              		.loc 2 707 0
  96 0060 BA69     		ldr	r2, [r7, #24]
  97 0062 013A     		sub	r2, r2, #1
  98 0064 BA61     		str	r2, [r7, #24]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
  99              		.loc 2 709 0
 100 0066 396A     		ldr	r1, [r7, #32]
 101 0068 BA69     		ldr	r2, [r7, #24]
 102 006a 9142     		cmp	r1, r2
 103 006c 0CDD     		ble	.L10
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 104              		.loc 2 711 0
 105 006e BA69     		ldr	r2, [r7, #24]
 106 0070 3A62     		str	r2, [r7, #32]
 107 0072 0AE0     		b	.L7
 108              	.L5:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 109              		.loc 2 716 0
 110 0074 BA69     		ldr	r2, [r7, #24]
 111 0076 5242     		neg	r2, r2
 112 0078 3A61     		str	r2, [r7, #16]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 113              		.loc 2 718 0
 114 007a 396A     		ldr	r1, [r7, #32]
 115 007c 3A69     		ldr	r2, [r7, #16]
 116 007e 9142     		cmp	r1, r2
 117 0080 03DA     		bge	.L7
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 118              		.loc 2 720 0
 119 0082 3A69     		ldr	r2, [r7, #16]
 120 0084 3A62     		str	r2, [r7, #32]
 121 0086 00E0     		b	.L7
 122              	.L10:
 711:.\Include/arm_math.h ****       }
 123              		.loc 2 711 0
 124 0088 C046     		mov	r8, r8
 125              	.L7:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 126              		.loc 2 723 0
 127 008a 3A6A     		ldr	r2, [r7, #32]
 128              	.LBE5:
 129              	.LBE4:
 130              		.loc 1 112 0
 131 008c 92B2     		uxth	r2, r2
 132 008e 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 18


 113:Source\BasicMathFunctions/arm_offset_q15.c **** 
 114:Source\BasicMathFunctions/arm_offset_q15.c ****     /* Decrement the loop counter */
 115:Source\BasicMathFunctions/arm_offset_q15.c ****     blkCnt--;
 133              		.loc 1 115 0
 134 0090 7B6A     		ldr	r3, [r7, #36]
 135 0092 013B     		sub	r3, r3, #1
 136 0094 7B62     		str	r3, [r7, #36]
 137              	.L2:
 108:Source\BasicMathFunctions/arm_offset_q15.c ****   {
 138              		.loc 1 108 0
 139 0096 7B6A     		ldr	r3, [r7, #36]
 140 0098 002B     		cmp	r3, #0
 141 009a BED1     		bne	.L9
 116:Source\BasicMathFunctions/arm_offset_q15.c ****   }
 117:Source\BasicMathFunctions/arm_offset_q15.c **** 
 118:Source\BasicMathFunctions/arm_offset_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 119:Source\BasicMathFunctions/arm_offset_q15.c **** 
 120:Source\BasicMathFunctions/arm_offset_q15.c **** }
 142              		.loc 1 120 0
 143 009c BD46     		mov	sp, r7
 144 009e 0AB0     		add	sp, sp, #40
 145              		@ sp needed
 146 00a0 80BD     		pop	{r7, pc}
 147              		.cfi_endproc
 148              	.LFE82:
 149              		.size	arm_offset_q15, .-arm_offset_q15
 150 00a2 C046     		.text
 151              	.Letext0:
 152              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 153              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 154              		.section	.debug_info,"",%progbits
 155              	.Ldebug_info0:
 156 0000 CD010000 		.4byte	0x1cd
 157 0004 0400     		.2byte	0x4
 158 0006 00000000 		.4byte	.Ldebug_abbrev0
 159 000a 04       		.byte	0x4
 160 000b 01       		.uleb128 0x1
 161 000c F7000000 		.4byte	.LASF28
 162 0010 01       		.byte	0x1
 163 0011 F0010000 		.4byte	.LASF29
 164 0015 23000000 		.4byte	.LASF30
 165 0019 00000000 		.4byte	.Ldebug_ranges0+0
 166 001d 00000000 		.4byte	0
 167 0021 00000000 		.4byte	.Ldebug_line0
 168 0025 02       		.uleb128 0x2
 169 0026 01       		.byte	0x1
 170 0027 06       		.byte	0x6
 171 0028 27020000 		.4byte	.LASF0
 172 002c 02       		.uleb128 0x2
 173 002d 01       		.byte	0x1
 174 002e 08       		.byte	0x8
 175 002f 7B000000 		.4byte	.LASF1
 176 0033 03       		.uleb128 0x3
 177 0034 0F000000 		.4byte	.LASF4
 178 0038 03       		.byte	0x3
 179 0039 29       		.byte	0x29
 180 003a 3E000000 		.4byte	0x3e
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 19


 181 003e 02       		.uleb128 0x2
 182 003f 02       		.byte	0x2
 183 0040 05       		.byte	0x5
 184 0041 CD010000 		.4byte	.LASF2
 185 0045 02       		.uleb128 0x2
 186 0046 02       		.byte	0x2
 187 0047 07       		.byte	0x7
 188 0048 A2000000 		.4byte	.LASF3
 189 004c 03       		.uleb128 0x3
 190 004d 19000000 		.4byte	.LASF5
 191 0051 03       		.byte	0x3
 192 0052 3F       		.byte	0x3f
 193 0053 57000000 		.4byte	0x57
 194 0057 02       		.uleb128 0x2
 195 0058 04       		.byte	0x4
 196 0059 05       		.byte	0x5
 197 005a E7010000 		.4byte	.LASF6
 198 005e 03       		.uleb128 0x3
 199 005f C8000000 		.4byte	.LASF7
 200 0063 03       		.byte	0x3
 201 0064 41       		.byte	0x41
 202 0065 69000000 		.4byte	0x69
 203 0069 02       		.uleb128 0x2
 204 006a 04       		.byte	0x4
 205 006b 07       		.byte	0x7
 206 006c 90000000 		.4byte	.LASF8
 207 0070 02       		.uleb128 0x2
 208 0071 08       		.byte	0x8
 209 0072 05       		.byte	0x5
 210 0073 A9010000 		.4byte	.LASF9
 211 0077 02       		.uleb128 0x2
 212 0078 08       		.byte	0x8
 213 0079 07       		.byte	0x7
 214 007a E0000000 		.4byte	.LASF10
 215 007e 04       		.uleb128 0x4
 216 007f 04       		.byte	0x4
 217 0080 05       		.byte	0x5
 218 0081 696E7400 		.ascii	"int\000"
 219 0085 02       		.uleb128 0x2
 220 0086 04       		.byte	0x4
 221 0087 07       		.byte	0x7
 222 0088 D3000000 		.4byte	.LASF11
 223 008c 03       		.uleb128 0x3
 224 008d 89010000 		.4byte	.LASF12
 225 0091 04       		.byte	0x4
 226 0092 20       		.byte	0x20
 227 0093 33000000 		.4byte	0x33
 228 0097 03       		.uleb128 0x3
 229 0098 98010000 		.4byte	.LASF13
 230 009c 04       		.byte	0x4
 231 009d 2C       		.byte	0x2c
 232 009e 4C000000 		.4byte	0x4c
 233 00a2 03       		.uleb128 0x3
 234 00a3 DE010000 		.4byte	.LASF14
 235 00a7 04       		.byte	0x4
 236 00a8 2D       		.byte	0x2d
 237 00a9 5E000000 		.4byte	0x5e
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 20


 238 00ad 02       		.uleb128 0x2
 239 00ae 04       		.byte	0x4
 240 00af 07       		.byte	0x7
 241 00b0 A0010000 		.4byte	.LASF15
 242 00b4 02       		.uleb128 0x2
 243 00b5 01       		.byte	0x1
 244 00b6 08       		.byte	0x8
 245 00b7 C1010000 		.4byte	.LASF16
 246 00bb 02       		.uleb128 0x2
 247 00bc 08       		.byte	0x8
 248 00bd 04       		.byte	0x4
 249 00be C1000000 		.4byte	.LASF17
 250 00c2 02       		.uleb128 0x2
 251 00c3 04       		.byte	0x4
 252 00c4 04       		.byte	0x4
 253 00c5 6F000000 		.4byte	.LASF18
 254 00c9 02       		.uleb128 0x2
 255 00ca 08       		.byte	0x8
 256 00cb 04       		.byte	0x4
 257 00cc 1B020000 		.4byte	.LASF19
 258 00d0 05       		.uleb128 0x5
 259 00d1 69000000 		.4byte	.LASF20
 260 00d5 02       		.byte	0x2
 261 00d6 9601     		.2byte	0x196
 262 00d8 8C000000 		.4byte	0x8c
 263 00dc 05       		.uleb128 0x5
 264 00dd 75000000 		.4byte	.LASF21
 265 00e1 02       		.byte	0x2
 266 00e2 9B01     		.2byte	0x19b
 267 00e4 97000000 		.4byte	0x97
 268 00e8 06       		.uleb128 0x6
 269 00e9 04       		.byte	0x4
 270 00ea D0000000 		.4byte	0xd0
 271 00ee 07       		.uleb128 0x7
 272 00ef 91010000 		.4byte	.LASF31
 273 00f3 02       		.byte	0x2
 274 00f4 B402     		.2byte	0x2b4
 275 00f6 DC000000 		.4byte	0xdc
 276 00fa 03       		.byte	0x3
 277 00fb 36010000 		.4byte	0x136
 278 00ff 08       		.uleb128 0x8
 279 0100 7800     		.ascii	"x\000"
 280 0102 02       		.byte	0x2
 281 0103 B502     		.2byte	0x2b5
 282 0105 DC000000 		.4byte	0xdc
 283 0109 08       		.uleb128 0x8
 284 010a 7900     		.ascii	"y\000"
 285 010c 02       		.byte	0x2
 286 010d B602     		.2byte	0x2b6
 287 010f A2000000 		.4byte	0xa2
 288 0113 09       		.uleb128 0x9
 289 0114 D7010000 		.4byte	.LASF22
 290 0118 02       		.byte	0x2
 291 0119 B802     		.2byte	0x2b8
 292 011b 97000000 		.4byte	0x97
 293 011f 09       		.uleb128 0x9
 294 0120 BA000000 		.4byte	.LASF23
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 21


 295 0124 02       		.byte	0x2
 296 0125 B802     		.2byte	0x2b8
 297 0127 97000000 		.4byte	0x97
 298 012b 0A       		.uleb128 0xa
 299 012c 6900     		.ascii	"i\000"
 300 012e 02       		.byte	0x2
 301 012f B902     		.2byte	0x2b9
 302 0131 A2000000 		.4byte	0xa2
 303 0135 00       		.byte	0
 304 0136 0B       		.uleb128 0xb
 305 0137 00000000 		.4byte	.LASF32
 306 013b 01       		.byte	0x1
 307 013c 36       		.byte	0x36
 308 013d 00000000 		.4byte	.LFB82
 309 0141 A2000000 		.4byte	.LFE82-.LFB82
 310 0145 01       		.uleb128 0x1
 311 0146 9C       		.byte	0x9c
 312 0147 0C       		.uleb128 0xc
 313 0148 33020000 		.4byte	.LASF24
 314 014c 01       		.byte	0x1
 315 014d 37       		.byte	0x37
 316 014e E8000000 		.4byte	0xe8
 317 0152 02       		.uleb128 0x2
 318 0153 91       		.byte	0x91
 319 0154 5C       		.sleb128 -36
 320 0155 0C       		.uleb128 0xc
 321 0156 C6010000 		.4byte	.LASF25
 322 015a 01       		.byte	0x1
 323 015b 38       		.byte	0x38
 324 015c D0000000 		.4byte	0xd0
 325 0160 02       		.uleb128 0x2
 326 0161 91       		.byte	0x91
 327 0162 5A       		.sleb128 -38
 328 0163 0C       		.uleb128 0xc
 329 0164 B5000000 		.4byte	.LASF26
 330 0168 01       		.byte	0x1
 331 0169 39       		.byte	0x39
 332 016a E8000000 		.4byte	0xe8
 333 016e 02       		.uleb128 0x2
 334 016f 91       		.byte	0x91
 335 0170 54       		.sleb128 -44
 336 0171 0C       		.uleb128 0xc
 337 0172 B7010000 		.4byte	.LASF27
 338 0176 01       		.byte	0x1
 339 0177 3A       		.byte	0x3a
 340 0178 A2000000 		.4byte	0xa2
 341 017c 02       		.uleb128 0x2
 342 017d 91       		.byte	0x91
 343 017e 50       		.sleb128 -48
 344 017f 0D       		.uleb128 0xd
 345 0180 89000000 		.4byte	.LASF33
 346 0184 01       		.byte	0x1
 347 0185 3C       		.byte	0x3c
 348 0186 A2000000 		.4byte	0xa2
 349 018a 02       		.uleb128 0x2
 350 018b 91       		.byte	0x91
 351 018c 74       		.sleb128 -12
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 22


 352 018d 0E       		.uleb128 0xe
 353 018e EE000000 		.4byte	0xee
 354 0192 3A000000 		.4byte	.LBB4
 355 0196 52000000 		.4byte	.LBE4-.LBB4
 356 019a 01       		.byte	0x1
 357 019b 70       		.byte	0x70
 358 019c 0F       		.uleb128 0xf
 359 019d 09010000 		.4byte	0x109
 360 01a1 02       		.uleb128 0x2
 361 01a2 91       		.byte	0x91
 362 01a3 6C       		.sleb128 -20
 363 01a4 0F       		.uleb128 0xf
 364 01a5 FF000000 		.4byte	0xff
 365 01a9 02       		.uleb128 0x2
 366 01aa 91       		.byte	0x91
 367 01ab 70       		.sleb128 -16
 368 01ac 10       		.uleb128 0x10
 369 01ad 3A000000 		.4byte	.LBB5
 370 01b1 52000000 		.4byte	.LBE5-.LBB5
 371 01b5 11       		.uleb128 0x11
 372 01b6 13010000 		.4byte	0x113
 373 01ba 02       		.uleb128 0x2
 374 01bb 91       		.byte	0x91
 375 01bc 68       		.sleb128 -24
 376 01bd 11       		.uleb128 0x11
 377 01be 1F010000 		.4byte	0x11f
 378 01c2 02       		.uleb128 0x2
 379 01c3 91       		.byte	0x91
 380 01c4 60       		.sleb128 -32
 381 01c5 11       		.uleb128 0x11
 382 01c6 2B010000 		.4byte	0x12b
 383 01ca 02       		.uleb128 0x2
 384 01cb 91       		.byte	0x91
 385 01cc 64       		.sleb128 -28
 386 01cd 00       		.byte	0
 387 01ce 00       		.byte	0
 388 01cf 00       		.byte	0
 389 01d0 00       		.byte	0
 390              		.section	.debug_abbrev,"",%progbits
 391              	.Ldebug_abbrev0:
 392 0000 01       		.uleb128 0x1
 393 0001 11       		.uleb128 0x11
 394 0002 01       		.byte	0x1
 395 0003 25       		.uleb128 0x25
 396 0004 0E       		.uleb128 0xe
 397 0005 13       		.uleb128 0x13
 398 0006 0B       		.uleb128 0xb
 399 0007 03       		.uleb128 0x3
 400 0008 0E       		.uleb128 0xe
 401 0009 1B       		.uleb128 0x1b
 402 000a 0E       		.uleb128 0xe
 403 000b 55       		.uleb128 0x55
 404 000c 17       		.uleb128 0x17
 405 000d 11       		.uleb128 0x11
 406 000e 01       		.uleb128 0x1
 407 000f 10       		.uleb128 0x10
 408 0010 17       		.uleb128 0x17
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 23


 409 0011 00       		.byte	0
 410 0012 00       		.byte	0
 411 0013 02       		.uleb128 0x2
 412 0014 24       		.uleb128 0x24
 413 0015 00       		.byte	0
 414 0016 0B       		.uleb128 0xb
 415 0017 0B       		.uleb128 0xb
 416 0018 3E       		.uleb128 0x3e
 417 0019 0B       		.uleb128 0xb
 418 001a 03       		.uleb128 0x3
 419 001b 0E       		.uleb128 0xe
 420 001c 00       		.byte	0
 421 001d 00       		.byte	0
 422 001e 03       		.uleb128 0x3
 423 001f 16       		.uleb128 0x16
 424 0020 00       		.byte	0
 425 0021 03       		.uleb128 0x3
 426 0022 0E       		.uleb128 0xe
 427 0023 3A       		.uleb128 0x3a
 428 0024 0B       		.uleb128 0xb
 429 0025 3B       		.uleb128 0x3b
 430 0026 0B       		.uleb128 0xb
 431 0027 49       		.uleb128 0x49
 432 0028 13       		.uleb128 0x13
 433 0029 00       		.byte	0
 434 002a 00       		.byte	0
 435 002b 04       		.uleb128 0x4
 436 002c 24       		.uleb128 0x24
 437 002d 00       		.byte	0
 438 002e 0B       		.uleb128 0xb
 439 002f 0B       		.uleb128 0xb
 440 0030 3E       		.uleb128 0x3e
 441 0031 0B       		.uleb128 0xb
 442 0032 03       		.uleb128 0x3
 443 0033 08       		.uleb128 0x8
 444 0034 00       		.byte	0
 445 0035 00       		.byte	0
 446 0036 05       		.uleb128 0x5
 447 0037 16       		.uleb128 0x16
 448 0038 00       		.byte	0
 449 0039 03       		.uleb128 0x3
 450 003a 0E       		.uleb128 0xe
 451 003b 3A       		.uleb128 0x3a
 452 003c 0B       		.uleb128 0xb
 453 003d 3B       		.uleb128 0x3b
 454 003e 05       		.uleb128 0x5
 455 003f 49       		.uleb128 0x49
 456 0040 13       		.uleb128 0x13
 457 0041 00       		.byte	0
 458 0042 00       		.byte	0
 459 0043 06       		.uleb128 0x6
 460 0044 0F       		.uleb128 0xf
 461 0045 00       		.byte	0
 462 0046 0B       		.uleb128 0xb
 463 0047 0B       		.uleb128 0xb
 464 0048 49       		.uleb128 0x49
 465 0049 13       		.uleb128 0x13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 24


 466 004a 00       		.byte	0
 467 004b 00       		.byte	0
 468 004c 07       		.uleb128 0x7
 469 004d 2E       		.uleb128 0x2e
 470 004e 01       		.byte	0x1
 471 004f 03       		.uleb128 0x3
 472 0050 0E       		.uleb128 0xe
 473 0051 3A       		.uleb128 0x3a
 474 0052 0B       		.uleb128 0xb
 475 0053 3B       		.uleb128 0x3b
 476 0054 05       		.uleb128 0x5
 477 0055 27       		.uleb128 0x27
 478 0056 19       		.uleb128 0x19
 479 0057 49       		.uleb128 0x49
 480 0058 13       		.uleb128 0x13
 481 0059 20       		.uleb128 0x20
 482 005a 0B       		.uleb128 0xb
 483 005b 01       		.uleb128 0x1
 484 005c 13       		.uleb128 0x13
 485 005d 00       		.byte	0
 486 005e 00       		.byte	0
 487 005f 08       		.uleb128 0x8
 488 0060 05       		.uleb128 0x5
 489 0061 00       		.byte	0
 490 0062 03       		.uleb128 0x3
 491 0063 08       		.uleb128 0x8
 492 0064 3A       		.uleb128 0x3a
 493 0065 0B       		.uleb128 0xb
 494 0066 3B       		.uleb128 0x3b
 495 0067 05       		.uleb128 0x5
 496 0068 49       		.uleb128 0x49
 497 0069 13       		.uleb128 0x13
 498 006a 00       		.byte	0
 499 006b 00       		.byte	0
 500 006c 09       		.uleb128 0x9
 501 006d 34       		.uleb128 0x34
 502 006e 00       		.byte	0
 503 006f 03       		.uleb128 0x3
 504 0070 0E       		.uleb128 0xe
 505 0071 3A       		.uleb128 0x3a
 506 0072 0B       		.uleb128 0xb
 507 0073 3B       		.uleb128 0x3b
 508 0074 05       		.uleb128 0x5
 509 0075 49       		.uleb128 0x49
 510 0076 13       		.uleb128 0x13
 511 0077 00       		.byte	0
 512 0078 00       		.byte	0
 513 0079 0A       		.uleb128 0xa
 514 007a 34       		.uleb128 0x34
 515 007b 00       		.byte	0
 516 007c 03       		.uleb128 0x3
 517 007d 08       		.uleb128 0x8
 518 007e 3A       		.uleb128 0x3a
 519 007f 0B       		.uleb128 0xb
 520 0080 3B       		.uleb128 0x3b
 521 0081 05       		.uleb128 0x5
 522 0082 49       		.uleb128 0x49
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 25


 523 0083 13       		.uleb128 0x13
 524 0084 00       		.byte	0
 525 0085 00       		.byte	0
 526 0086 0B       		.uleb128 0xb
 527 0087 2E       		.uleb128 0x2e
 528 0088 01       		.byte	0x1
 529 0089 3F       		.uleb128 0x3f
 530 008a 19       		.uleb128 0x19
 531 008b 03       		.uleb128 0x3
 532 008c 0E       		.uleb128 0xe
 533 008d 3A       		.uleb128 0x3a
 534 008e 0B       		.uleb128 0xb
 535 008f 3B       		.uleb128 0x3b
 536 0090 0B       		.uleb128 0xb
 537 0091 27       		.uleb128 0x27
 538 0092 19       		.uleb128 0x19
 539 0093 11       		.uleb128 0x11
 540 0094 01       		.uleb128 0x1
 541 0095 12       		.uleb128 0x12
 542 0096 06       		.uleb128 0x6
 543 0097 40       		.uleb128 0x40
 544 0098 18       		.uleb128 0x18
 545 0099 9742     		.uleb128 0x2117
 546 009b 19       		.uleb128 0x19
 547 009c 00       		.byte	0
 548 009d 00       		.byte	0
 549 009e 0C       		.uleb128 0xc
 550 009f 05       		.uleb128 0x5
 551 00a0 00       		.byte	0
 552 00a1 03       		.uleb128 0x3
 553 00a2 0E       		.uleb128 0xe
 554 00a3 3A       		.uleb128 0x3a
 555 00a4 0B       		.uleb128 0xb
 556 00a5 3B       		.uleb128 0x3b
 557 00a6 0B       		.uleb128 0xb
 558 00a7 49       		.uleb128 0x49
 559 00a8 13       		.uleb128 0x13
 560 00a9 02       		.uleb128 0x2
 561 00aa 18       		.uleb128 0x18
 562 00ab 00       		.byte	0
 563 00ac 00       		.byte	0
 564 00ad 0D       		.uleb128 0xd
 565 00ae 34       		.uleb128 0x34
 566 00af 00       		.byte	0
 567 00b0 03       		.uleb128 0x3
 568 00b1 0E       		.uleb128 0xe
 569 00b2 3A       		.uleb128 0x3a
 570 00b3 0B       		.uleb128 0xb
 571 00b4 3B       		.uleb128 0x3b
 572 00b5 0B       		.uleb128 0xb
 573 00b6 49       		.uleb128 0x49
 574 00b7 13       		.uleb128 0x13
 575 00b8 02       		.uleb128 0x2
 576 00b9 18       		.uleb128 0x18
 577 00ba 00       		.byte	0
 578 00bb 00       		.byte	0
 579 00bc 0E       		.uleb128 0xe
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 26


 580 00bd 1D       		.uleb128 0x1d
 581 00be 01       		.byte	0x1
 582 00bf 31       		.uleb128 0x31
 583 00c0 13       		.uleb128 0x13
 584 00c1 11       		.uleb128 0x11
 585 00c2 01       		.uleb128 0x1
 586 00c3 12       		.uleb128 0x12
 587 00c4 06       		.uleb128 0x6
 588 00c5 58       		.uleb128 0x58
 589 00c6 0B       		.uleb128 0xb
 590 00c7 59       		.uleb128 0x59
 591 00c8 0B       		.uleb128 0xb
 592 00c9 00       		.byte	0
 593 00ca 00       		.byte	0
 594 00cb 0F       		.uleb128 0xf
 595 00cc 05       		.uleb128 0x5
 596 00cd 00       		.byte	0
 597 00ce 31       		.uleb128 0x31
 598 00cf 13       		.uleb128 0x13
 599 00d0 02       		.uleb128 0x2
 600 00d1 18       		.uleb128 0x18
 601 00d2 00       		.byte	0
 602 00d3 00       		.byte	0
 603 00d4 10       		.uleb128 0x10
 604 00d5 0B       		.uleb128 0xb
 605 00d6 01       		.byte	0x1
 606 00d7 11       		.uleb128 0x11
 607 00d8 01       		.uleb128 0x1
 608 00d9 12       		.uleb128 0x12
 609 00da 06       		.uleb128 0x6
 610 00db 00       		.byte	0
 611 00dc 00       		.byte	0
 612 00dd 11       		.uleb128 0x11
 613 00de 34       		.uleb128 0x34
 614 00df 00       		.byte	0
 615 00e0 31       		.uleb128 0x31
 616 00e1 13       		.uleb128 0x13
 617 00e2 02       		.uleb128 0x2
 618 00e3 18       		.uleb128 0x18
 619 00e4 00       		.byte	0
 620 00e5 00       		.byte	0
 621 00e6 00       		.byte	0
 622              		.section	.debug_aranges,"",%progbits
 623 0000 1C000000 		.4byte	0x1c
 624 0004 0200     		.2byte	0x2
 625 0006 00000000 		.4byte	.Ldebug_info0
 626 000a 04       		.byte	0x4
 627 000b 00       		.byte	0
 628 000c 0000     		.2byte	0
 629 000e 0000     		.2byte	0
 630 0010 00000000 		.4byte	.LFB82
 631 0014 A2000000 		.4byte	.LFE82-.LFB82
 632 0018 00000000 		.4byte	0
 633 001c 00000000 		.4byte	0
 634              		.section	.debug_ranges,"",%progbits
 635              	.Ldebug_ranges0:
 636 0000 00000000 		.4byte	.LFB82
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 27


 637 0004 A2000000 		.4byte	.LFE82
 638 0008 00000000 		.4byte	0
 639 000c 00000000 		.4byte	0
 640              		.section	.debug_line,"",%progbits
 641              	.Ldebug_line0:
 642 0000 8E010000 		.section	.debug_str,"MS",%progbits,1
 642      02005101 
 642      00000201 
 642      FB0E0D00 
 642      01010101 
 643              	.LASF32:
 644 0000 61726D5F 		.ascii	"arm_offset_q15\000"
 644      6F666673 
 644      65745F71 
 644      313500
 645              	.LASF4:
 646 000f 5F5F696E 		.ascii	"__int16_t\000"
 646      7431365F 
 646      7400
 647              	.LASF5:
 648 0019 5F5F696E 		.ascii	"__int32_t\000"
 648      7433325F 
 648      7400
 649              	.LASF30:
 650 0023 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 650      73657273 
 650      5C666E65 
 650      7665735C 
 650      446F6375 
 651 0050 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 651      655F7370 
 651      6565645F 
 651      73656E73 
 651      6F722E63 
 652              	.LASF20:
 653 0069 7131355F 		.ascii	"q15_t\000"
 653      7400
 654              	.LASF18:
 655 006f 666C6F61 		.ascii	"float\000"
 655      7400
 656              	.LASF21:
 657 0075 7133315F 		.ascii	"q31_t\000"
 657      7400
 658              	.LASF1:
 659 007b 756E7369 		.ascii	"unsigned char\000"
 659      676E6564 
 659      20636861 
 659      7200
 660              	.LASF33:
 661 0089 626C6B43 		.ascii	"blkCnt\000"
 661      6E7400
 662              	.LASF8:
 663 0090 6C6F6E67 		.ascii	"long unsigned int\000"
 663      20756E73 
 663      69676E65 
 663      6420696E 
 663      7400
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 28


 664              	.LASF3:
 665 00a2 73686F72 		.ascii	"short unsigned int\000"
 665      7420756E 
 665      7369676E 
 665      65642069 
 665      6E7400
 666              	.LASF26:
 667 00b5 70447374 		.ascii	"pDst\000"
 667      00
 668              	.LASF23:
 669 00ba 6E65674D 		.ascii	"negMin\000"
 669      696E00
 670              	.LASF17:
 671 00c1 646F7562 		.ascii	"double\000"
 671      6C6500
 672              	.LASF7:
 673 00c8 5F5F7569 		.ascii	"__uint32_t\000"
 673      6E743332 
 673      5F7400
 674              	.LASF11:
 675 00d3 756E7369 		.ascii	"unsigned int\000"
 675      676E6564 
 675      20696E74 
 675      00
 676              	.LASF10:
 677 00e0 6C6F6E67 		.ascii	"long long unsigned int\000"
 677      206C6F6E 
 677      6720756E 
 677      7369676E 
 677      65642069 
 678              	.LASF28:
 679 00f7 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 679      4320342E 
 679      392E3320 
 679      32303135 
 679      30333033 
 680 012a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 680      20726576 
 680      6973696F 
 680      6E203232 
 680      31323230 
 681 015d 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 681      30202D66 
 681      66756E63 
 681      74696F6E 
 681      2D736563 
 682              	.LASF12:
 683 0189 696E7431 		.ascii	"int16_t\000"
 683      365F7400 
 684              	.LASF31:
 685 0191 5F5F5353 		.ascii	"__SSAT\000"
 685      415400
 686              	.LASF13:
 687 0198 696E7433 		.ascii	"int32_t\000"
 687      325F7400 
 688              	.LASF15:
 689 01a0 73697A65 		.ascii	"sizetype\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc3J1dlE.s 			page 29


 689      74797065 
 689      00
 690              	.LASF9:
 691 01a9 6C6F6E67 		.ascii	"long long int\000"
 691      206C6F6E 
 691      6720696E 
 691      7400
 692              	.LASF27:
 693 01b7 626C6F63 		.ascii	"blockSize\000"
 693      6B53697A 
 693      6500
 694              	.LASF16:
 695 01c1 63686172 		.ascii	"char\000"
 695      00
 696              	.LASF25:
 697 01c6 6F666673 		.ascii	"offset\000"
 697      657400
 698              	.LASF2:
 699 01cd 73686F72 		.ascii	"short int\000"
 699      7420696E 
 699      7400
 700              	.LASF22:
 701 01d7 706F734D 		.ascii	"posMax\000"
 701      617800
 702              	.LASF14:
 703 01de 75696E74 		.ascii	"uint32_t\000"
 703      33325F74 
 703      00
 704              	.LASF6:
 705 01e7 6C6F6E67 		.ascii	"long int\000"
 705      20696E74 
 705      00
 706              	.LASF29:
 707 01f0 536F7572 		.ascii	"Source\\BasicMathFunctions\\arm_offset_q15.c\000"
 707      63655C42 
 707      61736963 
 707      4D617468 
 707      46756E63 
 708              	.LASF19:
 709 021b 6C6F6E67 		.ascii	"long double\000"
 709      20646F75 
 709      626C6500 
 710              	.LASF0:
 711 0227 7369676E 		.ascii	"signed char\000"
 711      65642063 
 711      68617200 
 712              	.LASF24:
 713 0233 70537263 		.ascii	"pSrc\000"
 713      00
 714              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
