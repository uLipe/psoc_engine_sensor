ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_float_to_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_fmul
  18              		.global	__aeabi_f2iz
  19              		.section	.text.arm_float_to_q15,"ax",%progbits
  20              		.align	2
  21              		.global	arm_float_to_q15
  22              		.code	16
  23              		.thumb_func
  24              		.type	arm_float_to_q15, %function
  25              	arm_float_to_q15:
  26              	.LFB82:
  27              		.file 1 "Source\\SupportFunctions\\arm_float_to_q15.c"
   1:Source\SupportFunctions/arm_float_to_q15.c **** /* ----------------------------------------------------------------------
   2:Source\SupportFunctions/arm_float_to_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\SupportFunctions/arm_float_to_q15.c ****  * Title:        arm_float_to_q15.c
   4:Source\SupportFunctions/arm_float_to_q15.c ****  * Description:  Converts the elements of the floating-point vector to Q15 vector
   5:Source\SupportFunctions/arm_float_to_q15.c ****  *
   6:Source\SupportFunctions/arm_float_to_q15.c ****  * $Date:        27. January 2017
   7:Source\SupportFunctions/arm_float_to_q15.c ****  * $Revision:    V.1.5.1
   8:Source\SupportFunctions/arm_float_to_q15.c ****  *
   9:Source\SupportFunctions/arm_float_to_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\SupportFunctions/arm_float_to_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\SupportFunctions/arm_float_to_q15.c **** /*
  12:Source\SupportFunctions/arm_float_to_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\SupportFunctions/arm_float_to_q15.c ****  *
  14:Source\SupportFunctions/arm_float_to_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\SupportFunctions/arm_float_to_q15.c ****  *
  16:Source\SupportFunctions/arm_float_to_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\SupportFunctions/arm_float_to_q15.c ****  * not use this file except in compliance with the License.
  18:Source\SupportFunctions/arm_float_to_q15.c ****  * You may obtain a copy of the License at
  19:Source\SupportFunctions/arm_float_to_q15.c ****  *
  20:Source\SupportFunctions/arm_float_to_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\SupportFunctions/arm_float_to_q15.c ****  *
  22:Source\SupportFunctions/arm_float_to_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\SupportFunctions/arm_float_to_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\SupportFunctions/arm_float_to_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\SupportFunctions/arm_float_to_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\SupportFunctions/arm_float_to_q15.c ****  * limitations under the License.
  27:Source\SupportFunctions/arm_float_to_q15.c ****  */
  28:Source\SupportFunctions/arm_float_to_q15.c **** 
  29:Source\SupportFunctions/arm_float_to_q15.c **** #include "arm_math.h"
  30:Source\SupportFunctions/arm_float_to_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 2


  31:Source\SupportFunctions/arm_float_to_q15.c **** /**
  32:Source\SupportFunctions/arm_float_to_q15.c ****  * @ingroup groupSupport
  33:Source\SupportFunctions/arm_float_to_q15.c ****  */
  34:Source\SupportFunctions/arm_float_to_q15.c **** 
  35:Source\SupportFunctions/arm_float_to_q15.c **** /**
  36:Source\SupportFunctions/arm_float_to_q15.c ****  * @addtogroup float_to_x
  37:Source\SupportFunctions/arm_float_to_q15.c ****  * @{
  38:Source\SupportFunctions/arm_float_to_q15.c ****  */
  39:Source\SupportFunctions/arm_float_to_q15.c **** 
  40:Source\SupportFunctions/arm_float_to_q15.c **** /**
  41:Source\SupportFunctions/arm_float_to_q15.c ****  * @brief Converts the elements of the floating-point vector to Q15 vector.
  42:Source\SupportFunctions/arm_float_to_q15.c ****  * @param[in]       *pSrc points to the floating-point input vector
  43:Source\SupportFunctions/arm_float_to_q15.c ****  * @param[out]      *pDst points to the Q15 output vector
  44:Source\SupportFunctions/arm_float_to_q15.c ****  * @param[in]       blockSize length of the input vector
  45:Source\SupportFunctions/arm_float_to_q15.c ****  * @return none.
  46:Source\SupportFunctions/arm_float_to_q15.c ****  *
  47:Source\SupportFunctions/arm_float_to_q15.c ****  * \par Description:
  48:Source\SupportFunctions/arm_float_to_q15.c ****  * \par
  49:Source\SupportFunctions/arm_float_to_q15.c ****  * The equation used for the conversion process is:
  50:Source\SupportFunctions/arm_float_to_q15.c ****  * <pre>
  51:Source\SupportFunctions/arm_float_to_q15.c ****  * 	pDst[n] = (q15_t)(pSrc[n] * 32768);   0 <= n < blockSize.
  52:Source\SupportFunctions/arm_float_to_q15.c ****  * </pre>
  53:Source\SupportFunctions/arm_float_to_q15.c ****  * \par Scaling and Overflow Behavior:
  54:Source\SupportFunctions/arm_float_to_q15.c ****  * \par
  55:Source\SupportFunctions/arm_float_to_q15.c ****  * The function uses saturating arithmetic.
  56:Source\SupportFunctions/arm_float_to_q15.c ****  * Results outside of the allowable Q15 range [0x8000 0x7FFF] will be saturated.
  57:Source\SupportFunctions/arm_float_to_q15.c ****  * \note
  58:Source\SupportFunctions/arm_float_to_q15.c ****  * In order to apply rounding, the library should be rebuilt with the ROUNDING macro
  59:Source\SupportFunctions/arm_float_to_q15.c ****  * defined in the preprocessor section of project options.
  60:Source\SupportFunctions/arm_float_to_q15.c ****  *
  61:Source\SupportFunctions/arm_float_to_q15.c ****  */
  62:Source\SupportFunctions/arm_float_to_q15.c **** 
  63:Source\SupportFunctions/arm_float_to_q15.c **** 
  64:Source\SupportFunctions/arm_float_to_q15.c **** void arm_float_to_q15(
  65:Source\SupportFunctions/arm_float_to_q15.c ****   float32_t * pSrc,
  66:Source\SupportFunctions/arm_float_to_q15.c ****   q15_t * pDst,
  67:Source\SupportFunctions/arm_float_to_q15.c ****   uint32_t blockSize)
  68:Source\SupportFunctions/arm_float_to_q15.c **** {
  28              		.loc 1 68 0
  29              		.cfi_startproc
  30 0000 90B5     		push	{r4, r7, lr}
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 8DB0     		sub	sp, sp, #52
  36              		.cfi_def_cfa_offset 64
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 F860     		str	r0, [r7, #12]
  40 0008 B960     		str	r1, [r7, #8]
  41 000a 7A60     		str	r2, [r7, #4]
  69:Source\SupportFunctions/arm_float_to_q15.c ****   float32_t *pIn = pSrc;                         /* Src pointer */
  42              		.loc 1 69 0
  43 000c FB68     		ldr	r3, [r7, #12]
  44 000e FB62     		str	r3, [r7, #44]
  70:Source\SupportFunctions/arm_float_to_q15.c ****   uint32_t blkCnt;                               /* loop counter */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 3


  71:Source\SupportFunctions/arm_float_to_q15.c **** 
  72:Source\SupportFunctions/arm_float_to_q15.c **** #ifdef ARM_MATH_ROUNDING
  73:Source\SupportFunctions/arm_float_to_q15.c **** 
  74:Source\SupportFunctions/arm_float_to_q15.c ****   float32_t in;
  75:Source\SupportFunctions/arm_float_to_q15.c **** 
  76:Source\SupportFunctions/arm_float_to_q15.c **** #endif /*      #ifdef ARM_MATH_ROUNDING        */
  77:Source\SupportFunctions/arm_float_to_q15.c **** 
  78:Source\SupportFunctions/arm_float_to_q15.c **** #if defined (ARM_MATH_DSP)
  79:Source\SupportFunctions/arm_float_to_q15.c **** 
  80:Source\SupportFunctions/arm_float_to_q15.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  81:Source\SupportFunctions/arm_float_to_q15.c **** 
  82:Source\SupportFunctions/arm_float_to_q15.c ****   /*loop Unrolling */
  83:Source\SupportFunctions/arm_float_to_q15.c ****   blkCnt = blockSize >> 2u;
  84:Source\SupportFunctions/arm_float_to_q15.c **** 
  85:Source\SupportFunctions/arm_float_to_q15.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  86:Source\SupportFunctions/arm_float_to_q15.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  87:Source\SupportFunctions/arm_float_to_q15.c ****   while (blkCnt > 0u)
  88:Source\SupportFunctions/arm_float_to_q15.c ****   {
  89:Source\SupportFunctions/arm_float_to_q15.c **** 
  90:Source\SupportFunctions/arm_float_to_q15.c **** #ifdef ARM_MATH_ROUNDING
  91:Source\SupportFunctions/arm_float_to_q15.c ****     /* C = A * 32768 */
  92:Source\SupportFunctions/arm_float_to_q15.c ****     /* convert from float to q15 and then store the results in the destination buffer */
  93:Source\SupportFunctions/arm_float_to_q15.c ****     in = *pIn++;
  94:Source\SupportFunctions/arm_float_to_q15.c ****     in = (in * 32768.0f);
  95:Source\SupportFunctions/arm_float_to_q15.c ****     in += in > 0.0f ? 0.5f : -0.5f;
  96:Source\SupportFunctions/arm_float_to_q15.c ****     *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
  97:Source\SupportFunctions/arm_float_to_q15.c **** 
  98:Source\SupportFunctions/arm_float_to_q15.c ****     in = *pIn++;
  99:Source\SupportFunctions/arm_float_to_q15.c ****     in = (in * 32768.0f);
 100:Source\SupportFunctions/arm_float_to_q15.c ****     in += in > 0.0f ? 0.5f : -0.5f;
 101:Source\SupportFunctions/arm_float_to_q15.c ****     *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 102:Source\SupportFunctions/arm_float_to_q15.c **** 
 103:Source\SupportFunctions/arm_float_to_q15.c ****     in = *pIn++;
 104:Source\SupportFunctions/arm_float_to_q15.c ****     in = (in * 32768.0f);
 105:Source\SupportFunctions/arm_float_to_q15.c ****     in += in > 0.0f ? 0.5f : -0.5f;
 106:Source\SupportFunctions/arm_float_to_q15.c ****     *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 107:Source\SupportFunctions/arm_float_to_q15.c **** 
 108:Source\SupportFunctions/arm_float_to_q15.c ****     in = *pIn++;
 109:Source\SupportFunctions/arm_float_to_q15.c ****     in = (in * 32768.0f);
 110:Source\SupportFunctions/arm_float_to_q15.c ****     in += in > 0.0f ? 0.5f : -0.5f;
 111:Source\SupportFunctions/arm_float_to_q15.c ****     *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 112:Source\SupportFunctions/arm_float_to_q15.c **** 
 113:Source\SupportFunctions/arm_float_to_q15.c **** #else
 114:Source\SupportFunctions/arm_float_to_q15.c **** 
 115:Source\SupportFunctions/arm_float_to_q15.c ****     /* C = A * 32768 */
 116:Source\SupportFunctions/arm_float_to_q15.c ****     /* convert from float to q15 and then store the results in the destination buffer */
 117:Source\SupportFunctions/arm_float_to_q15.c ****     *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 118:Source\SupportFunctions/arm_float_to_q15.c ****     *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 119:Source\SupportFunctions/arm_float_to_q15.c ****     *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 120:Source\SupportFunctions/arm_float_to_q15.c ****     *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 121:Source\SupportFunctions/arm_float_to_q15.c **** 
 122:Source\SupportFunctions/arm_float_to_q15.c **** #endif /*      #ifdef ARM_MATH_ROUNDING        */
 123:Source\SupportFunctions/arm_float_to_q15.c **** 
 124:Source\SupportFunctions/arm_float_to_q15.c ****     /* Decrement the loop counter */
 125:Source\SupportFunctions/arm_float_to_q15.c ****     blkCnt--;
 126:Source\SupportFunctions/arm_float_to_q15.c ****   }
 127:Source\SupportFunctions/arm_float_to_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 4


 128:Source\SupportFunctions/arm_float_to_q15.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 129:Source\SupportFunctions/arm_float_to_q15.c ****    ** No loop unrolling is used. */
 130:Source\SupportFunctions/arm_float_to_q15.c ****   blkCnt = blockSize % 0x4u;
 131:Source\SupportFunctions/arm_float_to_q15.c **** 
 132:Source\SupportFunctions/arm_float_to_q15.c ****   while (blkCnt > 0u)
 133:Source\SupportFunctions/arm_float_to_q15.c ****   {
 134:Source\SupportFunctions/arm_float_to_q15.c **** 
 135:Source\SupportFunctions/arm_float_to_q15.c **** #ifdef ARM_MATH_ROUNDING
 136:Source\SupportFunctions/arm_float_to_q15.c ****     /* C = A * 32768 */
 137:Source\SupportFunctions/arm_float_to_q15.c ****     /* convert from float to q15 and then store the results in the destination buffer */
 138:Source\SupportFunctions/arm_float_to_q15.c ****     in = *pIn++;
 139:Source\SupportFunctions/arm_float_to_q15.c ****     in = (in * 32768.0f);
 140:Source\SupportFunctions/arm_float_to_q15.c ****     in += in > 0.0f ? 0.5f : -0.5f;
 141:Source\SupportFunctions/arm_float_to_q15.c ****     *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 142:Source\SupportFunctions/arm_float_to_q15.c **** 
 143:Source\SupportFunctions/arm_float_to_q15.c **** #else
 144:Source\SupportFunctions/arm_float_to_q15.c **** 
 145:Source\SupportFunctions/arm_float_to_q15.c ****     /* C = A * 32768 */
 146:Source\SupportFunctions/arm_float_to_q15.c ****     /* convert from float to q15 and then store the results in the destination buffer */
 147:Source\SupportFunctions/arm_float_to_q15.c ****     *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 148:Source\SupportFunctions/arm_float_to_q15.c **** 
 149:Source\SupportFunctions/arm_float_to_q15.c **** #endif /*      #ifdef ARM_MATH_ROUNDING        */
 150:Source\SupportFunctions/arm_float_to_q15.c **** 
 151:Source\SupportFunctions/arm_float_to_q15.c ****     /* Decrement the loop counter */
 152:Source\SupportFunctions/arm_float_to_q15.c ****     blkCnt--;
 153:Source\SupportFunctions/arm_float_to_q15.c ****   }
 154:Source\SupportFunctions/arm_float_to_q15.c **** 
 155:Source\SupportFunctions/arm_float_to_q15.c **** 
 156:Source\SupportFunctions/arm_float_to_q15.c **** #else
 157:Source\SupportFunctions/arm_float_to_q15.c **** 
 158:Source\SupportFunctions/arm_float_to_q15.c ****   /* Run the below code for Cortex-M0 */
 159:Source\SupportFunctions/arm_float_to_q15.c **** 
 160:Source\SupportFunctions/arm_float_to_q15.c ****   /* Loop over blockSize number of values */
 161:Source\SupportFunctions/arm_float_to_q15.c ****   blkCnt = blockSize;
  45              		.loc 1 161 0
  46 0010 7B68     		ldr	r3, [r7, #4]
  47 0012 BB62     		str	r3, [r7, #40]
 162:Source\SupportFunctions/arm_float_to_q15.c **** 
 163:Source\SupportFunctions/arm_float_to_q15.c ****   while (blkCnt > 0u)
  48              		.loc 1 163 0
  49 0014 41E0     		b	.L2
  50              	.L9:
 164:Source\SupportFunctions/arm_float_to_q15.c ****   {
 165:Source\SupportFunctions/arm_float_to_q15.c **** 
 166:Source\SupportFunctions/arm_float_to_q15.c **** #ifdef ARM_MATH_ROUNDING
 167:Source\SupportFunctions/arm_float_to_q15.c ****     /* C = A * 32768 */
 168:Source\SupportFunctions/arm_float_to_q15.c ****     /* convert from float to q15 and then store the results in the destination buffer */
 169:Source\SupportFunctions/arm_float_to_q15.c ****     in = *pIn++;
 170:Source\SupportFunctions/arm_float_to_q15.c ****     in = (in * 32768.0f);
 171:Source\SupportFunctions/arm_float_to_q15.c ****     in += in > 0 ? 0.5f : -0.5f;
 172:Source\SupportFunctions/arm_float_to_q15.c ****     *pDst++ = (q15_t) (__SSAT((q31_t) (in), 16));
 173:Source\SupportFunctions/arm_float_to_q15.c **** 
 174:Source\SupportFunctions/arm_float_to_q15.c **** #else
 175:Source\SupportFunctions/arm_float_to_q15.c **** 
 176:Source\SupportFunctions/arm_float_to_q15.c ****     /* C = A * 32768 */
 177:Source\SupportFunctions/arm_float_to_q15.c ****     /* convert from float to q15 and then store the results in the destination buffer */
 178:Source\SupportFunctions/arm_float_to_q15.c ****     *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 5


  51              		.loc 1 178 0
  52 0016 BC68     		ldr	r4, [r7, #8]
  53 0018 A31C     		add	r3, r4, #2
  54 001a BB60     		str	r3, [r7, #8]
  55 001c FB6A     		ldr	r3, [r7, #44]
  56 001e 1A1D     		add	r2, r3, #4
  57 0020 FA62     		str	r2, [r7, #44]
  58 0022 1B68     		ldr	r3, [r3]
  59 0024 181C     		add	r0, r3, #0
  60 0026 8E21     		mov	r1, #142
  61 0028 C905     		lsl	r1, r1, #23
  62 002a FFF7FEFF 		bl	__aeabi_fmul
  63 002e 031C     		add	r3, r0, #0
  64 0030 181C     		add	r0, r3, #0
  65 0032 FFF7FEFF 		bl	__aeabi_f2iz
  66 0036 031C     		mov	r3, r0
  67 0038 7B62     		str	r3, [r7, #36]
  68 003a 1023     		mov	r3, #16
  69 003c 3B62     		str	r3, [r7, #32]
  70              	.LBB4:
  71              	.LBB5:
  72              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 6


  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 7


  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 8


 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 9


 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 10


 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 11


 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 12


 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 13


 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 14


 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 15


 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 16


 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 17


 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
  73              		.loc 2 699 0
  74 003e 0123     		mov	r3, #1
  75 0040 FB61     		str	r3, [r7, #28]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  76              		.loc 2 700 0
  77 0042 0023     		mov	r3, #0
  78 0044 BB61     		str	r3, [r7, #24]
  79 0046 05E0     		b	.L3
  80              	.L4:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
  81              		.loc 2 702 0
  82 0048 FB69     		ldr	r3, [r7, #28]
  83 004a 5B00     		lsl	r3, r3, #1
  84 004c FB61     		str	r3, [r7, #28]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  85              		.loc 2 700 0
  86 004e BB69     		ldr	r3, [r7, #24]
  87 0050 0133     		add	r3, r3, #1
  88 0052 BB61     		str	r3, [r7, #24]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 18


  89              	.L3:
  90 0054 3B6A     		ldr	r3, [r7, #32]
  91 0056 013B     		sub	r3, r3, #1
  92 0058 BA69     		ldr	r2, [r7, #24]
  93 005a 9A42     		cmp	r2, r3
  94 005c F4D3     		bcc	.L4
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
  95              		.loc 2 705 0
  96 005e 7B6A     		ldr	r3, [r7, #36]
  97 0060 002B     		cmp	r3, #0
  98 0062 09DD     		ble	.L5
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
  99              		.loc 2 707 0
 100 0064 FB69     		ldr	r3, [r7, #28]
 101 0066 013B     		sub	r3, r3, #1
 102 0068 FB61     		str	r3, [r7, #28]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 103              		.loc 2 709 0
 104 006a 7A6A     		ldr	r2, [r7, #36]
 105 006c FB69     		ldr	r3, [r7, #28]
 106 006e 9A42     		cmp	r2, r3
 107 0070 0CDD     		ble	.L10
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 108              		.loc 2 711 0
 109 0072 FB69     		ldr	r3, [r7, #28]
 110 0074 7B62     		str	r3, [r7, #36]
 111 0076 0AE0     		b	.L7
 112              	.L5:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 113              		.loc 2 716 0
 114 0078 FB69     		ldr	r3, [r7, #28]
 115 007a 5B42     		neg	r3, r3
 116 007c 7B61     		str	r3, [r7, #20]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 117              		.loc 2 718 0
 118 007e 7A6A     		ldr	r2, [r7, #36]
 119 0080 7B69     		ldr	r3, [r7, #20]
 120 0082 9A42     		cmp	r2, r3
 121 0084 03DA     		bge	.L7
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 122              		.loc 2 720 0
 123 0086 7B69     		ldr	r3, [r7, #20]
 124 0088 7B62     		str	r3, [r7, #36]
 125 008a 00E0     		b	.L7
 126              	.L10:
 711:.\Include/arm_math.h ****       }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 19


 127              		.loc 2 711 0
 128 008c C046     		mov	r8, r8
 129              	.L7:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 130              		.loc 2 723 0
 131 008e 7B6A     		ldr	r3, [r7, #36]
 132              	.LBE5:
 133              	.LBE4:
 134              		.loc 1 178 0
 135 0090 9BB2     		uxth	r3, r3
 136 0092 2380     		strh	r3, [r4]
 179:Source\SupportFunctions/arm_float_to_q15.c **** 
 180:Source\SupportFunctions/arm_float_to_q15.c **** #endif /*      #ifdef ARM_MATH_ROUNDING        */
 181:Source\SupportFunctions/arm_float_to_q15.c **** 
 182:Source\SupportFunctions/arm_float_to_q15.c ****     /* Decrement the loop counter */
 183:Source\SupportFunctions/arm_float_to_q15.c ****     blkCnt--;
 137              		.loc 1 183 0
 138 0094 BB6A     		ldr	r3, [r7, #40]
 139 0096 013B     		sub	r3, r3, #1
 140 0098 BB62     		str	r3, [r7, #40]
 141              	.L2:
 163:Source\SupportFunctions/arm_float_to_q15.c ****   {
 142              		.loc 1 163 0
 143 009a BB6A     		ldr	r3, [r7, #40]
 144 009c 002B     		cmp	r3, #0
 145 009e BAD1     		bne	.L9
 184:Source\SupportFunctions/arm_float_to_q15.c ****   }
 185:Source\SupportFunctions/arm_float_to_q15.c **** 
 186:Source\SupportFunctions/arm_float_to_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 187:Source\SupportFunctions/arm_float_to_q15.c **** 
 188:Source\SupportFunctions/arm_float_to_q15.c **** }
 146              		.loc 1 188 0
 147 00a0 BD46     		mov	sp, r7
 148 00a2 0DB0     		add	sp, sp, #52
 149              		@ sp needed
 150 00a4 90BD     		pop	{r4, r7, pc}
 151              		.cfi_endproc
 152              	.LFE82:
 153              		.size	arm_float_to_q15, .-arm_float_to_q15
 154 00a6 C046     		.text
 155              	.Letext0:
 156              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 157              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 158              		.section	.debug_info,"",%progbits
 159              	.Ldebug_info0:
 160 0000 DF010000 		.4byte	0x1df
 161 0004 0400     		.2byte	0x4
 162 0006 00000000 		.4byte	.Ldebug_abbrev0
 163 000a 04       		.byte	0x4
 164 000b 01       		.uleb128 0x1
 165 000c 13010000 		.4byte	.LASF29
 166 0010 01       		.byte	0x1
 167 0011 5A000000 		.4byte	.LASF30
 168 0015 14000000 		.4byte	.LASF31
 169 0019 00000000 		.4byte	.Ldebug_ranges0+0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 20


 170 001d 00000000 		.4byte	0
 171 0021 00000000 		.4byte	.Ldebug_line0
 172 0025 02       		.uleb128 0x2
 173 0026 01       		.byte	0x1
 174 0027 06       		.byte	0x6
 175 0028 1B020000 		.4byte	.LASF0
 176 002c 02       		.uleb128 0x2
 177 002d 01       		.byte	0x1
 178 002e 08       		.byte	0x8
 179 002f 97000000 		.4byte	.LASF1
 180 0033 03       		.uleb128 0x3
 181 0034 00000000 		.4byte	.LASF4
 182 0038 03       		.byte	0x3
 183 0039 29       		.byte	0x29
 184 003a 3E000000 		.4byte	0x3e
 185 003e 02       		.uleb128 0x2
 186 003f 02       		.byte	0x2
 187 0040 05       		.byte	0x5
 188 0041 EC010000 		.4byte	.LASF2
 189 0045 02       		.uleb128 0x2
 190 0046 02       		.byte	0x2
 191 0047 07       		.byte	0x7
 192 0048 BE000000 		.4byte	.LASF3
 193 004c 03       		.uleb128 0x3
 194 004d 0A000000 		.4byte	.LASF5
 195 0051 03       		.byte	0x3
 196 0052 3F       		.byte	0x3f
 197 0053 57000000 		.4byte	0x57
 198 0057 02       		.uleb128 0x2
 199 0058 04       		.byte	0x4
 200 0059 05       		.byte	0x5
 201 005a 06020000 		.4byte	.LASF6
 202 005e 03       		.uleb128 0x3
 203 005f E4000000 		.4byte	.LASF7
 204 0063 03       		.byte	0x3
 205 0064 41       		.byte	0x41
 206 0065 69000000 		.4byte	0x69
 207 0069 02       		.uleb128 0x2
 208 006a 04       		.byte	0x4
 209 006b 07       		.byte	0x7
 210 006c AC000000 		.4byte	.LASF8
 211 0070 02       		.uleb128 0x2
 212 0071 08       		.byte	0x8
 213 0072 05       		.byte	0x5
 214 0073 C5010000 		.4byte	.LASF9
 215 0077 02       		.uleb128 0x2
 216 0078 08       		.byte	0x8
 217 0079 07       		.byte	0x7
 218 007a FC000000 		.4byte	.LASF10
 219 007e 04       		.uleb128 0x4
 220 007f 04       		.byte	0x4
 221 0080 05       		.byte	0x5
 222 0081 696E7400 		.ascii	"int\000"
 223 0085 02       		.uleb128 0x2
 224 0086 04       		.byte	0x4
 225 0087 07       		.byte	0x7
 226 0088 EF000000 		.4byte	.LASF11
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 21


 227 008c 03       		.uleb128 0x3
 228 008d A5010000 		.4byte	.LASF12
 229 0091 04       		.byte	0x4
 230 0092 20       		.byte	0x20
 231 0093 33000000 		.4byte	0x33
 232 0097 03       		.uleb128 0x3
 233 0098 B4010000 		.4byte	.LASF13
 234 009c 04       		.byte	0x4
 235 009d 2C       		.byte	0x2c
 236 009e 4C000000 		.4byte	0x4c
 237 00a2 03       		.uleb128 0x3
 238 00a3 FD010000 		.4byte	.LASF14
 239 00a7 04       		.byte	0x4
 240 00a8 2D       		.byte	0x2d
 241 00a9 5E000000 		.4byte	0x5e
 242 00ad 02       		.uleb128 0x2
 243 00ae 04       		.byte	0x4
 244 00af 07       		.byte	0x7
 245 00b0 BC010000 		.4byte	.LASF15
 246 00b4 02       		.uleb128 0x2
 247 00b5 01       		.byte	0x1
 248 00b6 08       		.byte	0x8
 249 00b7 DD010000 		.4byte	.LASF16
 250 00bb 02       		.uleb128 0x2
 251 00bc 08       		.byte	0x8
 252 00bd 04       		.byte	0x4
 253 00be DD000000 		.4byte	.LASF17
 254 00c2 02       		.uleb128 0x2
 255 00c3 04       		.byte	0x4
 256 00c4 04       		.byte	0x4
 257 00c5 8B000000 		.4byte	.LASF18
 258 00c9 02       		.uleb128 0x2
 259 00ca 08       		.byte	0x8
 260 00cb 04       		.byte	0x4
 261 00cc 0F020000 		.4byte	.LASF19
 262 00d0 05       		.uleb128 0x5
 263 00d1 85000000 		.4byte	.LASF20
 264 00d5 02       		.byte	0x2
 265 00d6 9601     		.2byte	0x196
 266 00d8 8C000000 		.4byte	0x8c
 267 00dc 05       		.uleb128 0x5
 268 00dd 91000000 		.4byte	.LASF21
 269 00e1 02       		.byte	0x2
 270 00e2 9B01     		.2byte	0x19b
 271 00e4 97000000 		.4byte	0x97
 272 00e8 05       		.uleb128 0x5
 273 00e9 E2010000 		.4byte	.LASF22
 274 00ed 02       		.byte	0x2
 275 00ee A501     		.2byte	0x1a5
 276 00f0 C2000000 		.4byte	0xc2
 277 00f4 06       		.uleb128 0x6
 278 00f5 04       		.byte	0x4
 279 00f6 D0000000 		.4byte	0xd0
 280 00fa 06       		.uleb128 0x6
 281 00fb 04       		.byte	0x4
 282 00fc E8000000 		.4byte	0xe8
 283 0100 07       		.uleb128 0x7
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 22


 284 0101 AD010000 		.4byte	.LASF32
 285 0105 02       		.byte	0x2
 286 0106 B402     		.2byte	0x2b4
 287 0108 DC000000 		.4byte	0xdc
 288 010c 03       		.byte	0x3
 289 010d 48010000 		.4byte	0x148
 290 0111 08       		.uleb128 0x8
 291 0112 7800     		.ascii	"x\000"
 292 0114 02       		.byte	0x2
 293 0115 B502     		.2byte	0x2b5
 294 0117 DC000000 		.4byte	0xdc
 295 011b 08       		.uleb128 0x8
 296 011c 7900     		.ascii	"y\000"
 297 011e 02       		.byte	0x2
 298 011f B602     		.2byte	0x2b6
 299 0121 A2000000 		.4byte	0xa2
 300 0125 09       		.uleb128 0x9
 301 0126 F6010000 		.4byte	.LASF23
 302 012a 02       		.byte	0x2
 303 012b B802     		.2byte	0x2b8
 304 012d 97000000 		.4byte	0x97
 305 0131 09       		.uleb128 0x9
 306 0132 D6000000 		.4byte	.LASF24
 307 0136 02       		.byte	0x2
 308 0137 B802     		.2byte	0x2b8
 309 0139 97000000 		.4byte	0x97
 310 013d 0A       		.uleb128 0xa
 311 013e 6900     		.ascii	"i\000"
 312 0140 02       		.byte	0x2
 313 0141 B902     		.2byte	0x2b9
 314 0143 A2000000 		.4byte	0xa2
 315 0147 00       		.byte	0
 316 0148 0B       		.uleb128 0xb
 317 0149 2C020000 		.4byte	.LASF33
 318 014d 01       		.byte	0x1
 319 014e 40       		.byte	0x40
 320 014f 00000000 		.4byte	.LFB82
 321 0153 A6000000 		.4byte	.LFE82-.LFB82
 322 0157 01       		.uleb128 0x1
 323 0158 9C       		.byte	0x9c
 324 0159 0C       		.uleb128 0xc
 325 015a 27020000 		.4byte	.LASF25
 326 015e 01       		.byte	0x1
 327 015f 41       		.byte	0x41
 328 0160 FA000000 		.4byte	0xfa
 329 0164 02       		.uleb128 0x2
 330 0165 91       		.byte	0x91
 331 0166 4C       		.sleb128 -52
 332 0167 0C       		.uleb128 0xc
 333 0168 D1000000 		.4byte	.LASF26
 334 016c 01       		.byte	0x1
 335 016d 42       		.byte	0x42
 336 016e F4000000 		.4byte	0xf4
 337 0172 02       		.uleb128 0x2
 338 0173 91       		.byte	0x91
 339 0174 48       		.sleb128 -56
 340 0175 0C       		.uleb128 0xc
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 23


 341 0176 D3010000 		.4byte	.LASF27
 342 017a 01       		.byte	0x1
 343 017b 43       		.byte	0x43
 344 017c A2000000 		.4byte	0xa2
 345 0180 02       		.uleb128 0x2
 346 0181 91       		.byte	0x91
 347 0182 44       		.sleb128 -60
 348 0183 0D       		.uleb128 0xd
 349 0184 70496E00 		.ascii	"pIn\000"
 350 0188 01       		.byte	0x1
 351 0189 45       		.byte	0x45
 352 018a FA000000 		.4byte	0xfa
 353 018e 02       		.uleb128 0x2
 354 018f 91       		.byte	0x91
 355 0190 6C       		.sleb128 -20
 356 0191 0E       		.uleb128 0xe
 357 0192 A5000000 		.4byte	.LASF28
 358 0196 01       		.byte	0x1
 359 0197 46       		.byte	0x46
 360 0198 A2000000 		.4byte	0xa2
 361 019c 02       		.uleb128 0x2
 362 019d 91       		.byte	0x91
 363 019e 68       		.sleb128 -24
 364 019f 0F       		.uleb128 0xf
 365 01a0 00010000 		.4byte	0x100
 366 01a4 3E000000 		.4byte	.LBB4
 367 01a8 52000000 		.4byte	.LBE4-.LBB4
 368 01ac 01       		.byte	0x1
 369 01ad B2       		.byte	0xb2
 370 01ae 10       		.uleb128 0x10
 371 01af 1B010000 		.4byte	0x11b
 372 01b3 02       		.uleb128 0x2
 373 01b4 91       		.byte	0x91
 374 01b5 60       		.sleb128 -32
 375 01b6 10       		.uleb128 0x10
 376 01b7 11010000 		.4byte	0x111
 377 01bb 02       		.uleb128 0x2
 378 01bc 91       		.byte	0x91
 379 01bd 64       		.sleb128 -28
 380 01be 11       		.uleb128 0x11
 381 01bf 3E000000 		.4byte	.LBB5
 382 01c3 52000000 		.4byte	.LBE5-.LBB5
 383 01c7 12       		.uleb128 0x12
 384 01c8 25010000 		.4byte	0x125
 385 01cc 02       		.uleb128 0x2
 386 01cd 91       		.byte	0x91
 387 01ce 5C       		.sleb128 -36
 388 01cf 12       		.uleb128 0x12
 389 01d0 31010000 		.4byte	0x131
 390 01d4 02       		.uleb128 0x2
 391 01d5 91       		.byte	0x91
 392 01d6 54       		.sleb128 -44
 393 01d7 12       		.uleb128 0x12
 394 01d8 3D010000 		.4byte	0x13d
 395 01dc 02       		.uleb128 0x2
 396 01dd 91       		.byte	0x91
 397 01de 58       		.sleb128 -40
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 24


 398 01df 00       		.byte	0
 399 01e0 00       		.byte	0
 400 01e1 00       		.byte	0
 401 01e2 00       		.byte	0
 402              		.section	.debug_abbrev,"",%progbits
 403              	.Ldebug_abbrev0:
 404 0000 01       		.uleb128 0x1
 405 0001 11       		.uleb128 0x11
 406 0002 01       		.byte	0x1
 407 0003 25       		.uleb128 0x25
 408 0004 0E       		.uleb128 0xe
 409 0005 13       		.uleb128 0x13
 410 0006 0B       		.uleb128 0xb
 411 0007 03       		.uleb128 0x3
 412 0008 0E       		.uleb128 0xe
 413 0009 1B       		.uleb128 0x1b
 414 000a 0E       		.uleb128 0xe
 415 000b 55       		.uleb128 0x55
 416 000c 17       		.uleb128 0x17
 417 000d 11       		.uleb128 0x11
 418 000e 01       		.uleb128 0x1
 419 000f 10       		.uleb128 0x10
 420 0010 17       		.uleb128 0x17
 421 0011 00       		.byte	0
 422 0012 00       		.byte	0
 423 0013 02       		.uleb128 0x2
 424 0014 24       		.uleb128 0x24
 425 0015 00       		.byte	0
 426 0016 0B       		.uleb128 0xb
 427 0017 0B       		.uleb128 0xb
 428 0018 3E       		.uleb128 0x3e
 429 0019 0B       		.uleb128 0xb
 430 001a 03       		.uleb128 0x3
 431 001b 0E       		.uleb128 0xe
 432 001c 00       		.byte	0
 433 001d 00       		.byte	0
 434 001e 03       		.uleb128 0x3
 435 001f 16       		.uleb128 0x16
 436 0020 00       		.byte	0
 437 0021 03       		.uleb128 0x3
 438 0022 0E       		.uleb128 0xe
 439 0023 3A       		.uleb128 0x3a
 440 0024 0B       		.uleb128 0xb
 441 0025 3B       		.uleb128 0x3b
 442 0026 0B       		.uleb128 0xb
 443 0027 49       		.uleb128 0x49
 444 0028 13       		.uleb128 0x13
 445 0029 00       		.byte	0
 446 002a 00       		.byte	0
 447 002b 04       		.uleb128 0x4
 448 002c 24       		.uleb128 0x24
 449 002d 00       		.byte	0
 450 002e 0B       		.uleb128 0xb
 451 002f 0B       		.uleb128 0xb
 452 0030 3E       		.uleb128 0x3e
 453 0031 0B       		.uleb128 0xb
 454 0032 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 25


 455 0033 08       		.uleb128 0x8
 456 0034 00       		.byte	0
 457 0035 00       		.byte	0
 458 0036 05       		.uleb128 0x5
 459 0037 16       		.uleb128 0x16
 460 0038 00       		.byte	0
 461 0039 03       		.uleb128 0x3
 462 003a 0E       		.uleb128 0xe
 463 003b 3A       		.uleb128 0x3a
 464 003c 0B       		.uleb128 0xb
 465 003d 3B       		.uleb128 0x3b
 466 003e 05       		.uleb128 0x5
 467 003f 49       		.uleb128 0x49
 468 0040 13       		.uleb128 0x13
 469 0041 00       		.byte	0
 470 0042 00       		.byte	0
 471 0043 06       		.uleb128 0x6
 472 0044 0F       		.uleb128 0xf
 473 0045 00       		.byte	0
 474 0046 0B       		.uleb128 0xb
 475 0047 0B       		.uleb128 0xb
 476 0048 49       		.uleb128 0x49
 477 0049 13       		.uleb128 0x13
 478 004a 00       		.byte	0
 479 004b 00       		.byte	0
 480 004c 07       		.uleb128 0x7
 481 004d 2E       		.uleb128 0x2e
 482 004e 01       		.byte	0x1
 483 004f 03       		.uleb128 0x3
 484 0050 0E       		.uleb128 0xe
 485 0051 3A       		.uleb128 0x3a
 486 0052 0B       		.uleb128 0xb
 487 0053 3B       		.uleb128 0x3b
 488 0054 05       		.uleb128 0x5
 489 0055 27       		.uleb128 0x27
 490 0056 19       		.uleb128 0x19
 491 0057 49       		.uleb128 0x49
 492 0058 13       		.uleb128 0x13
 493 0059 20       		.uleb128 0x20
 494 005a 0B       		.uleb128 0xb
 495 005b 01       		.uleb128 0x1
 496 005c 13       		.uleb128 0x13
 497 005d 00       		.byte	0
 498 005e 00       		.byte	0
 499 005f 08       		.uleb128 0x8
 500 0060 05       		.uleb128 0x5
 501 0061 00       		.byte	0
 502 0062 03       		.uleb128 0x3
 503 0063 08       		.uleb128 0x8
 504 0064 3A       		.uleb128 0x3a
 505 0065 0B       		.uleb128 0xb
 506 0066 3B       		.uleb128 0x3b
 507 0067 05       		.uleb128 0x5
 508 0068 49       		.uleb128 0x49
 509 0069 13       		.uleb128 0x13
 510 006a 00       		.byte	0
 511 006b 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 26


 512 006c 09       		.uleb128 0x9
 513 006d 34       		.uleb128 0x34
 514 006e 00       		.byte	0
 515 006f 03       		.uleb128 0x3
 516 0070 0E       		.uleb128 0xe
 517 0071 3A       		.uleb128 0x3a
 518 0072 0B       		.uleb128 0xb
 519 0073 3B       		.uleb128 0x3b
 520 0074 05       		.uleb128 0x5
 521 0075 49       		.uleb128 0x49
 522 0076 13       		.uleb128 0x13
 523 0077 00       		.byte	0
 524 0078 00       		.byte	0
 525 0079 0A       		.uleb128 0xa
 526 007a 34       		.uleb128 0x34
 527 007b 00       		.byte	0
 528 007c 03       		.uleb128 0x3
 529 007d 08       		.uleb128 0x8
 530 007e 3A       		.uleb128 0x3a
 531 007f 0B       		.uleb128 0xb
 532 0080 3B       		.uleb128 0x3b
 533 0081 05       		.uleb128 0x5
 534 0082 49       		.uleb128 0x49
 535 0083 13       		.uleb128 0x13
 536 0084 00       		.byte	0
 537 0085 00       		.byte	0
 538 0086 0B       		.uleb128 0xb
 539 0087 2E       		.uleb128 0x2e
 540 0088 01       		.byte	0x1
 541 0089 3F       		.uleb128 0x3f
 542 008a 19       		.uleb128 0x19
 543 008b 03       		.uleb128 0x3
 544 008c 0E       		.uleb128 0xe
 545 008d 3A       		.uleb128 0x3a
 546 008e 0B       		.uleb128 0xb
 547 008f 3B       		.uleb128 0x3b
 548 0090 0B       		.uleb128 0xb
 549 0091 27       		.uleb128 0x27
 550 0092 19       		.uleb128 0x19
 551 0093 11       		.uleb128 0x11
 552 0094 01       		.uleb128 0x1
 553 0095 12       		.uleb128 0x12
 554 0096 06       		.uleb128 0x6
 555 0097 40       		.uleb128 0x40
 556 0098 18       		.uleb128 0x18
 557 0099 9642     		.uleb128 0x2116
 558 009b 19       		.uleb128 0x19
 559 009c 00       		.byte	0
 560 009d 00       		.byte	0
 561 009e 0C       		.uleb128 0xc
 562 009f 05       		.uleb128 0x5
 563 00a0 00       		.byte	0
 564 00a1 03       		.uleb128 0x3
 565 00a2 0E       		.uleb128 0xe
 566 00a3 3A       		.uleb128 0x3a
 567 00a4 0B       		.uleb128 0xb
 568 00a5 3B       		.uleb128 0x3b
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 27


 569 00a6 0B       		.uleb128 0xb
 570 00a7 49       		.uleb128 0x49
 571 00a8 13       		.uleb128 0x13
 572 00a9 02       		.uleb128 0x2
 573 00aa 18       		.uleb128 0x18
 574 00ab 00       		.byte	0
 575 00ac 00       		.byte	0
 576 00ad 0D       		.uleb128 0xd
 577 00ae 34       		.uleb128 0x34
 578 00af 00       		.byte	0
 579 00b0 03       		.uleb128 0x3
 580 00b1 08       		.uleb128 0x8
 581 00b2 3A       		.uleb128 0x3a
 582 00b3 0B       		.uleb128 0xb
 583 00b4 3B       		.uleb128 0x3b
 584 00b5 0B       		.uleb128 0xb
 585 00b6 49       		.uleb128 0x49
 586 00b7 13       		.uleb128 0x13
 587 00b8 02       		.uleb128 0x2
 588 00b9 18       		.uleb128 0x18
 589 00ba 00       		.byte	0
 590 00bb 00       		.byte	0
 591 00bc 0E       		.uleb128 0xe
 592 00bd 34       		.uleb128 0x34
 593 00be 00       		.byte	0
 594 00bf 03       		.uleb128 0x3
 595 00c0 0E       		.uleb128 0xe
 596 00c1 3A       		.uleb128 0x3a
 597 00c2 0B       		.uleb128 0xb
 598 00c3 3B       		.uleb128 0x3b
 599 00c4 0B       		.uleb128 0xb
 600 00c5 49       		.uleb128 0x49
 601 00c6 13       		.uleb128 0x13
 602 00c7 02       		.uleb128 0x2
 603 00c8 18       		.uleb128 0x18
 604 00c9 00       		.byte	0
 605 00ca 00       		.byte	0
 606 00cb 0F       		.uleb128 0xf
 607 00cc 1D       		.uleb128 0x1d
 608 00cd 01       		.byte	0x1
 609 00ce 31       		.uleb128 0x31
 610 00cf 13       		.uleb128 0x13
 611 00d0 11       		.uleb128 0x11
 612 00d1 01       		.uleb128 0x1
 613 00d2 12       		.uleb128 0x12
 614 00d3 06       		.uleb128 0x6
 615 00d4 58       		.uleb128 0x58
 616 00d5 0B       		.uleb128 0xb
 617 00d6 59       		.uleb128 0x59
 618 00d7 0B       		.uleb128 0xb
 619 00d8 00       		.byte	0
 620 00d9 00       		.byte	0
 621 00da 10       		.uleb128 0x10
 622 00db 05       		.uleb128 0x5
 623 00dc 00       		.byte	0
 624 00dd 31       		.uleb128 0x31
 625 00de 13       		.uleb128 0x13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 28


 626 00df 02       		.uleb128 0x2
 627 00e0 18       		.uleb128 0x18
 628 00e1 00       		.byte	0
 629 00e2 00       		.byte	0
 630 00e3 11       		.uleb128 0x11
 631 00e4 0B       		.uleb128 0xb
 632 00e5 01       		.byte	0x1
 633 00e6 11       		.uleb128 0x11
 634 00e7 01       		.uleb128 0x1
 635 00e8 12       		.uleb128 0x12
 636 00e9 06       		.uleb128 0x6
 637 00ea 00       		.byte	0
 638 00eb 00       		.byte	0
 639 00ec 12       		.uleb128 0x12
 640 00ed 34       		.uleb128 0x34
 641 00ee 00       		.byte	0
 642 00ef 31       		.uleb128 0x31
 643 00f0 13       		.uleb128 0x13
 644 00f1 02       		.uleb128 0x2
 645 00f2 18       		.uleb128 0x18
 646 00f3 00       		.byte	0
 647 00f4 00       		.byte	0
 648 00f5 00       		.byte	0
 649              		.section	.debug_aranges,"",%progbits
 650 0000 1C000000 		.4byte	0x1c
 651 0004 0200     		.2byte	0x2
 652 0006 00000000 		.4byte	.Ldebug_info0
 653 000a 04       		.byte	0x4
 654 000b 00       		.byte	0
 655 000c 0000     		.2byte	0
 656 000e 0000     		.2byte	0
 657 0010 00000000 		.4byte	.LFB82
 658 0014 A6000000 		.4byte	.LFE82-.LFB82
 659 0018 00000000 		.4byte	0
 660 001c 00000000 		.4byte	0
 661              		.section	.debug_ranges,"",%progbits
 662              	.Ldebug_ranges0:
 663 0000 00000000 		.4byte	.LFB82
 664 0004 A6000000 		.4byte	.LFE82
 665 0008 00000000 		.4byte	0
 666 000c 00000000 		.4byte	0
 667              		.section	.debug_line,"",%progbits
 668              	.Ldebug_line0:
 669 0000 94010000 		.section	.debug_str,"MS",%progbits,1
 669      02005101 
 669      00000201 
 669      FB0E0D00 
 669      01010101 
 670              	.LASF4:
 671 0000 5F5F696E 		.ascii	"__int16_t\000"
 671      7431365F 
 671      7400
 672              	.LASF5:
 673 000a 5F5F696E 		.ascii	"__int32_t\000"
 673      7433325F 
 673      7400
 674              	.LASF31:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 29


 675 0014 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 675      73657273 
 675      5C666E65 
 675      7665735C 
 675      446F6375 
 676 0041 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 676      655F7370 
 676      6565645F 
 676      73656E73 
 676      6F722E63 
 677              	.LASF30:
 678 005a 536F7572 		.ascii	"Source\\SupportFunctions\\arm_float_to_q15.c\000"
 678      63655C53 
 678      7570706F 
 678      72744675 
 678      6E637469 
 679              	.LASF20:
 680 0085 7131355F 		.ascii	"q15_t\000"
 680      7400
 681              	.LASF18:
 682 008b 666C6F61 		.ascii	"float\000"
 682      7400
 683              	.LASF21:
 684 0091 7133315F 		.ascii	"q31_t\000"
 684      7400
 685              	.LASF1:
 686 0097 756E7369 		.ascii	"unsigned char\000"
 686      676E6564 
 686      20636861 
 686      7200
 687              	.LASF28:
 688 00a5 626C6B43 		.ascii	"blkCnt\000"
 688      6E7400
 689              	.LASF8:
 690 00ac 6C6F6E67 		.ascii	"long unsigned int\000"
 690      20756E73 
 690      69676E65 
 690      6420696E 
 690      7400
 691              	.LASF3:
 692 00be 73686F72 		.ascii	"short unsigned int\000"
 692      7420756E 
 692      7369676E 
 692      65642069 
 692      6E7400
 693              	.LASF26:
 694 00d1 70447374 		.ascii	"pDst\000"
 694      00
 695              	.LASF24:
 696 00d6 6E65674D 		.ascii	"negMin\000"
 696      696E00
 697              	.LASF17:
 698 00dd 646F7562 		.ascii	"double\000"
 698      6C6500
 699              	.LASF7:
 700 00e4 5F5F7569 		.ascii	"__uint32_t\000"
 700      6E743332 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 30


 700      5F7400
 701              	.LASF11:
 702 00ef 756E7369 		.ascii	"unsigned int\000"
 702      676E6564 
 702      20696E74 
 702      00
 703              	.LASF10:
 704 00fc 6C6F6E67 		.ascii	"long long unsigned int\000"
 704      206C6F6E 
 704      6720756E 
 704      7369676E 
 704      65642069 
 705              	.LASF29:
 706 0113 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 706      4320342E 
 706      392E3320 
 706      32303135 
 706      30333033 
 707 0146 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 707      20726576 
 707      6973696F 
 707      6E203232 
 707      31323230 
 708 0179 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 708      30202D66 
 708      66756E63 
 708      74696F6E 
 708      2D736563 
 709              	.LASF12:
 710 01a5 696E7431 		.ascii	"int16_t\000"
 710      365F7400 
 711              	.LASF32:
 712 01ad 5F5F5353 		.ascii	"__SSAT\000"
 712      415400
 713              	.LASF13:
 714 01b4 696E7433 		.ascii	"int32_t\000"
 714      325F7400 
 715              	.LASF15:
 716 01bc 73697A65 		.ascii	"sizetype\000"
 716      74797065 
 716      00
 717              	.LASF9:
 718 01c5 6C6F6E67 		.ascii	"long long int\000"
 718      206C6F6E 
 718      6720696E 
 718      7400
 719              	.LASF27:
 720 01d3 626C6F63 		.ascii	"blockSize\000"
 720      6B53697A 
 720      6500
 721              	.LASF16:
 722 01dd 63686172 		.ascii	"char\000"
 722      00
 723              	.LASF22:
 724 01e2 666C6F61 		.ascii	"float32_t\000"
 724      7433325F 
 724      7400
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cckFfxHB.s 			page 31


 725              	.LASF2:
 726 01ec 73686F72 		.ascii	"short int\000"
 726      7420696E 
 726      7400
 727              	.LASF23:
 728 01f6 706F734D 		.ascii	"posMax\000"
 728      617800
 729              	.LASF14:
 730 01fd 75696E74 		.ascii	"uint32_t\000"
 730      33325F74 
 730      00
 731              	.LASF6:
 732 0206 6C6F6E67 		.ascii	"long int\000"
 732      20696E74 
 732      00
 733              	.LASF19:
 734 020f 6C6F6E67 		.ascii	"long double\000"
 734      20646F75 
 734      626C6500 
 735              	.LASF0:
 736 021b 7369676E 		.ascii	"signed char\000"
 736      65642063 
 736      68617200 
 737              	.LASF25:
 738 0227 70537263 		.ascii	"pSrc\000"
 738      00
 739              	.LASF33:
 740 022c 61726D5F 		.ascii	"arm_float_to_q15\000"
 740      666C6F61 
 740      745F746F 
 740      5F713135 
 740      00
 741              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
