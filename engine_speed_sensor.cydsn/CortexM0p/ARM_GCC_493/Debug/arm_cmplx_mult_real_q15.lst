ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_cmplx_mult_real_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_cmplx_mult_real_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_cmplx_mult_real_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_cmplx_mult_real_q15, %function
  23              	arm_cmplx_mult_real_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\ComplexMathFunctions\\arm_cmplx_mult_real_q15.c"
   1:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** /* ----------------------------------------------------------------------
   2:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Title:        arm_cmplx_mult_real_q15.c
   4:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Description:  Q15 complex by real multiplication
   5:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  *
   6:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * $Date:        27. January 2017
   7:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * $Revision:    V.1.5.1
   8:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  *
   9:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** /*
  12:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  *
  14:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  *
  16:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * not use this file except in compliance with the License.
  18:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * You may obtain a copy of the License at
  19:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  *
  20:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  *
  22:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * limitations under the License.
  27:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  */
  28:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  29:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #include "arm_math.h"
  30:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  31:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** /**
  32:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * @ingroup groupCmplxMath
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 2


  33:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  */
  34:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  35:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** /**
  36:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * @addtogroup CmplxByRealMult
  37:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * @{
  38:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  */
  39:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  40:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  41:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** /**
  42:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * @brief  Q15 complex-by-real multiplication
  43:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * @param[in]  *pSrcCmplx points to the complex input vector
  44:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * @param[in]  *pSrcReal points to the real input vector
  45:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * @param[out]  *pCmplxDst points to the complex output vector
  46:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * @param[in]  numSamples number of samples in each vector
  47:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * @return none.
  48:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  *
  49:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * \par
  51:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * The function uses saturating arithmetic.
  52:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  * Results outside of the allowable Q15 range [0x8000 0x7FFF] will be saturated.
  53:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****  */
  54:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  55:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** void arm_cmplx_mult_real_q15(
  56:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   q15_t * pSrcCmplx,
  57:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   q15_t * pSrcReal,
  58:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   q15_t * pCmplxDst,
  59:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   uint32_t numSamples)
  60:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** {
  26              		.loc 1 60 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 90B0     		sub	sp, sp, #64
  33              		.cfi_def_cfa_offset 72
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 B960     		str	r1, [r7, #8]
  38 000a 7A60     		str	r2, [r7, #4]
  39 000c 3B60     		str	r3, [r7]
  61:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   q15_t in;                                      /* Temporary variable to store input value */
  62:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  63:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #if defined (ARM_MATH_DSP)
  64:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  65:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  66:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   uint32_t blkCnt;                               /* loop counters */
  67:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   q31_t inA1, inA2;                              /* Temporary variables to hold input data */
  68:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   q31_t inB1;                                    /* Temporary variables to hold input data */
  69:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   q15_t out1, out2, out3, out4;                  /* Temporary variables to hold output data */
  70:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   q31_t mul1, mul2, mul3, mul4;                  /* Temporary variables to hold intermediate data *
  71:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  72:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   /* loop Unrolling */
  73:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   blkCnt = numSamples >> 2u;
  74:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  75:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 3


  76:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  77:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   while (blkCnt > 0u)
  78:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   {
  79:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* C[2 * i] = A[2 * i] * B[i].            */
  80:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* C[2 * i + 1] = A[2 * i + 1] * B[i].        */
  81:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* read complex number both real and imaginary from complex input buffer */
  82:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     inA1 = *__SIMD32(pSrcCmplx)++;
  83:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* read two real values at a time from real input buffer */
  84:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     inB1 = *__SIMD32(pSrcReal)++;
  85:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* read complex number both real and imaginary from complex input buffer */
  86:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     inA2 = *__SIMD32(pSrcCmplx)++;
  87:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  88:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* multiply complex number with real numbers */
  89:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
  90:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  91:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul1 = (q31_t) ((q15_t) (inA1) * (q15_t) (inB1));
  92:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul2 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1));
  93:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul3 = (q31_t) ((q15_t) (inA2) * (q15_t) (inB1 >> 16));
  94:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul4 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) (inB1 >> 16));
  95:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  96:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #else
  97:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
  98:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul2 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1 >> 16));
  99:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul1 = (q31_t) ((q15_t) inA1 * (q15_t) (inB1 >> 16));
 100:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul4 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) inB1);
 101:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul3 = (q31_t) ((q15_t) inA2 * (q15_t) inB1);
 102:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 103:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 104:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 105:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* saturate the result */
 106:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out1 = (q15_t) __SSAT(mul1 >> 15u, 16);
 107:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out2 = (q15_t) __SSAT(mul2 >> 15u, 16);
 108:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out3 = (q15_t) __SSAT(mul3 >> 15u, 16);
 109:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out4 = (q15_t) __SSAT(mul4 >> 15u, 16);
 110:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 111:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* pack real and imaginary outputs and store them to destination */
 112:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *__SIMD32(pCmplxDst)++ = __PKHBT(out1, out2, 16);
 113:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *__SIMD32(pCmplxDst)++ = __PKHBT(out3, out4, 16);
 114:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 115:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     inA1 = *__SIMD32(pSrcCmplx)++;
 116:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     inB1 = *__SIMD32(pSrcReal)++;
 117:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     inA2 = *__SIMD32(pSrcCmplx)++;
 118:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 119:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 120:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 121:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul1 = (q31_t) ((q15_t) (inA1) * (q15_t) (inB1));
 122:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul2 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1));
 123:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul3 = (q31_t) ((q15_t) (inA2) * (q15_t) (inB1 >> 16));
 124:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul4 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) (inB1 >> 16));
 125:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 126:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #else
 127:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 128:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul2 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1 >> 16));
 129:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul1 = (q31_t) ((q15_t) inA1 * (q15_t) (inB1 >> 16));
 130:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul4 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) inB1);
 131:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     mul3 = (q31_t) ((q15_t) inA2 * (q15_t) inB1);
 132:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 4


 133:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #endif /* #ifndef ARM_MATH_BIG_ENDIAN */
 134:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 135:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out1 = (q15_t) __SSAT(mul1 >> 15u, 16);
 136:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out2 = (q15_t) __SSAT(mul2 >> 15u, 16);
 137:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out3 = (q15_t) __SSAT(mul3 >> 15u, 16);
 138:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     out4 = (q15_t) __SSAT(mul4 >> 15u, 16);
 139:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 140:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *__SIMD32(pCmplxDst)++ = __PKHBT(out1, out2, 16);
 141:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *__SIMD32(pCmplxDst)++ = __PKHBT(out3, out4, 16);
 142:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 143:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* Decrement the numSamples loop counter */
 144:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     blkCnt--;
 145:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   }
 146:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 147:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
 148:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****    ** No loop unrolling is used. */
 149:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   blkCnt = numSamples % 0x4u;
 150:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 151:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   while (blkCnt > 0u)
 152:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   {
 153:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* C[2 * i] = A[2 * i] * B[i].            */
 154:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* C[2 * i + 1] = A[2 * i + 1] * B[i].        */
 155:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     in = *pSrcReal++;
 156:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* store the result in the destination buffer. */
 157:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ =
 158:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****       (q15_t) __SSAT((((q31_t) (*pSrcCmplx++) * (in)) >> 15), 16);
 159:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ =
 160:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****       (q15_t) __SSAT((((q31_t) (*pSrcCmplx++) * (in)) >> 15), 16);
 161:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 162:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* Decrement the numSamples loop counter */
 163:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     blkCnt--;
 164:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   }
 165:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 166:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #else
 167:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 168:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   /* Run the below code for Cortex-M0 */
 169:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 170:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   while (numSamples > 0u)
  40              		.loc 1 170 0
  41 000e 81E0     		b	.L2
  42              	.L15:
 171:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   {
 172:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* realOut = realA * realB.            */
 173:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* imagOut = imagA * realB.                */
 174:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     in = *pSrcReal++;
  43              		.loc 1 174 0
  44 0010 BB68     		ldr	r3, [r7, #8]
  45 0012 9A1C     		add	r2, r3, #2
  46 0014 BA60     		str	r2, [r7, #8]
  47 0016 3E22     		mov	r2, #62
  48 0018 BA18     		add	r2, r7, r2
  49 001a 1B88     		ldrh	r3, [r3]
  50 001c 1380     		strh	r3, [r2]
 175:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* store the result in the destination buffer. */
 176:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ =
  51              		.loc 1 176 0
  52 001e 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 5


  53 0020 9A1C     		add	r2, r3, #2
  54 0022 7A60     		str	r2, [r7, #4]
 177:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****       (q15_t) __SSAT((((q31_t) (*pSrcCmplx++) * (in)) >> 15), 16);
  55              		.loc 1 177 0
  56 0024 FA68     		ldr	r2, [r7, #12]
  57 0026 911C     		add	r1, r2, #2
  58 0028 F960     		str	r1, [r7, #12]
  59 002a 1288     		ldrh	r2, [r2]
  60 002c 12B2     		sxth	r2, r2
  61 002e 3E21     		mov	r1, #62
  62 0030 7918     		add	r1, r7, r1
  63 0032 0020     		mov	r0, #0
  64 0034 095E     		ldrsh	r1, [r1, r0]
  65 0036 4A43     		mul	r2, r1
  66 0038 D213     		asr	r2, r2, #15
  67 003a BA63     		str	r2, [r7, #56]
  68 003c 1022     		mov	r2, #16
  69 003e 7A63     		str	r2, [r7, #52]
  70              	.LBB6:
  71              	.LBB7:
  72              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 6


  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 7


  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 8


 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 9


 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 10


 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 11


 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 12


 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 13


 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 14


 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 15


 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 16


 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 17


 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
  73              		.loc 2 699 0
  74 0040 0122     		mov	r2, #1
  75 0042 3A63     		str	r2, [r7, #48]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  76              		.loc 2 700 0
  77 0044 0022     		mov	r2, #0
  78 0046 FA62     		str	r2, [r7, #44]
  79 0048 05E0     		b	.L3
  80              	.L4:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
  81              		.loc 2 702 0
  82 004a 3A6B     		ldr	r2, [r7, #48]
  83 004c 5200     		lsl	r2, r2, #1
  84 004e 3A63     		str	r2, [r7, #48]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  85              		.loc 2 700 0
  86 0050 FA6A     		ldr	r2, [r7, #44]
  87 0052 0132     		add	r2, r2, #1
  88 0054 FA62     		str	r2, [r7, #44]
  89              	.L3:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 18


  90 0056 7A6B     		ldr	r2, [r7, #52]
  91 0058 013A     		sub	r2, r2, #1
  92 005a F96A     		ldr	r1, [r7, #44]
  93 005c 9142     		cmp	r1, r2
  94 005e F4D3     		bcc	.L4
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
  95              		.loc 2 705 0
  96 0060 BA6B     		ldr	r2, [r7, #56]
  97 0062 002A     		cmp	r2, #0
  98 0064 09DD     		ble	.L5
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
  99              		.loc 2 707 0
 100 0066 3A6B     		ldr	r2, [r7, #48]
 101 0068 013A     		sub	r2, r2, #1
 102 006a 3A63     		str	r2, [r7, #48]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 103              		.loc 2 709 0
 104 006c B96B     		ldr	r1, [r7, #56]
 105 006e 3A6B     		ldr	r2, [r7, #48]
 106 0070 9142     		cmp	r1, r2
 107 0072 0CDD     		ble	.L16
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 108              		.loc 2 711 0
 109 0074 3A6B     		ldr	r2, [r7, #48]
 110 0076 BA63     		str	r2, [r7, #56]
 111 0078 0AE0     		b	.L7
 112              	.L5:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 113              		.loc 2 716 0
 114 007a 3A6B     		ldr	r2, [r7, #48]
 115 007c 5242     		neg	r2, r2
 116 007e BA62     		str	r2, [r7, #40]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 117              		.loc 2 718 0
 118 0080 B96B     		ldr	r1, [r7, #56]
 119 0082 BA6A     		ldr	r2, [r7, #40]
 120 0084 9142     		cmp	r1, r2
 121 0086 03DA     		bge	.L7
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 122              		.loc 2 720 0
 123 0088 BA6A     		ldr	r2, [r7, #40]
 124 008a BA63     		str	r2, [r7, #56]
 125 008c 00E0     		b	.L7
 126              	.L16:
 711:.\Include/arm_math.h ****       }
 127              		.loc 2 711 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 19


 128 008e C046     		mov	r8, r8
 129              	.L7:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 130              		.loc 2 723 0
 131 0090 BA6B     		ldr	r2, [r7, #56]
 132              	.LBE7:
 133              	.LBE6:
 134              		.loc 1 177 0
 135 0092 92B2     		uxth	r2, r2
 176:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****       (q15_t) __SSAT((((q31_t) (*pSrcCmplx++) * (in)) >> 15), 16);
 136              		.loc 1 176 0
 137 0094 1A80     		strh	r2, [r3]
 178:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     *pCmplxDst++ =
 138              		.loc 1 178 0
 139 0096 7B68     		ldr	r3, [r7, #4]
 140 0098 9A1C     		add	r2, r3, #2
 141 009a 7A60     		str	r2, [r7, #4]
 179:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****       (q15_t) __SSAT((((q31_t) (*pSrcCmplx++) * (in)) >> 15), 16);
 142              		.loc 1 179 0
 143 009c FA68     		ldr	r2, [r7, #12]
 144 009e 911C     		add	r1, r2, #2
 145 00a0 F960     		str	r1, [r7, #12]
 146 00a2 1288     		ldrh	r2, [r2]
 147 00a4 12B2     		sxth	r2, r2
 148 00a6 3E21     		mov	r1, #62
 149 00a8 7918     		add	r1, r7, r1
 150 00aa 0020     		mov	r0, #0
 151 00ac 095E     		ldrsh	r1, [r1, r0]
 152 00ae 4A43     		mul	r2, r1
 153 00b0 D213     		asr	r2, r2, #15
 154 00b2 7A62     		str	r2, [r7, #36]
 155 00b4 1022     		mov	r2, #16
 156 00b6 3A62     		str	r2, [r7, #32]
 157              	.LBB8:
 158              	.LBB9:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 159              		.loc 2 699 0
 160 00b8 0122     		mov	r2, #1
 161 00ba FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     {
 162              		.loc 2 700 0
 163 00bc 0022     		mov	r2, #0
 164 00be BA61     		str	r2, [r7, #24]
 165 00c0 05E0     		b	.L9
 166              	.L10:
 702:.\Include/arm_math.h ****     }
 167              		.loc 2 702 0
 168 00c2 FA69     		ldr	r2, [r7, #28]
 169 00c4 5200     		lsl	r2, r2, #1
 170 00c6 FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     {
 171              		.loc 2 700 0
 172 00c8 BA69     		ldr	r2, [r7, #24]
 173 00ca 0132     		add	r2, r2, #1
 174 00cc BA61     		str	r2, [r7, #24]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 20


 175              	.L9:
 176 00ce 3A6A     		ldr	r2, [r7, #32]
 177 00d0 013A     		sub	r2, r2, #1
 178 00d2 B969     		ldr	r1, [r7, #24]
 179 00d4 9142     		cmp	r1, r2
 180 00d6 F4D3     		bcc	.L10
 705:.\Include/arm_math.h ****     {
 181              		.loc 2 705 0
 182 00d8 7A6A     		ldr	r2, [r7, #36]
 183 00da 002A     		cmp	r2, #0
 184 00dc 09DD     		ble	.L11
 707:.\Include/arm_math.h **** 
 185              		.loc 2 707 0
 186 00de FA69     		ldr	r2, [r7, #28]
 187 00e0 013A     		sub	r2, r2, #1
 188 00e2 FA61     		str	r2, [r7, #28]
 709:.\Include/arm_math.h ****       {
 189              		.loc 2 709 0
 190 00e4 796A     		ldr	r1, [r7, #36]
 191 00e6 FA69     		ldr	r2, [r7, #28]
 192 00e8 9142     		cmp	r1, r2
 193 00ea 0CDD     		ble	.L17
 711:.\Include/arm_math.h ****       }
 194              		.loc 2 711 0
 195 00ec FA69     		ldr	r2, [r7, #28]
 196 00ee 7A62     		str	r2, [r7, #36]
 197 00f0 0AE0     		b	.L13
 198              	.L11:
 716:.\Include/arm_math.h **** 
 199              		.loc 2 716 0
 200 00f2 FA69     		ldr	r2, [r7, #28]
 201 00f4 5242     		neg	r2, r2
 202 00f6 7A61     		str	r2, [r7, #20]
 718:.\Include/arm_math.h ****       {
 203              		.loc 2 718 0
 204 00f8 796A     		ldr	r1, [r7, #36]
 205 00fa 7A69     		ldr	r2, [r7, #20]
 206 00fc 9142     		cmp	r1, r2
 207 00fe 03DA     		bge	.L13
 720:.\Include/arm_math.h ****       }
 208              		.loc 2 720 0
 209 0100 7A69     		ldr	r2, [r7, #20]
 210 0102 7A62     		str	r2, [r7, #36]
 211 0104 00E0     		b	.L13
 212              	.L17:
 711:.\Include/arm_math.h ****       }
 213              		.loc 2 711 0
 214 0106 C046     		mov	r8, r8
 215              	.L13:
 216              		.loc 2 723 0
 217 0108 7A6A     		ldr	r2, [r7, #36]
 218              	.LBE9:
 219              	.LBE8:
 220              		.loc 1 179 0
 221 010a 92B2     		uxth	r2, r2
 178:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****       (q15_t) __SSAT((((q31_t) (*pSrcCmplx++) * (in)) >> 15), 16);
 222              		.loc 1 178 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 21


 223 010c 1A80     		strh	r2, [r3]
 180:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 181:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     /* Decrement the numSamples loop counter */
 182:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****     numSamples--;
 224              		.loc 1 182 0
 225 010e 3B68     		ldr	r3, [r7]
 226 0110 013B     		sub	r3, r3, #1
 227 0112 3B60     		str	r3, [r7]
 228              	.L2:
 170:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   {
 229              		.loc 1 170 0
 230 0114 3B68     		ldr	r3, [r7]
 231 0116 002B     		cmp	r3, #0
 232 0118 00D0     		beq	.LCB186
 233 011a 79E7     		b	.L15	@long jump
 234              	.LCB186:
 183:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c ****   }
 184:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 185:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 186:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** 
 187:Source\ComplexMathFunctions/arm_cmplx_mult_real_q15.c **** }
 235              		.loc 1 187 0
 236 011c BD46     		mov	sp, r7
 237 011e 10B0     		add	sp, sp, #64
 238              		@ sp needed
 239 0120 80BD     		pop	{r7, pc}
 240              		.cfi_endproc
 241              	.LFE82:
 242              		.size	arm_cmplx_mult_real_q15, .-arm_cmplx_mult_real_q15
 243 0122 C046     		.text
 244              	.Letext0:
 245              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 246              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 247              		.section	.debug_info,"",%progbits
 248              	.Ldebug_info0:
 249 0000 14020000 		.4byte	0x214
 250 0004 0400     		.2byte	0x4
 251 0006 00000000 		.4byte	.Ldebug_abbrev0
 252 000a 04       		.byte	0x4
 253 000b 01       		.uleb128 0x1
 254 000c 33010000 		.4byte	.LASF28
 255 0010 01       		.byte	0x1
 256 0011 B6000000 		.4byte	.LASF29
 257 0015 22000000 		.4byte	.LASF30
 258 0019 00000000 		.4byte	.Ldebug_ranges0+0
 259 001d 00000000 		.4byte	0
 260 0021 00000000 		.4byte	.Ldebug_line0
 261 0025 02       		.uleb128 0x2
 262 0026 01       		.byte	0x1
 263 0027 06       		.byte	0x6
 264 0028 3B020000 		.4byte	.LASF0
 265 002c 02       		.uleb128 0x2
 266 002d 01       		.byte	0x1
 267 002e 08       		.byte	0x8
 268 002f 83000000 		.4byte	.LASF1
 269 0033 03       		.uleb128 0x3
 270 0034 05010000 		.4byte	.LASF4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 22


 271 0038 03       		.byte	0x3
 272 0039 29       		.byte	0x29
 273 003a 3E000000 		.4byte	0x3e
 274 003e 02       		.uleb128 0x2
 275 003f 02       		.byte	0x2
 276 0040 05       		.byte	0x5
 277 0041 02020000 		.4byte	.LASF2
 278 0045 02       		.uleb128 0x2
 279 0046 02       		.byte	0x2
 280 0047 07       		.byte	0x7
 281 0048 A3000000 		.4byte	.LASF3
 282 004c 03       		.uleb128 0x3
 283 004d 18000000 		.4byte	.LASF5
 284 0051 03       		.byte	0x3
 285 0052 3F       		.byte	0x3f
 286 0053 57000000 		.4byte	0x57
 287 0057 02       		.uleb128 0x2
 288 0058 04       		.byte	0x4
 289 0059 05       		.byte	0x5
 290 005a 1C020000 		.4byte	.LASF6
 291 005e 03       		.uleb128 0x3
 292 005f FA000000 		.4byte	.LASF7
 293 0063 03       		.byte	0x3
 294 0064 41       		.byte	0x41
 295 0065 69000000 		.4byte	0x69
 296 0069 02       		.uleb128 0x2
 297 006a 04       		.byte	0x4
 298 006b 07       		.byte	0x7
 299 006c 91000000 		.4byte	.LASF8
 300 0070 02       		.uleb128 0x2
 301 0071 08       		.byte	0x8
 302 0072 05       		.byte	0x5
 303 0073 EF010000 		.4byte	.LASF9
 304 0077 02       		.uleb128 0x2
 305 0078 08       		.byte	0x8
 306 0079 07       		.byte	0x7
 307 007a 1C010000 		.4byte	.LASF10
 308 007e 04       		.uleb128 0x4
 309 007f 04       		.byte	0x4
 310 0080 05       		.byte	0x5
 311 0081 696E7400 		.ascii	"int\000"
 312 0085 02       		.uleb128 0x2
 313 0086 04       		.byte	0x4
 314 0087 07       		.byte	0x7
 315 0088 0F010000 		.4byte	.LASF11
 316 008c 03       		.uleb128 0x3
 317 008d CF010000 		.4byte	.LASF12
 318 0091 04       		.byte	0x4
 319 0092 20       		.byte	0x20
 320 0093 33000000 		.4byte	0x33
 321 0097 03       		.uleb128 0x3
 322 0098 DE010000 		.4byte	.LASF13
 323 009c 04       		.byte	0x4
 324 009d 2C       		.byte	0x2c
 325 009e 4C000000 		.4byte	0x4c
 326 00a2 03       		.uleb128 0x3
 327 00a3 13020000 		.4byte	.LASF14
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 23


 328 00a7 04       		.byte	0x4
 329 00a8 2D       		.byte	0x2d
 330 00a9 5E000000 		.4byte	0x5e
 331 00ad 02       		.uleb128 0x2
 332 00ae 04       		.byte	0x4
 333 00af 07       		.byte	0x7
 334 00b0 E6010000 		.4byte	.LASF15
 335 00b4 02       		.uleb128 0x2
 336 00b5 01       		.byte	0x1
 337 00b6 08       		.byte	0x8
 338 00b7 FD010000 		.4byte	.LASF16
 339 00bb 02       		.uleb128 0x2
 340 00bc 08       		.byte	0x8
 341 00bd 04       		.byte	0x4
 342 00be F3000000 		.4byte	.LASF17
 343 00c2 02       		.uleb128 0x2
 344 00c3 04       		.byte	0x4
 345 00c4 04       		.byte	0x4
 346 00c5 74000000 		.4byte	.LASF18
 347 00c9 02       		.uleb128 0x2
 348 00ca 08       		.byte	0x8
 349 00cb 04       		.byte	0x4
 350 00cc 2F020000 		.4byte	.LASF19
 351 00d0 05       		.uleb128 0x5
 352 00d1 6E000000 		.4byte	.LASF20
 353 00d5 02       		.byte	0x2
 354 00d6 9601     		.2byte	0x196
 355 00d8 8C000000 		.4byte	0x8c
 356 00dc 05       		.uleb128 0x5
 357 00dd 68000000 		.4byte	.LASF21
 358 00e1 02       		.byte	0x2
 359 00e2 9B01     		.2byte	0x19b
 360 00e4 97000000 		.4byte	0x97
 361 00e8 06       		.uleb128 0x6
 362 00e9 04       		.byte	0x4
 363 00ea D0000000 		.4byte	0xd0
 364 00ee 07       		.uleb128 0x7
 365 00ef D7010000 		.4byte	.LASF31
 366 00f3 02       		.byte	0x2
 367 00f4 B402     		.2byte	0x2b4
 368 00f6 DC000000 		.4byte	0xdc
 369 00fa 03       		.byte	0x3
 370 00fb 36010000 		.4byte	0x136
 371 00ff 08       		.uleb128 0x8
 372 0100 7800     		.ascii	"x\000"
 373 0102 02       		.byte	0x2
 374 0103 B502     		.2byte	0x2b5
 375 0105 DC000000 		.4byte	0xdc
 376 0109 08       		.uleb128 0x8
 377 010a 7900     		.ascii	"y\000"
 378 010c 02       		.byte	0x2
 379 010d B602     		.2byte	0x2b6
 380 010f A2000000 		.4byte	0xa2
 381 0113 09       		.uleb128 0x9
 382 0114 0C020000 		.4byte	.LASF22
 383 0118 02       		.byte	0x2
 384 0119 B802     		.2byte	0x2b8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 24


 385 011b 97000000 		.4byte	0x97
 386 011f 09       		.uleb128 0x9
 387 0120 EC000000 		.4byte	.LASF23
 388 0124 02       		.byte	0x2
 389 0125 B802     		.2byte	0x2b8
 390 0127 97000000 		.4byte	0x97
 391 012b 0A       		.uleb128 0xa
 392 012c 6900     		.ascii	"i\000"
 393 012e 02       		.byte	0x2
 394 012f B902     		.2byte	0x2b9
 395 0131 A2000000 		.4byte	0xa2
 396 0135 00       		.byte	0
 397 0136 0B       		.uleb128 0xb
 398 0137 00000000 		.4byte	.LASF32
 399 013b 01       		.byte	0x1
 400 013c 37       		.byte	0x37
 401 013d 00000000 		.4byte	.LFB82
 402 0141 22010000 		.4byte	.LFE82-.LFB82
 403 0145 01       		.uleb128 0x1
 404 0146 9C       		.byte	0x9c
 405 0147 0C       		.uleb128 0xc
 406 0148 25020000 		.4byte	.LASF24
 407 014c 01       		.byte	0x1
 408 014d 38       		.byte	0x38
 409 014e E8000000 		.4byte	0xe8
 410 0152 02       		.uleb128 0x2
 411 0153 91       		.byte	0x91
 412 0154 44       		.sleb128 -60
 413 0155 0C       		.uleb128 0xc
 414 0156 7A000000 		.4byte	.LASF25
 415 015a 01       		.byte	0x1
 416 015b 39       		.byte	0x39
 417 015c E8000000 		.4byte	0xe8
 418 0160 02       		.uleb128 0x2
 419 0161 91       		.byte	0x91
 420 0162 40       		.sleb128 -64
 421 0163 0C       		.uleb128 0xc
 422 0164 C5010000 		.4byte	.LASF26
 423 0168 01       		.byte	0x1
 424 0169 3A       		.byte	0x3a
 425 016a E8000000 		.4byte	0xe8
 426 016e 03       		.uleb128 0x3
 427 016f 91       		.byte	0x91
 428 0170 BC7F     		.sleb128 -68
 429 0172 0C       		.uleb128 0xc
 430 0173 47020000 		.4byte	.LASF27
 431 0177 01       		.byte	0x1
 432 0178 3B       		.byte	0x3b
 433 0179 A2000000 		.4byte	0xa2
 434 017d 03       		.uleb128 0x3
 435 017e 91       		.byte	0x91
 436 017f B87F     		.sleb128 -72
 437 0181 0D       		.uleb128 0xd
 438 0182 696E00   		.ascii	"in\000"
 439 0185 01       		.byte	0x1
 440 0186 3D       		.byte	0x3d
 441 0187 D0000000 		.4byte	0xd0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 25


 442 018b 02       		.uleb128 0x2
 443 018c 91       		.byte	0x91
 444 018d 76       		.sleb128 -10
 445 018e 0E       		.uleb128 0xe
 446 018f EE000000 		.4byte	0xee
 447 0193 40000000 		.4byte	.LBB6
 448 0197 52000000 		.4byte	.LBE6-.LBB6
 449 019b 01       		.byte	0x1
 450 019c B1       		.byte	0xb1
 451 019d D4010000 		.4byte	0x1d4
 452 01a1 0F       		.uleb128 0xf
 453 01a2 09010000 		.4byte	0x109
 454 01a6 02       		.uleb128 0x2
 455 01a7 91       		.byte	0x91
 456 01a8 6C       		.sleb128 -20
 457 01a9 0F       		.uleb128 0xf
 458 01aa FF000000 		.4byte	0xff
 459 01ae 02       		.uleb128 0x2
 460 01af 91       		.byte	0x91
 461 01b0 70       		.sleb128 -16
 462 01b1 10       		.uleb128 0x10
 463 01b2 40000000 		.4byte	.LBB7
 464 01b6 52000000 		.4byte	.LBE7-.LBB7
 465 01ba 11       		.uleb128 0x11
 466 01bb 13010000 		.4byte	0x113
 467 01bf 02       		.uleb128 0x2
 468 01c0 91       		.byte	0x91
 469 01c1 68       		.sleb128 -24
 470 01c2 11       		.uleb128 0x11
 471 01c3 1F010000 		.4byte	0x11f
 472 01c7 02       		.uleb128 0x2
 473 01c8 91       		.byte	0x91
 474 01c9 60       		.sleb128 -32
 475 01ca 11       		.uleb128 0x11
 476 01cb 2B010000 		.4byte	0x12b
 477 01cf 02       		.uleb128 0x2
 478 01d0 91       		.byte	0x91
 479 01d1 64       		.sleb128 -28
 480 01d2 00       		.byte	0
 481 01d3 00       		.byte	0
 482 01d4 12       		.uleb128 0x12
 483 01d5 EE000000 		.4byte	0xee
 484 01d9 B8000000 		.4byte	.LBB8
 485 01dd 52000000 		.4byte	.LBE8-.LBB8
 486 01e1 01       		.byte	0x1
 487 01e2 B3       		.byte	0xb3
 488 01e3 0F       		.uleb128 0xf
 489 01e4 09010000 		.4byte	0x109
 490 01e8 02       		.uleb128 0x2
 491 01e9 91       		.byte	0x91
 492 01ea 58       		.sleb128 -40
 493 01eb 0F       		.uleb128 0xf
 494 01ec FF000000 		.4byte	0xff
 495 01f0 02       		.uleb128 0x2
 496 01f1 91       		.byte	0x91
 497 01f2 5C       		.sleb128 -36
 498 01f3 10       		.uleb128 0x10
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 26


 499 01f4 B8000000 		.4byte	.LBB9
 500 01f8 52000000 		.4byte	.LBE9-.LBB9
 501 01fc 11       		.uleb128 0x11
 502 01fd 13010000 		.4byte	0x113
 503 0201 02       		.uleb128 0x2
 504 0202 91       		.byte	0x91
 505 0203 54       		.sleb128 -44
 506 0204 11       		.uleb128 0x11
 507 0205 1F010000 		.4byte	0x11f
 508 0209 02       		.uleb128 0x2
 509 020a 91       		.byte	0x91
 510 020b 4C       		.sleb128 -52
 511 020c 11       		.uleb128 0x11
 512 020d 2B010000 		.4byte	0x12b
 513 0211 02       		.uleb128 0x2
 514 0212 91       		.byte	0x91
 515 0213 50       		.sleb128 -48
 516 0214 00       		.byte	0
 517 0215 00       		.byte	0
 518 0216 00       		.byte	0
 519 0217 00       		.byte	0
 520              		.section	.debug_abbrev,"",%progbits
 521              	.Ldebug_abbrev0:
 522 0000 01       		.uleb128 0x1
 523 0001 11       		.uleb128 0x11
 524 0002 01       		.byte	0x1
 525 0003 25       		.uleb128 0x25
 526 0004 0E       		.uleb128 0xe
 527 0005 13       		.uleb128 0x13
 528 0006 0B       		.uleb128 0xb
 529 0007 03       		.uleb128 0x3
 530 0008 0E       		.uleb128 0xe
 531 0009 1B       		.uleb128 0x1b
 532 000a 0E       		.uleb128 0xe
 533 000b 55       		.uleb128 0x55
 534 000c 17       		.uleb128 0x17
 535 000d 11       		.uleb128 0x11
 536 000e 01       		.uleb128 0x1
 537 000f 10       		.uleb128 0x10
 538 0010 17       		.uleb128 0x17
 539 0011 00       		.byte	0
 540 0012 00       		.byte	0
 541 0013 02       		.uleb128 0x2
 542 0014 24       		.uleb128 0x24
 543 0015 00       		.byte	0
 544 0016 0B       		.uleb128 0xb
 545 0017 0B       		.uleb128 0xb
 546 0018 3E       		.uleb128 0x3e
 547 0019 0B       		.uleb128 0xb
 548 001a 03       		.uleb128 0x3
 549 001b 0E       		.uleb128 0xe
 550 001c 00       		.byte	0
 551 001d 00       		.byte	0
 552 001e 03       		.uleb128 0x3
 553 001f 16       		.uleb128 0x16
 554 0020 00       		.byte	0
 555 0021 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 27


 556 0022 0E       		.uleb128 0xe
 557 0023 3A       		.uleb128 0x3a
 558 0024 0B       		.uleb128 0xb
 559 0025 3B       		.uleb128 0x3b
 560 0026 0B       		.uleb128 0xb
 561 0027 49       		.uleb128 0x49
 562 0028 13       		.uleb128 0x13
 563 0029 00       		.byte	0
 564 002a 00       		.byte	0
 565 002b 04       		.uleb128 0x4
 566 002c 24       		.uleb128 0x24
 567 002d 00       		.byte	0
 568 002e 0B       		.uleb128 0xb
 569 002f 0B       		.uleb128 0xb
 570 0030 3E       		.uleb128 0x3e
 571 0031 0B       		.uleb128 0xb
 572 0032 03       		.uleb128 0x3
 573 0033 08       		.uleb128 0x8
 574 0034 00       		.byte	0
 575 0035 00       		.byte	0
 576 0036 05       		.uleb128 0x5
 577 0037 16       		.uleb128 0x16
 578 0038 00       		.byte	0
 579 0039 03       		.uleb128 0x3
 580 003a 0E       		.uleb128 0xe
 581 003b 3A       		.uleb128 0x3a
 582 003c 0B       		.uleb128 0xb
 583 003d 3B       		.uleb128 0x3b
 584 003e 05       		.uleb128 0x5
 585 003f 49       		.uleb128 0x49
 586 0040 13       		.uleb128 0x13
 587 0041 00       		.byte	0
 588 0042 00       		.byte	0
 589 0043 06       		.uleb128 0x6
 590 0044 0F       		.uleb128 0xf
 591 0045 00       		.byte	0
 592 0046 0B       		.uleb128 0xb
 593 0047 0B       		.uleb128 0xb
 594 0048 49       		.uleb128 0x49
 595 0049 13       		.uleb128 0x13
 596 004a 00       		.byte	0
 597 004b 00       		.byte	0
 598 004c 07       		.uleb128 0x7
 599 004d 2E       		.uleb128 0x2e
 600 004e 01       		.byte	0x1
 601 004f 03       		.uleb128 0x3
 602 0050 0E       		.uleb128 0xe
 603 0051 3A       		.uleb128 0x3a
 604 0052 0B       		.uleb128 0xb
 605 0053 3B       		.uleb128 0x3b
 606 0054 05       		.uleb128 0x5
 607 0055 27       		.uleb128 0x27
 608 0056 19       		.uleb128 0x19
 609 0057 49       		.uleb128 0x49
 610 0058 13       		.uleb128 0x13
 611 0059 20       		.uleb128 0x20
 612 005a 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 28


 613 005b 01       		.uleb128 0x1
 614 005c 13       		.uleb128 0x13
 615 005d 00       		.byte	0
 616 005e 00       		.byte	0
 617 005f 08       		.uleb128 0x8
 618 0060 05       		.uleb128 0x5
 619 0061 00       		.byte	0
 620 0062 03       		.uleb128 0x3
 621 0063 08       		.uleb128 0x8
 622 0064 3A       		.uleb128 0x3a
 623 0065 0B       		.uleb128 0xb
 624 0066 3B       		.uleb128 0x3b
 625 0067 05       		.uleb128 0x5
 626 0068 49       		.uleb128 0x49
 627 0069 13       		.uleb128 0x13
 628 006a 00       		.byte	0
 629 006b 00       		.byte	0
 630 006c 09       		.uleb128 0x9
 631 006d 34       		.uleb128 0x34
 632 006e 00       		.byte	0
 633 006f 03       		.uleb128 0x3
 634 0070 0E       		.uleb128 0xe
 635 0071 3A       		.uleb128 0x3a
 636 0072 0B       		.uleb128 0xb
 637 0073 3B       		.uleb128 0x3b
 638 0074 05       		.uleb128 0x5
 639 0075 49       		.uleb128 0x49
 640 0076 13       		.uleb128 0x13
 641 0077 00       		.byte	0
 642 0078 00       		.byte	0
 643 0079 0A       		.uleb128 0xa
 644 007a 34       		.uleb128 0x34
 645 007b 00       		.byte	0
 646 007c 03       		.uleb128 0x3
 647 007d 08       		.uleb128 0x8
 648 007e 3A       		.uleb128 0x3a
 649 007f 0B       		.uleb128 0xb
 650 0080 3B       		.uleb128 0x3b
 651 0081 05       		.uleb128 0x5
 652 0082 49       		.uleb128 0x49
 653 0083 13       		.uleb128 0x13
 654 0084 00       		.byte	0
 655 0085 00       		.byte	0
 656 0086 0B       		.uleb128 0xb
 657 0087 2E       		.uleb128 0x2e
 658 0088 01       		.byte	0x1
 659 0089 3F       		.uleb128 0x3f
 660 008a 19       		.uleb128 0x19
 661 008b 03       		.uleb128 0x3
 662 008c 0E       		.uleb128 0xe
 663 008d 3A       		.uleb128 0x3a
 664 008e 0B       		.uleb128 0xb
 665 008f 3B       		.uleb128 0x3b
 666 0090 0B       		.uleb128 0xb
 667 0091 27       		.uleb128 0x27
 668 0092 19       		.uleb128 0x19
 669 0093 11       		.uleb128 0x11
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 29


 670 0094 01       		.uleb128 0x1
 671 0095 12       		.uleb128 0x12
 672 0096 06       		.uleb128 0x6
 673 0097 40       		.uleb128 0x40
 674 0098 18       		.uleb128 0x18
 675 0099 9742     		.uleb128 0x2117
 676 009b 19       		.uleb128 0x19
 677 009c 00       		.byte	0
 678 009d 00       		.byte	0
 679 009e 0C       		.uleb128 0xc
 680 009f 05       		.uleb128 0x5
 681 00a0 00       		.byte	0
 682 00a1 03       		.uleb128 0x3
 683 00a2 0E       		.uleb128 0xe
 684 00a3 3A       		.uleb128 0x3a
 685 00a4 0B       		.uleb128 0xb
 686 00a5 3B       		.uleb128 0x3b
 687 00a6 0B       		.uleb128 0xb
 688 00a7 49       		.uleb128 0x49
 689 00a8 13       		.uleb128 0x13
 690 00a9 02       		.uleb128 0x2
 691 00aa 18       		.uleb128 0x18
 692 00ab 00       		.byte	0
 693 00ac 00       		.byte	0
 694 00ad 0D       		.uleb128 0xd
 695 00ae 34       		.uleb128 0x34
 696 00af 00       		.byte	0
 697 00b0 03       		.uleb128 0x3
 698 00b1 08       		.uleb128 0x8
 699 00b2 3A       		.uleb128 0x3a
 700 00b3 0B       		.uleb128 0xb
 701 00b4 3B       		.uleb128 0x3b
 702 00b5 0B       		.uleb128 0xb
 703 00b6 49       		.uleb128 0x49
 704 00b7 13       		.uleb128 0x13
 705 00b8 02       		.uleb128 0x2
 706 00b9 18       		.uleb128 0x18
 707 00ba 00       		.byte	0
 708 00bb 00       		.byte	0
 709 00bc 0E       		.uleb128 0xe
 710 00bd 1D       		.uleb128 0x1d
 711 00be 01       		.byte	0x1
 712 00bf 31       		.uleb128 0x31
 713 00c0 13       		.uleb128 0x13
 714 00c1 11       		.uleb128 0x11
 715 00c2 01       		.uleb128 0x1
 716 00c3 12       		.uleb128 0x12
 717 00c4 06       		.uleb128 0x6
 718 00c5 58       		.uleb128 0x58
 719 00c6 0B       		.uleb128 0xb
 720 00c7 59       		.uleb128 0x59
 721 00c8 0B       		.uleb128 0xb
 722 00c9 01       		.uleb128 0x1
 723 00ca 13       		.uleb128 0x13
 724 00cb 00       		.byte	0
 725 00cc 00       		.byte	0
 726 00cd 0F       		.uleb128 0xf
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 30


 727 00ce 05       		.uleb128 0x5
 728 00cf 00       		.byte	0
 729 00d0 31       		.uleb128 0x31
 730 00d1 13       		.uleb128 0x13
 731 00d2 02       		.uleb128 0x2
 732 00d3 18       		.uleb128 0x18
 733 00d4 00       		.byte	0
 734 00d5 00       		.byte	0
 735 00d6 10       		.uleb128 0x10
 736 00d7 0B       		.uleb128 0xb
 737 00d8 01       		.byte	0x1
 738 00d9 11       		.uleb128 0x11
 739 00da 01       		.uleb128 0x1
 740 00db 12       		.uleb128 0x12
 741 00dc 06       		.uleb128 0x6
 742 00dd 00       		.byte	0
 743 00de 00       		.byte	0
 744 00df 11       		.uleb128 0x11
 745 00e0 34       		.uleb128 0x34
 746 00e1 00       		.byte	0
 747 00e2 31       		.uleb128 0x31
 748 00e3 13       		.uleb128 0x13
 749 00e4 02       		.uleb128 0x2
 750 00e5 18       		.uleb128 0x18
 751 00e6 00       		.byte	0
 752 00e7 00       		.byte	0
 753 00e8 12       		.uleb128 0x12
 754 00e9 1D       		.uleb128 0x1d
 755 00ea 01       		.byte	0x1
 756 00eb 31       		.uleb128 0x31
 757 00ec 13       		.uleb128 0x13
 758 00ed 11       		.uleb128 0x11
 759 00ee 01       		.uleb128 0x1
 760 00ef 12       		.uleb128 0x12
 761 00f0 06       		.uleb128 0x6
 762 00f1 58       		.uleb128 0x58
 763 00f2 0B       		.uleb128 0xb
 764 00f3 59       		.uleb128 0x59
 765 00f4 0B       		.uleb128 0xb
 766 00f5 00       		.byte	0
 767 00f6 00       		.byte	0
 768 00f7 00       		.byte	0
 769              		.section	.debug_aranges,"",%progbits
 770 0000 1C000000 		.4byte	0x1c
 771 0004 0200     		.2byte	0x2
 772 0006 00000000 		.4byte	.Ldebug_info0
 773 000a 04       		.byte	0x4
 774 000b 00       		.byte	0
 775 000c 0000     		.2byte	0
 776 000e 0000     		.2byte	0
 777 0010 00000000 		.4byte	.LFB82
 778 0014 22010000 		.4byte	.LFE82-.LFB82
 779 0018 00000000 		.4byte	0
 780 001c 00000000 		.4byte	0
 781              		.section	.debug_ranges,"",%progbits
 782              	.Ldebug_ranges0:
 783 0000 00000000 		.4byte	.LFB82
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 31


 784 0004 22010000 		.4byte	.LFE82
 785 0008 00000000 		.4byte	0
 786 000c 00000000 		.4byte	0
 787              		.section	.debug_line,"",%progbits
 788              	.Ldebug_line0:
 789 0000 BB010000 		.section	.debug_str,"MS",%progbits,1
 789      02005C01 
 789      00000201 
 789      FB0E0D00 
 789      01010101 
 790              	.LASF32:
 791 0000 61726D5F 		.ascii	"arm_cmplx_mult_real_q15\000"
 791      636D706C 
 791      785F6D75 
 791      6C745F72 
 791      65616C5F 
 792              	.LASF5:
 793 0018 5F5F696E 		.ascii	"__int32_t\000"
 793      7433325F 
 793      7400
 794              	.LASF30:
 795 0022 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 795      73657273 
 795      5C666E65 
 795      7665735C 
 795      446F6375 
 796 004f 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 796      655F7370 
 796      6565645F 
 796      73656E73 
 796      6F722E63 
 797              	.LASF21:
 798 0068 7133315F 		.ascii	"q31_t\000"
 798      7400
 799              	.LASF20:
 800 006e 7131355F 		.ascii	"q15_t\000"
 800      7400
 801              	.LASF18:
 802 0074 666C6F61 		.ascii	"float\000"
 802      7400
 803              	.LASF25:
 804 007a 70537263 		.ascii	"pSrcReal\000"
 804      5265616C 
 804      00
 805              	.LASF1:
 806 0083 756E7369 		.ascii	"unsigned char\000"
 806      676E6564 
 806      20636861 
 806      7200
 807              	.LASF8:
 808 0091 6C6F6E67 		.ascii	"long unsigned int\000"
 808      20756E73 
 808      69676E65 
 808      6420696E 
 808      7400
 809              	.LASF3:
 810 00a3 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 32


 810      7420756E 
 810      7369676E 
 810      65642069 
 810      6E7400
 811              	.LASF29:
 812 00b6 536F7572 		.ascii	"Source\\ComplexMathFunctions\\arm_cmplx_mult_real_q"
 812      63655C43 
 812      6F6D706C 
 812      65784D61 
 812      74684675 
 813 00e7 31352E63 		.ascii	"15.c\000"
 813      00
 814              	.LASF23:
 815 00ec 6E65674D 		.ascii	"negMin\000"
 815      696E00
 816              	.LASF17:
 817 00f3 646F7562 		.ascii	"double\000"
 817      6C6500
 818              	.LASF7:
 819 00fa 5F5F7569 		.ascii	"__uint32_t\000"
 819      6E743332 
 819      5F7400
 820              	.LASF4:
 821 0105 5F5F696E 		.ascii	"__int16_t\000"
 821      7431365F 
 821      7400
 822              	.LASF11:
 823 010f 756E7369 		.ascii	"unsigned int\000"
 823      676E6564 
 823      20696E74 
 823      00
 824              	.LASF10:
 825 011c 6C6F6E67 		.ascii	"long long unsigned int\000"
 825      206C6F6E 
 825      6720756E 
 825      7369676E 
 825      65642069 
 826              	.LASF28:
 827 0133 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 827      4320342E 
 827      392E3320 
 827      32303135 
 827      30333033 
 828 0166 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 828      20726576 
 828      6973696F 
 828      6E203232 
 828      31323230 
 829 0199 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 829      30202D66 
 829      66756E63 
 829      74696F6E 
 829      2D736563 
 830              	.LASF26:
 831 01c5 70436D70 		.ascii	"pCmplxDst\000"
 831      6C784473 
 831      7400
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc8BNHjn.s 			page 33


 832              	.LASF12:
 833 01cf 696E7431 		.ascii	"int16_t\000"
 833      365F7400 
 834              	.LASF31:
 835 01d7 5F5F5353 		.ascii	"__SSAT\000"
 835      415400
 836              	.LASF13:
 837 01de 696E7433 		.ascii	"int32_t\000"
 837      325F7400 
 838              	.LASF15:
 839 01e6 73697A65 		.ascii	"sizetype\000"
 839      74797065 
 839      00
 840              	.LASF9:
 841 01ef 6C6F6E67 		.ascii	"long long int\000"
 841      206C6F6E 
 841      6720696E 
 841      7400
 842              	.LASF16:
 843 01fd 63686172 		.ascii	"char\000"
 843      00
 844              	.LASF2:
 845 0202 73686F72 		.ascii	"short int\000"
 845      7420696E 
 845      7400
 846              	.LASF22:
 847 020c 706F734D 		.ascii	"posMax\000"
 847      617800
 848              	.LASF14:
 849 0213 75696E74 		.ascii	"uint32_t\000"
 849      33325F74 
 849      00
 850              	.LASF6:
 851 021c 6C6F6E67 		.ascii	"long int\000"
 851      20696E74 
 851      00
 852              	.LASF24:
 853 0225 70537263 		.ascii	"pSrcCmplx\000"
 853      436D706C 
 853      7800
 854              	.LASF19:
 855 022f 6C6F6E67 		.ascii	"long double\000"
 855      20646F75 
 855      626C6500 
 856              	.LASF0:
 857 023b 7369676E 		.ascii	"signed char\000"
 857      65642063 
 857      68617200 
 858              	.LASF27:
 859 0247 6E756D53 		.ascii	"numSamples\000"
 859      616D706C 
 859      657300
 860              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
