ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_shift_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_shift_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_shift_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_shift_q15, %function
  23              	arm_shift_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\BasicMathFunctions\\arm_shift_q15.c"
   1:Source\BasicMathFunctions/arm_shift_q15.c **** /* ----------------------------------------------------------------------
   2:Source\BasicMathFunctions/arm_shift_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\BasicMathFunctions/arm_shift_q15.c ****  * Title:        arm_shift_q15.c
   4:Source\BasicMathFunctions/arm_shift_q15.c ****  * Description:  Shifts the elements of a Q15 vector by a specified number of bits
   5:Source\BasicMathFunctions/arm_shift_q15.c ****  *
   6:Source\BasicMathFunctions/arm_shift_q15.c ****  * $Date:        27. January 2017
   7:Source\BasicMathFunctions/arm_shift_q15.c ****  * $Revision:    V.1.5.1
   8:Source\BasicMathFunctions/arm_shift_q15.c ****  *
   9:Source\BasicMathFunctions/arm_shift_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\BasicMathFunctions/arm_shift_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\BasicMathFunctions/arm_shift_q15.c **** /*
  12:Source\BasicMathFunctions/arm_shift_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\BasicMathFunctions/arm_shift_q15.c ****  *
  14:Source\BasicMathFunctions/arm_shift_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\BasicMathFunctions/arm_shift_q15.c ****  *
  16:Source\BasicMathFunctions/arm_shift_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\BasicMathFunctions/arm_shift_q15.c ****  * not use this file except in compliance with the License.
  18:Source\BasicMathFunctions/arm_shift_q15.c ****  * You may obtain a copy of the License at
  19:Source\BasicMathFunctions/arm_shift_q15.c ****  *
  20:Source\BasicMathFunctions/arm_shift_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\BasicMathFunctions/arm_shift_q15.c ****  *
  22:Source\BasicMathFunctions/arm_shift_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\BasicMathFunctions/arm_shift_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\BasicMathFunctions/arm_shift_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\BasicMathFunctions/arm_shift_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\BasicMathFunctions/arm_shift_q15.c ****  * limitations under the License.
  27:Source\BasicMathFunctions/arm_shift_q15.c ****  */
  28:Source\BasicMathFunctions/arm_shift_q15.c **** 
  29:Source\BasicMathFunctions/arm_shift_q15.c **** #include "arm_math.h"
  30:Source\BasicMathFunctions/arm_shift_q15.c **** 
  31:Source\BasicMathFunctions/arm_shift_q15.c **** /**
  32:Source\BasicMathFunctions/arm_shift_q15.c ****  * @ingroup groupMath
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 2


  33:Source\BasicMathFunctions/arm_shift_q15.c ****  */
  34:Source\BasicMathFunctions/arm_shift_q15.c **** 
  35:Source\BasicMathFunctions/arm_shift_q15.c **** /**
  36:Source\BasicMathFunctions/arm_shift_q15.c ****  * @addtogroup shift
  37:Source\BasicMathFunctions/arm_shift_q15.c ****  * @{
  38:Source\BasicMathFunctions/arm_shift_q15.c ****  */
  39:Source\BasicMathFunctions/arm_shift_q15.c **** 
  40:Source\BasicMathFunctions/arm_shift_q15.c **** /**
  41:Source\BasicMathFunctions/arm_shift_q15.c ****  * @brief  Shifts the elements of a Q15 vector a specified number of bits.
  42:Source\BasicMathFunctions/arm_shift_q15.c ****  * @param[in]  *pSrc points to the input vector
  43:Source\BasicMathFunctions/arm_shift_q15.c ****  * @param[in]  shiftBits number of bits to shift.  A positive value shifts left; a negative value s
  44:Source\BasicMathFunctions/arm_shift_q15.c ****  * @param[out]  *pDst points to the output vector
  45:Source\BasicMathFunctions/arm_shift_q15.c ****  * @param[in]  blockSize number of samples in the vector
  46:Source\BasicMathFunctions/arm_shift_q15.c ****  * @return none.
  47:Source\BasicMathFunctions/arm_shift_q15.c ****  *
  48:Source\BasicMathFunctions/arm_shift_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  49:Source\BasicMathFunctions/arm_shift_q15.c ****  * \par
  50:Source\BasicMathFunctions/arm_shift_q15.c ****  * The function uses saturating arithmetic.
  51:Source\BasicMathFunctions/arm_shift_q15.c ****  * Results outside of the allowable Q15 range [0x8000 0x7FFF] will be saturated.
  52:Source\BasicMathFunctions/arm_shift_q15.c ****  */
  53:Source\BasicMathFunctions/arm_shift_q15.c **** 
  54:Source\BasicMathFunctions/arm_shift_q15.c **** void arm_shift_q15(
  55:Source\BasicMathFunctions/arm_shift_q15.c ****   q15_t * pSrc,
  56:Source\BasicMathFunctions/arm_shift_q15.c ****   int8_t shiftBits,
  57:Source\BasicMathFunctions/arm_shift_q15.c ****   q15_t * pDst,
  58:Source\BasicMathFunctions/arm_shift_q15.c ****   uint32_t blockSize)
  59:Source\BasicMathFunctions/arm_shift_q15.c **** {
  26              		.loc 1 59 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 8CB0     		sub	sp, sp, #48
  33              		.cfi_def_cfa_offset 56
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 7A60     		str	r2, [r7, #4]
  38 000a 3B60     		str	r3, [r7]
  39 000c 0B23     		mov	r3, #11
  40 000e FB18     		add	r3, r7, r3
  41 0010 0A1C     		add	r2, r1, #0
  42 0012 1A70     		strb	r2, [r3]
  60:Source\BasicMathFunctions/arm_shift_q15.c ****   uint32_t blkCnt;                               /* loop counter */
  61:Source\BasicMathFunctions/arm_shift_q15.c ****   uint8_t sign;                                  /* Sign of shiftBits */
  62:Source\BasicMathFunctions/arm_shift_q15.c **** 
  63:Source\BasicMathFunctions/arm_shift_q15.c **** #if defined (ARM_MATH_DSP)
  64:Source\BasicMathFunctions/arm_shift_q15.c **** 
  65:Source\BasicMathFunctions/arm_shift_q15.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  66:Source\BasicMathFunctions/arm_shift_q15.c **** 
  67:Source\BasicMathFunctions/arm_shift_q15.c ****   q15_t in1, in2;                                /* Temporary variables */
  68:Source\BasicMathFunctions/arm_shift_q15.c **** 
  69:Source\BasicMathFunctions/arm_shift_q15.c **** 
  70:Source\BasicMathFunctions/arm_shift_q15.c ****   /*loop Unrolling */
  71:Source\BasicMathFunctions/arm_shift_q15.c ****   blkCnt = blockSize >> 2u;
  72:Source\BasicMathFunctions/arm_shift_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 3


  73:Source\BasicMathFunctions/arm_shift_q15.c ****   /* Getting the sign of shiftBits */
  74:Source\BasicMathFunctions/arm_shift_q15.c ****   sign = (shiftBits & 0x80);
  75:Source\BasicMathFunctions/arm_shift_q15.c **** 
  76:Source\BasicMathFunctions/arm_shift_q15.c ****   /* If the shift value is positive then do right shift else left shift */
  77:Source\BasicMathFunctions/arm_shift_q15.c ****   if (sign == 0u)
  78:Source\BasicMathFunctions/arm_shift_q15.c ****   {
  79:Source\BasicMathFunctions/arm_shift_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  80:Source\BasicMathFunctions/arm_shift_q15.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
  81:Source\BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0u)
  82:Source\BasicMathFunctions/arm_shift_q15.c ****     {
  83:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Read 2 inputs */
  84:Source\BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
  85:Source\BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
  86:Source\BasicMathFunctions/arm_shift_q15.c ****       /* C = A << shiftBits */
  87:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
  88:Source\BasicMathFunctions/arm_shift_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
  89:Source\BasicMathFunctions/arm_shift_q15.c **** 
  90:Source\BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
  91:Source\BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
  92:Source\BasicMathFunctions/arm_shift_q15.c **** 
  93:Source\BasicMathFunctions/arm_shift_q15.c **** #else
  94:Source\BasicMathFunctions/arm_shift_q15.c **** 
  95:Source\BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT(__SSAT((in2 << shiftBits), 16),
  96:Source\BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in1 << shiftBits), 16), 16);
  97:Source\BasicMathFunctions/arm_shift_q15.c **** 
  98:Source\BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
  99:Source\BasicMathFunctions/arm_shift_q15.c **** 
 100:Source\BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 101:Source\BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 102:Source\BasicMathFunctions/arm_shift_q15.c **** 
 103:Source\BasicMathFunctions/arm_shift_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 104:Source\BasicMathFunctions/arm_shift_q15.c **** 
 105:Source\BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
 106:Source\BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 107:Source\BasicMathFunctions/arm_shift_q15.c **** 
 108:Source\BasicMathFunctions/arm_shift_q15.c **** #else
 109:Source\BasicMathFunctions/arm_shift_q15.c **** 
 110:Source\BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT(__SSAT((in2 << shiftBits), 16),
 111:Source\BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in1 << shiftBits), 16), 16);
 112:Source\BasicMathFunctions/arm_shift_q15.c **** 
 113:Source\BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
 114:Source\BasicMathFunctions/arm_shift_q15.c **** 
 115:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
 116:Source\BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 117:Source\BasicMathFunctions/arm_shift_q15.c ****     }
 118:Source\BasicMathFunctions/arm_shift_q15.c **** 
 119:Source\BasicMathFunctions/arm_shift_q15.c ****     /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 120:Source\BasicMathFunctions/arm_shift_q15.c ****      ** No loop unrolling is used. */
 121:Source\BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize % 0x4u;
 122:Source\BasicMathFunctions/arm_shift_q15.c **** 
 123:Source\BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0u)
 124:Source\BasicMathFunctions/arm_shift_q15.c ****     {
 125:Source\BasicMathFunctions/arm_shift_q15.c ****       /* C = A << shiftBits */
 126:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Shift and then store the results in the destination buffer. */
 127:Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT((*pSrc++ << shiftBits), 16);
 128:Source\BasicMathFunctions/arm_shift_q15.c **** 
 129:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 4


 130:Source\BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 131:Source\BasicMathFunctions/arm_shift_q15.c ****     }
 132:Source\BasicMathFunctions/arm_shift_q15.c ****   }
 133:Source\BasicMathFunctions/arm_shift_q15.c ****   else
 134:Source\BasicMathFunctions/arm_shift_q15.c ****   {
 135:Source\BasicMathFunctions/arm_shift_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 136:Source\BasicMathFunctions/arm_shift_q15.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 137:Source\BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0u)
 138:Source\BasicMathFunctions/arm_shift_q15.c ****     {
 139:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Read 2 inputs */
 140:Source\BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 141:Source\BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 142:Source\BasicMathFunctions/arm_shift_q15.c **** 
 143:Source\BasicMathFunctions/arm_shift_q15.c ****       /* C = A >> shiftBits */
 144:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
 145:Source\BasicMathFunctions/arm_shift_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 146:Source\BasicMathFunctions/arm_shift_q15.c **** 
 147:Source\BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 148:Source\BasicMathFunctions/arm_shift_q15.c ****                                   (in2 >> -shiftBits), 16);
 149:Source\BasicMathFunctions/arm_shift_q15.c **** 
 150:Source\BasicMathFunctions/arm_shift_q15.c **** #else
 151:Source\BasicMathFunctions/arm_shift_q15.c **** 
 152:Source\BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT((in2 >> -shiftBits),
 153:Source\BasicMathFunctions/arm_shift_q15.c ****                                   (in1 >> -shiftBits), 16);
 154:Source\BasicMathFunctions/arm_shift_q15.c **** 
 155:Source\BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
 156:Source\BasicMathFunctions/arm_shift_q15.c **** 
 157:Source\BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 158:Source\BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 159:Source\BasicMathFunctions/arm_shift_q15.c **** 
 160:Source\BasicMathFunctions/arm_shift_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 161:Source\BasicMathFunctions/arm_shift_q15.c **** 
 162:Source\BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 163:Source\BasicMathFunctions/arm_shift_q15.c ****                                   (in2 >> -shiftBits), 16);
 164:Source\BasicMathFunctions/arm_shift_q15.c **** 
 165:Source\BasicMathFunctions/arm_shift_q15.c **** #else
 166:Source\BasicMathFunctions/arm_shift_q15.c **** 
 167:Source\BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT((in2 >> -shiftBits),
 168:Source\BasicMathFunctions/arm_shift_q15.c ****                                   (in1 >> -shiftBits), 16);
 169:Source\BasicMathFunctions/arm_shift_q15.c **** 
 170:Source\BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
 171:Source\BasicMathFunctions/arm_shift_q15.c **** 
 172:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
 173:Source\BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 174:Source\BasicMathFunctions/arm_shift_q15.c ****     }
 175:Source\BasicMathFunctions/arm_shift_q15.c **** 
 176:Source\BasicMathFunctions/arm_shift_q15.c ****     /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 177:Source\BasicMathFunctions/arm_shift_q15.c ****      ** No loop unrolling is used. */
 178:Source\BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize % 0x4u;
 179:Source\BasicMathFunctions/arm_shift_q15.c **** 
 180:Source\BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0u)
 181:Source\BasicMathFunctions/arm_shift_q15.c ****     {
 182:Source\BasicMathFunctions/arm_shift_q15.c ****       /* C = A >> shiftBits */
 183:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
 184:Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 185:Source\BasicMathFunctions/arm_shift_q15.c **** 
 186:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 5


 187:Source\BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 188:Source\BasicMathFunctions/arm_shift_q15.c ****     }
 189:Source\BasicMathFunctions/arm_shift_q15.c ****   }
 190:Source\BasicMathFunctions/arm_shift_q15.c **** 
 191:Source\BasicMathFunctions/arm_shift_q15.c **** #else
 192:Source\BasicMathFunctions/arm_shift_q15.c **** 
 193:Source\BasicMathFunctions/arm_shift_q15.c ****   /* Run the below code for Cortex-M0 */
 194:Source\BasicMathFunctions/arm_shift_q15.c **** 
 195:Source\BasicMathFunctions/arm_shift_q15.c ****   /* Getting the sign of shiftBits */
 196:Source\BasicMathFunctions/arm_shift_q15.c ****   sign = (shiftBits & 0x80);
  43              		.loc 1 196 0
  44 0014 0B23     		mov	r3, #11
  45 0016 FB18     		add	r3, r7, r3
  46 0018 1A78     		ldrb	r2, [r3]
  47 001a 2B23     		mov	r3, #43
  48 001c FB18     		add	r3, r7, r3
  49 001e 7F21     		mov	r1, #127
  50 0020 8A43     		bic	r2, r1
  51 0022 1A70     		strb	r2, [r3]
 197:Source\BasicMathFunctions/arm_shift_q15.c **** 
 198:Source\BasicMathFunctions/arm_shift_q15.c ****   /* If the shift value is positive then do right shift else left shift */
 199:Source\BasicMathFunctions/arm_shift_q15.c ****   if (sign == 0u)
  52              		.loc 1 199 0
  53 0024 2B23     		mov	r3, #43
  54 0026 FB18     		add	r3, r7, r3
  55 0028 1B78     		ldrb	r3, [r3]
  56 002a 002B     		cmp	r3, #0
  57 002c 45D1     		bne	.L2
 200:Source\BasicMathFunctions/arm_shift_q15.c ****   {
 201:Source\BasicMathFunctions/arm_shift_q15.c ****     /* Initialize blkCnt with number of samples */
 202:Source\BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize;
  58              		.loc 1 202 0
  59 002e 3B68     		ldr	r3, [r7]
  60 0030 FB62     		str	r3, [r7, #44]
 203:Source\BasicMathFunctions/arm_shift_q15.c **** 
 204:Source\BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0u)
  61              		.loc 1 204 0
  62 0032 3EE0     		b	.L3
  63              	.L10:
 205:Source\BasicMathFunctions/arm_shift_q15.c ****     {
 206:Source\BasicMathFunctions/arm_shift_q15.c ****       /* C = A << shiftBits */
 207:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Shift and then store the results in the destination buffer. */
 208:Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT(((q31_t) * pSrc++ << shiftBits), 16);
  64              		.loc 1 208 0
  65 0034 7B68     		ldr	r3, [r7, #4]
  66 0036 9A1C     		add	r2, r3, #2
  67 0038 7A60     		str	r2, [r7, #4]
  68 003a FA68     		ldr	r2, [r7, #12]
  69 003c 911C     		add	r1, r2, #2
  70 003e F960     		str	r1, [r7, #12]
  71 0040 1288     		ldrh	r2, [r2]
  72 0042 11B2     		sxth	r1, r2
  73 0044 0B22     		mov	r2, #11
  74 0046 BA18     		add	r2, r7, r2
  75 0048 1278     		ldrb	r2, [r2]
  76 004a 52B2     		sxtb	r2, r2
  77 004c 9140     		lsl	r1, r1, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 6


  78 004e 0A1C     		mov	r2, r1
  79 0050 7A62     		str	r2, [r7, #36]
  80 0052 1022     		mov	r2, #16
  81 0054 3A62     		str	r2, [r7, #32]
  82              	.LBB4:
  83              	.LBB5:
  84              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 7


  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 8


 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 9


 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 10


 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 11


 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 12


 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 13


 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 14


 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 15


 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 16


 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 17


 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 18


 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
  85              		.loc 2 699 0
  86 0056 0122     		mov	r2, #1
  87 0058 FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  88              		.loc 2 700 0
  89 005a 0022     		mov	r2, #0
  90 005c BA61     		str	r2, [r7, #24]
  91 005e 05E0     		b	.L4
  92              	.L5:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
  93              		.loc 2 702 0
  94 0060 FA69     		ldr	r2, [r7, #28]
  95 0062 5200     		lsl	r2, r2, #1
  96 0064 FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  97              		.loc 2 700 0
  98 0066 BA69     		ldr	r2, [r7, #24]
  99 0068 0132     		add	r2, r2, #1
 100 006a BA61     		str	r2, [r7, #24]
 101              	.L4:
 102 006c 3A6A     		ldr	r2, [r7, #32]
 103 006e 013A     		sub	r2, r2, #1
 104 0070 B969     		ldr	r1, [r7, #24]
 105 0072 9142     		cmp	r1, r2
 106 0074 F4D3     		bcc	.L5
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 107              		.loc 2 705 0
 108 0076 7A6A     		ldr	r2, [r7, #36]
 109 0078 002A     		cmp	r2, #0
 110 007a 09DD     		ble	.L6
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 19


 111              		.loc 2 707 0
 112 007c FA69     		ldr	r2, [r7, #28]
 113 007e 013A     		sub	r2, r2, #1
 114 0080 FA61     		str	r2, [r7, #28]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 115              		.loc 2 709 0
 116 0082 796A     		ldr	r1, [r7, #36]
 117 0084 FA69     		ldr	r2, [r7, #28]
 118 0086 9142     		cmp	r1, r2
 119 0088 0CDD     		ble	.L14
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 120              		.loc 2 711 0
 121 008a FA69     		ldr	r2, [r7, #28]
 122 008c 7A62     		str	r2, [r7, #36]
 123 008e 0AE0     		b	.L8
 124              	.L6:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 125              		.loc 2 716 0
 126 0090 FA69     		ldr	r2, [r7, #28]
 127 0092 5242     		neg	r2, r2
 128 0094 7A61     		str	r2, [r7, #20]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 129              		.loc 2 718 0
 130 0096 796A     		ldr	r1, [r7, #36]
 131 0098 7A69     		ldr	r2, [r7, #20]
 132 009a 9142     		cmp	r1, r2
 133 009c 03DA     		bge	.L8
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 134              		.loc 2 720 0
 135 009e 7A69     		ldr	r2, [r7, #20]
 136 00a0 7A62     		str	r2, [r7, #36]
 137 00a2 00E0     		b	.L8
 138              	.L14:
 711:.\Include/arm_math.h ****       }
 139              		.loc 2 711 0
 140 00a4 C046     		mov	r8, r8
 141              	.L8:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 142              		.loc 2 723 0
 143 00a6 7A6A     		ldr	r2, [r7, #36]
 144              	.LBE5:
 145              	.LBE4:
 146              		.loc 1 208 0
 147 00a8 92B2     		uxth	r2, r2
 148 00aa 1A80     		strh	r2, [r3]
 209:Source\BasicMathFunctions/arm_shift_q15.c **** 
 210:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 20


 211:Source\BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 149              		.loc 1 211 0
 150 00ac FB6A     		ldr	r3, [r7, #44]
 151 00ae 013B     		sub	r3, r3, #1
 152 00b0 FB62     		str	r3, [r7, #44]
 153              	.L3:
 204:Source\BasicMathFunctions/arm_shift_q15.c ****     {
 154              		.loc 1 204 0
 155 00b2 FB6A     		ldr	r3, [r7, #44]
 156 00b4 002B     		cmp	r3, #0
 157 00b6 BDD1     		bne	.L10
 158 00b8 19E0     		b	.L1
 159              	.L2:
 212:Source\BasicMathFunctions/arm_shift_q15.c ****     }
 213:Source\BasicMathFunctions/arm_shift_q15.c ****   }
 214:Source\BasicMathFunctions/arm_shift_q15.c ****   else
 215:Source\BasicMathFunctions/arm_shift_q15.c ****   {
 216:Source\BasicMathFunctions/arm_shift_q15.c ****     /* Initialize blkCnt with number of samples */
 217:Source\BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize;
 160              		.loc 1 217 0
 161 00ba 3B68     		ldr	r3, [r7]
 162 00bc FB62     		str	r3, [r7, #44]
 218:Source\BasicMathFunctions/arm_shift_q15.c **** 
 219:Source\BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0u)
 163              		.loc 1 219 0
 164 00be 13E0     		b	.L12
 165              	.L13:
 220:Source\BasicMathFunctions/arm_shift_q15.c ****     {
 221:Source\BasicMathFunctions/arm_shift_q15.c ****       /* C = A >> shiftBits */
 222:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
 223:Source\BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 166              		.loc 1 223 0
 167 00c0 7B68     		ldr	r3, [r7, #4]
 168 00c2 9A1C     		add	r2, r3, #2
 169 00c4 7A60     		str	r2, [r7, #4]
 170 00c6 FA68     		ldr	r2, [r7, #12]
 171 00c8 911C     		add	r1, r2, #2
 172 00ca F960     		str	r1, [r7, #12]
 173 00cc 1288     		ldrh	r2, [r2]
 174 00ce 11B2     		sxth	r1, r2
 175 00d0 0B22     		mov	r2, #11
 176 00d2 BA18     		add	r2, r7, r2
 177 00d4 1278     		ldrb	r2, [r2]
 178 00d6 52B2     		sxtb	r2, r2
 179 00d8 5242     		neg	r2, r2
 180 00da 1141     		asr	r1, r1, r2
 181 00dc 0A1C     		mov	r2, r1
 182 00de 92B2     		uxth	r2, r2
 183 00e0 1A80     		strh	r2, [r3]
 224:Source\BasicMathFunctions/arm_shift_q15.c **** 
 225:Source\BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
 226:Source\BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 184              		.loc 1 226 0
 185 00e2 FB6A     		ldr	r3, [r7, #44]
 186 00e4 013B     		sub	r3, r3, #1
 187 00e6 FB62     		str	r3, [r7, #44]
 188              	.L12:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 21


 219:Source\BasicMathFunctions/arm_shift_q15.c ****     {
 189              		.loc 1 219 0
 190 00e8 FB6A     		ldr	r3, [r7, #44]
 191 00ea 002B     		cmp	r3, #0
 192 00ec E8D1     		bne	.L13
 193              	.L1:
 227:Source\BasicMathFunctions/arm_shift_q15.c ****     }
 228:Source\BasicMathFunctions/arm_shift_q15.c ****   }
 229:Source\BasicMathFunctions/arm_shift_q15.c **** 
 230:Source\BasicMathFunctions/arm_shift_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 231:Source\BasicMathFunctions/arm_shift_q15.c **** 
 232:Source\BasicMathFunctions/arm_shift_q15.c **** }
 194              		.loc 1 232 0
 195 00ee BD46     		mov	sp, r7
 196 00f0 0CB0     		add	sp, sp, #48
 197              		@ sp needed
 198 00f2 80BD     		pop	{r7, pc}
 199              		.cfi_endproc
 200              	.LFE82:
 201              		.size	arm_shift_q15, .-arm_shift_q15
 202              		.text
 203              	.Letext0:
 204              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 205              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 206              		.section	.debug_info,"",%progbits
 207              	.Ldebug_info0:
 208 0000 07020000 		.4byte	0x207
 209 0004 0400     		.2byte	0x4
 210 0006 00000000 		.4byte	.Ldebug_abbrev0
 211 000a 04       		.byte	0x4
 212 000b 01       		.uleb128 0x1
 213 000c 4C010000 		.4byte	.LASF34
 214 0010 01       		.byte	0x1
 215 0011 F3000000 		.4byte	.LASF35
 216 0015 31000000 		.4byte	.LASF36
 217 0019 00000000 		.4byte	.Ldebug_ranges0+0
 218 001d 00000000 		.4byte	0
 219 0021 00000000 		.4byte	.Ldebug_line0
 220 0025 02       		.uleb128 0x2
 221 0026 0A000000 		.4byte	.LASF0
 222 002a 03       		.byte	0x3
 223 002b 1B       		.byte	0x1b
 224 002c 30000000 		.4byte	0x30
 225 0030 03       		.uleb128 0x3
 226 0031 01       		.byte	0x1
 227 0032 06       		.byte	0x6
 228 0033 4F020000 		.4byte	.LASF2
 229 0037 02       		.uleb128 0x2
 230 0038 13000000 		.4byte	.LASF1
 231 003c 03       		.byte	0x3
 232 003d 1D       		.byte	0x1d
 233 003e 42000000 		.4byte	0x42
 234 0042 03       		.uleb128 0x3
 235 0043 01       		.byte	0x1
 236 0044 08       		.byte	0x8
 237 0045 98000000 		.4byte	.LASF3
 238 0049 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 22


 239 004a 1D000000 		.4byte	.LASF4
 240 004e 03       		.byte	0x3
 241 004f 29       		.byte	0x29
 242 0050 54000000 		.4byte	0x54
 243 0054 03       		.uleb128 0x3
 244 0055 02       		.byte	0x2
 245 0056 05       		.byte	0x5
 246 0057 1B020000 		.4byte	.LASF5
 247 005b 03       		.uleb128 0x3
 248 005c 02       		.byte	0x2
 249 005d 07       		.byte	0x7
 250 005e CD000000 		.4byte	.LASF6
 251 0062 02       		.uleb128 0x2
 252 0063 27000000 		.4byte	.LASF7
 253 0067 03       		.byte	0x3
 254 0068 3F       		.byte	0x3f
 255 0069 6D000000 		.4byte	0x6d
 256 006d 03       		.uleb128 0x3
 257 006e 04       		.byte	0x4
 258 006f 05       		.byte	0x5
 259 0070 35020000 		.4byte	.LASF8
 260 0074 02       		.uleb128 0x2
 261 0075 1D010000 		.4byte	.LASF9
 262 0079 03       		.byte	0x3
 263 007a 41       		.byte	0x41
 264 007b 7F000000 		.4byte	0x7f
 265 007f 03       		.uleb128 0x3
 266 0080 04       		.byte	0x4
 267 0081 07       		.byte	0x7
 268 0082 BB000000 		.4byte	.LASF10
 269 0086 03       		.uleb128 0x3
 270 0087 08       		.byte	0x8
 271 0088 05       		.byte	0x5
 272 0089 FE010000 		.4byte	.LASF11
 273 008d 03       		.uleb128 0x3
 274 008e 08       		.byte	0x8
 275 008f 07       		.byte	0x7
 276 0090 35010000 		.4byte	.LASF12
 277 0094 04       		.uleb128 0x4
 278 0095 04       		.byte	0x4
 279 0096 05       		.byte	0x5
 280 0097 696E7400 		.ascii	"int\000"
 281 009b 03       		.uleb128 0x3
 282 009c 04       		.byte	0x4
 283 009d 07       		.byte	0x7
 284 009e 28010000 		.4byte	.LASF13
 285 00a2 02       		.uleb128 0x2
 286 00a3 7F000000 		.4byte	.LASF14
 287 00a7 04       		.byte	0x4
 288 00a8 14       		.byte	0x14
 289 00a9 25000000 		.4byte	0x25
 290 00ad 02       		.uleb128 0x2
 291 00ae 77000000 		.4byte	.LASF15
 292 00b2 04       		.byte	0x4
 293 00b3 15       		.byte	0x15
 294 00b4 37000000 		.4byte	0x37
 295 00b8 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 23


 296 00b9 DE010000 		.4byte	.LASF16
 297 00bd 04       		.byte	0x4
 298 00be 20       		.byte	0x20
 299 00bf 49000000 		.4byte	0x49
 300 00c3 02       		.uleb128 0x2
 301 00c4 ED010000 		.4byte	.LASF17
 302 00c8 04       		.byte	0x4
 303 00c9 2C       		.byte	0x2c
 304 00ca 62000000 		.4byte	0x62
 305 00ce 02       		.uleb128 0x2
 306 00cf 2C020000 		.4byte	.LASF18
 307 00d3 04       		.byte	0x4
 308 00d4 2D       		.byte	0x2d
 309 00d5 74000000 		.4byte	0x74
 310 00d9 03       		.uleb128 0x3
 311 00da 04       		.byte	0x4
 312 00db 07       		.byte	0x7
 313 00dc F5010000 		.4byte	.LASF19
 314 00e0 03       		.uleb128 0x3
 315 00e1 01       		.byte	0x1
 316 00e2 08       		.byte	0x8
 317 00e3 16020000 		.4byte	.LASF20
 318 00e7 03       		.uleb128 0x3
 319 00e8 08       		.byte	0x8
 320 00e9 04       		.byte	0x4
 321 00ea EC000000 		.4byte	.LASF21
 322 00ee 03       		.uleb128 0x3
 323 00ef 04       		.byte	0x4
 324 00f0 04       		.byte	0x4
 325 00f1 8C000000 		.4byte	.LASF22
 326 00f5 03       		.uleb128 0x3
 327 00f6 08       		.byte	0x8
 328 00f7 04       		.byte	0x4
 329 00f8 43020000 		.4byte	.LASF23
 330 00fc 05       		.uleb128 0x5
 331 00fd 86000000 		.4byte	.LASF24
 332 0101 02       		.byte	0x2
 333 0102 9601     		.2byte	0x196
 334 0104 B8000000 		.4byte	0xb8
 335 0108 05       		.uleb128 0x5
 336 0109 92000000 		.4byte	.LASF25
 337 010d 02       		.byte	0x2
 338 010e 9B01     		.2byte	0x19b
 339 0110 C3000000 		.4byte	0xc3
 340 0114 06       		.uleb128 0x6
 341 0115 04       		.byte	0x4
 342 0116 FC000000 		.4byte	0xfc
 343 011a 07       		.uleb128 0x7
 344 011b E6010000 		.4byte	.LASF37
 345 011f 02       		.byte	0x2
 346 0120 B402     		.2byte	0x2b4
 347 0122 08010000 		.4byte	0x108
 348 0126 03       		.byte	0x3
 349 0127 62010000 		.4byte	0x162
 350 012b 08       		.uleb128 0x8
 351 012c 7800     		.ascii	"x\000"
 352 012e 02       		.byte	0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 24


 353 012f B502     		.2byte	0x2b5
 354 0131 08010000 		.4byte	0x108
 355 0135 08       		.uleb128 0x8
 356 0136 7900     		.ascii	"y\000"
 357 0138 02       		.byte	0x2
 358 0139 B602     		.2byte	0x2b6
 359 013b CE000000 		.4byte	0xce
 360 013f 09       		.uleb128 0x9
 361 0140 25020000 		.4byte	.LASF26
 362 0144 02       		.byte	0x2
 363 0145 B802     		.2byte	0x2b8
 364 0147 C3000000 		.4byte	0xc3
 365 014b 09       		.uleb128 0x9
 366 014c E5000000 		.4byte	.LASF27
 367 0150 02       		.byte	0x2
 368 0151 B802     		.2byte	0x2b8
 369 0153 C3000000 		.4byte	0xc3
 370 0157 0A       		.uleb128 0xa
 371 0158 6900     		.ascii	"i\000"
 372 015a 02       		.byte	0x2
 373 015b B902     		.2byte	0x2b9
 374 015d CE000000 		.4byte	0xce
 375 0161 00       		.byte	0
 376 0162 0B       		.uleb128 0xb
 377 0163 A6000000 		.4byte	.LASF38
 378 0167 01       		.byte	0x1
 379 0168 36       		.byte	0x36
 380 0169 00000000 		.4byte	.LFB82
 381 016d F4000000 		.4byte	.LFE82-.LFB82
 382 0171 01       		.uleb128 0x1
 383 0172 9C       		.byte	0x9c
 384 0173 0C       		.uleb128 0xc
 385 0174 5B020000 		.4byte	.LASF28
 386 0178 01       		.byte	0x1
 387 0179 37       		.byte	0x37
 388 017a 14010000 		.4byte	0x114
 389 017e 02       		.uleb128 0x2
 390 017f 91       		.byte	0x91
 391 0180 54       		.sleb128 -44
 392 0181 0C       		.uleb128 0xc
 393 0182 00000000 		.4byte	.LASF29
 394 0186 01       		.byte	0x1
 395 0187 38       		.byte	0x38
 396 0188 A2000000 		.4byte	0xa2
 397 018c 02       		.uleb128 0x2
 398 018d 91       		.byte	0x91
 399 018e 53       		.sleb128 -45
 400 018f 0C       		.uleb128 0xc
 401 0190 E0000000 		.4byte	.LASF30
 402 0194 01       		.byte	0x1
 403 0195 39       		.byte	0x39
 404 0196 14010000 		.4byte	0x114
 405 019a 02       		.uleb128 0x2
 406 019b 91       		.byte	0x91
 407 019c 4C       		.sleb128 -52
 408 019d 0C       		.uleb128 0xc
 409 019e 0C020000 		.4byte	.LASF31
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 25


 410 01a2 01       		.byte	0x1
 411 01a3 3A       		.byte	0x3a
 412 01a4 CE000000 		.4byte	0xce
 413 01a8 02       		.uleb128 0x2
 414 01a9 91       		.byte	0x91
 415 01aa 48       		.sleb128 -56
 416 01ab 0D       		.uleb128 0xd
 417 01ac B4000000 		.4byte	.LASF32
 418 01b0 01       		.byte	0x1
 419 01b1 3C       		.byte	0x3c
 420 01b2 CE000000 		.4byte	0xce
 421 01b6 02       		.uleb128 0x2
 422 01b7 91       		.byte	0x91
 423 01b8 74       		.sleb128 -12
 424 01b9 0D       		.uleb128 0xd
 425 01ba 3E020000 		.4byte	.LASF33
 426 01be 01       		.byte	0x1
 427 01bf 3D       		.byte	0x3d
 428 01c0 AD000000 		.4byte	0xad
 429 01c4 02       		.uleb128 0x2
 430 01c5 91       		.byte	0x91
 431 01c6 73       		.sleb128 -13
 432 01c7 0E       		.uleb128 0xe
 433 01c8 1A010000 		.4byte	0x11a
 434 01cc 56000000 		.4byte	.LBB4
 435 01d0 52000000 		.4byte	.LBE4-.LBB4
 436 01d4 01       		.byte	0x1
 437 01d5 D0       		.byte	0xd0
 438 01d6 0F       		.uleb128 0xf
 439 01d7 35010000 		.4byte	0x135
 440 01db 02       		.uleb128 0x2
 441 01dc 91       		.byte	0x91
 442 01dd 68       		.sleb128 -24
 443 01de 0F       		.uleb128 0xf
 444 01df 2B010000 		.4byte	0x12b
 445 01e3 02       		.uleb128 0x2
 446 01e4 91       		.byte	0x91
 447 01e5 6C       		.sleb128 -20
 448 01e6 10       		.uleb128 0x10
 449 01e7 56000000 		.4byte	.LBB5
 450 01eb 52000000 		.4byte	.LBE5-.LBB5
 451 01ef 11       		.uleb128 0x11
 452 01f0 3F010000 		.4byte	0x13f
 453 01f4 02       		.uleb128 0x2
 454 01f5 91       		.byte	0x91
 455 01f6 64       		.sleb128 -28
 456 01f7 11       		.uleb128 0x11
 457 01f8 4B010000 		.4byte	0x14b
 458 01fc 02       		.uleb128 0x2
 459 01fd 91       		.byte	0x91
 460 01fe 5C       		.sleb128 -36
 461 01ff 11       		.uleb128 0x11
 462 0200 57010000 		.4byte	0x157
 463 0204 02       		.uleb128 0x2
 464 0205 91       		.byte	0x91
 465 0206 60       		.sleb128 -32
 466 0207 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 26


 467 0208 00       		.byte	0
 468 0209 00       		.byte	0
 469 020a 00       		.byte	0
 470              		.section	.debug_abbrev,"",%progbits
 471              	.Ldebug_abbrev0:
 472 0000 01       		.uleb128 0x1
 473 0001 11       		.uleb128 0x11
 474 0002 01       		.byte	0x1
 475 0003 25       		.uleb128 0x25
 476 0004 0E       		.uleb128 0xe
 477 0005 13       		.uleb128 0x13
 478 0006 0B       		.uleb128 0xb
 479 0007 03       		.uleb128 0x3
 480 0008 0E       		.uleb128 0xe
 481 0009 1B       		.uleb128 0x1b
 482 000a 0E       		.uleb128 0xe
 483 000b 55       		.uleb128 0x55
 484 000c 17       		.uleb128 0x17
 485 000d 11       		.uleb128 0x11
 486 000e 01       		.uleb128 0x1
 487 000f 10       		.uleb128 0x10
 488 0010 17       		.uleb128 0x17
 489 0011 00       		.byte	0
 490 0012 00       		.byte	0
 491 0013 02       		.uleb128 0x2
 492 0014 16       		.uleb128 0x16
 493 0015 00       		.byte	0
 494 0016 03       		.uleb128 0x3
 495 0017 0E       		.uleb128 0xe
 496 0018 3A       		.uleb128 0x3a
 497 0019 0B       		.uleb128 0xb
 498 001a 3B       		.uleb128 0x3b
 499 001b 0B       		.uleb128 0xb
 500 001c 49       		.uleb128 0x49
 501 001d 13       		.uleb128 0x13
 502 001e 00       		.byte	0
 503 001f 00       		.byte	0
 504 0020 03       		.uleb128 0x3
 505 0021 24       		.uleb128 0x24
 506 0022 00       		.byte	0
 507 0023 0B       		.uleb128 0xb
 508 0024 0B       		.uleb128 0xb
 509 0025 3E       		.uleb128 0x3e
 510 0026 0B       		.uleb128 0xb
 511 0027 03       		.uleb128 0x3
 512 0028 0E       		.uleb128 0xe
 513 0029 00       		.byte	0
 514 002a 00       		.byte	0
 515 002b 04       		.uleb128 0x4
 516 002c 24       		.uleb128 0x24
 517 002d 00       		.byte	0
 518 002e 0B       		.uleb128 0xb
 519 002f 0B       		.uleb128 0xb
 520 0030 3E       		.uleb128 0x3e
 521 0031 0B       		.uleb128 0xb
 522 0032 03       		.uleb128 0x3
 523 0033 08       		.uleb128 0x8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 27


 524 0034 00       		.byte	0
 525 0035 00       		.byte	0
 526 0036 05       		.uleb128 0x5
 527 0037 16       		.uleb128 0x16
 528 0038 00       		.byte	0
 529 0039 03       		.uleb128 0x3
 530 003a 0E       		.uleb128 0xe
 531 003b 3A       		.uleb128 0x3a
 532 003c 0B       		.uleb128 0xb
 533 003d 3B       		.uleb128 0x3b
 534 003e 05       		.uleb128 0x5
 535 003f 49       		.uleb128 0x49
 536 0040 13       		.uleb128 0x13
 537 0041 00       		.byte	0
 538 0042 00       		.byte	0
 539 0043 06       		.uleb128 0x6
 540 0044 0F       		.uleb128 0xf
 541 0045 00       		.byte	0
 542 0046 0B       		.uleb128 0xb
 543 0047 0B       		.uleb128 0xb
 544 0048 49       		.uleb128 0x49
 545 0049 13       		.uleb128 0x13
 546 004a 00       		.byte	0
 547 004b 00       		.byte	0
 548 004c 07       		.uleb128 0x7
 549 004d 2E       		.uleb128 0x2e
 550 004e 01       		.byte	0x1
 551 004f 03       		.uleb128 0x3
 552 0050 0E       		.uleb128 0xe
 553 0051 3A       		.uleb128 0x3a
 554 0052 0B       		.uleb128 0xb
 555 0053 3B       		.uleb128 0x3b
 556 0054 05       		.uleb128 0x5
 557 0055 27       		.uleb128 0x27
 558 0056 19       		.uleb128 0x19
 559 0057 49       		.uleb128 0x49
 560 0058 13       		.uleb128 0x13
 561 0059 20       		.uleb128 0x20
 562 005a 0B       		.uleb128 0xb
 563 005b 01       		.uleb128 0x1
 564 005c 13       		.uleb128 0x13
 565 005d 00       		.byte	0
 566 005e 00       		.byte	0
 567 005f 08       		.uleb128 0x8
 568 0060 05       		.uleb128 0x5
 569 0061 00       		.byte	0
 570 0062 03       		.uleb128 0x3
 571 0063 08       		.uleb128 0x8
 572 0064 3A       		.uleb128 0x3a
 573 0065 0B       		.uleb128 0xb
 574 0066 3B       		.uleb128 0x3b
 575 0067 05       		.uleb128 0x5
 576 0068 49       		.uleb128 0x49
 577 0069 13       		.uleb128 0x13
 578 006a 00       		.byte	0
 579 006b 00       		.byte	0
 580 006c 09       		.uleb128 0x9
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 28


 581 006d 34       		.uleb128 0x34
 582 006e 00       		.byte	0
 583 006f 03       		.uleb128 0x3
 584 0070 0E       		.uleb128 0xe
 585 0071 3A       		.uleb128 0x3a
 586 0072 0B       		.uleb128 0xb
 587 0073 3B       		.uleb128 0x3b
 588 0074 05       		.uleb128 0x5
 589 0075 49       		.uleb128 0x49
 590 0076 13       		.uleb128 0x13
 591 0077 00       		.byte	0
 592 0078 00       		.byte	0
 593 0079 0A       		.uleb128 0xa
 594 007a 34       		.uleb128 0x34
 595 007b 00       		.byte	0
 596 007c 03       		.uleb128 0x3
 597 007d 08       		.uleb128 0x8
 598 007e 3A       		.uleb128 0x3a
 599 007f 0B       		.uleb128 0xb
 600 0080 3B       		.uleb128 0x3b
 601 0081 05       		.uleb128 0x5
 602 0082 49       		.uleb128 0x49
 603 0083 13       		.uleb128 0x13
 604 0084 00       		.byte	0
 605 0085 00       		.byte	0
 606 0086 0B       		.uleb128 0xb
 607 0087 2E       		.uleb128 0x2e
 608 0088 01       		.byte	0x1
 609 0089 3F       		.uleb128 0x3f
 610 008a 19       		.uleb128 0x19
 611 008b 03       		.uleb128 0x3
 612 008c 0E       		.uleb128 0xe
 613 008d 3A       		.uleb128 0x3a
 614 008e 0B       		.uleb128 0xb
 615 008f 3B       		.uleb128 0x3b
 616 0090 0B       		.uleb128 0xb
 617 0091 27       		.uleb128 0x27
 618 0092 19       		.uleb128 0x19
 619 0093 11       		.uleb128 0x11
 620 0094 01       		.uleb128 0x1
 621 0095 12       		.uleb128 0x12
 622 0096 06       		.uleb128 0x6
 623 0097 40       		.uleb128 0x40
 624 0098 18       		.uleb128 0x18
 625 0099 9742     		.uleb128 0x2117
 626 009b 19       		.uleb128 0x19
 627 009c 00       		.byte	0
 628 009d 00       		.byte	0
 629 009e 0C       		.uleb128 0xc
 630 009f 05       		.uleb128 0x5
 631 00a0 00       		.byte	0
 632 00a1 03       		.uleb128 0x3
 633 00a2 0E       		.uleb128 0xe
 634 00a3 3A       		.uleb128 0x3a
 635 00a4 0B       		.uleb128 0xb
 636 00a5 3B       		.uleb128 0x3b
 637 00a6 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 29


 638 00a7 49       		.uleb128 0x49
 639 00a8 13       		.uleb128 0x13
 640 00a9 02       		.uleb128 0x2
 641 00aa 18       		.uleb128 0x18
 642 00ab 00       		.byte	0
 643 00ac 00       		.byte	0
 644 00ad 0D       		.uleb128 0xd
 645 00ae 34       		.uleb128 0x34
 646 00af 00       		.byte	0
 647 00b0 03       		.uleb128 0x3
 648 00b1 0E       		.uleb128 0xe
 649 00b2 3A       		.uleb128 0x3a
 650 00b3 0B       		.uleb128 0xb
 651 00b4 3B       		.uleb128 0x3b
 652 00b5 0B       		.uleb128 0xb
 653 00b6 49       		.uleb128 0x49
 654 00b7 13       		.uleb128 0x13
 655 00b8 02       		.uleb128 0x2
 656 00b9 18       		.uleb128 0x18
 657 00ba 00       		.byte	0
 658 00bb 00       		.byte	0
 659 00bc 0E       		.uleb128 0xe
 660 00bd 1D       		.uleb128 0x1d
 661 00be 01       		.byte	0x1
 662 00bf 31       		.uleb128 0x31
 663 00c0 13       		.uleb128 0x13
 664 00c1 11       		.uleb128 0x11
 665 00c2 01       		.uleb128 0x1
 666 00c3 12       		.uleb128 0x12
 667 00c4 06       		.uleb128 0x6
 668 00c5 58       		.uleb128 0x58
 669 00c6 0B       		.uleb128 0xb
 670 00c7 59       		.uleb128 0x59
 671 00c8 0B       		.uleb128 0xb
 672 00c9 00       		.byte	0
 673 00ca 00       		.byte	0
 674 00cb 0F       		.uleb128 0xf
 675 00cc 05       		.uleb128 0x5
 676 00cd 00       		.byte	0
 677 00ce 31       		.uleb128 0x31
 678 00cf 13       		.uleb128 0x13
 679 00d0 02       		.uleb128 0x2
 680 00d1 18       		.uleb128 0x18
 681 00d2 00       		.byte	0
 682 00d3 00       		.byte	0
 683 00d4 10       		.uleb128 0x10
 684 00d5 0B       		.uleb128 0xb
 685 00d6 01       		.byte	0x1
 686 00d7 11       		.uleb128 0x11
 687 00d8 01       		.uleb128 0x1
 688 00d9 12       		.uleb128 0x12
 689 00da 06       		.uleb128 0x6
 690 00db 00       		.byte	0
 691 00dc 00       		.byte	0
 692 00dd 11       		.uleb128 0x11
 693 00de 34       		.uleb128 0x34
 694 00df 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 30


 695 00e0 31       		.uleb128 0x31
 696 00e1 13       		.uleb128 0x13
 697 00e2 02       		.uleb128 0x2
 698 00e3 18       		.uleb128 0x18
 699 00e4 00       		.byte	0
 700 00e5 00       		.byte	0
 701 00e6 00       		.byte	0
 702              		.section	.debug_aranges,"",%progbits
 703 0000 1C000000 		.4byte	0x1c
 704 0004 0200     		.2byte	0x2
 705 0006 00000000 		.4byte	.Ldebug_info0
 706 000a 04       		.byte	0x4
 707 000b 00       		.byte	0
 708 000c 0000     		.2byte	0
 709 000e 0000     		.2byte	0
 710 0010 00000000 		.4byte	.LFB82
 711 0014 F4000000 		.4byte	.LFE82-.LFB82
 712 0018 00000000 		.4byte	0
 713 001c 00000000 		.4byte	0
 714              		.section	.debug_ranges,"",%progbits
 715              	.Ldebug_ranges0:
 716 0000 00000000 		.4byte	.LFB82
 717 0004 F4000000 		.4byte	.LFE82
 718 0008 00000000 		.4byte	0
 719 000c 00000000 		.4byte	0
 720              		.section	.debug_line,"",%progbits
 721              	.Ldebug_line0:
 722 0000 9B010000 		.section	.debug_str,"MS",%progbits,1
 722      02005001 
 722      00000201 
 722      FB0E0D00 
 722      01010101 
 723              	.LASF29:
 724 0000 73686966 		.ascii	"shiftBits\000"
 724      74426974 
 724      7300
 725              	.LASF0:
 726 000a 5F5F696E 		.ascii	"__int8_t\000"
 726      74385F74 
 726      00
 727              	.LASF1:
 728 0013 5F5F7569 		.ascii	"__uint8_t\000"
 728      6E74385F 
 728      7400
 729              	.LASF4:
 730 001d 5F5F696E 		.ascii	"__int16_t\000"
 730      7431365F 
 730      7400
 731              	.LASF7:
 732 0027 5F5F696E 		.ascii	"__int32_t\000"
 732      7433325F 
 732      7400
 733              	.LASF36:
 734 0031 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 734      73657273 
 734      5C666E65 
 734      7665735C 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 31


 734      446F6375 
 735 005e 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 735      655F7370 
 735      6565645F 
 735      73656E73 
 735      6F722E63 
 736              	.LASF15:
 737 0077 75696E74 		.ascii	"uint8_t\000"
 737      385F7400 
 738              	.LASF14:
 739 007f 696E7438 		.ascii	"int8_t\000"
 739      5F7400
 740              	.LASF24:
 741 0086 7131355F 		.ascii	"q15_t\000"
 741      7400
 742              	.LASF22:
 743 008c 666C6F61 		.ascii	"float\000"
 743      7400
 744              	.LASF25:
 745 0092 7133315F 		.ascii	"q31_t\000"
 745      7400
 746              	.LASF3:
 747 0098 756E7369 		.ascii	"unsigned char\000"
 747      676E6564 
 747      20636861 
 747      7200
 748              	.LASF38:
 749 00a6 61726D5F 		.ascii	"arm_shift_q15\000"
 749      73686966 
 749      745F7131 
 749      3500
 750              	.LASF32:
 751 00b4 626C6B43 		.ascii	"blkCnt\000"
 751      6E7400
 752              	.LASF10:
 753 00bb 6C6F6E67 		.ascii	"long unsigned int\000"
 753      20756E73 
 753      69676E65 
 753      6420696E 
 753      7400
 754              	.LASF6:
 755 00cd 73686F72 		.ascii	"short unsigned int\000"
 755      7420756E 
 755      7369676E 
 755      65642069 
 755      6E7400
 756              	.LASF30:
 757 00e0 70447374 		.ascii	"pDst\000"
 757      00
 758              	.LASF27:
 759 00e5 6E65674D 		.ascii	"negMin\000"
 759      696E00
 760              	.LASF21:
 761 00ec 646F7562 		.ascii	"double\000"
 761      6C6500
 762              	.LASF35:
 763 00f3 536F7572 		.ascii	"Source\\BasicMathFunctions\\arm_shift_q15.c\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 32


 763      63655C42 
 763      61736963 
 763      4D617468 
 763      46756E63 
 764              	.LASF9:
 765 011d 5F5F7569 		.ascii	"__uint32_t\000"
 765      6E743332 
 765      5F7400
 766              	.LASF13:
 767 0128 756E7369 		.ascii	"unsigned int\000"
 767      676E6564 
 767      20696E74 
 767      00
 768              	.LASF12:
 769 0135 6C6F6E67 		.ascii	"long long unsigned int\000"
 769      206C6F6E 
 769      6720756E 
 769      7369676E 
 769      65642069 
 770              	.LASF34:
 771 014c 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 771      4320342E 
 771      392E3320 
 771      32303135 
 771      30333033 
 772 017f 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 772      20726576 
 772      6973696F 
 772      6E203232 
 772      31323230 
 773 01b2 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 773      30202D66 
 773      66756E63 
 773      74696F6E 
 773      2D736563 
 774              	.LASF16:
 775 01de 696E7431 		.ascii	"int16_t\000"
 775      365F7400 
 776              	.LASF37:
 777 01e6 5F5F5353 		.ascii	"__SSAT\000"
 777      415400
 778              	.LASF17:
 779 01ed 696E7433 		.ascii	"int32_t\000"
 779      325F7400 
 780              	.LASF19:
 781 01f5 73697A65 		.ascii	"sizetype\000"
 781      74797065 
 781      00
 782              	.LASF11:
 783 01fe 6C6F6E67 		.ascii	"long long int\000"
 783      206C6F6E 
 783      6720696E 
 783      7400
 784              	.LASF31:
 785 020c 626C6F63 		.ascii	"blockSize\000"
 785      6B53697A 
 785      6500
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccsGxcIc.s 			page 33


 786              	.LASF20:
 787 0216 63686172 		.ascii	"char\000"
 787      00
 788              	.LASF5:
 789 021b 73686F72 		.ascii	"short int\000"
 789      7420696E 
 789      7400
 790              	.LASF26:
 791 0225 706F734D 		.ascii	"posMax\000"
 791      617800
 792              	.LASF18:
 793 022c 75696E74 		.ascii	"uint32_t\000"
 793      33325F74 
 793      00
 794              	.LASF8:
 795 0235 6C6F6E67 		.ascii	"long int\000"
 795      20696E74 
 795      00
 796              	.LASF33:
 797 023e 7369676E 		.ascii	"sign\000"
 797      00
 798              	.LASF23:
 799 0243 6C6F6E67 		.ascii	"long double\000"
 799      20646F75 
 799      626C6500 
 800              	.LASF2:
 801 024f 7369676E 		.ascii	"signed char\000"
 801      65642063 
 801      68617200 
 802              	.LASF28:
 803 025b 70537263 		.ascii	"pSrc\000"
 803      00
 804              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
