ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_shift_q7.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_shift_q7,"ax",%progbits
  18              		.align	2
  19              		.global	arm_shift_q7
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_shift_q7, %function
  23              	arm_shift_q7:
  24              	.LFB82:
  25              		.file 1 "Source\\BasicMathFunctions\\arm_shift_q7.c"
   1:Source\BasicMathFunctions/arm_shift_q7.c **** /* ----------------------------------------------------------------------
   2:Source\BasicMathFunctions/arm_shift_q7.c ****  * Project:      CMSIS DSP Library
   3:Source\BasicMathFunctions/arm_shift_q7.c ****  * Title:        arm_shift_q7.c
   4:Source\BasicMathFunctions/arm_shift_q7.c ****  * Description:  Processing function for the Q7 Shifting
   5:Source\BasicMathFunctions/arm_shift_q7.c ****  *
   6:Source\BasicMathFunctions/arm_shift_q7.c ****  * $Date:        27. January 2017
   7:Source\BasicMathFunctions/arm_shift_q7.c ****  * $Revision:    V.1.5.1
   8:Source\BasicMathFunctions/arm_shift_q7.c ****  *
   9:Source\BasicMathFunctions/arm_shift_q7.c ****  * Target Processor: Cortex-M cores
  10:Source\BasicMathFunctions/arm_shift_q7.c ****  * -------------------------------------------------------------------- */
  11:Source\BasicMathFunctions/arm_shift_q7.c **** /*
  12:Source\BasicMathFunctions/arm_shift_q7.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\BasicMathFunctions/arm_shift_q7.c ****  *
  14:Source\BasicMathFunctions/arm_shift_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\BasicMathFunctions/arm_shift_q7.c ****  *
  16:Source\BasicMathFunctions/arm_shift_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\BasicMathFunctions/arm_shift_q7.c ****  * not use this file except in compliance with the License.
  18:Source\BasicMathFunctions/arm_shift_q7.c ****  * You may obtain a copy of the License at
  19:Source\BasicMathFunctions/arm_shift_q7.c ****  *
  20:Source\BasicMathFunctions/arm_shift_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\BasicMathFunctions/arm_shift_q7.c ****  *
  22:Source\BasicMathFunctions/arm_shift_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\BasicMathFunctions/arm_shift_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\BasicMathFunctions/arm_shift_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\BasicMathFunctions/arm_shift_q7.c ****  * See the License for the specific language governing permissions and
  26:Source\BasicMathFunctions/arm_shift_q7.c ****  * limitations under the License.
  27:Source\BasicMathFunctions/arm_shift_q7.c ****  */
  28:Source\BasicMathFunctions/arm_shift_q7.c **** 
  29:Source\BasicMathFunctions/arm_shift_q7.c **** #include "arm_math.h"
  30:Source\BasicMathFunctions/arm_shift_q7.c **** 
  31:Source\BasicMathFunctions/arm_shift_q7.c **** /**
  32:Source\BasicMathFunctions/arm_shift_q7.c ****  * @ingroup groupMath
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 2


  33:Source\BasicMathFunctions/arm_shift_q7.c ****  */
  34:Source\BasicMathFunctions/arm_shift_q7.c **** 
  35:Source\BasicMathFunctions/arm_shift_q7.c **** /**
  36:Source\BasicMathFunctions/arm_shift_q7.c ****  * @addtogroup shift
  37:Source\BasicMathFunctions/arm_shift_q7.c ****  * @{
  38:Source\BasicMathFunctions/arm_shift_q7.c ****  */
  39:Source\BasicMathFunctions/arm_shift_q7.c **** 
  40:Source\BasicMathFunctions/arm_shift_q7.c **** 
  41:Source\BasicMathFunctions/arm_shift_q7.c **** /**
  42:Source\BasicMathFunctions/arm_shift_q7.c ****  * @brief  Shifts the elements of a Q7 vector a specified number of bits.
  43:Source\BasicMathFunctions/arm_shift_q7.c ****  * @param[in]  *pSrc points to the input vector
  44:Source\BasicMathFunctions/arm_shift_q7.c ****  * @param[in]  shiftBits number of bits to shift.  A positive value shifts left; a negative value s
  45:Source\BasicMathFunctions/arm_shift_q7.c ****  * @param[out]  *pDst points to the output vector
  46:Source\BasicMathFunctions/arm_shift_q7.c ****  * @param[in]  blockSize number of samples in the vector
  47:Source\BasicMathFunctions/arm_shift_q7.c ****  * @return none.
  48:Source\BasicMathFunctions/arm_shift_q7.c ****  *
  49:Source\BasicMathFunctions/arm_shift_q7.c ****  * \par Conditions for optimum performance
  50:Source\BasicMathFunctions/arm_shift_q7.c ****  *  Input and output buffers should be aligned by 32-bit
  51:Source\BasicMathFunctions/arm_shift_q7.c ****  *
  52:Source\BasicMathFunctions/arm_shift_q7.c ****  *
  53:Source\BasicMathFunctions/arm_shift_q7.c ****  * <b>Scaling and Overflow Behavior:</b>
  54:Source\BasicMathFunctions/arm_shift_q7.c ****  * \par
  55:Source\BasicMathFunctions/arm_shift_q7.c ****  * The function uses saturating arithmetic.
  56:Source\BasicMathFunctions/arm_shift_q7.c ****  * Results outside of the allowable Q7 range [0x8 0x7F] will be saturated.
  57:Source\BasicMathFunctions/arm_shift_q7.c ****  */
  58:Source\BasicMathFunctions/arm_shift_q7.c **** 
  59:Source\BasicMathFunctions/arm_shift_q7.c **** void arm_shift_q7(
  60:Source\BasicMathFunctions/arm_shift_q7.c ****   q7_t * pSrc,
  61:Source\BasicMathFunctions/arm_shift_q7.c ****   int8_t shiftBits,
  62:Source\BasicMathFunctions/arm_shift_q7.c ****   q7_t * pDst,
  63:Source\BasicMathFunctions/arm_shift_q7.c ****   uint32_t blockSize)
  64:Source\BasicMathFunctions/arm_shift_q7.c **** {
  26              		.loc 1 64 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 8CB0     		sub	sp, sp, #48
  33              		.cfi_def_cfa_offset 56
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 7A60     		str	r2, [r7, #4]
  38 000a 3B60     		str	r3, [r7]
  39 000c 0B23     		mov	r3, #11
  40 000e FB18     		add	r3, r7, r3
  41 0010 0A1C     		add	r2, r1, #0
  42 0012 1A70     		strb	r2, [r3]
  65:Source\BasicMathFunctions/arm_shift_q7.c ****   uint32_t blkCnt;                               /* loop counter */
  66:Source\BasicMathFunctions/arm_shift_q7.c ****   uint8_t sign;                                  /* Sign of shiftBits */
  67:Source\BasicMathFunctions/arm_shift_q7.c **** 
  68:Source\BasicMathFunctions/arm_shift_q7.c **** #if defined (ARM_MATH_DSP)
  69:Source\BasicMathFunctions/arm_shift_q7.c **** 
  70:Source\BasicMathFunctions/arm_shift_q7.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  71:Source\BasicMathFunctions/arm_shift_q7.c ****   q7_t in1;                                      /* Input value1 */
  72:Source\BasicMathFunctions/arm_shift_q7.c ****   q7_t in2;                                      /* Input value2 */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 3


  73:Source\BasicMathFunctions/arm_shift_q7.c ****   q7_t in3;                                      /* Input value3 */
  74:Source\BasicMathFunctions/arm_shift_q7.c ****   q7_t in4;                                      /* Input value4 */
  75:Source\BasicMathFunctions/arm_shift_q7.c **** 
  76:Source\BasicMathFunctions/arm_shift_q7.c **** 
  77:Source\BasicMathFunctions/arm_shift_q7.c ****   /*loop Unrolling */
  78:Source\BasicMathFunctions/arm_shift_q7.c ****   blkCnt = blockSize >> 2u;
  79:Source\BasicMathFunctions/arm_shift_q7.c **** 
  80:Source\BasicMathFunctions/arm_shift_q7.c ****   /* Getting the sign of shiftBits */
  81:Source\BasicMathFunctions/arm_shift_q7.c ****   sign = (shiftBits & 0x80);
  82:Source\BasicMathFunctions/arm_shift_q7.c **** 
  83:Source\BasicMathFunctions/arm_shift_q7.c ****   /* If the shift value is positive then do right shift else left shift */
  84:Source\BasicMathFunctions/arm_shift_q7.c ****   if (sign == 0u)
  85:Source\BasicMathFunctions/arm_shift_q7.c ****   {
  86:Source\BasicMathFunctions/arm_shift_q7.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  87:Source\BasicMathFunctions/arm_shift_q7.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
  88:Source\BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0u)
  89:Source\BasicMathFunctions/arm_shift_q7.c ****     {
  90:Source\BasicMathFunctions/arm_shift_q7.c ****       /* C = A << shiftBits */
  91:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Read 4 inputs */
  92:Source\BasicMathFunctions/arm_shift_q7.c ****       in1 = *pSrc;
  93:Source\BasicMathFunctions/arm_shift_q7.c ****       in2 = *(pSrc + 1);
  94:Source\BasicMathFunctions/arm_shift_q7.c ****       in3 = *(pSrc + 2);
  95:Source\BasicMathFunctions/arm_shift_q7.c ****       in4 = *(pSrc + 3);
  96:Source\BasicMathFunctions/arm_shift_q7.c **** 
  97:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Store the Shifted result in the destination buffer in single cycle by packing the outputs 
  98:Source\BasicMathFunctions/arm_shift_q7.c ****       *__SIMD32(pDst)++ = __PACKq7(__SSAT((in1 << shiftBits), 8),
  99:Source\BasicMathFunctions/arm_shift_q7.c ****                                    __SSAT((in2 << shiftBits), 8),
 100:Source\BasicMathFunctions/arm_shift_q7.c ****                                    __SSAT((in3 << shiftBits), 8),
 101:Source\BasicMathFunctions/arm_shift_q7.c ****                                    __SSAT((in4 << shiftBits), 8));
 102:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Update source pointer to process next sampels */
 103:Source\BasicMathFunctions/arm_shift_q7.c ****       pSrc += 4u;
 104:Source\BasicMathFunctions/arm_shift_q7.c **** 
 105:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Decrement the loop counter */
 106:Source\BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
 107:Source\BasicMathFunctions/arm_shift_q7.c ****     }
 108:Source\BasicMathFunctions/arm_shift_q7.c **** 
 109:Source\BasicMathFunctions/arm_shift_q7.c ****     /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 110:Source\BasicMathFunctions/arm_shift_q7.c ****      ** No loop unrolling is used. */
 111:Source\BasicMathFunctions/arm_shift_q7.c ****     blkCnt = blockSize % 0x4u;
 112:Source\BasicMathFunctions/arm_shift_q7.c **** 
 113:Source\BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0u)
 114:Source\BasicMathFunctions/arm_shift_q7.c ****     {
 115:Source\BasicMathFunctions/arm_shift_q7.c ****       /* C = A << shiftBits */
 116:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Shift the input and then store the result in the destination buffer. */
 117:Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (q7_t) __SSAT((*pSrc++ << shiftBits), 8);
 118:Source\BasicMathFunctions/arm_shift_q7.c **** 
 119:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Decrement the loop counter */
 120:Source\BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
 121:Source\BasicMathFunctions/arm_shift_q7.c ****     }
 122:Source\BasicMathFunctions/arm_shift_q7.c ****   }
 123:Source\BasicMathFunctions/arm_shift_q7.c ****   else
 124:Source\BasicMathFunctions/arm_shift_q7.c ****   {
 125:Source\BasicMathFunctions/arm_shift_q7.c ****     shiftBits = -shiftBits;
 126:Source\BasicMathFunctions/arm_shift_q7.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 127:Source\BasicMathFunctions/arm_shift_q7.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 128:Source\BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0u)
 129:Source\BasicMathFunctions/arm_shift_q7.c ****     {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 4


 130:Source\BasicMathFunctions/arm_shift_q7.c ****       /* C = A >> shiftBits */
 131:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Read 4 inputs */
 132:Source\BasicMathFunctions/arm_shift_q7.c ****       in1 = *pSrc;
 133:Source\BasicMathFunctions/arm_shift_q7.c ****       in2 = *(pSrc + 1);
 134:Source\BasicMathFunctions/arm_shift_q7.c ****       in3 = *(pSrc + 2);
 135:Source\BasicMathFunctions/arm_shift_q7.c ****       in4 = *(pSrc + 3);
 136:Source\BasicMathFunctions/arm_shift_q7.c **** 
 137:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Store the Shifted result in the destination buffer in single cycle by packing the outputs 
 138:Source\BasicMathFunctions/arm_shift_q7.c ****       *__SIMD32(pDst)++ = __PACKq7((in1 >> shiftBits), (in2 >> shiftBits),
 139:Source\BasicMathFunctions/arm_shift_q7.c ****                                    (in3 >> shiftBits), (in4 >> shiftBits));
 140:Source\BasicMathFunctions/arm_shift_q7.c **** 
 141:Source\BasicMathFunctions/arm_shift_q7.c **** 
 142:Source\BasicMathFunctions/arm_shift_q7.c ****       pSrc += 4u;
 143:Source\BasicMathFunctions/arm_shift_q7.c **** 
 144:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Decrement the loop counter */
 145:Source\BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
 146:Source\BasicMathFunctions/arm_shift_q7.c ****     }
 147:Source\BasicMathFunctions/arm_shift_q7.c **** 
 148:Source\BasicMathFunctions/arm_shift_q7.c ****     /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 149:Source\BasicMathFunctions/arm_shift_q7.c ****      ** No loop unrolling is used. */
 150:Source\BasicMathFunctions/arm_shift_q7.c ****     blkCnt = blockSize % 0x4u;
 151:Source\BasicMathFunctions/arm_shift_q7.c **** 
 152:Source\BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0u)
 153:Source\BasicMathFunctions/arm_shift_q7.c ****     {
 154:Source\BasicMathFunctions/arm_shift_q7.c ****       /* C = A >> shiftBits */
 155:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Shift the input and then store the result in the destination buffer. */
 156:Source\BasicMathFunctions/arm_shift_q7.c ****       in1 = *pSrc++;
 157:Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (in1 >> shiftBits);
 158:Source\BasicMathFunctions/arm_shift_q7.c **** 
 159:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Decrement the loop counter */
 160:Source\BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
 161:Source\BasicMathFunctions/arm_shift_q7.c ****     }
 162:Source\BasicMathFunctions/arm_shift_q7.c ****   }
 163:Source\BasicMathFunctions/arm_shift_q7.c **** 
 164:Source\BasicMathFunctions/arm_shift_q7.c **** #else
 165:Source\BasicMathFunctions/arm_shift_q7.c **** 
 166:Source\BasicMathFunctions/arm_shift_q7.c ****   /* Run the below code for Cortex-M0 */
 167:Source\BasicMathFunctions/arm_shift_q7.c **** 
 168:Source\BasicMathFunctions/arm_shift_q7.c ****   /* Getting the sign of shiftBits */
 169:Source\BasicMathFunctions/arm_shift_q7.c ****   sign = (shiftBits & 0x80);
  43              		.loc 1 169 0
  44 0014 0B23     		mov	r3, #11
  45 0016 FB18     		add	r3, r7, r3
  46 0018 1A78     		ldrb	r2, [r3]
  47 001a 2B23     		mov	r3, #43
  48 001c FB18     		add	r3, r7, r3
  49 001e 7F21     		mov	r1, #127
  50 0020 8A43     		bic	r2, r1
  51 0022 1A70     		strb	r2, [r3]
 170:Source\BasicMathFunctions/arm_shift_q7.c **** 
 171:Source\BasicMathFunctions/arm_shift_q7.c ****   /* If the shift value is positive then do right shift else left shift */
 172:Source\BasicMathFunctions/arm_shift_q7.c ****   if (sign == 0u)
  52              		.loc 1 172 0
  53 0024 2B23     		mov	r3, #43
  54 0026 FB18     		add	r3, r7, r3
  55 0028 1B78     		ldrb	r3, [r3]
  56 002a 002B     		cmp	r3, #0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 5


  57 002c 45D1     		bne	.L2
 173:Source\BasicMathFunctions/arm_shift_q7.c ****   {
 174:Source\BasicMathFunctions/arm_shift_q7.c ****     /* Initialize blkCnt with number of samples */
 175:Source\BasicMathFunctions/arm_shift_q7.c ****     blkCnt = blockSize;
  58              		.loc 1 175 0
  59 002e 3B68     		ldr	r3, [r7]
  60 0030 FB62     		str	r3, [r7, #44]
 176:Source\BasicMathFunctions/arm_shift_q7.c **** 
 177:Source\BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0u)
  61              		.loc 1 177 0
  62 0032 3EE0     		b	.L3
  63              	.L10:
 178:Source\BasicMathFunctions/arm_shift_q7.c ****     {
 179:Source\BasicMathFunctions/arm_shift_q7.c ****       /* C = A << shiftBits */
 180:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Shift the input and then store the result in the destination buffer. */
 181:Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (q7_t) __SSAT(((q15_t) * pSrc++ << shiftBits), 8);
  64              		.loc 1 181 0
  65 0034 7B68     		ldr	r3, [r7, #4]
  66 0036 5A1C     		add	r2, r3, #1
  67 0038 7A60     		str	r2, [r7, #4]
  68 003a FA68     		ldr	r2, [r7, #12]
  69 003c 511C     		add	r1, r2, #1
  70 003e F960     		str	r1, [r7, #12]
  71 0040 1278     		ldrb	r2, [r2]
  72 0042 51B2     		sxtb	r1, r2
  73 0044 0B22     		mov	r2, #11
  74 0046 BA18     		add	r2, r7, r2
  75 0048 1278     		ldrb	r2, [r2]
  76 004a 52B2     		sxtb	r2, r2
  77 004c 9140     		lsl	r1, r1, r2
  78 004e 0A1C     		mov	r2, r1
  79 0050 7A62     		str	r2, [r7, #36]
  80 0052 0822     		mov	r2, #8
  81 0054 3A62     		str	r2, [r7, #32]
  82              	.LBB4:
  83              	.LBB5:
  84              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 6


  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 7


  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 8


 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 9


 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 10


 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 11


 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 12


 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 13


 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 14


 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 15


 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 16


 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 17


 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
  85              		.loc 2 699 0
  86 0056 0122     		mov	r2, #1
  87 0058 FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  88              		.loc 2 700 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 18


  89 005a 0022     		mov	r2, #0
  90 005c BA61     		str	r2, [r7, #24]
  91 005e 05E0     		b	.L4
  92              	.L5:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
  93              		.loc 2 702 0
  94 0060 FA69     		ldr	r2, [r7, #28]
  95 0062 5200     		lsl	r2, r2, #1
  96 0064 FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  97              		.loc 2 700 0
  98 0066 BA69     		ldr	r2, [r7, #24]
  99 0068 0132     		add	r2, r2, #1
 100 006a BA61     		str	r2, [r7, #24]
 101              	.L4:
 102 006c 3A6A     		ldr	r2, [r7, #32]
 103 006e 013A     		sub	r2, r2, #1
 104 0070 B969     		ldr	r1, [r7, #24]
 105 0072 9142     		cmp	r1, r2
 106 0074 F4D3     		bcc	.L5
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 107              		.loc 2 705 0
 108 0076 7A6A     		ldr	r2, [r7, #36]
 109 0078 002A     		cmp	r2, #0
 110 007a 09DD     		ble	.L6
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 111              		.loc 2 707 0
 112 007c FA69     		ldr	r2, [r7, #28]
 113 007e 013A     		sub	r2, r2, #1
 114 0080 FA61     		str	r2, [r7, #28]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 115              		.loc 2 709 0
 116 0082 796A     		ldr	r1, [r7, #36]
 117 0084 FA69     		ldr	r2, [r7, #28]
 118 0086 9142     		cmp	r1, r2
 119 0088 0CDD     		ble	.L14
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 120              		.loc 2 711 0
 121 008a FA69     		ldr	r2, [r7, #28]
 122 008c 7A62     		str	r2, [r7, #36]
 123 008e 0AE0     		b	.L8
 124              	.L6:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 125              		.loc 2 716 0
 126 0090 FA69     		ldr	r2, [r7, #28]
 127 0092 5242     		neg	r2, r2
 128 0094 7A61     		str	r2, [r7, #20]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 19


 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 129              		.loc 2 718 0
 130 0096 796A     		ldr	r1, [r7, #36]
 131 0098 7A69     		ldr	r2, [r7, #20]
 132 009a 9142     		cmp	r1, r2
 133 009c 03DA     		bge	.L8
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 134              		.loc 2 720 0
 135 009e 7A69     		ldr	r2, [r7, #20]
 136 00a0 7A62     		str	r2, [r7, #36]
 137 00a2 00E0     		b	.L8
 138              	.L14:
 711:.\Include/arm_math.h ****       }
 139              		.loc 2 711 0
 140 00a4 C046     		mov	r8, r8
 141              	.L8:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 142              		.loc 2 723 0
 143 00a6 7A6A     		ldr	r2, [r7, #36]
 144              	.LBE5:
 145              	.LBE4:
 146              		.loc 1 181 0
 147 00a8 D2B2     		uxtb	r2, r2
 148 00aa 1A70     		strb	r2, [r3]
 182:Source\BasicMathFunctions/arm_shift_q7.c **** 
 183:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Decrement the loop counter */
 184:Source\BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
 149              		.loc 1 184 0
 150 00ac FB6A     		ldr	r3, [r7, #44]
 151 00ae 013B     		sub	r3, r3, #1
 152 00b0 FB62     		str	r3, [r7, #44]
 153              	.L3:
 177:Source\BasicMathFunctions/arm_shift_q7.c ****     {
 154              		.loc 1 177 0
 155 00b2 FB6A     		ldr	r3, [r7, #44]
 156 00b4 002B     		cmp	r3, #0
 157 00b6 BDD1     		bne	.L10
 158 00b8 19E0     		b	.L1
 159              	.L2:
 185:Source\BasicMathFunctions/arm_shift_q7.c ****     }
 186:Source\BasicMathFunctions/arm_shift_q7.c ****   }
 187:Source\BasicMathFunctions/arm_shift_q7.c ****   else
 188:Source\BasicMathFunctions/arm_shift_q7.c ****   {
 189:Source\BasicMathFunctions/arm_shift_q7.c ****     /* Initialize blkCnt with number of samples */
 190:Source\BasicMathFunctions/arm_shift_q7.c ****     blkCnt = blockSize;
 160              		.loc 1 190 0
 161 00ba 3B68     		ldr	r3, [r7]
 162 00bc FB62     		str	r3, [r7, #44]
 191:Source\BasicMathFunctions/arm_shift_q7.c **** 
 192:Source\BasicMathFunctions/arm_shift_q7.c ****     while (blkCnt > 0u)
 163              		.loc 1 192 0
 164 00be 13E0     		b	.L12
 165              	.L13:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 20


 193:Source\BasicMathFunctions/arm_shift_q7.c ****     {
 194:Source\BasicMathFunctions/arm_shift_q7.c ****       /* C = A >> shiftBits */
 195:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Shift the input and then store the result in the destination buffer. */
 196:Source\BasicMathFunctions/arm_shift_q7.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 166              		.loc 1 196 0
 167 00c0 7B68     		ldr	r3, [r7, #4]
 168 00c2 5A1C     		add	r2, r3, #1
 169 00c4 7A60     		str	r2, [r7, #4]
 170 00c6 FA68     		ldr	r2, [r7, #12]
 171 00c8 511C     		add	r1, r2, #1
 172 00ca F960     		str	r1, [r7, #12]
 173 00cc 1278     		ldrb	r2, [r2]
 174 00ce 51B2     		sxtb	r1, r2
 175 00d0 0B22     		mov	r2, #11
 176 00d2 BA18     		add	r2, r7, r2
 177 00d4 1278     		ldrb	r2, [r2]
 178 00d6 52B2     		sxtb	r2, r2
 179 00d8 5242     		neg	r2, r2
 180 00da 1141     		asr	r1, r1, r2
 181 00dc 0A1C     		mov	r2, r1
 182 00de D2B2     		uxtb	r2, r2
 183 00e0 1A70     		strb	r2, [r3]
 197:Source\BasicMathFunctions/arm_shift_q7.c **** 
 198:Source\BasicMathFunctions/arm_shift_q7.c ****       /* Decrement the loop counter */
 199:Source\BasicMathFunctions/arm_shift_q7.c ****       blkCnt--;
 184              		.loc 1 199 0
 185 00e2 FB6A     		ldr	r3, [r7, #44]
 186 00e4 013B     		sub	r3, r3, #1
 187 00e6 FB62     		str	r3, [r7, #44]
 188              	.L12:
 192:Source\BasicMathFunctions/arm_shift_q7.c ****     {
 189              		.loc 1 192 0
 190 00e8 FB6A     		ldr	r3, [r7, #44]
 191 00ea 002B     		cmp	r3, #0
 192 00ec E8D1     		bne	.L13
 193              	.L1:
 200:Source\BasicMathFunctions/arm_shift_q7.c ****     }
 201:Source\BasicMathFunctions/arm_shift_q7.c ****   }
 202:Source\BasicMathFunctions/arm_shift_q7.c **** 
 203:Source\BasicMathFunctions/arm_shift_q7.c **** #endif /* #if defined (ARM_MATH_DSP) */
 204:Source\BasicMathFunctions/arm_shift_q7.c **** }
 194              		.loc 1 204 0
 195 00ee BD46     		mov	sp, r7
 196 00f0 0CB0     		add	sp, sp, #48
 197              		@ sp needed
 198 00f2 80BD     		pop	{r7, pc}
 199              		.cfi_endproc
 200              	.LFE82:
 201              		.size	arm_shift_q7, .-arm_shift_q7
 202              		.text
 203              	.Letext0:
 204              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 205              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 206              		.section	.debug_info,"",%progbits
 207              	.Ldebug_info0:
 208 0000 13020000 		.4byte	0x213
 209 0004 0400     		.2byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 21


 210 0006 00000000 		.4byte	.Ldebug_abbrev0
 211 000a 04       		.byte	0x4
 212 000b 01       		.uleb128 0x1
 213 000c 42010000 		.4byte	.LASF35
 214 0010 01       		.byte	0x1
 215 0011 31000000 		.4byte	.LASF36
 216 0015 5A000000 		.4byte	.LASF37
 217 0019 00000000 		.4byte	.Ldebug_ranges0+0
 218 001d 00000000 		.4byte	0
 219 0021 00000000 		.4byte	.Ldebug_line0
 220 0025 02       		.uleb128 0x2
 221 0026 0A000000 		.4byte	.LASF0
 222 002a 03       		.byte	0x3
 223 002b 1B       		.byte	0x1b
 224 002c 30000000 		.4byte	0x30
 225 0030 03       		.uleb128 0x3
 226 0031 01       		.byte	0x1
 227 0032 06       		.byte	0x6
 228 0033 52020000 		.4byte	.LASF2
 229 0037 02       		.uleb128 0x2
 230 0038 13000000 		.4byte	.LASF1
 231 003c 03       		.byte	0x3
 232 003d 1D       		.byte	0x1d
 233 003e 42000000 		.4byte	0x42
 234 0042 03       		.uleb128 0x3
 235 0043 01       		.byte	0x1
 236 0044 08       		.byte	0x8
 237 0045 C1000000 		.4byte	.LASF3
 238 0049 02       		.uleb128 0x2
 239 004a 1D000000 		.4byte	.LASF4
 240 004e 03       		.byte	0x3
 241 004f 29       		.byte	0x29
 242 0050 54000000 		.4byte	0x54
 243 0054 03       		.uleb128 0x3
 244 0055 02       		.byte	0x2
 245 0056 05       		.byte	0x5
 246 0057 11020000 		.4byte	.LASF5
 247 005b 03       		.uleb128 0x3
 248 005c 02       		.byte	0x2
 249 005d 07       		.byte	0x7
 250 005e E8000000 		.4byte	.LASF6
 251 0062 02       		.uleb128 0x2
 252 0063 27000000 		.4byte	.LASF7
 253 0067 03       		.byte	0x3
 254 0068 3F       		.byte	0x3f
 255 0069 6D000000 		.4byte	0x6d
 256 006d 03       		.uleb128 0x3
 257 006e 04       		.byte	0x4
 258 006f 05       		.byte	0x5
 259 0070 38020000 		.4byte	.LASF8
 260 0074 02       		.uleb128 0x2
 261 0075 0E010000 		.4byte	.LASF9
 262 0079 03       		.byte	0x3
 263 007a 41       		.byte	0x41
 264 007b 7F000000 		.4byte	0x7f
 265 007f 03       		.uleb128 0x3
 266 0080 04       		.byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 22


 267 0081 07       		.byte	0x7
 268 0082 D6000000 		.4byte	.LASF10
 269 0086 03       		.uleb128 0x3
 270 0087 08       		.byte	0x8
 271 0088 05       		.byte	0x5
 272 0089 F4010000 		.4byte	.LASF11
 273 008d 03       		.uleb128 0x3
 274 008e 08       		.byte	0x8
 275 008f 07       		.byte	0x7
 276 0090 2B010000 		.4byte	.LASF12
 277 0094 04       		.uleb128 0x4
 278 0095 04       		.byte	0x4
 279 0096 05       		.byte	0x5
 280 0097 696E7400 		.ascii	"int\000"
 281 009b 03       		.uleb128 0x3
 282 009c 04       		.byte	0x4
 283 009d 07       		.byte	0x7
 284 009e 1E010000 		.4byte	.LASF13
 285 00a2 02       		.uleb128 0x2
 286 00a3 A8000000 		.4byte	.LASF14
 287 00a7 04       		.byte	0x4
 288 00a8 14       		.byte	0x14
 289 00a9 25000000 		.4byte	0x25
 290 00ad 02       		.uleb128 0x2
 291 00ae A0000000 		.4byte	.LASF15
 292 00b2 04       		.byte	0x4
 293 00b3 15       		.byte	0x15
 294 00b4 37000000 		.4byte	0x37
 295 00b8 02       		.uleb128 0x2
 296 00b9 D4010000 		.4byte	.LASF16
 297 00bd 04       		.byte	0x4
 298 00be 20       		.byte	0x20
 299 00bf 49000000 		.4byte	0x49
 300 00c3 02       		.uleb128 0x2
 301 00c4 E3010000 		.4byte	.LASF17
 302 00c8 04       		.byte	0x4
 303 00c9 2C       		.byte	0x2c
 304 00ca 62000000 		.4byte	0x62
 305 00ce 02       		.uleb128 0x2
 306 00cf 2F020000 		.4byte	.LASF18
 307 00d3 04       		.byte	0x4
 308 00d4 2D       		.byte	0x2d
 309 00d5 74000000 		.4byte	0x74
 310 00d9 03       		.uleb128 0x3
 311 00da 04       		.byte	0x4
 312 00db 07       		.byte	0x7
 313 00dc EB010000 		.4byte	.LASF19
 314 00e0 03       		.uleb128 0x3
 315 00e1 01       		.byte	0x1
 316 00e2 08       		.byte	0x8
 317 00e3 0C020000 		.4byte	.LASF20
 318 00e7 03       		.uleb128 0x3
 319 00e8 08       		.byte	0x8
 320 00e9 04       		.byte	0x4
 321 00ea 07010000 		.4byte	.LASF21
 322 00ee 03       		.uleb128 0x3
 323 00ef 04       		.byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 23


 324 00f0 04       		.byte	0x4
 325 00f1 B5000000 		.4byte	.LASF22
 326 00f5 03       		.uleb128 0x3
 327 00f6 08       		.byte	0x8
 328 00f7 04       		.byte	0x4
 329 00f8 46020000 		.4byte	.LASF23
 330 00fc 05       		.uleb128 0x5
 331 00fd 19010000 		.4byte	.LASF24
 332 0101 02       		.byte	0x2
 333 0102 9101     		.2byte	0x191
 334 0104 A2000000 		.4byte	0xa2
 335 0108 05       		.uleb128 0x5
 336 0109 AF000000 		.4byte	.LASF25
 337 010d 02       		.byte	0x2
 338 010e 9601     		.2byte	0x196
 339 0110 B8000000 		.4byte	0xb8
 340 0114 05       		.uleb128 0x5
 341 0115 BB000000 		.4byte	.LASF26
 342 0119 02       		.byte	0x2
 343 011a 9B01     		.2byte	0x19b
 344 011c C3000000 		.4byte	0xc3
 345 0120 06       		.uleb128 0x6
 346 0121 04       		.byte	0x4
 347 0122 FC000000 		.4byte	0xfc
 348 0126 07       		.uleb128 0x7
 349 0127 DC010000 		.4byte	.LASF38
 350 012b 02       		.byte	0x2
 351 012c B402     		.2byte	0x2b4
 352 012e 14010000 		.4byte	0x114
 353 0132 03       		.byte	0x3
 354 0133 6E010000 		.4byte	0x16e
 355 0137 08       		.uleb128 0x8
 356 0138 7800     		.ascii	"x\000"
 357 013a 02       		.byte	0x2
 358 013b B502     		.2byte	0x2b5
 359 013d 14010000 		.4byte	0x114
 360 0141 08       		.uleb128 0x8
 361 0142 7900     		.ascii	"y\000"
 362 0144 02       		.byte	0x2
 363 0145 B602     		.2byte	0x2b6
 364 0147 CE000000 		.4byte	0xce
 365 014b 09       		.uleb128 0x9
 366 014c 28020000 		.4byte	.LASF27
 367 0150 02       		.byte	0x2
 368 0151 B802     		.2byte	0x2b8
 369 0153 C3000000 		.4byte	0xc3
 370 0157 09       		.uleb128 0x9
 371 0158 00010000 		.4byte	.LASF28
 372 015c 02       		.byte	0x2
 373 015d B802     		.2byte	0x2b8
 374 015f C3000000 		.4byte	0xc3
 375 0163 0A       		.uleb128 0xa
 376 0164 6900     		.ascii	"i\000"
 377 0166 02       		.byte	0x2
 378 0167 B902     		.2byte	0x2b9
 379 0169 CE000000 		.4byte	0xce
 380 016d 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 24


 381 016e 0B       		.uleb128 0xb
 382 016f 1B020000 		.4byte	.LASF39
 383 0173 01       		.byte	0x1
 384 0174 3B       		.byte	0x3b
 385 0175 00000000 		.4byte	.LFB82
 386 0179 F4000000 		.4byte	.LFE82-.LFB82
 387 017d 01       		.uleb128 0x1
 388 017e 9C       		.byte	0x9c
 389 017f 0C       		.uleb128 0xc
 390 0180 5E020000 		.4byte	.LASF29
 391 0184 01       		.byte	0x1
 392 0185 3C       		.byte	0x3c
 393 0186 20010000 		.4byte	0x120
 394 018a 02       		.uleb128 0x2
 395 018b 91       		.byte	0x91
 396 018c 54       		.sleb128 -44
 397 018d 0C       		.uleb128 0xc
 398 018e 00000000 		.4byte	.LASF30
 399 0192 01       		.byte	0x1
 400 0193 3D       		.byte	0x3d
 401 0194 A2000000 		.4byte	0xa2
 402 0198 02       		.uleb128 0x2
 403 0199 91       		.byte	0x91
 404 019a 53       		.sleb128 -45
 405 019b 0C       		.uleb128 0xc
 406 019c FB000000 		.4byte	.LASF31
 407 01a0 01       		.byte	0x1
 408 01a1 3E       		.byte	0x3e
 409 01a2 20010000 		.4byte	0x120
 410 01a6 02       		.uleb128 0x2
 411 01a7 91       		.byte	0x91
 412 01a8 4C       		.sleb128 -52
 413 01a9 0C       		.uleb128 0xc
 414 01aa 02020000 		.4byte	.LASF32
 415 01ae 01       		.byte	0x1
 416 01af 3F       		.byte	0x3f
 417 01b0 CE000000 		.4byte	0xce
 418 01b4 02       		.uleb128 0x2
 419 01b5 91       		.byte	0x91
 420 01b6 48       		.sleb128 -56
 421 01b7 0D       		.uleb128 0xd
 422 01b8 CF000000 		.4byte	.LASF33
 423 01bc 01       		.byte	0x1
 424 01bd 41       		.byte	0x41
 425 01be CE000000 		.4byte	0xce
 426 01c2 02       		.uleb128 0x2
 427 01c3 91       		.byte	0x91
 428 01c4 74       		.sleb128 -12
 429 01c5 0D       		.uleb128 0xd
 430 01c6 41020000 		.4byte	.LASF34
 431 01ca 01       		.byte	0x1
 432 01cb 42       		.byte	0x42
 433 01cc AD000000 		.4byte	0xad
 434 01d0 02       		.uleb128 0x2
 435 01d1 91       		.byte	0x91
 436 01d2 73       		.sleb128 -13
 437 01d3 0E       		.uleb128 0xe
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 25


 438 01d4 26010000 		.4byte	0x126
 439 01d8 56000000 		.4byte	.LBB4
 440 01dc 52000000 		.4byte	.LBE4-.LBB4
 441 01e0 01       		.byte	0x1
 442 01e1 B5       		.byte	0xb5
 443 01e2 0F       		.uleb128 0xf
 444 01e3 41010000 		.4byte	0x141
 445 01e7 02       		.uleb128 0x2
 446 01e8 91       		.byte	0x91
 447 01e9 68       		.sleb128 -24
 448 01ea 0F       		.uleb128 0xf
 449 01eb 37010000 		.4byte	0x137
 450 01ef 02       		.uleb128 0x2
 451 01f0 91       		.byte	0x91
 452 01f1 6C       		.sleb128 -20
 453 01f2 10       		.uleb128 0x10
 454 01f3 56000000 		.4byte	.LBB5
 455 01f7 52000000 		.4byte	.LBE5-.LBB5
 456 01fb 11       		.uleb128 0x11
 457 01fc 4B010000 		.4byte	0x14b
 458 0200 02       		.uleb128 0x2
 459 0201 91       		.byte	0x91
 460 0202 64       		.sleb128 -28
 461 0203 11       		.uleb128 0x11
 462 0204 57010000 		.4byte	0x157
 463 0208 02       		.uleb128 0x2
 464 0209 91       		.byte	0x91
 465 020a 5C       		.sleb128 -36
 466 020b 11       		.uleb128 0x11
 467 020c 63010000 		.4byte	0x163
 468 0210 02       		.uleb128 0x2
 469 0211 91       		.byte	0x91
 470 0212 60       		.sleb128 -32
 471 0213 00       		.byte	0
 472 0214 00       		.byte	0
 473 0215 00       		.byte	0
 474 0216 00       		.byte	0
 475              		.section	.debug_abbrev,"",%progbits
 476              	.Ldebug_abbrev0:
 477 0000 01       		.uleb128 0x1
 478 0001 11       		.uleb128 0x11
 479 0002 01       		.byte	0x1
 480 0003 25       		.uleb128 0x25
 481 0004 0E       		.uleb128 0xe
 482 0005 13       		.uleb128 0x13
 483 0006 0B       		.uleb128 0xb
 484 0007 03       		.uleb128 0x3
 485 0008 0E       		.uleb128 0xe
 486 0009 1B       		.uleb128 0x1b
 487 000a 0E       		.uleb128 0xe
 488 000b 55       		.uleb128 0x55
 489 000c 17       		.uleb128 0x17
 490 000d 11       		.uleb128 0x11
 491 000e 01       		.uleb128 0x1
 492 000f 10       		.uleb128 0x10
 493 0010 17       		.uleb128 0x17
 494 0011 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 26


 495 0012 00       		.byte	0
 496 0013 02       		.uleb128 0x2
 497 0014 16       		.uleb128 0x16
 498 0015 00       		.byte	0
 499 0016 03       		.uleb128 0x3
 500 0017 0E       		.uleb128 0xe
 501 0018 3A       		.uleb128 0x3a
 502 0019 0B       		.uleb128 0xb
 503 001a 3B       		.uleb128 0x3b
 504 001b 0B       		.uleb128 0xb
 505 001c 49       		.uleb128 0x49
 506 001d 13       		.uleb128 0x13
 507 001e 00       		.byte	0
 508 001f 00       		.byte	0
 509 0020 03       		.uleb128 0x3
 510 0021 24       		.uleb128 0x24
 511 0022 00       		.byte	0
 512 0023 0B       		.uleb128 0xb
 513 0024 0B       		.uleb128 0xb
 514 0025 3E       		.uleb128 0x3e
 515 0026 0B       		.uleb128 0xb
 516 0027 03       		.uleb128 0x3
 517 0028 0E       		.uleb128 0xe
 518 0029 00       		.byte	0
 519 002a 00       		.byte	0
 520 002b 04       		.uleb128 0x4
 521 002c 24       		.uleb128 0x24
 522 002d 00       		.byte	0
 523 002e 0B       		.uleb128 0xb
 524 002f 0B       		.uleb128 0xb
 525 0030 3E       		.uleb128 0x3e
 526 0031 0B       		.uleb128 0xb
 527 0032 03       		.uleb128 0x3
 528 0033 08       		.uleb128 0x8
 529 0034 00       		.byte	0
 530 0035 00       		.byte	0
 531 0036 05       		.uleb128 0x5
 532 0037 16       		.uleb128 0x16
 533 0038 00       		.byte	0
 534 0039 03       		.uleb128 0x3
 535 003a 0E       		.uleb128 0xe
 536 003b 3A       		.uleb128 0x3a
 537 003c 0B       		.uleb128 0xb
 538 003d 3B       		.uleb128 0x3b
 539 003e 05       		.uleb128 0x5
 540 003f 49       		.uleb128 0x49
 541 0040 13       		.uleb128 0x13
 542 0041 00       		.byte	0
 543 0042 00       		.byte	0
 544 0043 06       		.uleb128 0x6
 545 0044 0F       		.uleb128 0xf
 546 0045 00       		.byte	0
 547 0046 0B       		.uleb128 0xb
 548 0047 0B       		.uleb128 0xb
 549 0048 49       		.uleb128 0x49
 550 0049 13       		.uleb128 0x13
 551 004a 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 27


 552 004b 00       		.byte	0
 553 004c 07       		.uleb128 0x7
 554 004d 2E       		.uleb128 0x2e
 555 004e 01       		.byte	0x1
 556 004f 03       		.uleb128 0x3
 557 0050 0E       		.uleb128 0xe
 558 0051 3A       		.uleb128 0x3a
 559 0052 0B       		.uleb128 0xb
 560 0053 3B       		.uleb128 0x3b
 561 0054 05       		.uleb128 0x5
 562 0055 27       		.uleb128 0x27
 563 0056 19       		.uleb128 0x19
 564 0057 49       		.uleb128 0x49
 565 0058 13       		.uleb128 0x13
 566 0059 20       		.uleb128 0x20
 567 005a 0B       		.uleb128 0xb
 568 005b 01       		.uleb128 0x1
 569 005c 13       		.uleb128 0x13
 570 005d 00       		.byte	0
 571 005e 00       		.byte	0
 572 005f 08       		.uleb128 0x8
 573 0060 05       		.uleb128 0x5
 574 0061 00       		.byte	0
 575 0062 03       		.uleb128 0x3
 576 0063 08       		.uleb128 0x8
 577 0064 3A       		.uleb128 0x3a
 578 0065 0B       		.uleb128 0xb
 579 0066 3B       		.uleb128 0x3b
 580 0067 05       		.uleb128 0x5
 581 0068 49       		.uleb128 0x49
 582 0069 13       		.uleb128 0x13
 583 006a 00       		.byte	0
 584 006b 00       		.byte	0
 585 006c 09       		.uleb128 0x9
 586 006d 34       		.uleb128 0x34
 587 006e 00       		.byte	0
 588 006f 03       		.uleb128 0x3
 589 0070 0E       		.uleb128 0xe
 590 0071 3A       		.uleb128 0x3a
 591 0072 0B       		.uleb128 0xb
 592 0073 3B       		.uleb128 0x3b
 593 0074 05       		.uleb128 0x5
 594 0075 49       		.uleb128 0x49
 595 0076 13       		.uleb128 0x13
 596 0077 00       		.byte	0
 597 0078 00       		.byte	0
 598 0079 0A       		.uleb128 0xa
 599 007a 34       		.uleb128 0x34
 600 007b 00       		.byte	0
 601 007c 03       		.uleb128 0x3
 602 007d 08       		.uleb128 0x8
 603 007e 3A       		.uleb128 0x3a
 604 007f 0B       		.uleb128 0xb
 605 0080 3B       		.uleb128 0x3b
 606 0081 05       		.uleb128 0x5
 607 0082 49       		.uleb128 0x49
 608 0083 13       		.uleb128 0x13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 28


 609 0084 00       		.byte	0
 610 0085 00       		.byte	0
 611 0086 0B       		.uleb128 0xb
 612 0087 2E       		.uleb128 0x2e
 613 0088 01       		.byte	0x1
 614 0089 3F       		.uleb128 0x3f
 615 008a 19       		.uleb128 0x19
 616 008b 03       		.uleb128 0x3
 617 008c 0E       		.uleb128 0xe
 618 008d 3A       		.uleb128 0x3a
 619 008e 0B       		.uleb128 0xb
 620 008f 3B       		.uleb128 0x3b
 621 0090 0B       		.uleb128 0xb
 622 0091 27       		.uleb128 0x27
 623 0092 19       		.uleb128 0x19
 624 0093 11       		.uleb128 0x11
 625 0094 01       		.uleb128 0x1
 626 0095 12       		.uleb128 0x12
 627 0096 06       		.uleb128 0x6
 628 0097 40       		.uleb128 0x40
 629 0098 18       		.uleb128 0x18
 630 0099 9742     		.uleb128 0x2117
 631 009b 19       		.uleb128 0x19
 632 009c 00       		.byte	0
 633 009d 00       		.byte	0
 634 009e 0C       		.uleb128 0xc
 635 009f 05       		.uleb128 0x5
 636 00a0 00       		.byte	0
 637 00a1 03       		.uleb128 0x3
 638 00a2 0E       		.uleb128 0xe
 639 00a3 3A       		.uleb128 0x3a
 640 00a4 0B       		.uleb128 0xb
 641 00a5 3B       		.uleb128 0x3b
 642 00a6 0B       		.uleb128 0xb
 643 00a7 49       		.uleb128 0x49
 644 00a8 13       		.uleb128 0x13
 645 00a9 02       		.uleb128 0x2
 646 00aa 18       		.uleb128 0x18
 647 00ab 00       		.byte	0
 648 00ac 00       		.byte	0
 649 00ad 0D       		.uleb128 0xd
 650 00ae 34       		.uleb128 0x34
 651 00af 00       		.byte	0
 652 00b0 03       		.uleb128 0x3
 653 00b1 0E       		.uleb128 0xe
 654 00b2 3A       		.uleb128 0x3a
 655 00b3 0B       		.uleb128 0xb
 656 00b4 3B       		.uleb128 0x3b
 657 00b5 0B       		.uleb128 0xb
 658 00b6 49       		.uleb128 0x49
 659 00b7 13       		.uleb128 0x13
 660 00b8 02       		.uleb128 0x2
 661 00b9 18       		.uleb128 0x18
 662 00ba 00       		.byte	0
 663 00bb 00       		.byte	0
 664 00bc 0E       		.uleb128 0xe
 665 00bd 1D       		.uleb128 0x1d
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 29


 666 00be 01       		.byte	0x1
 667 00bf 31       		.uleb128 0x31
 668 00c0 13       		.uleb128 0x13
 669 00c1 11       		.uleb128 0x11
 670 00c2 01       		.uleb128 0x1
 671 00c3 12       		.uleb128 0x12
 672 00c4 06       		.uleb128 0x6
 673 00c5 58       		.uleb128 0x58
 674 00c6 0B       		.uleb128 0xb
 675 00c7 59       		.uleb128 0x59
 676 00c8 0B       		.uleb128 0xb
 677 00c9 00       		.byte	0
 678 00ca 00       		.byte	0
 679 00cb 0F       		.uleb128 0xf
 680 00cc 05       		.uleb128 0x5
 681 00cd 00       		.byte	0
 682 00ce 31       		.uleb128 0x31
 683 00cf 13       		.uleb128 0x13
 684 00d0 02       		.uleb128 0x2
 685 00d1 18       		.uleb128 0x18
 686 00d2 00       		.byte	0
 687 00d3 00       		.byte	0
 688 00d4 10       		.uleb128 0x10
 689 00d5 0B       		.uleb128 0xb
 690 00d6 01       		.byte	0x1
 691 00d7 11       		.uleb128 0x11
 692 00d8 01       		.uleb128 0x1
 693 00d9 12       		.uleb128 0x12
 694 00da 06       		.uleb128 0x6
 695 00db 00       		.byte	0
 696 00dc 00       		.byte	0
 697 00dd 11       		.uleb128 0x11
 698 00de 34       		.uleb128 0x34
 699 00df 00       		.byte	0
 700 00e0 31       		.uleb128 0x31
 701 00e1 13       		.uleb128 0x13
 702 00e2 02       		.uleb128 0x2
 703 00e3 18       		.uleb128 0x18
 704 00e4 00       		.byte	0
 705 00e5 00       		.byte	0
 706 00e6 00       		.byte	0
 707              		.section	.debug_aranges,"",%progbits
 708 0000 1C000000 		.4byte	0x1c
 709 0004 0200     		.2byte	0x2
 710 0006 00000000 		.4byte	.Ldebug_info0
 711 000a 04       		.byte	0x4
 712 000b 00       		.byte	0
 713 000c 0000     		.2byte	0
 714 000e 0000     		.2byte	0
 715 0010 00000000 		.4byte	.LFB82
 716 0014 F4000000 		.4byte	.LFE82-.LFB82
 717 0018 00000000 		.4byte	0
 718 001c 00000000 		.4byte	0
 719              		.section	.debug_ranges,"",%progbits
 720              	.Ldebug_ranges0:
 721 0000 00000000 		.4byte	.LFB82
 722 0004 F4000000 		.4byte	.LFE82
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 30


 723 0008 00000000 		.4byte	0
 724 000c 00000000 		.4byte	0
 725              		.section	.debug_line,"",%progbits
 726              	.Ldebug_line0:
 727 0000 9A010000 		.section	.debug_str,"MS",%progbits,1
 727      02004F01 
 727      00000201 
 727      FB0E0D00 
 727      01010101 
 728              	.LASF30:
 729 0000 73686966 		.ascii	"shiftBits\000"
 729      74426974 
 729      7300
 730              	.LASF0:
 731 000a 5F5F696E 		.ascii	"__int8_t\000"
 731      74385F74 
 731      00
 732              	.LASF1:
 733 0013 5F5F7569 		.ascii	"__uint8_t\000"
 733      6E74385F 
 733      7400
 734              	.LASF4:
 735 001d 5F5F696E 		.ascii	"__int16_t\000"
 735      7431365F 
 735      7400
 736              	.LASF7:
 737 0027 5F5F696E 		.ascii	"__int32_t\000"
 737      7433325F 
 737      7400
 738              	.LASF36:
 739 0031 536F7572 		.ascii	"Source\\BasicMathFunctions\\arm_shift_q7.c\000"
 739      63655C42 
 739      61736963 
 739      4D617468 
 739      46756E63 
 740              	.LASF37:
 741 005a 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 741      73657273 
 741      5C666E65 
 741      7665735C 
 741      446F6375 
 742 0087 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 742      655F7370 
 742      6565645F 
 742      73656E73 
 742      6F722E63 
 743              	.LASF15:
 744 00a0 75696E74 		.ascii	"uint8_t\000"
 744      385F7400 
 745              	.LASF14:
 746 00a8 696E7438 		.ascii	"int8_t\000"
 746      5F7400
 747              	.LASF25:
 748 00af 7131355F 		.ascii	"q15_t\000"
 748      7400
 749              	.LASF22:
 750 00b5 666C6F61 		.ascii	"float\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 31


 750      7400
 751              	.LASF26:
 752 00bb 7133315F 		.ascii	"q31_t\000"
 752      7400
 753              	.LASF3:
 754 00c1 756E7369 		.ascii	"unsigned char\000"
 754      676E6564 
 754      20636861 
 754      7200
 755              	.LASF33:
 756 00cf 626C6B43 		.ascii	"blkCnt\000"
 756      6E7400
 757              	.LASF10:
 758 00d6 6C6F6E67 		.ascii	"long unsigned int\000"
 758      20756E73 
 758      69676E65 
 758      6420696E 
 758      7400
 759              	.LASF6:
 760 00e8 73686F72 		.ascii	"short unsigned int\000"
 760      7420756E 
 760      7369676E 
 760      65642069 
 760      6E7400
 761              	.LASF31:
 762 00fb 70447374 		.ascii	"pDst\000"
 762      00
 763              	.LASF28:
 764 0100 6E65674D 		.ascii	"negMin\000"
 764      696E00
 765              	.LASF21:
 766 0107 646F7562 		.ascii	"double\000"
 766      6C6500
 767              	.LASF9:
 768 010e 5F5F7569 		.ascii	"__uint32_t\000"
 768      6E743332 
 768      5F7400
 769              	.LASF24:
 770 0119 71375F74 		.ascii	"q7_t\000"
 770      00
 771              	.LASF13:
 772 011e 756E7369 		.ascii	"unsigned int\000"
 772      676E6564 
 772      20696E74 
 772      00
 773              	.LASF12:
 774 012b 6C6F6E67 		.ascii	"long long unsigned int\000"
 774      206C6F6E 
 774      6720756E 
 774      7369676E 
 774      65642069 
 775              	.LASF35:
 776 0142 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 776      4320342E 
 776      392E3320 
 776      32303135 
 776      30333033 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 32


 777 0175 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 777      20726576 
 777      6973696F 
 777      6E203232 
 777      31323230 
 778 01a8 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 778      30202D66 
 778      66756E63 
 778      74696F6E 
 778      2D736563 
 779              	.LASF16:
 780 01d4 696E7431 		.ascii	"int16_t\000"
 780      365F7400 
 781              	.LASF38:
 782 01dc 5F5F5353 		.ascii	"__SSAT\000"
 782      415400
 783              	.LASF17:
 784 01e3 696E7433 		.ascii	"int32_t\000"
 784      325F7400 
 785              	.LASF19:
 786 01eb 73697A65 		.ascii	"sizetype\000"
 786      74797065 
 786      00
 787              	.LASF11:
 788 01f4 6C6F6E67 		.ascii	"long long int\000"
 788      206C6F6E 
 788      6720696E 
 788      7400
 789              	.LASF32:
 790 0202 626C6F63 		.ascii	"blockSize\000"
 790      6B53697A 
 790      6500
 791              	.LASF20:
 792 020c 63686172 		.ascii	"char\000"
 792      00
 793              	.LASF5:
 794 0211 73686F72 		.ascii	"short int\000"
 794      7420696E 
 794      7400
 795              	.LASF39:
 796 021b 61726D5F 		.ascii	"arm_shift_q7\000"
 796      73686966 
 796      745F7137 
 796      00
 797              	.LASF27:
 798 0228 706F734D 		.ascii	"posMax\000"
 798      617800
 799              	.LASF18:
 800 022f 75696E74 		.ascii	"uint32_t\000"
 800      33325F74 
 800      00
 801              	.LASF8:
 802 0238 6C6F6E67 		.ascii	"long int\000"
 802      20696E74 
 802      00
 803              	.LASF34:
 804 0241 7369676E 		.ascii	"sign\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cceRoGmV.s 			page 33


 804      00
 805              	.LASF23:
 806 0246 6C6F6E67 		.ascii	"long double\000"
 806      20646F75 
 806      626C6500 
 807              	.LASF2:
 808 0252 7369676E 		.ascii	"signed char\000"
 808      65642063 
 808      68617200 
 809              	.LASF29:
 810 025e 70537263 		.ascii	"pSrc\000"
 810      00
 811              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
