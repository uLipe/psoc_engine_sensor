ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_offset_q31.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_offset_q31,"ax",%progbits
  18              		.align	2
  19              		.global	arm_offset_q31
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_offset_q31, %function
  23              	arm_offset_q31:
  24              	.LFB82:
  25              		.file 1 "Source\\BasicMathFunctions\\arm_offset_q31.c"
   1:Source\BasicMathFunctions/arm_offset_q31.c **** /* ----------------------------------------------------------------------
   2:Source\BasicMathFunctions/arm_offset_q31.c ****  * Project:      CMSIS DSP Library
   3:Source\BasicMathFunctions/arm_offset_q31.c ****  * Title:        arm_offset_q31.c
   4:Source\BasicMathFunctions/arm_offset_q31.c ****  * Description:  Q31 vector offset
   5:Source\BasicMathFunctions/arm_offset_q31.c ****  *
   6:Source\BasicMathFunctions/arm_offset_q31.c ****  * $Date:        27. January 2017
   7:Source\BasicMathFunctions/arm_offset_q31.c ****  * $Revision:    V.1.5.1
   8:Source\BasicMathFunctions/arm_offset_q31.c ****  *
   9:Source\BasicMathFunctions/arm_offset_q31.c ****  * Target Processor: Cortex-M cores
  10:Source\BasicMathFunctions/arm_offset_q31.c ****  * -------------------------------------------------------------------- */
  11:Source\BasicMathFunctions/arm_offset_q31.c **** /*
  12:Source\BasicMathFunctions/arm_offset_q31.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\BasicMathFunctions/arm_offset_q31.c ****  *
  14:Source\BasicMathFunctions/arm_offset_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\BasicMathFunctions/arm_offset_q31.c ****  *
  16:Source\BasicMathFunctions/arm_offset_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\BasicMathFunctions/arm_offset_q31.c ****  * not use this file except in compliance with the License.
  18:Source\BasicMathFunctions/arm_offset_q31.c ****  * You may obtain a copy of the License at
  19:Source\BasicMathFunctions/arm_offset_q31.c ****  *
  20:Source\BasicMathFunctions/arm_offset_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\BasicMathFunctions/arm_offset_q31.c ****  *
  22:Source\BasicMathFunctions/arm_offset_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\BasicMathFunctions/arm_offset_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\BasicMathFunctions/arm_offset_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\BasicMathFunctions/arm_offset_q31.c ****  * See the License for the specific language governing permissions and
  26:Source\BasicMathFunctions/arm_offset_q31.c ****  * limitations under the License.
  27:Source\BasicMathFunctions/arm_offset_q31.c ****  */
  28:Source\BasicMathFunctions/arm_offset_q31.c **** 
  29:Source\BasicMathFunctions/arm_offset_q31.c **** #include "arm_math.h"
  30:Source\BasicMathFunctions/arm_offset_q31.c **** 
  31:Source\BasicMathFunctions/arm_offset_q31.c **** /**
  32:Source\BasicMathFunctions/arm_offset_q31.c ****  * @ingroup groupMath
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 2


  33:Source\BasicMathFunctions/arm_offset_q31.c ****  */
  34:Source\BasicMathFunctions/arm_offset_q31.c **** 
  35:Source\BasicMathFunctions/arm_offset_q31.c **** /**
  36:Source\BasicMathFunctions/arm_offset_q31.c ****  * @addtogroup offset
  37:Source\BasicMathFunctions/arm_offset_q31.c ****  * @{
  38:Source\BasicMathFunctions/arm_offset_q31.c ****  */
  39:Source\BasicMathFunctions/arm_offset_q31.c **** 
  40:Source\BasicMathFunctions/arm_offset_q31.c **** /**
  41:Source\BasicMathFunctions/arm_offset_q31.c ****  * @brief  Adds a constant offset to a Q31 vector.
  42:Source\BasicMathFunctions/arm_offset_q31.c ****  * @param[in]  *pSrc points to the input vector
  43:Source\BasicMathFunctions/arm_offset_q31.c ****  * @param[in]  offset is the offset to be added
  44:Source\BasicMathFunctions/arm_offset_q31.c ****  * @param[out]  *pDst points to the output vector
  45:Source\BasicMathFunctions/arm_offset_q31.c ****  * @param[in]  blockSize number of samples in the vector
  46:Source\BasicMathFunctions/arm_offset_q31.c ****  * @return none.
  47:Source\BasicMathFunctions/arm_offset_q31.c ****  *
  48:Source\BasicMathFunctions/arm_offset_q31.c ****  * <b>Scaling and Overflow Behavior:</b>
  49:Source\BasicMathFunctions/arm_offset_q31.c ****  * \par
  50:Source\BasicMathFunctions/arm_offset_q31.c ****  * The function uses saturating arithmetic.
  51:Source\BasicMathFunctions/arm_offset_q31.c ****  * Results outside of the allowable Q31 range [0x80000000 0x7FFFFFFF] are saturated.
  52:Source\BasicMathFunctions/arm_offset_q31.c ****  */
  53:Source\BasicMathFunctions/arm_offset_q31.c **** 
  54:Source\BasicMathFunctions/arm_offset_q31.c **** void arm_offset_q31(
  55:Source\BasicMathFunctions/arm_offset_q31.c ****   q31_t * pSrc,
  56:Source\BasicMathFunctions/arm_offset_q31.c ****   q31_t offset,
  57:Source\BasicMathFunctions/arm_offset_q31.c ****   q31_t * pDst,
  58:Source\BasicMathFunctions/arm_offset_q31.c ****   uint32_t blockSize)
  59:Source\BasicMathFunctions/arm_offset_q31.c **** {
  26              		.loc 1 59 0
  27              		.cfi_startproc
  28 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  29              		.cfi_def_cfa_offset 20
  30              		.cfi_offset 4, -20
  31              		.cfi_offset 5, -16
  32              		.cfi_offset 6, -12
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 8FB0     		sub	sp, sp, #60
  36              		.cfi_def_cfa_offset 80
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7862     		str	r0, [r7, #36]
  40 0008 3962     		str	r1, [r7, #32]
  41 000a FA61     		str	r2, [r7, #28]
  42 000c BB61     		str	r3, [r7, #24]
  60:Source\BasicMathFunctions/arm_offset_q31.c ****   uint32_t blkCnt;                               /* loop counter */
  61:Source\BasicMathFunctions/arm_offset_q31.c **** 
  62:Source\BasicMathFunctions/arm_offset_q31.c **** #if defined (ARM_MATH_DSP)
  63:Source\BasicMathFunctions/arm_offset_q31.c **** 
  64:Source\BasicMathFunctions/arm_offset_q31.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  65:Source\BasicMathFunctions/arm_offset_q31.c ****   q31_t in1, in2, in3, in4;
  66:Source\BasicMathFunctions/arm_offset_q31.c **** 
  67:Source\BasicMathFunctions/arm_offset_q31.c **** 
  68:Source\BasicMathFunctions/arm_offset_q31.c ****   /*loop Unrolling */
  69:Source\BasicMathFunctions/arm_offset_q31.c ****   blkCnt = blockSize >> 2u;
  70:Source\BasicMathFunctions/arm_offset_q31.c **** 
  71:Source\BasicMathFunctions/arm_offset_q31.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  72:Source\BasicMathFunctions/arm_offset_q31.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 3


  73:Source\BasicMathFunctions/arm_offset_q31.c ****   while (blkCnt > 0u)
  74:Source\BasicMathFunctions/arm_offset_q31.c ****   {
  75:Source\BasicMathFunctions/arm_offset_q31.c ****     /* C = A + offset */
  76:Source\BasicMathFunctions/arm_offset_q31.c ****     /* Add offset and then store the results in the destination buffer. */
  77:Source\BasicMathFunctions/arm_offset_q31.c ****     in1 = *pSrc++;
  78:Source\BasicMathFunctions/arm_offset_q31.c ****     in2 = *pSrc++;
  79:Source\BasicMathFunctions/arm_offset_q31.c ****     in3 = *pSrc++;
  80:Source\BasicMathFunctions/arm_offset_q31.c ****     in4 = *pSrc++;
  81:Source\BasicMathFunctions/arm_offset_q31.c **** 
  82:Source\BasicMathFunctions/arm_offset_q31.c ****     *pDst++ = __QADD(in1, offset);
  83:Source\BasicMathFunctions/arm_offset_q31.c ****     *pDst++ = __QADD(in2, offset);
  84:Source\BasicMathFunctions/arm_offset_q31.c ****     *pDst++ = __QADD(in3, offset);
  85:Source\BasicMathFunctions/arm_offset_q31.c ****     *pDst++ = __QADD(in4, offset);
  86:Source\BasicMathFunctions/arm_offset_q31.c **** 
  87:Source\BasicMathFunctions/arm_offset_q31.c ****     /* Decrement the loop counter */
  88:Source\BasicMathFunctions/arm_offset_q31.c ****     blkCnt--;
  89:Source\BasicMathFunctions/arm_offset_q31.c ****   }
  90:Source\BasicMathFunctions/arm_offset_q31.c **** 
  91:Source\BasicMathFunctions/arm_offset_q31.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
  92:Source\BasicMathFunctions/arm_offset_q31.c ****    ** No loop unrolling is used. */
  93:Source\BasicMathFunctions/arm_offset_q31.c ****   blkCnt = blockSize % 0x4u;
  94:Source\BasicMathFunctions/arm_offset_q31.c **** 
  95:Source\BasicMathFunctions/arm_offset_q31.c ****   while (blkCnt > 0u)
  96:Source\BasicMathFunctions/arm_offset_q31.c ****   {
  97:Source\BasicMathFunctions/arm_offset_q31.c ****     /* C = A + offset */
  98:Source\BasicMathFunctions/arm_offset_q31.c ****     /* Add offset and then store the result in the destination buffer. */
  99:Source\BasicMathFunctions/arm_offset_q31.c ****     *pDst++ = __QADD(*pSrc++, offset);
 100:Source\BasicMathFunctions/arm_offset_q31.c **** 
 101:Source\BasicMathFunctions/arm_offset_q31.c ****     /* Decrement the loop counter */
 102:Source\BasicMathFunctions/arm_offset_q31.c ****     blkCnt--;
 103:Source\BasicMathFunctions/arm_offset_q31.c ****   }
 104:Source\BasicMathFunctions/arm_offset_q31.c **** 
 105:Source\BasicMathFunctions/arm_offset_q31.c **** #else
 106:Source\BasicMathFunctions/arm_offset_q31.c **** 
 107:Source\BasicMathFunctions/arm_offset_q31.c ****   /* Run the below code for Cortex-M0 */
 108:Source\BasicMathFunctions/arm_offset_q31.c **** 
 109:Source\BasicMathFunctions/arm_offset_q31.c ****   /* Initialize blkCnt with number of samples */
 110:Source\BasicMathFunctions/arm_offset_q31.c ****   blkCnt = blockSize;
  43              		.loc 1 110 0
  44 000e BB69     		ldr	r3, [r7, #24]
  45 0010 7B63     		str	r3, [r7, #52]
 111:Source\BasicMathFunctions/arm_offset_q31.c **** 
 112:Source\BasicMathFunctions/arm_offset_q31.c ****   while (blkCnt > 0u)
  46              		.loc 1 112 0
  47 0012 2DE0     		b	.L2
  48              	.L6:
 113:Source\BasicMathFunctions/arm_offset_q31.c ****   {
 114:Source\BasicMathFunctions/arm_offset_q31.c ****     /* C = A + offset */
 115:Source\BasicMathFunctions/arm_offset_q31.c ****     /* Add offset and then store the result in the destination buffer. */
 116:Source\BasicMathFunctions/arm_offset_q31.c ****     *pDst++ = (q31_t) clip_q63_to_q31((q63_t) * pSrc++ + offset);
  49              		.loc 1 116 0
  50 0014 FA69     		ldr	r2, [r7, #28]
  51 0016 131D     		add	r3, r2, #4
  52 0018 FB61     		str	r3, [r7, #28]
  53 001a 7B6A     		ldr	r3, [r7, #36]
  54 001c 191D     		add	r1, r3, #4
  55 001e 7962     		str	r1, [r7, #36]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 4


  56 0020 1B68     		ldr	r3, [r3]
  57 0022 1D1C     		mov	r5, r3
  58 0024 DB17     		asr	r3, r3, #31
  59 0026 1E1C     		mov	r6, r3
  60 0028 3B6A     		ldr	r3, [r7, #32]
  61 002a 3B61     		str	r3, [r7, #16]
  62 002c DB17     		asr	r3, r3, #31
  63 002e 7B61     		str	r3, [r7, #20]
  64 0030 3B69     		ldr	r3, [r7, #16]
  65 0032 7C69     		ldr	r4, [r7, #20]
  66 0034 5B19     		add	r3, r3, r5
  67 0036 7441     		adc	r4, r4, r6
  68 0038 BB62     		str	r3, [r7, #40]
  69 003a FC62     		str	r4, [r7, #44]
  70              	.LBB4:
  71              	.LBB5:
  72              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 5


  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 6


  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 7


 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 8


 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 9


 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 10


 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 11


 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 12


 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 13


 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
  73              		.loc 2 513 0
  74 003c FB6A     		ldr	r3, [r7, #44]
  75 003e 1B00     		asr	r3, r3, #0
  76 0040 BB60     		str	r3, [r7, #8]
  77 0042 FB6A     		ldr	r3, [r7, #44]
  78 0044 DB17     		asr	r3, r3, #31
  79 0046 FB60     		str	r3, [r7, #12]
  80 0048 B968     		ldr	r1, [r7, #8]
  81 004a BB6A     		ldr	r3, [r7, #40]
  82 004c DB17     		asr	r3, r3, #31
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
  83              		.loc 2 514 0
  84 004e 9942     		cmp	r1, r3
  85 0050 09D0     		beq	.L3
  86 0052 FB6A     		ldr	r3, [r7, #44]
  87 0054 DB17     		asr	r3, r3, #31
  88 0056 3B60     		str	r3, [r7]
  89 0058 FB6A     		ldr	r3, [r7, #44]
  90 005a DB17     		asr	r3, r3, #31
  91 005c 7B60     		str	r3, [r7, #4]
  92 005e 3968     		ldr	r1, [r7]
  93 0060 064B     		ldr	r3, .L8
  94 0062 4B40     		eor	r3, r1
  95 0064 00E0     		b	.L7
  96              	.L3:
  97 0066 BB6A     		ldr	r3, [r7, #40]
  98              	.L7:
  99              	.LBE5:
 100              	.LBE4:
 101              		.loc 1 116 0
 102 0068 1360     		str	r3, [r2]
 117:Source\BasicMathFunctions/arm_offset_q31.c **** 
 118:Source\BasicMathFunctions/arm_offset_q31.c ****     /* Decrement the loop counter */
 119:Source\BasicMathFunctions/arm_offset_q31.c ****     blkCnt--;
 103              		.loc 1 119 0
 104 006a 7B6B     		ldr	r3, [r7, #52]
 105 006c 013B     		sub	r3, r3, #1
 106 006e 7B63     		str	r3, [r7, #52]
 107              	.L2:
 112:Source\BasicMathFunctions/arm_offset_q31.c ****   {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 14


 108              		.loc 1 112 0
 109 0070 7B6B     		ldr	r3, [r7, #52]
 110 0072 002B     		cmp	r3, #0
 111 0074 CED1     		bne	.L6
 120:Source\BasicMathFunctions/arm_offset_q31.c ****   }
 121:Source\BasicMathFunctions/arm_offset_q31.c **** 
 122:Source\BasicMathFunctions/arm_offset_q31.c **** #endif /* #if defined (ARM_MATH_DSP) */
 123:Source\BasicMathFunctions/arm_offset_q31.c **** 
 124:Source\BasicMathFunctions/arm_offset_q31.c **** }
 112              		.loc 1 124 0
 113 0076 BD46     		mov	sp, r7
 114 0078 0FB0     		add	sp, sp, #60
 115              		@ sp needed
 116 007a F0BD     		pop	{r4, r5, r6, r7, pc}
 117              	.L9:
 118              		.align	2
 119              	.L8:
 120 007c FFFFFF7F 		.word	2147483647
 121              		.cfi_endproc
 122              	.LFE82:
 123              		.size	arm_offset_q31, .-arm_offset_q31
 124              		.text
 125              	.Letext0:
 126              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 127              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 128              		.section	.debug_info,"",%progbits
 129              	.Ldebug_info0:
 130 0000 77010000 		.4byte	0x177
 131 0004 0400     		.2byte	0x4
 132 0006 00000000 		.4byte	.Ldebug_abbrev0
 133 000a 04       		.byte	0x4
 134 000b 01       		.uleb128 0x1
 135 000c 1D010000 		.4byte	.LASF26
 136 0010 01       		.byte	0x1
 137 0011 17000000 		.4byte	.LASF27
 138 0015 4C000000 		.4byte	.LASF28
 139 0019 00000000 		.4byte	.Ldebug_ranges0+0
 140 001d 00000000 		.4byte	0
 141 0021 00000000 		.4byte	.Ldebug_line0
 142 0025 02       		.uleb128 0x2
 143 0026 01       		.byte	0x1
 144 0027 06       		.byte	0x6
 145 0028 22020000 		.4byte	.LASF0
 146 002c 02       		.uleb128 0x2
 147 002d 01       		.byte	0x1
 148 002e 08       		.byte	0x8
 149 002f 9E000000 		.4byte	.LASF1
 150 0033 02       		.uleb128 0x2
 151 0034 02       		.byte	0x2
 152 0035 05       		.byte	0x5
 153 0036 FA010000 		.4byte	.LASF2
 154 003a 02       		.uleb128 0x2
 155 003b 02       		.byte	0x2
 156 003c 07       		.byte	0x7
 157 003d C5000000 		.4byte	.LASF3
 158 0041 03       		.uleb128 0x3
 159 0042 42000000 		.4byte	.LASF5
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 15


 160 0046 03       		.byte	0x3
 161 0047 3F       		.byte	0x3f
 162 0048 4C000000 		.4byte	0x4c
 163 004c 02       		.uleb128 0x2
 164 004d 04       		.byte	0x4
 165 004e 05       		.byte	0x5
 166 004f 0D020000 		.4byte	.LASF4
 167 0053 03       		.uleb128 0x3
 168 0054 EE000000 		.4byte	.LASF6
 169 0058 03       		.byte	0x3
 170 0059 41       		.byte	0x41
 171 005a 5E000000 		.4byte	0x5e
 172 005e 02       		.uleb128 0x2
 173 005f 04       		.byte	0x4
 174 0060 07       		.byte	0x7
 175 0061 B3000000 		.4byte	.LASF7
 176 0065 03       		.uleb128 0x3
 177 0066 DD000000 		.4byte	.LASF8
 178 006a 03       		.byte	0x3
 179 006b 59       		.byte	0x59
 180 006c 70000000 		.4byte	0x70
 181 0070 02       		.uleb128 0x2
 182 0071 08       		.byte	0x8
 183 0072 05       		.byte	0x5
 184 0073 C6010000 		.4byte	.LASF9
 185 0077 02       		.uleb128 0x2
 186 0078 08       		.byte	0x8
 187 0079 07       		.byte	0x7
 188 007a 06010000 		.4byte	.LASF10
 189 007e 04       		.uleb128 0x4
 190 007f 04       		.byte	0x4
 191 0080 05       		.byte	0x5
 192 0081 696E7400 		.ascii	"int\000"
 193 0085 02       		.uleb128 0x2
 194 0086 04       		.byte	0x4
 195 0087 07       		.byte	0x7
 196 0088 F9000000 		.4byte	.LASF11
 197 008c 03       		.uleb128 0x3
 198 008d B5010000 		.4byte	.LASF12
 199 0091 04       		.byte	0x4
 200 0092 2C       		.byte	0x2c
 201 0093 41000000 		.4byte	0x41
 202 0097 03       		.uleb128 0x3
 203 0098 04020000 		.4byte	.LASF13
 204 009c 04       		.byte	0x4
 205 009d 2D       		.byte	0x2d
 206 009e 53000000 		.4byte	0x53
 207 00a2 03       		.uleb128 0x3
 208 00a3 00000000 		.4byte	.LASF14
 209 00a7 04       		.byte	0x4
 210 00a8 38       		.byte	0x38
 211 00a9 65000000 		.4byte	0x65
 212 00ad 02       		.uleb128 0x2
 213 00ae 04       		.byte	0x4
 214 00af 07       		.byte	0x7
 215 00b0 BD010000 		.4byte	.LASF15
 216 00b4 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 16


 217 00b5 01       		.byte	0x1
 218 00b6 08       		.byte	0x8
 219 00b7 EE010000 		.4byte	.LASF16
 220 00bb 02       		.uleb128 0x2
 221 00bc 08       		.byte	0x8
 222 00bd 04       		.byte	0x4
 223 00be E7000000 		.4byte	.LASF17
 224 00c2 02       		.uleb128 0x2
 225 00c3 04       		.byte	0x4
 226 00c4 04       		.byte	0x4
 227 00c5 92000000 		.4byte	.LASF18
 228 00c9 02       		.uleb128 0x2
 229 00ca 08       		.byte	0x8
 230 00cb 04       		.byte	0x4
 231 00cc 16020000 		.4byte	.LASF19
 232 00d0 05       		.uleb128 0x5
 233 00d1 98000000 		.4byte	.LASF20
 234 00d5 02       		.byte	0x2
 235 00d6 9B01     		.2byte	0x19b
 236 00d8 8C000000 		.4byte	0x8c
 237 00dc 05       		.uleb128 0x5
 238 00dd AF010000 		.4byte	.LASF21
 239 00e1 02       		.byte	0x2
 240 00e2 A001     		.2byte	0x1a0
 241 00e4 A2000000 		.4byte	0xa2
 242 00e8 06       		.uleb128 0x6
 243 00e9 04       		.byte	0x4
 244 00ea D0000000 		.4byte	0xd0
 245 00ee 07       		.uleb128 0x7
 246 00ef DE010000 		.4byte	.LASF29
 247 00f3 02       		.byte	0x2
 248 00f4 FE01     		.2byte	0x1fe
 249 00f6 D0000000 		.4byte	0xd0
 250 00fa 03       		.byte	0x3
 251 00fb 0A010000 		.4byte	0x10a
 252 00ff 08       		.uleb128 0x8
 253 0100 7800     		.ascii	"x\000"
 254 0102 02       		.byte	0x2
 255 0103 FF01     		.2byte	0x1ff
 256 0105 DC000000 		.4byte	0xdc
 257 0109 00       		.byte	0
 258 010a 09       		.uleb128 0x9
 259 010b 08000000 		.4byte	.LASF30
 260 010f 01       		.byte	0x1
 261 0110 36       		.byte	0x36
 262 0111 00000000 		.4byte	.LFB82
 263 0115 80000000 		.4byte	.LFE82-.LFB82
 264 0119 01       		.uleb128 0x1
 265 011a 9C       		.byte	0x9c
 266 011b 0A       		.uleb128 0xa
 267 011c 2E020000 		.4byte	.LASF22
 268 0120 01       		.byte	0x1
 269 0121 37       		.byte	0x37
 270 0122 E8000000 		.4byte	0xe8
 271 0126 02       		.uleb128 0x2
 272 0127 91       		.byte	0x91
 273 0128 54       		.sleb128 -44
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 17


 274 0129 0A       		.uleb128 0xa
 275 012a F3010000 		.4byte	.LASF23
 276 012e 01       		.byte	0x1
 277 012f 38       		.byte	0x38
 278 0130 D0000000 		.4byte	0xd0
 279 0134 02       		.uleb128 0x2
 280 0135 91       		.byte	0x91
 281 0136 50       		.sleb128 -48
 282 0137 0A       		.uleb128 0xa
 283 0138 D8000000 		.4byte	.LASF24
 284 013c 01       		.byte	0x1
 285 013d 39       		.byte	0x39
 286 013e E8000000 		.4byte	0xe8
 287 0142 02       		.uleb128 0x2
 288 0143 91       		.byte	0x91
 289 0144 4C       		.sleb128 -52
 290 0145 0A       		.uleb128 0xa
 291 0146 D4010000 		.4byte	.LASF25
 292 014a 01       		.byte	0x1
 293 014b 3A       		.byte	0x3a
 294 014c 97000000 		.4byte	0x97
 295 0150 02       		.uleb128 0x2
 296 0151 91       		.byte	0x91
 297 0152 48       		.sleb128 -56
 298 0153 0B       		.uleb128 0xb
 299 0154 AC000000 		.4byte	.LASF31
 300 0158 01       		.byte	0x1
 301 0159 3C       		.byte	0x3c
 302 015a 97000000 		.4byte	0x97
 303 015e 02       		.uleb128 0x2
 304 015f 91       		.byte	0x91
 305 0160 64       		.sleb128 -28
 306 0161 0C       		.uleb128 0xc
 307 0162 EE000000 		.4byte	0xee
 308 0166 3C000000 		.4byte	.LBB4
 309 016a 2C000000 		.4byte	.LBE4-.LBB4
 310 016e 01       		.byte	0x1
 311 016f 74       		.byte	0x74
 312 0170 0D       		.uleb128 0xd
 313 0171 FF000000 		.4byte	0xff
 314 0175 02       		.uleb128 0x2
 315 0176 91       		.byte	0x91
 316 0177 58       		.sleb128 -40
 317 0178 00       		.byte	0
 318 0179 00       		.byte	0
 319 017a 00       		.byte	0
 320              		.section	.debug_abbrev,"",%progbits
 321              	.Ldebug_abbrev0:
 322 0000 01       		.uleb128 0x1
 323 0001 11       		.uleb128 0x11
 324 0002 01       		.byte	0x1
 325 0003 25       		.uleb128 0x25
 326 0004 0E       		.uleb128 0xe
 327 0005 13       		.uleb128 0x13
 328 0006 0B       		.uleb128 0xb
 329 0007 03       		.uleb128 0x3
 330 0008 0E       		.uleb128 0xe
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 18


 331 0009 1B       		.uleb128 0x1b
 332 000a 0E       		.uleb128 0xe
 333 000b 55       		.uleb128 0x55
 334 000c 17       		.uleb128 0x17
 335 000d 11       		.uleb128 0x11
 336 000e 01       		.uleb128 0x1
 337 000f 10       		.uleb128 0x10
 338 0010 17       		.uleb128 0x17
 339 0011 00       		.byte	0
 340 0012 00       		.byte	0
 341 0013 02       		.uleb128 0x2
 342 0014 24       		.uleb128 0x24
 343 0015 00       		.byte	0
 344 0016 0B       		.uleb128 0xb
 345 0017 0B       		.uleb128 0xb
 346 0018 3E       		.uleb128 0x3e
 347 0019 0B       		.uleb128 0xb
 348 001a 03       		.uleb128 0x3
 349 001b 0E       		.uleb128 0xe
 350 001c 00       		.byte	0
 351 001d 00       		.byte	0
 352 001e 03       		.uleb128 0x3
 353 001f 16       		.uleb128 0x16
 354 0020 00       		.byte	0
 355 0021 03       		.uleb128 0x3
 356 0022 0E       		.uleb128 0xe
 357 0023 3A       		.uleb128 0x3a
 358 0024 0B       		.uleb128 0xb
 359 0025 3B       		.uleb128 0x3b
 360 0026 0B       		.uleb128 0xb
 361 0027 49       		.uleb128 0x49
 362 0028 13       		.uleb128 0x13
 363 0029 00       		.byte	0
 364 002a 00       		.byte	0
 365 002b 04       		.uleb128 0x4
 366 002c 24       		.uleb128 0x24
 367 002d 00       		.byte	0
 368 002e 0B       		.uleb128 0xb
 369 002f 0B       		.uleb128 0xb
 370 0030 3E       		.uleb128 0x3e
 371 0031 0B       		.uleb128 0xb
 372 0032 03       		.uleb128 0x3
 373 0033 08       		.uleb128 0x8
 374 0034 00       		.byte	0
 375 0035 00       		.byte	0
 376 0036 05       		.uleb128 0x5
 377 0037 16       		.uleb128 0x16
 378 0038 00       		.byte	0
 379 0039 03       		.uleb128 0x3
 380 003a 0E       		.uleb128 0xe
 381 003b 3A       		.uleb128 0x3a
 382 003c 0B       		.uleb128 0xb
 383 003d 3B       		.uleb128 0x3b
 384 003e 05       		.uleb128 0x5
 385 003f 49       		.uleb128 0x49
 386 0040 13       		.uleb128 0x13
 387 0041 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 19


 388 0042 00       		.byte	0
 389 0043 06       		.uleb128 0x6
 390 0044 0F       		.uleb128 0xf
 391 0045 00       		.byte	0
 392 0046 0B       		.uleb128 0xb
 393 0047 0B       		.uleb128 0xb
 394 0048 49       		.uleb128 0x49
 395 0049 13       		.uleb128 0x13
 396 004a 00       		.byte	0
 397 004b 00       		.byte	0
 398 004c 07       		.uleb128 0x7
 399 004d 2E       		.uleb128 0x2e
 400 004e 01       		.byte	0x1
 401 004f 03       		.uleb128 0x3
 402 0050 0E       		.uleb128 0xe
 403 0051 3A       		.uleb128 0x3a
 404 0052 0B       		.uleb128 0xb
 405 0053 3B       		.uleb128 0x3b
 406 0054 05       		.uleb128 0x5
 407 0055 27       		.uleb128 0x27
 408 0056 19       		.uleb128 0x19
 409 0057 49       		.uleb128 0x49
 410 0058 13       		.uleb128 0x13
 411 0059 20       		.uleb128 0x20
 412 005a 0B       		.uleb128 0xb
 413 005b 01       		.uleb128 0x1
 414 005c 13       		.uleb128 0x13
 415 005d 00       		.byte	0
 416 005e 00       		.byte	0
 417 005f 08       		.uleb128 0x8
 418 0060 05       		.uleb128 0x5
 419 0061 00       		.byte	0
 420 0062 03       		.uleb128 0x3
 421 0063 08       		.uleb128 0x8
 422 0064 3A       		.uleb128 0x3a
 423 0065 0B       		.uleb128 0xb
 424 0066 3B       		.uleb128 0x3b
 425 0067 05       		.uleb128 0x5
 426 0068 49       		.uleb128 0x49
 427 0069 13       		.uleb128 0x13
 428 006a 00       		.byte	0
 429 006b 00       		.byte	0
 430 006c 09       		.uleb128 0x9
 431 006d 2E       		.uleb128 0x2e
 432 006e 01       		.byte	0x1
 433 006f 3F       		.uleb128 0x3f
 434 0070 19       		.uleb128 0x19
 435 0071 03       		.uleb128 0x3
 436 0072 0E       		.uleb128 0xe
 437 0073 3A       		.uleb128 0x3a
 438 0074 0B       		.uleb128 0xb
 439 0075 3B       		.uleb128 0x3b
 440 0076 0B       		.uleb128 0xb
 441 0077 27       		.uleb128 0x27
 442 0078 19       		.uleb128 0x19
 443 0079 11       		.uleb128 0x11
 444 007a 01       		.uleb128 0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 20


 445 007b 12       		.uleb128 0x12
 446 007c 06       		.uleb128 0x6
 447 007d 40       		.uleb128 0x40
 448 007e 18       		.uleb128 0x18
 449 007f 9742     		.uleb128 0x2117
 450 0081 19       		.uleb128 0x19
 451 0082 00       		.byte	0
 452 0083 00       		.byte	0
 453 0084 0A       		.uleb128 0xa
 454 0085 05       		.uleb128 0x5
 455 0086 00       		.byte	0
 456 0087 03       		.uleb128 0x3
 457 0088 0E       		.uleb128 0xe
 458 0089 3A       		.uleb128 0x3a
 459 008a 0B       		.uleb128 0xb
 460 008b 3B       		.uleb128 0x3b
 461 008c 0B       		.uleb128 0xb
 462 008d 49       		.uleb128 0x49
 463 008e 13       		.uleb128 0x13
 464 008f 02       		.uleb128 0x2
 465 0090 18       		.uleb128 0x18
 466 0091 00       		.byte	0
 467 0092 00       		.byte	0
 468 0093 0B       		.uleb128 0xb
 469 0094 34       		.uleb128 0x34
 470 0095 00       		.byte	0
 471 0096 03       		.uleb128 0x3
 472 0097 0E       		.uleb128 0xe
 473 0098 3A       		.uleb128 0x3a
 474 0099 0B       		.uleb128 0xb
 475 009a 3B       		.uleb128 0x3b
 476 009b 0B       		.uleb128 0xb
 477 009c 49       		.uleb128 0x49
 478 009d 13       		.uleb128 0x13
 479 009e 02       		.uleb128 0x2
 480 009f 18       		.uleb128 0x18
 481 00a0 00       		.byte	0
 482 00a1 00       		.byte	0
 483 00a2 0C       		.uleb128 0xc
 484 00a3 1D       		.uleb128 0x1d
 485 00a4 01       		.byte	0x1
 486 00a5 31       		.uleb128 0x31
 487 00a6 13       		.uleb128 0x13
 488 00a7 11       		.uleb128 0x11
 489 00a8 01       		.uleb128 0x1
 490 00a9 12       		.uleb128 0x12
 491 00aa 06       		.uleb128 0x6
 492 00ab 58       		.uleb128 0x58
 493 00ac 0B       		.uleb128 0xb
 494 00ad 59       		.uleb128 0x59
 495 00ae 0B       		.uleb128 0xb
 496 00af 00       		.byte	0
 497 00b0 00       		.byte	0
 498 00b1 0D       		.uleb128 0xd
 499 00b2 05       		.uleb128 0x5
 500 00b3 00       		.byte	0
 501 00b4 31       		.uleb128 0x31
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 21


 502 00b5 13       		.uleb128 0x13
 503 00b6 02       		.uleb128 0x2
 504 00b7 18       		.uleb128 0x18
 505 00b8 00       		.byte	0
 506 00b9 00       		.byte	0
 507 00ba 00       		.byte	0
 508              		.section	.debug_aranges,"",%progbits
 509 0000 1C000000 		.4byte	0x1c
 510 0004 0200     		.2byte	0x2
 511 0006 00000000 		.4byte	.Ldebug_info0
 512 000a 04       		.byte	0x4
 513 000b 00       		.byte	0
 514 000c 0000     		.2byte	0
 515 000e 0000     		.2byte	0
 516 0010 00000000 		.4byte	.LFB82
 517 0014 80000000 		.4byte	.LFE82-.LFB82
 518 0018 00000000 		.4byte	0
 519 001c 00000000 		.4byte	0
 520              		.section	.debug_ranges,"",%progbits
 521              	.Ldebug_ranges0:
 522 0000 00000000 		.4byte	.LFB82
 523 0004 80000000 		.4byte	.LFE82
 524 0008 00000000 		.4byte	0
 525 000c 00000000 		.4byte	0
 526              		.section	.debug_line,"",%progbits
 527              	.Ldebug_line0:
 528 0000 80010000 		.section	.debug_str,"MS",%progbits,1
 528      02005101 
 528      00000201 
 528      FB0E0D00 
 528      01010101 
 529              	.LASF14:
 530 0000 696E7436 		.ascii	"int64_t\000"
 530      345F7400 
 531              	.LASF30:
 532 0008 61726D5F 		.ascii	"arm_offset_q31\000"
 532      6F666673 
 532      65745F71 
 532      333100
 533              	.LASF27:
 534 0017 536F7572 		.ascii	"Source\\BasicMathFunctions\\arm_offset_q31.c\000"
 534      63655C42 
 534      61736963 
 534      4D617468 
 534      46756E63 
 535              	.LASF5:
 536 0042 5F5F696E 		.ascii	"__int32_t\000"
 536      7433325F 
 536      7400
 537              	.LASF28:
 538 004c 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 538      73657273 
 538      5C666E65 
 538      7665735C 
 538      446F6375 
 539 0079 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 539      655F7370 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 22


 539      6565645F 
 539      73656E73 
 539      6F722E63 
 540              	.LASF18:
 541 0092 666C6F61 		.ascii	"float\000"
 541      7400
 542              	.LASF20:
 543 0098 7133315F 		.ascii	"q31_t\000"
 543      7400
 544              	.LASF1:
 545 009e 756E7369 		.ascii	"unsigned char\000"
 545      676E6564 
 545      20636861 
 545      7200
 546              	.LASF31:
 547 00ac 626C6B43 		.ascii	"blkCnt\000"
 547      6E7400
 548              	.LASF7:
 549 00b3 6C6F6E67 		.ascii	"long unsigned int\000"
 549      20756E73 
 549      69676E65 
 549      6420696E 
 549      7400
 550              	.LASF3:
 551 00c5 73686F72 		.ascii	"short unsigned int\000"
 551      7420756E 
 551      7369676E 
 551      65642069 
 551      6E7400
 552              	.LASF24:
 553 00d8 70447374 		.ascii	"pDst\000"
 553      00
 554              	.LASF8:
 555 00dd 5F5F696E 		.ascii	"__int64_t\000"
 555      7436345F 
 555      7400
 556              	.LASF17:
 557 00e7 646F7562 		.ascii	"double\000"
 557      6C6500
 558              	.LASF6:
 559 00ee 5F5F7569 		.ascii	"__uint32_t\000"
 559      6E743332 
 559      5F7400
 560              	.LASF11:
 561 00f9 756E7369 		.ascii	"unsigned int\000"
 561      676E6564 
 561      20696E74 
 561      00
 562              	.LASF10:
 563 0106 6C6F6E67 		.ascii	"long long unsigned int\000"
 563      206C6F6E 
 563      6720756E 
 563      7369676E 
 563      65642069 
 564              	.LASF26:
 565 011d 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 565      4320342E 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 23


 565      392E3320 
 565      32303135 
 565      30333033 
 566 0150 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 566      20726576 
 566      6973696F 
 566      6E203232 
 566      31323230 
 567 0183 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 567      30202D66 
 567      66756E63 
 567      74696F6E 
 567      2D736563 
 568              	.LASF21:
 569 01af 7136335F 		.ascii	"q63_t\000"
 569      7400
 570              	.LASF12:
 571 01b5 696E7433 		.ascii	"int32_t\000"
 571      325F7400 
 572              	.LASF15:
 573 01bd 73697A65 		.ascii	"sizetype\000"
 573      74797065 
 573      00
 574              	.LASF9:
 575 01c6 6C6F6E67 		.ascii	"long long int\000"
 575      206C6F6E 
 575      6720696E 
 575      7400
 576              	.LASF25:
 577 01d4 626C6F63 		.ascii	"blockSize\000"
 577      6B53697A 
 577      6500
 578              	.LASF29:
 579 01de 636C6970 		.ascii	"clip_q63_to_q31\000"
 579      5F713633 
 579      5F746F5F 
 579      71333100 
 580              	.LASF16:
 581 01ee 63686172 		.ascii	"char\000"
 581      00
 582              	.LASF23:
 583 01f3 6F666673 		.ascii	"offset\000"
 583      657400
 584              	.LASF2:
 585 01fa 73686F72 		.ascii	"short int\000"
 585      7420696E 
 585      7400
 586              	.LASF13:
 587 0204 75696E74 		.ascii	"uint32_t\000"
 587      33325F74 
 587      00
 588              	.LASF4:
 589 020d 6C6F6E67 		.ascii	"long int\000"
 589      20696E74 
 589      00
 590              	.LASF19:
 591 0216 6C6F6E67 		.ascii	"long double\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccl1iW1V.s 			page 24


 591      20646F75 
 591      626C6500 
 592              	.LASF0:
 593 0222 7369676E 		.ascii	"signed char\000"
 593      65642063 
 593      68617200 
 594              	.LASF22:
 595 022e 70537263 		.ascii	"pSrc\000"
 595      00
 596              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
