ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_biquad_cascade_df1_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_biquad_cascade_df1_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_biquad_cascade_df1_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_biquad_cascade_df1_q15, %function
  23              	arm_biquad_cascade_df1_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\FilteringFunctions\\arm_biquad_cascade_df1_q15.c"
   1:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** /* ----------------------------------------------------------------------
   2:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * Title:        arm_biquad_cascade_df1_q15.c
   4:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * Description:  Processing function for the Q15 Biquad cascade DirectFormI(DF1) filter
   5:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  *
   6:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * $Date:        27. January 2017
   7:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * $Revision:    V.1.5.1
   8:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  *
   9:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** /*
  12:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  *
  14:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  *
  16:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * not use this file except in compliance with the License.
  18:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * You may obtain a copy of the License at
  19:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  *
  20:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  *
  22:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * limitations under the License.
  27:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  */
  28:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
  29:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #include "arm_math.h"
  30:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
  31:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** /**
  32:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * @ingroup groupFilters
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 2


  33:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  */
  34:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
  35:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** /**
  36:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * @addtogroup BiquadCascadeDF1
  37:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * @{
  38:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  */
  39:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
  40:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** /**
  41:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * @brief Processing function for the Q15 Biquad cascade filter.
  42:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * @param[in]  *S points to an instance of the Q15 Biquad cascade structure.
  43:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * @param[in]  *pSrc points to the block of input data.
  44:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * @param[out] *pDst points to the location where the output result is written.
  45:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * @param[in]  blockSize number of samples to process per call.
  46:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * @return none.
  47:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  *
  48:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  *
  49:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * \par
  51:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * The function is implemented using a 64-bit internal accumulator.
  52:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * Both coefficients and state variables are represented in 1.15 format and multiplications yield a
  53:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * The 2.30 intermediate results are accumulated in a 64-bit accumulator in 34.30 format.
  54:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * There is no risk of internal overflow with this approach and the full precision of intermediate 
  55:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * The accumulator is then shifted by <code>postShift</code> bits to truncate the result to 1.15 fo
  56:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * Finally, the result is saturated to 1.15 format.
  57:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  *
  58:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * \par
  59:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  * Refer to the function <code>arm_biquad_cascade_df1_fast_q15()</code> for a faster but less preci
  60:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****  */
  61:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
  62:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** void arm_biquad_cascade_df1_q15(
  63:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   const arm_biquad_casd_df1_inst_q15 * S,
  64:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q15_t * pSrc,
  65:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q15_t * pDst,
  66:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   uint32_t blockSize)
  67:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** {
  26              		.loc 1 67 0
  27              		.cfi_startproc
  28 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  29              		.cfi_def_cfa_offset 20
  30              		.cfi_offset 4, -20
  31              		.cfi_offset 5, -16
  32              		.cfi_offset 6, -12
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 A1B0     		sub	sp, sp, #132
  36              		.cfi_def_cfa_offset 152
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 F862     		str	r0, [r7, #44]
  40 0008 B962     		str	r1, [r7, #40]
  41 000a 7A62     		str	r2, [r7, #36]
  42 000c 3B62     		str	r3, [r7, #32]
  68:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
  69:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
  70:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #if defined (ARM_MATH_DSP)
  71:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
  72:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 3


  73:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
  74:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q15_t *pIn = pSrc;                             /*  Source pointer                               *
  75:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q15_t *pOut = pDst;                            /*  Destination pointer                          *
  76:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q31_t in;                                      /*  Temporary variable to hold input value       *
  77:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q31_t out;                                     /*  Temporary variable to hold output value      *
  78:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q31_t b0;                                      /*  Temporary variable to hold bo value          *
  79:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q31_t b1, a1;                                  /*  Filter coefficients                          *
  80:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q31_t state_in, state_out;                     /*  Filter state variables                       *
  81:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q31_t acc_l, acc_h;
  82:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q63_t acc;                                     /*  Accumulator                                  *
  83:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   int32_t lShift = (15 - (int32_t) S->postShift);       /*  Post shift                             
  84:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q15_t *pState = S->pState;                     /*  State pointer                                *
  85:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q15_t *pCoeffs = S->pCoeffs;                   /*  Coefficient pointer                          *
  86:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   uint32_t sample, stage = (uint32_t) S->numStages;     /*  Stage loop counter                     
  87:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   int32_t uShift = (32 - lShift);
  88:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
  89:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   do
  90:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   {
  91:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /* Read the b0 and 0 coefficients using SIMD  */
  92:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     b0 = *__SIMD32(pCoeffs)++;
  93:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
  94:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /* Read the b1 and b2 coefficients using SIMD */
  95:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     b1 = *__SIMD32(pCoeffs)++;
  96:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
  97:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /* Read the a1 and a2 coefficients using SIMD */
  98:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     a1 = *__SIMD32(pCoeffs)++;
  99:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 100:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /* Read the input state values from the state buffer:  x[n-1], x[n-2] */
 101:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     state_in = *__SIMD32(pState)++;
 102:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 103:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /* Read the output state values from the state buffer:  y[n-1], y[n-2] */
 104:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     state_out = *__SIMD32(pState)--;
 105:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 106:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /* Apply loop unrolling and compute 2 output values simultaneously. */
 107:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /*      The variable acc hold output values that are being computed:
 108:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****      *
 109:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
 110:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
 111:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****      */
 112:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     sample = blockSize >> 1u;
 113:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 114:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /* First part of the processing with loop unrolling.  Compute 2 outputs at a time.
 115:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****      ** a second loop below computes the remaining 1 sample. */
 116:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     while (sample > 0u)
 117:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     {
 118:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 119:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Read the input */
 120:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       in = *__SIMD32(pIn)++;
 121:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 122:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* out =  b0 * x[n] + 0 * 0 */
 123:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       out = __SMUAD(b0, in);
 124:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 125:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* acc +=  b1 * x[n-1] +  b2 * x[n-2] + out */
 126:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc = __SMLALD(b1, state_in, out);
 127:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* acc +=  a1 * y[n-1] +  a2 * y[n-2] */
 128:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc = __SMLALD(a1, state_out, acc);
 129:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 4


 130:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* The result is converted from 3.29 to 1.31 if postShift = 1, and then saturation is applied
 131:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Calc lower part of acc */
 132:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc_l = acc & 0xffffffff;
 133:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 134:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Calc upper part of acc */
 135:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc_h = (acc >> 32) & 0xffffffff;
 136:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 137:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Apply shift for lower part of acc and upper part of acc */
 138:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       out = (uint32_t) acc_l >> lShift | acc_h << uShift;
 139:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 140:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       out = __SSAT(out, 16);
 141:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 142:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Every time after the output is computed state should be updated. */
 143:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* The states should be updated as:  */
 144:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Xn2 = Xn1    */
 145:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Xn1 = Xn     */
 146:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Yn2 = Yn1    */
 147:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Yn1 = acc   */
 148:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* x[n-N], x[n-N-1] are packed together to make state_in of type q31 */
 149:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* y[n-N], y[n-N-1] are packed together to make state_out of type q31 */
 150:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 151:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 152:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 153:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       state_in = __PKHBT(in, state_in, 16);
 154:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       state_out = __PKHBT(out, state_out, 16);
 155:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 156:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #else
 157:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 158:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       state_in = __PKHBT(state_in >> 16, (in >> 16), 16);
 159:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       state_out = __PKHBT(state_out >> 16, (out), 16);
 160:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 161:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN */
 162:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 163:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* out =  b0 * x[n] + 0 * 0 */
 164:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       out = __SMUADX(b0, in);
 165:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* acc +=  b1 * x[n-1] +  b2 * x[n-2] + out */
 166:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc = __SMLALD(b1, state_in, out);
 167:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* acc +=  a1 * y[n-1] + a2 * y[n-2] */
 168:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc = __SMLALD(a1, state_out, acc);
 169:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 170:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* The result is converted from 3.29 to 1.31 if postShift = 1, and then saturation is applied
 171:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Calc lower part of acc */
 172:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc_l = acc & 0xffffffff;
 173:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 174:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Calc upper part of acc */
 175:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc_h = (acc >> 32) & 0xffffffff;
 176:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 177:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Apply shift for lower part of acc and upper part of acc */
 178:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       out = (uint32_t) acc_l >> lShift | acc_h << uShift;
 179:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 180:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       out = __SSAT(out, 16);
 181:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 182:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Store the output in the destination buffer. */
 183:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 184:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 185:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 186:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       *__SIMD32(pOut)++ = __PKHBT(state_out, out, 16);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 5


 187:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 188:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #else
 189:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 190:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       *__SIMD32(pOut)++ = __PKHBT(out, state_out >> 16, 16);
 191:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 192:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN */
 193:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 194:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Every time after the output is computed state should be updated. */
 195:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* The states should be updated as:  */
 196:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Xn2 = Xn1    */
 197:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Xn1 = Xn     */
 198:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Yn2 = Yn1    */
 199:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Yn1 = acc   */
 200:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* x[n-N], x[n-N-1] are packed together to make state_in of type q31 */
 201:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* y[n-N], y[n-N-1] are packed together to make state_out of type q31 */
 202:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 203:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 204:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       state_in = __PKHBT(in >> 16, state_in, 16);
 205:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       state_out = __PKHBT(out, state_out, 16);
 206:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 207:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #else
 208:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 209:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       state_in = __PKHBT(state_in >> 16, in, 16);
 210:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       state_out = __PKHBT(state_out >> 16, out, 16);
 211:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 212:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN */
 213:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 214:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 215:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Decrement the loop counter */
 216:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       sample--;
 217:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 218:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     }
 219:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 220:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /* If the blockSize is not a multiple of 2, compute any remaining output samples here.
 221:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****      ** No loop unrolling is used. */
 222:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 223:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     if ((blockSize & 0x1u) != 0u)
 224:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     {
 225:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Read the input */
 226:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       in = *pIn++;
 227:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 228:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* out =  b0 * x[n] + 0 * 0 */
 229:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 230:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 231:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 232:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       out = __SMUAD(b0, in);
 233:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 234:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #else
 235:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 236:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       out = __SMUADX(b0, in);
 237:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 238:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN */
 239:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 240:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* acc =  b1 * x[n-1] + b2 * x[n-2] + out */
 241:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc = __SMLALD(b1, state_in, out);
 242:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* acc +=  a1 * y[n-1] + a2 * y[n-2] */
 243:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc = __SMLALD(a1, state_out, acc);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 6


 244:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 245:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* The result is converted from 3.29 to 1.31 if postShift = 1, and then saturation is applied
 246:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Calc lower part of acc */
 247:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc_l = acc & 0xffffffff;
 248:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 249:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Calc upper part of acc */
 250:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc_h = (acc >> 32) & 0xffffffff;
 251:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 252:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Apply shift for lower part of acc and upper part of acc */
 253:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       out = (uint32_t) acc_l >> lShift | acc_h << uShift;
 254:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 255:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       out = __SSAT(out, 16);
 256:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 257:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Store the output in the destination buffer. */
 258:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       *pOut++ = (q15_t) out;
 259:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 260:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Every time after the output is computed state should be updated. */
 261:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* The states should be updated as:  */
 262:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Xn2 = Xn1    */
 263:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Xn1 = Xn     */
 264:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Yn2 = Yn1    */
 265:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Yn1 = acc   */
 266:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* x[n-N], x[n-N-1] are packed together to make state_in of type q31 */
 267:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* y[n-N], y[n-N-1] are packed together to make state_out of type q31 */
 268:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 269:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 270:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 271:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       state_in = __PKHBT(in, state_in, 16);
 272:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       state_out = __PKHBT(out, state_out, 16);
 273:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 274:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #else
 275:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 276:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       state_in = __PKHBT(state_in >> 16, in, 16);
 277:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       state_out = __PKHBT(state_out >> 16, out, 16);
 278:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 279:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN */
 280:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 281:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     }
 282:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 283:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /*  The first stage goes from the input wire to the output wire.  */
 284:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /*  Subsequent numStages occur in-place in the output wire  */
 285:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     pIn = pDst;
 286:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 287:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /* Reset the output pointer */
 288:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     pOut = pDst;
 289:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 290:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /*  Store the updated state variables back into the state array */
 291:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     *__SIMD32(pState)++ = state_in;
 292:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     *__SIMD32(pState)++ = state_out;
 293:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 294:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 295:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /* Decrement the loop counter */
 296:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     stage--;
 297:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 298:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   } while (stage > 0u);
 299:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 300:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #else
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 7


 301:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 302:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   /* Run the below code for Cortex-M0 */
 303:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 304:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q15_t *pIn = pSrc;                             /*  Source pointer                               *
  43              		.loc 1 304 0
  44 000e BB6A     		ldr	r3, [r7, #40]
  45 0010 FB67     		str	r3, [r7, #124]
 305:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q15_t *pOut = pDst;                            /*  Destination pointer                          *
  46              		.loc 1 305 0
  47 0012 7B6A     		ldr	r3, [r7, #36]
  48 0014 BB67     		str	r3, [r7, #120]
 306:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q15_t b0, b1, b2, a1, a2;                      /*  Filter coefficients           */
 307:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q15_t Xn1, Xn2, Yn1, Yn2;                      /*  Filter state variables        */
 308:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q15_t Xn;                                      /*  temporary input               */
 309:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q63_t acc;                                     /*  Accumulator                                  *
 310:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   int32_t shift = (15 - (int32_t) S->postShift); /*  Post shift                                   *
  49              		.loc 1 310 0
  50 0016 FB6A     		ldr	r3, [r7, #44]
  51 0018 1B7B     		ldrb	r3, [r3, #12]
  52 001a 5BB2     		sxtb	r3, r3
  53 001c 0F22     		mov	r2, #15
  54 001e D31A     		sub	r3, r2, r3
  55 0020 FB65     		str	r3, [r7, #92]
 311:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q15_t *pState = S->pState;                     /*  State pointer                                *
  56              		.loc 1 311 0
  57 0022 FB6A     		ldr	r3, [r7, #44]
  58 0024 5B68     		ldr	r3, [r3, #4]
  59 0026 FB66     		str	r3, [r7, #108]
 312:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   q15_t *pCoeffs = S->pCoeffs;                   /*  Coefficient pointer                          *
  60              		.loc 1 312 0
  61 0028 FB6A     		ldr	r3, [r7, #44]
  62 002a 9B68     		ldr	r3, [r3, #8]
  63 002c BB66     		str	r3, [r7, #104]
 313:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   uint32_t sample, stage = (uint32_t) S->numStages;     /*  Stage loop counter                     
  64              		.loc 1 313 0
  65 002e FB6A     		ldr	r3, [r7, #44]
  66 0030 1B78     		ldrb	r3, [r3]
  67 0032 5BB2     		sxtb	r3, r3
  68 0034 3B66     		str	r3, [r7, #96]
  69              	.L12:
 314:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 315:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   do
 316:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   {
 317:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /* Reading the coefficients */
 318:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     b0 = *pCoeffs++;
  70              		.loc 1 318 0
  71 0036 BB6E     		ldr	r3, [r7, #104]
  72 0038 9A1C     		add	r2, r3, #2
  73 003a BA66     		str	r2, [r7, #104]
  74 003c 3A22     		mov	r2, #58
  75 003e 2021     		mov	r1, #32
  76 0040 8C46     		mov	ip, r1
  77 0042 BC44     		add	ip, ip, r7
  78 0044 6244     		add	r2, r2, ip
  79 0046 1B88     		ldrh	r3, [r3]
  80 0048 1380     		strh	r3, [r2]
 319:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     pCoeffs++;  // skip the 0 coefficient
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 8


  81              		.loc 1 319 0
  82 004a BB6E     		ldr	r3, [r7, #104]
  83 004c 0233     		add	r3, r3, #2
  84 004e BB66     		str	r3, [r7, #104]
 320:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     b1 = *pCoeffs++;
  85              		.loc 1 320 0
  86 0050 BB6E     		ldr	r3, [r7, #104]
  87 0052 9A1C     		add	r2, r3, #2
  88 0054 BA66     		str	r2, [r7, #104]
  89 0056 3822     		mov	r2, #56
  90 0058 2021     		mov	r1, #32
  91 005a 8C46     		mov	ip, r1
  92 005c BC44     		add	ip, ip, r7
  93 005e 6244     		add	r2, r2, ip
  94 0060 1B88     		ldrh	r3, [r3]
  95 0062 1380     		strh	r3, [r2]
 321:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     b2 = *pCoeffs++;
  96              		.loc 1 321 0
  97 0064 BB6E     		ldr	r3, [r7, #104]
  98 0066 9A1C     		add	r2, r3, #2
  99 0068 BA66     		str	r2, [r7, #104]
 100 006a 3622     		mov	r2, #54
 101 006c 2021     		mov	r1, #32
 102 006e 8C46     		mov	ip, r1
 103 0070 BC44     		add	ip, ip, r7
 104 0072 6244     		add	r2, r2, ip
 105 0074 1B88     		ldrh	r3, [r3]
 106 0076 1380     		strh	r3, [r2]
 322:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     a1 = *pCoeffs++;
 107              		.loc 1 322 0
 108 0078 BB6E     		ldr	r3, [r7, #104]
 109 007a 9A1C     		add	r2, r3, #2
 110 007c BA66     		str	r2, [r7, #104]
 111 007e 3422     		mov	r2, #52
 112 0080 2021     		mov	r1, #32
 113 0082 8C46     		mov	ip, r1
 114 0084 BC44     		add	ip, ip, r7
 115 0086 6244     		add	r2, r2, ip
 116 0088 1B88     		ldrh	r3, [r3]
 117 008a 1380     		strh	r3, [r2]
 323:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     a2 = *pCoeffs++;
 118              		.loc 1 323 0
 119 008c BB6E     		ldr	r3, [r7, #104]
 120 008e 9A1C     		add	r2, r3, #2
 121 0090 BA66     		str	r2, [r7, #104]
 122 0092 3222     		mov	r2, #50
 123 0094 2021     		mov	r1, #32
 124 0096 8C46     		mov	ip, r1
 125 0098 BC44     		add	ip, ip, r7
 126 009a 6244     		add	r2, r2, ip
 127 009c 1B88     		ldrh	r3, [r3]
 128 009e 1380     		strh	r3, [r2]
 324:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 325:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /* Reading the state values */
 326:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     Xn1 = pState[0];
 129              		.loc 1 326 0
 130 00a0 5623     		mov	r3, #86
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 9


 131 00a2 2022     		mov	r2, #32
 132 00a4 9446     		mov	ip, r2
 133 00a6 BC44     		add	ip, ip, r7
 134 00a8 6344     		add	r3, r3, ip
 135 00aa FA6E     		ldr	r2, [r7, #108]
 136 00ac 1288     		ldrh	r2, [r2]
 137 00ae 1A80     		strh	r2, [r3]
 327:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     Xn2 = pState[1];
 138              		.loc 1 327 0
 139 00b0 5423     		mov	r3, #84
 140 00b2 2022     		mov	r2, #32
 141 00b4 9446     		mov	ip, r2
 142 00b6 BC44     		add	ip, ip, r7
 143 00b8 6344     		add	r3, r3, ip
 144 00ba FA6E     		ldr	r2, [r7, #108]
 145 00bc 5288     		ldrh	r2, [r2, #2]
 146 00be 1A80     		strh	r2, [r3]
 328:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     Yn1 = pState[2];
 147              		.loc 1 328 0
 148 00c0 5223     		mov	r3, #82
 149 00c2 2022     		mov	r2, #32
 150 00c4 9446     		mov	ip, r2
 151 00c6 BC44     		add	ip, ip, r7
 152 00c8 6344     		add	r3, r3, ip
 153 00ca FA6E     		ldr	r2, [r7, #108]
 154 00cc 9288     		ldrh	r2, [r2, #4]
 155 00ce 1A80     		strh	r2, [r3]
 329:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     Yn2 = pState[3];
 156              		.loc 1 329 0
 157 00d0 5023     		mov	r3, #80
 158 00d2 2022     		mov	r2, #32
 159 00d4 9446     		mov	ip, r2
 160 00d6 BC44     		add	ip, ip, r7
 161 00d8 6344     		add	r3, r3, ip
 162 00da FA6E     		ldr	r2, [r7, #108]
 163 00dc D288     		ldrh	r2, [r2, #6]
 164 00de 1A80     		strh	r2, [r3]
 330:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 331:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /*      The variables acc holds the output value that is computed:
 332:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
 333:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****      */
 334:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 335:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     sample = blockSize;
 165              		.loc 1 335 0
 166 00e0 3B6A     		ldr	r3, [r7, #32]
 167 00e2 7B66     		str	r3, [r7, #100]
 336:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 337:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     while (sample > 0u)
 168              		.loc 1 337 0
 169 00e4 FFE0     		b	.L2
 170              	.L11:
 338:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     {
 339:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Read the input */
 340:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       Xn = *pIn++;
 171              		.loc 1 340 0
 172 00e6 FB6F     		ldr	r3, [r7, #124]
 173 00e8 9A1C     		add	r2, r3, #2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 10


 174 00ea FA67     		str	r2, [r7, #124]
 175 00ec 3022     		mov	r2, #48
 176 00ee 2021     		mov	r1, #32
 177 00f0 8C46     		mov	ip, r1
 178 00f2 BC44     		add	ip, ip, r7
 179 00f4 6244     		add	r2, r2, ip
 180 00f6 1B88     		ldrh	r3, [r3]
 181 00f8 1380     		strh	r3, [r2]
 341:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 342:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 343:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* acc =  b0 * x[n] */
 344:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc = (q31_t) b0 *Xn;
 182              		.loc 1 344 0
 183 00fa 3A23     		mov	r3, #58
 184 00fc 2022     		mov	r2, #32
 185 00fe 9446     		mov	ip, r2
 186 0100 BC44     		add	ip, ip, r7
 187 0102 6344     		add	r3, r3, ip
 188 0104 0022     		mov	r2, #0
 189 0106 9B5E     		ldrsh	r3, [r3, r2]
 190 0108 3022     		mov	r2, #48
 191 010a 2021     		mov	r1, #32
 192 010c 8C46     		mov	ip, r1
 193 010e BC44     		add	ip, ip, r7
 194 0110 6244     		add	r2, r2, ip
 195 0112 0021     		mov	r1, #0
 196 0114 525E     		ldrsh	r2, [r2, r1]
 197 0116 5343     		mul	r3, r2
 198 0118 BB64     		str	r3, [r7, #72]
 199 011a DB17     		asr	r3, r3, #31
 200 011c FB64     		str	r3, [r7, #76]
 345:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 346:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* acc +=  b1 * x[n-1] */
 347:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc += (q31_t) b1 *Xn1;
 201              		.loc 1 347 0
 202 011e 3823     		mov	r3, #56
 203 0120 2022     		mov	r2, #32
 204 0122 9446     		mov	ip, r2
 205 0124 BC44     		add	ip, ip, r7
 206 0126 6344     		add	r3, r3, ip
 207 0128 0022     		mov	r2, #0
 208 012a 9B5E     		ldrsh	r3, [r3, r2]
 209 012c 5622     		mov	r2, #86
 210 012e 2021     		mov	r1, #32
 211 0130 8C46     		mov	ip, r1
 212 0132 BC44     		add	ip, ip, r7
 213 0134 6244     		add	r2, r2, ip
 214 0136 0021     		mov	r1, #0
 215 0138 525E     		ldrsh	r2, [r2, r1]
 216 013a 5343     		mul	r3, r2
 217 013c BB61     		str	r3, [r7, #24]
 218 013e DB17     		asr	r3, r3, #31
 219 0140 FB61     		str	r3, [r7, #28]
 220 0142 BB6C     		ldr	r3, [r7, #72]
 221 0144 FC6C     		ldr	r4, [r7, #76]
 222 0146 B969     		ldr	r1, [r7, #24]
 223 0148 FA69     		ldr	r2, [r7, #28]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 11


 224 014a 5B18     		add	r3, r3, r1
 225 014c 5441     		adc	r4, r4, r2
 226 014e BB64     		str	r3, [r7, #72]
 227 0150 FC64     		str	r4, [r7, #76]
 348:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* acc +=  b[2] * x[n-2] */
 349:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc += (q31_t) b2 *Xn2;
 228              		.loc 1 349 0
 229 0152 3623     		mov	r3, #54
 230 0154 2022     		mov	r2, #32
 231 0156 9446     		mov	ip, r2
 232 0158 BC44     		add	ip, ip, r7
 233 015a 6344     		add	r3, r3, ip
 234 015c 0022     		mov	r2, #0
 235 015e 9B5E     		ldrsh	r3, [r3, r2]
 236 0160 5422     		mov	r2, #84
 237 0162 2021     		mov	r1, #32
 238 0164 8C46     		mov	ip, r1
 239 0166 BC44     		add	ip, ip, r7
 240 0168 6244     		add	r2, r2, ip
 241 016a 0021     		mov	r1, #0
 242 016c 525E     		ldrsh	r2, [r2, r1]
 243 016e 5343     		mul	r3, r2
 244 0170 3B61     		str	r3, [r7, #16]
 245 0172 DB17     		asr	r3, r3, #31
 246 0174 7B61     		str	r3, [r7, #20]
 247 0176 BB6C     		ldr	r3, [r7, #72]
 248 0178 FC6C     		ldr	r4, [r7, #76]
 249 017a 3969     		ldr	r1, [r7, #16]
 250 017c 7A69     		ldr	r2, [r7, #20]
 251 017e 5B18     		add	r3, r3, r1
 252 0180 5441     		adc	r4, r4, r2
 253 0182 BB64     		str	r3, [r7, #72]
 254 0184 FC64     		str	r4, [r7, #76]
 350:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* acc +=  a1 * y[n-1] */
 351:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc += (q31_t) a1 *Yn1;
 255              		.loc 1 351 0
 256 0186 3423     		mov	r3, #52
 257 0188 2022     		mov	r2, #32
 258 018a 9446     		mov	ip, r2
 259 018c BC44     		add	ip, ip, r7
 260 018e 6344     		add	r3, r3, ip
 261 0190 0022     		mov	r2, #0
 262 0192 9B5E     		ldrsh	r3, [r3, r2]
 263 0194 5222     		mov	r2, #82
 264 0196 2021     		mov	r1, #32
 265 0198 8C46     		mov	ip, r1
 266 019a BC44     		add	ip, ip, r7
 267 019c 6244     		add	r2, r2, ip
 268 019e 0021     		mov	r1, #0
 269 01a0 525E     		ldrsh	r2, [r2, r1]
 270 01a2 5343     		mul	r3, r2
 271 01a4 BB60     		str	r3, [r7, #8]
 272 01a6 DB17     		asr	r3, r3, #31
 273 01a8 FB60     		str	r3, [r7, #12]
 274 01aa BB6C     		ldr	r3, [r7, #72]
 275 01ac FC6C     		ldr	r4, [r7, #76]
 276 01ae B968     		ldr	r1, [r7, #8]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 12


 277 01b0 FA68     		ldr	r2, [r7, #12]
 278 01b2 5B18     		add	r3, r3, r1
 279 01b4 5441     		adc	r4, r4, r2
 280 01b6 BB64     		str	r3, [r7, #72]
 281 01b8 FC64     		str	r4, [r7, #76]
 352:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* acc +=  a2 * y[n-2] */
 353:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc += (q31_t) a2 *Yn2;
 282              		.loc 1 353 0
 283 01ba 3223     		mov	r3, #50
 284 01bc 2022     		mov	r2, #32
 285 01be 9446     		mov	ip, r2
 286 01c0 BC44     		add	ip, ip, r7
 287 01c2 6344     		add	r3, r3, ip
 288 01c4 0022     		mov	r2, #0
 289 01c6 9B5E     		ldrsh	r3, [r3, r2]
 290 01c8 5022     		mov	r2, #80
 291 01ca 2021     		mov	r1, #32
 292 01cc 8C46     		mov	ip, r1
 293 01ce BC44     		add	ip, ip, r7
 294 01d0 6244     		add	r2, r2, ip
 295 01d2 0021     		mov	r1, #0
 296 01d4 525E     		ldrsh	r2, [r2, r1]
 297 01d6 5343     		mul	r3, r2
 298 01d8 3B60     		str	r3, [r7]
 299 01da DB17     		asr	r3, r3, #31
 300 01dc 7B60     		str	r3, [r7, #4]
 301 01de BB6C     		ldr	r3, [r7, #72]
 302 01e0 FC6C     		ldr	r4, [r7, #76]
 303 01e2 3968     		ldr	r1, [r7]
 304 01e4 7A68     		ldr	r2, [r7, #4]
 305 01e6 5B18     		add	r3, r3, r1
 306 01e8 5441     		adc	r4, r4, r2
 307 01ea BB64     		str	r3, [r7, #72]
 308 01ec FC64     		str	r4, [r7, #76]
 354:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 355:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* The result is converted to 1.31  */
 356:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       acc = __SSAT((acc >> shift), 16);
 309              		.loc 1 356 0
 310 01ee FB6D     		ldr	r3, [r7, #92]
 311 01f0 203B     		sub	r3, r3, #32
 312 01f2 002B     		cmp	r3, #0
 313 01f4 03DB     		blt	.L3
 314 01f6 FA6C     		ldr	r2, [r7, #76]
 315 01f8 1A41     		asr	r2, r2, r3
 316 01fa 151C     		mov	r5, r2
 317 01fc 0AE0     		b	.L4
 318              	.L3:
 319 01fe FB6D     		ldr	r3, [r7, #92]
 320 0200 2022     		mov	r2, #32
 321 0202 D31A     		sub	r3, r2, r3
 322 0204 FA6C     		ldr	r2, [r7, #76]
 323 0206 9A40     		lsl	r2, r2, r3
 324 0208 131C     		mov	r3, r2
 325 020a B96C     		ldr	r1, [r7, #72]
 326 020c FA6D     		ldr	r2, [r7, #92]
 327 020e D140     		lsr	r1, r1, r2
 328 0210 0D1C     		mov	r5, r1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 13


 329 0212 1D43     		orr	r5, r3
 330              	.L4:
 331 0214 FA6C     		ldr	r2, [r7, #76]
 332 0216 FB6D     		ldr	r3, [r7, #92]
 333 0218 1A41     		asr	r2, r2, r3
 334 021a 161C     		mov	r6, r2
 335 021c 2B1C     		mov	r3, r5
 336 021e 7B64     		str	r3, [r7, #68]
 337 0220 1023     		mov	r3, #16
 338 0222 3B64     		str	r3, [r7, #64]
 339              	.LBB4:
 340              	.LBB5:
 341              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 14


  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 15


 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 16


 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 17


 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 18


 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 19


 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 20


 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 21


 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 22


 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 23


 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 24


 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 25


 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
 342              		.loc 2 699 0
 343 0224 0123     		mov	r3, #1
 344 0226 FB63     		str	r3, [r7, #60]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 345              		.loc 2 700 0
 346 0228 0023     		mov	r3, #0
 347 022a BB63     		str	r3, [r7, #56]
 348 022c 05E0     		b	.L5
 349              	.L6:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 350              		.loc 2 702 0
 351 022e FB6B     		ldr	r3, [r7, #60]
 352 0230 5B00     		lsl	r3, r3, #1
 353 0232 FB63     		str	r3, [r7, #60]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 354              		.loc 2 700 0
 355 0234 BB6B     		ldr	r3, [r7, #56]
 356 0236 0133     		add	r3, r3, #1
 357 0238 BB63     		str	r3, [r7, #56]
 358              	.L5:
 359 023a 3B6C     		ldr	r3, [r7, #64]
 360 023c 013B     		sub	r3, r3, #1
 361 023e BA6B     		ldr	r2, [r7, #56]
 362 0240 9A42     		cmp	r2, r3
 363 0242 F4D3     		bcc	.L6
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 26


 364              		.loc 2 705 0
 365 0244 7B6C     		ldr	r3, [r7, #68]
 366 0246 002B     		cmp	r3, #0
 367 0248 09DD     		ble	.L7
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 368              		.loc 2 707 0
 369 024a FB6B     		ldr	r3, [r7, #60]
 370 024c 013B     		sub	r3, r3, #1
 371 024e FB63     		str	r3, [r7, #60]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 372              		.loc 2 709 0
 373 0250 7A6C     		ldr	r2, [r7, #68]
 374 0252 FB6B     		ldr	r3, [r7, #60]
 375 0254 9A42     		cmp	r2, r3
 376 0256 0CDD     		ble	.L13
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 377              		.loc 2 711 0
 378 0258 FB6B     		ldr	r3, [r7, #60]
 379 025a 7B64     		str	r3, [r7, #68]
 380 025c 0AE0     		b	.L9
 381              	.L7:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 382              		.loc 2 716 0
 383 025e FB6B     		ldr	r3, [r7, #60]
 384 0260 5B42     		neg	r3, r3
 385 0262 7B63     		str	r3, [r7, #52]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 386              		.loc 2 718 0
 387 0264 7A6C     		ldr	r2, [r7, #68]
 388 0266 7B6B     		ldr	r3, [r7, #52]
 389 0268 9A42     		cmp	r2, r3
 390 026a 03DA     		bge	.L9
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 391              		.loc 2 720 0
 392 026c 7B6B     		ldr	r3, [r7, #52]
 393 026e 7B64     		str	r3, [r7, #68]
 394 0270 00E0     		b	.L9
 395              	.L13:
 711:.\Include/arm_math.h ****       }
 396              		.loc 2 711 0
 397 0272 C046     		mov	r8, r8
 398              	.L9:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 399              		.loc 2 723 0
 400 0274 7B6C     		ldr	r3, [r7, #68]
 401              	.LBE5:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 27


 402              	.LBE4:
 403              		.loc 1 356 0
 404 0276 BB64     		str	r3, [r7, #72]
 405 0278 DB17     		asr	r3, r3, #31
 406 027a FB64     		str	r3, [r7, #76]
 357:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 358:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Every time after the output is computed state should be updated. */
 359:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* The states should be updated as:  */
 360:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Xn2 = Xn1    */
 361:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Xn1 = Xn     */
 362:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Yn2 = Yn1    */
 363:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Yn1 = acc    */
 364:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       Xn2 = Xn1;
 407              		.loc 1 364 0
 408 027c 5423     		mov	r3, #84
 409 027e 2022     		mov	r2, #32
 410 0280 9446     		mov	ip, r2
 411 0282 BC44     		add	ip, ip, r7
 412 0284 6344     		add	r3, r3, ip
 413 0286 5622     		mov	r2, #86
 414 0288 2021     		mov	r1, #32
 415 028a 8C46     		mov	ip, r1
 416 028c BC44     		add	ip, ip, r7
 417 028e 6244     		add	r2, r2, ip
 418 0290 1288     		ldrh	r2, [r2]
 419 0292 1A80     		strh	r2, [r3]
 365:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       Xn1 = Xn;
 420              		.loc 1 365 0
 421 0294 5623     		mov	r3, #86
 422 0296 2022     		mov	r2, #32
 423 0298 9446     		mov	ip, r2
 424 029a BC44     		add	ip, ip, r7
 425 029c 6344     		add	r3, r3, ip
 426 029e 3022     		mov	r2, #48
 427 02a0 2021     		mov	r1, #32
 428 02a2 8C46     		mov	ip, r1
 429 02a4 BC44     		add	ip, ip, r7
 430 02a6 6244     		add	r2, r2, ip
 431 02a8 1288     		ldrh	r2, [r2]
 432 02aa 1A80     		strh	r2, [r3]
 366:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       Yn2 = Yn1;
 433              		.loc 1 366 0
 434 02ac 5023     		mov	r3, #80
 435 02ae 2022     		mov	r2, #32
 436 02b0 9446     		mov	ip, r2
 437 02b2 BC44     		add	ip, ip, r7
 438 02b4 6344     		add	r3, r3, ip
 439 02b6 5222     		mov	r2, #82
 440 02b8 2021     		mov	r1, #32
 441 02ba 8C46     		mov	ip, r1
 442 02bc BC44     		add	ip, ip, r7
 443 02be 6244     		add	r2, r2, ip
 444 02c0 1288     		ldrh	r2, [r2]
 445 02c2 1A80     		strh	r2, [r3]
 367:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       Yn1 = (q15_t) acc;
 446              		.loc 1 367 0
 447 02c4 5223     		mov	r3, #82
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 28


 448 02c6 2022     		mov	r2, #32
 449 02c8 BA18     		add	r2, r7, r2
 450 02ca D218     		add	r2, r2, r3
 451 02cc BB6C     		ldr	r3, [r7, #72]
 452 02ce FC6C     		ldr	r4, [r7, #76]
 453 02d0 1380     		strh	r3, [r2]
 368:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 369:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* Store the output in the destination buffer. */
 370:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       *pOut++ = (q15_t) acc;
 454              		.loc 1 370 0
 455 02d2 BA6F     		ldr	r2, [r7, #120]
 456 02d4 931C     		add	r3, r2, #2
 457 02d6 BB67     		str	r3, [r7, #120]
 458 02d8 BB6C     		ldr	r3, [r7, #72]
 459 02da FC6C     		ldr	r4, [r7, #76]
 460 02dc 9BB2     		uxth	r3, r3
 461 02de 1380     		strh	r3, [r2]
 371:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 372:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       /* decrement the loop counter */
 373:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****       sample--;
 462              		.loc 1 373 0
 463 02e0 7B6E     		ldr	r3, [r7, #100]
 464 02e2 013B     		sub	r3, r3, #1
 465 02e4 7B66     		str	r3, [r7, #100]
 466              	.L2:
 337:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     {
 467              		.loc 1 337 0
 468 02e6 7B6E     		ldr	r3, [r7, #100]
 469 02e8 002B     		cmp	r3, #0
 470 02ea 00D0     		beq	.LCB386
 471 02ec FBE6     		b	.L11	@long jump
 472              	.LCB386:
 374:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     }
 375:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 376:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /*  The first stage goes from the input buffer to the output buffer. */
 377:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /*  Subsequent stages occur in-place in the output buffer */
 378:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     pIn = pDst;
 473              		.loc 1 378 0
 474 02ee 7B6A     		ldr	r3, [r7, #36]
 475 02f0 FB67     		str	r3, [r7, #124]
 379:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 380:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /* Reset to destination pointer */
 381:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     pOut = pDst;
 476              		.loc 1 381 0
 477 02f2 7B6A     		ldr	r3, [r7, #36]
 478 02f4 BB67     		str	r3, [r7, #120]
 382:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 383:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     /*  Store the updated state variables back into the pState array */
 384:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     *pState++ = Xn1;
 479              		.loc 1 384 0
 480 02f6 FB6E     		ldr	r3, [r7, #108]
 481 02f8 9A1C     		add	r2, r3, #2
 482 02fa FA66     		str	r2, [r7, #108]
 483 02fc 5622     		mov	r2, #86
 484 02fe 2021     		mov	r1, #32
 485 0300 8C46     		mov	ip, r1
 486 0302 BC44     		add	ip, ip, r7
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 29


 487 0304 6244     		add	r2, r2, ip
 488 0306 1288     		ldrh	r2, [r2]
 489 0308 1A80     		strh	r2, [r3]
 385:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     *pState++ = Xn2;
 490              		.loc 1 385 0
 491 030a FB6E     		ldr	r3, [r7, #108]
 492 030c 9A1C     		add	r2, r3, #2
 493 030e FA66     		str	r2, [r7, #108]
 494 0310 5422     		mov	r2, #84
 495 0312 2021     		mov	r1, #32
 496 0314 8C46     		mov	ip, r1
 497 0316 BC44     		add	ip, ip, r7
 498 0318 6244     		add	r2, r2, ip
 499 031a 1288     		ldrh	r2, [r2]
 500 031c 1A80     		strh	r2, [r3]
 386:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     *pState++ = Yn1;
 501              		.loc 1 386 0
 502 031e FB6E     		ldr	r3, [r7, #108]
 503 0320 9A1C     		add	r2, r3, #2
 504 0322 FA66     		str	r2, [r7, #108]
 505 0324 5222     		mov	r2, #82
 506 0326 2021     		mov	r1, #32
 507 0328 8C46     		mov	ip, r1
 508 032a BC44     		add	ip, ip, r7
 509 032c 6244     		add	r2, r2, ip
 510 032e 1288     		ldrh	r2, [r2]
 511 0330 1A80     		strh	r2, [r3]
 387:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****     *pState++ = Yn2;
 512              		.loc 1 387 0
 513 0332 FB6E     		ldr	r3, [r7, #108]
 514 0334 9A1C     		add	r2, r3, #2
 515 0336 FA66     		str	r2, [r7, #108]
 516 0338 5022     		mov	r2, #80
 517 033a 2021     		mov	r1, #32
 518 033c 8C46     		mov	ip, r1
 519 033e BC44     		add	ip, ip, r7
 520 0340 6244     		add	r2, r2, ip
 521 0342 1288     		ldrh	r2, [r2]
 522 0344 1A80     		strh	r2, [r3]
 388:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 389:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c ****   } while (--stage);
 523              		.loc 1 389 0
 524 0346 3B6E     		ldr	r3, [r7, #96]
 525 0348 013B     		sub	r3, r3, #1
 526 034a 3B66     		str	r3, [r7, #96]
 527 034c 3B6E     		ldr	r3, [r7, #96]
 528 034e 002B     		cmp	r3, #0
 529 0350 00D0     		beq	.LCB436
 530 0352 70E6     		b	.L12	@long jump
 531              	.LCB436:
 390:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 391:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 392:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** 
 393:Source\FilteringFunctions/arm_biquad_cascade_df1_q15.c **** }
 532              		.loc 1 393 0
 533 0354 BD46     		mov	sp, r7
 534 0356 21B0     		add	sp, sp, #132
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 30


 535              		@ sp needed
 536 0358 F0BD     		pop	{r4, r5, r6, r7, pc}
 537              		.cfi_endproc
 538              	.LFE82:
 539              		.size	arm_biquad_cascade_df1_q15, .-arm_biquad_cascade_df1_q15
 540 035a C046     		.text
 541              	.Letext0:
 542              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 543              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 544              		.section	.debug_info,"",%progbits
 545              	.Ldebug_info0:
 546 0000 65030000 		.4byte	0x365
 547 0004 0400     		.2byte	0x4
 548 0006 00000000 		.4byte	.Ldebug_abbrev0
 549 000a 04       		.byte	0x4
 550 000b 01       		.uleb128 0x1
 551 000c 70010000 		.4byte	.LASF41
 552 0010 01       		.byte	0x1
 553 0011 E3000000 		.4byte	.LASF42
 554 0015 45000000 		.4byte	.LASF43
 555 0019 00000000 		.4byte	.Ldebug_ranges0+0
 556 001d 00000000 		.4byte	0
 557 0021 00000000 		.4byte	.Ldebug_line0
 558 0025 02       		.uleb128 0x2
 559 0026 12000000 		.4byte	.LASF2
 560 002a 03       		.byte	0x3
 561 002b 1B       		.byte	0x1b
 562 002c 30000000 		.4byte	0x30
 563 0030 03       		.uleb128 0x3
 564 0031 01       		.byte	0x1
 565 0032 06       		.byte	0x6
 566 0033 6F020000 		.4byte	.LASF0
 567 0037 03       		.uleb128 0x3
 568 0038 01       		.byte	0x1
 569 0039 08       		.byte	0x8
 570 003a B0000000 		.4byte	.LASF1
 571 003e 02       		.uleb128 0x2
 572 003f 22000000 		.4byte	.LASF3
 573 0043 03       		.byte	0x3
 574 0044 29       		.byte	0x29
 575 0045 49000000 		.4byte	0x49
 576 0049 03       		.uleb128 0x3
 577 004a 02       		.byte	0x2
 578 004b 05       		.byte	0x5
 579 004c 3B020000 		.4byte	.LASF4
 580 0050 03       		.uleb128 0x3
 581 0051 02       		.byte	0x2
 582 0052 07       		.byte	0x7
 583 0053 D0000000 		.4byte	.LASF5
 584 0057 02       		.uleb128 0x2
 585 0058 32000000 		.4byte	.LASF6
 586 005c 03       		.byte	0x3
 587 005d 3F       		.byte	0x3f
 588 005e 62000000 		.4byte	0x62
 589 0062 03       		.uleb128 0x3
 590 0063 04       		.byte	0x4
 591 0064 05       		.byte	0x5
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 31


 592 0065 3C000000 		.4byte	.LASF7
 593 0069 02       		.uleb128 0x2
 594 006a 41010000 		.4byte	.LASF8
 595 006e 03       		.byte	0x3
 596 006f 41       		.byte	0x41
 597 0070 74000000 		.4byte	0x74
 598 0074 03       		.uleb128 0x3
 599 0075 04       		.byte	0x4
 600 0076 07       		.byte	0x7
 601 0077 BE000000 		.4byte	.LASF9
 602 007b 02       		.uleb128 0x2
 603 007c 30010000 		.4byte	.LASF10
 604 0080 03       		.byte	0x3
 605 0081 59       		.byte	0x59
 606 0082 86000000 		.4byte	0x86
 607 0086 03       		.uleb128 0x3
 608 0087 08       		.byte	0x8
 609 0088 05       		.byte	0x5
 610 0089 28020000 		.4byte	.LASF11
 611 008d 03       		.uleb128 0x3
 612 008e 08       		.byte	0x8
 613 008f 07       		.byte	0x7
 614 0090 59010000 		.4byte	.LASF12
 615 0094 04       		.uleb128 0x4
 616 0095 04       		.byte	0x4
 617 0096 05       		.byte	0x5
 618 0097 696E7400 		.ascii	"int\000"
 619 009b 03       		.uleb128 0x3
 620 009c 04       		.byte	0x4
 621 009d 07       		.byte	0x7
 622 009e 4C010000 		.4byte	.LASF13
 623 00a2 02       		.uleb128 0x2
 624 00a3 91000000 		.4byte	.LASF14
 625 00a7 04       		.byte	0x4
 626 00a8 14       		.byte	0x14
 627 00a9 25000000 		.4byte	0x25
 628 00ad 02       		.uleb128 0x2
 629 00ae 08020000 		.4byte	.LASF15
 630 00b2 04       		.byte	0x4
 631 00b3 20       		.byte	0x20
 632 00b4 3E000000 		.4byte	0x3e
 633 00b8 02       		.uleb128 0x2
 634 00b9 17020000 		.4byte	.LASF16
 635 00bd 04       		.byte	0x4
 636 00be 2C       		.byte	0x2c
 637 00bf 57000000 		.4byte	0x57
 638 00c3 02       		.uleb128 0x2
 639 00c4 53020000 		.4byte	.LASF17
 640 00c8 04       		.byte	0x4
 641 00c9 2D       		.byte	0x2d
 642 00ca 69000000 		.4byte	0x69
 643 00ce 02       		.uleb128 0x2
 644 00cf 0A000000 		.4byte	.LASF18
 645 00d3 04       		.byte	0x4
 646 00d4 38       		.byte	0x38
 647 00d5 7B000000 		.4byte	0x7b
 648 00d9 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 32


 649 00da 04       		.byte	0x4
 650 00db 07       		.byte	0x7
 651 00dc 1F020000 		.4byte	.LASF19
 652 00e0 03       		.uleb128 0x3
 653 00e1 01       		.byte	0x1
 654 00e2 08       		.byte	0x8
 655 00e3 36020000 		.4byte	.LASF20
 656 00e7 03       		.uleb128 0x3
 657 00e8 08       		.byte	0x8
 658 00e9 04       		.byte	0x4
 659 00ea 3A010000 		.4byte	.LASF21
 660 00ee 03       		.uleb128 0x3
 661 00ef 04       		.byte	0x4
 662 00f0 04       		.byte	0x4
 663 00f1 2C000000 		.4byte	.LASF22
 664 00f5 03       		.uleb128 0x3
 665 00f6 08       		.byte	0x8
 666 00f7 04       		.byte	0x4
 667 00f8 63020000 		.4byte	.LASF23
 668 00fc 05       		.uleb128 0x5
 669 00fd 98000000 		.4byte	.LASF24
 670 0101 02       		.byte	0x2
 671 0102 9601     		.2byte	0x196
 672 0104 AD000000 		.4byte	0xad
 673 0108 05       		.uleb128 0x5
 674 0109 AA000000 		.4byte	.LASF25
 675 010d 02       		.byte	0x2
 676 010e 9B01     		.2byte	0x19b
 677 0110 B8000000 		.4byte	0xb8
 678 0114 05       		.uleb128 0x5
 679 0115 02020000 		.4byte	.LASF26
 680 0119 02       		.byte	0x2
 681 011a A001     		.2byte	0x1a0
 682 011c CE000000 		.4byte	0xce
 683 0120 06       		.uleb128 0x6
 684 0121 04       		.byte	0x4
 685 0122 FC000000 		.4byte	0xfc
 686 0126 07       		.uleb128 0x7
 687 0127 10       		.byte	0x10
 688 0128 02       		.byte	0x2
 689 0129 0505     		.2byte	0x505
 690 012b 64010000 		.4byte	0x164
 691 012f 08       		.uleb128 0x8
 692 0130 80020000 		.4byte	.LASF27
 693 0134 02       		.byte	0x2
 694 0135 0705     		.2byte	0x507
 695 0137 A2000000 		.4byte	0xa2
 696 013b 00       		.byte	0
 697 013c 08       		.uleb128 0x8
 698 013d 1B000000 		.4byte	.LASF28
 699 0141 02       		.byte	0x2
 700 0142 0805     		.2byte	0x508
 701 0144 20010000 		.4byte	0x120
 702 0148 04       		.byte	0x4
 703 0149 08       		.uleb128 0x8
 704 014a 4B020000 		.4byte	.LASF29
 705 014e 02       		.byte	0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 33


 706 014f 0905     		.2byte	0x509
 707 0151 20010000 		.4byte	0x120
 708 0155 08       		.byte	0x8
 709 0156 08       		.uleb128 0x8
 710 0157 26010000 		.4byte	.LASF30
 711 015b 02       		.byte	0x2
 712 015c 0A05     		.2byte	0x50a
 713 015e A2000000 		.4byte	0xa2
 714 0162 0C       		.byte	0xc
 715 0163 00       		.byte	0
 716 0164 05       		.uleb128 0x5
 717 0165 A5020000 		.4byte	.LASF31
 718 0169 02       		.byte	0x2
 719 016a 0B05     		.2byte	0x50b
 720 016c 26010000 		.4byte	0x126
 721 0170 09       		.uleb128 0x9
 722 0171 10020000 		.4byte	.LASF44
 723 0175 02       		.byte	0x2
 724 0176 B402     		.2byte	0x2b4
 725 0178 08010000 		.4byte	0x108
 726 017c 03       		.byte	0x3
 727 017d B8010000 		.4byte	0x1b8
 728 0181 0A       		.uleb128 0xa
 729 0182 7800     		.ascii	"x\000"
 730 0184 02       		.byte	0x2
 731 0185 B502     		.2byte	0x2b5
 732 0187 08010000 		.4byte	0x108
 733 018b 0A       		.uleb128 0xa
 734 018c 7900     		.ascii	"y\000"
 735 018e 02       		.byte	0x2
 736 018f B602     		.2byte	0x2b6
 737 0191 C3000000 		.4byte	0xc3
 738 0195 0B       		.uleb128 0xb
 739 0196 A3000000 		.4byte	.LASF32
 740 019a 02       		.byte	0x2
 741 019b B802     		.2byte	0x2b8
 742 019d B8000000 		.4byte	0xb8
 743 01a1 0B       		.uleb128 0xb
 744 01a2 1F010000 		.4byte	.LASF33
 745 01a6 02       		.byte	0x2
 746 01a7 B802     		.2byte	0x2b8
 747 01a9 B8000000 		.4byte	0xb8
 748 01ad 0C       		.uleb128 0xc
 749 01ae 6900     		.ascii	"i\000"
 750 01b0 02       		.byte	0x2
 751 01b1 B902     		.2byte	0x2b9
 752 01b3 C3000000 		.4byte	0xc3
 753 01b7 00       		.byte	0
 754 01b8 0D       		.uleb128 0xd
 755 01b9 8A020000 		.4byte	.LASF45
 756 01bd 01       		.byte	0x1
 757 01be 3E       		.byte	0x3e
 758 01bf 00000000 		.4byte	.LFB82
 759 01c3 5A030000 		.4byte	.LFE82-.LFB82
 760 01c7 01       		.uleb128 0x1
 761 01c8 9C       		.byte	0x9c
 762 01c9 5D030000 		.4byte	0x35d
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 34


 763 01cd 0E       		.uleb128 0xe
 764 01ce 5300     		.ascii	"S\000"
 765 01d0 01       		.byte	0x1
 766 01d1 3F       		.byte	0x3f
 767 01d2 5D030000 		.4byte	0x35d
 768 01d6 03       		.uleb128 0x3
 769 01d7 91       		.byte	0x91
 770 01d8 947F     		.sleb128 -108
 771 01da 0F       		.uleb128 0xf
 772 01db 7B020000 		.4byte	.LASF34
 773 01df 01       		.byte	0x1
 774 01e0 40       		.byte	0x40
 775 01e1 20010000 		.4byte	0x120
 776 01e5 03       		.uleb128 0x3
 777 01e6 91       		.byte	0x91
 778 01e7 907F     		.sleb128 -112
 779 01e9 0F       		.uleb128 0xf
 780 01ea 1A010000 		.4byte	.LASF35
 781 01ee 01       		.byte	0x1
 782 01ef 41       		.byte	0x41
 783 01f0 20010000 		.4byte	0x120
 784 01f4 03       		.uleb128 0x3
 785 01f5 91       		.byte	0x91
 786 01f6 8C7F     		.sleb128 -116
 787 01f8 0F       		.uleb128 0xf
 788 01f9 00000000 		.4byte	.LASF36
 789 01fd 01       		.byte	0x1
 790 01fe 42       		.byte	0x42
 791 01ff C3000000 		.4byte	0xc3
 792 0203 03       		.uleb128 0x3
 793 0204 91       		.byte	0x91
 794 0205 887F     		.sleb128 -120
 795 0207 10       		.uleb128 0x10
 796 0208 70496E00 		.ascii	"pIn\000"
 797 020c 01       		.byte	0x1
 798 020d 3001     		.2byte	0x130
 799 020f 20010000 		.4byte	0x120
 800 0213 02       		.uleb128 0x2
 801 0214 91       		.byte	0x91
 802 0215 64       		.sleb128 -28
 803 0216 11       		.uleb128 0x11
 804 0217 9E000000 		.4byte	.LASF37
 805 021b 01       		.byte	0x1
 806 021c 3101     		.2byte	0x131
 807 021e 20010000 		.4byte	0x120
 808 0222 02       		.uleb128 0x2
 809 0223 91       		.byte	0x91
 810 0224 60       		.sleb128 -32
 811 0225 10       		.uleb128 0x10
 812 0226 623000   		.ascii	"b0\000"
 813 0229 01       		.byte	0x1
 814 022a 3201     		.2byte	0x132
 815 022c FC000000 		.4byte	0xfc
 816 0230 02       		.uleb128 0x2
 817 0231 91       		.byte	0x91
 818 0232 42       		.sleb128 -62
 819 0233 10       		.uleb128 0x10
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 35


 820 0234 623100   		.ascii	"b1\000"
 821 0237 01       		.byte	0x1
 822 0238 3201     		.2byte	0x132
 823 023a FC000000 		.4byte	0xfc
 824 023e 02       		.uleb128 0x2
 825 023f 91       		.byte	0x91
 826 0240 40       		.sleb128 -64
 827 0241 10       		.uleb128 0x10
 828 0242 623200   		.ascii	"b2\000"
 829 0245 01       		.byte	0x1
 830 0246 3201     		.2byte	0x132
 831 0248 FC000000 		.4byte	0xfc
 832 024c 03       		.uleb128 0x3
 833 024d 91       		.byte	0x91
 834 024e BE7F     		.sleb128 -66
 835 0250 10       		.uleb128 0x10
 836 0251 613100   		.ascii	"a1\000"
 837 0254 01       		.byte	0x1
 838 0255 3201     		.2byte	0x132
 839 0257 FC000000 		.4byte	0xfc
 840 025b 03       		.uleb128 0x3
 841 025c 91       		.byte	0x91
 842 025d BC7F     		.sleb128 -68
 843 025f 10       		.uleb128 0x10
 844 0260 613200   		.ascii	"a2\000"
 845 0263 01       		.byte	0x1
 846 0264 3201     		.2byte	0x132
 847 0266 FC000000 		.4byte	0xfc
 848 026a 03       		.uleb128 0x3
 849 026b 91       		.byte	0x91
 850 026c BA7F     		.sleb128 -70
 851 026e 10       		.uleb128 0x10
 852 026f 586E3100 		.ascii	"Xn1\000"
 853 0273 01       		.byte	0x1
 854 0274 3301     		.2byte	0x133
 855 0276 FC000000 		.4byte	0xfc
 856 027a 02       		.uleb128 0x2
 857 027b 91       		.byte	0x91
 858 027c 5E       		.sleb128 -34
 859 027d 10       		.uleb128 0x10
 860 027e 586E3200 		.ascii	"Xn2\000"
 861 0282 01       		.byte	0x1
 862 0283 3301     		.2byte	0x133
 863 0285 FC000000 		.4byte	0xfc
 864 0289 02       		.uleb128 0x2
 865 028a 91       		.byte	0x91
 866 028b 5C       		.sleb128 -36
 867 028c 10       		.uleb128 0x10
 868 028d 596E3100 		.ascii	"Yn1\000"
 869 0291 01       		.byte	0x1
 870 0292 3301     		.2byte	0x133
 871 0294 FC000000 		.4byte	0xfc
 872 0298 02       		.uleb128 0x2
 873 0299 91       		.byte	0x91
 874 029a 5A       		.sleb128 -38
 875 029b 10       		.uleb128 0x10
 876 029c 596E3200 		.ascii	"Yn2\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 36


 877 02a0 01       		.byte	0x1
 878 02a1 3301     		.2byte	0x133
 879 02a3 FC000000 		.4byte	0xfc
 880 02a7 02       		.uleb128 0x2
 881 02a8 91       		.byte	0x91
 882 02a9 58       		.sleb128 -40
 883 02aa 10       		.uleb128 0x10
 884 02ab 586E00   		.ascii	"Xn\000"
 885 02ae 01       		.byte	0x1
 886 02af 3401     		.2byte	0x134
 887 02b1 FC000000 		.4byte	0xfc
 888 02b5 03       		.uleb128 0x3
 889 02b6 91       		.byte	0x91
 890 02b7 B87F     		.sleb128 -72
 891 02b9 10       		.uleb128 0x10
 892 02ba 61636300 		.ascii	"acc\000"
 893 02be 01       		.byte	0x1
 894 02bf 3501     		.2byte	0x135
 895 02c1 14010000 		.4byte	0x114
 896 02c5 03       		.uleb128 0x3
 897 02c6 91       		.byte	0x91
 898 02c7 B07F     		.sleb128 -80
 899 02c9 11       		.uleb128 0x11
 900 02ca 45020000 		.4byte	.LASF38
 901 02ce 01       		.byte	0x1
 902 02cf 3601     		.2byte	0x136
 903 02d1 B8000000 		.4byte	0xb8
 904 02d5 02       		.uleb128 0x2
 905 02d6 91       		.byte	0x91
 906 02d7 44       		.sleb128 -60
 907 02d8 11       		.uleb128 0x11
 908 02d9 1B000000 		.4byte	.LASF28
 909 02dd 01       		.byte	0x1
 910 02de 3701     		.2byte	0x137
 911 02e0 20010000 		.4byte	0x120
 912 02e4 02       		.uleb128 0x2
 913 02e5 91       		.byte	0x91
 914 02e6 54       		.sleb128 -44
 915 02e7 11       		.uleb128 0x11
 916 02e8 4B020000 		.4byte	.LASF29
 917 02ec 01       		.byte	0x1
 918 02ed 3801     		.2byte	0x138
 919 02ef 20010000 		.4byte	0x120
 920 02f3 02       		.uleb128 0x2
 921 02f4 91       		.byte	0x91
 922 02f5 50       		.sleb128 -48
 923 02f6 11       		.uleb128 0x11
 924 02f7 5C020000 		.4byte	.LASF39
 925 02fb 01       		.byte	0x1
 926 02fc 3901     		.2byte	0x139
 927 02fe C3000000 		.4byte	0xc3
 928 0302 02       		.uleb128 0x2
 929 0303 91       		.byte	0x91
 930 0304 4C       		.sleb128 -52
 931 0305 11       		.uleb128 0x11
 932 0306 8B000000 		.4byte	.LASF40
 933 030a 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 37


 934 030b 3901     		.2byte	0x139
 935 030d C3000000 		.4byte	0xc3
 936 0311 02       		.uleb128 0x2
 937 0312 91       		.byte	0x91
 938 0313 48       		.sleb128 -56
 939 0314 12       		.uleb128 0x12
 940 0315 70010000 		.4byte	0x170
 941 0319 24020000 		.4byte	.LBB4
 942 031d 52000000 		.4byte	.LBE4-.LBB4
 943 0321 01       		.byte	0x1
 944 0322 6401     		.2byte	0x164
 945 0324 13       		.uleb128 0x13
 946 0325 8B010000 		.4byte	0x18b
 947 0329 03       		.uleb128 0x3
 948 032a 91       		.byte	0x91
 949 032b A87F     		.sleb128 -88
 950 032d 13       		.uleb128 0x13
 951 032e 81010000 		.4byte	0x181
 952 0332 03       		.uleb128 0x3
 953 0333 91       		.byte	0x91
 954 0334 AC7F     		.sleb128 -84
 955 0336 14       		.uleb128 0x14
 956 0337 24020000 		.4byte	.LBB5
 957 033b 52000000 		.4byte	.LBE5-.LBB5
 958 033f 15       		.uleb128 0x15
 959 0340 95010000 		.4byte	0x195
 960 0344 03       		.uleb128 0x3
 961 0345 91       		.byte	0x91
 962 0346 A47F     		.sleb128 -92
 963 0348 15       		.uleb128 0x15
 964 0349 A1010000 		.4byte	0x1a1
 965 034d 03       		.uleb128 0x3
 966 034e 91       		.byte	0x91
 967 034f 9C7F     		.sleb128 -100
 968 0351 15       		.uleb128 0x15
 969 0352 AD010000 		.4byte	0x1ad
 970 0356 03       		.uleb128 0x3
 971 0357 91       		.byte	0x91
 972 0358 A07F     		.sleb128 -96
 973 035a 00       		.byte	0
 974 035b 00       		.byte	0
 975 035c 00       		.byte	0
 976 035d 06       		.uleb128 0x6
 977 035e 04       		.byte	0x4
 978 035f 63030000 		.4byte	0x363
 979 0363 16       		.uleb128 0x16
 980 0364 64010000 		.4byte	0x164
 981 0368 00       		.byte	0
 982              		.section	.debug_abbrev,"",%progbits
 983              	.Ldebug_abbrev0:
 984 0000 01       		.uleb128 0x1
 985 0001 11       		.uleb128 0x11
 986 0002 01       		.byte	0x1
 987 0003 25       		.uleb128 0x25
 988 0004 0E       		.uleb128 0xe
 989 0005 13       		.uleb128 0x13
 990 0006 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 38


 991 0007 03       		.uleb128 0x3
 992 0008 0E       		.uleb128 0xe
 993 0009 1B       		.uleb128 0x1b
 994 000a 0E       		.uleb128 0xe
 995 000b 55       		.uleb128 0x55
 996 000c 17       		.uleb128 0x17
 997 000d 11       		.uleb128 0x11
 998 000e 01       		.uleb128 0x1
 999 000f 10       		.uleb128 0x10
 1000 0010 17       		.uleb128 0x17
 1001 0011 00       		.byte	0
 1002 0012 00       		.byte	0
 1003 0013 02       		.uleb128 0x2
 1004 0014 16       		.uleb128 0x16
 1005 0015 00       		.byte	0
 1006 0016 03       		.uleb128 0x3
 1007 0017 0E       		.uleb128 0xe
 1008 0018 3A       		.uleb128 0x3a
 1009 0019 0B       		.uleb128 0xb
 1010 001a 3B       		.uleb128 0x3b
 1011 001b 0B       		.uleb128 0xb
 1012 001c 49       		.uleb128 0x49
 1013 001d 13       		.uleb128 0x13
 1014 001e 00       		.byte	0
 1015 001f 00       		.byte	0
 1016 0020 03       		.uleb128 0x3
 1017 0021 24       		.uleb128 0x24
 1018 0022 00       		.byte	0
 1019 0023 0B       		.uleb128 0xb
 1020 0024 0B       		.uleb128 0xb
 1021 0025 3E       		.uleb128 0x3e
 1022 0026 0B       		.uleb128 0xb
 1023 0027 03       		.uleb128 0x3
 1024 0028 0E       		.uleb128 0xe
 1025 0029 00       		.byte	0
 1026 002a 00       		.byte	0
 1027 002b 04       		.uleb128 0x4
 1028 002c 24       		.uleb128 0x24
 1029 002d 00       		.byte	0
 1030 002e 0B       		.uleb128 0xb
 1031 002f 0B       		.uleb128 0xb
 1032 0030 3E       		.uleb128 0x3e
 1033 0031 0B       		.uleb128 0xb
 1034 0032 03       		.uleb128 0x3
 1035 0033 08       		.uleb128 0x8
 1036 0034 00       		.byte	0
 1037 0035 00       		.byte	0
 1038 0036 05       		.uleb128 0x5
 1039 0037 16       		.uleb128 0x16
 1040 0038 00       		.byte	0
 1041 0039 03       		.uleb128 0x3
 1042 003a 0E       		.uleb128 0xe
 1043 003b 3A       		.uleb128 0x3a
 1044 003c 0B       		.uleb128 0xb
 1045 003d 3B       		.uleb128 0x3b
 1046 003e 05       		.uleb128 0x5
 1047 003f 49       		.uleb128 0x49
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 39


 1048 0040 13       		.uleb128 0x13
 1049 0041 00       		.byte	0
 1050 0042 00       		.byte	0
 1051 0043 06       		.uleb128 0x6
 1052 0044 0F       		.uleb128 0xf
 1053 0045 00       		.byte	0
 1054 0046 0B       		.uleb128 0xb
 1055 0047 0B       		.uleb128 0xb
 1056 0048 49       		.uleb128 0x49
 1057 0049 13       		.uleb128 0x13
 1058 004a 00       		.byte	0
 1059 004b 00       		.byte	0
 1060 004c 07       		.uleb128 0x7
 1061 004d 13       		.uleb128 0x13
 1062 004e 01       		.byte	0x1
 1063 004f 0B       		.uleb128 0xb
 1064 0050 0B       		.uleb128 0xb
 1065 0051 3A       		.uleb128 0x3a
 1066 0052 0B       		.uleb128 0xb
 1067 0053 3B       		.uleb128 0x3b
 1068 0054 05       		.uleb128 0x5
 1069 0055 01       		.uleb128 0x1
 1070 0056 13       		.uleb128 0x13
 1071 0057 00       		.byte	0
 1072 0058 00       		.byte	0
 1073 0059 08       		.uleb128 0x8
 1074 005a 0D       		.uleb128 0xd
 1075 005b 00       		.byte	0
 1076 005c 03       		.uleb128 0x3
 1077 005d 0E       		.uleb128 0xe
 1078 005e 3A       		.uleb128 0x3a
 1079 005f 0B       		.uleb128 0xb
 1080 0060 3B       		.uleb128 0x3b
 1081 0061 05       		.uleb128 0x5
 1082 0062 49       		.uleb128 0x49
 1083 0063 13       		.uleb128 0x13
 1084 0064 38       		.uleb128 0x38
 1085 0065 0B       		.uleb128 0xb
 1086 0066 00       		.byte	0
 1087 0067 00       		.byte	0
 1088 0068 09       		.uleb128 0x9
 1089 0069 2E       		.uleb128 0x2e
 1090 006a 01       		.byte	0x1
 1091 006b 03       		.uleb128 0x3
 1092 006c 0E       		.uleb128 0xe
 1093 006d 3A       		.uleb128 0x3a
 1094 006e 0B       		.uleb128 0xb
 1095 006f 3B       		.uleb128 0x3b
 1096 0070 05       		.uleb128 0x5
 1097 0071 27       		.uleb128 0x27
 1098 0072 19       		.uleb128 0x19
 1099 0073 49       		.uleb128 0x49
 1100 0074 13       		.uleb128 0x13
 1101 0075 20       		.uleb128 0x20
 1102 0076 0B       		.uleb128 0xb
 1103 0077 01       		.uleb128 0x1
 1104 0078 13       		.uleb128 0x13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 40


 1105 0079 00       		.byte	0
 1106 007a 00       		.byte	0
 1107 007b 0A       		.uleb128 0xa
 1108 007c 05       		.uleb128 0x5
 1109 007d 00       		.byte	0
 1110 007e 03       		.uleb128 0x3
 1111 007f 08       		.uleb128 0x8
 1112 0080 3A       		.uleb128 0x3a
 1113 0081 0B       		.uleb128 0xb
 1114 0082 3B       		.uleb128 0x3b
 1115 0083 05       		.uleb128 0x5
 1116 0084 49       		.uleb128 0x49
 1117 0085 13       		.uleb128 0x13
 1118 0086 00       		.byte	0
 1119 0087 00       		.byte	0
 1120 0088 0B       		.uleb128 0xb
 1121 0089 34       		.uleb128 0x34
 1122 008a 00       		.byte	0
 1123 008b 03       		.uleb128 0x3
 1124 008c 0E       		.uleb128 0xe
 1125 008d 3A       		.uleb128 0x3a
 1126 008e 0B       		.uleb128 0xb
 1127 008f 3B       		.uleb128 0x3b
 1128 0090 05       		.uleb128 0x5
 1129 0091 49       		.uleb128 0x49
 1130 0092 13       		.uleb128 0x13
 1131 0093 00       		.byte	0
 1132 0094 00       		.byte	0
 1133 0095 0C       		.uleb128 0xc
 1134 0096 34       		.uleb128 0x34
 1135 0097 00       		.byte	0
 1136 0098 03       		.uleb128 0x3
 1137 0099 08       		.uleb128 0x8
 1138 009a 3A       		.uleb128 0x3a
 1139 009b 0B       		.uleb128 0xb
 1140 009c 3B       		.uleb128 0x3b
 1141 009d 05       		.uleb128 0x5
 1142 009e 49       		.uleb128 0x49
 1143 009f 13       		.uleb128 0x13
 1144 00a0 00       		.byte	0
 1145 00a1 00       		.byte	0
 1146 00a2 0D       		.uleb128 0xd
 1147 00a3 2E       		.uleb128 0x2e
 1148 00a4 01       		.byte	0x1
 1149 00a5 3F       		.uleb128 0x3f
 1150 00a6 19       		.uleb128 0x19
 1151 00a7 03       		.uleb128 0x3
 1152 00a8 0E       		.uleb128 0xe
 1153 00a9 3A       		.uleb128 0x3a
 1154 00aa 0B       		.uleb128 0xb
 1155 00ab 3B       		.uleb128 0x3b
 1156 00ac 0B       		.uleb128 0xb
 1157 00ad 27       		.uleb128 0x27
 1158 00ae 19       		.uleb128 0x19
 1159 00af 11       		.uleb128 0x11
 1160 00b0 01       		.uleb128 0x1
 1161 00b1 12       		.uleb128 0x12
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 41


 1162 00b2 06       		.uleb128 0x6
 1163 00b3 40       		.uleb128 0x40
 1164 00b4 18       		.uleb128 0x18
 1165 00b5 9742     		.uleb128 0x2117
 1166 00b7 19       		.uleb128 0x19
 1167 00b8 01       		.uleb128 0x1
 1168 00b9 13       		.uleb128 0x13
 1169 00ba 00       		.byte	0
 1170 00bb 00       		.byte	0
 1171 00bc 0E       		.uleb128 0xe
 1172 00bd 05       		.uleb128 0x5
 1173 00be 00       		.byte	0
 1174 00bf 03       		.uleb128 0x3
 1175 00c0 08       		.uleb128 0x8
 1176 00c1 3A       		.uleb128 0x3a
 1177 00c2 0B       		.uleb128 0xb
 1178 00c3 3B       		.uleb128 0x3b
 1179 00c4 0B       		.uleb128 0xb
 1180 00c5 49       		.uleb128 0x49
 1181 00c6 13       		.uleb128 0x13
 1182 00c7 02       		.uleb128 0x2
 1183 00c8 18       		.uleb128 0x18
 1184 00c9 00       		.byte	0
 1185 00ca 00       		.byte	0
 1186 00cb 0F       		.uleb128 0xf
 1187 00cc 05       		.uleb128 0x5
 1188 00cd 00       		.byte	0
 1189 00ce 03       		.uleb128 0x3
 1190 00cf 0E       		.uleb128 0xe
 1191 00d0 3A       		.uleb128 0x3a
 1192 00d1 0B       		.uleb128 0xb
 1193 00d2 3B       		.uleb128 0x3b
 1194 00d3 0B       		.uleb128 0xb
 1195 00d4 49       		.uleb128 0x49
 1196 00d5 13       		.uleb128 0x13
 1197 00d6 02       		.uleb128 0x2
 1198 00d7 18       		.uleb128 0x18
 1199 00d8 00       		.byte	0
 1200 00d9 00       		.byte	0
 1201 00da 10       		.uleb128 0x10
 1202 00db 34       		.uleb128 0x34
 1203 00dc 00       		.byte	0
 1204 00dd 03       		.uleb128 0x3
 1205 00de 08       		.uleb128 0x8
 1206 00df 3A       		.uleb128 0x3a
 1207 00e0 0B       		.uleb128 0xb
 1208 00e1 3B       		.uleb128 0x3b
 1209 00e2 05       		.uleb128 0x5
 1210 00e3 49       		.uleb128 0x49
 1211 00e4 13       		.uleb128 0x13
 1212 00e5 02       		.uleb128 0x2
 1213 00e6 18       		.uleb128 0x18
 1214 00e7 00       		.byte	0
 1215 00e8 00       		.byte	0
 1216 00e9 11       		.uleb128 0x11
 1217 00ea 34       		.uleb128 0x34
 1218 00eb 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 42


 1219 00ec 03       		.uleb128 0x3
 1220 00ed 0E       		.uleb128 0xe
 1221 00ee 3A       		.uleb128 0x3a
 1222 00ef 0B       		.uleb128 0xb
 1223 00f0 3B       		.uleb128 0x3b
 1224 00f1 05       		.uleb128 0x5
 1225 00f2 49       		.uleb128 0x49
 1226 00f3 13       		.uleb128 0x13
 1227 00f4 02       		.uleb128 0x2
 1228 00f5 18       		.uleb128 0x18
 1229 00f6 00       		.byte	0
 1230 00f7 00       		.byte	0
 1231 00f8 12       		.uleb128 0x12
 1232 00f9 1D       		.uleb128 0x1d
 1233 00fa 01       		.byte	0x1
 1234 00fb 31       		.uleb128 0x31
 1235 00fc 13       		.uleb128 0x13
 1236 00fd 11       		.uleb128 0x11
 1237 00fe 01       		.uleb128 0x1
 1238 00ff 12       		.uleb128 0x12
 1239 0100 06       		.uleb128 0x6
 1240 0101 58       		.uleb128 0x58
 1241 0102 0B       		.uleb128 0xb
 1242 0103 59       		.uleb128 0x59
 1243 0104 05       		.uleb128 0x5
 1244 0105 00       		.byte	0
 1245 0106 00       		.byte	0
 1246 0107 13       		.uleb128 0x13
 1247 0108 05       		.uleb128 0x5
 1248 0109 00       		.byte	0
 1249 010a 31       		.uleb128 0x31
 1250 010b 13       		.uleb128 0x13
 1251 010c 02       		.uleb128 0x2
 1252 010d 18       		.uleb128 0x18
 1253 010e 00       		.byte	0
 1254 010f 00       		.byte	0
 1255 0110 14       		.uleb128 0x14
 1256 0111 0B       		.uleb128 0xb
 1257 0112 01       		.byte	0x1
 1258 0113 11       		.uleb128 0x11
 1259 0114 01       		.uleb128 0x1
 1260 0115 12       		.uleb128 0x12
 1261 0116 06       		.uleb128 0x6
 1262 0117 00       		.byte	0
 1263 0118 00       		.byte	0
 1264 0119 15       		.uleb128 0x15
 1265 011a 34       		.uleb128 0x34
 1266 011b 00       		.byte	0
 1267 011c 31       		.uleb128 0x31
 1268 011d 13       		.uleb128 0x13
 1269 011e 02       		.uleb128 0x2
 1270 011f 18       		.uleb128 0x18
 1271 0120 00       		.byte	0
 1272 0121 00       		.byte	0
 1273 0122 16       		.uleb128 0x16
 1274 0123 26       		.uleb128 0x26
 1275 0124 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 43


 1276 0125 49       		.uleb128 0x49
 1277 0126 13       		.uleb128 0x13
 1278 0127 00       		.byte	0
 1279 0128 00       		.byte	0
 1280 0129 00       		.byte	0
 1281              		.section	.debug_aranges,"",%progbits
 1282 0000 1C000000 		.4byte	0x1c
 1283 0004 0200     		.2byte	0x2
 1284 0006 00000000 		.4byte	.Ldebug_info0
 1285 000a 04       		.byte	0x4
 1286 000b 00       		.byte	0
 1287 000c 0000     		.2byte	0
 1288 000e 0000     		.2byte	0
 1289 0010 00000000 		.4byte	.LFB82
 1290 0014 5A030000 		.4byte	.LFE82-.LFB82
 1291 0018 00000000 		.4byte	0
 1292 001c 00000000 		.4byte	0
 1293              		.section	.debug_ranges,"",%progbits
 1294              	.Ldebug_ranges0:
 1295 0000 00000000 		.4byte	.LFB82
 1296 0004 5A030000 		.4byte	.LFE82
 1297 0008 00000000 		.4byte	0
 1298 000c 00000000 		.4byte	0
 1299              		.section	.debug_line,"",%progbits
 1300              	.Ldebug_line0:
 1301 0000 C4010000 		.section	.debug_str,"MS",%progbits,1
 1301      02005D01 
 1301      00000201 
 1301      FB0E0D00 
 1301      01010101 
 1302              	.LASF36:
 1303 0000 626C6F63 		.ascii	"blockSize\000"
 1303      6B53697A 
 1303      6500
 1304              	.LASF18:
 1305 000a 696E7436 		.ascii	"int64_t\000"
 1305      345F7400 
 1306              	.LASF2:
 1307 0012 5F5F696E 		.ascii	"__int8_t\000"
 1307      74385F74 
 1307      00
 1308              	.LASF28:
 1309 001b 70537461 		.ascii	"pState\000"
 1309      746500
 1310              	.LASF3:
 1311 0022 5F5F696E 		.ascii	"__int16_t\000"
 1311      7431365F 
 1311      7400
 1312              	.LASF22:
 1313 002c 666C6F61 		.ascii	"float\000"
 1313      7400
 1314              	.LASF6:
 1315 0032 5F5F696E 		.ascii	"__int32_t\000"
 1315      7433325F 
 1315      7400
 1316              	.LASF7:
 1317 003c 6C6F6E67 		.ascii	"long int\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 44


 1317      20696E74 
 1317      00
 1318              	.LASF43:
 1319 0045 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 1319      73657273 
 1319      5C666E65 
 1319      7665735C 
 1319      446F6375 
 1320 0072 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 1320      655F7370 
 1320      6565645F 
 1320      73656E73 
 1320      6F722E63 
 1321              	.LASF40:
 1322 008b 73746167 		.ascii	"stage\000"
 1322      6500
 1323              	.LASF14:
 1324 0091 696E7438 		.ascii	"int8_t\000"
 1324      5F7400
 1325              	.LASF24:
 1326 0098 7131355F 		.ascii	"q15_t\000"
 1326      7400
 1327              	.LASF37:
 1328 009e 704F7574 		.ascii	"pOut\000"
 1328      00
 1329              	.LASF32:
 1330 00a3 706F734D 		.ascii	"posMax\000"
 1330      617800
 1331              	.LASF25:
 1332 00aa 7133315F 		.ascii	"q31_t\000"
 1332      7400
 1333              	.LASF1:
 1334 00b0 756E7369 		.ascii	"unsigned char\000"
 1334      676E6564 
 1334      20636861 
 1334      7200
 1335              	.LASF9:
 1336 00be 6C6F6E67 		.ascii	"long unsigned int\000"
 1336      20756E73 
 1336      69676E65 
 1336      6420696E 
 1336      7400
 1337              	.LASF5:
 1338 00d0 73686F72 		.ascii	"short unsigned int\000"
 1338      7420756E 
 1338      7369676E 
 1338      65642069 
 1338      6E7400
 1339              	.LASF42:
 1340 00e3 536F7572 		.ascii	"Source\\FilteringFunctions\\arm_biquad_cascade_df1_"
 1340      63655C46 
 1340      696C7465 
 1340      72696E67 
 1340      46756E63 
 1341 0114 7131352E 		.ascii	"q15.c\000"
 1341      6300
 1342              	.LASF35:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 45


 1343 011a 70447374 		.ascii	"pDst\000"
 1343      00
 1344              	.LASF33:
 1345 011f 6E65674D 		.ascii	"negMin\000"
 1345      696E00
 1346              	.LASF30:
 1347 0126 706F7374 		.ascii	"postShift\000"
 1347      53686966 
 1347      7400
 1348              	.LASF10:
 1349 0130 5F5F696E 		.ascii	"__int64_t\000"
 1349      7436345F 
 1349      7400
 1350              	.LASF21:
 1351 013a 646F7562 		.ascii	"double\000"
 1351      6C6500
 1352              	.LASF8:
 1353 0141 5F5F7569 		.ascii	"__uint32_t\000"
 1353      6E743332 
 1353      5F7400
 1354              	.LASF13:
 1355 014c 756E7369 		.ascii	"unsigned int\000"
 1355      676E6564 
 1355      20696E74 
 1355      00
 1356              	.LASF12:
 1357 0159 6C6F6E67 		.ascii	"long long unsigned int\000"
 1357      206C6F6E 
 1357      6720756E 
 1357      7369676E 
 1357      65642069 
 1358              	.LASF41:
 1359 0170 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1359      4320342E 
 1359      392E3320 
 1359      32303135 
 1359      30333033 
 1360 01a3 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 1360      20726576 
 1360      6973696F 
 1360      6E203232 
 1360      31323230 
 1361 01d6 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 1361      30202D66 
 1361      66756E63 
 1361      74696F6E 
 1361      2D736563 
 1362              	.LASF26:
 1363 0202 7136335F 		.ascii	"q63_t\000"
 1363      7400
 1364              	.LASF15:
 1365 0208 696E7431 		.ascii	"int16_t\000"
 1365      365F7400 
 1366              	.LASF44:
 1367 0210 5F5F5353 		.ascii	"__SSAT\000"
 1367      415400
 1368              	.LASF16:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 46


 1369 0217 696E7433 		.ascii	"int32_t\000"
 1369      325F7400 
 1370              	.LASF19:
 1371 021f 73697A65 		.ascii	"sizetype\000"
 1371      74797065 
 1371      00
 1372              	.LASF11:
 1373 0228 6C6F6E67 		.ascii	"long long int\000"
 1373      206C6F6E 
 1373      6720696E 
 1373      7400
 1374              	.LASF20:
 1375 0236 63686172 		.ascii	"char\000"
 1375      00
 1376              	.LASF4:
 1377 023b 73686F72 		.ascii	"short int\000"
 1377      7420696E 
 1377      7400
 1378              	.LASF38:
 1379 0245 73686966 		.ascii	"shift\000"
 1379      7400
 1380              	.LASF29:
 1381 024b 70436F65 		.ascii	"pCoeffs\000"
 1381      66667300 
 1382              	.LASF17:
 1383 0253 75696E74 		.ascii	"uint32_t\000"
 1383      33325F74 
 1383      00
 1384              	.LASF39:
 1385 025c 73616D70 		.ascii	"sample\000"
 1385      6C6500
 1386              	.LASF23:
 1387 0263 6C6F6E67 		.ascii	"long double\000"
 1387      20646F75 
 1387      626C6500 
 1388              	.LASF0:
 1389 026f 7369676E 		.ascii	"signed char\000"
 1389      65642063 
 1389      68617200 
 1390              	.LASF34:
 1391 027b 70537263 		.ascii	"pSrc\000"
 1391      00
 1392              	.LASF27:
 1393 0280 6E756D53 		.ascii	"numStages\000"
 1393      74616765 
 1393      7300
 1394              	.LASF45:
 1395 028a 61726D5F 		.ascii	"arm_biquad_cascade_df1_q15\000"
 1395      62697175 
 1395      61645F63 
 1395      61736361 
 1395      64655F64 
 1396              	.LASF31:
 1397 02a5 61726D5F 		.ascii	"arm_biquad_casd_df1_inst_q15\000"
 1397      62697175 
 1397      61645F63 
 1397      6173645F 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccst4YZG.s 			page 47


 1397      6466315F 
 1398              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
