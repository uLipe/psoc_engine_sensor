ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_lms_q31.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_lmul
  18              		.section	.text.arm_lms_q31,"ax",%progbits
  19              		.align	2
  20              		.global	arm_lms_q31
  21              		.code	16
  22              		.thumb_func
  23              		.type	arm_lms_q31, %function
  24              	arm_lms_q31:
  25              	.LFB82:
  26              		.file 1 "Source\\FilteringFunctions\\arm_lms_q31.c"
   1:Source\FilteringFunctions/arm_lms_q31.c **** /* ----------------------------------------------------------------------
   2:Source\FilteringFunctions/arm_lms_q31.c ****  * Project:      CMSIS DSP Library
   3:Source\FilteringFunctions/arm_lms_q31.c ****  * Title:        arm_lms_q31.c
   4:Source\FilteringFunctions/arm_lms_q31.c ****  * Description:  Processing function for the Q31 LMS filter
   5:Source\FilteringFunctions/arm_lms_q31.c ****  *
   6:Source\FilteringFunctions/arm_lms_q31.c ****  * $Date:        27. January 2017
   7:Source\FilteringFunctions/arm_lms_q31.c ****  * $Revision:    V.1.5.1
   8:Source\FilteringFunctions/arm_lms_q31.c ****  *
   9:Source\FilteringFunctions/arm_lms_q31.c ****  * Target Processor: Cortex-M cores
  10:Source\FilteringFunctions/arm_lms_q31.c ****  * -------------------------------------------------------------------- */
  11:Source\FilteringFunctions/arm_lms_q31.c **** /*
  12:Source\FilteringFunctions/arm_lms_q31.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\FilteringFunctions/arm_lms_q31.c ****  *
  14:Source\FilteringFunctions/arm_lms_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\FilteringFunctions/arm_lms_q31.c ****  *
  16:Source\FilteringFunctions/arm_lms_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\FilteringFunctions/arm_lms_q31.c ****  * not use this file except in compliance with the License.
  18:Source\FilteringFunctions/arm_lms_q31.c ****  * You may obtain a copy of the License at
  19:Source\FilteringFunctions/arm_lms_q31.c ****  *
  20:Source\FilteringFunctions/arm_lms_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\FilteringFunctions/arm_lms_q31.c ****  *
  22:Source\FilteringFunctions/arm_lms_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\FilteringFunctions/arm_lms_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\FilteringFunctions/arm_lms_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\FilteringFunctions/arm_lms_q31.c ****  * See the License for the specific language governing permissions and
  26:Source\FilteringFunctions/arm_lms_q31.c ****  * limitations under the License.
  27:Source\FilteringFunctions/arm_lms_q31.c ****  */
  28:Source\FilteringFunctions/arm_lms_q31.c **** 
  29:Source\FilteringFunctions/arm_lms_q31.c **** #include "arm_math.h"
  30:Source\FilteringFunctions/arm_lms_q31.c **** /**
  31:Source\FilteringFunctions/arm_lms_q31.c ****  * @ingroup groupFilters
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 2


  32:Source\FilteringFunctions/arm_lms_q31.c ****  */
  33:Source\FilteringFunctions/arm_lms_q31.c **** 
  34:Source\FilteringFunctions/arm_lms_q31.c **** /**
  35:Source\FilteringFunctions/arm_lms_q31.c ****  * @addtogroup LMS
  36:Source\FilteringFunctions/arm_lms_q31.c ****  * @{
  37:Source\FilteringFunctions/arm_lms_q31.c ****  */
  38:Source\FilteringFunctions/arm_lms_q31.c **** 
  39:Source\FilteringFunctions/arm_lms_q31.c ****  /**
  40:Source\FilteringFunctions/arm_lms_q31.c ****  * @brief Processing function for Q31 LMS filter.
  41:Source\FilteringFunctions/arm_lms_q31.c ****  * @param[in]  *S points to an instance of the Q15 LMS filter structure.
  42:Source\FilteringFunctions/arm_lms_q31.c ****  * @param[in]  *pSrc points to the block of input data.
  43:Source\FilteringFunctions/arm_lms_q31.c ****  * @param[in]  *pRef points to the block of reference data.
  44:Source\FilteringFunctions/arm_lms_q31.c ****  * @param[out] *pOut points to the block of output data.
  45:Source\FilteringFunctions/arm_lms_q31.c ****  * @param[out] *pErr points to the block of error data.
  46:Source\FilteringFunctions/arm_lms_q31.c ****  * @param[in]  blockSize number of samples to process.
  47:Source\FilteringFunctions/arm_lms_q31.c ****  * @return     none.
  48:Source\FilteringFunctions/arm_lms_q31.c ****  *
  49:Source\FilteringFunctions/arm_lms_q31.c ****  * \par Scaling and Overflow Behavior:
  50:Source\FilteringFunctions/arm_lms_q31.c ****  * The function is implemented using an internal 64-bit accumulator.
  51:Source\FilteringFunctions/arm_lms_q31.c ****  * The accumulator has a 2.62 format and maintains full precision of the intermediate
  52:Source\FilteringFunctions/arm_lms_q31.c ****  * multiplication results but provides only a single guard bit.
  53:Source\FilteringFunctions/arm_lms_q31.c ****  * Thus, if the accumulator result overflows it wraps around rather than clips.
  54:Source\FilteringFunctions/arm_lms_q31.c ****  * In order to avoid overflows completely the input signal must be scaled down by
  55:Source\FilteringFunctions/arm_lms_q31.c ****  * log2(numTaps) bits.
  56:Source\FilteringFunctions/arm_lms_q31.c ****  * The reference signal should not be scaled down.
  57:Source\FilteringFunctions/arm_lms_q31.c ****  * After all multiply-accumulates are performed, the 2.62 accumulator is shifted
  58:Source\FilteringFunctions/arm_lms_q31.c ****  * and saturated to 1.31 format to yield the final result.
  59:Source\FilteringFunctions/arm_lms_q31.c ****  * The output signal and error signal are in 1.31 format.
  60:Source\FilteringFunctions/arm_lms_q31.c ****  *
  61:Source\FilteringFunctions/arm_lms_q31.c ****  * \par
  62:Source\FilteringFunctions/arm_lms_q31.c ****  * 	In this filter, filter coefficients are updated for each sample and the updation of filter coff
  63:Source\FilteringFunctions/arm_lms_q31.c ****  */
  64:Source\FilteringFunctions/arm_lms_q31.c **** 
  65:Source\FilteringFunctions/arm_lms_q31.c **** void arm_lms_q31(
  66:Source\FilteringFunctions/arm_lms_q31.c ****   const arm_lms_instance_q31 * S,
  67:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t * pSrc,
  68:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t * pRef,
  69:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t * pOut,
  70:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t * pErr,
  71:Source\FilteringFunctions/arm_lms_q31.c ****   uint32_t blockSize)
  72:Source\FilteringFunctions/arm_lms_q31.c **** {
  27              		.loc 1 72 0
  28              		.cfi_startproc
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              		.cfi_def_cfa_offset 20
  31              		.cfi_offset 4, -20
  32              		.cfi_offset 5, -16
  33              		.cfi_offset 6, -12
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 B1B0     		sub	sp, sp, #196
  37              		.cfi_def_cfa_offset 216
  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40 0006 F866     		str	r0, [r7, #108]
  41 0008 B966     		str	r1, [r7, #104]
  42 000a 7A66     		str	r2, [r7, #100]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 3


  43 000c 3B66     		str	r3, [r7, #96]
  73:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t *pState = S->pState;                     /* State pointer */
  44              		.loc 1 73 0
  45 000e FB6E     		ldr	r3, [r7, #108]
  46 0010 5B68     		ldr	r3, [r3, #4]
  47 0012 BC22     		mov	r2, #188
  48 0014 BA18     		add	r2, r7, r2
  49 0016 1360     		str	r3, [r2]
  74:Source\FilteringFunctions/arm_lms_q31.c ****   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
  50              		.loc 1 74 0
  51 0018 FB6E     		ldr	r3, [r7, #108]
  52 001a 1B88     		ldrh	r3, [r3]
  53 001c 9C22     		mov	r2, #156
  54 001e BA18     		add	r2, r7, r2
  55 0020 1360     		str	r3, [r2]
  75:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
  56              		.loc 1 75 0
  57 0022 FB6E     		ldr	r3, [r7, #108]
  58 0024 9B68     		ldr	r3, [r3, #8]
  59 0026 9822     		mov	r2, #152
  60 0028 BA18     		add	r2, r7, r2
  61 002a 1360     		str	r3, [r2]
  76:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t *pStateCurnt;                            /* Points to the current sample of the state */
  77:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t mu = S->mu;                              /* Adaptive factor */
  62              		.loc 1 77 0
  63 002c FB6E     		ldr	r3, [r7, #108]
  64 002e DB68     		ldr	r3, [r3, #12]
  65 0030 9422     		mov	r2, #148
  66 0032 BA18     		add	r2, r7, r2
  67 0034 1360     		str	r3, [r2]
  78:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t *px;                                     /* Temporary pointer for state */
  79:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t *pb;                                     /* Temporary pointer for coefficient buffer */
  80:Source\FilteringFunctions/arm_lms_q31.c ****   uint32_t tapCnt, blkCnt;                       /* Loop counters */
  81:Source\FilteringFunctions/arm_lms_q31.c ****   q63_t acc;                                     /* Accumulator */
  82:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t e = 0;                                   /* error of data sample */
  68              		.loc 1 82 0
  69 0036 0023     		mov	r3, #0
  70 0038 9022     		mov	r2, #144
  71 003a BA18     		add	r2, r7, r2
  72 003c 1360     		str	r3, [r2]
  83:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t alpha;                                   /* Intermediate constant for taps update */
  84:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t coef;                                    /* Temporary variable for coef */
  85:Source\FilteringFunctions/arm_lms_q31.c ****   q31_t acc_l, acc_h;                            /*  temporary input */
  86:Source\FilteringFunctions/arm_lms_q31.c ****   uint32_t uShift = ((uint32_t) S->postShift + 1u);
  73              		.loc 1 86 0
  74 003e FB6E     		ldr	r3, [r7, #108]
  75 0040 1B69     		ldr	r3, [r3, #16]
  76 0042 0133     		add	r3, r3, #1
  77 0044 8C22     		mov	r2, #140
  78 0046 BA18     		add	r2, r7, r2
  79 0048 1360     		str	r3, [r2]
  87:Source\FilteringFunctions/arm_lms_q31.c ****   uint32_t lShift = 32u - uShift;                /*  Shift to be applied to the output */
  80              		.loc 1 87 0
  81 004a 8C23     		mov	r3, #140
  82 004c FB18     		add	r3, r7, r3
  83 004e 1A68     		ldr	r2, [r3]
  84 0050 2023     		mov	r3, #32
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 4


  85 0052 9B1A     		sub	r3, r3, r2
  86 0054 8822     		mov	r2, #136
  87 0056 BA18     		add	r2, r7, r2
  88 0058 1360     		str	r3, [r2]
  88:Source\FilteringFunctions/arm_lms_q31.c **** 
  89:Source\FilteringFunctions/arm_lms_q31.c ****   /* S->pState points to buffer which contains previous frame (numTaps - 1) samples */
  90:Source\FilteringFunctions/arm_lms_q31.c ****   /* pStateCurnt points to the location where the new input data should be written */
  91:Source\FilteringFunctions/arm_lms_q31.c ****   pStateCurnt = &(S->pState[(numTaps - 1u)]);
  89              		.loc 1 91 0
  90 005a FB6E     		ldr	r3, [r7, #108]
  91 005c 5A68     		ldr	r2, [r3, #4]
  92 005e 9C23     		mov	r3, #156
  93 0060 FB18     		add	r3, r7, r3
  94 0062 1B68     		ldr	r3, [r3]
  95 0064 BB49     		ldr	r1, .L14
  96 0066 8C46     		mov	ip, r1
  97 0068 6344     		add	r3, r3, ip
  98 006a 9B00     		lsl	r3, r3, #2
  99 006c D318     		add	r3, r2, r3
 100 006e B822     		mov	r2, #184
 101 0070 BA18     		add	r2, r7, r2
 102 0072 1360     		str	r3, [r2]
  92:Source\FilteringFunctions/arm_lms_q31.c **** 
  93:Source\FilteringFunctions/arm_lms_q31.c ****   /* Initializing blkCnt with blockSize */
  94:Source\FilteringFunctions/arm_lms_q31.c ****   blkCnt = blockSize;
 103              		.loc 1 94 0
 104 0074 DC23     		mov	r3, #220
 105 0076 FB18     		add	r3, r7, r3
 106 0078 1B68     		ldr	r3, [r3]
 107 007a A822     		mov	r2, #168
 108 007c BA18     		add	r2, r7, r2
 109 007e 1360     		str	r3, [r2]
  95:Source\FilteringFunctions/arm_lms_q31.c **** 
  96:Source\FilteringFunctions/arm_lms_q31.c **** 
  97:Source\FilteringFunctions/arm_lms_q31.c **** #if defined (ARM_MATH_DSP)
  98:Source\FilteringFunctions/arm_lms_q31.c **** 
  99:Source\FilteringFunctions/arm_lms_q31.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
 100:Source\FilteringFunctions/arm_lms_q31.c **** 
 101:Source\FilteringFunctions/arm_lms_q31.c ****   while (blkCnt > 0u)
 102:Source\FilteringFunctions/arm_lms_q31.c ****   {
 103:Source\FilteringFunctions/arm_lms_q31.c ****     /* Copy the new input sample into the state buffer */
 104:Source\FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pSrc++;
 105:Source\FilteringFunctions/arm_lms_q31.c **** 
 106:Source\FilteringFunctions/arm_lms_q31.c ****     /* Initialize state pointer */
 107:Source\FilteringFunctions/arm_lms_q31.c ****     px = pState;
 108:Source\FilteringFunctions/arm_lms_q31.c **** 
 109:Source\FilteringFunctions/arm_lms_q31.c ****     /* Initialize coefficient pointer */
 110:Source\FilteringFunctions/arm_lms_q31.c ****     pb = pCoeffs;
 111:Source\FilteringFunctions/arm_lms_q31.c **** 
 112:Source\FilteringFunctions/arm_lms_q31.c ****     /* Set the accumulator to zero */
 113:Source\FilteringFunctions/arm_lms_q31.c ****     acc = 0;
 114:Source\FilteringFunctions/arm_lms_q31.c **** 
 115:Source\FilteringFunctions/arm_lms_q31.c ****     /* Loop unrolling.  Process 4 taps at a time. */
 116:Source\FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps >> 2;
 117:Source\FilteringFunctions/arm_lms_q31.c **** 
 118:Source\FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0u)
 119:Source\FilteringFunctions/arm_lms_q31.c ****     {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 5


 120:Source\FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 121:Source\FilteringFunctions/arm_lms_q31.c ****       /* acc +=  b[N] * x[n-N] */
 122:Source\FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 123:Source\FilteringFunctions/arm_lms_q31.c **** 
 124:Source\FilteringFunctions/arm_lms_q31.c ****       /* acc +=  b[N-1] * x[n-N-1] */
 125:Source\FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 126:Source\FilteringFunctions/arm_lms_q31.c **** 
 127:Source\FilteringFunctions/arm_lms_q31.c ****       /* acc +=  b[N-2] * x[n-N-2] */
 128:Source\FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 129:Source\FilteringFunctions/arm_lms_q31.c **** 
 130:Source\FilteringFunctions/arm_lms_q31.c ****       /* acc +=  b[N-3] * x[n-N-3] */
 131:Source\FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 132:Source\FilteringFunctions/arm_lms_q31.c **** 
 133:Source\FilteringFunctions/arm_lms_q31.c ****       /* Decrement the loop counter */
 134:Source\FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 135:Source\FilteringFunctions/arm_lms_q31.c ****     }
 136:Source\FilteringFunctions/arm_lms_q31.c **** 
 137:Source\FilteringFunctions/arm_lms_q31.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 138:Source\FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps % 0x4u;
 139:Source\FilteringFunctions/arm_lms_q31.c **** 
 140:Source\FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0u)
 141:Source\FilteringFunctions/arm_lms_q31.c ****     {
 142:Source\FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 143:Source\FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 144:Source\FilteringFunctions/arm_lms_q31.c **** 
 145:Source\FilteringFunctions/arm_lms_q31.c ****       /* Decrement the loop counter */
 146:Source\FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 147:Source\FilteringFunctions/arm_lms_q31.c ****     }
 148:Source\FilteringFunctions/arm_lms_q31.c **** 
 149:Source\FilteringFunctions/arm_lms_q31.c ****     /* Converting the result to 1.31 format */
 150:Source\FilteringFunctions/arm_lms_q31.c ****     /* Calc lower part of acc */
 151:Source\FilteringFunctions/arm_lms_q31.c ****     acc_l = acc & 0xffffffff;
 152:Source\FilteringFunctions/arm_lms_q31.c **** 
 153:Source\FilteringFunctions/arm_lms_q31.c ****     /* Calc upper part of acc */
 154:Source\FilteringFunctions/arm_lms_q31.c ****     acc_h = (acc >> 32) & 0xffffffff;
 155:Source\FilteringFunctions/arm_lms_q31.c **** 
 156:Source\FilteringFunctions/arm_lms_q31.c ****     acc = (uint32_t) acc_l >> lShift | acc_h << uShift;
 157:Source\FilteringFunctions/arm_lms_q31.c **** 
 158:Source\FilteringFunctions/arm_lms_q31.c ****     /* Store the result from accumulator into the destination buffer. */
 159:Source\FilteringFunctions/arm_lms_q31.c ****     *pOut++ = (q31_t) acc;
 160:Source\FilteringFunctions/arm_lms_q31.c **** 
 161:Source\FilteringFunctions/arm_lms_q31.c ****     /* Compute and store error */
 162:Source\FilteringFunctions/arm_lms_q31.c ****     e = *pRef++ - (q31_t) acc;
 163:Source\FilteringFunctions/arm_lms_q31.c **** 
 164:Source\FilteringFunctions/arm_lms_q31.c ****     *pErr++ = (q31_t) e;
 165:Source\FilteringFunctions/arm_lms_q31.c **** 
 166:Source\FilteringFunctions/arm_lms_q31.c ****     /* Compute alpha i.e. intermediate constant for taps update */
 167:Source\FilteringFunctions/arm_lms_q31.c ****     alpha = (q31_t) (((q63_t) e * mu) >> 31);
 168:Source\FilteringFunctions/arm_lms_q31.c **** 
 169:Source\FilteringFunctions/arm_lms_q31.c ****     /* Initialize state pointer */
 170:Source\FilteringFunctions/arm_lms_q31.c ****     /* Advance state pointer by 1 for the next sample */
 171:Source\FilteringFunctions/arm_lms_q31.c ****     px = pState++;
 172:Source\FilteringFunctions/arm_lms_q31.c **** 
 173:Source\FilteringFunctions/arm_lms_q31.c ****     /* Initialize coefficient pointer */
 174:Source\FilteringFunctions/arm_lms_q31.c ****     pb = pCoeffs;
 175:Source\FilteringFunctions/arm_lms_q31.c **** 
 176:Source\FilteringFunctions/arm_lms_q31.c ****     /* Loop unrolling.  Process 4 taps at a time. */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 6


 177:Source\FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps >> 2;
 178:Source\FilteringFunctions/arm_lms_q31.c **** 
 179:Source\FilteringFunctions/arm_lms_q31.c ****     /* Update filter coefficients */
 180:Source\FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0u)
 181:Source\FilteringFunctions/arm_lms_q31.c ****     {
 182:Source\FilteringFunctions/arm_lms_q31.c ****       /* coef is in 2.30 format */
 183:Source\FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 184:Source\FilteringFunctions/arm_lms_q31.c ****       /* get coef in 1.31 format by left shifting */
 185:Source\FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
 186:Source\FilteringFunctions/arm_lms_q31.c ****       /* update coefficient buffer to next coefficient */
 187:Source\FilteringFunctions/arm_lms_q31.c ****       pb++;
 188:Source\FilteringFunctions/arm_lms_q31.c **** 
 189:Source\FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 190:Source\FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
 191:Source\FilteringFunctions/arm_lms_q31.c ****       pb++;
 192:Source\FilteringFunctions/arm_lms_q31.c **** 
 193:Source\FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 194:Source\FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
 195:Source\FilteringFunctions/arm_lms_q31.c ****       pb++;
 196:Source\FilteringFunctions/arm_lms_q31.c **** 
 197:Source\FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 198:Source\FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
 199:Source\FilteringFunctions/arm_lms_q31.c ****       pb++;
 200:Source\FilteringFunctions/arm_lms_q31.c **** 
 201:Source\FilteringFunctions/arm_lms_q31.c ****       /* Decrement the loop counter */
 202:Source\FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 203:Source\FilteringFunctions/arm_lms_q31.c ****     }
 204:Source\FilteringFunctions/arm_lms_q31.c **** 
 205:Source\FilteringFunctions/arm_lms_q31.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 206:Source\FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps % 0x4u;
 207:Source\FilteringFunctions/arm_lms_q31.c **** 
 208:Source\FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0u)
 209:Source\FilteringFunctions/arm_lms_q31.c ****     {
 210:Source\FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 211:Source\FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 212:Source\FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
 213:Source\FilteringFunctions/arm_lms_q31.c ****       pb++;
 214:Source\FilteringFunctions/arm_lms_q31.c **** 
 215:Source\FilteringFunctions/arm_lms_q31.c ****       /* Decrement the loop counter */
 216:Source\FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 217:Source\FilteringFunctions/arm_lms_q31.c ****     }
 218:Source\FilteringFunctions/arm_lms_q31.c **** 
 219:Source\FilteringFunctions/arm_lms_q31.c ****     /* Decrement the loop counter */
 220:Source\FilteringFunctions/arm_lms_q31.c ****     blkCnt--;
 221:Source\FilteringFunctions/arm_lms_q31.c ****   }
 222:Source\FilteringFunctions/arm_lms_q31.c **** 
 223:Source\FilteringFunctions/arm_lms_q31.c ****   /* Processing is complete. Now copy the last numTaps - 1 samples to the
 224:Source\FilteringFunctions/arm_lms_q31.c ****      satrt of the state buffer. This prepares the state buffer for the
 225:Source\FilteringFunctions/arm_lms_q31.c ****      next function call. */
 226:Source\FilteringFunctions/arm_lms_q31.c **** 
 227:Source\FilteringFunctions/arm_lms_q31.c ****   /* Points to the start of the pState buffer */
 228:Source\FilteringFunctions/arm_lms_q31.c ****   pStateCurnt = S->pState;
 229:Source\FilteringFunctions/arm_lms_q31.c **** 
 230:Source\FilteringFunctions/arm_lms_q31.c ****   /* Loop unrolling for (numTaps - 1u) samples copy */
 231:Source\FilteringFunctions/arm_lms_q31.c ****   tapCnt = (numTaps - 1u) >> 2u;
 232:Source\FilteringFunctions/arm_lms_q31.c **** 
 233:Source\FilteringFunctions/arm_lms_q31.c ****   /* copy data */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 7


 234:Source\FilteringFunctions/arm_lms_q31.c ****   while (tapCnt > 0u)
 235:Source\FilteringFunctions/arm_lms_q31.c ****   {
 236:Source\FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 237:Source\FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 238:Source\FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 239:Source\FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 240:Source\FilteringFunctions/arm_lms_q31.c **** 
 241:Source\FilteringFunctions/arm_lms_q31.c ****     /* Decrement the loop counter */
 242:Source\FilteringFunctions/arm_lms_q31.c ****     tapCnt--;
 243:Source\FilteringFunctions/arm_lms_q31.c ****   }
 244:Source\FilteringFunctions/arm_lms_q31.c **** 
 245:Source\FilteringFunctions/arm_lms_q31.c ****   /* Calculate remaining number of copies */
 246:Source\FilteringFunctions/arm_lms_q31.c ****   tapCnt = (numTaps - 1u) % 0x4u;
 247:Source\FilteringFunctions/arm_lms_q31.c **** 
 248:Source\FilteringFunctions/arm_lms_q31.c ****   /* Copy the remaining q31_t data */
 249:Source\FilteringFunctions/arm_lms_q31.c ****   while (tapCnt > 0u)
 250:Source\FilteringFunctions/arm_lms_q31.c ****   {
 251:Source\FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 252:Source\FilteringFunctions/arm_lms_q31.c **** 
 253:Source\FilteringFunctions/arm_lms_q31.c ****     /* Decrement the loop counter */
 254:Source\FilteringFunctions/arm_lms_q31.c ****     tapCnt--;
 255:Source\FilteringFunctions/arm_lms_q31.c ****   }
 256:Source\FilteringFunctions/arm_lms_q31.c **** 
 257:Source\FilteringFunctions/arm_lms_q31.c **** #else
 258:Source\FilteringFunctions/arm_lms_q31.c **** 
 259:Source\FilteringFunctions/arm_lms_q31.c ****   /* Run the below code for Cortex-M0 */
 260:Source\FilteringFunctions/arm_lms_q31.c **** 
 261:Source\FilteringFunctions/arm_lms_q31.c ****   while (blkCnt > 0u)
 110              		.loc 1 261 0
 111 0080 36E1     		b	.L2
 112              	.L10:
 262:Source\FilteringFunctions/arm_lms_q31.c ****   {
 263:Source\FilteringFunctions/arm_lms_q31.c ****     /* Copy the new input sample into the state buffer */
 264:Source\FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pSrc++;
 113              		.loc 1 264 0
 114 0082 B823     		mov	r3, #184
 115 0084 FB18     		add	r3, r7, r3
 116 0086 1968     		ldr	r1, [r3]
 117 0088 0B1D     		add	r3, r1, #4
 118 008a B822     		mov	r2, #184
 119 008c BA18     		add	r2, r7, r2
 120 008e 1360     		str	r3, [r2]
 121 0090 BA6E     		ldr	r2, [r7, #104]
 122 0092 131D     		add	r3, r2, #4
 123 0094 BB66     		str	r3, [r7, #104]
 124 0096 1368     		ldr	r3, [r2]
 125 0098 0B60     		str	r3, [r1]
 265:Source\FilteringFunctions/arm_lms_q31.c **** 
 266:Source\FilteringFunctions/arm_lms_q31.c ****     /* Initialize pState pointer */
 267:Source\FilteringFunctions/arm_lms_q31.c ****     px = pState;
 126              		.loc 1 267 0
 127 009a BC23     		mov	r3, #188
 128 009c FB18     		add	r3, r7, r3
 129 009e 1B68     		ldr	r3, [r3]
 130 00a0 B422     		mov	r2, #180
 131 00a2 BA18     		add	r2, r7, r2
 132 00a4 1360     		str	r3, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 8


 268:Source\FilteringFunctions/arm_lms_q31.c **** 
 269:Source\FilteringFunctions/arm_lms_q31.c ****     /* Initialize pCoeffs pointer */
 270:Source\FilteringFunctions/arm_lms_q31.c ****     pb = pCoeffs;
 133              		.loc 1 270 0
 134 00a6 9823     		mov	r3, #152
 135 00a8 FB18     		add	r3, r7, r3
 136 00aa 1B68     		ldr	r3, [r3]
 137 00ac B022     		mov	r2, #176
 138 00ae BA18     		add	r2, r7, r2
 139 00b0 1360     		str	r3, [r2]
 271:Source\FilteringFunctions/arm_lms_q31.c **** 
 272:Source\FilteringFunctions/arm_lms_q31.c ****     /* Set the accumulator to zero */
 273:Source\FilteringFunctions/arm_lms_q31.c ****     acc = 0;
 140              		.loc 1 273 0
 141 00b2 0023     		mov	r3, #0
 142 00b4 0024     		mov	r4, #0
 143 00b6 A022     		mov	r2, #160
 144 00b8 BA18     		add	r2, r7, r2
 145 00ba 1360     		str	r3, [r2]
 146 00bc 5460     		str	r4, [r2, #4]
 274:Source\FilteringFunctions/arm_lms_q31.c **** 
 275:Source\FilteringFunctions/arm_lms_q31.c ****     /* Loop over numTaps number of values */
 276:Source\FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps;
 147              		.loc 1 276 0
 148 00be 9C23     		mov	r3, #156
 149 00c0 FB18     		add	r3, r7, r3
 150 00c2 1B68     		ldr	r3, [r3]
 151 00c4 AC22     		mov	r2, #172
 152 00c6 BA18     		add	r2, r7, r2
 153 00c8 1360     		str	r3, [r2]
 277:Source\FilteringFunctions/arm_lms_q31.c **** 
 278:Source\FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0u)
 154              		.loc 1 278 0
 155 00ca 30E0     		b	.L3
 156              	.L4:
 279:Source\FilteringFunctions/arm_lms_q31.c ****     {
 280:Source\FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 281:Source\FilteringFunctions/arm_lms_q31.c ****       acc += ((q63_t) (*px++)) * (*pb++);
 157              		.loc 1 281 0
 158 00cc B423     		mov	r3, #180
 159 00ce FB18     		add	r3, r7, r3
 160 00d0 1A68     		ldr	r2, [r3]
 161 00d2 131D     		add	r3, r2, #4
 162 00d4 B421     		mov	r1, #180
 163 00d6 7918     		add	r1, r7, r1
 164 00d8 0B60     		str	r3, [r1]
 165 00da 1368     		ldr	r3, [r2]
 166 00dc BB65     		str	r3, [r7, #88]
 167 00de DB17     		asr	r3, r3, #31
 168 00e0 FB65     		str	r3, [r7, #92]
 169 00e2 B023     		mov	r3, #176
 170 00e4 FB18     		add	r3, r7, r3
 171 00e6 1A68     		ldr	r2, [r3]
 172 00e8 131D     		add	r3, r2, #4
 173 00ea B021     		mov	r1, #176
 174 00ec 7918     		add	r1, r7, r1
 175 00ee 0B60     		str	r3, [r1]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 9


 176 00f0 1368     		ldr	r3, [r2]
 177 00f2 3B65     		str	r3, [r7, #80]
 178 00f4 DB17     		asr	r3, r3, #31
 179 00f6 7B65     		str	r3, [r7, #84]
 180 00f8 B86D     		ldr	r0, [r7, #88]
 181 00fa F96D     		ldr	r1, [r7, #92]
 182 00fc 3A6D     		ldr	r2, [r7, #80]
 183 00fe 7B6D     		ldr	r3, [r7, #84]
 184 0100 FFF7FEFF 		bl	__aeabi_lmul
 185 0104 031C     		mov	r3, r0
 186 0106 0C1C     		mov	r4, r1
 187 0108 191C     		mov	r1, r3
 188 010a 221C     		mov	r2, r4
 189 010c A023     		mov	r3, #160
 190 010e FB18     		add	r3, r7, r3
 191 0110 5C68     		ldr	r4, [r3, #4]
 192 0112 1B68     		ldr	r3, [r3]
 193 0114 5B18     		add	r3, r3, r1
 194 0116 5441     		adc	r4, r4, r2
 195 0118 A022     		mov	r2, #160
 196 011a BA18     		add	r2, r7, r2
 197 011c 1360     		str	r3, [r2]
 198 011e 5460     		str	r4, [r2, #4]
 282:Source\FilteringFunctions/arm_lms_q31.c **** 
 283:Source\FilteringFunctions/arm_lms_q31.c ****       /* Decrement the loop counter */
 284:Source\FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 199              		.loc 1 284 0
 200 0120 AC23     		mov	r3, #172
 201 0122 FB18     		add	r3, r7, r3
 202 0124 1B68     		ldr	r3, [r3]
 203 0126 013B     		sub	r3, r3, #1
 204 0128 AC22     		mov	r2, #172
 205 012a BA18     		add	r2, r7, r2
 206 012c 1360     		str	r3, [r2]
 207              	.L3:
 278:Source\FilteringFunctions/arm_lms_q31.c ****     {
 208              		.loc 1 278 0
 209 012e AC23     		mov	r3, #172
 210 0130 FB18     		add	r3, r7, r3
 211 0132 1B68     		ldr	r3, [r3]
 212 0134 002B     		cmp	r3, #0
 213 0136 C9D1     		bne	.L4
 285:Source\FilteringFunctions/arm_lms_q31.c ****     }
 286:Source\FilteringFunctions/arm_lms_q31.c **** 
 287:Source\FilteringFunctions/arm_lms_q31.c ****     /* Converting the result to 1.31 format */
 288:Source\FilteringFunctions/arm_lms_q31.c ****     /* Store the result from accumulator into the destination buffer. */
 289:Source\FilteringFunctions/arm_lms_q31.c ****     /* Calc lower part of acc */
 290:Source\FilteringFunctions/arm_lms_q31.c ****     acc_l = acc & 0xffffffff;
 214              		.loc 1 290 0
 215 0138 A023     		mov	r3, #160
 216 013a FB18     		add	r3, r7, r3
 217 013c 1B68     		ldr	r3, [r3]
 218 013e 8422     		mov	r2, #132
 219 0140 BA18     		add	r2, r7, r2
 220 0142 1360     		str	r3, [r2]
 291:Source\FilteringFunctions/arm_lms_q31.c **** 
 292:Source\FilteringFunctions/arm_lms_q31.c ****     /* Calc upper part of acc */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 10


 293:Source\FilteringFunctions/arm_lms_q31.c ****     acc_h = (acc >> 32) & 0xffffffff;
 221              		.loc 1 293 0
 222 0144 A023     		mov	r3, #160
 223 0146 FB18     		add	r3, r7, r3
 224 0148 5C68     		ldr	r4, [r3, #4]
 225 014a 1B68     		ldr	r3, [r3]
 226 014c 2300     		lsr	r3, r4, #0
 227 014e BB64     		str	r3, [r7, #72]
 228 0150 0023     		mov	r3, #0
 229 0152 FB64     		str	r3, [r7, #76]
 230 0154 BB6C     		ldr	r3, [r7, #72]
 231 0156 8022     		mov	r2, #128
 232 0158 BA18     		add	r2, r7, r2
 233 015a 1360     		str	r3, [r2]
 294:Source\FilteringFunctions/arm_lms_q31.c **** 
 295:Source\FilteringFunctions/arm_lms_q31.c ****     acc = (uint32_t) acc_l >> lShift | acc_h << uShift;
 234              		.loc 1 295 0
 235 015c 8423     		mov	r3, #132
 236 015e FB18     		add	r3, r7, r3
 237 0160 1A68     		ldr	r2, [r3]
 238 0162 8823     		mov	r3, #136
 239 0164 FB18     		add	r3, r7, r3
 240 0166 1B68     		ldr	r3, [r3]
 241 0168 DA40     		lsr	r2, r2, r3
 242 016a 111C     		mov	r1, r2
 243 016c 8C23     		mov	r3, #140
 244 016e FB18     		add	r3, r7, r3
 245 0170 1A68     		ldr	r2, [r3]
 246 0172 8023     		mov	r3, #128
 247 0174 FB18     		add	r3, r7, r3
 248 0176 1B68     		ldr	r3, [r3]
 249 0178 9340     		lsl	r3, r3, r2
 250 017a 0B43     		orr	r3, r1
 251 017c A022     		mov	r2, #160
 252 017e BA18     		add	r2, r7, r2
 253 0180 1360     		str	r3, [r2]
 254 0182 0023     		mov	r3, #0
 255 0184 A422     		mov	r2, #164
 256 0186 BA18     		add	r2, r7, r2
 257 0188 1360     		str	r3, [r2]
 296:Source\FilteringFunctions/arm_lms_q31.c **** 
 297:Source\FilteringFunctions/arm_lms_q31.c ****     *pOut++ = (q31_t) acc;
 258              		.loc 1 297 0
 259 018a 3A6E     		ldr	r2, [r7, #96]
 260 018c 131D     		add	r3, r2, #4
 261 018e 3B66     		str	r3, [r7, #96]
 262 0190 A023     		mov	r3, #160
 263 0192 FB18     		add	r3, r7, r3
 264 0194 1B68     		ldr	r3, [r3]
 265 0196 1360     		str	r3, [r2]
 298:Source\FilteringFunctions/arm_lms_q31.c **** 
 299:Source\FilteringFunctions/arm_lms_q31.c ****     /* Compute and store error */
 300:Source\FilteringFunctions/arm_lms_q31.c ****     e = *pRef++ - (q31_t) acc;
 266              		.loc 1 300 0
 267 0198 7A6E     		ldr	r2, [r7, #100]
 268 019a 131D     		add	r3, r2, #4
 269 019c 7B66     		str	r3, [r7, #100]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 11


 270 019e 1268     		ldr	r2, [r2]
 271 01a0 A023     		mov	r3, #160
 272 01a2 FB18     		add	r3, r7, r3
 273 01a4 1B68     		ldr	r3, [r3]
 274 01a6 D31A     		sub	r3, r2, r3
 275 01a8 9022     		mov	r2, #144
 276 01aa BA18     		add	r2, r7, r2
 277 01ac 1360     		str	r3, [r2]
 301:Source\FilteringFunctions/arm_lms_q31.c **** 
 302:Source\FilteringFunctions/arm_lms_q31.c ****     *pErr++ = (q31_t) e;
 278              		.loc 1 302 0
 279 01ae D823     		mov	r3, #216
 280 01b0 FB18     		add	r3, r7, r3
 281 01b2 1A68     		ldr	r2, [r3]
 282 01b4 131D     		add	r3, r2, #4
 283 01b6 D821     		mov	r1, #216
 284 01b8 7918     		add	r1, r7, r1
 285 01ba 0B60     		str	r3, [r1]
 286 01bc 9023     		mov	r3, #144
 287 01be FB18     		add	r3, r7, r3
 288 01c0 1B68     		ldr	r3, [r3]
 289 01c2 1360     		str	r3, [r2]
 303:Source\FilteringFunctions/arm_lms_q31.c **** 
 304:Source\FilteringFunctions/arm_lms_q31.c ****     /* Weighting factor for the LMS version */
 305:Source\FilteringFunctions/arm_lms_q31.c ****     alpha = (q31_t) (((q63_t) e * mu) >> 31);
 290              		.loc 1 305 0
 291 01c4 9023     		mov	r3, #144
 292 01c6 FB18     		add	r3, r7, r3
 293 01c8 1B68     		ldr	r3, [r3]
 294 01ca 3B64     		str	r3, [r7, #64]
 295 01cc DB17     		asr	r3, r3, #31
 296 01ce 7B64     		str	r3, [r7, #68]
 297 01d0 9423     		mov	r3, #148
 298 01d2 FB18     		add	r3, r7, r3
 299 01d4 1B68     		ldr	r3, [r3]
 300 01d6 BB63     		str	r3, [r7, #56]
 301 01d8 DB17     		asr	r3, r3, #31
 302 01da FB63     		str	r3, [r7, #60]
 303 01dc 386C     		ldr	r0, [r7, #64]
 304 01de 796C     		ldr	r1, [r7, #68]
 305 01e0 BA6B     		ldr	r2, [r7, #56]
 306 01e2 FB6B     		ldr	r3, [r7, #60]
 307 01e4 FFF7FEFF 		bl	__aeabi_lmul
 308 01e8 031C     		mov	r3, r0
 309 01ea 0C1C     		mov	r4, r1
 310 01ec 6200     		lsl	r2, r4, #1
 311 01ee DD0F     		lsr	r5, r3, #31
 312 01f0 1543     		orr	r5, r2
 313 01f2 E617     		asr	r6, r4, #31
 314 01f4 2B1C     		mov	r3, r5
 315 01f6 FB67     		str	r3, [r7, #124]
 306:Source\FilteringFunctions/arm_lms_q31.c **** 
 307:Source\FilteringFunctions/arm_lms_q31.c ****     /* Initialize pState pointer */
 308:Source\FilteringFunctions/arm_lms_q31.c ****     /* Advance state pointer by 1 for the next sample */
 309:Source\FilteringFunctions/arm_lms_q31.c ****     px = pState++;
 316              		.loc 1 309 0
 317 01f8 BC23     		mov	r3, #188
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 12


 318 01fa FB18     		add	r3, r7, r3
 319 01fc 1A68     		ldr	r2, [r3]
 320 01fe 131D     		add	r3, r2, #4
 321 0200 BC21     		mov	r1, #188
 322 0202 7918     		add	r1, r7, r1
 323 0204 0B60     		str	r3, [r1]
 324 0206 B423     		mov	r3, #180
 325 0208 FB18     		add	r3, r7, r3
 326 020a 1A60     		str	r2, [r3]
 310:Source\FilteringFunctions/arm_lms_q31.c **** 
 311:Source\FilteringFunctions/arm_lms_q31.c ****     /* Initialize pCoeffs pointer */
 312:Source\FilteringFunctions/arm_lms_q31.c ****     pb = pCoeffs;
 327              		.loc 1 312 0
 328 020c 9823     		mov	r3, #152
 329 020e FB18     		add	r3, r7, r3
 330 0210 1B68     		ldr	r3, [r3]
 331 0212 B022     		mov	r2, #176
 332 0214 BA18     		add	r2, r7, r2
 333 0216 1360     		str	r3, [r2]
 313:Source\FilteringFunctions/arm_lms_q31.c **** 
 314:Source\FilteringFunctions/arm_lms_q31.c ****     /* Loop over numTaps number of values */
 315:Source\FilteringFunctions/arm_lms_q31.c ****     tapCnt = numTaps;
 334              		.loc 1 315 0
 335 0218 9C23     		mov	r3, #156
 336 021a FB18     		add	r3, r7, r3
 337 021c 1B68     		ldr	r3, [r3]
 338 021e AC22     		mov	r2, #172
 339 0220 BA18     		add	r2, r7, r2
 340 0222 1360     		str	r3, [r2]
 316:Source\FilteringFunctions/arm_lms_q31.c **** 
 317:Source\FilteringFunctions/arm_lms_q31.c ****     while (tapCnt > 0u)
 341              		.loc 1 317 0
 342 0224 58E0     		b	.L5
 343              	.L9:
 318:Source\FilteringFunctions/arm_lms_q31.c ****     {
 319:Source\FilteringFunctions/arm_lms_q31.c ****       /* Perform the multiply-accumulate */
 320:Source\FilteringFunctions/arm_lms_q31.c ****       coef = (q31_t) (((q63_t) alpha * (*px++)) >> (32));
 344              		.loc 1 320 0
 345 0226 FB6F     		ldr	r3, [r7, #124]
 346 0228 3B63     		str	r3, [r7, #48]
 347 022a DB17     		asr	r3, r3, #31
 348 022c 7B63     		str	r3, [r7, #52]
 349 022e B423     		mov	r3, #180
 350 0230 FB18     		add	r3, r7, r3
 351 0232 1A68     		ldr	r2, [r3]
 352 0234 131D     		add	r3, r2, #4
 353 0236 B421     		mov	r1, #180
 354 0238 7918     		add	r1, r7, r1
 355 023a 0B60     		str	r3, [r1]
 356 023c 1368     		ldr	r3, [r2]
 357 023e BB62     		str	r3, [r7, #40]
 358 0240 DB17     		asr	r3, r3, #31
 359 0242 FB62     		str	r3, [r7, #44]
 360 0244 386B     		ldr	r0, [r7, #48]
 361 0246 796B     		ldr	r1, [r7, #52]
 362 0248 BA6A     		ldr	r2, [r7, #40]
 363 024a FB6A     		ldr	r3, [r7, #44]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 13


 364 024c FFF7FEFF 		bl	__aeabi_lmul
 365 0250 031C     		mov	r3, r0
 366 0252 0C1C     		mov	r4, r1
 367 0254 2200     		asr	r2, r4, #0
 368 0256 3A62     		str	r2, [r7, #32]
 369 0258 E317     		asr	r3, r4, #31
 370 025a 7B62     		str	r3, [r7, #36]
 371 025c 3B6A     		ldr	r3, [r7, #32]
 372 025e BB67     		str	r3, [r7, #120]
 321:Source\FilteringFunctions/arm_lms_q31.c ****       *pb = clip_q63_to_q31((q63_t) * pb + (coef << 1u));
 373              		.loc 1 321 0
 374 0260 B023     		mov	r3, #176
 375 0262 FB18     		add	r3, r7, r3
 376 0264 1B68     		ldr	r3, [r3]
 377 0266 1B68     		ldr	r3, [r3]
 378 0268 BB61     		str	r3, [r7, #24]
 379 026a DB17     		asr	r3, r3, #31
 380 026c FB61     		str	r3, [r7, #28]
 381 026e BB6F     		ldr	r3, [r7, #120]
 382 0270 5B00     		lsl	r3, r3, #1
 383 0272 3B61     		str	r3, [r7, #16]
 384 0274 DB17     		asr	r3, r3, #31
 385 0276 7B61     		str	r3, [r7, #20]
 386 0278 BB69     		ldr	r3, [r7, #24]
 387 027a FC69     		ldr	r4, [r7, #28]
 388 027c 3969     		ldr	r1, [r7, #16]
 389 027e 7A69     		ldr	r2, [r7, #20]
 390 0280 5B18     		add	r3, r3, r1
 391 0282 5441     		adc	r4, r4, r2
 392 0284 3B67     		str	r3, [r7, #112]
 393 0286 7C67     		str	r4, [r7, #116]
 394              	.LBB4:
 395              	.LBB5:
 396              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 14


  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 15


  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 16


 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 17


 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 18


 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 19


 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 20


 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 21


 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 22


 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 397              		.loc 2 513 0
 398 0288 7B6F     		ldr	r3, [r7, #116]
 399 028a 1B00     		asr	r3, r3, #0
 400 028c BB60     		str	r3, [r7, #8]
 401 028e 7B6F     		ldr	r3, [r7, #116]
 402 0290 DB17     		asr	r3, r3, #31
 403 0292 FB60     		str	r3, [r7, #12]
 404 0294 BA68     		ldr	r2, [r7, #8]
 405 0296 3B6F     		ldr	r3, [r7, #112]
 406 0298 DB17     		asr	r3, r3, #31
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 407              		.loc 2 514 0
 408 029a 9A42     		cmp	r2, r3
 409 029c 09D0     		beq	.L6
 410 029e 7B6F     		ldr	r3, [r7, #116]
 411 02a0 DB17     		asr	r3, r3, #31
 412 02a2 3B60     		str	r3, [r7]
 413 02a4 7B6F     		ldr	r3, [r7, #116]
 414 02a6 DB17     		asr	r3, r3, #31
 415 02a8 7B60     		str	r3, [r7, #4]
 416 02aa 3A68     		ldr	r2, [r7]
 417 02ac 2A4B     		ldr	r3, .L14+4
 418 02ae 5A40     		eor	r2, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 23


 419 02b0 00E0     		b	.L13
 420              	.L6:
 421 02b2 3A6F     		ldr	r2, [r7, #112]
 422              	.L13:
 423              	.LBE5:
 424              	.LBE4:
 425              		.loc 1 321 0
 426 02b4 B023     		mov	r3, #176
 427 02b6 FB18     		add	r3, r7, r3
 428 02b8 1B68     		ldr	r3, [r3]
 429 02ba 1A60     		str	r2, [r3]
 322:Source\FilteringFunctions/arm_lms_q31.c ****       pb++;
 430              		.loc 1 322 0
 431 02bc B023     		mov	r3, #176
 432 02be FB18     		add	r3, r7, r3
 433 02c0 1B68     		ldr	r3, [r3]
 434 02c2 0433     		add	r3, r3, #4
 435 02c4 B022     		mov	r2, #176
 436 02c6 BA18     		add	r2, r7, r2
 437 02c8 1360     		str	r3, [r2]
 323:Source\FilteringFunctions/arm_lms_q31.c **** 
 324:Source\FilteringFunctions/arm_lms_q31.c ****       /* Decrement the loop counter */
 325:Source\FilteringFunctions/arm_lms_q31.c ****       tapCnt--;
 438              		.loc 1 325 0
 439 02ca AC23     		mov	r3, #172
 440 02cc FB18     		add	r3, r7, r3
 441 02ce 1B68     		ldr	r3, [r3]
 442 02d0 013B     		sub	r3, r3, #1
 443 02d2 AC22     		mov	r2, #172
 444 02d4 BA18     		add	r2, r7, r2
 445 02d6 1360     		str	r3, [r2]
 446              	.L5:
 317:Source\FilteringFunctions/arm_lms_q31.c ****     {
 447              		.loc 1 317 0
 448 02d8 AC23     		mov	r3, #172
 449 02da FB18     		add	r3, r7, r3
 450 02dc 1B68     		ldr	r3, [r3]
 451 02de 002B     		cmp	r3, #0
 452 02e0 A1D1     		bne	.L9
 326:Source\FilteringFunctions/arm_lms_q31.c ****     }
 327:Source\FilteringFunctions/arm_lms_q31.c **** 
 328:Source\FilteringFunctions/arm_lms_q31.c ****     /* Decrement the loop counter */
 329:Source\FilteringFunctions/arm_lms_q31.c ****     blkCnt--;
 453              		.loc 1 329 0
 454 02e2 A823     		mov	r3, #168
 455 02e4 FB18     		add	r3, r7, r3
 456 02e6 1B68     		ldr	r3, [r3]
 457 02e8 013B     		sub	r3, r3, #1
 458 02ea A822     		mov	r2, #168
 459 02ec BA18     		add	r2, r7, r2
 460 02ee 1360     		str	r3, [r2]
 461              	.L2:
 261:Source\FilteringFunctions/arm_lms_q31.c ****   {
 462              		.loc 1 261 0
 463 02f0 A823     		mov	r3, #168
 464 02f2 FB18     		add	r3, r7, r3
 465 02f4 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 24


 466 02f6 002B     		cmp	r3, #0
 467 02f8 00D0     		beq	.LCB398
 468 02fa C2E6     		b	.L10	@long jump
 469              	.LCB398:
 330:Source\FilteringFunctions/arm_lms_q31.c ****   }
 331:Source\FilteringFunctions/arm_lms_q31.c **** 
 332:Source\FilteringFunctions/arm_lms_q31.c ****   /* Processing is complete. Now copy the last numTaps - 1 samples to the
 333:Source\FilteringFunctions/arm_lms_q31.c ****      start of the state buffer. This prepares the state buffer for the
 334:Source\FilteringFunctions/arm_lms_q31.c ****      next function call. */
 335:Source\FilteringFunctions/arm_lms_q31.c **** 
 336:Source\FilteringFunctions/arm_lms_q31.c ****   /* Points to the start of the pState buffer */
 337:Source\FilteringFunctions/arm_lms_q31.c ****   pStateCurnt = S->pState;
 470              		.loc 1 337 0
 471 02fc FB6E     		ldr	r3, [r7, #108]
 472 02fe 5B68     		ldr	r3, [r3, #4]
 473 0300 B822     		mov	r2, #184
 474 0302 BA18     		add	r2, r7, r2
 475 0304 1360     		str	r3, [r2]
 338:Source\FilteringFunctions/arm_lms_q31.c **** 
 339:Source\FilteringFunctions/arm_lms_q31.c ****   /*  Copy (numTaps - 1u) samples  */
 340:Source\FilteringFunctions/arm_lms_q31.c ****   tapCnt = (numTaps - 1u);
 476              		.loc 1 340 0
 477 0306 9C23     		mov	r3, #156
 478 0308 FB18     		add	r3, r7, r3
 479 030a 1B68     		ldr	r3, [r3]
 480 030c 013B     		sub	r3, r3, #1
 481 030e AC22     		mov	r2, #172
 482 0310 BA18     		add	r2, r7, r2
 483 0312 1360     		str	r3, [r2]
 341:Source\FilteringFunctions/arm_lms_q31.c **** 
 342:Source\FilteringFunctions/arm_lms_q31.c ****   /* Copy the data */
 343:Source\FilteringFunctions/arm_lms_q31.c ****   while (tapCnt > 0u)
 484              		.loc 1 343 0
 485 0314 16E0     		b	.L11
 486              	.L12:
 344:Source\FilteringFunctions/arm_lms_q31.c ****   {
 345:Source\FilteringFunctions/arm_lms_q31.c ****     *pStateCurnt++ = *pState++;
 487              		.loc 1 345 0
 488 0316 B823     		mov	r3, #184
 489 0318 FB18     		add	r3, r7, r3
 490 031a 1B68     		ldr	r3, [r3]
 491 031c 1A1D     		add	r2, r3, #4
 492 031e B821     		mov	r1, #184
 493 0320 7918     		add	r1, r7, r1
 494 0322 0A60     		str	r2, [r1]
 495 0324 BC22     		mov	r2, #188
 496 0326 BA18     		add	r2, r7, r2
 497 0328 1268     		ldr	r2, [r2]
 498 032a 111D     		add	r1, r2, #4
 499 032c BC20     		mov	r0, #188
 500 032e 3818     		add	r0, r7, r0
 501 0330 0160     		str	r1, [r0]
 502 0332 1268     		ldr	r2, [r2]
 503 0334 1A60     		str	r2, [r3]
 346:Source\FilteringFunctions/arm_lms_q31.c **** 
 347:Source\FilteringFunctions/arm_lms_q31.c ****     /* Decrement the loop counter */
 348:Source\FilteringFunctions/arm_lms_q31.c ****     tapCnt--;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 25


 504              		.loc 1 348 0
 505 0336 AC23     		mov	r3, #172
 506 0338 FB18     		add	r3, r7, r3
 507 033a 1B68     		ldr	r3, [r3]
 508 033c 013B     		sub	r3, r3, #1
 509 033e AC22     		mov	r2, #172
 510 0340 BA18     		add	r2, r7, r2
 511 0342 1360     		str	r3, [r2]
 512              	.L11:
 343:Source\FilteringFunctions/arm_lms_q31.c ****   {
 513              		.loc 1 343 0
 514 0344 AC23     		mov	r3, #172
 515 0346 FB18     		add	r3, r7, r3
 516 0348 1B68     		ldr	r3, [r3]
 517 034a 002B     		cmp	r3, #0
 518 034c E3D1     		bne	.L12
 349:Source\FilteringFunctions/arm_lms_q31.c ****   }
 350:Source\FilteringFunctions/arm_lms_q31.c **** 
 351:Source\FilteringFunctions/arm_lms_q31.c **** #endif /*   #if defined (ARM_MATH_DSP) */
 352:Source\FilteringFunctions/arm_lms_q31.c **** 
 353:Source\FilteringFunctions/arm_lms_q31.c **** }
 519              		.loc 1 353 0
 520 034e BD46     		mov	sp, r7
 521 0350 31B0     		add	sp, sp, #196
 522              		@ sp needed
 523 0352 F0BD     		pop	{r4, r5, r6, r7, pc}
 524              	.L15:
 525              		.align	2
 526              	.L14:
 527 0354 FFFFFF3F 		.word	1073741823
 528 0358 FFFFFF7F 		.word	2147483647
 529              		.cfi_endproc
 530              	.LFE82:
 531              		.size	arm_lms_q31, .-arm_lms_q31
 532              		.text
 533              	.Letext0:
 534              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 535              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 536              		.section	.debug_info,"",%progbits
 537              	.Ldebug_info0:
 538 0000 F5020000 		.4byte	0x2f5
 539 0004 0400     		.2byte	0x4
 540 0006 00000000 		.4byte	.Ldebug_abbrev0
 541 000a 04       		.byte	0x4
 542 000b 01       		.uleb128 0x1
 543 000c 63010000 		.4byte	.LASF43
 544 0010 01       		.byte	0x1
 545 0011 21000000 		.4byte	.LASF44
 546 0015 53000000 		.4byte	.LASF45
 547 0019 00000000 		.4byte	.Ldebug_ranges0+0
 548 001d 00000000 		.4byte	0
 549 0021 00000000 		.4byte	.Ldebug_line0
 550 0025 02       		.uleb128 0x2
 551 0026 01       		.byte	0x1
 552 0027 06       		.byte	0x6
 553 0028 A0020000 		.4byte	.LASF0
 554 002c 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 26


 555 002d 01       		.byte	0x1
 556 002e 08       		.byte	0x8
 557 002f B9000000 		.4byte	.LASF1
 558 0033 02       		.uleb128 0x2
 559 0034 02       		.byte	0x2
 560 0035 05       		.byte	0x5
 561 0036 59020000 		.4byte	.LASF2
 562 003a 03       		.uleb128 0x3
 563 003b 99000000 		.4byte	.LASF4
 564 003f 03       		.byte	0x3
 565 0040 2B       		.byte	0x2b
 566 0041 45000000 		.4byte	0x45
 567 0045 02       		.uleb128 0x2
 568 0046 02       		.byte	0x2
 569 0047 07       		.byte	0x7
 570 0048 E0000000 		.4byte	.LASF3
 571 004c 03       		.uleb128 0x3
 572 004d 49000000 		.4byte	.LASF5
 573 0051 03       		.byte	0x3
 574 0052 3F       		.byte	0x3f
 575 0053 57000000 		.4byte	0x57
 576 0057 02       		.uleb128 0x2
 577 0058 04       		.byte	0x4
 578 0059 05       		.byte	0x5
 579 005a 8B020000 		.4byte	.LASF6
 580 005e 03       		.uleb128 0x3
 581 005f 21010000 		.4byte	.LASF7
 582 0063 03       		.byte	0x3
 583 0064 41       		.byte	0x41
 584 0065 69000000 		.4byte	0x69
 585 0069 02       		.uleb128 0x2
 586 006a 04       		.byte	0x4
 587 006b 07       		.byte	0x7
 588 006c CE000000 		.4byte	.LASF8
 589 0070 03       		.uleb128 0x3
 590 0071 09010000 		.4byte	.LASF9
 591 0075 03       		.byte	0x3
 592 0076 59       		.byte	0x59
 593 0077 7B000000 		.4byte	0x7b
 594 007b 02       		.uleb128 0x2
 595 007c 08       		.byte	0x8
 596 007d 05       		.byte	0x5
 597 007e 26020000 		.4byte	.LASF10
 598 0082 02       		.uleb128 0x2
 599 0083 08       		.byte	0x8
 600 0084 07       		.byte	0x7
 601 0085 4C010000 		.4byte	.LASF11
 602 0089 04       		.uleb128 0x4
 603 008a 04       		.byte	0x4
 604 008b 05       		.byte	0x5
 605 008c 696E7400 		.ascii	"int\000"
 606 0090 02       		.uleb128 0x2
 607 0091 04       		.byte	0x4
 608 0092 07       		.byte	0x7
 609 0093 3F010000 		.4byte	.LASF12
 610 0097 03       		.uleb128 0x3
 611 0098 71020000 		.4byte	.LASF13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 27


 612 009c 04       		.byte	0x4
 613 009d 21       		.byte	0x21
 614 009e 3A000000 		.4byte	0x3a
 615 00a2 03       		.uleb128 0x3
 616 00a3 10020000 		.4byte	.LASF14
 617 00a7 04       		.byte	0x4
 618 00a8 2C       		.byte	0x2c
 619 00a9 4C000000 		.4byte	0x4c
 620 00ad 03       		.uleb128 0x3
 621 00ae 82020000 		.4byte	.LASF15
 622 00b2 04       		.byte	0x4
 623 00b3 2D       		.byte	0x2d
 624 00b4 5E000000 		.4byte	0x5e
 625 00b8 03       		.uleb128 0x3
 626 00b9 07000000 		.4byte	.LASF16
 627 00bd 04       		.byte	0x4
 628 00be 38       		.byte	0x38
 629 00bf 70000000 		.4byte	0x70
 630 00c3 02       		.uleb128 0x2
 631 00c4 04       		.byte	0x4
 632 00c5 07       		.byte	0x7
 633 00c6 1D020000 		.4byte	.LASF17
 634 00ca 02       		.uleb128 0x2
 635 00cb 01       		.byte	0x1
 636 00cc 08       		.byte	0x8
 637 00cd 4E020000 		.4byte	.LASF18
 638 00d1 02       		.uleb128 0x2
 639 00d2 08       		.byte	0x8
 640 00d3 04       		.byte	0x4
 641 00d4 1A010000 		.4byte	.LASF19
 642 00d8 02       		.uleb128 0x2
 643 00d9 04       		.byte	0x4
 644 00da 04       		.byte	0x4
 645 00db 1B000000 		.4byte	.LASF20
 646 00df 02       		.uleb128 0x2
 647 00e0 08       		.byte	0x8
 648 00e1 04       		.byte	0x4
 649 00e2 94020000 		.4byte	.LASF21
 650 00e6 05       		.uleb128 0x5
 651 00e7 B3000000 		.4byte	.LASF22
 652 00eb 02       		.byte	0x2
 653 00ec 9B01     		.2byte	0x19b
 654 00ee A2000000 		.4byte	0xa2
 655 00f2 05       		.uleb128 0x5
 656 00f3 F5010000 		.4byte	.LASF23
 657 00f7 02       		.byte	0x2
 658 00f8 A001     		.2byte	0x1a0
 659 00fa B8000000 		.4byte	0xb8
 660 00fe 06       		.uleb128 0x6
 661 00ff 04       		.byte	0x4
 662 0100 E6000000 		.4byte	0xe6
 663 0104 07       		.uleb128 0x7
 664 0105 14       		.byte	0x14
 665 0106 02       		.byte	0x2
 666 0107 2410     		.2byte	0x1024
 667 0109 4E010000 		.4byte	0x14e
 668 010d 08       		.uleb128 0x8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 28


 669 010e 63020000 		.4byte	.LASF24
 670 0112 02       		.byte	0x2
 671 0113 2610     		.2byte	0x1026
 672 0115 97000000 		.4byte	0x97
 673 0119 00       		.byte	0
 674 011a 08       		.uleb128 0x8
 675 011b 0F000000 		.4byte	.LASF25
 676 011f 02       		.byte	0x2
 677 0120 2710     		.2byte	0x1027
 678 0122 FE000000 		.4byte	0xfe
 679 0126 04       		.byte	0x4
 680 0127 08       		.uleb128 0x8
 681 0128 7A020000 		.4byte	.LASF26
 682 012c 02       		.byte	0x2
 683 012d 2810     		.2byte	0x1028
 684 012f FE000000 		.4byte	0xfe
 685 0133 08       		.byte	0x8
 686 0134 09       		.uleb128 0x9
 687 0135 6D7500   		.ascii	"mu\000"
 688 0138 02       		.byte	0x2
 689 0139 2910     		.2byte	0x1029
 690 013b E6000000 		.4byte	0xe6
 691 013f 0C       		.byte	0xc
 692 0140 08       		.uleb128 0x8
 693 0141 FF000000 		.4byte	.LASF27
 694 0145 02       		.byte	0x2
 695 0146 2A10     		.2byte	0x102a
 696 0148 AD000000 		.4byte	0xad
 697 014c 10       		.byte	0x10
 698 014d 00       		.byte	0
 699 014e 05       		.uleb128 0x5
 700 014f FB010000 		.4byte	.LASF28
 701 0153 02       		.byte	0x2
 702 0154 2B10     		.2byte	0x102b
 703 0156 04010000 		.4byte	0x104
 704 015a 0A       		.uleb128 0xa
 705 015b 3E020000 		.4byte	.LASF46
 706 015f 02       		.byte	0x2
 707 0160 FE01     		.2byte	0x1fe
 708 0162 E6000000 		.4byte	0xe6
 709 0166 03       		.byte	0x3
 710 0167 76010000 		.4byte	0x176
 711 016b 0B       		.uleb128 0xb
 712 016c 7800     		.ascii	"x\000"
 713 016e 02       		.byte	0x2
 714 016f FF01     		.2byte	0x1ff
 715 0171 F2000000 		.4byte	0xf2
 716 0175 00       		.byte	0
 717 0176 0C       		.uleb128 0xc
 718 0177 F3000000 		.4byte	.LASF47
 719 017b 01       		.byte	0x1
 720 017c 41       		.byte	0x41
 721 017d 00000000 		.4byte	.LFB82
 722 0181 5C030000 		.4byte	.LFE82-.LFB82
 723 0185 01       		.uleb128 0x1
 724 0186 9C       		.byte	0x9c
 725 0187 ED020000 		.4byte	0x2ed
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 29


 726 018b 0D       		.uleb128 0xd
 727 018c 5300     		.ascii	"S\000"
 728 018e 01       		.byte	0x1
 729 018f 42       		.byte	0x42
 730 0190 ED020000 		.4byte	0x2ed
 731 0194 03       		.uleb128 0x3
 732 0195 91       		.byte	0x91
 733 0196 947F     		.sleb128 -108
 734 0198 0E       		.uleb128 0xe
 735 0199 AE000000 		.4byte	.LASF29
 736 019d 01       		.byte	0x1
 737 019e 43       		.byte	0x43
 738 019f FE000000 		.4byte	0xfe
 739 01a3 03       		.uleb128 0x3
 740 01a4 91       		.byte	0x91
 741 01a5 907F     		.sleb128 -112
 742 01a7 0E       		.uleb128 0xe
 743 01a8 A9000000 		.4byte	.LASF30
 744 01ac 01       		.byte	0x1
 745 01ad 44       		.byte	0x44
 746 01ae FE000000 		.4byte	0xfe
 747 01b2 03       		.uleb128 0x3
 748 01b3 91       		.byte	0x91
 749 01b4 8C7F     		.sleb128 -116
 750 01b6 0E       		.uleb128 0xe
 751 01b7 18020000 		.4byte	.LASF31
 752 01bb 01       		.byte	0x1
 753 01bc 45       		.byte	0x45
 754 01bd FE000000 		.4byte	0xfe
 755 01c1 03       		.uleb128 0x3
 756 01c2 91       		.byte	0x91
 757 01c3 887F     		.sleb128 -120
 758 01c5 0E       		.uleb128 0xe
 759 01c6 A4000000 		.4byte	.LASF32
 760 01ca 01       		.byte	0x1
 761 01cb 46       		.byte	0x46
 762 01cc FE000000 		.4byte	0xfe
 763 01d0 02       		.uleb128 0x2
 764 01d1 91       		.byte	0x91
 765 01d2 00       		.sleb128 0
 766 01d3 0E       		.uleb128 0xe
 767 01d4 34020000 		.4byte	.LASF33
 768 01d8 01       		.byte	0x1
 769 01d9 47       		.byte	0x47
 770 01da AD000000 		.4byte	0xad
 771 01de 02       		.uleb128 0x2
 772 01df 91       		.byte	0x91
 773 01e0 04       		.sleb128 4
 774 01e1 0F       		.uleb128 0xf
 775 01e2 0F000000 		.4byte	.LASF25
 776 01e6 01       		.byte	0x1
 777 01e7 49       		.byte	0x49
 778 01e8 FE000000 		.4byte	0xfe
 779 01ec 02       		.uleb128 0x2
 780 01ed 91       		.byte	0x91
 781 01ee 64       		.sleb128 -28
 782 01ef 0F       		.uleb128 0xf
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 30


 783 01f0 63020000 		.4byte	.LASF24
 784 01f4 01       		.byte	0x1
 785 01f5 4A       		.byte	0x4a
 786 01f6 AD000000 		.4byte	0xad
 787 01fa 02       		.uleb128 0x2
 788 01fb 91       		.byte	0x91
 789 01fc 44       		.sleb128 -60
 790 01fd 0F       		.uleb128 0xf
 791 01fe 7A020000 		.4byte	.LASF26
 792 0202 01       		.byte	0x1
 793 0203 4B       		.byte	0x4b
 794 0204 FE000000 		.4byte	0xfe
 795 0208 02       		.uleb128 0x2
 796 0209 91       		.byte	0x91
 797 020a 40       		.sleb128 -64
 798 020b 0F       		.uleb128 0xf
 799 020c 33010000 		.4byte	.LASF34
 800 0210 01       		.byte	0x1
 801 0211 4C       		.byte	0x4c
 802 0212 FE000000 		.4byte	0xfe
 803 0216 02       		.uleb128 0x2
 804 0217 91       		.byte	0x91
 805 0218 60       		.sleb128 -32
 806 0219 10       		.uleb128 0x10
 807 021a 6D7500   		.ascii	"mu\000"
 808 021d 01       		.byte	0x1
 809 021e 4D       		.byte	0x4d
 810 021f E6000000 		.4byte	0xe6
 811 0223 03       		.uleb128 0x3
 812 0224 91       		.byte	0x91
 813 0225 BC7F     		.sleb128 -68
 814 0227 10       		.uleb128 0x10
 815 0228 707800   		.ascii	"px\000"
 816 022b 01       		.byte	0x1
 817 022c 4E       		.byte	0x4e
 818 022d FE000000 		.4byte	0xfe
 819 0231 02       		.uleb128 0x2
 820 0232 91       		.byte	0x91
 821 0233 5C       		.sleb128 -36
 822 0234 10       		.uleb128 0x10
 823 0235 706200   		.ascii	"pb\000"
 824 0238 01       		.byte	0x1
 825 0239 4F       		.byte	0x4f
 826 023a FE000000 		.4byte	0xfe
 827 023e 02       		.uleb128 0x2
 828 023f 91       		.byte	0x91
 829 0240 58       		.sleb128 -40
 830 0241 0F       		.uleb128 0xf
 831 0242 13010000 		.4byte	.LASF35
 832 0246 01       		.byte	0x1
 833 0247 50       		.byte	0x50
 834 0248 AD000000 		.4byte	0xad
 835 024c 02       		.uleb128 0x2
 836 024d 91       		.byte	0x91
 837 024e 54       		.sleb128 -44
 838 024f 0F       		.uleb128 0xf
 839 0250 C7000000 		.4byte	.LASF36
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 31


 840 0254 01       		.byte	0x1
 841 0255 50       		.byte	0x50
 842 0256 AD000000 		.4byte	0xad
 843 025a 02       		.uleb128 0x2
 844 025b 91       		.byte	0x91
 845 025c 50       		.sleb128 -48
 846 025d 10       		.uleb128 0x10
 847 025e 61636300 		.ascii	"acc\000"
 848 0262 01       		.byte	0x1
 849 0263 51       		.byte	0x51
 850 0264 F2000000 		.4byte	0xf2
 851 0268 02       		.uleb128 0x2
 852 0269 91       		.byte	0x91
 853 026a 48       		.sleb128 -56
 854 026b 10       		.uleb128 0x10
 855 026c 6500     		.ascii	"e\000"
 856 026e 01       		.byte	0x1
 857 026f 52       		.byte	0x52
 858 0270 E6000000 		.4byte	0xe6
 859 0274 03       		.uleb128 0x3
 860 0275 91       		.byte	0x91
 861 0276 B87F     		.sleb128 -72
 862 0278 0F       		.uleb128 0xf
 863 0279 AC020000 		.4byte	.LASF37
 864 027d 01       		.byte	0x1
 865 027e 53       		.byte	0x53
 866 027f E6000000 		.4byte	0xe6
 867 0283 03       		.uleb128 0x3
 868 0284 91       		.byte	0x91
 869 0285 A47F     		.sleb128 -92
 870 0287 0F       		.uleb128 0xf
 871 0288 16000000 		.4byte	.LASF38
 872 028c 01       		.byte	0x1
 873 028d 54       		.byte	0x54
 874 028e E6000000 		.4byte	0xe6
 875 0292 03       		.uleb128 0x3
 876 0293 91       		.byte	0x91
 877 0294 A07F     		.sleb128 -96
 878 0296 0F       		.uleb128 0xf
 879 0297 6B020000 		.4byte	.LASF39
 880 029b 01       		.byte	0x1
 881 029c 55       		.byte	0x55
 882 029d E6000000 		.4byte	0xe6
 883 02a1 03       		.uleb128 0x3
 884 02a2 91       		.byte	0x91
 885 02a3 AC7F     		.sleb128 -84
 886 02a5 0F       		.uleb128 0xf
 887 02a6 53020000 		.4byte	.LASF40
 888 02aa 01       		.byte	0x1
 889 02ab 55       		.byte	0x55
 890 02ac E6000000 		.4byte	0xe6
 891 02b0 03       		.uleb128 0x3
 892 02b1 91       		.byte	0x91
 893 02b2 A87F     		.sleb128 -88
 894 02b4 0F       		.uleb128 0xf
 895 02b5 2C010000 		.4byte	.LASF41
 896 02b9 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 32


 897 02ba 56       		.byte	0x56
 898 02bb AD000000 		.4byte	0xad
 899 02bf 03       		.uleb128 0x3
 900 02c0 91       		.byte	0x91
 901 02c1 B47F     		.sleb128 -76
 902 02c3 0F       		.uleb128 0xf
 903 02c4 00000000 		.4byte	.LASF42
 904 02c8 01       		.byte	0x1
 905 02c9 57       		.byte	0x57
 906 02ca AD000000 		.4byte	0xad
 907 02ce 03       		.uleb128 0x3
 908 02cf 91       		.byte	0x91
 909 02d0 B07F     		.sleb128 -80
 910 02d2 11       		.uleb128 0x11
 911 02d3 5A010000 		.4byte	0x15a
 912 02d7 88020000 		.4byte	.LBB4
 913 02db 2C000000 		.4byte	.LBE4-.LBB4
 914 02df 01       		.byte	0x1
 915 02e0 4101     		.2byte	0x141
 916 02e2 12       		.uleb128 0x12
 917 02e3 6B010000 		.4byte	0x16b
 918 02e7 03       		.uleb128 0x3
 919 02e8 91       		.byte	0x91
 920 02e9 987F     		.sleb128 -104
 921 02eb 00       		.byte	0
 922 02ec 00       		.byte	0
 923 02ed 06       		.uleb128 0x6
 924 02ee 04       		.byte	0x4
 925 02ef F3020000 		.4byte	0x2f3
 926 02f3 13       		.uleb128 0x13
 927 02f4 4E010000 		.4byte	0x14e
 928 02f8 00       		.byte	0
 929              		.section	.debug_abbrev,"",%progbits
 930              	.Ldebug_abbrev0:
 931 0000 01       		.uleb128 0x1
 932 0001 11       		.uleb128 0x11
 933 0002 01       		.byte	0x1
 934 0003 25       		.uleb128 0x25
 935 0004 0E       		.uleb128 0xe
 936 0005 13       		.uleb128 0x13
 937 0006 0B       		.uleb128 0xb
 938 0007 03       		.uleb128 0x3
 939 0008 0E       		.uleb128 0xe
 940 0009 1B       		.uleb128 0x1b
 941 000a 0E       		.uleb128 0xe
 942 000b 55       		.uleb128 0x55
 943 000c 17       		.uleb128 0x17
 944 000d 11       		.uleb128 0x11
 945 000e 01       		.uleb128 0x1
 946 000f 10       		.uleb128 0x10
 947 0010 17       		.uleb128 0x17
 948 0011 00       		.byte	0
 949 0012 00       		.byte	0
 950 0013 02       		.uleb128 0x2
 951 0014 24       		.uleb128 0x24
 952 0015 00       		.byte	0
 953 0016 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 33


 954 0017 0B       		.uleb128 0xb
 955 0018 3E       		.uleb128 0x3e
 956 0019 0B       		.uleb128 0xb
 957 001a 03       		.uleb128 0x3
 958 001b 0E       		.uleb128 0xe
 959 001c 00       		.byte	0
 960 001d 00       		.byte	0
 961 001e 03       		.uleb128 0x3
 962 001f 16       		.uleb128 0x16
 963 0020 00       		.byte	0
 964 0021 03       		.uleb128 0x3
 965 0022 0E       		.uleb128 0xe
 966 0023 3A       		.uleb128 0x3a
 967 0024 0B       		.uleb128 0xb
 968 0025 3B       		.uleb128 0x3b
 969 0026 0B       		.uleb128 0xb
 970 0027 49       		.uleb128 0x49
 971 0028 13       		.uleb128 0x13
 972 0029 00       		.byte	0
 973 002a 00       		.byte	0
 974 002b 04       		.uleb128 0x4
 975 002c 24       		.uleb128 0x24
 976 002d 00       		.byte	0
 977 002e 0B       		.uleb128 0xb
 978 002f 0B       		.uleb128 0xb
 979 0030 3E       		.uleb128 0x3e
 980 0031 0B       		.uleb128 0xb
 981 0032 03       		.uleb128 0x3
 982 0033 08       		.uleb128 0x8
 983 0034 00       		.byte	0
 984 0035 00       		.byte	0
 985 0036 05       		.uleb128 0x5
 986 0037 16       		.uleb128 0x16
 987 0038 00       		.byte	0
 988 0039 03       		.uleb128 0x3
 989 003a 0E       		.uleb128 0xe
 990 003b 3A       		.uleb128 0x3a
 991 003c 0B       		.uleb128 0xb
 992 003d 3B       		.uleb128 0x3b
 993 003e 05       		.uleb128 0x5
 994 003f 49       		.uleb128 0x49
 995 0040 13       		.uleb128 0x13
 996 0041 00       		.byte	0
 997 0042 00       		.byte	0
 998 0043 06       		.uleb128 0x6
 999 0044 0F       		.uleb128 0xf
 1000 0045 00       		.byte	0
 1001 0046 0B       		.uleb128 0xb
 1002 0047 0B       		.uleb128 0xb
 1003 0048 49       		.uleb128 0x49
 1004 0049 13       		.uleb128 0x13
 1005 004a 00       		.byte	0
 1006 004b 00       		.byte	0
 1007 004c 07       		.uleb128 0x7
 1008 004d 13       		.uleb128 0x13
 1009 004e 01       		.byte	0x1
 1010 004f 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 34


 1011 0050 0B       		.uleb128 0xb
 1012 0051 3A       		.uleb128 0x3a
 1013 0052 0B       		.uleb128 0xb
 1014 0053 3B       		.uleb128 0x3b
 1015 0054 05       		.uleb128 0x5
 1016 0055 01       		.uleb128 0x1
 1017 0056 13       		.uleb128 0x13
 1018 0057 00       		.byte	0
 1019 0058 00       		.byte	0
 1020 0059 08       		.uleb128 0x8
 1021 005a 0D       		.uleb128 0xd
 1022 005b 00       		.byte	0
 1023 005c 03       		.uleb128 0x3
 1024 005d 0E       		.uleb128 0xe
 1025 005e 3A       		.uleb128 0x3a
 1026 005f 0B       		.uleb128 0xb
 1027 0060 3B       		.uleb128 0x3b
 1028 0061 05       		.uleb128 0x5
 1029 0062 49       		.uleb128 0x49
 1030 0063 13       		.uleb128 0x13
 1031 0064 38       		.uleb128 0x38
 1032 0065 0B       		.uleb128 0xb
 1033 0066 00       		.byte	0
 1034 0067 00       		.byte	0
 1035 0068 09       		.uleb128 0x9
 1036 0069 0D       		.uleb128 0xd
 1037 006a 00       		.byte	0
 1038 006b 03       		.uleb128 0x3
 1039 006c 08       		.uleb128 0x8
 1040 006d 3A       		.uleb128 0x3a
 1041 006e 0B       		.uleb128 0xb
 1042 006f 3B       		.uleb128 0x3b
 1043 0070 05       		.uleb128 0x5
 1044 0071 49       		.uleb128 0x49
 1045 0072 13       		.uleb128 0x13
 1046 0073 38       		.uleb128 0x38
 1047 0074 0B       		.uleb128 0xb
 1048 0075 00       		.byte	0
 1049 0076 00       		.byte	0
 1050 0077 0A       		.uleb128 0xa
 1051 0078 2E       		.uleb128 0x2e
 1052 0079 01       		.byte	0x1
 1053 007a 03       		.uleb128 0x3
 1054 007b 0E       		.uleb128 0xe
 1055 007c 3A       		.uleb128 0x3a
 1056 007d 0B       		.uleb128 0xb
 1057 007e 3B       		.uleb128 0x3b
 1058 007f 05       		.uleb128 0x5
 1059 0080 27       		.uleb128 0x27
 1060 0081 19       		.uleb128 0x19
 1061 0082 49       		.uleb128 0x49
 1062 0083 13       		.uleb128 0x13
 1063 0084 20       		.uleb128 0x20
 1064 0085 0B       		.uleb128 0xb
 1065 0086 01       		.uleb128 0x1
 1066 0087 13       		.uleb128 0x13
 1067 0088 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 35


 1068 0089 00       		.byte	0
 1069 008a 0B       		.uleb128 0xb
 1070 008b 05       		.uleb128 0x5
 1071 008c 00       		.byte	0
 1072 008d 03       		.uleb128 0x3
 1073 008e 08       		.uleb128 0x8
 1074 008f 3A       		.uleb128 0x3a
 1075 0090 0B       		.uleb128 0xb
 1076 0091 3B       		.uleb128 0x3b
 1077 0092 05       		.uleb128 0x5
 1078 0093 49       		.uleb128 0x49
 1079 0094 13       		.uleb128 0x13
 1080 0095 00       		.byte	0
 1081 0096 00       		.byte	0
 1082 0097 0C       		.uleb128 0xc
 1083 0098 2E       		.uleb128 0x2e
 1084 0099 01       		.byte	0x1
 1085 009a 3F       		.uleb128 0x3f
 1086 009b 19       		.uleb128 0x19
 1087 009c 03       		.uleb128 0x3
 1088 009d 0E       		.uleb128 0xe
 1089 009e 3A       		.uleb128 0x3a
 1090 009f 0B       		.uleb128 0xb
 1091 00a0 3B       		.uleb128 0x3b
 1092 00a1 0B       		.uleb128 0xb
 1093 00a2 27       		.uleb128 0x27
 1094 00a3 19       		.uleb128 0x19
 1095 00a4 11       		.uleb128 0x11
 1096 00a5 01       		.uleb128 0x1
 1097 00a6 12       		.uleb128 0x12
 1098 00a7 06       		.uleb128 0x6
 1099 00a8 40       		.uleb128 0x40
 1100 00a9 18       		.uleb128 0x18
 1101 00aa 9642     		.uleb128 0x2116
 1102 00ac 19       		.uleb128 0x19
 1103 00ad 01       		.uleb128 0x1
 1104 00ae 13       		.uleb128 0x13
 1105 00af 00       		.byte	0
 1106 00b0 00       		.byte	0
 1107 00b1 0D       		.uleb128 0xd
 1108 00b2 05       		.uleb128 0x5
 1109 00b3 00       		.byte	0
 1110 00b4 03       		.uleb128 0x3
 1111 00b5 08       		.uleb128 0x8
 1112 00b6 3A       		.uleb128 0x3a
 1113 00b7 0B       		.uleb128 0xb
 1114 00b8 3B       		.uleb128 0x3b
 1115 00b9 0B       		.uleb128 0xb
 1116 00ba 49       		.uleb128 0x49
 1117 00bb 13       		.uleb128 0x13
 1118 00bc 02       		.uleb128 0x2
 1119 00bd 18       		.uleb128 0x18
 1120 00be 00       		.byte	0
 1121 00bf 00       		.byte	0
 1122 00c0 0E       		.uleb128 0xe
 1123 00c1 05       		.uleb128 0x5
 1124 00c2 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 36


 1125 00c3 03       		.uleb128 0x3
 1126 00c4 0E       		.uleb128 0xe
 1127 00c5 3A       		.uleb128 0x3a
 1128 00c6 0B       		.uleb128 0xb
 1129 00c7 3B       		.uleb128 0x3b
 1130 00c8 0B       		.uleb128 0xb
 1131 00c9 49       		.uleb128 0x49
 1132 00ca 13       		.uleb128 0x13
 1133 00cb 02       		.uleb128 0x2
 1134 00cc 18       		.uleb128 0x18
 1135 00cd 00       		.byte	0
 1136 00ce 00       		.byte	0
 1137 00cf 0F       		.uleb128 0xf
 1138 00d0 34       		.uleb128 0x34
 1139 00d1 00       		.byte	0
 1140 00d2 03       		.uleb128 0x3
 1141 00d3 0E       		.uleb128 0xe
 1142 00d4 3A       		.uleb128 0x3a
 1143 00d5 0B       		.uleb128 0xb
 1144 00d6 3B       		.uleb128 0x3b
 1145 00d7 0B       		.uleb128 0xb
 1146 00d8 49       		.uleb128 0x49
 1147 00d9 13       		.uleb128 0x13
 1148 00da 02       		.uleb128 0x2
 1149 00db 18       		.uleb128 0x18
 1150 00dc 00       		.byte	0
 1151 00dd 00       		.byte	0
 1152 00de 10       		.uleb128 0x10
 1153 00df 34       		.uleb128 0x34
 1154 00e0 00       		.byte	0
 1155 00e1 03       		.uleb128 0x3
 1156 00e2 08       		.uleb128 0x8
 1157 00e3 3A       		.uleb128 0x3a
 1158 00e4 0B       		.uleb128 0xb
 1159 00e5 3B       		.uleb128 0x3b
 1160 00e6 0B       		.uleb128 0xb
 1161 00e7 49       		.uleb128 0x49
 1162 00e8 13       		.uleb128 0x13
 1163 00e9 02       		.uleb128 0x2
 1164 00ea 18       		.uleb128 0x18
 1165 00eb 00       		.byte	0
 1166 00ec 00       		.byte	0
 1167 00ed 11       		.uleb128 0x11
 1168 00ee 1D       		.uleb128 0x1d
 1169 00ef 01       		.byte	0x1
 1170 00f0 31       		.uleb128 0x31
 1171 00f1 13       		.uleb128 0x13
 1172 00f2 11       		.uleb128 0x11
 1173 00f3 01       		.uleb128 0x1
 1174 00f4 12       		.uleb128 0x12
 1175 00f5 06       		.uleb128 0x6
 1176 00f6 58       		.uleb128 0x58
 1177 00f7 0B       		.uleb128 0xb
 1178 00f8 59       		.uleb128 0x59
 1179 00f9 05       		.uleb128 0x5
 1180 00fa 00       		.byte	0
 1181 00fb 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 37


 1182 00fc 12       		.uleb128 0x12
 1183 00fd 05       		.uleb128 0x5
 1184 00fe 00       		.byte	0
 1185 00ff 31       		.uleb128 0x31
 1186 0100 13       		.uleb128 0x13
 1187 0101 02       		.uleb128 0x2
 1188 0102 18       		.uleb128 0x18
 1189 0103 00       		.byte	0
 1190 0104 00       		.byte	0
 1191 0105 13       		.uleb128 0x13
 1192 0106 26       		.uleb128 0x26
 1193 0107 00       		.byte	0
 1194 0108 49       		.uleb128 0x49
 1195 0109 13       		.uleb128 0x13
 1196 010a 00       		.byte	0
 1197 010b 00       		.byte	0
 1198 010c 00       		.byte	0
 1199              		.section	.debug_aranges,"",%progbits
 1200 0000 1C000000 		.4byte	0x1c
 1201 0004 0200     		.2byte	0x2
 1202 0006 00000000 		.4byte	.Ldebug_info0
 1203 000a 04       		.byte	0x4
 1204 000b 00       		.byte	0
 1205 000c 0000     		.2byte	0
 1206 000e 0000     		.2byte	0
 1207 0010 00000000 		.4byte	.LFB82
 1208 0014 5C030000 		.4byte	.LFE82-.LFB82
 1209 0018 00000000 		.4byte	0
 1210 001c 00000000 		.4byte	0
 1211              		.section	.debug_ranges,"",%progbits
 1212              	.Ldebug_ranges0:
 1213 0000 00000000 		.4byte	.LFB82
 1214 0004 5C030000 		.4byte	.LFE82
 1215 0008 00000000 		.4byte	0
 1216 000c 00000000 		.4byte	0
 1217              		.section	.debug_line,"",%progbits
 1218              	.Ldebug_line0:
 1219 0000 B6010000 		.section	.debug_str,"MS",%progbits,1
 1219      02004E01 
 1219      00000201 
 1219      FB0E0D00 
 1219      01010101 
 1220              	.LASF42:
 1221 0000 6C536869 		.ascii	"lShift\000"
 1221      667400
 1222              	.LASF16:
 1223 0007 696E7436 		.ascii	"int64_t\000"
 1223      345F7400 
 1224              	.LASF25:
 1225 000f 70537461 		.ascii	"pState\000"
 1225      746500
 1226              	.LASF38:
 1227 0016 636F6566 		.ascii	"coef\000"
 1227      00
 1228              	.LASF20:
 1229 001b 666C6F61 		.ascii	"float\000"
 1229      7400
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 38


 1230              	.LASF44:
 1231 0021 536F7572 		.ascii	"Source\\FilteringFunctions\\arm_lms_q31.c\000"
 1231      63655C46 
 1231      696C7465 
 1231      72696E67 
 1231      46756E63 
 1232              	.LASF5:
 1233 0049 5F5F696E 		.ascii	"__int32_t\000"
 1233      7433325F 
 1233      7400
 1234              	.LASF45:
 1235 0053 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 1235      73657273 
 1235      5C666E65 
 1235      7665735C 
 1235      446F6375 
 1236 0080 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 1236      655F7370 
 1236      6565645F 
 1236      73656E73 
 1236      6F722E63 
 1237              	.LASF4:
 1238 0099 5F5F7569 		.ascii	"__uint16_t\000"
 1238      6E743136 
 1238      5F7400
 1239              	.LASF32:
 1240 00a4 70457272 		.ascii	"pErr\000"
 1240      00
 1241              	.LASF30:
 1242 00a9 70526566 		.ascii	"pRef\000"
 1242      00
 1243              	.LASF29:
 1244 00ae 70537263 		.ascii	"pSrc\000"
 1244      00
 1245              	.LASF22:
 1246 00b3 7133315F 		.ascii	"q31_t\000"
 1246      7400
 1247              	.LASF1:
 1248 00b9 756E7369 		.ascii	"unsigned char\000"
 1248      676E6564 
 1248      20636861 
 1248      7200
 1249              	.LASF36:
 1250 00c7 626C6B43 		.ascii	"blkCnt\000"
 1250      6E7400
 1251              	.LASF8:
 1252 00ce 6C6F6E67 		.ascii	"long unsigned int\000"
 1252      20756E73 
 1252      69676E65 
 1252      6420696E 
 1252      7400
 1253              	.LASF3:
 1254 00e0 73686F72 		.ascii	"short unsigned int\000"
 1254      7420756E 
 1254      7369676E 
 1254      65642069 
 1254      6E7400
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 39


 1255              	.LASF47:
 1256 00f3 61726D5F 		.ascii	"arm_lms_q31\000"
 1256      6C6D735F 
 1256      71333100 
 1257              	.LASF27:
 1258 00ff 706F7374 		.ascii	"postShift\000"
 1258      53686966 
 1258      7400
 1259              	.LASF9:
 1260 0109 5F5F696E 		.ascii	"__int64_t\000"
 1260      7436345F 
 1260      7400
 1261              	.LASF35:
 1262 0113 74617043 		.ascii	"tapCnt\000"
 1262      6E7400
 1263              	.LASF19:
 1264 011a 646F7562 		.ascii	"double\000"
 1264      6C6500
 1265              	.LASF7:
 1266 0121 5F5F7569 		.ascii	"__uint32_t\000"
 1266      6E743332 
 1266      5F7400
 1267              	.LASF41:
 1268 012c 75536869 		.ascii	"uShift\000"
 1268      667400
 1269              	.LASF34:
 1270 0133 70537461 		.ascii	"pStateCurnt\000"
 1270      74654375 
 1270      726E7400 
 1271              	.LASF12:
 1272 013f 756E7369 		.ascii	"unsigned int\000"
 1272      676E6564 
 1272      20696E74 
 1272      00
 1273              	.LASF11:
 1274 014c 6C6F6E67 		.ascii	"long long unsigned int\000"
 1274      206C6F6E 
 1274      6720756E 
 1274      7369676E 
 1274      65642069 
 1275              	.LASF43:
 1276 0163 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1276      4320342E 
 1276      392E3320 
 1276      32303135 
 1276      30333033 
 1277 0196 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 1277      20726576 
 1277      6973696F 
 1277      6E203232 
 1277      31323230 
 1278 01c9 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 1278      30202D66 
 1278      66756E63 
 1278      74696F6E 
 1278      2D736563 
 1279              	.LASF23:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 40


 1280 01f5 7136335F 		.ascii	"q63_t\000"
 1280      7400
 1281              	.LASF28:
 1282 01fb 61726D5F 		.ascii	"arm_lms_instance_q31\000"
 1282      6C6D735F 
 1282      696E7374 
 1282      616E6365 
 1282      5F713331 
 1283              	.LASF14:
 1284 0210 696E7433 		.ascii	"int32_t\000"
 1284      325F7400 
 1285              	.LASF31:
 1286 0218 704F7574 		.ascii	"pOut\000"
 1286      00
 1287              	.LASF17:
 1288 021d 73697A65 		.ascii	"sizetype\000"
 1288      74797065 
 1288      00
 1289              	.LASF10:
 1290 0226 6C6F6E67 		.ascii	"long long int\000"
 1290      206C6F6E 
 1290      6720696E 
 1290      7400
 1291              	.LASF33:
 1292 0234 626C6F63 		.ascii	"blockSize\000"
 1292      6B53697A 
 1292      6500
 1293              	.LASF46:
 1294 023e 636C6970 		.ascii	"clip_q63_to_q31\000"
 1294      5F713633 
 1294      5F746F5F 
 1294      71333100 
 1295              	.LASF18:
 1296 024e 63686172 		.ascii	"char\000"
 1296      00
 1297              	.LASF40:
 1298 0253 6163635F 		.ascii	"acc_h\000"
 1298      6800
 1299              	.LASF2:
 1300 0259 73686F72 		.ascii	"short int\000"
 1300      7420696E 
 1300      7400
 1301              	.LASF24:
 1302 0263 6E756D54 		.ascii	"numTaps\000"
 1302      61707300 
 1303              	.LASF39:
 1304 026b 6163635F 		.ascii	"acc_l\000"
 1304      6C00
 1305              	.LASF13:
 1306 0271 75696E74 		.ascii	"uint16_t\000"
 1306      31365F74 
 1306      00
 1307              	.LASF26:
 1308 027a 70436F65 		.ascii	"pCoeffs\000"
 1308      66667300 
 1309              	.LASF15:
 1310 0282 75696E74 		.ascii	"uint32_t\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cctRC0Ib.s 			page 41


 1310      33325F74 
 1310      00
 1311              	.LASF6:
 1312 028b 6C6F6E67 		.ascii	"long int\000"
 1312      20696E74 
 1312      00
 1313              	.LASF21:
 1314 0294 6C6F6E67 		.ascii	"long double\000"
 1314      20646F75 
 1314      626C6500 
 1315              	.LASF0:
 1316 02a0 7369676E 		.ascii	"signed char\000"
 1316      65642063 
 1316      68617200 
 1317              	.LASF37:
 1318 02ac 616C7068 		.ascii	"alpha\000"
 1318      6100
 1319              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
