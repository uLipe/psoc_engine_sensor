ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_conv_fast_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_conv_fast_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_conv_fast_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_conv_fast_q15, %function
  23              	arm_conv_fast_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\FilteringFunctions\\arm_conv_fast_q15.c"
   1:Source\FilteringFunctions/arm_conv_fast_q15.c **** /* ----------------------------------------------------------------------
   2:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * Title:        arm_conv_fast_q15.c
   4:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * Description:  Fast Q15 Convolution
   5:Source\FilteringFunctions/arm_conv_fast_q15.c ****  *
   6:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * $Date:        27. January 2017
   7:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * $Revision:    V.1.5.1
   8:Source\FilteringFunctions/arm_conv_fast_q15.c ****  *
   9:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\FilteringFunctions/arm_conv_fast_q15.c **** /*
  12:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\FilteringFunctions/arm_conv_fast_q15.c ****  *
  14:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\FilteringFunctions/arm_conv_fast_q15.c ****  *
  16:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * not use this file except in compliance with the License.
  18:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * You may obtain a copy of the License at
  19:Source\FilteringFunctions/arm_conv_fast_q15.c ****  *
  20:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\FilteringFunctions/arm_conv_fast_q15.c ****  *
  22:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * limitations under the License.
  27:Source\FilteringFunctions/arm_conv_fast_q15.c ****  */
  28:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
  29:Source\FilteringFunctions/arm_conv_fast_q15.c **** #include "arm_math.h"
  30:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
  31:Source\FilteringFunctions/arm_conv_fast_q15.c **** /**
  32:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * @ingroup groupFilters
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 2


  33:Source\FilteringFunctions/arm_conv_fast_q15.c ****  */
  34:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
  35:Source\FilteringFunctions/arm_conv_fast_q15.c **** /**
  36:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * @addtogroup Conv
  37:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * @{
  38:Source\FilteringFunctions/arm_conv_fast_q15.c ****  */
  39:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
  40:Source\FilteringFunctions/arm_conv_fast_q15.c **** /**
  41:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * @brief Convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4.
  42:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * @param[in] *pSrcA points to the first input sequence.
  43:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * @param[in] srcALen length of the first input sequence.
  44:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * @param[in] *pSrcB points to the second input sequence.
  45:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * @param[in] srcBLen length of the second input sequence.
  46:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * @param[out] *pDst points to the location where the output result is written.  Length srcALen+src
  47:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * @return none.
  48:Source\FilteringFunctions/arm_conv_fast_q15.c ****  *
  49:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:Source\FilteringFunctions/arm_conv_fast_q15.c ****  *
  51:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * \par
  52:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * This fast version uses a 32-bit accumulator with 2.30 format.
  53:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * The accumulator maintains full precision of the intermediate multiplication results
  54:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * but provides only a single guard bit. There is no saturation on intermediate additions.
  55:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * Thus, if the accumulator overflows it wraps around and distorts the result.
  56:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * The input signals should be scaled down to avoid intermediate overflows.
  57:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * Scale down the inputs by log2(min(srcALen, srcBLen)) (log2 is read as log to the base 2) times t
  58:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * as maximum of min(srcALen, srcBLen) number of additions are carried internally.
  59:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * The 2.30 accumulator is right shifted by 15 bits and then saturated to 1.15 format to yield the 
  60:Source\FilteringFunctions/arm_conv_fast_q15.c ****  *
  61:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * \par
  62:Source\FilteringFunctions/arm_conv_fast_q15.c ****  * See <code>arm_conv_q15()</code> for a slower implementation of this function which uses 64-bit a
  63:Source\FilteringFunctions/arm_conv_fast_q15.c ****  */
  64:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
  65:Source\FilteringFunctions/arm_conv_fast_q15.c **** void arm_conv_fast_q15(
  66:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t * pSrcA,
  67:Source\FilteringFunctions/arm_conv_fast_q15.c ****   uint32_t srcALen,
  68:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t * pSrcB,
  69:Source\FilteringFunctions/arm_conv_fast_q15.c ****   uint32_t srcBLen,
  70:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t * pDst)
  71:Source\FilteringFunctions/arm_conv_fast_q15.c **** {
  26              		.loc 1 71 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 FCB0     		sub	sp, sp, #496
  33              		.cfi_def_cfa_offset 504
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 B960     		str	r1, [r7, #8]
  38 000a 7A60     		str	r2, [r7, #4]
  39 000c 3B60     		str	r3, [r7]
  72:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifndef UNALIGNED_SUPPORT_DISABLE
  73:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t *pIn1;                                   /* inputA pointer */
  74:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t *pIn2;                                   /* inputB pointer */
  75:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t *pOut = pDst;                            /* output pointer */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 3


  40              		.loc 1 75 0
  41 000e FC23     		mov	r3, #252
  42 0010 5B00     		lsl	r3, r3, #1
  43 0012 FB18     		add	r3, r7, r3
  44 0014 1B68     		ldr	r3, [r3]
  45 0016 BB61     		str	r3, [r7, #24]
  76:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q31_t sum, acc0, acc1, acc2, acc3;             /* Accumulator */
  77:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t *px;                                     /* Intermediate inputA pointer  */
  78:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t *py;                                     /* Intermediate inputB pointer  */
  79:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t *pSrc1, *pSrc2;                          /* Intermediate pointers */
  80:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q31_t x0, x1, x2, x3, c0;                      /* Temporary variables to hold state and coefficie
  81:Source\FilteringFunctions/arm_conv_fast_q15.c ****   uint32_t blockSize1, blockSize2, blockSize3, j, k, count, blkCnt;     /* loop counter */
  82:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
  83:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The algorithm implementation is based on the lengths of the inputs. */
  84:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* srcB is always made to slide across srcA. */
  85:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* So srcBLen is always considered as shorter or equal to srcALen */
  86:Source\FilteringFunctions/arm_conv_fast_q15.c ****   if (srcALen >= srcBLen)
  46              		.loc 1 86 0
  47 0018 BA68     		ldr	r2, [r7, #8]
  48 001a 3B68     		ldr	r3, [r7]
  49 001c 9A42     		cmp	r2, r3
  50 001e 0AD3     		bcc	.L2
  87:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
  88:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Initialization of inputA pointer */
  89:Source\FilteringFunctions/arm_conv_fast_q15.c ****     pIn1 = pSrcA;
  51              		.loc 1 89 0
  52 0020 FB68     		ldr	r3, [r7, #12]
  53 0022 F622     		mov	r2, #246
  54 0024 5200     		lsl	r2, r2, #1
  55 0026 BA18     		add	r2, r7, r2
  56 0028 1360     		str	r3, [r2]
  90:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
  91:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Initialization of inputB pointer */
  92:Source\FilteringFunctions/arm_conv_fast_q15.c ****     pIn2 = pSrcB;
  57              		.loc 1 92 0
  58 002a 7B68     		ldr	r3, [r7, #4]
  59 002c F422     		mov	r2, #244
  60 002e 5200     		lsl	r2, r2, #1
  61 0030 BA18     		add	r2, r7, r2
  62 0032 1360     		str	r3, [r2]
  63 0034 15E0     		b	.L3
  64              	.L2:
  93:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
  94:Source\FilteringFunctions/arm_conv_fast_q15.c ****   else
  95:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
  96:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Initialization of inputA pointer */
  97:Source\FilteringFunctions/arm_conv_fast_q15.c ****     pIn1 = pSrcB;
  65              		.loc 1 97 0
  66 0036 7B68     		ldr	r3, [r7, #4]
  67 0038 F622     		mov	r2, #246
  68 003a 5200     		lsl	r2, r2, #1
  69 003c BA18     		add	r2, r7, r2
  70 003e 1360     		str	r3, [r2]
  98:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
  99:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Initialization of inputB pointer */
 100:Source\FilteringFunctions/arm_conv_fast_q15.c ****     pIn2 = pSrcA;
  71              		.loc 1 100 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 4


  72 0040 FB68     		ldr	r3, [r7, #12]
  73 0042 F422     		mov	r2, #244
  74 0044 5200     		lsl	r2, r2, #1
  75 0046 BA18     		add	r2, r7, r2
  76 0048 1360     		str	r3, [r2]
 101:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 102:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* srcBLen is always considered as shorter or equal to srcALen */
 103:Source\FilteringFunctions/arm_conv_fast_q15.c ****     j = srcBLen;
  77              		.loc 1 103 0
  78 004a 3B68     		ldr	r3, [r7]
  79 004c DE22     		mov	r2, #222
  80 004e 5200     		lsl	r2, r2, #1
  81 0050 BA18     		add	r2, r7, r2
  82 0052 1360     		str	r3, [r2]
 104:Source\FilteringFunctions/arm_conv_fast_q15.c ****     srcBLen = srcALen;
  83              		.loc 1 104 0
  84 0054 BB68     		ldr	r3, [r7, #8]
  85 0056 3B60     		str	r3, [r7]
 105:Source\FilteringFunctions/arm_conv_fast_q15.c ****     srcALen = j;
  86              		.loc 1 105 0
  87 0058 DE23     		mov	r3, #222
  88 005a 5B00     		lsl	r3, r3, #1
  89 005c FB18     		add	r3, r7, r3
  90 005e 1B68     		ldr	r3, [r3]
  91 0060 BB60     		str	r3, [r7, #8]
  92              	.L3:
 106:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
 107:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 108:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
 109:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The function is internally
 110:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * divided into three stages according to the number of multiplications that has to be
 111:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * taken place between inputA samples and inputB samples. In the first stage of the
 112:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * algorithm, the multiplications increase by one for every iteration.
 113:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * In the second stage of the algorithm, srcBLen number of multiplications are done.
 114:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * In the third stage of the algorithm, the multiplications decrease by one
 115:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * for every iteration. */
 116:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 117:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The algorithm is implemented in three stages.
 118:Source\FilteringFunctions/arm_conv_fast_q15.c ****      The loop counters of each stage is initiated here. */
 119:Source\FilteringFunctions/arm_conv_fast_q15.c ****   blockSize1 = srcBLen - 1u;
  93              		.loc 1 119 0
  94 0062 3B68     		ldr	r3, [r7]
  95 0064 013B     		sub	r3, r3, #1
  96 0066 E222     		mov	r2, #226
  97 0068 5200     		lsl	r2, r2, #1
  98 006a BA18     		add	r2, r7, r2
  99 006c 1360     		str	r3, [r2]
 120:Source\FilteringFunctions/arm_conv_fast_q15.c ****   blockSize2 = srcALen - (srcBLen - 1u);
 100              		.loc 1 120 0
 101 006e BA68     		ldr	r2, [r7, #8]
 102 0070 3B68     		ldr	r3, [r7]
 103 0072 D31A     		sub	r3, r2, r3
 104 0074 0133     		add	r3, r3, #1
 105 0076 D622     		mov	r2, #214
 106 0078 5200     		lsl	r2, r2, #1
 107 007a BA18     		add	r2, r7, r2
 108 007c 1360     		str	r3, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 5


 121:Source\FilteringFunctions/arm_conv_fast_q15.c ****   blockSize3 = blockSize1;
 109              		.loc 1 121 0
 110 007e E223     		mov	r3, #226
 111 0080 5B00     		lsl	r3, r3, #1
 112 0082 FB18     		add	r3, r7, r3
 113 0084 1B68     		ldr	r3, [r3]
 114 0086 E022     		mov	r2, #224
 115 0088 5200     		lsl	r2, r2, #1
 116 008a BA18     		add	r2, r7, r2
 117 008c 1360     		str	r3, [r2]
 122:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 123:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* --------------------------
 124:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * Initializations of stage1
 125:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * -------------------------*/
 126:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 127:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* sum = x[0] * y[0]
 128:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum = x[0] * y[1] + x[1] * y[0]
 129:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * ....
 130:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]
 131:Source\FilteringFunctions/arm_conv_fast_q15.c ****    */
 132:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 133:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* In this stage the MAC operations are increased by 1 for every iteration.
 134:Source\FilteringFunctions/arm_conv_fast_q15.c ****      The count variable holds the number of MAC operations performed */
 135:Source\FilteringFunctions/arm_conv_fast_q15.c ****   count = 1u;
 118              		.loc 1 135 0
 119 008e 0123     		mov	r3, #1
 120 0090 DA22     		mov	r2, #218
 121 0092 5200     		lsl	r2, r2, #1
 122 0094 BA18     		add	r2, r7, r2
 123 0096 1360     		str	r3, [r2]
 136:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 137:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Working pointer of inputA */
 138:Source\FilteringFunctions/arm_conv_fast_q15.c ****   px = pIn1;
 124              		.loc 1 138 0
 125 0098 F623     		mov	r3, #246
 126 009a 5B00     		lsl	r3, r3, #1
 127 009c FB18     		add	r3, r7, r3
 128 009e 1B68     		ldr	r3, [r3]
 129 00a0 7B61     		str	r3, [r7, #20]
 139:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 140:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Working pointer of inputB */
 141:Source\FilteringFunctions/arm_conv_fast_q15.c ****   py = pIn2;
 130              		.loc 1 141 0
 131 00a2 F423     		mov	r3, #244
 132 00a4 5B00     		lsl	r3, r3, #1
 133 00a6 FB18     		add	r3, r7, r3
 134 00a8 1B68     		ldr	r3, [r3]
 135 00aa 3B61     		str	r3, [r7, #16]
 142:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 143:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 144:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* ------------------------
 145:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * Stage1 process
 146:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * ----------------------*/
 147:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 148:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* For loop unrolling by 4, this stage is divided into two. */
 149:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* First part of this stage computes the MAC operations less than 4 */
 150:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Second part of this stage computes the MAC operations greater than or equal to 4 */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 6


 151:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 152:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The first part of the stage starts here */
 153:Source\FilteringFunctions/arm_conv_fast_q15.c ****   while ((count < 4u) && (blockSize1 > 0u))
 136              		.loc 1 153 0
 137 00ac 84E0     		b	.L4
 138              	.L9:
 154:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 155:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Accumulator is made zero for every iteration */
 156:Source\FilteringFunctions/arm_conv_fast_q15.c ****     sum = 0;
 139              		.loc 1 156 0
 140 00ae 0023     		mov	r3, #0
 141 00b0 F222     		mov	r2, #242
 142 00b2 5200     		lsl	r2, r2, #1
 143 00b4 BA18     		add	r2, r7, r2
 144 00b6 1360     		str	r3, [r2]
 157:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 158:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Loop over number of MAC operations between
 159:Source\FilteringFunctions/arm_conv_fast_q15.c ****      * inputA samples and inputB samples */
 160:Source\FilteringFunctions/arm_conv_fast_q15.c ****     k = count;
 145              		.loc 1 160 0
 146 00b8 DA23     		mov	r3, #218
 147 00ba 5B00     		lsl	r3, r3, #1
 148 00bc FB18     		add	r3, r7, r3
 149 00be 1B68     		ldr	r3, [r3]
 150 00c0 DC22     		mov	r2, #220
 151 00c2 5200     		lsl	r2, r2, #1
 152 00c4 BA18     		add	r2, r7, r2
 153 00c6 1360     		str	r3, [r2]
 161:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 162:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (k > 0u)
 154              		.loc 1 162 0
 155 00c8 44E0     		b	.L5
 156              	.L7:
 163:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 164:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Perform the multiply-accumulates */
 165:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum = __SMLAD(*px++, *py--, sum);
 157              		.loc 1 165 0
 158 00ca 7B69     		ldr	r3, [r7, #20]
 159 00cc 9A1C     		add	r2, r3, #2
 160 00ce 7A61     		str	r2, [r7, #20]
 161 00d0 1B88     		ldrh	r3, [r3]
 162 00d2 19B2     		sxth	r1, r3
 163 00d4 3B69     		ldr	r3, [r7, #16]
 164 00d6 9A1E     		sub	r2, r3, #2
 165 00d8 3A61     		str	r2, [r7, #16]
 166 00da 1B88     		ldrh	r3, [r3]
 167 00dc 1AB2     		sxth	r2, r3
 168 00de F223     		mov	r3, #242
 169 00e0 5B00     		lsl	r3, r3, #1
 170 00e2 FB18     		add	r3, r7, r3
 171 00e4 1B68     		ldr	r3, [r3]
 172 00e6 CC20     		mov	r0, #204
 173 00e8 4000     		lsl	r0, r0, #1
 174 00ea 3818     		add	r0, r7, r0
 175 00ec 0160     		str	r1, [r0]
 176 00ee CA21     		mov	r1, #202
 177 00f0 4900     		lsl	r1, r1, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 7


 178 00f2 7918     		add	r1, r7, r1
 179 00f4 0A60     		str	r2, [r1]
 180 00f6 C822     		mov	r2, #200
 181 00f8 5200     		lsl	r2, r2, #1
 182 00fa BA18     		add	r2, r7, r2
 183 00fc 1360     		str	r3, [r2]
 184              	.LBB66:
 185              	.LBB67:
 186              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 8


  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 9


 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 10


 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 11


 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 12


 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 13


 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 14


 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 15


 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 16


 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 17


 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 18


 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 19


 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 724:.\Include/arm_math.h ****   }
 725:.\Include/arm_math.h **** #endif /* end of ARM_MATH_CM0_FAMILY */
 726:.\Include/arm_math.h **** 
 727:.\Include/arm_math.h **** 
 728:.\Include/arm_math.h ****   /*
 729:.\Include/arm_math.h ****    * @brief C custom defined intrinsic function for M3 and M0 processors
 730:.\Include/arm_math.h ****    */
 731:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 732:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 20


 733:.\Include/arm_math.h **** 
 734:.\Include/arm_math.h ****   /*
 735:.\Include/arm_math.h ****    * @brief C custom defined QADD8 for M3 and M0 processors
 736:.\Include/arm_math.h ****    */
 737:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD8(
 738:.\Include/arm_math.h ****   uint32_t x,
 739:.\Include/arm_math.h ****   uint32_t y)
 740:.\Include/arm_math.h ****   {
 741:.\Include/arm_math.h ****     q31_t r, s, t, u;
 742:.\Include/arm_math.h **** 
 743:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) + (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 744:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) + (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 745:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) + (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 746:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) + (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 747:.\Include/arm_math.h **** 
 748:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 749:.\Include/arm_math.h ****   }
 750:.\Include/arm_math.h **** 
 751:.\Include/arm_math.h **** 
 752:.\Include/arm_math.h ****   /*
 753:.\Include/arm_math.h ****    * @brief C custom defined QSUB8 for M3 and M0 processors
 754:.\Include/arm_math.h ****    */
 755:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB8(
 756:.\Include/arm_math.h ****   uint32_t x,
 757:.\Include/arm_math.h ****   uint32_t y)
 758:.\Include/arm_math.h ****   {
 759:.\Include/arm_math.h ****     q31_t r, s, t, u;
 760:.\Include/arm_math.h **** 
 761:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) - (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 762:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) - (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 763:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) - (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 764:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) - (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 765:.\Include/arm_math.h **** 
 766:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 767:.\Include/arm_math.h ****   }
 768:.\Include/arm_math.h **** 
 769:.\Include/arm_math.h **** 
 770:.\Include/arm_math.h ****   /*
 771:.\Include/arm_math.h ****    * @brief C custom defined QADD16 for M3 and M0 processors
 772:.\Include/arm_math.h ****    */
 773:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD16(
 774:.\Include/arm_math.h ****   uint32_t x,
 775:.\Include/arm_math.h ****   uint32_t y)
 776:.\Include/arm_math.h ****   {
 777:.\Include/arm_math.h **** /*  q31_t r,     s;  without initialisation 'arm_offset_q15 test' fails  but 'intrinsic' tests pass
 778:.\Include/arm_math.h ****     q31_t r = 0, s = 0;
 779:.\Include/arm_math.h **** 
 780:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 781:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 782:.\Include/arm_math.h **** 
 783:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 784:.\Include/arm_math.h ****   }
 785:.\Include/arm_math.h **** 
 786:.\Include/arm_math.h **** 
 787:.\Include/arm_math.h ****   /*
 788:.\Include/arm_math.h ****    * @brief C custom defined SHADD16 for M3 and M0 processors
 789:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 21


 790:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHADD16(
 791:.\Include/arm_math.h ****   uint32_t x,
 792:.\Include/arm_math.h ****   uint32_t y)
 793:.\Include/arm_math.h ****   {
 794:.\Include/arm_math.h ****     q31_t r, s;
 795:.\Include/arm_math.h **** 
 796:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 797:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 798:.\Include/arm_math.h **** 
 799:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 800:.\Include/arm_math.h ****   }
 801:.\Include/arm_math.h **** 
 802:.\Include/arm_math.h **** 
 803:.\Include/arm_math.h ****   /*
 804:.\Include/arm_math.h ****    * @brief C custom defined QSUB16 for M3 and M0 processors
 805:.\Include/arm_math.h ****    */
 806:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB16(
 807:.\Include/arm_math.h ****   uint32_t x,
 808:.\Include/arm_math.h ****   uint32_t y)
 809:.\Include/arm_math.h ****   {
 810:.\Include/arm_math.h ****     q31_t r, s;
 811:.\Include/arm_math.h **** 
 812:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 813:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 814:.\Include/arm_math.h **** 
 815:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 816:.\Include/arm_math.h ****   }
 817:.\Include/arm_math.h **** 
 818:.\Include/arm_math.h **** 
 819:.\Include/arm_math.h ****   /*
 820:.\Include/arm_math.h ****    * @brief C custom defined SHSUB16 for M3 and M0 processors
 821:.\Include/arm_math.h ****    */
 822:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSUB16(
 823:.\Include/arm_math.h ****   uint32_t x,
 824:.\Include/arm_math.h ****   uint32_t y)
 825:.\Include/arm_math.h ****   {
 826:.\Include/arm_math.h ****     q31_t r, s;
 827:.\Include/arm_math.h **** 
 828:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 829:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 830:.\Include/arm_math.h **** 
 831:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 832:.\Include/arm_math.h ****   }
 833:.\Include/arm_math.h **** 
 834:.\Include/arm_math.h **** 
 835:.\Include/arm_math.h ****   /*
 836:.\Include/arm_math.h ****    * @brief C custom defined QASX for M3 and M0 processors
 837:.\Include/arm_math.h ****    */
 838:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QASX(
 839:.\Include/arm_math.h ****   uint32_t x,
 840:.\Include/arm_math.h ****   uint32_t y)
 841:.\Include/arm_math.h ****   {
 842:.\Include/arm_math.h ****     q31_t r, s;
 843:.\Include/arm_math.h **** 
 844:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 845:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 846:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 22


 847:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 848:.\Include/arm_math.h ****   }
 849:.\Include/arm_math.h **** 
 850:.\Include/arm_math.h **** 
 851:.\Include/arm_math.h ****   /*
 852:.\Include/arm_math.h ****    * @brief C custom defined SHASX for M3 and M0 processors
 853:.\Include/arm_math.h ****    */
 854:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHASX(
 855:.\Include/arm_math.h ****   uint32_t x,
 856:.\Include/arm_math.h ****   uint32_t y)
 857:.\Include/arm_math.h ****   {
 858:.\Include/arm_math.h ****     q31_t r, s;
 859:.\Include/arm_math.h **** 
 860:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 861:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 862:.\Include/arm_math.h **** 
 863:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 864:.\Include/arm_math.h ****   }
 865:.\Include/arm_math.h **** 
 866:.\Include/arm_math.h **** 
 867:.\Include/arm_math.h ****   /*
 868:.\Include/arm_math.h ****    * @brief C custom defined QSAX for M3 and M0 processors
 869:.\Include/arm_math.h ****    */
 870:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSAX(
 871:.\Include/arm_math.h ****   uint32_t x,
 872:.\Include/arm_math.h ****   uint32_t y)
 873:.\Include/arm_math.h ****   {
 874:.\Include/arm_math.h ****     q31_t r, s;
 875:.\Include/arm_math.h **** 
 876:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 877:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 878:.\Include/arm_math.h **** 
 879:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 880:.\Include/arm_math.h ****   }
 881:.\Include/arm_math.h **** 
 882:.\Include/arm_math.h **** 
 883:.\Include/arm_math.h ****   /*
 884:.\Include/arm_math.h ****    * @brief C custom defined SHSAX for M3 and M0 processors
 885:.\Include/arm_math.h ****    */
 886:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSAX(
 887:.\Include/arm_math.h ****   uint32_t x,
 888:.\Include/arm_math.h ****   uint32_t y)
 889:.\Include/arm_math.h ****   {
 890:.\Include/arm_math.h ****     q31_t r, s;
 891:.\Include/arm_math.h **** 
 892:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 893:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 894:.\Include/arm_math.h **** 
 895:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 896:.\Include/arm_math.h ****   }
 897:.\Include/arm_math.h **** 
 898:.\Include/arm_math.h **** 
 899:.\Include/arm_math.h ****   /*
 900:.\Include/arm_math.h ****    * @brief C custom defined SMUSDX for M3 and M0 processors
 901:.\Include/arm_math.h ****    */
 902:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUSDX(
 903:.\Include/arm_math.h ****   uint32_t x,
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 23


 904:.\Include/arm_math.h ****   uint32_t y)
 905:.\Include/arm_math.h ****   {
 906:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 907:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 908:.\Include/arm_math.h ****   }
 909:.\Include/arm_math.h **** 
 910:.\Include/arm_math.h ****   /*
 911:.\Include/arm_math.h ****    * @brief C custom defined SMUADX for M3 and M0 processors
 912:.\Include/arm_math.h ****    */
 913:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUADX(
 914:.\Include/arm_math.h ****   uint32_t x,
 915:.\Include/arm_math.h ****   uint32_t y)
 916:.\Include/arm_math.h ****   {
 917:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 918:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 919:.\Include/arm_math.h ****   }
 920:.\Include/arm_math.h **** 
 921:.\Include/arm_math.h **** 
 922:.\Include/arm_math.h ****   /*
 923:.\Include/arm_math.h ****    * @brief C custom defined QADD for M3 and M0 processors
 924:.\Include/arm_math.h ****    */
 925:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QADD(
 926:.\Include/arm_math.h ****   int32_t x,
 927:.\Include/arm_math.h ****   int32_t y)
 928:.\Include/arm_math.h ****   {
 929:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x + (q31_t)y)));
 930:.\Include/arm_math.h ****   }
 931:.\Include/arm_math.h **** 
 932:.\Include/arm_math.h **** 
 933:.\Include/arm_math.h ****   /*
 934:.\Include/arm_math.h ****    * @brief C custom defined QSUB for M3 and M0 processors
 935:.\Include/arm_math.h ****    */
 936:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QSUB(
 937:.\Include/arm_math.h ****   int32_t x,
 938:.\Include/arm_math.h ****   int32_t y)
 939:.\Include/arm_math.h ****   {
 940:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x - (q31_t)y)));
 941:.\Include/arm_math.h ****   }
 942:.\Include/arm_math.h **** 
 943:.\Include/arm_math.h **** 
 944:.\Include/arm_math.h ****   /*
 945:.\Include/arm_math.h ****    * @brief C custom defined SMLAD for M3 and M0 processors
 946:.\Include/arm_math.h ****    */
 947:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLAD(
 948:.\Include/arm_math.h ****   uint32_t x,
 949:.\Include/arm_math.h ****   uint32_t y,
 950:.\Include/arm_math.h ****   uint32_t sum)
 951:.\Include/arm_math.h ****   {
 952:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 187              		.loc 2 952 0
 188 00fe CC23     		mov	r3, #204
 189 0100 5B00     		lsl	r3, r3, #1
 190 0102 FB18     		add	r3, r7, r3
 191 0104 1B68     		ldr	r3, [r3]
 192 0106 1B04     		lsl	r3, r3, #16
 193 0108 1B14     		asr	r3, r3, #16
 194 010a CA22     		mov	r2, #202
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 24


 195 010c 5200     		lsl	r2, r2, #1
 196 010e BA18     		add	r2, r7, r2
 197 0110 1268     		ldr	r2, [r2]
 198 0112 1204     		lsl	r2, r2, #16
 199 0114 1214     		asr	r2, r2, #16
 200 0116 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 201              		.loc 2 953 0
 202 0118 CC23     		mov	r3, #204
 203 011a 5B00     		lsl	r3, r3, #1
 204 011c FB18     		add	r3, r7, r3
 205 011e 1B68     		ldr	r3, [r3]
 206 0120 1B14     		asr	r3, r3, #16
 207 0122 CA21     		mov	r1, #202
 208 0124 4900     		lsl	r1, r1, #1
 209 0126 7918     		add	r1, r7, r1
 210 0128 0968     		ldr	r1, [r1]
 211 012a 0914     		asr	r1, r1, #16
 212 012c 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 213              		.loc 2 952 0
 214 012e D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 215              		.loc 2 954 0
 216 0130 C823     		mov	r3, #200
 217 0132 5B00     		lsl	r3, r3, #1
 218 0134 FB18     		add	r3, r7, r3
 219 0136 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 220              		.loc 2 953 0
 221 0138 D318     		add	r3, r2, r3
 222              	.LBE67:
 223              	.LBE66:
 224              		.loc 1 165 0
 225 013a F222     		mov	r2, #242
 226 013c 5200     		lsl	r2, r2, #1
 227 013e BA18     		add	r2, r7, r2
 228 0140 1360     		str	r3, [r2]
 166:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 167:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
 168:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k--;
 229              		.loc 1 168 0
 230 0142 DC23     		mov	r3, #220
 231 0144 5B00     		lsl	r3, r3, #1
 232 0146 FB18     		add	r3, r7, r3
 233 0148 1B68     		ldr	r3, [r3]
 234 014a 013B     		sub	r3, r3, #1
 235 014c DC22     		mov	r2, #220
 236 014e 5200     		lsl	r2, r2, #1
 237 0150 BA18     		add	r2, r7, r2
 238 0152 1360     		str	r3, [r2]
 239              	.L5:
 162:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 240              		.loc 1 162 0
 241 0154 DC23     		mov	r3, #220
 242 0156 5B00     		lsl	r3, r3, #1
 243 0158 FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 25


 244 015a 1B68     		ldr	r3, [r3]
 245 015c 002B     		cmp	r3, #0
 246 015e B4D1     		bne	.L7
 169:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
 170:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 171:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Store the result in the accumulator in the destination buffer. */
 172:Source\FilteringFunctions/arm_conv_fast_q15.c ****     *pOut++ = (q15_t) (sum >> 15);
 247              		.loc 1 172 0
 248 0160 BB69     		ldr	r3, [r7, #24]
 249 0162 9A1C     		add	r2, r3, #2
 250 0164 BA61     		str	r2, [r7, #24]
 251 0166 F222     		mov	r2, #242
 252 0168 5200     		lsl	r2, r2, #1
 253 016a BA18     		add	r2, r7, r2
 254 016c 1268     		ldr	r2, [r2]
 255 016e D213     		asr	r2, r2, #15
 256 0170 92B2     		uxth	r2, r2
 257 0172 1A80     		strh	r2, [r3]
 173:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 174:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Update the inputA and inputB pointers for next MAC calculation */
 175:Source\FilteringFunctions/arm_conv_fast_q15.c ****     py = pIn2 + count;
 258              		.loc 1 175 0
 259 0174 DA23     		mov	r3, #218
 260 0176 5B00     		lsl	r3, r3, #1
 261 0178 FB18     		add	r3, r7, r3
 262 017a 1B68     		ldr	r3, [r3]
 263 017c 5B00     		lsl	r3, r3, #1
 264 017e F422     		mov	r2, #244
 265 0180 5200     		lsl	r2, r2, #1
 266 0182 BA18     		add	r2, r7, r2
 267 0184 1268     		ldr	r2, [r2]
 268 0186 D318     		add	r3, r2, r3
 269 0188 3B61     		str	r3, [r7, #16]
 176:Source\FilteringFunctions/arm_conv_fast_q15.c ****     px = pIn1;
 270              		.loc 1 176 0
 271 018a F623     		mov	r3, #246
 272 018c 5B00     		lsl	r3, r3, #1
 273 018e FB18     		add	r3, r7, r3
 274 0190 1B68     		ldr	r3, [r3]
 275 0192 7B61     		str	r3, [r7, #20]
 177:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 178:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Increment the MAC count */
 179:Source\FilteringFunctions/arm_conv_fast_q15.c ****     count++;
 276              		.loc 1 179 0
 277 0194 DA23     		mov	r3, #218
 278 0196 5B00     		lsl	r3, r3, #1
 279 0198 FB18     		add	r3, r7, r3
 280 019a 1B68     		ldr	r3, [r3]
 281 019c 0133     		add	r3, r3, #1
 282 019e DA22     		mov	r2, #218
 283 01a0 5200     		lsl	r2, r2, #1
 284 01a2 BA18     		add	r2, r7, r2
 285 01a4 1360     		str	r3, [r2]
 180:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 181:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Decrement the loop counter */
 182:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blockSize1--;
 286              		.loc 1 182 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 26


 287 01a6 E223     		mov	r3, #226
 288 01a8 5B00     		lsl	r3, r3, #1
 289 01aa FB18     		add	r3, r7, r3
 290 01ac 1B68     		ldr	r3, [r3]
 291 01ae 013B     		sub	r3, r3, #1
 292 01b0 E222     		mov	r2, #226
 293 01b2 5200     		lsl	r2, r2, #1
 294 01b4 BA18     		add	r2, r7, r2
 295 01b6 1360     		str	r3, [r2]
 296              	.L4:
 153:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 297              		.loc 1 153 0
 298 01b8 DA23     		mov	r3, #218
 299 01ba 5B00     		lsl	r3, r3, #1
 300 01bc FB18     		add	r3, r7, r3
 301 01be 1B68     		ldr	r3, [r3]
 302 01c0 032B     		cmp	r3, #3
 303 01c2 06D8     		bhi	.L8
 153:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 304              		.loc 1 153 0 is_stmt 0 discriminator 1
 305 01c4 E223     		mov	r3, #226
 306 01c6 5B00     		lsl	r3, r3, #1
 307 01c8 FB18     		add	r3, r7, r3
 308 01ca 1B68     		ldr	r3, [r3]
 309 01cc 002B     		cmp	r3, #0
 310 01ce 00D0     		beq	.LCB259
 311 01d0 6DE7     		b	.L9	@long jump
 312              	.LCB259:
 313              	.L8:
 183:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
 184:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 185:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The second part of the stage starts here */
 186:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The internal loop, over count, is unrolled by 4 */
 187:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* To, read the last two inputB samples using SIMD:
 188:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * y[srcBLen] and y[srcBLen-1] coefficients, py is decremented by 1 */
 189:Source\FilteringFunctions/arm_conv_fast_q15.c ****   py = py - 1;
 314              		.loc 1 189 0 is_stmt 1
 315 01d2 3B69     		ldr	r3, [r7, #16]
 316 01d4 023B     		sub	r3, r3, #2
 317 01d6 3B61     		str	r3, [r7, #16]
 190:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 191:Source\FilteringFunctions/arm_conv_fast_q15.c ****   while (blockSize1 > 0u)
 318              		.loc 1 191 0
 319 01d8 26E1     		b	.L10
 320              	.L18:
 192:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 193:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Accumulator is made zero for every iteration */
 194:Source\FilteringFunctions/arm_conv_fast_q15.c ****     sum = 0;
 321              		.loc 1 194 0
 322 01da 0023     		mov	r3, #0
 323 01dc F222     		mov	r2, #242
 324 01de 5200     		lsl	r2, r2, #1
 325 01e0 BA18     		add	r2, r7, r2
 326 01e2 1360     		str	r3, [r2]
 195:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 196:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Apply loop unrolling and compute 4 MACs simultaneously. */
 197:Source\FilteringFunctions/arm_conv_fast_q15.c ****     k = count >> 2u;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 27


 327              		.loc 1 197 0
 328 01e4 DA23     		mov	r3, #218
 329 01e6 5B00     		lsl	r3, r3, #1
 330 01e8 FB18     		add	r3, r7, r3
 331 01ea 1B68     		ldr	r3, [r3]
 332 01ec 9B08     		lsr	r3, r3, #2
 333 01ee DC22     		mov	r2, #220
 334 01f0 5200     		lsl	r2, r2, #1
 335 01f2 BA18     		add	r2, r7, r2
 336 01f4 1360     		str	r3, [r2]
 198:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 199:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 200:Source\FilteringFunctions/arm_conv_fast_q15.c ****      ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 201:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (k > 0u)
 337              		.loc 1 201 0
 338 01f6 88E0     		b	.L11
 339              	.L14:
 202:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 203:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Perform the multiply-accumulates */
 204:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* x[0], x[1] are multiplied with y[srcBLen - 1], y[srcBLen - 2] respectively */
 205:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum = __SMLADX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 340              		.loc 1 205 0
 341 01f8 1423     		mov	r3, #20
 342 01fa FB18     		add	r3, r7, r3
 343 01fc 1A68     		ldr	r2, [r3]
 344 01fe 111D     		add	r1, r2, #4
 345 0200 1960     		str	r1, [r3]
 346 0202 1368     		ldr	r3, [r2]
 347 0204 181C     		mov	r0, r3
 348 0206 1023     		mov	r3, #16
 349 0208 FB18     		add	r3, r7, r3
 350 020a 1A68     		ldr	r2, [r3]
 351 020c 111F     		sub	r1, r2, #4
 352 020e 1960     		str	r1, [r3]
 353 0210 1368     		ldr	r3, [r2]
 354 0212 1A1C     		mov	r2, r3
 355 0214 F223     		mov	r3, #242
 356 0216 5B00     		lsl	r3, r3, #1
 357 0218 FB18     		add	r3, r7, r3
 358 021a 1B68     		ldr	r3, [r3]
 359 021c C621     		mov	r1, #198
 360 021e 4900     		lsl	r1, r1, #1
 361 0220 7918     		add	r1, r7, r1
 362 0222 0860     		str	r0, [r1]
 363 0224 C421     		mov	r1, #196
 364 0226 4900     		lsl	r1, r1, #1
 365 0228 7918     		add	r1, r7, r1
 366 022a 0A60     		str	r2, [r1]
 367 022c C222     		mov	r2, #194
 368 022e 5200     		lsl	r2, r2, #1
 369 0230 BA18     		add	r2, r7, r2
 370 0232 1360     		str	r3, [r2]
 371              	.LBB68:
 372              	.LBB69:
 955:.\Include/arm_math.h ****   }
 956:.\Include/arm_math.h **** 
 957:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 28


 958:.\Include/arm_math.h ****   /*
 959:.\Include/arm_math.h ****    * @brief C custom defined SMLADX for M3 and M0 processors
 960:.\Include/arm_math.h ****    */
 961:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLADX(
 962:.\Include/arm_math.h ****   uint32_t x,
 963:.\Include/arm_math.h ****   uint32_t y,
 964:.\Include/arm_math.h ****   uint32_t sum)
 965:.\Include/arm_math.h ****   {
 966:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 373              		.loc 2 966 0
 374 0234 C623     		mov	r3, #198
 375 0236 5B00     		lsl	r3, r3, #1
 376 0238 FB18     		add	r3, r7, r3
 377 023a 1B68     		ldr	r3, [r3]
 378 023c 1B04     		lsl	r3, r3, #16
 379 023e 1B14     		asr	r3, r3, #16
 380 0240 C422     		mov	r2, #196
 381 0242 5200     		lsl	r2, r2, #1
 382 0244 BA18     		add	r2, r7, r2
 383 0246 1268     		ldr	r2, [r2]
 384 0248 1214     		asr	r2, r2, #16
 385 024a 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 386              		.loc 2 967 0
 387 024c C623     		mov	r3, #198
 388 024e 5B00     		lsl	r3, r3, #1
 389 0250 FB18     		add	r3, r7, r3
 390 0252 1B68     		ldr	r3, [r3]
 391 0254 1B14     		asr	r3, r3, #16
 392 0256 C421     		mov	r1, #196
 393 0258 4900     		lsl	r1, r1, #1
 394 025a 7918     		add	r1, r7, r1
 395 025c 0968     		ldr	r1, [r1]
 396 025e 0904     		lsl	r1, r1, #16
 397 0260 0914     		asr	r1, r1, #16
 398 0262 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 399              		.loc 2 966 0
 400 0264 D218     		add	r2, r2, r3
 968:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 401              		.loc 2 968 0
 402 0266 C223     		mov	r3, #194
 403 0268 5B00     		lsl	r3, r3, #1
 404 026a FB18     		add	r3, r7, r3
 405 026c 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 406              		.loc 2 967 0
 407 026e D318     		add	r3, r2, r3
 408              	.LBE69:
 409              	.LBE68:
 410              		.loc 1 205 0
 411 0270 F222     		mov	r2, #242
 412 0272 5200     		lsl	r2, r2, #1
 413 0274 BA18     		add	r2, r7, r2
 414 0276 1360     		str	r3, [r2]
 206:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* x[2], x[3] are multiplied with y[srcBLen - 3], y[srcBLen - 4] respectively */
 207:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum = __SMLADX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 29


 415              		.loc 1 207 0
 416 0278 1423     		mov	r3, #20
 417 027a FB18     		add	r3, r7, r3
 418 027c 1A68     		ldr	r2, [r3]
 419 027e 111D     		add	r1, r2, #4
 420 0280 1960     		str	r1, [r3]
 421 0282 1368     		ldr	r3, [r2]
 422 0284 181C     		mov	r0, r3
 423 0286 1023     		mov	r3, #16
 424 0288 FB18     		add	r3, r7, r3
 425 028a 1A68     		ldr	r2, [r3]
 426 028c 111F     		sub	r1, r2, #4
 427 028e 1960     		str	r1, [r3]
 428 0290 1368     		ldr	r3, [r2]
 429 0292 1A1C     		mov	r2, r3
 430 0294 F223     		mov	r3, #242
 431 0296 5B00     		lsl	r3, r3, #1
 432 0298 FB18     		add	r3, r7, r3
 433 029a 1B68     		ldr	r3, [r3]
 434 029c C021     		mov	r1, #192
 435 029e 4900     		lsl	r1, r1, #1
 436 02a0 7918     		add	r1, r7, r1
 437 02a2 0860     		str	r0, [r1]
 438 02a4 BE21     		mov	r1, #190
 439 02a6 4900     		lsl	r1, r1, #1
 440 02a8 7918     		add	r1, r7, r1
 441 02aa 0A60     		str	r2, [r1]
 442 02ac BC22     		mov	r2, #188
 443 02ae 5200     		lsl	r2, r2, #1
 444 02b0 BA18     		add	r2, r7, r2
 445 02b2 1360     		str	r3, [r2]
 446              	.LBB70:
 447              	.LBB71:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 448              		.loc 2 966 0
 449 02b4 C023     		mov	r3, #192
 450 02b6 5B00     		lsl	r3, r3, #1
 451 02b8 FB18     		add	r3, r7, r3
 452 02ba 1B68     		ldr	r3, [r3]
 453 02bc 1B04     		lsl	r3, r3, #16
 454 02be 1B14     		asr	r3, r3, #16
 455 02c0 BE22     		mov	r2, #190
 456 02c2 5200     		lsl	r2, r2, #1
 457 02c4 BA18     		add	r2, r7, r2
 458 02c6 1268     		ldr	r2, [r2]
 459 02c8 1214     		asr	r2, r2, #16
 460 02ca 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 461              		.loc 2 967 0
 462 02cc C023     		mov	r3, #192
 463 02ce 5B00     		lsl	r3, r3, #1
 464 02d0 FB18     		add	r3, r7, r3
 465 02d2 1B68     		ldr	r3, [r3]
 466 02d4 1B14     		asr	r3, r3, #16
 467 02d6 BE21     		mov	r1, #190
 468 02d8 4900     		lsl	r1, r1, #1
 469 02da 7918     		add	r1, r7, r1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 30


 470 02dc 0968     		ldr	r1, [r1]
 471 02de 0904     		lsl	r1, r1, #16
 472 02e0 0914     		asr	r1, r1, #16
 473 02e2 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 474              		.loc 2 966 0
 475 02e4 D218     		add	r2, r2, r3
 476              		.loc 2 968 0
 477 02e6 BC23     		mov	r3, #188
 478 02e8 5B00     		lsl	r3, r3, #1
 479 02ea FB18     		add	r3, r7, r3
 480 02ec 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 481              		.loc 2 967 0
 482 02ee D318     		add	r3, r2, r3
 483              	.LBE71:
 484              	.LBE70:
 485              		.loc 1 207 0
 486 02f0 F222     		mov	r2, #242
 487 02f2 5200     		lsl	r2, r2, #1
 488 02f4 BA18     		add	r2, r7, r2
 489 02f6 1360     		str	r3, [r2]
 208:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 209:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
 210:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k--;
 490              		.loc 1 210 0
 491 02f8 DC23     		mov	r3, #220
 492 02fa 5B00     		lsl	r3, r3, #1
 493 02fc FB18     		add	r3, r7, r3
 494 02fe 1B68     		ldr	r3, [r3]
 495 0300 013B     		sub	r3, r3, #1
 496 0302 DC22     		mov	r2, #220
 497 0304 5200     		lsl	r2, r2, #1
 498 0306 BA18     		add	r2, r7, r2
 499 0308 1360     		str	r3, [r2]
 500              	.L11:
 201:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 501              		.loc 1 201 0
 502 030a DC23     		mov	r3, #220
 503 030c 5B00     		lsl	r3, r3, #1
 504 030e FB18     		add	r3, r7, r3
 505 0310 1B68     		ldr	r3, [r3]
 506 0312 002B     		cmp	r3, #0
 507 0314 00D0     		beq	.LCB438
 508 0316 6FE7     		b	.L14	@long jump
 509              	.LCB438:
 211:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
 212:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 213:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* For the next MAC operations, the pointer py is used without SIMD
 214:Source\FilteringFunctions/arm_conv_fast_q15.c ****      * So, py is incremented by 1 */
 215:Source\FilteringFunctions/arm_conv_fast_q15.c ****     py = py + 1u;
 510              		.loc 1 215 0
 511 0318 3B69     		ldr	r3, [r7, #16]
 512 031a 0233     		add	r3, r3, #2
 513 031c 3B61     		str	r3, [r7, #16]
 216:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 217:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* If the count is not a multiple of 4, compute any remaining MACs here.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 31


 218:Source\FilteringFunctions/arm_conv_fast_q15.c ****      ** No loop unrolling is used. */
 219:Source\FilteringFunctions/arm_conv_fast_q15.c ****     k = count % 0x4u;
 514              		.loc 1 219 0
 515 031e DA23     		mov	r3, #218
 516 0320 5B00     		lsl	r3, r3, #1
 517 0322 FB18     		add	r3, r7, r3
 518 0324 1B68     		ldr	r3, [r3]
 519 0326 0322     		mov	r2, #3
 520 0328 1340     		and	r3, r2
 521 032a DC22     		mov	r2, #220
 522 032c 5200     		lsl	r2, r2, #1
 523 032e BA18     		add	r2, r7, r2
 524 0330 1360     		str	r3, [r2]
 220:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 221:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (k > 0u)
 525              		.loc 1 221 0
 526 0332 44E0     		b	.L15
 527              	.L17:
 222:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 223:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Perform the multiply-accumulates */
 224:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum = __SMLAD(*px++, *py--, sum);
 528              		.loc 1 224 0
 529 0334 7B69     		ldr	r3, [r7, #20]
 530 0336 9A1C     		add	r2, r3, #2
 531 0338 7A61     		str	r2, [r7, #20]
 532 033a 1B88     		ldrh	r3, [r3]
 533 033c 19B2     		sxth	r1, r3
 534 033e 3B69     		ldr	r3, [r7, #16]
 535 0340 9A1E     		sub	r2, r3, #2
 536 0342 3A61     		str	r2, [r7, #16]
 537 0344 1B88     		ldrh	r3, [r3]
 538 0346 1AB2     		sxth	r2, r3
 539 0348 F223     		mov	r3, #242
 540 034a 5B00     		lsl	r3, r3, #1
 541 034c FB18     		add	r3, r7, r3
 542 034e 1B68     		ldr	r3, [r3]
 543 0350 BA20     		mov	r0, #186
 544 0352 4000     		lsl	r0, r0, #1
 545 0354 3818     		add	r0, r7, r0
 546 0356 0160     		str	r1, [r0]
 547 0358 B821     		mov	r1, #184
 548 035a 4900     		lsl	r1, r1, #1
 549 035c 7918     		add	r1, r7, r1
 550 035e 0A60     		str	r2, [r1]
 551 0360 B622     		mov	r2, #182
 552 0362 5200     		lsl	r2, r2, #1
 553 0364 BA18     		add	r2, r7, r2
 554 0366 1360     		str	r3, [r2]
 555              	.LBB72:
 556              	.LBB73:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 557              		.loc 2 952 0
 558 0368 BA23     		mov	r3, #186
 559 036a 5B00     		lsl	r3, r3, #1
 560 036c FB18     		add	r3, r7, r3
 561 036e 1B68     		ldr	r3, [r3]
 562 0370 1B04     		lsl	r3, r3, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 32


 563 0372 1B14     		asr	r3, r3, #16
 564 0374 B822     		mov	r2, #184
 565 0376 5200     		lsl	r2, r2, #1
 566 0378 BA18     		add	r2, r7, r2
 567 037a 1268     		ldr	r2, [r2]
 568 037c 1204     		lsl	r2, r2, #16
 569 037e 1214     		asr	r2, r2, #16
 570 0380 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 571              		.loc 2 953 0
 572 0382 BA23     		mov	r3, #186
 573 0384 5B00     		lsl	r3, r3, #1
 574 0386 FB18     		add	r3, r7, r3
 575 0388 1B68     		ldr	r3, [r3]
 576 038a 1B14     		asr	r3, r3, #16
 577 038c B821     		mov	r1, #184
 578 038e 4900     		lsl	r1, r1, #1
 579 0390 7918     		add	r1, r7, r1
 580 0392 0968     		ldr	r1, [r1]
 581 0394 0914     		asr	r1, r1, #16
 582 0396 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 583              		.loc 2 952 0
 584 0398 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 585              		.loc 2 954 0
 586 039a B623     		mov	r3, #182
 587 039c 5B00     		lsl	r3, r3, #1
 588 039e FB18     		add	r3, r7, r3
 589 03a0 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 590              		.loc 2 953 0
 591 03a2 D318     		add	r3, r2, r3
 592              	.LBE73:
 593              	.LBE72:
 594              		.loc 1 224 0
 595 03a4 F222     		mov	r2, #242
 596 03a6 5200     		lsl	r2, r2, #1
 597 03a8 BA18     		add	r2, r7, r2
 598 03aa 1360     		str	r3, [r2]
 225:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 226:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
 227:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k--;
 599              		.loc 1 227 0
 600 03ac DC23     		mov	r3, #220
 601 03ae 5B00     		lsl	r3, r3, #1
 602 03b0 FB18     		add	r3, r7, r3
 603 03b2 1B68     		ldr	r3, [r3]
 604 03b4 013B     		sub	r3, r3, #1
 605 03b6 DC22     		mov	r2, #220
 606 03b8 5200     		lsl	r2, r2, #1
 607 03ba BA18     		add	r2, r7, r2
 608 03bc 1360     		str	r3, [r2]
 609              	.L15:
 221:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 610              		.loc 1 221 0
 611 03be DC23     		mov	r3, #220
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 33


 612 03c0 5B00     		lsl	r3, r3, #1
 613 03c2 FB18     		add	r3, r7, r3
 614 03c4 1B68     		ldr	r3, [r3]
 615 03c6 002B     		cmp	r3, #0
 616 03c8 B4D1     		bne	.L17
 228:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
 229:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 230:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Store the result in the accumulator in the destination buffer. */
 231:Source\FilteringFunctions/arm_conv_fast_q15.c ****     *pOut++ = (q15_t) (sum >> 15);
 617              		.loc 1 231 0
 618 03ca BB69     		ldr	r3, [r7, #24]
 619 03cc 9A1C     		add	r2, r3, #2
 620 03ce BA61     		str	r2, [r7, #24]
 621 03d0 F222     		mov	r2, #242
 622 03d2 5200     		lsl	r2, r2, #1
 623 03d4 BA18     		add	r2, r7, r2
 624 03d6 1268     		ldr	r2, [r2]
 625 03d8 D213     		asr	r2, r2, #15
 626 03da 92B2     		uxth	r2, r2
 627 03dc 1A80     		strh	r2, [r3]
 232:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 233:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Update the inputA and inputB pointers for next MAC calculation */
 234:Source\FilteringFunctions/arm_conv_fast_q15.c ****     py = pIn2 + (count - 1u);
 628              		.loc 1 234 0
 629 03de DA23     		mov	r3, #218
 630 03e0 5B00     		lsl	r3, r3, #1
 631 03e2 FB18     		add	r3, r7, r3
 632 03e4 1B68     		ldr	r3, [r3]
 633 03e6 2A4A     		ldr	r2, .L76
 634 03e8 9446     		mov	ip, r2
 635 03ea 6344     		add	r3, r3, ip
 636 03ec 5B00     		lsl	r3, r3, #1
 637 03ee F422     		mov	r2, #244
 638 03f0 5200     		lsl	r2, r2, #1
 639 03f2 BA18     		add	r2, r7, r2
 640 03f4 1268     		ldr	r2, [r2]
 641 03f6 D318     		add	r3, r2, r3
 642 03f8 3B61     		str	r3, [r7, #16]
 235:Source\FilteringFunctions/arm_conv_fast_q15.c ****     px = pIn1;
 643              		.loc 1 235 0
 644 03fa F623     		mov	r3, #246
 645 03fc 5B00     		lsl	r3, r3, #1
 646 03fe FB18     		add	r3, r7, r3
 647 0400 1B68     		ldr	r3, [r3]
 648 0402 7B61     		str	r3, [r7, #20]
 236:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 237:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Increment the MAC count */
 238:Source\FilteringFunctions/arm_conv_fast_q15.c ****     count++;
 649              		.loc 1 238 0
 650 0404 DA23     		mov	r3, #218
 651 0406 5B00     		lsl	r3, r3, #1
 652 0408 FB18     		add	r3, r7, r3
 653 040a 1B68     		ldr	r3, [r3]
 654 040c 0133     		add	r3, r3, #1
 655 040e DA22     		mov	r2, #218
 656 0410 5200     		lsl	r2, r2, #1
 657 0412 BA18     		add	r2, r7, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 34


 658 0414 1360     		str	r3, [r2]
 239:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 240:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Decrement the loop counter */
 241:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blockSize1--;
 659              		.loc 1 241 0
 660 0416 E223     		mov	r3, #226
 661 0418 5B00     		lsl	r3, r3, #1
 662 041a FB18     		add	r3, r7, r3
 663 041c 1B68     		ldr	r3, [r3]
 664 041e 013B     		sub	r3, r3, #1
 665 0420 E222     		mov	r2, #226
 666 0422 5200     		lsl	r2, r2, #1
 667 0424 BA18     		add	r2, r7, r2
 668 0426 1360     		str	r3, [r2]
 669              	.L10:
 191:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 670              		.loc 1 191 0
 671 0428 E223     		mov	r3, #226
 672 042a 5B00     		lsl	r3, r3, #1
 673 042c FB18     		add	r3, r7, r3
 674 042e 1B68     		ldr	r3, [r3]
 675 0430 002B     		cmp	r3, #0
 676 0432 00D0     		beq	.LCB591
 677 0434 D1E6     		b	.L18	@long jump
 678              	.LCB591:
 242:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
 243:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 244:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* --------------------------
 245:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * Initializations of stage2
 246:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * ------------------------*/
 247:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 248:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]
 249:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]
 250:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * ....
 251:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y[0
 252:Source\FilteringFunctions/arm_conv_fast_q15.c ****    */
 253:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 254:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Working pointer of inputA */
 255:Source\FilteringFunctions/arm_conv_fast_q15.c ****   px = pIn1;
 679              		.loc 1 255 0
 680 0436 F623     		mov	r3, #246
 681 0438 5B00     		lsl	r3, r3, #1
 682 043a FB18     		add	r3, r7, r3
 683 043c 1B68     		ldr	r3, [r3]
 684 043e 7B61     		str	r3, [r7, #20]
 256:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 257:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Working pointer of inputB */
 258:Source\FilteringFunctions/arm_conv_fast_q15.c ****   pSrc2 = pIn2 + (srcBLen - 1u);
 685              		.loc 1 258 0
 686 0440 3B68     		ldr	r3, [r7]
 687 0442 134A     		ldr	r2, .L76
 688 0444 9446     		mov	ip, r2
 689 0446 6344     		add	r3, r3, ip
 690 0448 5B00     		lsl	r3, r3, #1
 691 044a F422     		mov	r2, #244
 692 044c 5200     		lsl	r2, r2, #1
 693 044e BA18     		add	r2, r7, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 35


 694 0450 1268     		ldr	r2, [r2]
 695 0452 D318     		add	r3, r2, r3
 696 0454 D422     		mov	r2, #212
 697 0456 5200     		lsl	r2, r2, #1
 698 0458 BA18     		add	r2, r7, r2
 699 045a 1360     		str	r3, [r2]
 259:Source\FilteringFunctions/arm_conv_fast_q15.c ****   py = pSrc2;
 700              		.loc 1 259 0
 701 045c D423     		mov	r3, #212
 702 045e 5B00     		lsl	r3, r3, #1
 703 0460 FB18     		add	r3, r7, r3
 704 0462 1B68     		ldr	r3, [r3]
 705 0464 3B61     		str	r3, [r7, #16]
 260:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 261:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* count is the index by which the pointer pIn1 to be incremented */
 262:Source\FilteringFunctions/arm_conv_fast_q15.c ****   count = 0u;
 706              		.loc 1 262 0
 707 0466 0023     		mov	r3, #0
 708 0468 DA22     		mov	r2, #218
 709 046a 5200     		lsl	r2, r2, #1
 710 046c BA18     		add	r2, r7, r2
 711 046e 1360     		str	r3, [r2]
 263:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 264:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 265:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* --------------------
 266:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * Stage2 process
 267:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * -------------------*/
 268:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 269:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
 270:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * So, to loop unroll over blockSize2,
 271:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * srcBLen should be greater than or equal to 4 */
 272:Source\FilteringFunctions/arm_conv_fast_q15.c ****   if (srcBLen >= 4u)
 712              		.loc 1 272 0
 713 0470 3B68     		ldr	r3, [r7]
 714 0472 032B     		cmp	r3, #3
 715 0474 01D8     		bhi	.LCB623
 716 0476 00F0D6FE 		bl	.L19	@far jump
 717              	.LCB623:
 273:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 274:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Loop unroll over blockSize2, by 4 */
 275:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blkCnt = blockSize2 >> 2u;
 718              		.loc 1 275 0
 719 047a D623     		mov	r3, #214
 720 047c 5B00     		lsl	r3, r3, #1
 721 047e FB18     		add	r3, r7, r3
 722 0480 1B68     		ldr	r3, [r3]
 723 0482 9B08     		lsr	r3, r3, #2
 724 0484 D822     		mov	r2, #216
 725 0486 5200     		lsl	r2, r2, #1
 726 0488 BA18     		add	r2, r7, r2
 727 048a 1360     		str	r3, [r2]
 276:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 277:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (blkCnt > 0u)
 728              		.loc 1 277 0
 729 048c 00F0EEFD 		bl	.L20	@ far jump
 730              	.L77:
 731              		.align	2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 36


 732              	.L76:
 733 0490 FFFFFF7F 		.word	2147483647
 734              	.L49:
 278:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 279:Source\FilteringFunctions/arm_conv_fast_q15.c ****       py = py - 1u;
 735              		.loc 1 279 0
 736 0494 3B69     		ldr	r3, [r7, #16]
 737 0496 023B     		sub	r3, r3, #2
 738 0498 3B61     		str	r3, [r7, #16]
 280:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 281:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Set all accumulators to zero */
 282:Source\FilteringFunctions/arm_conv_fast_q15.c ****       acc0 = 0;
 739              		.loc 1 282 0
 740 049a 0023     		mov	r3, #0
 741 049c F022     		mov	r2, #240
 742 049e 5200     		lsl	r2, r2, #1
 743 04a0 BA18     		add	r2, r7, r2
 744 04a2 1360     		str	r3, [r2]
 283:Source\FilteringFunctions/arm_conv_fast_q15.c ****       acc1 = 0;
 745              		.loc 1 283 0
 746 04a4 0023     		mov	r3, #0
 747 04a6 EE22     		mov	r2, #238
 748 04a8 5200     		lsl	r2, r2, #1
 749 04aa BA18     		add	r2, r7, r2
 750 04ac 1360     		str	r3, [r2]
 284:Source\FilteringFunctions/arm_conv_fast_q15.c ****       acc2 = 0;
 751              		.loc 1 284 0
 752 04ae 0023     		mov	r3, #0
 753 04b0 EC22     		mov	r2, #236
 754 04b2 5200     		lsl	r2, r2, #1
 755 04b4 BA18     		add	r2, r7, r2
 756 04b6 1360     		str	r3, [r2]
 285:Source\FilteringFunctions/arm_conv_fast_q15.c ****       acc3 = 0;
 757              		.loc 1 285 0
 758 04b8 0023     		mov	r3, #0
 759 04ba EA22     		mov	r2, #234
 760 04bc 5200     		lsl	r2, r2, #1
 761 04be BA18     		add	r2, r7, r2
 762 04c0 1360     		str	r3, [r2]
 286:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 287:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 288:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* read x[0], x[1] samples */
 289:Source\FilteringFunctions/arm_conv_fast_q15.c ****       x0 = *__SIMD32(px);
 763              		.loc 1 289 0
 764 04c2 1423     		mov	r3, #20
 765 04c4 FB18     		add	r3, r7, r3
 766 04c6 1B68     		ldr	r3, [r3]
 767 04c8 1B68     		ldr	r3, [r3]
 768 04ca E622     		mov	r2, #230
 769 04cc 5200     		lsl	r2, r2, #1
 770 04ce BA18     		add	r2, r7, r2
 771 04d0 1360     		str	r3, [r2]
 290:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* read x[1], x[2] samples */
 291:Source\FilteringFunctions/arm_conv_fast_q15.c ****       x1 = _SIMD32_OFFSET(px+1);
 772              		.loc 1 291 0
 773 04d2 7B69     		ldr	r3, [r7, #20]
 774 04d4 0233     		add	r3, r3, #2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 37


 775 04d6 1B68     		ldr	r3, [r3]
 776 04d8 E422     		mov	r2, #228
 777 04da 5200     		lsl	r2, r2, #1
 778 04dc BA18     		add	r2, r7, r2
 779 04de 1360     		str	r3, [r2]
 292:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  px+= 2u;
 780              		.loc 1 292 0
 781 04e0 7B69     		ldr	r3, [r7, #20]
 782 04e2 0433     		add	r3, r3, #4
 783 04e4 7B61     		str	r3, [r7, #20]
 293:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 294:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 295:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 296:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k = srcBLen >> 2u;
 784              		.loc 1 296 0
 785 04e6 3B68     		ldr	r3, [r7]
 786 04e8 9B08     		lsr	r3, r3, #2
 787 04ea DC22     		mov	r2, #220
 788 04ec 5200     		lsl	r2, r2, #1
 789 04ee BA18     		add	r2, r7, r2
 790 04f0 1360     		str	r3, [r2]
 791              	.L29:
 297:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 298:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 299:Source\FilteringFunctions/arm_conv_fast_q15.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 300:Source\FilteringFunctions/arm_conv_fast_q15.c ****       do
 301:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
 302:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read the last two inputB samples using SIMD:
 303:Source\FilteringFunctions/arm_conv_fast_q15.c ****          * y[srcBLen - 1] and y[srcBLen - 2] */
 304:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = *__SIMD32(py)--;
 792              		.loc 1 304 0 discriminator 1
 793 04f2 1023     		mov	r3, #16
 794 04f4 FB18     		add	r3, r7, r3
 795 04f6 1A68     		ldr	r2, [r3]
 796 04f8 111F     		sub	r1, r2, #4
 797 04fa 1960     		str	r1, [r3]
 798 04fc 1368     		ldr	r3, [r2]
 799 04fe D222     		mov	r2, #210
 800 0500 5200     		lsl	r2, r2, #1
 801 0502 BA18     		add	r2, r7, r2
 802 0504 1360     		str	r3, [r2]
 305:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 306:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc0 +=  x[0] * y[srcBLen - 1] + x[1] * y[srcBLen - 2] */
 307:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc0 = __SMLADX(x0, c0, acc0);
 803              		.loc 1 307 0 discriminator 1
 804 0506 E623     		mov	r3, #230
 805 0508 5B00     		lsl	r3, r3, #1
 806 050a FB18     		add	r3, r7, r3
 807 050c 1968     		ldr	r1, [r3]
 808 050e D223     		mov	r3, #210
 809 0510 5B00     		lsl	r3, r3, #1
 810 0512 FB18     		add	r3, r7, r3
 811 0514 1A68     		ldr	r2, [r3]
 812 0516 F023     		mov	r3, #240
 813 0518 5B00     		lsl	r3, r3, #1
 814 051a FB18     		add	r3, r7, r3
 815 051c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 38


 816 051e B420     		mov	r0, #180
 817 0520 4000     		lsl	r0, r0, #1
 818 0522 3818     		add	r0, r7, r0
 819 0524 0160     		str	r1, [r0]
 820 0526 B221     		mov	r1, #178
 821 0528 4900     		lsl	r1, r1, #1
 822 052a 7918     		add	r1, r7, r1
 823 052c 0A60     		str	r2, [r1]
 824 052e B022     		mov	r2, #176
 825 0530 5200     		lsl	r2, r2, #1
 826 0532 BA18     		add	r2, r7, r2
 827 0534 1360     		str	r3, [r2]
 828              	.LBB74:
 829              	.LBB75:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 830              		.loc 2 966 0 discriminator 1
 831 0536 B423     		mov	r3, #180
 832 0538 5B00     		lsl	r3, r3, #1
 833 053a FB18     		add	r3, r7, r3
 834 053c 1B68     		ldr	r3, [r3]
 835 053e 1B04     		lsl	r3, r3, #16
 836 0540 1B14     		asr	r3, r3, #16
 837 0542 B222     		mov	r2, #178
 838 0544 5200     		lsl	r2, r2, #1
 839 0546 BA18     		add	r2, r7, r2
 840 0548 1268     		ldr	r2, [r2]
 841 054a 1214     		asr	r2, r2, #16
 842 054c 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 843              		.loc 2 967 0 discriminator 1
 844 054e B423     		mov	r3, #180
 845 0550 5B00     		lsl	r3, r3, #1
 846 0552 FB18     		add	r3, r7, r3
 847 0554 1B68     		ldr	r3, [r3]
 848 0556 1B14     		asr	r3, r3, #16
 849 0558 B221     		mov	r1, #178
 850 055a 4900     		lsl	r1, r1, #1
 851 055c 7918     		add	r1, r7, r1
 852 055e 0968     		ldr	r1, [r1]
 853 0560 0904     		lsl	r1, r1, #16
 854 0562 0914     		asr	r1, r1, #16
 855 0564 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 856              		.loc 2 966 0 discriminator 1
 857 0566 D218     		add	r2, r2, r3
 858              		.loc 2 968 0 discriminator 1
 859 0568 B023     		mov	r3, #176
 860 056a 5B00     		lsl	r3, r3, #1
 861 056c FB18     		add	r3, r7, r3
 862 056e 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 863              		.loc 2 967 0 discriminator 1
 864 0570 D318     		add	r3, r2, r3
 865              	.LBE75:
 866              	.LBE74:
 867              		.loc 1 307 0 discriminator 1
 868 0572 F022     		mov	r2, #240
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 39


 869 0574 5200     		lsl	r2, r2, #1
 870 0576 BA18     		add	r2, r7, r2
 871 0578 1360     		str	r3, [r2]
 308:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 309:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc1 +=  x[1] * y[srcBLen - 1] + x[2] * y[srcBLen - 2] */
 310:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc1 = __SMLADX(x1, c0, acc1);
 872              		.loc 1 310 0 discriminator 1
 873 057a E423     		mov	r3, #228
 874 057c 5B00     		lsl	r3, r3, #1
 875 057e FB18     		add	r3, r7, r3
 876 0580 1968     		ldr	r1, [r3]
 877 0582 D223     		mov	r3, #210
 878 0584 5B00     		lsl	r3, r3, #1
 879 0586 FB18     		add	r3, r7, r3
 880 0588 1A68     		ldr	r2, [r3]
 881 058a EE23     		mov	r3, #238
 882 058c 5B00     		lsl	r3, r3, #1
 883 058e FB18     		add	r3, r7, r3
 884 0590 1B68     		ldr	r3, [r3]
 885 0592 AE20     		mov	r0, #174
 886 0594 4000     		lsl	r0, r0, #1
 887 0596 3818     		add	r0, r7, r0
 888 0598 0160     		str	r1, [r0]
 889 059a AC21     		mov	r1, #172
 890 059c 4900     		lsl	r1, r1, #1
 891 059e 7918     		add	r1, r7, r1
 892 05a0 0A60     		str	r2, [r1]
 893 05a2 AA22     		mov	r2, #170
 894 05a4 5200     		lsl	r2, r2, #1
 895 05a6 BA18     		add	r2, r7, r2
 896 05a8 1360     		str	r3, [r2]
 897              	.LBB76:
 898              	.LBB77:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 899              		.loc 2 966 0 discriminator 1
 900 05aa AE23     		mov	r3, #174
 901 05ac 5B00     		lsl	r3, r3, #1
 902 05ae FB18     		add	r3, r7, r3
 903 05b0 1B68     		ldr	r3, [r3]
 904 05b2 1B04     		lsl	r3, r3, #16
 905 05b4 1B14     		asr	r3, r3, #16
 906 05b6 AC22     		mov	r2, #172
 907 05b8 5200     		lsl	r2, r2, #1
 908 05ba BA18     		add	r2, r7, r2
 909 05bc 1268     		ldr	r2, [r2]
 910 05be 1214     		asr	r2, r2, #16
 911 05c0 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 912              		.loc 2 967 0 discriminator 1
 913 05c2 AE23     		mov	r3, #174
 914 05c4 5B00     		lsl	r3, r3, #1
 915 05c6 FB18     		add	r3, r7, r3
 916 05c8 1B68     		ldr	r3, [r3]
 917 05ca 1B14     		asr	r3, r3, #16
 918 05cc AC21     		mov	r1, #172
 919 05ce 4900     		lsl	r1, r1, #1
 920 05d0 7918     		add	r1, r7, r1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 40


 921 05d2 0968     		ldr	r1, [r1]
 922 05d4 0904     		lsl	r1, r1, #16
 923 05d6 0914     		asr	r1, r1, #16
 924 05d8 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 925              		.loc 2 966 0 discriminator 1
 926 05da D218     		add	r2, r2, r3
 927              		.loc 2 968 0 discriminator 1
 928 05dc AA23     		mov	r3, #170
 929 05de 5B00     		lsl	r3, r3, #1
 930 05e0 FB18     		add	r3, r7, r3
 931 05e2 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 932              		.loc 2 967 0 discriminator 1
 933 05e4 D318     		add	r3, r2, r3
 934              	.LBE77:
 935              	.LBE76:
 936              		.loc 1 310 0 discriminator 1
 937 05e6 EE22     		mov	r2, #238
 938 05e8 5200     		lsl	r2, r2, #1
 939 05ea BA18     		add	r2, r7, r2
 940 05ec 1360     		str	r3, [r2]
 311:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 312:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[2], x[3] */
 313:Source\FilteringFunctions/arm_conv_fast_q15.c ****         x2 = *__SIMD32(px);
 941              		.loc 1 313 0 discriminator 1
 942 05ee 1423     		mov	r3, #20
 943 05f0 FB18     		add	r3, r7, r3
 944 05f2 1B68     		ldr	r3, [r3]
 945 05f4 1B68     		ldr	r3, [r3]
 946 05f6 D022     		mov	r2, #208
 947 05f8 5200     		lsl	r2, r2, #1
 948 05fa BA18     		add	r2, r7, r2
 949 05fc 1360     		str	r3, [r2]
 314:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 315:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[3], x[4] */
 316:Source\FilteringFunctions/arm_conv_fast_q15.c ****         x3 = _SIMD32_OFFSET(px+1);
 950              		.loc 1 316 0 discriminator 1
 951 05fe 7B69     		ldr	r3, [r7, #20]
 952 0600 0233     		add	r3, r3, #2
 953 0602 1B68     		ldr	r3, [r3]
 954 0604 CE22     		mov	r2, #206
 955 0606 5200     		lsl	r2, r2, #1
 956 0608 BA18     		add	r2, r7, r2
 957 060a 1360     		str	r3, [r2]
 317:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 318:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc2 +=  x[2] * y[srcBLen - 1] + x[3] * y[srcBLen - 2] */
 319:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc2 = __SMLADX(x2, c0, acc2);
 958              		.loc 1 319 0 discriminator 1
 959 060c D023     		mov	r3, #208
 960 060e 5B00     		lsl	r3, r3, #1
 961 0610 FB18     		add	r3, r7, r3
 962 0612 1968     		ldr	r1, [r3]
 963 0614 D223     		mov	r3, #210
 964 0616 5B00     		lsl	r3, r3, #1
 965 0618 FB18     		add	r3, r7, r3
 966 061a 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 41


 967 061c EC23     		mov	r3, #236
 968 061e 5B00     		lsl	r3, r3, #1
 969 0620 FB18     		add	r3, r7, r3
 970 0622 1B68     		ldr	r3, [r3]
 971 0624 A820     		mov	r0, #168
 972 0626 4000     		lsl	r0, r0, #1
 973 0628 3818     		add	r0, r7, r0
 974 062a 0160     		str	r1, [r0]
 975 062c A621     		mov	r1, #166
 976 062e 4900     		lsl	r1, r1, #1
 977 0630 7918     		add	r1, r7, r1
 978 0632 0A60     		str	r2, [r1]
 979 0634 A422     		mov	r2, #164
 980 0636 5200     		lsl	r2, r2, #1
 981 0638 BA18     		add	r2, r7, r2
 982 063a 1360     		str	r3, [r2]
 983              	.LBB78:
 984              	.LBB79:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 985              		.loc 2 966 0 discriminator 1
 986 063c A823     		mov	r3, #168
 987 063e 5B00     		lsl	r3, r3, #1
 988 0640 FB18     		add	r3, r7, r3
 989 0642 1B68     		ldr	r3, [r3]
 990 0644 1B04     		lsl	r3, r3, #16
 991 0646 1B14     		asr	r3, r3, #16
 992 0648 A622     		mov	r2, #166
 993 064a 5200     		lsl	r2, r2, #1
 994 064c BA18     		add	r2, r7, r2
 995 064e 1268     		ldr	r2, [r2]
 996 0650 1214     		asr	r2, r2, #16
 997 0652 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 998              		.loc 2 967 0 discriminator 1
 999 0654 A823     		mov	r3, #168
 1000 0656 5B00     		lsl	r3, r3, #1
 1001 0658 FB18     		add	r3, r7, r3
 1002 065a 1B68     		ldr	r3, [r3]
 1003 065c 1B14     		asr	r3, r3, #16
 1004 065e A621     		mov	r1, #166
 1005 0660 4900     		lsl	r1, r1, #1
 1006 0662 7918     		add	r1, r7, r1
 1007 0664 0968     		ldr	r1, [r1]
 1008 0666 0904     		lsl	r1, r1, #16
 1009 0668 0914     		asr	r1, r1, #16
 1010 066a 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1011              		.loc 2 966 0 discriminator 1
 1012 066c D218     		add	r2, r2, r3
 1013              		.loc 2 968 0 discriminator 1
 1014 066e A423     		mov	r3, #164
 1015 0670 5B00     		lsl	r3, r3, #1
 1016 0672 FB18     		add	r3, r7, r3
 1017 0674 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1018              		.loc 2 967 0 discriminator 1
 1019 0676 D318     		add	r3, r2, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 42


 1020              	.LBE79:
 1021              	.LBE78:
 1022              		.loc 1 319 0 discriminator 1
 1023 0678 EC22     		mov	r2, #236
 1024 067a 5200     		lsl	r2, r2, #1
 1025 067c BA18     		add	r2, r7, r2
 1026 067e 1360     		str	r3, [r2]
 320:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 321:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc3 +=  x[3] * y[srcBLen - 1] + x[4] * y[srcBLen - 2] */
 322:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc3 = __SMLADX(x3, c0, acc3);
 1027              		.loc 1 322 0 discriminator 1
 1028 0680 CE23     		mov	r3, #206
 1029 0682 5B00     		lsl	r3, r3, #1
 1030 0684 FB18     		add	r3, r7, r3
 1031 0686 1968     		ldr	r1, [r3]
 1032 0688 D223     		mov	r3, #210
 1033 068a 5B00     		lsl	r3, r3, #1
 1034 068c FB18     		add	r3, r7, r3
 1035 068e 1A68     		ldr	r2, [r3]
 1036 0690 EA23     		mov	r3, #234
 1037 0692 5B00     		lsl	r3, r3, #1
 1038 0694 FB18     		add	r3, r7, r3
 1039 0696 1B68     		ldr	r3, [r3]
 1040 0698 A220     		mov	r0, #162
 1041 069a 4000     		lsl	r0, r0, #1
 1042 069c 3818     		add	r0, r7, r0
 1043 069e 0160     		str	r1, [r0]
 1044 06a0 A021     		mov	r1, #160
 1045 06a2 4900     		lsl	r1, r1, #1
 1046 06a4 7918     		add	r1, r7, r1
 1047 06a6 0A60     		str	r2, [r1]
 1048 06a8 9E22     		mov	r2, #158
 1049 06aa 5200     		lsl	r2, r2, #1
 1050 06ac BA18     		add	r2, r7, r2
 1051 06ae 1360     		str	r3, [r2]
 1052              	.LBB80:
 1053              	.LBB81:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1054              		.loc 2 966 0 discriminator 1
 1055 06b0 A223     		mov	r3, #162
 1056 06b2 5B00     		lsl	r3, r3, #1
 1057 06b4 FB18     		add	r3, r7, r3
 1058 06b6 1B68     		ldr	r3, [r3]
 1059 06b8 1B04     		lsl	r3, r3, #16
 1060 06ba 1B14     		asr	r3, r3, #16
 1061 06bc A022     		mov	r2, #160
 1062 06be 5200     		lsl	r2, r2, #1
 1063 06c0 BA18     		add	r2, r7, r2
 1064 06c2 1268     		ldr	r2, [r2]
 1065 06c4 1214     		asr	r2, r2, #16
 1066 06c6 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1067              		.loc 2 967 0 discriminator 1
 1068 06c8 A223     		mov	r3, #162
 1069 06ca 5B00     		lsl	r3, r3, #1
 1070 06cc FB18     		add	r3, r7, r3
 1071 06ce 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 43


 1072 06d0 1B14     		asr	r3, r3, #16
 1073 06d2 A021     		mov	r1, #160
 1074 06d4 4900     		lsl	r1, r1, #1
 1075 06d6 7918     		add	r1, r7, r1
 1076 06d8 0968     		ldr	r1, [r1]
 1077 06da 0904     		lsl	r1, r1, #16
 1078 06dc 0914     		asr	r1, r1, #16
 1079 06de 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1080              		.loc 2 966 0 discriminator 1
 1081 06e0 D218     		add	r2, r2, r3
 1082              		.loc 2 968 0 discriminator 1
 1083 06e2 9E23     		mov	r3, #158
 1084 06e4 5B00     		lsl	r3, r3, #1
 1085 06e6 FB18     		add	r3, r7, r3
 1086 06e8 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1087              		.loc 2 967 0 discriminator 1
 1088 06ea D318     		add	r3, r2, r3
 1089              	.LBE81:
 1090              	.LBE80:
 1091              		.loc 1 322 0 discriminator 1
 1092 06ec EA22     		mov	r2, #234
 1093 06ee 5200     		lsl	r2, r2, #1
 1094 06f0 BA18     		add	r2, r7, r2
 1095 06f2 1360     		str	r3, [r2]
 323:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 324:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read y[srcBLen - 3] and y[srcBLen - 4] */
 325:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = *__SIMD32(py)--;
 1096              		.loc 1 325 0 discriminator 1
 1097 06f4 1023     		mov	r3, #16
 1098 06f6 FB18     		add	r3, r7, r3
 1099 06f8 1A68     		ldr	r2, [r3]
 1100 06fa 111F     		sub	r1, r2, #4
 1101 06fc 1960     		str	r1, [r3]
 1102 06fe 1368     		ldr	r3, [r2]
 1103 0700 D222     		mov	r2, #210
 1104 0702 5200     		lsl	r2, r2, #1
 1105 0704 BA18     		add	r2, r7, r2
 1106 0706 1360     		str	r3, [r2]
 326:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 327:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc0 +=  x[2] * y[srcBLen - 3] + x[3] * y[srcBLen - 4] */
 328:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc0 = __SMLADX(x2, c0, acc0);
 1107              		.loc 1 328 0 discriminator 1
 1108 0708 D023     		mov	r3, #208
 1109 070a 5B00     		lsl	r3, r3, #1
 1110 070c FB18     		add	r3, r7, r3
 1111 070e 1968     		ldr	r1, [r3]
 1112 0710 D223     		mov	r3, #210
 1113 0712 5B00     		lsl	r3, r3, #1
 1114 0714 FB18     		add	r3, r7, r3
 1115 0716 1A68     		ldr	r2, [r3]
 1116 0718 F023     		mov	r3, #240
 1117 071a 5B00     		lsl	r3, r3, #1
 1118 071c FB18     		add	r3, r7, r3
 1119 071e 1B68     		ldr	r3, [r3]
 1120 0720 9C20     		mov	r0, #156
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 44


 1121 0722 4000     		lsl	r0, r0, #1
 1122 0724 3818     		add	r0, r7, r0
 1123 0726 0160     		str	r1, [r0]
 1124 0728 9A21     		mov	r1, #154
 1125 072a 4900     		lsl	r1, r1, #1
 1126 072c 7918     		add	r1, r7, r1
 1127 072e 0A60     		str	r2, [r1]
 1128 0730 9822     		mov	r2, #152
 1129 0732 5200     		lsl	r2, r2, #1
 1130 0734 BA18     		add	r2, r7, r2
 1131 0736 1360     		str	r3, [r2]
 1132              	.LBB82:
 1133              	.LBB83:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1134              		.loc 2 966 0 discriminator 1
 1135 0738 9C23     		mov	r3, #156
 1136 073a 5B00     		lsl	r3, r3, #1
 1137 073c FB18     		add	r3, r7, r3
 1138 073e 1B68     		ldr	r3, [r3]
 1139 0740 1B04     		lsl	r3, r3, #16
 1140 0742 1B14     		asr	r3, r3, #16
 1141 0744 9A22     		mov	r2, #154
 1142 0746 5200     		lsl	r2, r2, #1
 1143 0748 BA18     		add	r2, r7, r2
 1144 074a 1268     		ldr	r2, [r2]
 1145 074c 1214     		asr	r2, r2, #16
 1146 074e 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1147              		.loc 2 967 0 discriminator 1
 1148 0750 9C23     		mov	r3, #156
 1149 0752 5B00     		lsl	r3, r3, #1
 1150 0754 FB18     		add	r3, r7, r3
 1151 0756 1B68     		ldr	r3, [r3]
 1152 0758 1B14     		asr	r3, r3, #16
 1153 075a 9A21     		mov	r1, #154
 1154 075c 4900     		lsl	r1, r1, #1
 1155 075e 7918     		add	r1, r7, r1
 1156 0760 0968     		ldr	r1, [r1]
 1157 0762 0904     		lsl	r1, r1, #16
 1158 0764 0914     		asr	r1, r1, #16
 1159 0766 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1160              		.loc 2 966 0 discriminator 1
 1161 0768 D218     		add	r2, r2, r3
 1162              		.loc 2 968 0 discriminator 1
 1163 076a 9823     		mov	r3, #152
 1164 076c 5B00     		lsl	r3, r3, #1
 1165 076e FB18     		add	r3, r7, r3
 1166 0770 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1167              		.loc 2 967 0 discriminator 1
 1168 0772 D318     		add	r3, r2, r3
 1169              	.LBE83:
 1170              	.LBE82:
 1171              		.loc 1 328 0 discriminator 1
 1172 0774 F022     		mov	r2, #240
 1173 0776 5200     		lsl	r2, r2, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 45


 1174 0778 BA18     		add	r2, r7, r2
 1175 077a 1360     		str	r3, [r2]
 329:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 330:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc1 +=  x[3] * y[srcBLen - 3] + x[4] * y[srcBLen - 4] */
 331:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc1 = __SMLADX(x3, c0, acc1);
 1176              		.loc 1 331 0 discriminator 1
 1177 077c CE23     		mov	r3, #206
 1178 077e 5B00     		lsl	r3, r3, #1
 1179 0780 FB18     		add	r3, r7, r3
 1180 0782 1968     		ldr	r1, [r3]
 1181 0784 D223     		mov	r3, #210
 1182 0786 5B00     		lsl	r3, r3, #1
 1183 0788 FB18     		add	r3, r7, r3
 1184 078a 1A68     		ldr	r2, [r3]
 1185 078c EE23     		mov	r3, #238
 1186 078e 5B00     		lsl	r3, r3, #1
 1187 0790 FB18     		add	r3, r7, r3
 1188 0792 1B68     		ldr	r3, [r3]
 1189 0794 9620     		mov	r0, #150
 1190 0796 4000     		lsl	r0, r0, #1
 1191 0798 3818     		add	r0, r7, r0
 1192 079a 0160     		str	r1, [r0]
 1193 079c 9421     		mov	r1, #148
 1194 079e 4900     		lsl	r1, r1, #1
 1195 07a0 7918     		add	r1, r7, r1
 1196 07a2 0A60     		str	r2, [r1]
 1197 07a4 9222     		mov	r2, #146
 1198 07a6 5200     		lsl	r2, r2, #1
 1199 07a8 BA18     		add	r2, r7, r2
 1200 07aa 1360     		str	r3, [r2]
 1201              	.LBB84:
 1202              	.LBB85:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1203              		.loc 2 966 0 discriminator 1
 1204 07ac 9623     		mov	r3, #150
 1205 07ae 5B00     		lsl	r3, r3, #1
 1206 07b0 FB18     		add	r3, r7, r3
 1207 07b2 1B68     		ldr	r3, [r3]
 1208 07b4 1B04     		lsl	r3, r3, #16
 1209 07b6 1B14     		asr	r3, r3, #16
 1210 07b8 9422     		mov	r2, #148
 1211 07ba 5200     		lsl	r2, r2, #1
 1212 07bc BA18     		add	r2, r7, r2
 1213 07be 1268     		ldr	r2, [r2]
 1214 07c0 1214     		asr	r2, r2, #16
 1215 07c2 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1216              		.loc 2 967 0 discriminator 1
 1217 07c4 9623     		mov	r3, #150
 1218 07c6 5B00     		lsl	r3, r3, #1
 1219 07c8 FB18     		add	r3, r7, r3
 1220 07ca 1B68     		ldr	r3, [r3]
 1221 07cc 1B14     		asr	r3, r3, #16
 1222 07ce 9421     		mov	r1, #148
 1223 07d0 4900     		lsl	r1, r1, #1
 1224 07d2 7918     		add	r1, r7, r1
 1225 07d4 0968     		ldr	r1, [r1]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 46


 1226 07d6 0904     		lsl	r1, r1, #16
 1227 07d8 0914     		asr	r1, r1, #16
 1228 07da 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1229              		.loc 2 966 0 discriminator 1
 1230 07dc D218     		add	r2, r2, r3
 1231              		.loc 2 968 0 discriminator 1
 1232 07de 9223     		mov	r3, #146
 1233 07e0 5B00     		lsl	r3, r3, #1
 1234 07e2 FB18     		add	r3, r7, r3
 1235 07e4 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1236              		.loc 2 967 0 discriminator 1
 1237 07e6 D318     		add	r3, r2, r3
 1238              	.LBE85:
 1239              	.LBE84:
 1240              		.loc 1 331 0 discriminator 1
 1241 07e8 EE22     		mov	r2, #238
 1242 07ea 5200     		lsl	r2, r2, #1
 1243 07ec BA18     		add	r2, r7, r2
 1244 07ee 1360     		str	r3, [r2]
 332:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 333:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[4], x[5] */
 334:Source\FilteringFunctions/arm_conv_fast_q15.c ****         x0 = _SIMD32_OFFSET(px+2);
 1245              		.loc 1 334 0 discriminator 1
 1246 07f0 7B69     		ldr	r3, [r7, #20]
 1247 07f2 5B68     		ldr	r3, [r3, #4]
 1248 07f4 E622     		mov	r2, #230
 1249 07f6 5200     		lsl	r2, r2, #1
 1250 07f8 BA18     		add	r2, r7, r2
 1251 07fa 1360     		str	r3, [r2]
 335:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 336:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[5], x[6] */
 337:Source\FilteringFunctions/arm_conv_fast_q15.c ****         x1 = _SIMD32_OFFSET(px+3);
 1252              		.loc 1 337 0 discriminator 1
 1253 07fc 7B69     		ldr	r3, [r7, #20]
 1254 07fe 0633     		add	r3, r3, #6
 1255 0800 1B68     		ldr	r3, [r3]
 1256 0802 E422     		mov	r2, #228
 1257 0804 5200     		lsl	r2, r2, #1
 1258 0806 BA18     		add	r2, r7, r2
 1259 0808 1360     		str	r3, [r2]
 338:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		px += 4u;
 1260              		.loc 1 338 0 discriminator 1
 1261 080a 7B69     		ldr	r3, [r7, #20]
 1262 080c 0833     		add	r3, r3, #8
 1263 080e 7B61     		str	r3, [r7, #20]
 339:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 340:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc2 +=  x[4] * y[srcBLen - 3] + x[5] * y[srcBLen - 4] */
 341:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc2 = __SMLADX(x0, c0, acc2);
 1264              		.loc 1 341 0 discriminator 1
 1265 0810 E623     		mov	r3, #230
 1266 0812 5B00     		lsl	r3, r3, #1
 1267 0814 FB18     		add	r3, r7, r3
 1268 0816 1968     		ldr	r1, [r3]
 1269 0818 D223     		mov	r3, #210
 1270 081a 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 47


 1271 081c FB18     		add	r3, r7, r3
 1272 081e 1A68     		ldr	r2, [r3]
 1273 0820 EC23     		mov	r3, #236
 1274 0822 5B00     		lsl	r3, r3, #1
 1275 0824 FB18     		add	r3, r7, r3
 1276 0826 1B68     		ldr	r3, [r3]
 1277 0828 9020     		mov	r0, #144
 1278 082a 4000     		lsl	r0, r0, #1
 1279 082c 3818     		add	r0, r7, r0
 1280 082e 0160     		str	r1, [r0]
 1281 0830 8E21     		mov	r1, #142
 1282 0832 4900     		lsl	r1, r1, #1
 1283 0834 7918     		add	r1, r7, r1
 1284 0836 0A60     		str	r2, [r1]
 1285 0838 8C22     		mov	r2, #140
 1286 083a 5200     		lsl	r2, r2, #1
 1287 083c BA18     		add	r2, r7, r2
 1288 083e 1360     		str	r3, [r2]
 1289              	.LBB86:
 1290              	.LBB87:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1291              		.loc 2 966 0 discriminator 1
 1292 0840 9023     		mov	r3, #144
 1293 0842 5B00     		lsl	r3, r3, #1
 1294 0844 FB18     		add	r3, r7, r3
 1295 0846 1B68     		ldr	r3, [r3]
 1296 0848 1B04     		lsl	r3, r3, #16
 1297 084a 1B14     		asr	r3, r3, #16
 1298 084c 8E22     		mov	r2, #142
 1299 084e 5200     		lsl	r2, r2, #1
 1300 0850 BA18     		add	r2, r7, r2
 1301 0852 1268     		ldr	r2, [r2]
 1302 0854 1214     		asr	r2, r2, #16
 1303 0856 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1304              		.loc 2 967 0 discriminator 1
 1305 0858 9023     		mov	r3, #144
 1306 085a 5B00     		lsl	r3, r3, #1
 1307 085c FB18     		add	r3, r7, r3
 1308 085e 1B68     		ldr	r3, [r3]
 1309 0860 1B14     		asr	r3, r3, #16
 1310 0862 8E21     		mov	r1, #142
 1311 0864 4900     		lsl	r1, r1, #1
 1312 0866 7918     		add	r1, r7, r1
 1313 0868 0968     		ldr	r1, [r1]
 1314 086a 0904     		lsl	r1, r1, #16
 1315 086c 0914     		asr	r1, r1, #16
 1316 086e 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1317              		.loc 2 966 0 discriminator 1
 1318 0870 D218     		add	r2, r2, r3
 1319              		.loc 2 968 0 discriminator 1
 1320 0872 8C23     		mov	r3, #140
 1321 0874 5B00     		lsl	r3, r3, #1
 1322 0876 FB18     		add	r3, r7, r3
 1323 0878 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 48


 1324              		.loc 2 967 0 discriminator 1
 1325 087a D318     		add	r3, r2, r3
 1326              	.LBE87:
 1327              	.LBE86:
 1328              		.loc 1 341 0 discriminator 1
 1329 087c EC22     		mov	r2, #236
 1330 087e 5200     		lsl	r2, r2, #1
 1331 0880 BA18     		add	r2, r7, r2
 1332 0882 1360     		str	r3, [r2]
 342:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 343:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc3 +=  x[5] * y[srcBLen - 3] + x[6] * y[srcBLen - 4] */
 344:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc3 = __SMLADX(x1, c0, acc3);
 1333              		.loc 1 344 0 discriminator 1
 1334 0884 E423     		mov	r3, #228
 1335 0886 5B00     		lsl	r3, r3, #1
 1336 0888 FB18     		add	r3, r7, r3
 1337 088a 1968     		ldr	r1, [r3]
 1338 088c D223     		mov	r3, #210
 1339 088e 5B00     		lsl	r3, r3, #1
 1340 0890 FB18     		add	r3, r7, r3
 1341 0892 1A68     		ldr	r2, [r3]
 1342 0894 EA23     		mov	r3, #234
 1343 0896 5B00     		lsl	r3, r3, #1
 1344 0898 FB18     		add	r3, r7, r3
 1345 089a 1B68     		ldr	r3, [r3]
 1346 089c 8A20     		mov	r0, #138
 1347 089e 4000     		lsl	r0, r0, #1
 1348 08a0 3818     		add	r0, r7, r0
 1349 08a2 0160     		str	r1, [r0]
 1350 08a4 8821     		mov	r1, #136
 1351 08a6 4900     		lsl	r1, r1, #1
 1352 08a8 7918     		add	r1, r7, r1
 1353 08aa 0A60     		str	r2, [r1]
 1354 08ac 8622     		mov	r2, #134
 1355 08ae 5200     		lsl	r2, r2, #1
 1356 08b0 BA18     		add	r2, r7, r2
 1357 08b2 1360     		str	r3, [r2]
 1358              	.LBB88:
 1359              	.LBB89:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1360              		.loc 2 966 0 discriminator 1
 1361 08b4 8A23     		mov	r3, #138
 1362 08b6 5B00     		lsl	r3, r3, #1
 1363 08b8 FB18     		add	r3, r7, r3
 1364 08ba 1B68     		ldr	r3, [r3]
 1365 08bc 1B04     		lsl	r3, r3, #16
 1366 08be 1B14     		asr	r3, r3, #16
 1367 08c0 8822     		mov	r2, #136
 1368 08c2 5200     		lsl	r2, r2, #1
 1369 08c4 BA18     		add	r2, r7, r2
 1370 08c6 1268     		ldr	r2, [r2]
 1371 08c8 1214     		asr	r2, r2, #16
 1372 08ca 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1373              		.loc 2 967 0 discriminator 1
 1374 08cc 8A23     		mov	r3, #138
 1375 08ce 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 49


 1376 08d0 FB18     		add	r3, r7, r3
 1377 08d2 1B68     		ldr	r3, [r3]
 1378 08d4 1B14     		asr	r3, r3, #16
 1379 08d6 8821     		mov	r1, #136
 1380 08d8 4900     		lsl	r1, r1, #1
 1381 08da 7918     		add	r1, r7, r1
 1382 08dc 0968     		ldr	r1, [r1]
 1383 08de 0904     		lsl	r1, r1, #16
 1384 08e0 0914     		asr	r1, r1, #16
 1385 08e2 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1386              		.loc 2 966 0 discriminator 1
 1387 08e4 D218     		add	r2, r2, r3
 1388              		.loc 2 968 0 discriminator 1
 1389 08e6 8623     		mov	r3, #134
 1390 08e8 5B00     		lsl	r3, r3, #1
 1391 08ea FB18     		add	r3, r7, r3
 1392 08ec 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1393              		.loc 2 967 0 discriminator 1
 1394 08ee D318     		add	r3, r2, r3
 1395              	.LBE89:
 1396              	.LBE88:
 1397              		.loc 1 344 0 discriminator 1
 1398 08f0 EA22     		mov	r2, #234
 1399 08f2 5200     		lsl	r2, r2, #1
 1400 08f4 BA18     		add	r2, r7, r2
 1401 08f6 1360     		str	r3, [r2]
 345:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 346:Source\FilteringFunctions/arm_conv_fast_q15.c ****       } while (--k);
 1402              		.loc 1 346 0 discriminator 1
 1403 08f8 DC23     		mov	r3, #220
 1404 08fa 5B00     		lsl	r3, r3, #1
 1405 08fc FB18     		add	r3, r7, r3
 1406 08fe 1B68     		ldr	r3, [r3]
 1407 0900 013B     		sub	r3, r3, #1
 1408 0902 DC22     		mov	r2, #220
 1409 0904 5200     		lsl	r2, r2, #1
 1410 0906 BA18     		add	r2, r7, r2
 1411 0908 1360     		str	r3, [r2]
 1412 090a DC23     		mov	r3, #220
 1413 090c 5B00     		lsl	r3, r3, #1
 1414 090e FB18     		add	r3, r7, r3
 1415 0910 1B68     		ldr	r3, [r3]
 1416 0912 002B     		cmp	r3, #0
 1417 0914 00D0     		beq	.LCB1253
 1418 0916 ECE5     		b	.L29	@long jump
 1419              	.LCB1253:
 347:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 348:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* For the next MAC operations, SIMD is not used
 349:Source\FilteringFunctions/arm_conv_fast_q15.c ****        * So, the 16 bit pointer if inputB, py is updated */
 350:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 351:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
 352:Source\FilteringFunctions/arm_conv_fast_q15.c ****        ** No loop unrolling is used. */
 353:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k = srcBLen % 0x4u;
 1420              		.loc 1 353 0
 1421 0918 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 50


 1422 091a 0322     		mov	r2, #3
 1423 091c 1340     		and	r3, r2
 1424 091e DC22     		mov	r2, #220
 1425 0920 5200     		lsl	r2, r2, #1
 1426 0922 BA18     		add	r2, r7, r2
 1427 0924 1360     		str	r3, [r2]
 354:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 355:Source\FilteringFunctions/arm_conv_fast_q15.c ****       if (k == 1u)
 1428              		.loc 1 355 0
 1429 0926 DC23     		mov	r3, #220
 1430 0928 5B00     		lsl	r3, r3, #1
 1431 092a FB18     		add	r3, r7, r3
 1432 092c 1B68     		ldr	r3, [r3]
 1433 092e 012B     		cmp	r3, #1
 1434 0930 00D0     		beq	.LCB1266
 1435 0932 E7E0     		b	.L30	@long jump
 1436              	.LCB1266:
 356:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
 357:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read y[srcBLen - 5] */
 358:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = *(py+1);
 1437              		.loc 1 358 0
 1438 0934 3B69     		ldr	r3, [r7, #16]
 1439 0936 0233     		add	r3, r3, #2
 1440 0938 1B88     		ldrh	r3, [r3]
 1441 093a 1BB2     		sxth	r3, r3
 1442 093c D222     		mov	r2, #210
 1443 093e 5200     		lsl	r2, r2, #1
 1444 0940 BA18     		add	r2, r7, r2
 1445 0942 1360     		str	r3, [r2]
 359:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 360:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifdef  ARM_MATH_BIG_ENDIAN
 361:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 362:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = c0 << 16u;
 363:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 364:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
 365:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 366:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = c0 & 0x0000FFFF;
 1446              		.loc 1 366 0
 1447 0944 D223     		mov	r3, #210
 1448 0946 5B00     		lsl	r3, r3, #1
 1449 0948 FB18     		add	r3, r7, r3
 1450 094a 1B68     		ldr	r3, [r3]
 1451 094c 1B04     		lsl	r3, r3, #16
 1452 094e 1B0C     		lsr	r3, r3, #16
 1453 0950 D222     		mov	r2, #210
 1454 0952 5200     		lsl	r2, r2, #1
 1455 0954 BA18     		add	r2, r7, r2
 1456 0956 1360     		str	r3, [r2]
 367:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 368:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
 369:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 370:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[7] */
 371:Source\FilteringFunctions/arm_conv_fast_q15.c ****         x3 = *__SIMD32(px);
 1457              		.loc 1 371 0
 1458 0958 1423     		mov	r3, #20
 1459 095a FB18     		add	r3, r7, r3
 1460 095c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 51


 1461 095e 1B68     		ldr	r3, [r3]
 1462 0960 CE22     		mov	r2, #206
 1463 0962 5200     		lsl	r2, r2, #1
 1464 0964 BA18     		add	r2, r7, r2
 1465 0966 1360     		str	r3, [r2]
 372:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		px++;
 1466              		.loc 1 372 0
 1467 0968 7B69     		ldr	r3, [r7, #20]
 1468 096a 0233     		add	r3, r3, #2
 1469 096c 7B61     		str	r3, [r7, #20]
 373:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 374:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulates */
 375:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc0 = __SMLAD(x0, c0, acc0);
 1470              		.loc 1 375 0
 1471 096e E623     		mov	r3, #230
 1472 0970 5B00     		lsl	r3, r3, #1
 1473 0972 FB18     		add	r3, r7, r3
 1474 0974 1968     		ldr	r1, [r3]
 1475 0976 D223     		mov	r3, #210
 1476 0978 5B00     		lsl	r3, r3, #1
 1477 097a FB18     		add	r3, r7, r3
 1478 097c 1A68     		ldr	r2, [r3]
 1479 097e F023     		mov	r3, #240
 1480 0980 5B00     		lsl	r3, r3, #1
 1481 0982 FB18     		add	r3, r7, r3
 1482 0984 1B68     		ldr	r3, [r3]
 1483 0986 8420     		mov	r0, #132
 1484 0988 4000     		lsl	r0, r0, #1
 1485 098a 3818     		add	r0, r7, r0
 1486 098c 0160     		str	r1, [r0]
 1487 098e 791D     		add	r1, r7, #5
 1488 0990 FF31     		add	r1, r1, #255
 1489 0992 0A60     		str	r2, [r1]
 1490 0994 7A1C     		add	r2, r7, #1
 1491 0996 FF32     		add	r2, r2, #255
 1492 0998 1360     		str	r3, [r2]
 1493              	.LBB90:
 1494              	.LBB91:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1495              		.loc 2 952 0
 1496 099a 8423     		mov	r3, #132
 1497 099c 5B00     		lsl	r3, r3, #1
 1498 099e FB18     		add	r3, r7, r3
 1499 09a0 1B68     		ldr	r3, [r3]
 1500 09a2 1B04     		lsl	r3, r3, #16
 1501 09a4 1B14     		asr	r3, r3, #16
 1502 09a6 7A1D     		add	r2, r7, #5
 1503 09a8 FF32     		add	r2, r2, #255
 1504 09aa 1268     		ldr	r2, [r2]
 1505 09ac 1204     		lsl	r2, r2, #16
 1506 09ae 1214     		asr	r2, r2, #16
 1507 09b0 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1508              		.loc 2 953 0
 1509 09b2 8423     		mov	r3, #132
 1510 09b4 5B00     		lsl	r3, r3, #1
 1511 09b6 FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 52


 1512 09b8 1B68     		ldr	r3, [r3]
 1513 09ba 1B14     		asr	r3, r3, #16
 1514 09bc 791D     		add	r1, r7, #5
 1515 09be FF31     		add	r1, r1, #255
 1516 09c0 0968     		ldr	r1, [r1]
 1517 09c2 0914     		asr	r1, r1, #16
 1518 09c4 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1519              		.loc 2 952 0
 1520 09c6 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 1521              		.loc 2 954 0
 1522 09c8 7B1C     		add	r3, r7, #1
 1523 09ca FF33     		add	r3, r3, #255
 1524 09cc 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1525              		.loc 2 953 0
 1526 09ce D318     		add	r3, r2, r3
 1527              	.LBE91:
 1528              	.LBE90:
 1529              		.loc 1 375 0
 1530 09d0 F022     		mov	r2, #240
 1531 09d2 5200     		lsl	r2, r2, #1
 1532 09d4 BA18     		add	r2, r7, r2
 1533 09d6 1360     		str	r3, [r2]
 376:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc1 = __SMLAD(x1, c0, acc1);
 1534              		.loc 1 376 0
 1535 09d8 E423     		mov	r3, #228
 1536 09da 5B00     		lsl	r3, r3, #1
 1537 09dc FB18     		add	r3, r7, r3
 1538 09de 1968     		ldr	r1, [r3]
 1539 09e0 D223     		mov	r3, #210
 1540 09e2 5B00     		lsl	r3, r3, #1
 1541 09e4 FB18     		add	r3, r7, r3
 1542 09e6 1A68     		ldr	r2, [r3]
 1543 09e8 EE23     		mov	r3, #238
 1544 09ea 5B00     		lsl	r3, r3, #1
 1545 09ec FB18     		add	r3, r7, r3
 1546 09ee 1B68     		ldr	r3, [r3]
 1547 09f0 FC20     		mov	r0, #252
 1548 09f2 3818     		add	r0, r7, r0
 1549 09f4 0160     		str	r1, [r0]
 1550 09f6 F821     		mov	r1, #248
 1551 09f8 7918     		add	r1, r7, r1
 1552 09fa 0A60     		str	r2, [r1]
 1553 09fc F422     		mov	r2, #244
 1554 09fe BA18     		add	r2, r7, r2
 1555 0a00 1360     		str	r3, [r2]
 1556              	.LBB92:
 1557              	.LBB93:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1558              		.loc 2 952 0
 1559 0a02 FC23     		mov	r3, #252
 1560 0a04 FB18     		add	r3, r7, r3
 1561 0a06 1B68     		ldr	r3, [r3]
 1562 0a08 1B04     		lsl	r3, r3, #16
 1563 0a0a 1B14     		asr	r3, r3, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 53


 1564 0a0c F822     		mov	r2, #248
 1565 0a0e BA18     		add	r2, r7, r2
 1566 0a10 1268     		ldr	r2, [r2]
 1567 0a12 1204     		lsl	r2, r2, #16
 1568 0a14 1214     		asr	r2, r2, #16
 1569 0a16 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1570              		.loc 2 953 0
 1571 0a18 FC23     		mov	r3, #252
 1572 0a1a FB18     		add	r3, r7, r3
 1573 0a1c 1B68     		ldr	r3, [r3]
 1574 0a1e 1B14     		asr	r3, r3, #16
 1575 0a20 F821     		mov	r1, #248
 1576 0a22 7918     		add	r1, r7, r1
 1577 0a24 0968     		ldr	r1, [r1]
 1578 0a26 0914     		asr	r1, r1, #16
 1579 0a28 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1580              		.loc 2 952 0
 1581 0a2a D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 1582              		.loc 2 954 0
 1583 0a2c F423     		mov	r3, #244
 1584 0a2e FB18     		add	r3, r7, r3
 1585 0a30 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1586              		.loc 2 953 0
 1587 0a32 D318     		add	r3, r2, r3
 1588              	.LBE93:
 1589              	.LBE92:
 1590              		.loc 1 376 0
 1591 0a34 EE22     		mov	r2, #238
 1592 0a36 5200     		lsl	r2, r2, #1
 1593 0a38 BA18     		add	r2, r7, r2
 1594 0a3a 1360     		str	r3, [r2]
 377:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc2 = __SMLADX(x1, c0, acc2);
 1595              		.loc 1 377 0
 1596 0a3c E423     		mov	r3, #228
 1597 0a3e 5B00     		lsl	r3, r3, #1
 1598 0a40 FB18     		add	r3, r7, r3
 1599 0a42 1968     		ldr	r1, [r3]
 1600 0a44 D223     		mov	r3, #210
 1601 0a46 5B00     		lsl	r3, r3, #1
 1602 0a48 FB18     		add	r3, r7, r3
 1603 0a4a 1A68     		ldr	r2, [r3]
 1604 0a4c EC23     		mov	r3, #236
 1605 0a4e 5B00     		lsl	r3, r3, #1
 1606 0a50 FB18     		add	r3, r7, r3
 1607 0a52 1B68     		ldr	r3, [r3]
 1608 0a54 F020     		mov	r0, #240
 1609 0a56 3818     		add	r0, r7, r0
 1610 0a58 0160     		str	r1, [r0]
 1611 0a5a EC21     		mov	r1, #236
 1612 0a5c 7918     		add	r1, r7, r1
 1613 0a5e 0A60     		str	r2, [r1]
 1614 0a60 E822     		mov	r2, #232
 1615 0a62 BA18     		add	r2, r7, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 54


 1616 0a64 1360     		str	r3, [r2]
 1617              	.LBB94:
 1618              	.LBB95:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1619              		.loc 2 966 0
 1620 0a66 F023     		mov	r3, #240
 1621 0a68 FB18     		add	r3, r7, r3
 1622 0a6a 1B68     		ldr	r3, [r3]
 1623 0a6c 1B04     		lsl	r3, r3, #16
 1624 0a6e 1B14     		asr	r3, r3, #16
 1625 0a70 EC22     		mov	r2, #236
 1626 0a72 BA18     		add	r2, r7, r2
 1627 0a74 1268     		ldr	r2, [r2]
 1628 0a76 1214     		asr	r2, r2, #16
 1629 0a78 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1630              		.loc 2 967 0
 1631 0a7a F023     		mov	r3, #240
 1632 0a7c FB18     		add	r3, r7, r3
 1633 0a7e 1B68     		ldr	r3, [r3]
 1634 0a80 1B14     		asr	r3, r3, #16
 1635 0a82 EC21     		mov	r1, #236
 1636 0a84 7918     		add	r1, r7, r1
 1637 0a86 0968     		ldr	r1, [r1]
 1638 0a88 0904     		lsl	r1, r1, #16
 1639 0a8a 0914     		asr	r1, r1, #16
 1640 0a8c 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1641              		.loc 2 966 0
 1642 0a8e D218     		add	r2, r2, r3
 1643              		.loc 2 968 0
 1644 0a90 E823     		mov	r3, #232
 1645 0a92 FB18     		add	r3, r7, r3
 1646 0a94 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1647              		.loc 2 967 0
 1648 0a96 D318     		add	r3, r2, r3
 1649              	.LBE95:
 1650              	.LBE94:
 1651              		.loc 1 377 0
 1652 0a98 EC22     		mov	r2, #236
 1653 0a9a 5200     		lsl	r2, r2, #1
 1654 0a9c BA18     		add	r2, r7, r2
 1655 0a9e 1360     		str	r3, [r2]
 378:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc3 = __SMLADX(x3, c0, acc3);
 1656              		.loc 1 378 0
 1657 0aa0 CE23     		mov	r3, #206
 1658 0aa2 5B00     		lsl	r3, r3, #1
 1659 0aa4 FB18     		add	r3, r7, r3
 1660 0aa6 1968     		ldr	r1, [r3]
 1661 0aa8 D223     		mov	r3, #210
 1662 0aaa 5B00     		lsl	r3, r3, #1
 1663 0aac FB18     		add	r3, r7, r3
 1664 0aae 1A68     		ldr	r2, [r3]
 1665 0ab0 EA23     		mov	r3, #234
 1666 0ab2 5B00     		lsl	r3, r3, #1
 1667 0ab4 FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 55


 1668 0ab6 1B68     		ldr	r3, [r3]
 1669 0ab8 E420     		mov	r0, #228
 1670 0aba 3818     		add	r0, r7, r0
 1671 0abc 0160     		str	r1, [r0]
 1672 0abe E021     		mov	r1, #224
 1673 0ac0 7918     		add	r1, r7, r1
 1674 0ac2 0A60     		str	r2, [r1]
 1675 0ac4 DC22     		mov	r2, #220
 1676 0ac6 BA18     		add	r2, r7, r2
 1677 0ac8 1360     		str	r3, [r2]
 1678              	.LBB96:
 1679              	.LBB97:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1680              		.loc 2 966 0
 1681 0aca E423     		mov	r3, #228
 1682 0acc FB18     		add	r3, r7, r3
 1683 0ace 1B68     		ldr	r3, [r3]
 1684 0ad0 1B04     		lsl	r3, r3, #16
 1685 0ad2 1B14     		asr	r3, r3, #16
 1686 0ad4 E022     		mov	r2, #224
 1687 0ad6 BA18     		add	r2, r7, r2
 1688 0ad8 1268     		ldr	r2, [r2]
 1689 0ada 1214     		asr	r2, r2, #16
 1690 0adc 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1691              		.loc 2 967 0
 1692 0ade E423     		mov	r3, #228
 1693 0ae0 FB18     		add	r3, r7, r3
 1694 0ae2 1B68     		ldr	r3, [r3]
 1695 0ae4 1B14     		asr	r3, r3, #16
 1696 0ae6 E021     		mov	r1, #224
 1697 0ae8 7918     		add	r1, r7, r1
 1698 0aea 0968     		ldr	r1, [r1]
 1699 0aec 0904     		lsl	r1, r1, #16
 1700 0aee 0914     		asr	r1, r1, #16
 1701 0af0 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1702              		.loc 2 966 0
 1703 0af2 D218     		add	r2, r2, r3
 1704              		.loc 2 968 0
 1705 0af4 DC23     		mov	r3, #220
 1706 0af6 FB18     		add	r3, r7, r3
 1707 0af8 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1708              		.loc 2 967 0
 1709 0afa D318     		add	r3, r2, r3
 1710              	.LBE97:
 1711              	.LBE96:
 1712              		.loc 1 378 0
 1713 0afc EA22     		mov	r2, #234
 1714 0afe 5200     		lsl	r2, r2, #1
 1715 0b00 BA18     		add	r2, r7, r2
 1716 0b02 1360     		str	r3, [r2]
 1717              	.L30:
 379:Source\FilteringFunctions/arm_conv_fast_q15.c ****       }
 380:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 381:Source\FilteringFunctions/arm_conv_fast_q15.c ****       if (k == 2u)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 56


 1718              		.loc 1 381 0
 1719 0b04 DC23     		mov	r3, #220
 1720 0b06 5B00     		lsl	r3, r3, #1
 1721 0b08 FB18     		add	r3, r7, r3
 1722 0b0a 1B68     		ldr	r3, [r3]
 1723 0b0c 022B     		cmp	r3, #2
 1724 0b0e 00D0     		beq	.LCB1522
 1725 0b10 DFE0     		b	.L35	@long jump
 1726              	.LCB1522:
 382:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
 383:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read y[srcBLen - 5], y[srcBLen - 6] */
 384:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = _SIMD32_OFFSET(py);
 1727              		.loc 1 384 0
 1728 0b12 3B69     		ldr	r3, [r7, #16]
 1729 0b14 1B68     		ldr	r3, [r3]
 1730 0b16 D222     		mov	r2, #210
 1731 0b18 5200     		lsl	r2, r2, #1
 1732 0b1a BA18     		add	r2, r7, r2
 1733 0b1c 1360     		str	r3, [r2]
 385:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 386:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[7], x[8] */
 387:Source\FilteringFunctions/arm_conv_fast_q15.c ****         x3 = *__SIMD32(px);
 1734              		.loc 1 387 0
 1735 0b1e 1423     		mov	r3, #20
 1736 0b20 FB18     		add	r3, r7, r3
 1737 0b22 1B68     		ldr	r3, [r3]
 1738 0b24 1B68     		ldr	r3, [r3]
 1739 0b26 CE22     		mov	r2, #206
 1740 0b28 5200     		lsl	r2, r2, #1
 1741 0b2a BA18     		add	r2, r7, r2
 1742 0b2c 1360     		str	r3, [r2]
 388:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 389:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[9] */
 390:Source\FilteringFunctions/arm_conv_fast_q15.c ****         x2 = _SIMD32_OFFSET(px+1);
 1743              		.loc 1 390 0
 1744 0b2e 7B69     		ldr	r3, [r7, #20]
 1745 0b30 0233     		add	r3, r3, #2
 1746 0b32 1B68     		ldr	r3, [r3]
 1747 0b34 D022     		mov	r2, #208
 1748 0b36 5200     		lsl	r2, r2, #1
 1749 0b38 BA18     		add	r2, r7, r2
 1750 0b3a 1360     		str	r3, [r2]
 391:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		px += 2u;
 1751              		.loc 1 391 0
 1752 0b3c 7B69     		ldr	r3, [r7, #20]
 1753 0b3e 0433     		add	r3, r3, #4
 1754 0b40 7B61     		str	r3, [r7, #20]
 392:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 393:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulates */
 394:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc0 = __SMLADX(x0, c0, acc0);
 1755              		.loc 1 394 0
 1756 0b42 E623     		mov	r3, #230
 1757 0b44 5B00     		lsl	r3, r3, #1
 1758 0b46 FB18     		add	r3, r7, r3
 1759 0b48 1968     		ldr	r1, [r3]
 1760 0b4a D223     		mov	r3, #210
 1761 0b4c 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 57


 1762 0b4e FB18     		add	r3, r7, r3
 1763 0b50 1A68     		ldr	r2, [r3]
 1764 0b52 F023     		mov	r3, #240
 1765 0b54 5B00     		lsl	r3, r3, #1
 1766 0b56 FB18     		add	r3, r7, r3
 1767 0b58 1B68     		ldr	r3, [r3]
 1768 0b5a D820     		mov	r0, #216
 1769 0b5c 3818     		add	r0, r7, r0
 1770 0b5e 0160     		str	r1, [r0]
 1771 0b60 D421     		mov	r1, #212
 1772 0b62 7918     		add	r1, r7, r1
 1773 0b64 0A60     		str	r2, [r1]
 1774 0b66 D022     		mov	r2, #208
 1775 0b68 BA18     		add	r2, r7, r2
 1776 0b6a 1360     		str	r3, [r2]
 1777              	.LBB98:
 1778              	.LBB99:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1779              		.loc 2 966 0
 1780 0b6c D823     		mov	r3, #216
 1781 0b6e FB18     		add	r3, r7, r3
 1782 0b70 1B68     		ldr	r3, [r3]
 1783 0b72 1B04     		lsl	r3, r3, #16
 1784 0b74 1B14     		asr	r3, r3, #16
 1785 0b76 D422     		mov	r2, #212
 1786 0b78 BA18     		add	r2, r7, r2
 1787 0b7a 1268     		ldr	r2, [r2]
 1788 0b7c 1214     		asr	r2, r2, #16
 1789 0b7e 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1790              		.loc 2 967 0
 1791 0b80 D823     		mov	r3, #216
 1792 0b82 FB18     		add	r3, r7, r3
 1793 0b84 1B68     		ldr	r3, [r3]
 1794 0b86 1B14     		asr	r3, r3, #16
 1795 0b88 D421     		mov	r1, #212
 1796 0b8a 7918     		add	r1, r7, r1
 1797 0b8c 0968     		ldr	r1, [r1]
 1798 0b8e 0904     		lsl	r1, r1, #16
 1799 0b90 0914     		asr	r1, r1, #16
 1800 0b92 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1801              		.loc 2 966 0
 1802 0b94 D218     		add	r2, r2, r3
 1803              		.loc 2 968 0
 1804 0b96 D023     		mov	r3, #208
 1805 0b98 FB18     		add	r3, r7, r3
 1806 0b9a 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1807              		.loc 2 967 0
 1808 0b9c D318     		add	r3, r2, r3
 1809              	.LBE99:
 1810              	.LBE98:
 1811              		.loc 1 394 0
 1812 0b9e F022     		mov	r2, #240
 1813 0ba0 5200     		lsl	r2, r2, #1
 1814 0ba2 BA18     		add	r2, r7, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 58


 1815 0ba4 1360     		str	r3, [r2]
 395:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc1 = __SMLADX(x1, c0, acc1);
 1816              		.loc 1 395 0
 1817 0ba6 E423     		mov	r3, #228
 1818 0ba8 5B00     		lsl	r3, r3, #1
 1819 0baa FB18     		add	r3, r7, r3
 1820 0bac 1968     		ldr	r1, [r3]
 1821 0bae D223     		mov	r3, #210
 1822 0bb0 5B00     		lsl	r3, r3, #1
 1823 0bb2 FB18     		add	r3, r7, r3
 1824 0bb4 1A68     		ldr	r2, [r3]
 1825 0bb6 EE23     		mov	r3, #238
 1826 0bb8 5B00     		lsl	r3, r3, #1
 1827 0bba FB18     		add	r3, r7, r3
 1828 0bbc 1B68     		ldr	r3, [r3]
 1829 0bbe CC20     		mov	r0, #204
 1830 0bc0 3818     		add	r0, r7, r0
 1831 0bc2 0160     		str	r1, [r0]
 1832 0bc4 C821     		mov	r1, #200
 1833 0bc6 7918     		add	r1, r7, r1
 1834 0bc8 0A60     		str	r2, [r1]
 1835 0bca C422     		mov	r2, #196
 1836 0bcc BA18     		add	r2, r7, r2
 1837 0bce 1360     		str	r3, [r2]
 1838              	.LBB100:
 1839              	.LBB101:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1840              		.loc 2 966 0
 1841 0bd0 CC23     		mov	r3, #204
 1842 0bd2 FB18     		add	r3, r7, r3
 1843 0bd4 1B68     		ldr	r3, [r3]
 1844 0bd6 1B04     		lsl	r3, r3, #16
 1845 0bd8 1B14     		asr	r3, r3, #16
 1846 0bda C822     		mov	r2, #200
 1847 0bdc BA18     		add	r2, r7, r2
 1848 0bde 1268     		ldr	r2, [r2]
 1849 0be0 1214     		asr	r2, r2, #16
 1850 0be2 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1851              		.loc 2 967 0
 1852 0be4 CC23     		mov	r3, #204
 1853 0be6 FB18     		add	r3, r7, r3
 1854 0be8 1B68     		ldr	r3, [r3]
 1855 0bea 1B14     		asr	r3, r3, #16
 1856 0bec C821     		mov	r1, #200
 1857 0bee 7918     		add	r1, r7, r1
 1858 0bf0 0968     		ldr	r1, [r1]
 1859 0bf2 0904     		lsl	r1, r1, #16
 1860 0bf4 0914     		asr	r1, r1, #16
 1861 0bf6 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1862              		.loc 2 966 0
 1863 0bf8 D218     		add	r2, r2, r3
 1864              		.loc 2 968 0
 1865 0bfa C423     		mov	r3, #196
 1866 0bfc FB18     		add	r3, r7, r3
 1867 0bfe 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 59


 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1868              		.loc 2 967 0
 1869 0c00 D318     		add	r3, r2, r3
 1870              	.LBE101:
 1871              	.LBE100:
 1872              		.loc 1 395 0
 1873 0c02 EE22     		mov	r2, #238
 1874 0c04 5200     		lsl	r2, r2, #1
 1875 0c06 BA18     		add	r2, r7, r2
 1876 0c08 1360     		str	r3, [r2]
 396:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc2 = __SMLADX(x3, c0, acc2);
 1877              		.loc 1 396 0
 1878 0c0a CE23     		mov	r3, #206
 1879 0c0c 5B00     		lsl	r3, r3, #1
 1880 0c0e FB18     		add	r3, r7, r3
 1881 0c10 1968     		ldr	r1, [r3]
 1882 0c12 D223     		mov	r3, #210
 1883 0c14 5B00     		lsl	r3, r3, #1
 1884 0c16 FB18     		add	r3, r7, r3
 1885 0c18 1A68     		ldr	r2, [r3]
 1886 0c1a EC23     		mov	r3, #236
 1887 0c1c 5B00     		lsl	r3, r3, #1
 1888 0c1e FB18     		add	r3, r7, r3
 1889 0c20 1B68     		ldr	r3, [r3]
 1890 0c22 C020     		mov	r0, #192
 1891 0c24 3818     		add	r0, r7, r0
 1892 0c26 0160     		str	r1, [r0]
 1893 0c28 BC21     		mov	r1, #188
 1894 0c2a 7918     		add	r1, r7, r1
 1895 0c2c 0A60     		str	r2, [r1]
 1896 0c2e B822     		mov	r2, #184
 1897 0c30 BA18     		add	r2, r7, r2
 1898 0c32 1360     		str	r3, [r2]
 1899              	.LBB102:
 1900              	.LBB103:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1901              		.loc 2 966 0
 1902 0c34 C023     		mov	r3, #192
 1903 0c36 FB18     		add	r3, r7, r3
 1904 0c38 1B68     		ldr	r3, [r3]
 1905 0c3a 1B04     		lsl	r3, r3, #16
 1906 0c3c 1B14     		asr	r3, r3, #16
 1907 0c3e BC22     		mov	r2, #188
 1908 0c40 BA18     		add	r2, r7, r2
 1909 0c42 1268     		ldr	r2, [r2]
 1910 0c44 1214     		asr	r2, r2, #16
 1911 0c46 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1912              		.loc 2 967 0
 1913 0c48 C023     		mov	r3, #192
 1914 0c4a FB18     		add	r3, r7, r3
 1915 0c4c 1B68     		ldr	r3, [r3]
 1916 0c4e 1B14     		asr	r3, r3, #16
 1917 0c50 BC21     		mov	r1, #188
 1918 0c52 7918     		add	r1, r7, r1
 1919 0c54 0968     		ldr	r1, [r1]
 1920 0c56 0904     		lsl	r1, r1, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 60


 1921 0c58 0914     		asr	r1, r1, #16
 1922 0c5a 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1923              		.loc 2 966 0
 1924 0c5c D218     		add	r2, r2, r3
 1925              		.loc 2 968 0
 1926 0c5e B823     		mov	r3, #184
 1927 0c60 FB18     		add	r3, r7, r3
 1928 0c62 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1929              		.loc 2 967 0
 1930 0c64 D318     		add	r3, r2, r3
 1931              	.LBE103:
 1932              	.LBE102:
 1933              		.loc 1 396 0
 1934 0c66 EC22     		mov	r2, #236
 1935 0c68 5200     		lsl	r2, r2, #1
 1936 0c6a BA18     		add	r2, r7, r2
 1937 0c6c 1360     		str	r3, [r2]
 397:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc3 = __SMLADX(x2, c0, acc3);
 1938              		.loc 1 397 0
 1939 0c6e D023     		mov	r3, #208
 1940 0c70 5B00     		lsl	r3, r3, #1
 1941 0c72 FB18     		add	r3, r7, r3
 1942 0c74 1968     		ldr	r1, [r3]
 1943 0c76 D223     		mov	r3, #210
 1944 0c78 5B00     		lsl	r3, r3, #1
 1945 0c7a FB18     		add	r3, r7, r3
 1946 0c7c 1A68     		ldr	r2, [r3]
 1947 0c7e EA23     		mov	r3, #234
 1948 0c80 5B00     		lsl	r3, r3, #1
 1949 0c82 FB18     		add	r3, r7, r3
 1950 0c84 1B68     		ldr	r3, [r3]
 1951 0c86 B420     		mov	r0, #180
 1952 0c88 3818     		add	r0, r7, r0
 1953 0c8a 0160     		str	r1, [r0]
 1954 0c8c B021     		mov	r1, #176
 1955 0c8e 7918     		add	r1, r7, r1
 1956 0c90 0A60     		str	r2, [r1]
 1957 0c92 AC22     		mov	r2, #172
 1958 0c94 BA18     		add	r2, r7, r2
 1959 0c96 1360     		str	r3, [r2]
 1960              	.LBB104:
 1961              	.LBB105:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1962              		.loc 2 966 0
 1963 0c98 B423     		mov	r3, #180
 1964 0c9a FB18     		add	r3, r7, r3
 1965 0c9c 1B68     		ldr	r3, [r3]
 1966 0c9e 1B04     		lsl	r3, r3, #16
 1967 0ca0 1B14     		asr	r3, r3, #16
 1968 0ca2 B022     		mov	r2, #176
 1969 0ca4 BA18     		add	r2, r7, r2
 1970 0ca6 1268     		ldr	r2, [r2]
 1971 0ca8 1214     		asr	r2, r2, #16
 1972 0caa 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 61


 1973              		.loc 2 967 0
 1974 0cac B423     		mov	r3, #180
 1975 0cae FB18     		add	r3, r7, r3
 1976 0cb0 1B68     		ldr	r3, [r3]
 1977 0cb2 1B14     		asr	r3, r3, #16
 1978 0cb4 B021     		mov	r1, #176
 1979 0cb6 7918     		add	r1, r7, r1
 1980 0cb8 0968     		ldr	r1, [r1]
 1981 0cba 0904     		lsl	r1, r1, #16
 1982 0cbc 0914     		asr	r1, r1, #16
 1983 0cbe 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1984              		.loc 2 966 0
 1985 0cc0 D218     		add	r2, r2, r3
 1986              		.loc 2 968 0
 1987 0cc2 AC23     		mov	r3, #172
 1988 0cc4 FB18     		add	r3, r7, r3
 1989 0cc6 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1990              		.loc 2 967 0
 1991 0cc8 D318     		add	r3, r2, r3
 1992              	.LBE105:
 1993              	.LBE104:
 1994              		.loc 1 397 0
 1995 0cca EA22     		mov	r2, #234
 1996 0ccc 5200     		lsl	r2, r2, #1
 1997 0cce BA18     		add	r2, r7, r2
 1998 0cd0 1360     		str	r3, [r2]
 1999              	.L35:
 398:Source\FilteringFunctions/arm_conv_fast_q15.c ****       }
 399:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 400:Source\FilteringFunctions/arm_conv_fast_q15.c ****       if (k == 3u)
 2000              		.loc 1 400 0
 2001 0cd2 DC23     		mov	r3, #220
 2002 0cd4 5B00     		lsl	r3, r3, #1
 2003 0cd6 FB18     		add	r3, r7, r3
 2004 0cd8 1B68     		ldr	r3, [r3]
 2005 0cda 032B     		cmp	r3, #3
 2006 0cdc 00D0     		beq	.LCB1770
 2007 0cde 7BE1     		b	.L40	@long jump
 2008              	.LCB1770:
 401:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
 402:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read y[srcBLen - 5], y[srcBLen - 6] */
 403:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = _SIMD32_OFFSET(py);
 2009              		.loc 1 403 0
 2010 0ce0 3B69     		ldr	r3, [r7, #16]
 2011 0ce2 1B68     		ldr	r3, [r3]
 2012 0ce4 D222     		mov	r2, #210
 2013 0ce6 5200     		lsl	r2, r2, #1
 2014 0ce8 BA18     		add	r2, r7, r2
 2015 0cea 1360     		str	r3, [r2]
 404:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 405:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[7], x[8] */
 406:Source\FilteringFunctions/arm_conv_fast_q15.c ****         x3 = *__SIMD32(px);
 2016              		.loc 1 406 0
 2017 0cec 1423     		mov	r3, #20
 2018 0cee FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 62


 2019 0cf0 1B68     		ldr	r3, [r3]
 2020 0cf2 1B68     		ldr	r3, [r3]
 2021 0cf4 CE22     		mov	r2, #206
 2022 0cf6 5200     		lsl	r2, r2, #1
 2023 0cf8 BA18     		add	r2, r7, r2
 2024 0cfa 1360     		str	r3, [r2]
 407:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 408:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[9] */
 409:Source\FilteringFunctions/arm_conv_fast_q15.c ****         x2 = _SIMD32_OFFSET(px+1);
 2025              		.loc 1 409 0
 2026 0cfc 7B69     		ldr	r3, [r7, #20]
 2027 0cfe 0233     		add	r3, r3, #2
 2028 0d00 1B68     		ldr	r3, [r3]
 2029 0d02 D022     		mov	r2, #208
 2030 0d04 5200     		lsl	r2, r2, #1
 2031 0d06 BA18     		add	r2, r7, r2
 2032 0d08 1360     		str	r3, [r2]
 410:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 411:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulates */
 412:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc0 = __SMLADX(x0, c0, acc0);
 2033              		.loc 1 412 0
 2034 0d0a E623     		mov	r3, #230
 2035 0d0c 5B00     		lsl	r3, r3, #1
 2036 0d0e FB18     		add	r3, r7, r3
 2037 0d10 1968     		ldr	r1, [r3]
 2038 0d12 D223     		mov	r3, #210
 2039 0d14 5B00     		lsl	r3, r3, #1
 2040 0d16 FB18     		add	r3, r7, r3
 2041 0d18 1A68     		ldr	r2, [r3]
 2042 0d1a F023     		mov	r3, #240
 2043 0d1c 5B00     		lsl	r3, r3, #1
 2044 0d1e FB18     		add	r3, r7, r3
 2045 0d20 1B68     		ldr	r3, [r3]
 2046 0d22 A820     		mov	r0, #168
 2047 0d24 3818     		add	r0, r7, r0
 2048 0d26 0160     		str	r1, [r0]
 2049 0d28 A421     		mov	r1, #164
 2050 0d2a 7918     		add	r1, r7, r1
 2051 0d2c 0A60     		str	r2, [r1]
 2052 0d2e A022     		mov	r2, #160
 2053 0d30 BA18     		add	r2, r7, r2
 2054 0d32 1360     		str	r3, [r2]
 2055              	.LBB106:
 2056              	.LBB107:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2057              		.loc 2 966 0
 2058 0d34 A823     		mov	r3, #168
 2059 0d36 FB18     		add	r3, r7, r3
 2060 0d38 1B68     		ldr	r3, [r3]
 2061 0d3a 1B04     		lsl	r3, r3, #16
 2062 0d3c 1B14     		asr	r3, r3, #16
 2063 0d3e A422     		mov	r2, #164
 2064 0d40 BA18     		add	r2, r7, r2
 2065 0d42 1268     		ldr	r2, [r2]
 2066 0d44 1214     		asr	r2, r2, #16
 2067 0d46 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 63


 2068              		.loc 2 967 0
 2069 0d48 A823     		mov	r3, #168
 2070 0d4a FB18     		add	r3, r7, r3
 2071 0d4c 1B68     		ldr	r3, [r3]
 2072 0d4e 1B14     		asr	r3, r3, #16
 2073 0d50 A421     		mov	r1, #164
 2074 0d52 7918     		add	r1, r7, r1
 2075 0d54 0968     		ldr	r1, [r1]
 2076 0d56 0904     		lsl	r1, r1, #16
 2077 0d58 0914     		asr	r1, r1, #16
 2078 0d5a 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2079              		.loc 2 966 0
 2080 0d5c D218     		add	r2, r2, r3
 2081              		.loc 2 968 0
 2082 0d5e A023     		mov	r3, #160
 2083 0d60 FB18     		add	r3, r7, r3
 2084 0d62 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2085              		.loc 2 967 0
 2086 0d64 D318     		add	r3, r2, r3
 2087              	.LBE107:
 2088              	.LBE106:
 2089              		.loc 1 412 0
 2090 0d66 F022     		mov	r2, #240
 2091 0d68 5200     		lsl	r2, r2, #1
 2092 0d6a BA18     		add	r2, r7, r2
 2093 0d6c 1360     		str	r3, [r2]
 413:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc1 = __SMLADX(x1, c0, acc1);
 2094              		.loc 1 413 0
 2095 0d6e E423     		mov	r3, #228
 2096 0d70 5B00     		lsl	r3, r3, #1
 2097 0d72 FB18     		add	r3, r7, r3
 2098 0d74 1968     		ldr	r1, [r3]
 2099 0d76 D223     		mov	r3, #210
 2100 0d78 5B00     		lsl	r3, r3, #1
 2101 0d7a FB18     		add	r3, r7, r3
 2102 0d7c 1A68     		ldr	r2, [r3]
 2103 0d7e EE23     		mov	r3, #238
 2104 0d80 5B00     		lsl	r3, r3, #1
 2105 0d82 FB18     		add	r3, r7, r3
 2106 0d84 1B68     		ldr	r3, [r3]
 2107 0d86 9C20     		mov	r0, #156
 2108 0d88 3818     		add	r0, r7, r0
 2109 0d8a 0160     		str	r1, [r0]
 2110 0d8c 9821     		mov	r1, #152
 2111 0d8e 7918     		add	r1, r7, r1
 2112 0d90 0A60     		str	r2, [r1]
 2113 0d92 9422     		mov	r2, #148
 2114 0d94 BA18     		add	r2, r7, r2
 2115 0d96 1360     		str	r3, [r2]
 2116              	.LBB108:
 2117              	.LBB109:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2118              		.loc 2 966 0
 2119 0d98 9C23     		mov	r3, #156
 2120 0d9a FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 64


 2121 0d9c 1B68     		ldr	r3, [r3]
 2122 0d9e 1B04     		lsl	r3, r3, #16
 2123 0da0 1B14     		asr	r3, r3, #16
 2124 0da2 9822     		mov	r2, #152
 2125 0da4 BA18     		add	r2, r7, r2
 2126 0da6 1268     		ldr	r2, [r2]
 2127 0da8 1214     		asr	r2, r2, #16
 2128 0daa 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2129              		.loc 2 967 0
 2130 0dac 9C23     		mov	r3, #156
 2131 0dae FB18     		add	r3, r7, r3
 2132 0db0 1B68     		ldr	r3, [r3]
 2133 0db2 1B14     		asr	r3, r3, #16
 2134 0db4 9821     		mov	r1, #152
 2135 0db6 7918     		add	r1, r7, r1
 2136 0db8 0968     		ldr	r1, [r1]
 2137 0dba 0904     		lsl	r1, r1, #16
 2138 0dbc 0914     		asr	r1, r1, #16
 2139 0dbe 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2140              		.loc 2 966 0
 2141 0dc0 D218     		add	r2, r2, r3
 2142              		.loc 2 968 0
 2143 0dc2 9423     		mov	r3, #148
 2144 0dc4 FB18     		add	r3, r7, r3
 2145 0dc6 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2146              		.loc 2 967 0
 2147 0dc8 D318     		add	r3, r2, r3
 2148              	.LBE109:
 2149              	.LBE108:
 2150              		.loc 1 413 0
 2151 0dca EE22     		mov	r2, #238
 2152 0dcc 5200     		lsl	r2, r2, #1
 2153 0dce BA18     		add	r2, r7, r2
 2154 0dd0 1360     		str	r3, [r2]
 414:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc2 = __SMLADX(x3, c0, acc2);
 2155              		.loc 1 414 0
 2156 0dd2 CE23     		mov	r3, #206
 2157 0dd4 5B00     		lsl	r3, r3, #1
 2158 0dd6 FB18     		add	r3, r7, r3
 2159 0dd8 1968     		ldr	r1, [r3]
 2160 0dda D223     		mov	r3, #210
 2161 0ddc 5B00     		lsl	r3, r3, #1
 2162 0dde FB18     		add	r3, r7, r3
 2163 0de0 1A68     		ldr	r2, [r3]
 2164 0de2 EC23     		mov	r3, #236
 2165 0de4 5B00     		lsl	r3, r3, #1
 2166 0de6 FB18     		add	r3, r7, r3
 2167 0de8 1B68     		ldr	r3, [r3]
 2168 0dea 9020     		mov	r0, #144
 2169 0dec 3818     		add	r0, r7, r0
 2170 0dee 0160     		str	r1, [r0]
 2171 0df0 8C21     		mov	r1, #140
 2172 0df2 7918     		add	r1, r7, r1
 2173 0df4 0A60     		str	r2, [r1]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 65


 2174 0df6 8822     		mov	r2, #136
 2175 0df8 BA18     		add	r2, r7, r2
 2176 0dfa 1360     		str	r3, [r2]
 2177              	.LBB110:
 2178              	.LBB111:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2179              		.loc 2 966 0
 2180 0dfc 9023     		mov	r3, #144
 2181 0dfe FB18     		add	r3, r7, r3
 2182 0e00 1B68     		ldr	r3, [r3]
 2183 0e02 1B04     		lsl	r3, r3, #16
 2184 0e04 1B14     		asr	r3, r3, #16
 2185 0e06 8C22     		mov	r2, #140
 2186 0e08 BA18     		add	r2, r7, r2
 2187 0e0a 1268     		ldr	r2, [r2]
 2188 0e0c 1214     		asr	r2, r2, #16
 2189 0e0e 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2190              		.loc 2 967 0
 2191 0e10 9023     		mov	r3, #144
 2192 0e12 FB18     		add	r3, r7, r3
 2193 0e14 1B68     		ldr	r3, [r3]
 2194 0e16 1B14     		asr	r3, r3, #16
 2195 0e18 8C21     		mov	r1, #140
 2196 0e1a 7918     		add	r1, r7, r1
 2197 0e1c 0968     		ldr	r1, [r1]
 2198 0e1e 0904     		lsl	r1, r1, #16
 2199 0e20 0914     		asr	r1, r1, #16
 2200 0e22 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2201              		.loc 2 966 0
 2202 0e24 D218     		add	r2, r2, r3
 2203              		.loc 2 968 0
 2204 0e26 8823     		mov	r3, #136
 2205 0e28 FB18     		add	r3, r7, r3
 2206 0e2a 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2207              		.loc 2 967 0
 2208 0e2c D318     		add	r3, r2, r3
 2209              	.LBE111:
 2210              	.LBE110:
 2211              		.loc 1 414 0
 2212 0e2e EC22     		mov	r2, #236
 2213 0e30 5200     		lsl	r2, r2, #1
 2214 0e32 BA18     		add	r2, r7, r2
 2215 0e34 1360     		str	r3, [r2]
 415:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc3 = __SMLADX(x2, c0, acc3);
 2216              		.loc 1 415 0
 2217 0e36 D023     		mov	r3, #208
 2218 0e38 5B00     		lsl	r3, r3, #1
 2219 0e3a FB18     		add	r3, r7, r3
 2220 0e3c 1968     		ldr	r1, [r3]
 2221 0e3e D223     		mov	r3, #210
 2222 0e40 5B00     		lsl	r3, r3, #1
 2223 0e42 FB18     		add	r3, r7, r3
 2224 0e44 1A68     		ldr	r2, [r3]
 2225 0e46 EA23     		mov	r3, #234
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 66


 2226 0e48 5B00     		lsl	r3, r3, #1
 2227 0e4a FB18     		add	r3, r7, r3
 2228 0e4c 1B68     		ldr	r3, [r3]
 2229 0e4e 8420     		mov	r0, #132
 2230 0e50 3818     		add	r0, r7, r0
 2231 0e52 0160     		str	r1, [r0]
 2232 0e54 8021     		mov	r1, #128
 2233 0e56 7918     		add	r1, r7, r1
 2234 0e58 0A60     		str	r2, [r1]
 2235 0e5a FB67     		str	r3, [r7, #124]
 2236              	.LBB112:
 2237              	.LBB113:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2238              		.loc 2 966 0
 2239 0e5c 8423     		mov	r3, #132
 2240 0e5e FB18     		add	r3, r7, r3
 2241 0e60 1B68     		ldr	r3, [r3]
 2242 0e62 1B04     		lsl	r3, r3, #16
 2243 0e64 1B14     		asr	r3, r3, #16
 2244 0e66 8022     		mov	r2, #128
 2245 0e68 BA18     		add	r2, r7, r2
 2246 0e6a 1268     		ldr	r2, [r2]
 2247 0e6c 1214     		asr	r2, r2, #16
 2248 0e6e 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2249              		.loc 2 967 0
 2250 0e70 8423     		mov	r3, #132
 2251 0e72 FB18     		add	r3, r7, r3
 2252 0e74 1B68     		ldr	r3, [r3]
 2253 0e76 1B14     		asr	r3, r3, #16
 2254 0e78 8021     		mov	r1, #128
 2255 0e7a 7918     		add	r1, r7, r1
 2256 0e7c 0968     		ldr	r1, [r1]
 2257 0e7e 0904     		lsl	r1, r1, #16
 2258 0e80 0914     		asr	r1, r1, #16
 2259 0e82 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2260              		.loc 2 966 0
 2261 0e84 D218     		add	r2, r2, r3
 2262              		.loc 2 968 0
 2263 0e86 FB6F     		ldr	r3, [r7, #124]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2264              		.loc 2 967 0
 2265 0e88 D318     		add	r3, r2, r3
 2266              	.LBE113:
 2267              	.LBE112:
 2268              		.loc 1 415 0
 2269 0e8a EA22     		mov	r2, #234
 2270 0e8c 5200     		lsl	r2, r2, #1
 2271 0e8e BA18     		add	r2, r7, r2
 2272 0e90 1360     		str	r3, [r2]
 416:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 417:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read y[srcBLen - 7] */
 418:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		c0 = *(py-1);
 2273              		.loc 1 418 0
 2274 0e92 3B69     		ldr	r3, [r7, #16]
 2275 0e94 023B     		sub	r3, r3, #2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 67


 2276 0e96 1B88     		ldrh	r3, [r3]
 2277 0e98 1BB2     		sxth	r3, r3
 2278 0e9a D222     		mov	r2, #210
 2279 0e9c 5200     		lsl	r2, r2, #1
 2280 0e9e BA18     		add	r2, r7, r2
 2281 0ea0 1360     		str	r3, [r2]
 419:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifdef  ARM_MATH_BIG_ENDIAN
 420:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 421:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = c0 << 16u;
 422:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
 423:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 424:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = c0 & 0x0000FFFF;
 2282              		.loc 1 424 0
 2283 0ea2 D223     		mov	r3, #210
 2284 0ea4 5B00     		lsl	r3, r3, #1
 2285 0ea6 FB18     		add	r3, r7, r3
 2286 0ea8 1B68     		ldr	r3, [r3]
 2287 0eaa 1B04     		lsl	r3, r3, #16
 2288 0eac 1B0C     		lsr	r3, r3, #16
 2289 0eae D222     		mov	r2, #210
 2290 0eb0 5200     		lsl	r2, r2, #1
 2291 0eb2 BA18     		add	r2, r7, r2
 2292 0eb4 1360     		str	r3, [r2]
 425:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
 426:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 427:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[10] */
 428:Source\FilteringFunctions/arm_conv_fast_q15.c ****         x3 =  _SIMD32_OFFSET(px+2);
 2293              		.loc 1 428 0
 2294 0eb6 7B69     		ldr	r3, [r7, #20]
 2295 0eb8 5B68     		ldr	r3, [r3, #4]
 2296 0eba CE22     		mov	r2, #206
 2297 0ebc 5200     		lsl	r2, r2, #1
 2298 0ebe BA18     		add	r2, r7, r2
 2299 0ec0 1360     		str	r3, [r2]
 429:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		px += 3u;
 2300              		.loc 1 429 0
 2301 0ec2 7B69     		ldr	r3, [r7, #20]
 2302 0ec4 0633     		add	r3, r3, #6
 2303 0ec6 7B61     		str	r3, [r7, #20]
 430:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 431:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulates */
 432:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc0 = __SMLADX(x1, c0, acc0);
 2304              		.loc 1 432 0
 2305 0ec8 E423     		mov	r3, #228
 2306 0eca 5B00     		lsl	r3, r3, #1
 2307 0ecc FB18     		add	r3, r7, r3
 2308 0ece 1968     		ldr	r1, [r3]
 2309 0ed0 D223     		mov	r3, #210
 2310 0ed2 5B00     		lsl	r3, r3, #1
 2311 0ed4 FB18     		add	r3, r7, r3
 2312 0ed6 1A68     		ldr	r2, [r3]
 2313 0ed8 F023     		mov	r3, #240
 2314 0eda 5B00     		lsl	r3, r3, #1
 2315 0edc FB18     		add	r3, r7, r3
 2316 0ede 1B68     		ldr	r3, [r3]
 2317 0ee0 B967     		str	r1, [r7, #120]
 2318 0ee2 7A67     		str	r2, [r7, #116]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 68


 2319 0ee4 3B67     		str	r3, [r7, #112]
 2320              	.LBB114:
 2321              	.LBB115:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2322              		.loc 2 966 0
 2323 0ee6 BB6F     		ldr	r3, [r7, #120]
 2324 0ee8 1B04     		lsl	r3, r3, #16
 2325 0eea 1B14     		asr	r3, r3, #16
 2326 0eec 7A6F     		ldr	r2, [r7, #116]
 2327 0eee 1214     		asr	r2, r2, #16
 2328 0ef0 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2329              		.loc 2 967 0
 2330 0ef2 BB6F     		ldr	r3, [r7, #120]
 2331 0ef4 1B14     		asr	r3, r3, #16
 2332 0ef6 796F     		ldr	r1, [r7, #116]
 2333 0ef8 0904     		lsl	r1, r1, #16
 2334 0efa 0914     		asr	r1, r1, #16
 2335 0efc 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2336              		.loc 2 966 0
 2337 0efe D218     		add	r2, r2, r3
 2338              		.loc 2 968 0
 2339 0f00 3B6F     		ldr	r3, [r7, #112]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2340              		.loc 2 967 0
 2341 0f02 D318     		add	r3, r2, r3
 2342              	.LBE115:
 2343              	.LBE114:
 2344              		.loc 1 432 0
 2345 0f04 F022     		mov	r2, #240
 2346 0f06 5200     		lsl	r2, r2, #1
 2347 0f08 BA18     		add	r2, r7, r2
 2348 0f0a 1360     		str	r3, [r2]
 433:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc1 = __SMLAD(x2, c0, acc1);
 2349              		.loc 1 433 0
 2350 0f0c D023     		mov	r3, #208
 2351 0f0e 5B00     		lsl	r3, r3, #1
 2352 0f10 FB18     		add	r3, r7, r3
 2353 0f12 1968     		ldr	r1, [r3]
 2354 0f14 D223     		mov	r3, #210
 2355 0f16 5B00     		lsl	r3, r3, #1
 2356 0f18 FB18     		add	r3, r7, r3
 2357 0f1a 1A68     		ldr	r2, [r3]
 2358 0f1c EE23     		mov	r3, #238
 2359 0f1e 5B00     		lsl	r3, r3, #1
 2360 0f20 FB18     		add	r3, r7, r3
 2361 0f22 1B68     		ldr	r3, [r3]
 2362 0f24 F966     		str	r1, [r7, #108]
 2363 0f26 BA66     		str	r2, [r7, #104]
 2364 0f28 7B66     		str	r3, [r7, #100]
 2365              	.LBB116:
 2366              	.LBB117:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 2367              		.loc 2 952 0
 2368 0f2a FB6E     		ldr	r3, [r7, #108]
 2369 0f2c 1B04     		lsl	r3, r3, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 69


 2370 0f2e 1B14     		asr	r3, r3, #16
 2371 0f30 BA6E     		ldr	r2, [r7, #104]
 2372 0f32 1204     		lsl	r2, r2, #16
 2373 0f34 1214     		asr	r2, r2, #16
 2374 0f36 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2375              		.loc 2 953 0
 2376 0f38 FB6E     		ldr	r3, [r7, #108]
 2377 0f3a 1B14     		asr	r3, r3, #16
 2378 0f3c B96E     		ldr	r1, [r7, #104]
 2379 0f3e 0914     		asr	r1, r1, #16
 2380 0f40 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 2381              		.loc 2 952 0
 2382 0f42 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 2383              		.loc 2 954 0
 2384 0f44 7B6E     		ldr	r3, [r7, #100]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2385              		.loc 2 953 0
 2386 0f46 D318     		add	r3, r2, r3
 2387              	.LBE117:
 2388              	.LBE116:
 2389              		.loc 1 433 0
 2390 0f48 EE22     		mov	r2, #238
 2391 0f4a 5200     		lsl	r2, r2, #1
 2392 0f4c BA18     		add	r2, r7, r2
 2393 0f4e 1360     		str	r3, [r2]
 434:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc2 = __SMLADX(x2, c0, acc2);
 2394              		.loc 1 434 0
 2395 0f50 D023     		mov	r3, #208
 2396 0f52 5B00     		lsl	r3, r3, #1
 2397 0f54 FB18     		add	r3, r7, r3
 2398 0f56 1968     		ldr	r1, [r3]
 2399 0f58 D223     		mov	r3, #210
 2400 0f5a 5B00     		lsl	r3, r3, #1
 2401 0f5c FB18     		add	r3, r7, r3
 2402 0f5e 1A68     		ldr	r2, [r3]
 2403 0f60 EC23     		mov	r3, #236
 2404 0f62 5B00     		lsl	r3, r3, #1
 2405 0f64 FB18     		add	r3, r7, r3
 2406 0f66 1B68     		ldr	r3, [r3]
 2407 0f68 3966     		str	r1, [r7, #96]
 2408 0f6a FA65     		str	r2, [r7, #92]
 2409 0f6c BB65     		str	r3, [r7, #88]
 2410              	.LBB118:
 2411              	.LBB119:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2412              		.loc 2 966 0
 2413 0f6e 3B6E     		ldr	r3, [r7, #96]
 2414 0f70 1B04     		lsl	r3, r3, #16
 2415 0f72 1B14     		asr	r3, r3, #16
 2416 0f74 FA6D     		ldr	r2, [r7, #92]
 2417 0f76 1214     		asr	r2, r2, #16
 2418 0f78 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2419              		.loc 2 967 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 70


 2420 0f7a 3B6E     		ldr	r3, [r7, #96]
 2421 0f7c 1B14     		asr	r3, r3, #16
 2422 0f7e F96D     		ldr	r1, [r7, #92]
 2423 0f80 0904     		lsl	r1, r1, #16
 2424 0f82 0914     		asr	r1, r1, #16
 2425 0f84 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2426              		.loc 2 966 0
 2427 0f86 D218     		add	r2, r2, r3
 2428              		.loc 2 968 0
 2429 0f88 BB6D     		ldr	r3, [r7, #88]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2430              		.loc 2 967 0
 2431 0f8a D318     		add	r3, r2, r3
 2432              	.LBE119:
 2433              	.LBE118:
 2434              		.loc 1 434 0
 2435 0f8c EC22     		mov	r2, #236
 2436 0f8e 5200     		lsl	r2, r2, #1
 2437 0f90 BA18     		add	r2, r7, r2
 2438 0f92 1360     		str	r3, [r2]
 435:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc3 = __SMLADX(x3, c0, acc3);
 2439              		.loc 1 435 0
 2440 0f94 CE23     		mov	r3, #206
 2441 0f96 5B00     		lsl	r3, r3, #1
 2442 0f98 FB18     		add	r3, r7, r3
 2443 0f9a 1968     		ldr	r1, [r3]
 2444 0f9c D223     		mov	r3, #210
 2445 0f9e 5B00     		lsl	r3, r3, #1
 2446 0fa0 FB18     		add	r3, r7, r3
 2447 0fa2 1A68     		ldr	r2, [r3]
 2448 0fa4 EA23     		mov	r3, #234
 2449 0fa6 5B00     		lsl	r3, r3, #1
 2450 0fa8 FB18     		add	r3, r7, r3
 2451 0faa 1B68     		ldr	r3, [r3]
 2452 0fac 7965     		str	r1, [r7, #84]
 2453 0fae 3A65     		str	r2, [r7, #80]
 2454 0fb0 FB64     		str	r3, [r7, #76]
 2455              	.LBB120:
 2456              	.LBB121:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2457              		.loc 2 966 0
 2458 0fb2 7B6D     		ldr	r3, [r7, #84]
 2459 0fb4 1B04     		lsl	r3, r3, #16
 2460 0fb6 1B14     		asr	r3, r3, #16
 2461 0fb8 3A6D     		ldr	r2, [r7, #80]
 2462 0fba 1214     		asr	r2, r2, #16
 2463 0fbc 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2464              		.loc 2 967 0
 2465 0fbe 7B6D     		ldr	r3, [r7, #84]
 2466 0fc0 1B14     		asr	r3, r3, #16
 2467 0fc2 396D     		ldr	r1, [r7, #80]
 2468 0fc4 0904     		lsl	r1, r1, #16
 2469 0fc6 0914     		asr	r1, r1, #16
 2470 0fc8 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 71


 2471              		.loc 2 966 0
 2472 0fca D218     		add	r2, r2, r3
 2473              		.loc 2 968 0
 2474 0fcc FB6C     		ldr	r3, [r7, #76]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2475              		.loc 2 967 0
 2476 0fce D318     		add	r3, r2, r3
 2477              	.LBE121:
 2478              	.LBE120:
 2479              		.loc 1 435 0
 2480 0fd0 EA22     		mov	r2, #234
 2481 0fd2 5200     		lsl	r2, r2, #1
 2482 0fd4 BA18     		add	r2, r7, r2
 2483 0fd6 1360     		str	r3, [r2]
 2484              	.L40:
 436:Source\FilteringFunctions/arm_conv_fast_q15.c ****       }
 437:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 438:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Store the results in the accumulators in the destination buffer. */
 439:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 440:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 441:Source\FilteringFunctions/arm_conv_fast_q15.c ****       *__SIMD32(pOut)++ = __PKHBT((acc0 >> 15), (acc1 >> 15), 16);
 2485              		.loc 1 441 0
 2486 0fd8 1823     		mov	r3, #24
 2487 0fda FB18     		add	r3, r7, r3
 2488 0fdc 1A68     		ldr	r2, [r3]
 2489 0fde 111D     		add	r1, r2, #4
 2490 0fe0 1960     		str	r1, [r3]
 2491 0fe2 F023     		mov	r3, #240
 2492 0fe4 5B00     		lsl	r3, r3, #1
 2493 0fe6 FB18     		add	r3, r7, r3
 2494 0fe8 1B68     		ldr	r3, [r3]
 2495 0fea DB13     		asr	r3, r3, #15
 2496 0fec 1B04     		lsl	r3, r3, #16
 2497 0fee 190C     		lsr	r1, r3, #16
 2498 0ff0 EE23     		mov	r3, #238
 2499 0ff2 5B00     		lsl	r3, r3, #1
 2500 0ff4 FB18     		add	r3, r7, r3
 2501 0ff6 1B68     		ldr	r3, [r3]
 2502 0ff8 DB13     		asr	r3, r3, #15
 2503 0ffa 1B04     		lsl	r3, r3, #16
 2504 0ffc 0B43     		orr	r3, r1
 2505 0ffe 1360     		str	r3, [r2]
 442:Source\FilteringFunctions/arm_conv_fast_q15.c ****       *__SIMD32(pOut)++ = __PKHBT((acc2 >> 15), (acc3 >> 15), 16);
 2506              		.loc 1 442 0
 2507 1000 1823     		mov	r3, #24
 2508 1002 FB18     		add	r3, r7, r3
 2509 1004 1A68     		ldr	r2, [r3]
 2510 1006 111D     		add	r1, r2, #4
 2511 1008 1960     		str	r1, [r3]
 2512 100a EC23     		mov	r3, #236
 2513 100c 5B00     		lsl	r3, r3, #1
 2514 100e FB18     		add	r3, r7, r3
 2515 1010 1B68     		ldr	r3, [r3]
 2516 1012 DB13     		asr	r3, r3, #15
 2517 1014 1B04     		lsl	r3, r3, #16
 2518 1016 190C     		lsr	r1, r3, #16
 2519 1018 EA23     		mov	r3, #234
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 72


 2520 101a 5B00     		lsl	r3, r3, #1
 2521 101c FB18     		add	r3, r7, r3
 2522 101e 1B68     		ldr	r3, [r3]
 2523 1020 DB13     		asr	r3, r3, #15
 2524 1022 1B04     		lsl	r3, r3, #16
 2525 1024 0B43     		orr	r3, r1
 2526 1026 1360     		str	r3, [r2]
 443:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 444:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
 445:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 446:Source\FilteringFunctions/arm_conv_fast_q15.c ****       *__SIMD32(pOut)++ = __PKHBT((acc1 >> 15), (acc0 >> 15), 16);
 447:Source\FilteringFunctions/arm_conv_fast_q15.c ****       *__SIMD32(pOut)++ = __PKHBT((acc3 >> 15), (acc2 >> 15), 16);
 448:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 449:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif /*      #ifndef  ARM_MATH_BIG_ENDIAN    */
 450:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 451:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Increment the pointer pIn1 index, count by 4 */
 452:Source\FilteringFunctions/arm_conv_fast_q15.c ****       count += 4u;
 2527              		.loc 1 452 0
 2528 1028 DA23     		mov	r3, #218
 2529 102a 5B00     		lsl	r3, r3, #1
 2530 102c FB18     		add	r3, r7, r3
 2531 102e 1B68     		ldr	r3, [r3]
 2532 1030 0433     		add	r3, r3, #4
 2533 1032 DA22     		mov	r2, #218
 2534 1034 5200     		lsl	r2, r2, #1
 2535 1036 BA18     		add	r2, r7, r2
 2536 1038 1360     		str	r3, [r2]
 453:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 454:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 455:Source\FilteringFunctions/arm_conv_fast_q15.c ****       px = pIn1 + count;
 2537              		.loc 1 455 0
 2538 103a DA23     		mov	r3, #218
 2539 103c 5B00     		lsl	r3, r3, #1
 2540 103e FB18     		add	r3, r7, r3
 2541 1040 1B68     		ldr	r3, [r3]
 2542 1042 5B00     		lsl	r3, r3, #1
 2543 1044 F622     		mov	r2, #246
 2544 1046 5200     		lsl	r2, r2, #1
 2545 1048 BA18     		add	r2, r7, r2
 2546 104a 1268     		ldr	r2, [r2]
 2547 104c D318     		add	r3, r2, r3
 2548 104e 7B61     		str	r3, [r7, #20]
 456:Source\FilteringFunctions/arm_conv_fast_q15.c ****       py = pSrc2;
 2549              		.loc 1 456 0
 2550 1050 D423     		mov	r3, #212
 2551 1052 5B00     		lsl	r3, r3, #1
 2552 1054 FB18     		add	r3, r7, r3
 2553 1056 1B68     		ldr	r3, [r3]
 2554 1058 3B61     		str	r3, [r7, #16]
 457:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 458:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
 459:Source\FilteringFunctions/arm_conv_fast_q15.c ****       blkCnt--;
 2555              		.loc 1 459 0
 2556 105a D823     		mov	r3, #216
 2557 105c 5B00     		lsl	r3, r3, #1
 2558 105e FB18     		add	r3, r7, r3
 2559 1060 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 73


 2560 1062 013B     		sub	r3, r3, #1
 2561 1064 D822     		mov	r2, #216
 2562 1066 5200     		lsl	r2, r2, #1
 2563 1068 BA18     		add	r2, r7, r2
 2564 106a 1360     		str	r3, [r2]
 2565              	.L20:
 277:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 2566              		.loc 1 277 0
 2567 106c D823     		mov	r3, #216
 2568 106e 5B00     		lsl	r3, r3, #1
 2569 1070 FB18     		add	r3, r7, r3
 2570 1072 1B68     		ldr	r3, [r3]
 2571 1074 002B     		cmp	r3, #0
 2572 1076 01D0     		beq	.LCB2266
 2573 1078 FFF70CFA 		bl	.L49	@far jump
 2574              	.LCB2266:
 460:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
 461:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 462:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.
 463:Source\FilteringFunctions/arm_conv_fast_q15.c ****      ** No loop unrolling is used. */
 464:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blkCnt = blockSize2 % 0x4u;
 2575              		.loc 1 464 0
 2576 107c D623     		mov	r3, #214
 2577 107e 5B00     		lsl	r3, r3, #1
 2578 1080 FB18     		add	r3, r7, r3
 2579 1082 1B68     		ldr	r3, [r3]
 2580 1084 0322     		mov	r2, #3
 2581 1086 1340     		and	r3, r2
 2582 1088 D822     		mov	r2, #216
 2583 108a 5200     		lsl	r2, r2, #1
 2584 108c BA18     		add	r2, r7, r2
 2585 108e 1360     		str	r3, [r2]
 465:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 466:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (blkCnt > 0u)
 2586              		.loc 1 466 0
 2587 1090 C1E0     		b	.L50
 2588              	.L55:
 467:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 468:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Accumulator is made zero for every iteration */
 469:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum = 0;
 2589              		.loc 1 469 0
 2590 1092 0023     		mov	r3, #0
 2591 1094 F222     		mov	r2, #242
 2592 1096 5200     		lsl	r2, r2, #1
 2593 1098 BA18     		add	r2, r7, r2
 2594 109a 1360     		str	r3, [r2]
 470:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 471:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 472:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k = srcBLen >> 2u;
 2595              		.loc 1 472 0
 2596 109c 3B68     		ldr	r3, [r7]
 2597 109e 9B08     		lsr	r3, r3, #2
 2598 10a0 DC22     		mov	r2, #220
 2599 10a2 5200     		lsl	r2, r2, #1
 2600 10a4 BA18     		add	r2, r7, r2
 2601 10a6 1360     		str	r3, [r2]
 473:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 74


 474:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 475:Source\FilteringFunctions/arm_conv_fast_q15.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 476:Source\FilteringFunctions/arm_conv_fast_q15.c ****       while (k > 0u)
 2602              		.loc 1 476 0
 2603 10a8 58E0     		b	.L51
 2604              	.L52:
 477:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
 478:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulates */
 479:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 2605              		.loc 1 479 0
 2606 10aa 7B69     		ldr	r3, [r7, #20]
 2607 10ac 9A1C     		add	r2, r3, #2
 2608 10ae 7A61     		str	r2, [r7, #20]
 2609 10b0 1B88     		ldrh	r3, [r3]
 2610 10b2 1AB2     		sxth	r2, r3
 2611 10b4 3B69     		ldr	r3, [r7, #16]
 2612 10b6 991E     		sub	r1, r3, #2
 2613 10b8 3961     		str	r1, [r7, #16]
 2614 10ba 1B88     		ldrh	r3, [r3]
 2615 10bc 1BB2     		sxth	r3, r3
 2616 10be 5343     		mul	r3, r2
 2617 10c0 F222     		mov	r2, #242
 2618 10c2 5200     		lsl	r2, r2, #1
 2619 10c4 BA18     		add	r2, r7, r2
 2620 10c6 1268     		ldr	r2, [r2]
 2621 10c8 D318     		add	r3, r2, r3
 2622 10ca F222     		mov	r2, #242
 2623 10cc 5200     		lsl	r2, r2, #1
 2624 10ce BA18     		add	r2, r7, r2
 2625 10d0 1360     		str	r3, [r2]
 480:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 2626              		.loc 1 480 0
 2627 10d2 7B69     		ldr	r3, [r7, #20]
 2628 10d4 9A1C     		add	r2, r3, #2
 2629 10d6 7A61     		str	r2, [r7, #20]
 2630 10d8 1B88     		ldrh	r3, [r3]
 2631 10da 1AB2     		sxth	r2, r3
 2632 10dc 3B69     		ldr	r3, [r7, #16]
 2633 10de 991E     		sub	r1, r3, #2
 2634 10e0 3961     		str	r1, [r7, #16]
 2635 10e2 1B88     		ldrh	r3, [r3]
 2636 10e4 1BB2     		sxth	r3, r3
 2637 10e6 5343     		mul	r3, r2
 2638 10e8 F222     		mov	r2, #242
 2639 10ea 5200     		lsl	r2, r2, #1
 2640 10ec BA18     		add	r2, r7, r2
 2641 10ee 1268     		ldr	r2, [r2]
 2642 10f0 D318     		add	r3, r2, r3
 2643 10f2 F222     		mov	r2, #242
 2644 10f4 5200     		lsl	r2, r2, #1
 2645 10f6 BA18     		add	r2, r7, r2
 2646 10f8 1360     		str	r3, [r2]
 481:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 2647              		.loc 1 481 0
 2648 10fa 7B69     		ldr	r3, [r7, #20]
 2649 10fc 9A1C     		add	r2, r3, #2
 2650 10fe 7A61     		str	r2, [r7, #20]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 75


 2651 1100 1B88     		ldrh	r3, [r3]
 2652 1102 1AB2     		sxth	r2, r3
 2653 1104 3B69     		ldr	r3, [r7, #16]
 2654 1106 991E     		sub	r1, r3, #2
 2655 1108 3961     		str	r1, [r7, #16]
 2656 110a 1B88     		ldrh	r3, [r3]
 2657 110c 1BB2     		sxth	r3, r3
 2658 110e 5343     		mul	r3, r2
 2659 1110 F222     		mov	r2, #242
 2660 1112 5200     		lsl	r2, r2, #1
 2661 1114 BA18     		add	r2, r7, r2
 2662 1116 1268     		ldr	r2, [r2]
 2663 1118 D318     		add	r3, r2, r3
 2664 111a F222     		mov	r2, #242
 2665 111c 5200     		lsl	r2, r2, #1
 2666 111e BA18     		add	r2, r7, r2
 2667 1120 1360     		str	r3, [r2]
 482:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 2668              		.loc 1 482 0
 2669 1122 7B69     		ldr	r3, [r7, #20]
 2670 1124 9A1C     		add	r2, r3, #2
 2671 1126 7A61     		str	r2, [r7, #20]
 2672 1128 1B88     		ldrh	r3, [r3]
 2673 112a 1AB2     		sxth	r2, r3
 2674 112c 3B69     		ldr	r3, [r7, #16]
 2675 112e 991E     		sub	r1, r3, #2
 2676 1130 3961     		str	r1, [r7, #16]
 2677 1132 1B88     		ldrh	r3, [r3]
 2678 1134 1BB2     		sxth	r3, r3
 2679 1136 5343     		mul	r3, r2
 2680 1138 F222     		mov	r2, #242
 2681 113a 5200     		lsl	r2, r2, #1
 2682 113c BA18     		add	r2, r7, r2
 2683 113e 1268     		ldr	r2, [r2]
 2684 1140 D318     		add	r3, r2, r3
 2685 1142 F222     		mov	r2, #242
 2686 1144 5200     		lsl	r2, r2, #1
 2687 1146 BA18     		add	r2, r7, r2
 2688 1148 1360     		str	r3, [r2]
 483:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 484:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Decrement the loop counter */
 485:Source\FilteringFunctions/arm_conv_fast_q15.c ****         k--;
 2689              		.loc 1 485 0
 2690 114a DC23     		mov	r3, #220
 2691 114c 5B00     		lsl	r3, r3, #1
 2692 114e FB18     		add	r3, r7, r3
 2693 1150 1B68     		ldr	r3, [r3]
 2694 1152 013B     		sub	r3, r3, #1
 2695 1154 DC22     		mov	r2, #220
 2696 1156 5200     		lsl	r2, r2, #1
 2697 1158 BA18     		add	r2, r7, r2
 2698 115a 1360     		str	r3, [r2]
 2699              	.L51:
 476:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
 2700              		.loc 1 476 0
 2701 115c DC23     		mov	r3, #220
 2702 115e 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 76


 2703 1160 FB18     		add	r3, r7, r3
 2704 1162 1B68     		ldr	r3, [r3]
 2705 1164 002B     		cmp	r3, #0
 2706 1166 A0D1     		bne	.L52
 486:Source\FilteringFunctions/arm_conv_fast_q15.c ****       }
 487:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 488:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
 489:Source\FilteringFunctions/arm_conv_fast_q15.c ****        ** No loop unrolling is used. */
 490:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k = srcBLen % 0x4u;
 2707              		.loc 1 490 0
 2708 1168 3B68     		ldr	r3, [r7]
 2709 116a 0322     		mov	r2, #3
 2710 116c 1340     		and	r3, r2
 2711 116e DC22     		mov	r2, #220
 2712 1170 5200     		lsl	r2, r2, #1
 2713 1172 BA18     		add	r2, r7, r2
 2714 1174 1360     		str	r3, [r2]
 491:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 492:Source\FilteringFunctions/arm_conv_fast_q15.c ****       while (k > 0u)
 2715              		.loc 1 492 0
 2716 1176 1CE0     		b	.L53
 2717              	.L54:
 493:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
 494:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulates */
 495:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 2718              		.loc 1 495 0
 2719 1178 7B69     		ldr	r3, [r7, #20]
 2720 117a 9A1C     		add	r2, r3, #2
 2721 117c 7A61     		str	r2, [r7, #20]
 2722 117e 1B88     		ldrh	r3, [r3]
 2723 1180 1AB2     		sxth	r2, r3
 2724 1182 3B69     		ldr	r3, [r7, #16]
 2725 1184 991E     		sub	r1, r3, #2
 2726 1186 3961     		str	r1, [r7, #16]
 2727 1188 1B88     		ldrh	r3, [r3]
 2728 118a 1BB2     		sxth	r3, r3
 2729 118c 5343     		mul	r3, r2
 2730 118e F222     		mov	r2, #242
 2731 1190 5200     		lsl	r2, r2, #1
 2732 1192 BA18     		add	r2, r7, r2
 2733 1194 1268     		ldr	r2, [r2]
 2734 1196 D318     		add	r3, r2, r3
 2735 1198 F222     		mov	r2, #242
 2736 119a 5200     		lsl	r2, r2, #1
 2737 119c BA18     		add	r2, r7, r2
 2738 119e 1360     		str	r3, [r2]
 496:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 497:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Decrement the loop counter */
 498:Source\FilteringFunctions/arm_conv_fast_q15.c ****         k--;
 2739              		.loc 1 498 0
 2740 11a0 DC23     		mov	r3, #220
 2741 11a2 5B00     		lsl	r3, r3, #1
 2742 11a4 FB18     		add	r3, r7, r3
 2743 11a6 1B68     		ldr	r3, [r3]
 2744 11a8 013B     		sub	r3, r3, #1
 2745 11aa DC22     		mov	r2, #220
 2746 11ac 5200     		lsl	r2, r2, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 77


 2747 11ae BA18     		add	r2, r7, r2
 2748 11b0 1360     		str	r3, [r2]
 2749              	.L53:
 492:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
 2750              		.loc 1 492 0
 2751 11b2 DC23     		mov	r3, #220
 2752 11b4 5B00     		lsl	r3, r3, #1
 2753 11b6 FB18     		add	r3, r7, r3
 2754 11b8 1B68     		ldr	r3, [r3]
 2755 11ba 002B     		cmp	r3, #0
 2756 11bc DCD1     		bne	.L54
 499:Source\FilteringFunctions/arm_conv_fast_q15.c ****       }
 500:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 501:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Store the result in the accumulator in the destination buffer. */
 502:Source\FilteringFunctions/arm_conv_fast_q15.c ****       *pOut++ = (q15_t) (sum >> 15);
 2757              		.loc 1 502 0
 2758 11be BB69     		ldr	r3, [r7, #24]
 2759 11c0 9A1C     		add	r2, r3, #2
 2760 11c2 BA61     		str	r2, [r7, #24]
 2761 11c4 F222     		mov	r2, #242
 2762 11c6 5200     		lsl	r2, r2, #1
 2763 11c8 BA18     		add	r2, r7, r2
 2764 11ca 1268     		ldr	r2, [r2]
 2765 11cc D213     		asr	r2, r2, #15
 2766 11ce 92B2     		uxth	r2, r2
 2767 11d0 1A80     		strh	r2, [r3]
 503:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 504:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Increment the pointer pIn1 index, count by 1 */
 505:Source\FilteringFunctions/arm_conv_fast_q15.c ****       count++;
 2768              		.loc 1 505 0
 2769 11d2 DA23     		mov	r3, #218
 2770 11d4 5B00     		lsl	r3, r3, #1
 2771 11d6 FB18     		add	r3, r7, r3
 2772 11d8 1B68     		ldr	r3, [r3]
 2773 11da 0133     		add	r3, r3, #1
 2774 11dc DA22     		mov	r2, #218
 2775 11de 5200     		lsl	r2, r2, #1
 2776 11e0 BA18     		add	r2, r7, r2
 2777 11e2 1360     		str	r3, [r2]
 506:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 507:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 508:Source\FilteringFunctions/arm_conv_fast_q15.c ****       px = pIn1 + count;
 2778              		.loc 1 508 0
 2779 11e4 DA23     		mov	r3, #218
 2780 11e6 5B00     		lsl	r3, r3, #1
 2781 11e8 FB18     		add	r3, r7, r3
 2782 11ea 1B68     		ldr	r3, [r3]
 2783 11ec 5B00     		lsl	r3, r3, #1
 2784 11ee F622     		mov	r2, #246
 2785 11f0 5200     		lsl	r2, r2, #1
 2786 11f2 BA18     		add	r2, r7, r2
 2787 11f4 1268     		ldr	r2, [r2]
 2788 11f6 D318     		add	r3, r2, r3
 2789 11f8 7B61     		str	r3, [r7, #20]
 509:Source\FilteringFunctions/arm_conv_fast_q15.c ****       py = pSrc2;
 2790              		.loc 1 509 0
 2791 11fa D423     		mov	r3, #212
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 78


 2792 11fc 5B00     		lsl	r3, r3, #1
 2793 11fe FB18     		add	r3, r7, r3
 2794 1200 1B68     		ldr	r3, [r3]
 2795 1202 3B61     		str	r3, [r7, #16]
 510:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 511:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
 512:Source\FilteringFunctions/arm_conv_fast_q15.c ****       blkCnt--;
 2796              		.loc 1 512 0
 2797 1204 D823     		mov	r3, #216
 2798 1206 5B00     		lsl	r3, r3, #1
 2799 1208 FB18     		add	r3, r7, r3
 2800 120a 1B68     		ldr	r3, [r3]
 2801 120c 013B     		sub	r3, r3, #1
 2802 120e D822     		mov	r2, #216
 2803 1210 5200     		lsl	r2, r2, #1
 2804 1212 BA18     		add	r2, r7, r2
 2805 1214 1360     		str	r3, [r2]
 2806              	.L50:
 466:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 2807              		.loc 1 466 0
 2808 1216 D823     		mov	r3, #216
 2809 1218 5B00     		lsl	r3, r3, #1
 2810 121a FB18     		add	r3, r7, r3
 2811 121c 1B68     		ldr	r3, [r3]
 2812 121e 002B     		cmp	r3, #0
 2813 1220 00D0     		beq	.LCB2492
 2814 1222 36E7     		b	.L55	@long jump
 2815              	.LCB2492:
 2816 1224 68E0     		b	.L56
 2817              	.L19:
 513:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
 514:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
 515:Source\FilteringFunctions/arm_conv_fast_q15.c ****   else
 516:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 517:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* If the srcBLen is not a multiple of 4,
 518:Source\FilteringFunctions/arm_conv_fast_q15.c ****      * the blockSize2 loop cannot be unrolled by 4 */
 519:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blkCnt = blockSize2;
 2818              		.loc 1 519 0
 2819 1226 D623     		mov	r3, #214
 2820 1228 5B00     		lsl	r3, r3, #1
 2821 122a FB18     		add	r3, r7, r3
 2822 122c 1B68     		ldr	r3, [r3]
 2823 122e D822     		mov	r2, #216
 2824 1230 5200     		lsl	r2, r2, #1
 2825 1232 BA18     		add	r2, r7, r2
 2826 1234 1360     		str	r3, [r2]
 520:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 521:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (blkCnt > 0u)
 2827              		.loc 1 521 0
 2828 1236 59E0     		b	.L57
 2829              	.L60:
 522:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 523:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Accumulator is made zero for every iteration */
 524:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum = 0;
 2830              		.loc 1 524 0
 2831 1238 0023     		mov	r3, #0
 2832 123a F222     		mov	r2, #242
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 79


 2833 123c 5200     		lsl	r2, r2, #1
 2834 123e BA18     		add	r2, r7, r2
 2835 1240 1360     		str	r3, [r2]
 525:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 526:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* srcBLen number of MACS should be performed */
 527:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k = srcBLen;
 2836              		.loc 1 527 0
 2837 1242 3B68     		ldr	r3, [r7]
 2838 1244 DC22     		mov	r2, #220
 2839 1246 5200     		lsl	r2, r2, #1
 2840 1248 BA18     		add	r2, r7, r2
 2841 124a 1360     		str	r3, [r2]
 528:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 529:Source\FilteringFunctions/arm_conv_fast_q15.c ****       while (k > 0u)
 2842              		.loc 1 529 0
 2843 124c 1CE0     		b	.L58
 2844              	.L59:
 530:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
 531:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulate */
 532:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 2845              		.loc 1 532 0
 2846 124e 7B69     		ldr	r3, [r7, #20]
 2847 1250 9A1C     		add	r2, r3, #2
 2848 1252 7A61     		str	r2, [r7, #20]
 2849 1254 1B88     		ldrh	r3, [r3]
 2850 1256 1AB2     		sxth	r2, r3
 2851 1258 3B69     		ldr	r3, [r7, #16]
 2852 125a 991E     		sub	r1, r3, #2
 2853 125c 3961     		str	r1, [r7, #16]
 2854 125e 1B88     		ldrh	r3, [r3]
 2855 1260 1BB2     		sxth	r3, r3
 2856 1262 5343     		mul	r3, r2
 2857 1264 F222     		mov	r2, #242
 2858 1266 5200     		lsl	r2, r2, #1
 2859 1268 BA18     		add	r2, r7, r2
 2860 126a 1268     		ldr	r2, [r2]
 2861 126c D318     		add	r3, r2, r3
 2862 126e F222     		mov	r2, #242
 2863 1270 5200     		lsl	r2, r2, #1
 2864 1272 BA18     		add	r2, r7, r2
 2865 1274 1360     		str	r3, [r2]
 533:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 534:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Decrement the loop counter */
 535:Source\FilteringFunctions/arm_conv_fast_q15.c ****         k--;
 2866              		.loc 1 535 0
 2867 1276 DC23     		mov	r3, #220
 2868 1278 5B00     		lsl	r3, r3, #1
 2869 127a FB18     		add	r3, r7, r3
 2870 127c 1B68     		ldr	r3, [r3]
 2871 127e 013B     		sub	r3, r3, #1
 2872 1280 DC22     		mov	r2, #220
 2873 1282 5200     		lsl	r2, r2, #1
 2874 1284 BA18     		add	r2, r7, r2
 2875 1286 1360     		str	r3, [r2]
 2876              	.L58:
 529:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
 2877              		.loc 1 529 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 80


 2878 1288 DC23     		mov	r3, #220
 2879 128a 5B00     		lsl	r3, r3, #1
 2880 128c FB18     		add	r3, r7, r3
 2881 128e 1B68     		ldr	r3, [r3]
 2882 1290 002B     		cmp	r3, #0
 2883 1292 DCD1     		bne	.L59
 536:Source\FilteringFunctions/arm_conv_fast_q15.c ****       }
 537:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 538:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Store the result in the accumulator in the destination buffer. */
 539:Source\FilteringFunctions/arm_conv_fast_q15.c ****       *pOut++ = (q15_t) (sum >> 15);
 2884              		.loc 1 539 0
 2885 1294 BB69     		ldr	r3, [r7, #24]
 2886 1296 9A1C     		add	r2, r3, #2
 2887 1298 BA61     		str	r2, [r7, #24]
 2888 129a F222     		mov	r2, #242
 2889 129c 5200     		lsl	r2, r2, #1
 2890 129e BA18     		add	r2, r7, r2
 2891 12a0 1268     		ldr	r2, [r2]
 2892 12a2 D213     		asr	r2, r2, #15
 2893 12a4 92B2     		uxth	r2, r2
 2894 12a6 1A80     		strh	r2, [r3]
 540:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 541:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Increment the MAC count */
 542:Source\FilteringFunctions/arm_conv_fast_q15.c ****       count++;
 2895              		.loc 1 542 0
 2896 12a8 DA23     		mov	r3, #218
 2897 12aa 5B00     		lsl	r3, r3, #1
 2898 12ac FB18     		add	r3, r7, r3
 2899 12ae 1B68     		ldr	r3, [r3]
 2900 12b0 0133     		add	r3, r3, #1
 2901 12b2 DA22     		mov	r2, #218
 2902 12b4 5200     		lsl	r2, r2, #1
 2903 12b6 BA18     		add	r2, r7, r2
 2904 12b8 1360     		str	r3, [r2]
 543:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 544:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 545:Source\FilteringFunctions/arm_conv_fast_q15.c ****       px = pIn1 + count;
 2905              		.loc 1 545 0
 2906 12ba DA23     		mov	r3, #218
 2907 12bc 5B00     		lsl	r3, r3, #1
 2908 12be FB18     		add	r3, r7, r3
 2909 12c0 1B68     		ldr	r3, [r3]
 2910 12c2 5B00     		lsl	r3, r3, #1
 2911 12c4 F622     		mov	r2, #246
 2912 12c6 5200     		lsl	r2, r2, #1
 2913 12c8 BA18     		add	r2, r7, r2
 2914 12ca 1268     		ldr	r2, [r2]
 2915 12cc D318     		add	r3, r2, r3
 2916 12ce 7B61     		str	r3, [r7, #20]
 546:Source\FilteringFunctions/arm_conv_fast_q15.c ****       py = pSrc2;
 2917              		.loc 1 546 0
 2918 12d0 D423     		mov	r3, #212
 2919 12d2 5B00     		lsl	r3, r3, #1
 2920 12d4 FB18     		add	r3, r7, r3
 2921 12d6 1B68     		ldr	r3, [r3]
 2922 12d8 3B61     		str	r3, [r7, #16]
 547:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 81


 548:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
 549:Source\FilteringFunctions/arm_conv_fast_q15.c ****       blkCnt--;
 2923              		.loc 1 549 0
 2924 12da D823     		mov	r3, #216
 2925 12dc 5B00     		lsl	r3, r3, #1
 2926 12de FB18     		add	r3, r7, r3
 2927 12e0 1B68     		ldr	r3, [r3]
 2928 12e2 013B     		sub	r3, r3, #1
 2929 12e4 D822     		mov	r2, #216
 2930 12e6 5200     		lsl	r2, r2, #1
 2931 12e8 BA18     		add	r2, r7, r2
 2932 12ea 1360     		str	r3, [r2]
 2933              	.L57:
 521:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 2934              		.loc 1 521 0
 2935 12ec D823     		mov	r3, #216
 2936 12ee 5B00     		lsl	r3, r3, #1
 2937 12f0 FB18     		add	r3, r7, r3
 2938 12f2 1B68     		ldr	r3, [r3]
 2939 12f4 002B     		cmp	r3, #0
 2940 12f6 9FD1     		bne	.L60
 2941              	.L56:
 550:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
 551:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
 552:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 553:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 554:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* --------------------------
 555:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * Initializations of stage3
 556:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * -------------------------*/
 557:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 558:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[srcAL
 559:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[srcAL
 560:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * ....
 561:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]
 562:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum +=  x[srcALen-1] * y[srcBLen-1]
 563:Source\FilteringFunctions/arm_conv_fast_q15.c ****    */
 564:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 565:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* In this stage the MAC operations are decreased by 1 for every iteration.
 566:Source\FilteringFunctions/arm_conv_fast_q15.c ****      The blockSize3 variable holds the number of MAC operations performed */
 567:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 568:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Working pointer of inputA */
 569:Source\FilteringFunctions/arm_conv_fast_q15.c ****   pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
 2942              		.loc 1 569 0
 2943 12f8 BA68     		ldr	r2, [r7, #8]
 2944 12fa 3B68     		ldr	r3, [r7]
 2945 12fc D31A     		sub	r3, r2, r3
 2946 12fe 0133     		add	r3, r3, #1
 2947 1300 5B00     		lsl	r3, r3, #1
 2948 1302 F622     		mov	r2, #246
 2949 1304 5200     		lsl	r2, r2, #1
 2950 1306 BA18     		add	r2, r7, r2
 2951 1308 1268     		ldr	r2, [r2]
 2952 130a D318     		add	r3, r2, r3
 2953 130c E822     		mov	r2, #232
 2954 130e 5200     		lsl	r2, r2, #1
 2955 1310 BA18     		add	r2, r7, r2
 2956 1312 1360     		str	r3, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 82


 570:Source\FilteringFunctions/arm_conv_fast_q15.c ****   px = pSrc1;
 2957              		.loc 1 570 0
 2958 1314 E823     		mov	r3, #232
 2959 1316 5B00     		lsl	r3, r3, #1
 2960 1318 FB18     		add	r3, r7, r3
 2961 131a 1B68     		ldr	r3, [r3]
 2962 131c 7B61     		str	r3, [r7, #20]
 571:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 572:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Working pointer of inputB */
 573:Source\FilteringFunctions/arm_conv_fast_q15.c ****   pSrc2 = pIn2 + (srcBLen - 1u);
 2963              		.loc 1 573 0
 2964 131e 3B68     		ldr	r3, [r7]
 2965 1320 C14A     		ldr	r2, .L78
 2966 1322 9446     		mov	ip, r2
 2967 1324 6344     		add	r3, r3, ip
 2968 1326 5B00     		lsl	r3, r3, #1
 2969 1328 F422     		mov	r2, #244
 2970 132a 5200     		lsl	r2, r2, #1
 2971 132c BA18     		add	r2, r7, r2
 2972 132e 1268     		ldr	r2, [r2]
 2973 1330 D318     		add	r3, r2, r3
 2974 1332 D422     		mov	r2, #212
 2975 1334 5200     		lsl	r2, r2, #1
 2976 1336 BA18     		add	r2, r7, r2
 2977 1338 1360     		str	r3, [r2]
 574:Source\FilteringFunctions/arm_conv_fast_q15.c ****   pIn2 = pSrc2 - 1u;
 2978              		.loc 1 574 0
 2979 133a D423     		mov	r3, #212
 2980 133c 5B00     		lsl	r3, r3, #1
 2981 133e FB18     		add	r3, r7, r3
 2982 1340 1B68     		ldr	r3, [r3]
 2983 1342 023B     		sub	r3, r3, #2
 2984 1344 F422     		mov	r2, #244
 2985 1346 5200     		lsl	r2, r2, #1
 2986 1348 BA18     		add	r2, r7, r2
 2987 134a 1360     		str	r3, [r2]
 575:Source\FilteringFunctions/arm_conv_fast_q15.c ****   py = pIn2;
 2988              		.loc 1 575 0
 2989 134c F423     		mov	r3, #244
 2990 134e 5B00     		lsl	r3, r3, #1
 2991 1350 FB18     		add	r3, r7, r3
 2992 1352 1B68     		ldr	r3, [r3]
 2993 1354 3B61     		str	r3, [r7, #16]
 576:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 577:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* -------------------
 578:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * Stage3 process
 579:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * ------------------*/
 580:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 581:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* For loop unrolling by 4, this stage is divided into two. */
 582:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* First part of this stage computes the MAC operations greater than 4 */
 583:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Second part of this stage computes the MAC operations less than or equal to 4 */
 584:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 585:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The first part of the stage starts here */
 586:Source\FilteringFunctions/arm_conv_fast_q15.c ****   j = blockSize3 >> 2u;
 2994              		.loc 1 586 0
 2995 1356 E023     		mov	r3, #224
 2996 1358 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 83


 2997 135a FB18     		add	r3, r7, r3
 2998 135c 1B68     		ldr	r3, [r3]
 2999 135e 9B08     		lsr	r3, r3, #2
 3000 1360 DE22     		mov	r2, #222
 3001 1362 5200     		lsl	r2, r2, #1
 3002 1364 BA18     		add	r2, r7, r2
 3003 1366 1360     		str	r3, [r2]
 587:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 588:Source\FilteringFunctions/arm_conv_fast_q15.c ****   while ((j > 0u) && (blockSize3 > 0u))
 3004              		.loc 1 588 0
 3005 1368 DDE0     		b	.L61
 3006              	.L70:
 589:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 590:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Accumulator is made zero for every iteration */
 591:Source\FilteringFunctions/arm_conv_fast_q15.c ****     sum = 0;
 3007              		.loc 1 591 0
 3008 136a 0023     		mov	r3, #0
 3009 136c F222     		mov	r2, #242
 3010 136e 5200     		lsl	r2, r2, #1
 3011 1370 BA18     		add	r2, r7, r2
 3012 1372 1360     		str	r3, [r2]
 592:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 593:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Apply loop unrolling and compute 4 MACs simultaneously. */
 594:Source\FilteringFunctions/arm_conv_fast_q15.c ****     k = blockSize3 >> 2u;
 3013              		.loc 1 594 0
 3014 1374 E023     		mov	r3, #224
 3015 1376 5B00     		lsl	r3, r3, #1
 3016 1378 FB18     		add	r3, r7, r3
 3017 137a 1B68     		ldr	r3, [r3]
 3018 137c 9B08     		lsr	r3, r3, #2
 3019 137e DC22     		mov	r2, #220
 3020 1380 5200     		lsl	r2, r2, #1
 3021 1382 BA18     		add	r2, r7, r2
 3022 1384 1360     		str	r3, [r2]
 595:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 596:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 597:Source\FilteringFunctions/arm_conv_fast_q15.c ****      ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 598:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (k > 0u)
 3023              		.loc 1 598 0
 3024 1386 58E0     		b	.L62
 3025              	.L65:
 599:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 600:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* x[srcALen - srcBLen + 1], x[srcALen - srcBLen + 2] are multiplied
 601:Source\FilteringFunctions/arm_conv_fast_q15.c ****        * with y[srcBLen - 1], y[srcBLen - 2] respectively */
 602:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum = __SMLADX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 3026              		.loc 1 602 0
 3027 1388 1423     		mov	r3, #20
 3028 138a FB18     		add	r3, r7, r3
 3029 138c 1A68     		ldr	r2, [r3]
 3030 138e 111D     		add	r1, r2, #4
 3031 1390 1960     		str	r1, [r3]
 3032 1392 1368     		ldr	r3, [r2]
 3033 1394 181C     		mov	r0, r3
 3034 1396 1023     		mov	r3, #16
 3035 1398 FB18     		add	r3, r7, r3
 3036 139a 1A68     		ldr	r2, [r3]
 3037 139c 111F     		sub	r1, r2, #4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 84


 3038 139e 1960     		str	r1, [r3]
 3039 13a0 1368     		ldr	r3, [r2]
 3040 13a2 1A1C     		mov	r2, r3
 3041 13a4 F223     		mov	r3, #242
 3042 13a6 5B00     		lsl	r3, r3, #1
 3043 13a8 FB18     		add	r3, r7, r3
 3044 13aa 1B68     		ldr	r3, [r3]
 3045 13ac B864     		str	r0, [r7, #72]
 3046 13ae 7A64     		str	r2, [r7, #68]
 3047 13b0 3B64     		str	r3, [r7, #64]
 3048              	.LBB122:
 3049              	.LBB123:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 3050              		.loc 2 966 0
 3051 13b2 BB6C     		ldr	r3, [r7, #72]
 3052 13b4 1B04     		lsl	r3, r3, #16
 3053 13b6 1B14     		asr	r3, r3, #16
 3054 13b8 7A6C     		ldr	r2, [r7, #68]
 3055 13ba 1214     		asr	r2, r2, #16
 3056 13bc 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3057              		.loc 2 967 0
 3058 13be BB6C     		ldr	r3, [r7, #72]
 3059 13c0 1B14     		asr	r3, r3, #16
 3060 13c2 796C     		ldr	r1, [r7, #68]
 3061 13c4 0904     		lsl	r1, r1, #16
 3062 13c6 0914     		asr	r1, r1, #16
 3063 13c8 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 3064              		.loc 2 966 0
 3065 13ca D218     		add	r2, r2, r3
 3066              		.loc 2 968 0
 3067 13cc 3B6C     		ldr	r3, [r7, #64]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3068              		.loc 2 967 0
 3069 13ce D318     		add	r3, r2, r3
 3070              	.LBE123:
 3071              	.LBE122:
 3072              		.loc 1 602 0
 3073 13d0 F222     		mov	r2, #242
 3074 13d2 5200     		lsl	r2, r2, #1
 3075 13d4 BA18     		add	r2, r7, r2
 3076 13d6 1360     		str	r3, [r2]
 603:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* x[srcALen - srcBLen + 3], x[srcALen - srcBLen + 4] are multiplied
 604:Source\FilteringFunctions/arm_conv_fast_q15.c ****        * with y[srcBLen - 3], y[srcBLen - 4] respectively */
 605:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum = __SMLADX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 3077              		.loc 1 605 0
 3078 13d8 1423     		mov	r3, #20
 3079 13da FB18     		add	r3, r7, r3
 3080 13dc 1A68     		ldr	r2, [r3]
 3081 13de 111D     		add	r1, r2, #4
 3082 13e0 1960     		str	r1, [r3]
 3083 13e2 1368     		ldr	r3, [r2]
 3084 13e4 181C     		mov	r0, r3
 3085 13e6 1023     		mov	r3, #16
 3086 13e8 FB18     		add	r3, r7, r3
 3087 13ea 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 85


 3088 13ec 111F     		sub	r1, r2, #4
 3089 13ee 1960     		str	r1, [r3]
 3090 13f0 1368     		ldr	r3, [r2]
 3091 13f2 1A1C     		mov	r2, r3
 3092 13f4 F223     		mov	r3, #242
 3093 13f6 5B00     		lsl	r3, r3, #1
 3094 13f8 FB18     		add	r3, r7, r3
 3095 13fa 1B68     		ldr	r3, [r3]
 3096 13fc F863     		str	r0, [r7, #60]
 3097 13fe BA63     		str	r2, [r7, #56]
 3098 1400 7B63     		str	r3, [r7, #52]
 3099              	.LBB124:
 3100              	.LBB125:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 3101              		.loc 2 966 0
 3102 1402 FB6B     		ldr	r3, [r7, #60]
 3103 1404 1B04     		lsl	r3, r3, #16
 3104 1406 1B14     		asr	r3, r3, #16
 3105 1408 BA6B     		ldr	r2, [r7, #56]
 3106 140a 1214     		asr	r2, r2, #16
 3107 140c 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3108              		.loc 2 967 0
 3109 140e FB6B     		ldr	r3, [r7, #60]
 3110 1410 1B14     		asr	r3, r3, #16
 3111 1412 B96B     		ldr	r1, [r7, #56]
 3112 1414 0904     		lsl	r1, r1, #16
 3113 1416 0914     		asr	r1, r1, #16
 3114 1418 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 3115              		.loc 2 966 0
 3116 141a D218     		add	r2, r2, r3
 3117              		.loc 2 968 0
 3118 141c 7B6B     		ldr	r3, [r7, #52]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3119              		.loc 2 967 0
 3120 141e D318     		add	r3, r2, r3
 3121              	.LBE125:
 3122              	.LBE124:
 3123              		.loc 1 605 0
 3124 1420 F222     		mov	r2, #242
 3125 1422 5200     		lsl	r2, r2, #1
 3126 1424 BA18     		add	r2, r7, r2
 3127 1426 1360     		str	r3, [r2]
 606:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 607:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
 608:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k--;
 3128              		.loc 1 608 0
 3129 1428 DC23     		mov	r3, #220
 3130 142a 5B00     		lsl	r3, r3, #1
 3131 142c FB18     		add	r3, r7, r3
 3132 142e 1B68     		ldr	r3, [r3]
 3133 1430 013B     		sub	r3, r3, #1
 3134 1432 DC22     		mov	r2, #220
 3135 1434 5200     		lsl	r2, r2, #1
 3136 1436 BA18     		add	r2, r7, r2
 3137 1438 1360     		str	r3, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 86


 3138              	.L62:
 598:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 3139              		.loc 1 598 0
 3140 143a DC23     		mov	r3, #220
 3141 143c 5B00     		lsl	r3, r3, #1
 3142 143e FB18     		add	r3, r7, r3
 3143 1440 1B68     		ldr	r3, [r3]
 3144 1442 002B     		cmp	r3, #0
 3145 1444 A0D1     		bne	.L65
 609:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
 610:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 611:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* For the next MAC operations, the pointer py is used without SIMD
 612:Source\FilteringFunctions/arm_conv_fast_q15.c ****      * So, py is incremented by 1 */
 613:Source\FilteringFunctions/arm_conv_fast_q15.c ****     py = py + 1u;
 3146              		.loc 1 613 0
 3147 1446 3B69     		ldr	r3, [r7, #16]
 3148 1448 0233     		add	r3, r3, #2
 3149 144a 3B61     		str	r3, [r7, #16]
 614:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 615:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* If the blockSize3 is not a multiple of 4, compute any remaining MACs here.
 616:Source\FilteringFunctions/arm_conv_fast_q15.c ****      ** No loop unrolling is used. */
 617:Source\FilteringFunctions/arm_conv_fast_q15.c ****     k = blockSize3 % 0x4u;
 3150              		.loc 1 617 0
 3151 144c E023     		mov	r3, #224
 3152 144e 5B00     		lsl	r3, r3, #1
 3153 1450 FB18     		add	r3, r7, r3
 3154 1452 1B68     		ldr	r3, [r3]
 3155 1454 0322     		mov	r2, #3
 3156 1456 1340     		and	r3, r2
 3157 1458 DC22     		mov	r2, #220
 3158 145a 5200     		lsl	r2, r2, #1
 3159 145c BA18     		add	r2, r7, r2
 3160 145e 1360     		str	r3, [r2]
 618:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 619:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (k > 0u)
 3161              		.loc 1 619 0
 3162 1460 2CE0     		b	.L66
 3163              	.L68:
 620:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 621:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* sum += x[srcALen - srcBLen + 5] * y[srcBLen - 5] */
 622:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum = __SMLAD(*px++, *py--, sum);
 3164              		.loc 1 622 0
 3165 1462 7B69     		ldr	r3, [r7, #20]
 3166 1464 9A1C     		add	r2, r3, #2
 3167 1466 7A61     		str	r2, [r7, #20]
 3168 1468 1B88     		ldrh	r3, [r3]
 3169 146a 19B2     		sxth	r1, r3
 3170 146c 3B69     		ldr	r3, [r7, #16]
 3171 146e 9A1E     		sub	r2, r3, #2
 3172 1470 3A61     		str	r2, [r7, #16]
 3173 1472 1B88     		ldrh	r3, [r3]
 3174 1474 1AB2     		sxth	r2, r3
 3175 1476 F223     		mov	r3, #242
 3176 1478 5B00     		lsl	r3, r3, #1
 3177 147a FB18     		add	r3, r7, r3
 3178 147c 1B68     		ldr	r3, [r3]
 3179 147e 3963     		str	r1, [r7, #48]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 87


 3180 1480 FA62     		str	r2, [r7, #44]
 3181 1482 BB62     		str	r3, [r7, #40]
 3182              	.LBB126:
 3183              	.LBB127:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 3184              		.loc 2 952 0
 3185 1484 3B6B     		ldr	r3, [r7, #48]
 3186 1486 1B04     		lsl	r3, r3, #16
 3187 1488 1B14     		asr	r3, r3, #16
 3188 148a FA6A     		ldr	r2, [r7, #44]
 3189 148c 1204     		lsl	r2, r2, #16
 3190 148e 1214     		asr	r2, r2, #16
 3191 1490 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3192              		.loc 2 953 0
 3193 1492 3B6B     		ldr	r3, [r7, #48]
 3194 1494 1B14     		asr	r3, r3, #16
 3195 1496 F96A     		ldr	r1, [r7, #44]
 3196 1498 0914     		asr	r1, r1, #16
 3197 149a 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 3198              		.loc 2 952 0
 3199 149c D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 3200              		.loc 2 954 0
 3201 149e BB6A     		ldr	r3, [r7, #40]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3202              		.loc 2 953 0
 3203 14a0 D318     		add	r3, r2, r3
 3204              	.LBE127:
 3205              	.LBE126:
 3206              		.loc 1 622 0
 3207 14a2 F222     		mov	r2, #242
 3208 14a4 5200     		lsl	r2, r2, #1
 3209 14a6 BA18     		add	r2, r7, r2
 3210 14a8 1360     		str	r3, [r2]
 623:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 624:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
 625:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k--;
 3211              		.loc 1 625 0
 3212 14aa DC23     		mov	r3, #220
 3213 14ac 5B00     		lsl	r3, r3, #1
 3214 14ae FB18     		add	r3, r7, r3
 3215 14b0 1B68     		ldr	r3, [r3]
 3216 14b2 013B     		sub	r3, r3, #1
 3217 14b4 DC22     		mov	r2, #220
 3218 14b6 5200     		lsl	r2, r2, #1
 3219 14b8 BA18     		add	r2, r7, r2
 3220 14ba 1360     		str	r3, [r2]
 3221              	.L66:
 619:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 3222              		.loc 1 619 0
 3223 14bc DC23     		mov	r3, #220
 3224 14be 5B00     		lsl	r3, r3, #1
 3225 14c0 FB18     		add	r3, r7, r3
 3226 14c2 1B68     		ldr	r3, [r3]
 3227 14c4 002B     		cmp	r3, #0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 88


 3228 14c6 CCD1     		bne	.L68
 626:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
 627:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 628:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Store the result in the accumulator in the destination buffer. */
 629:Source\FilteringFunctions/arm_conv_fast_q15.c ****     *pOut++ = (q15_t) (sum >> 15);
 3229              		.loc 1 629 0
 3230 14c8 BB69     		ldr	r3, [r7, #24]
 3231 14ca 9A1C     		add	r2, r3, #2
 3232 14cc BA61     		str	r2, [r7, #24]
 3233 14ce F222     		mov	r2, #242
 3234 14d0 5200     		lsl	r2, r2, #1
 3235 14d2 BA18     		add	r2, r7, r2
 3236 14d4 1268     		ldr	r2, [r2]
 3237 14d6 D213     		asr	r2, r2, #15
 3238 14d8 92B2     		uxth	r2, r2
 3239 14da 1A80     		strh	r2, [r3]
 630:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 631:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Update the inputA and inputB pointers for next MAC calculation */
 632:Source\FilteringFunctions/arm_conv_fast_q15.c ****     px = ++pSrc1;
 3240              		.loc 1 632 0
 3241 14dc E823     		mov	r3, #232
 3242 14de 5B00     		lsl	r3, r3, #1
 3243 14e0 FB18     		add	r3, r7, r3
 3244 14e2 1B68     		ldr	r3, [r3]
 3245 14e4 0233     		add	r3, r3, #2
 3246 14e6 E822     		mov	r2, #232
 3247 14e8 5200     		lsl	r2, r2, #1
 3248 14ea BA18     		add	r2, r7, r2
 3249 14ec 1360     		str	r3, [r2]
 3250 14ee E823     		mov	r3, #232
 3251 14f0 5B00     		lsl	r3, r3, #1
 3252 14f2 FB18     		add	r3, r7, r3
 3253 14f4 1B68     		ldr	r3, [r3]
 3254 14f6 7B61     		str	r3, [r7, #20]
 633:Source\FilteringFunctions/arm_conv_fast_q15.c ****     py = pIn2;
 3255              		.loc 1 633 0
 3256 14f8 F423     		mov	r3, #244
 3257 14fa 5B00     		lsl	r3, r3, #1
 3258 14fc FB18     		add	r3, r7, r3
 3259 14fe 1B68     		ldr	r3, [r3]
 3260 1500 3B61     		str	r3, [r7, #16]
 634:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 635:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Decrement the loop counter */
 636:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blockSize3--;
 3261              		.loc 1 636 0
 3262 1502 E023     		mov	r3, #224
 3263 1504 5B00     		lsl	r3, r3, #1
 3264 1506 FB18     		add	r3, r7, r3
 3265 1508 1B68     		ldr	r3, [r3]
 3266 150a 013B     		sub	r3, r3, #1
 3267 150c E022     		mov	r2, #224
 3268 150e 5200     		lsl	r2, r2, #1
 3269 1510 BA18     		add	r2, r7, r2
 3270 1512 1360     		str	r3, [r2]
 637:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 638:Source\FilteringFunctions/arm_conv_fast_q15.c ****     j--;
 3271              		.loc 1 638 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 89


 3272 1514 DE23     		mov	r3, #222
 3273 1516 5B00     		lsl	r3, r3, #1
 3274 1518 FB18     		add	r3, r7, r3
 3275 151a 1B68     		ldr	r3, [r3]
 3276 151c 013B     		sub	r3, r3, #1
 3277 151e DE22     		mov	r2, #222
 3278 1520 5200     		lsl	r2, r2, #1
 3279 1522 BA18     		add	r2, r7, r2
 3280 1524 1360     		str	r3, [r2]
 3281              	.L61:
 588:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 3282              		.loc 1 588 0
 3283 1526 DE23     		mov	r3, #222
 3284 1528 5B00     		lsl	r3, r3, #1
 3285 152a FB18     		add	r3, r7, r3
 3286 152c 1B68     		ldr	r3, [r3]
 3287 152e 002B     		cmp	r3, #0
 3288 1530 06D0     		beq	.L69
 588:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 3289              		.loc 1 588 0 is_stmt 0 discriminator 1
 3290 1532 E023     		mov	r3, #224
 3291 1534 5B00     		lsl	r3, r3, #1
 3292 1536 FB18     		add	r3, r7, r3
 3293 1538 1B68     		ldr	r3, [r3]
 3294 153a 002B     		cmp	r3, #0
 3295 153c 00D0     		beq	.LCB2930
 3296 153e 14E7     		b	.L70	@long jump
 3297              	.LCB2930:
 3298              	.L69:
 639:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
 640:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 641:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The second part of the stage starts here */
 642:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* SIMD is not used for the next MAC operations,
 643:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * so pointer py is updated to read only one sample at a time */
 644:Source\FilteringFunctions/arm_conv_fast_q15.c ****   py = py + 1u;
 3299              		.loc 1 644 0 is_stmt 1
 3300 1540 3B69     		ldr	r3, [r7, #16]
 3301 1542 0233     		add	r3, r3, #2
 3302 1544 3B61     		str	r3, [r7, #16]
 645:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 646:Source\FilteringFunctions/arm_conv_fast_q15.c ****   while (blockSize3 > 0u)
 3303              		.loc 1 646 0
 3304 1546 66E0     		b	.L71
 3305              	.L75:
 647:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 648:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Accumulator is made zero for every iteration */
 649:Source\FilteringFunctions/arm_conv_fast_q15.c ****     sum = 0;
 3306              		.loc 1 649 0
 3307 1548 0023     		mov	r3, #0
 3308 154a F222     		mov	r2, #242
 3309 154c 5200     		lsl	r2, r2, #1
 3310 154e BA18     		add	r2, r7, r2
 3311 1550 1360     		str	r3, [r2]
 650:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 651:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Apply loop unrolling and compute 4 MACs simultaneously. */
 652:Source\FilteringFunctions/arm_conv_fast_q15.c ****     k = blockSize3;
 3312              		.loc 1 652 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 90


 3313 1552 E023     		mov	r3, #224
 3314 1554 5B00     		lsl	r3, r3, #1
 3315 1556 FB18     		add	r3, r7, r3
 3316 1558 1B68     		ldr	r3, [r3]
 3317 155a DC22     		mov	r2, #220
 3318 155c 5200     		lsl	r2, r2, #1
 3319 155e BA18     		add	r2, r7, r2
 3320 1560 1360     		str	r3, [r2]
 653:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 654:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (k > 0u)
 3321              		.loc 1 654 0
 3322 1562 2CE0     		b	.L72
 3323              	.L74:
 655:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 656:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Perform the multiply-accumulates */
 657:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* sum +=  x[srcALen-1] * y[srcBLen-1] */
 658:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum = __SMLAD(*px++, *py--, sum);
 3324              		.loc 1 658 0
 3325 1564 7B69     		ldr	r3, [r7, #20]
 3326 1566 9A1C     		add	r2, r3, #2
 3327 1568 7A61     		str	r2, [r7, #20]
 3328 156a 1B88     		ldrh	r3, [r3]
 3329 156c 19B2     		sxth	r1, r3
 3330 156e 3B69     		ldr	r3, [r7, #16]
 3331 1570 9A1E     		sub	r2, r3, #2
 3332 1572 3A61     		str	r2, [r7, #16]
 3333 1574 1B88     		ldrh	r3, [r3]
 3334 1576 1AB2     		sxth	r2, r3
 3335 1578 F223     		mov	r3, #242
 3336 157a 5B00     		lsl	r3, r3, #1
 3337 157c FB18     		add	r3, r7, r3
 3338 157e 1B68     		ldr	r3, [r3]
 3339 1580 7962     		str	r1, [r7, #36]
 3340 1582 3A62     		str	r2, [r7, #32]
 3341 1584 FB61     		str	r3, [r7, #28]
 3342              	.LBB128:
 3343              	.LBB129:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 3344              		.loc 2 952 0
 3345 1586 7B6A     		ldr	r3, [r7, #36]
 3346 1588 1B04     		lsl	r3, r3, #16
 3347 158a 1B14     		asr	r3, r3, #16
 3348 158c 3A6A     		ldr	r2, [r7, #32]
 3349 158e 1204     		lsl	r2, r2, #16
 3350 1590 1214     		asr	r2, r2, #16
 3351 1592 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3352              		.loc 2 953 0
 3353 1594 7B6A     		ldr	r3, [r7, #36]
 3354 1596 1B14     		asr	r3, r3, #16
 3355 1598 396A     		ldr	r1, [r7, #32]
 3356 159a 0914     		asr	r1, r1, #16
 3357 159c 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 3358              		.loc 2 952 0
 3359 159e D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 91


 3360              		.loc 2 954 0
 3361 15a0 FB69     		ldr	r3, [r7, #28]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3362              		.loc 2 953 0
 3363 15a2 D318     		add	r3, r2, r3
 3364              	.LBE129:
 3365              	.LBE128:
 3366              		.loc 1 658 0
 3367 15a4 F222     		mov	r2, #242
 3368 15a6 5200     		lsl	r2, r2, #1
 3369 15a8 BA18     		add	r2, r7, r2
 3370 15aa 1360     		str	r3, [r2]
 659:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 660:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
 661:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k--;
 3371              		.loc 1 661 0
 3372 15ac DC23     		mov	r3, #220
 3373 15ae 5B00     		lsl	r3, r3, #1
 3374 15b0 FB18     		add	r3, r7, r3
 3375 15b2 1B68     		ldr	r3, [r3]
 3376 15b4 013B     		sub	r3, r3, #1
 3377 15b6 DC22     		mov	r2, #220
 3378 15b8 5200     		lsl	r2, r2, #1
 3379 15ba BA18     		add	r2, r7, r2
 3380 15bc 1360     		str	r3, [r2]
 3381              	.L72:
 654:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 3382              		.loc 1 654 0
 3383 15be DC23     		mov	r3, #220
 3384 15c0 5B00     		lsl	r3, r3, #1
 3385 15c2 FB18     		add	r3, r7, r3
 3386 15c4 1B68     		ldr	r3, [r3]
 3387 15c6 002B     		cmp	r3, #0
 3388 15c8 CCD1     		bne	.L74
 662:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
 663:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 664:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Store the result in the accumulator in the destination buffer. */
 665:Source\FilteringFunctions/arm_conv_fast_q15.c ****     *pOut++ = (q15_t) (sum >> 15);
 3389              		.loc 1 665 0
 3390 15ca BB69     		ldr	r3, [r7, #24]
 3391 15cc 9A1C     		add	r2, r3, #2
 3392 15ce BA61     		str	r2, [r7, #24]
 3393 15d0 F222     		mov	r2, #242
 3394 15d2 5200     		lsl	r2, r2, #1
 3395 15d4 BA18     		add	r2, r7, r2
 3396 15d6 1268     		ldr	r2, [r2]
 3397 15d8 D213     		asr	r2, r2, #15
 3398 15da 92B2     		uxth	r2, r2
 3399 15dc 1A80     		strh	r2, [r3]
 666:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 667:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Update the inputA and inputB pointers for next MAC calculation */
 668:Source\FilteringFunctions/arm_conv_fast_q15.c ****     px = ++pSrc1;
 3400              		.loc 1 668 0
 3401 15de E823     		mov	r3, #232
 3402 15e0 5B00     		lsl	r3, r3, #1
 3403 15e2 FB18     		add	r3, r7, r3
 3404 15e4 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 92


 3405 15e6 0233     		add	r3, r3, #2
 3406 15e8 E822     		mov	r2, #232
 3407 15ea 5200     		lsl	r2, r2, #1
 3408 15ec BA18     		add	r2, r7, r2
 3409 15ee 1360     		str	r3, [r2]
 3410 15f0 E823     		mov	r3, #232
 3411 15f2 5B00     		lsl	r3, r3, #1
 3412 15f4 FB18     		add	r3, r7, r3
 3413 15f6 1B68     		ldr	r3, [r3]
 3414 15f8 7B61     		str	r3, [r7, #20]
 669:Source\FilteringFunctions/arm_conv_fast_q15.c ****     py = pSrc2;
 3415              		.loc 1 669 0
 3416 15fa D423     		mov	r3, #212
 3417 15fc 5B00     		lsl	r3, r3, #1
 3418 15fe FB18     		add	r3, r7, r3
 3419 1600 1B68     		ldr	r3, [r3]
 3420 1602 3B61     		str	r3, [r7, #16]
 670:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 671:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Decrement the loop counter */
 672:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blockSize3--;
 3421              		.loc 1 672 0
 3422 1604 E023     		mov	r3, #224
 3423 1606 5B00     		lsl	r3, r3, #1
 3424 1608 FB18     		add	r3, r7, r3
 3425 160a 1B68     		ldr	r3, [r3]
 3426 160c 013B     		sub	r3, r3, #1
 3427 160e E022     		mov	r2, #224
 3428 1610 5200     		lsl	r2, r2, #1
 3429 1612 BA18     		add	r2, r7, r2
 3430 1614 1360     		str	r3, [r2]
 3431              	.L71:
 646:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 3432              		.loc 1 646 0
 3433 1616 E023     		mov	r3, #224
 3434 1618 5B00     		lsl	r3, r3, #1
 3435 161a FB18     		add	r3, r7, r3
 3436 161c 1B68     		ldr	r3, [r3]
 3437 161e 002B     		cmp	r3, #0
 3438 1620 92D1     		bne	.L75
 673:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
 674:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 675:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
 676:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t *pIn1;                                   /* inputA pointer */
 677:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t *pIn2;                                   /* inputB pointer */
 678:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t *pOut = pDst;                            /* output pointer */
 679:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q31_t sum, acc0, acc1, acc2, acc3;             /* Accumulator */
 680:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t *px;                                     /* Intermediate inputA pointer  */
 681:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t *py;                                     /* Intermediate inputB pointer  */
 682:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t *pSrc1, *pSrc2;                          /* Intermediate pointers */
 683:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q31_t x0, x1, x2, x3, c0;                      /* Temporary variables to hold state and coefficie
 684:Source\FilteringFunctions/arm_conv_fast_q15.c ****   uint32_t blockSize1, blockSize2, blockSize3, j, k, count, blkCnt;     /* loop counter */
 685:Source\FilteringFunctions/arm_conv_fast_q15.c ****   q15_t a, b;
 686:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 687:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The algorithm implementation is based on the lengths of the inputs. */
 688:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* srcB is always made to slide across srcA. */
 689:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* So srcBLen is always considered as shorter or equal to srcALen */
 690:Source\FilteringFunctions/arm_conv_fast_q15.c ****   if (srcALen >= srcBLen)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 93


 691:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 692:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Initialization of inputA pointer */
 693:Source\FilteringFunctions/arm_conv_fast_q15.c ****     pIn1 = pSrcA;
 694:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 695:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Initialization of inputB pointer */
 696:Source\FilteringFunctions/arm_conv_fast_q15.c ****     pIn2 = pSrcB;
 697:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
 698:Source\FilteringFunctions/arm_conv_fast_q15.c ****   else
 699:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 700:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Initialization of inputA pointer */
 701:Source\FilteringFunctions/arm_conv_fast_q15.c ****     pIn1 = pSrcB;
 702:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 703:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Initialization of inputB pointer */
 704:Source\FilteringFunctions/arm_conv_fast_q15.c ****     pIn2 = pSrcA;
 705:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 706:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* srcBLen is always considered as shorter or equal to srcALen */
 707:Source\FilteringFunctions/arm_conv_fast_q15.c ****     j = srcBLen;
 708:Source\FilteringFunctions/arm_conv_fast_q15.c ****     srcBLen = srcALen;
 709:Source\FilteringFunctions/arm_conv_fast_q15.c ****     srcALen = j;
 710:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
 711:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 712:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
 713:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The function is internally
 714:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * divided into three stages according to the number of multiplications that has to be
 715:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * taken place between inputA samples and inputB samples. In the first stage of the
 716:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * algorithm, the multiplications increase by one for every iteration.
 717:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * In the second stage of the algorithm, srcBLen number of multiplications are done.
 718:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * In the third stage of the algorithm, the multiplications decrease by one
 719:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * for every iteration. */
 720:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 721:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The algorithm is implemented in three stages.
 722:Source\FilteringFunctions/arm_conv_fast_q15.c ****      The loop counters of each stage is initiated here. */
 723:Source\FilteringFunctions/arm_conv_fast_q15.c ****   blockSize1 = srcBLen - 1u;
 724:Source\FilteringFunctions/arm_conv_fast_q15.c ****   blockSize2 = srcALen - (srcBLen - 1u);
 725:Source\FilteringFunctions/arm_conv_fast_q15.c ****   blockSize3 = blockSize1;
 726:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 727:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* --------------------------
 728:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * Initializations of stage1
 729:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * -------------------------*/
 730:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 731:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* sum = x[0] * y[0]
 732:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum = x[0] * y[1] + x[1] * y[0]
 733:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * ....
 734:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]
 735:Source\FilteringFunctions/arm_conv_fast_q15.c ****    */
 736:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 737:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* In this stage the MAC operations are increased by 1 for every iteration.
 738:Source\FilteringFunctions/arm_conv_fast_q15.c ****      The count variable holds the number of MAC operations performed */
 739:Source\FilteringFunctions/arm_conv_fast_q15.c ****   count = 1u;
 740:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 741:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Working pointer of inputA */
 742:Source\FilteringFunctions/arm_conv_fast_q15.c ****   px = pIn1;
 743:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 744:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Working pointer of inputB */
 745:Source\FilteringFunctions/arm_conv_fast_q15.c ****   py = pIn2;
 746:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 747:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 94


 748:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* ------------------------
 749:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * Stage1 process
 750:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * ----------------------*/
 751:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 752:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* For loop unrolling by 4, this stage is divided into two. */
 753:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* First part of this stage computes the MAC operations less than 4 */
 754:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Second part of this stage computes the MAC operations greater than or equal to 4 */
 755:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 756:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The first part of the stage starts here */
 757:Source\FilteringFunctions/arm_conv_fast_q15.c ****   while ((count < 4u) && (blockSize1 > 0u))
 758:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 759:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Accumulator is made zero for every iteration */
 760:Source\FilteringFunctions/arm_conv_fast_q15.c ****     sum = 0;
 761:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 762:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Loop over number of MAC operations between
 763:Source\FilteringFunctions/arm_conv_fast_q15.c ****      * inputA samples and inputB samples */
 764:Source\FilteringFunctions/arm_conv_fast_q15.c ****     k = count;
 765:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 766:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (k > 0u)
 767:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 768:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Perform the multiply-accumulates */
 769:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum += ((q31_t) * px++ * *py--);
 770:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 771:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
 772:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k--;
 773:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
 774:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 775:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Store the result in the accumulator in the destination buffer. */
 776:Source\FilteringFunctions/arm_conv_fast_q15.c ****     *pOut++ = (q15_t) (sum >> 15);
 777:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 778:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Update the inputA and inputB pointers for next MAC calculation */
 779:Source\FilteringFunctions/arm_conv_fast_q15.c ****     py = pIn2 + count;
 780:Source\FilteringFunctions/arm_conv_fast_q15.c ****     px = pIn1;
 781:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 782:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Increment the MAC count */
 783:Source\FilteringFunctions/arm_conv_fast_q15.c ****     count++;
 784:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 785:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Decrement the loop counter */
 786:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blockSize1--;
 787:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
 788:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 789:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The second part of the stage starts here */
 790:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The internal loop, over count, is unrolled by 4 */
 791:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* To, read the last two inputB samples using SIMD:
 792:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * y[srcBLen] and y[srcBLen-1] coefficients, py is decremented by 1 */
 793:Source\FilteringFunctions/arm_conv_fast_q15.c ****   py = py - 1;
 794:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 795:Source\FilteringFunctions/arm_conv_fast_q15.c ****   while (blockSize1 > 0u)
 796:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 797:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Accumulator is made zero for every iteration */
 798:Source\FilteringFunctions/arm_conv_fast_q15.c ****     sum = 0;
 799:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 800:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Apply loop unrolling and compute 4 MACs simultaneously. */
 801:Source\FilteringFunctions/arm_conv_fast_q15.c ****     k = count >> 2u;
 802:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 803:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 804:Source\FilteringFunctions/arm_conv_fast_q15.c ****      ** a second loop below computes MACs for the remaining 1 to 3 samples. */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 95


 805:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	py++;
 806:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 807:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (k > 0u)
 808:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 809:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Perform the multiply-accumulates */
 810:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 811:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 812:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 813:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 814:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 815:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
 816:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k--;
 817:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
 818:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 819:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* If the count is not a multiple of 4, compute any remaining MACs here.
 820:Source\FilteringFunctions/arm_conv_fast_q15.c ****      ** No loop unrolling is used. */
 821:Source\FilteringFunctions/arm_conv_fast_q15.c ****     k = count % 0x4u;
 822:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 823:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (k > 0u)
 824:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 825:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Perform the multiply-accumulates */
 826:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum += ((q31_t) * px++ * *py--);
 827:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 828:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
 829:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k--;
 830:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
 831:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 832:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Store the result in the accumulator in the destination buffer. */
 833:Source\FilteringFunctions/arm_conv_fast_q15.c ****     *pOut++ = (q15_t) (sum >> 15);
 834:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 835:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Update the inputA and inputB pointers for next MAC calculation */
 836:Source\FilteringFunctions/arm_conv_fast_q15.c ****     py = pIn2 + (count - 1u);
 837:Source\FilteringFunctions/arm_conv_fast_q15.c ****     px = pIn1;
 838:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 839:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Increment the MAC count */
 840:Source\FilteringFunctions/arm_conv_fast_q15.c ****     count++;
 841:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 842:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Decrement the loop counter */
 843:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blockSize1--;
 844:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
 845:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 846:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* --------------------------
 847:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * Initializations of stage2
 848:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * ------------------------*/
 849:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 850:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]
 851:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]
 852:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * ....
 853:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y[0
 854:Source\FilteringFunctions/arm_conv_fast_q15.c ****    */
 855:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 856:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Working pointer of inputA */
 857:Source\FilteringFunctions/arm_conv_fast_q15.c ****   px = pIn1;
 858:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 859:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Working pointer of inputB */
 860:Source\FilteringFunctions/arm_conv_fast_q15.c ****   pSrc2 = pIn2 + (srcBLen - 1u);
 861:Source\FilteringFunctions/arm_conv_fast_q15.c ****   py = pSrc2;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 96


 862:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 863:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* count is the index by which the pointer pIn1 to be incremented */
 864:Source\FilteringFunctions/arm_conv_fast_q15.c ****   count = 0u;
 865:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 866:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 867:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* --------------------
 868:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * Stage2 process
 869:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * -------------------*/
 870:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 871:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
 872:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * So, to loop unroll over blockSize2,
 873:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * srcBLen should be greater than or equal to 4 */
 874:Source\FilteringFunctions/arm_conv_fast_q15.c ****   if (srcBLen >= 4u)
 875:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
 876:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Loop unroll over blockSize2, by 4 */
 877:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blkCnt = blockSize2 >> 2u;
 878:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 879:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (blkCnt > 0u)
 880:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
 881:Source\FilteringFunctions/arm_conv_fast_q15.c ****       py = py - 1u;
 882:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 883:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Set all accumulators to zero */
 884:Source\FilteringFunctions/arm_conv_fast_q15.c ****       acc0 = 0;
 885:Source\FilteringFunctions/arm_conv_fast_q15.c ****       acc1 = 0;
 886:Source\FilteringFunctions/arm_conv_fast_q15.c ****       acc2 = 0;
 887:Source\FilteringFunctions/arm_conv_fast_q15.c ****       acc3 = 0;
 888:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 889:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* read x[0], x[1] samples */
 890:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *px++;
 891:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  b = *px++;
 892:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 893:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 894:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 895:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x0 = __PKHBT(a, b, 16);
 896:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *px;
 897:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x1 = __PKHBT(b, a, 16);
 898:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 899:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
 900:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 901:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x0 = __PKHBT(b, a, 16);
 902:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *px;
 903:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x1 = __PKHBT(a, b, 16);
 904:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 905:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	   */
 906:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 907:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 908:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k = srcBLen >> 2u;
 909:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 910:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 911:Source\FilteringFunctions/arm_conv_fast_q15.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 912:Source\FilteringFunctions/arm_conv_fast_q15.c ****       do
 913:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
 914:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read the last two inputB samples using SIMD:
 915:Source\FilteringFunctions/arm_conv_fast_q15.c ****          * y[srcBLen - 1] and y[srcBLen - 2] */
 916:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		a = *py;
 917:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		b = *(py+1);
 918:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		py -= 2;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 97


 919:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 920:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 921:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 922:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		c0 = __PKHBT(a, b, 16);
 923:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 924:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
 925:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 926:Source\FilteringFunctions/arm_conv_fast_q15.c ****  		c0 = __PKHBT(b, a, 16);;
 927:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 928:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	*/
 929:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 930:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc0 +=  x[0] * y[srcBLen - 1] + x[1] * y[srcBLen - 2] */
 931:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc0 = __SMLADX(x0, c0, acc0);
 932:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 933:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc1 +=  x[1] * y[srcBLen - 1] + x[2] * y[srcBLen - 2] */
 934:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc1 = __SMLADX(x1, c0, acc1);
 935:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 936:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *px;
 937:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  b = *(px + 1);
 938:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 939:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 940:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 941:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x2 = __PKHBT(a, b, 16);
 942:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *(px + 2);
 943:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x3 = __PKHBT(b, a, 16);
 944:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 945:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
 946:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 947:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x2 = __PKHBT(b, a, 16);
 948:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *(px + 2);
 949:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x3 = __PKHBT(a, b, 16);
 950:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 951:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	   */
 952:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 953:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc2 +=  x[2] * y[srcBLen - 1] + x[3] * y[srcBLen - 2] */
 954:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc2 = __SMLADX(x2, c0, acc2);
 955:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 956:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc3 +=  x[3] * y[srcBLen - 1] + x[4] * y[srcBLen - 2] */
 957:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc3 = __SMLADX(x3, c0, acc3);
 958:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 959:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read y[srcBLen - 3] and y[srcBLen - 4] */
 960:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		a = *py;
 961:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		b = *(py+1);
 962:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		py -= 2;
 963:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 964:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 965:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 966:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		c0 = __PKHBT(a, b, 16);
 967:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 968:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
 969:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 970:Source\FilteringFunctions/arm_conv_fast_q15.c ****  		c0 = __PKHBT(b, a, 16);;
 971:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 972:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	*/
 973:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 974:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc0 +=  x[2] * y[srcBLen - 3] + x[3] * y[srcBLen - 4] */
 975:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc0 = __SMLADX(x2, c0, acc0);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 98


 976:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 977:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc1 +=  x[3] * y[srcBLen - 3] + x[4] * y[srcBLen - 4] */
 978:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc1 = __SMLADX(x3, c0, acc1);
 979:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 980:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[4], x[5], x[6] */
 981:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *(px + 2);
 982:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  b = *(px + 3);
 983:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 984:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 985:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 986:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x0 = __PKHBT(a, b, 16);
 987:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *(px + 4);
 988:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x1 = __PKHBT(b, a, 16);
 989:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 990:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
 991:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 992:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x0 = __PKHBT(b, a, 16);
 993:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *(px + 4);
 994:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x1 = __PKHBT(a, b, 16);
 995:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 996:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	   */
 997:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
 998:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		px += 4u;
 999:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1000:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc2 +=  x[4] * y[srcBLen - 3] + x[5] * y[srcBLen - 4] */
1001:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc2 = __SMLADX(x0, c0, acc2);
1002:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1003:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* acc3 +=  x[5] * y[srcBLen - 3] + x[6] * y[srcBLen - 4] */
1004:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc3 = __SMLADX(x1, c0, acc3);
1005:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1006:Source\FilteringFunctions/arm_conv_fast_q15.c ****       } while (--k);
1007:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1008:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* For the next MAC operations, SIMD is not used
1009:Source\FilteringFunctions/arm_conv_fast_q15.c ****        * So, the 16 bit pointer if inputB, py is updated */
1010:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1011:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
1012:Source\FilteringFunctions/arm_conv_fast_q15.c ****        ** No loop unrolling is used. */
1013:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k = srcBLen % 0x4u;
1014:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1015:Source\FilteringFunctions/arm_conv_fast_q15.c ****       if (k == 1u)
1016:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
1017:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read y[srcBLen - 5] */
1018:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = *(py+1);
1019:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1020:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifdef  ARM_MATH_BIG_ENDIAN
1021:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1022:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = c0 << 16u;
1023:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1024:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
1025:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1026:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = c0 & 0x0000FFFF;
1027:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1028:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
1029:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1030:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[7] */
1031:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		a = *px;
1032:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		b = *(px+1);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 99


1033:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		px++;
1034:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1035:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1036:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1037:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		x3 = __PKHBT(a, b, 16);
1038:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1039:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
1040:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1041:Source\FilteringFunctions/arm_conv_fast_q15.c ****  		x3 = __PKHBT(b, a, 16);;
1042:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1043:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	*/
1044:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1045:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1046:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulates */
1047:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc0 = __SMLAD(x0, c0, acc0);
1048:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc1 = __SMLAD(x1, c0, acc1);
1049:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc2 = __SMLADX(x1, c0, acc2);
1050:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc3 = __SMLADX(x3, c0, acc3);
1051:Source\FilteringFunctions/arm_conv_fast_q15.c ****       }
1052:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1053:Source\FilteringFunctions/arm_conv_fast_q15.c ****       if (k == 2u)
1054:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
1055:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read y[srcBLen - 5], y[srcBLen - 6] */
1056:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		a = *py;
1057:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		b = *(py+1);
1058:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1059:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1060:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1061:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		c0 = __PKHBT(a, b, 16);
1062:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1063:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
1064:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1065:Source\FilteringFunctions/arm_conv_fast_q15.c ****  		c0 = __PKHBT(b, a, 16);;
1066:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1067:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	*/
1068:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1069:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[7], x[8], x[9] */
1070:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *px;
1071:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  b = *(px + 1);
1072:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1073:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1074:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1075:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x3 = __PKHBT(a, b, 16);
1076:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *(px + 2);
1077:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x2 = __PKHBT(b, a, 16);
1078:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1079:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
1080:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1081:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x3 = __PKHBT(b, a, 16);
1082:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *(px + 2);
1083:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x2 = __PKHBT(a, b, 16);
1084:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1085:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	   */
1086:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		px += 2u;
1087:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1088:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulates */
1089:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc0 = __SMLADX(x0, c0, acc0);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 100


1090:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc1 = __SMLADX(x1, c0, acc1);
1091:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc2 = __SMLADX(x3, c0, acc2);
1092:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc3 = __SMLADX(x2, c0, acc3);
1093:Source\FilteringFunctions/arm_conv_fast_q15.c ****       }
1094:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1095:Source\FilteringFunctions/arm_conv_fast_q15.c ****       if (k == 3u)
1096:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
1097:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read y[srcBLen - 5], y[srcBLen - 6] */
1098:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		a = *py;
1099:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		b = *(py+1);
1100:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1101:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1102:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1103:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		c0 = __PKHBT(a, b, 16);
1104:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1105:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
1106:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1107:Source\FilteringFunctions/arm_conv_fast_q15.c ****  		c0 = __PKHBT(b, a, 16);;
1108:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1109:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	*/
1110:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1111:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[7], x[8], x[9] */
1112:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *px;
1113:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  b = *(px + 1);
1114:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1115:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1116:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1117:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x3 = __PKHBT(a, b, 16);
1118:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *(px + 2);
1119:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x2 = __PKHBT(b, a, 16);
1120:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1121:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
1122:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1123:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x3 = __PKHBT(b, a, 16);
1124:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  a = *(px + 2);
1125:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  x2 = __PKHBT(a, b, 16);
1126:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1127:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	   */
1128:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1129:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulates */
1130:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc0 = __SMLADX(x0, c0, acc0);
1131:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc1 = __SMLADX(x1, c0, acc1);
1132:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc2 = __SMLADX(x3, c0, acc2);
1133:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc3 = __SMLADX(x2, c0, acc3);
1134:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1135:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read y[srcBLen - 7] */
1136:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		c0 = *(py-1);
1137:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifdef  ARM_MATH_BIG_ENDIAN
1138:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1139:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = c0 << 16u;
1140:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
1141:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1142:Source\FilteringFunctions/arm_conv_fast_q15.c ****         c0 = c0 & 0x0000FFFF;
1143:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
1144:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1145:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Read x[10] */
1146:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		a = *(px+2);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 101


1147:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		b = *(px+3);
1148:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1149:Source\FilteringFunctions/arm_conv_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1150:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1151:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		x3 = __PKHBT(a, b, 16);
1152:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1153:Source\FilteringFunctions/arm_conv_fast_q15.c **** #else
1154:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1155:Source\FilteringFunctions/arm_conv_fast_q15.c ****  		x3 = __PKHBT(b, a, 16);;
1156:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1157:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	*/
1158:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1159:Source\FilteringFunctions/arm_conv_fast_q15.c **** 		px += 3u;
1160:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1161:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulates */
1162:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc0 = __SMLADX(x1, c0, acc0);
1163:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc1 = __SMLAD(x2, c0, acc1);
1164:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc2 = __SMLADX(x2, c0, acc2);
1165:Source\FilteringFunctions/arm_conv_fast_q15.c ****         acc3 = __SMLADX(x3, c0, acc3);
1166:Source\FilteringFunctions/arm_conv_fast_q15.c ****       }
1167:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1168:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Store the results in the accumulators in the destination buffer. */
1169:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  *pOut++ = (q15_t)(acc0 >> 15);
1170:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  *pOut++ = (q15_t)(acc1 >> 15);
1171:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  *pOut++ = (q15_t)(acc2 >> 15);
1172:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	  *pOut++ = (q15_t)(acc3 >> 15);
1173:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1174:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Increment the pointer pIn1 index, count by 4 */
1175:Source\FilteringFunctions/arm_conv_fast_q15.c ****       count += 4u;
1176:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1177:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
1178:Source\FilteringFunctions/arm_conv_fast_q15.c ****       px = pIn1 + count;
1179:Source\FilteringFunctions/arm_conv_fast_q15.c ****       py = pSrc2;
1180:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1181:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
1182:Source\FilteringFunctions/arm_conv_fast_q15.c ****       blkCnt--;
1183:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
1184:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1185:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.
1186:Source\FilteringFunctions/arm_conv_fast_q15.c ****      ** No loop unrolling is used. */
1187:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blkCnt = blockSize2 % 0x4u;
1188:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1189:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (blkCnt > 0u)
1190:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
1191:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Accumulator is made zero for every iteration */
1192:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum = 0;
1193:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1194:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
1195:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k = srcBLen >> 2u;
1196:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1197:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
1198:Source\FilteringFunctions/arm_conv_fast_q15.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
1199:Source\FilteringFunctions/arm_conv_fast_q15.c ****       while (k > 0u)
1200:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
1201:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulates */
1202:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1203:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 102


1204:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1205:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1206:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1207:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Decrement the loop counter */
1208:Source\FilteringFunctions/arm_conv_fast_q15.c ****         k--;
1209:Source\FilteringFunctions/arm_conv_fast_q15.c ****       }
1210:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1211:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
1212:Source\FilteringFunctions/arm_conv_fast_q15.c ****        ** No loop unrolling is used. */
1213:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k = srcBLen % 0x4u;
1214:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1215:Source\FilteringFunctions/arm_conv_fast_q15.c ****       while (k > 0u)
1216:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
1217:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulates */
1218:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1219:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1220:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Decrement the loop counter */
1221:Source\FilteringFunctions/arm_conv_fast_q15.c ****         k--;
1222:Source\FilteringFunctions/arm_conv_fast_q15.c ****       }
1223:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1224:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Store the result in the accumulator in the destination buffer. */
1225:Source\FilteringFunctions/arm_conv_fast_q15.c ****       *pOut++ = (q15_t) (sum >> 15);
1226:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1227:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Increment the pointer pIn1 index, count by 1 */
1228:Source\FilteringFunctions/arm_conv_fast_q15.c ****       count++;
1229:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1230:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
1231:Source\FilteringFunctions/arm_conv_fast_q15.c ****       px = pIn1 + count;
1232:Source\FilteringFunctions/arm_conv_fast_q15.c ****       py = pSrc2;
1233:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1234:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
1235:Source\FilteringFunctions/arm_conv_fast_q15.c ****       blkCnt--;
1236:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
1237:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
1238:Source\FilteringFunctions/arm_conv_fast_q15.c ****   else
1239:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
1240:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* If the srcBLen is not a multiple of 4,
1241:Source\FilteringFunctions/arm_conv_fast_q15.c ****      * the blockSize2 loop cannot be unrolled by 4 */
1242:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blkCnt = blockSize2;
1243:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1244:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (blkCnt > 0u)
1245:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
1246:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Accumulator is made zero for every iteration */
1247:Source\FilteringFunctions/arm_conv_fast_q15.c ****       sum = 0;
1248:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1249:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* srcBLen number of MACS should be performed */
1250:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k = srcBLen;
1251:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1252:Source\FilteringFunctions/arm_conv_fast_q15.c ****       while (k > 0u)
1253:Source\FilteringFunctions/arm_conv_fast_q15.c ****       {
1254:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Perform the multiply-accumulate */
1255:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1256:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1257:Source\FilteringFunctions/arm_conv_fast_q15.c ****         /* Decrement the loop counter */
1258:Source\FilteringFunctions/arm_conv_fast_q15.c ****         k--;
1259:Source\FilteringFunctions/arm_conv_fast_q15.c ****       }
1260:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 103


1261:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Store the result in the accumulator in the destination buffer. */
1262:Source\FilteringFunctions/arm_conv_fast_q15.c ****       *pOut++ = (q15_t) (sum >> 15);
1263:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1264:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Increment the MAC count */
1265:Source\FilteringFunctions/arm_conv_fast_q15.c ****       count++;
1266:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1267:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
1268:Source\FilteringFunctions/arm_conv_fast_q15.c ****       px = pIn1 + count;
1269:Source\FilteringFunctions/arm_conv_fast_q15.c ****       py = pSrc2;
1270:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1271:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
1272:Source\FilteringFunctions/arm_conv_fast_q15.c ****       blkCnt--;
1273:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
1274:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
1275:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1276:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1277:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* --------------------------
1278:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * Initializations of stage3
1279:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * -------------------------*/
1280:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1281:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[srcAL
1282:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[srcAL
1283:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * ....
1284:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]
1285:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * sum +=  x[srcALen-1] * y[srcBLen-1]
1286:Source\FilteringFunctions/arm_conv_fast_q15.c ****    */
1287:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1288:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* In this stage the MAC operations are decreased by 1 for every iteration.
1289:Source\FilteringFunctions/arm_conv_fast_q15.c ****      The blockSize3 variable holds the number of MAC operations performed */
1290:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1291:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Working pointer of inputA */
1292:Source\FilteringFunctions/arm_conv_fast_q15.c ****   pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
1293:Source\FilteringFunctions/arm_conv_fast_q15.c ****   px = pSrc1;
1294:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1295:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Working pointer of inputB */
1296:Source\FilteringFunctions/arm_conv_fast_q15.c ****   pSrc2 = pIn2 + (srcBLen - 1u);
1297:Source\FilteringFunctions/arm_conv_fast_q15.c ****   pIn2 = pSrc2 - 1u;
1298:Source\FilteringFunctions/arm_conv_fast_q15.c ****   py = pIn2;
1299:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1300:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* -------------------
1301:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * Stage3 process
1302:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * ------------------*/
1303:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1304:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* For loop unrolling by 4, this stage is divided into two. */
1305:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* First part of this stage computes the MAC operations greater than 4 */
1306:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* Second part of this stage computes the MAC operations less than or equal to 4 */
1307:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1308:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The first part of the stage starts here */
1309:Source\FilteringFunctions/arm_conv_fast_q15.c ****   j = blockSize3 >> 2u;
1310:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1311:Source\FilteringFunctions/arm_conv_fast_q15.c ****   while ((j > 0u) && (blockSize3 > 0u))
1312:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
1313:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Accumulator is made zero for every iteration */
1314:Source\FilteringFunctions/arm_conv_fast_q15.c ****     sum = 0;
1315:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1316:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Apply loop unrolling and compute 4 MACs simultaneously. */
1317:Source\FilteringFunctions/arm_conv_fast_q15.c ****     k = blockSize3 >> 2u;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 104


1318:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1319:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
1320:Source\FilteringFunctions/arm_conv_fast_q15.c ****      ** a second loop below computes MACs for the remaining 1 to 3 samples. */
1321:Source\FilteringFunctions/arm_conv_fast_q15.c **** 	py++;
1322:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1323:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (k > 0u)
1324:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
1325:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1326:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1327:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1328:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1329:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
1330:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k--;
1331:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
1332:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1333:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* If the blockSize3 is not a multiple of 4, compute any remaining MACs here.
1334:Source\FilteringFunctions/arm_conv_fast_q15.c ****      ** No loop unrolling is used. */
1335:Source\FilteringFunctions/arm_conv_fast_q15.c ****     k = blockSize3 % 0x4u;
1336:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1337:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (k > 0u)
1338:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
1339:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* sum += x[srcALen - srcBLen + 5] * y[srcBLen - 5] */
1340:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1341:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1342:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
1343:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k--;
1344:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
1345:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1346:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Store the result in the accumulator in the destination buffer. */
1347:Source\FilteringFunctions/arm_conv_fast_q15.c ****     *pOut++ = (q15_t) (sum >> 15);
1348:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1349:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Update the inputA and inputB pointers for next MAC calculation */
1350:Source\FilteringFunctions/arm_conv_fast_q15.c ****     px = ++pSrc1;
1351:Source\FilteringFunctions/arm_conv_fast_q15.c ****     py = pIn2;
1352:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1353:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Decrement the loop counter */
1354:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blockSize3--;
1355:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1356:Source\FilteringFunctions/arm_conv_fast_q15.c ****     j--;
1357:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
1358:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1359:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* The second part of the stage starts here */
1360:Source\FilteringFunctions/arm_conv_fast_q15.c ****   /* SIMD is not used for the next MAC operations,
1361:Source\FilteringFunctions/arm_conv_fast_q15.c ****    * so pointer py is updated to read only one sample at a time */
1362:Source\FilteringFunctions/arm_conv_fast_q15.c ****   py = py + 1u;
1363:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1364:Source\FilteringFunctions/arm_conv_fast_q15.c ****   while (blockSize3 > 0u)
1365:Source\FilteringFunctions/arm_conv_fast_q15.c ****   {
1366:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Accumulator is made zero for every iteration */
1367:Source\FilteringFunctions/arm_conv_fast_q15.c ****     sum = 0;
1368:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1369:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Apply loop unrolling and compute 4 MACs simultaneously. */
1370:Source\FilteringFunctions/arm_conv_fast_q15.c ****     k = blockSize3;
1371:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1372:Source\FilteringFunctions/arm_conv_fast_q15.c ****     while (k > 0u)
1373:Source\FilteringFunctions/arm_conv_fast_q15.c ****     {
1374:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Perform the multiply-accumulates */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 105


1375:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* sum +=  x[srcALen-1] * y[srcBLen-1] */
1376:Source\FilteringFunctions/arm_conv_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1377:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1378:Source\FilteringFunctions/arm_conv_fast_q15.c ****       /* Decrement the loop counter */
1379:Source\FilteringFunctions/arm_conv_fast_q15.c ****       k--;
1380:Source\FilteringFunctions/arm_conv_fast_q15.c ****     }
1381:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1382:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Store the result in the accumulator in the destination buffer. */
1383:Source\FilteringFunctions/arm_conv_fast_q15.c ****     *pOut++ = (q15_t) (sum >> 15);
1384:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1385:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Update the inputA and inputB pointers for next MAC calculation */
1386:Source\FilteringFunctions/arm_conv_fast_q15.c ****     px = ++pSrc1;
1387:Source\FilteringFunctions/arm_conv_fast_q15.c ****     py = pSrc2;
1388:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1389:Source\FilteringFunctions/arm_conv_fast_q15.c ****     /* Decrement the loop counter */
1390:Source\FilteringFunctions/arm_conv_fast_q15.c ****     blockSize3--;
1391:Source\FilteringFunctions/arm_conv_fast_q15.c ****   }
1392:Source\FilteringFunctions/arm_conv_fast_q15.c **** 
1393:Source\FilteringFunctions/arm_conv_fast_q15.c **** #endif	/*	#ifndef UNALIGNED_SUPPORT_DISABLE	*/
1394:Source\FilteringFunctions/arm_conv_fast_q15.c **** }
 3439              		.loc 1 1394 0
 3440 1622 BD46     		mov	sp, r7
 3441 1624 7CB0     		add	sp, sp, #496
 3442              		@ sp needed
 3443 1626 80BD     		pop	{r7, pc}
 3444              	.L79:
 3445              		.align	2
 3446              	.L78:
 3447 1628 FFFFFF7F 		.word	2147483647
 3448              		.cfi_endproc
 3449              	.LFE82:
 3450              		.size	arm_conv_fast_q15, .-arm_conv_fast_q15
 3451              		.text
 3452              	.Letext0:
 3453              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 3454              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 3455              		.section	.debug_info,"",%progbits
 3456              	.Ldebug_info0:
 3457 0000 F2080000 		.4byte	0x8f2
 3458 0004 0400     		.2byte	0x4
 3459 0006 00000000 		.4byte	.Ldebug_abbrev0
 3460 000a 04       		.byte	0x4
 3461 000b 01       		.uleb128 0x1
 3462 000c 28010000 		.4byte	.LASF43
 3463 0010 01       		.byte	0x1
 3464 0011 C7010000 		.4byte	.LASF44
 3465 0015 2B000000 		.4byte	.LASF45
 3466 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3467 001d 00000000 		.4byte	0
 3468 0021 00000000 		.4byte	.Ldebug_line0
 3469 0025 02       		.uleb128 0x2
 3470 0026 01       		.byte	0x1
 3471 0027 06       		.byte	0x6
 3472 0028 5D020000 		.4byte	.LASF0
 3473 002c 02       		.uleb128 0x2
 3474 002d 01       		.byte	0x1
 3475 002e 08       		.byte	0x8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 106


 3476 002f 93000000 		.4byte	.LASF1
 3477 0033 03       		.uleb128 0x3
 3478 0034 05000000 		.4byte	.LASF4
 3479 0038 03       		.byte	0x3
 3480 0039 29       		.byte	0x29
 3481 003a 3E000000 		.4byte	0x3e
 3482 003e 02       		.uleb128 0x2
 3483 003f 02       		.byte	0x2
 3484 0040 05       		.byte	0x5
 3485 0041 2F020000 		.4byte	.LASF2
 3486 0045 02       		.uleb128 0x2
 3487 0046 02       		.byte	0x2
 3488 0047 07       		.byte	0x7
 3489 0048 C7000000 		.4byte	.LASF3
 3490 004c 03       		.uleb128 0x3
 3491 004d 21000000 		.4byte	.LASF5
 3492 0051 03       		.byte	0x3
 3493 0052 3F       		.byte	0x3f
 3494 0053 57000000 		.4byte	0x57
 3495 0057 02       		.uleb128 0x2
 3496 0058 04       		.byte	0x4
 3497 0059 05       		.byte	0x5
 3498 005a 42020000 		.4byte	.LASF6
 3499 005e 03       		.uleb128 0x3
 3500 005f F9000000 		.4byte	.LASF7
 3501 0063 03       		.byte	0x3
 3502 0064 41       		.byte	0x41
 3503 0065 69000000 		.4byte	0x69
 3504 0069 02       		.uleb128 0x2
 3505 006a 04       		.byte	0x4
 3506 006b 07       		.byte	0x7
 3507 006c B5000000 		.4byte	.LASF8
 3508 0070 02       		.uleb128 0x2
 3509 0071 08       		.byte	0x8
 3510 0072 05       		.byte	0x5
 3511 0073 FE010000 		.4byte	.LASF9
 3512 0077 02       		.uleb128 0x2
 3513 0078 08       		.byte	0x8
 3514 0079 07       		.byte	0x7
 3515 007a 11010000 		.4byte	.LASF10
 3516 007e 04       		.uleb128 0x4
 3517 007f 04       		.byte	0x4
 3518 0080 05       		.byte	0x5
 3519 0081 696E7400 		.ascii	"int\000"
 3520 0085 02       		.uleb128 0x2
 3521 0086 04       		.byte	0x4
 3522 0087 07       		.byte	0x7
 3523 0088 04010000 		.4byte	.LASF11
 3524 008c 03       		.uleb128 0x3
 3525 008d BF010000 		.4byte	.LASF12
 3526 0091 04       		.byte	0x4
 3527 0092 20       		.byte	0x20
 3528 0093 33000000 		.4byte	0x33
 3529 0097 03       		.uleb128 0x3
 3530 0098 71000000 		.4byte	.LASF13
 3531 009c 04       		.byte	0x4
 3532 009d 2C       		.byte	0x2c
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 107


 3533 009e 4C000000 		.4byte	0x4c
 3534 00a2 03       		.uleb128 0x3
 3535 00a3 39020000 		.4byte	.LASF14
 3536 00a7 04       		.byte	0x4
 3537 00a8 2D       		.byte	0x2d
 3538 00a9 5E000000 		.4byte	0x5e
 3539 00ad 02       		.uleb128 0x2
 3540 00ae 04       		.byte	0x4
 3541 00af 07       		.byte	0x7
 3542 00b0 F5010000 		.4byte	.LASF15
 3543 00b4 02       		.uleb128 0x2
 3544 00b5 01       		.byte	0x1
 3545 00b6 08       		.byte	0x8
 3546 00b7 22020000 		.4byte	.LASF16
 3547 00bb 02       		.uleb128 0x2
 3548 00bc 08       		.byte	0x8
 3549 00bd 04       		.byte	0x4
 3550 00be E7000000 		.4byte	.LASF17
 3551 00c2 02       		.uleb128 0x2
 3552 00c3 04       		.byte	0x4
 3553 00c4 04       		.byte	0x4
 3554 00c5 57020000 		.4byte	.LASF18
 3555 00c9 02       		.uleb128 0x2
 3556 00ca 08       		.byte	0x8
 3557 00cb 04       		.byte	0x4
 3558 00cc 4B020000 		.4byte	.LASF19
 3559 00d0 05       		.uleb128 0x5
 3560 00d1 82000000 		.4byte	.LASF20
 3561 00d5 02       		.byte	0x2
 3562 00d6 9601     		.2byte	0x196
 3563 00d8 8C000000 		.4byte	0x8c
 3564 00dc 05       		.uleb128 0x5
 3565 00dd 8D000000 		.4byte	.LASF21
 3566 00e1 02       		.byte	0x2
 3567 00e2 9B01     		.2byte	0x19b
 3568 00e4 97000000 		.4byte	0x97
 3569 00e8 06       		.uleb128 0x6
 3570 00e9 04       		.byte	0x4
 3571 00ea D0000000 		.4byte	0xd0
 3572 00ee 07       		.uleb128 0x7
 3573 00ef AD000000 		.4byte	.LASF22
 3574 00f3 02       		.byte	0x2
 3575 00f4 B303     		.2byte	0x3b3
 3576 00f6 A2000000 		.4byte	0xa2
 3577 00fa 03       		.byte	0x3
 3578 00fb 20010000 		.4byte	0x120
 3579 00ff 08       		.uleb128 0x8
 3580 0100 7800     		.ascii	"x\000"
 3581 0102 02       		.byte	0x2
 3582 0103 B403     		.2byte	0x3b4
 3583 0105 A2000000 		.4byte	0xa2
 3584 0109 08       		.uleb128 0x8
 3585 010a 7900     		.ascii	"y\000"
 3586 010c 02       		.byte	0x2
 3587 010d B503     		.2byte	0x3b5
 3588 010f A2000000 		.4byte	0xa2
 3589 0113 08       		.uleb128 0x8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 108


 3590 0114 73756D00 		.ascii	"sum\000"
 3591 0118 02       		.byte	0x2
 3592 0119 B603     		.2byte	0x3b6
 3593 011b A2000000 		.4byte	0xa2
 3594 011f 00       		.byte	0
 3595 0120 07       		.uleb128 0x7
 3596 0121 79000000 		.4byte	.LASF23
 3597 0125 02       		.byte	0x2
 3598 0126 C103     		.2byte	0x3c1
 3599 0128 A2000000 		.4byte	0xa2
 3600 012c 03       		.byte	0x3
 3601 012d 52010000 		.4byte	0x152
 3602 0131 08       		.uleb128 0x8
 3603 0132 7800     		.ascii	"x\000"
 3604 0134 02       		.byte	0x2
 3605 0135 C203     		.2byte	0x3c2
 3606 0137 A2000000 		.4byte	0xa2
 3607 013b 08       		.uleb128 0x8
 3608 013c 7900     		.ascii	"y\000"
 3609 013e 02       		.byte	0x2
 3610 013f C303     		.2byte	0x3c3
 3611 0141 A2000000 		.4byte	0xa2
 3612 0145 08       		.uleb128 0x8
 3613 0146 73756D00 		.ascii	"sum\000"
 3614 014a 02       		.byte	0x2
 3615 014b C403     		.2byte	0x3c4
 3616 014d A2000000 		.4byte	0xa2
 3617 0151 00       		.byte	0
 3618 0152 09       		.uleb128 0x9
 3619 0153 69020000 		.4byte	.LASF46
 3620 0157 01       		.byte	0x1
 3621 0158 41       		.byte	0x41
 3622 0159 00000000 		.4byte	.LFB82
 3623 015d 2C160000 		.4byte	.LFE82-.LFB82
 3624 0161 01       		.uleb128 0x1
 3625 0162 9C       		.byte	0x9c
 3626 0163 0A       		.uleb128 0xa
 3627 0164 0F000000 		.4byte	.LASF24
 3628 0168 01       		.byte	0x1
 3629 0169 42       		.byte	0x42
 3630 016a E8000000 		.4byte	0xe8
 3631 016e 03       		.uleb128 0x3
 3632 016f 91       		.byte	0x91
 3633 0170 947C     		.sleb128 -492
 3634 0172 0A       		.uleb128 0xa
 3635 0173 27020000 		.4byte	.LASF25
 3636 0177 01       		.byte	0x1
 3637 0178 43       		.byte	0x43
 3638 0179 A2000000 		.4byte	0xa2
 3639 017d 03       		.uleb128 0x3
 3640 017e 91       		.byte	0x91
 3641 017f 907C     		.sleb128 -496
 3642 0181 0A       		.uleb128 0xa
 3643 0182 15000000 		.4byte	.LASF26
 3644 0186 01       		.byte	0x1
 3645 0187 44       		.byte	0x44
 3646 0188 E8000000 		.4byte	0xe8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 109


 3647 018c 03       		.uleb128 0x3
 3648 018d 91       		.byte	0x91
 3649 018e 8C7C     		.sleb128 -500
 3650 0190 0A       		.uleb128 0xa
 3651 0191 DF000000 		.4byte	.LASF27
 3652 0195 01       		.byte	0x1
 3653 0196 45       		.byte	0x45
 3654 0197 A2000000 		.4byte	0xa2
 3655 019b 03       		.uleb128 0x3
 3656 019c 91       		.byte	0x91
 3657 019d 887C     		.sleb128 -504
 3658 019f 0A       		.uleb128 0xa
 3659 01a0 DA000000 		.4byte	.LASF28
 3660 01a4 01       		.byte	0x1
 3661 01a5 46       		.byte	0x46
 3662 01a6 E8000000 		.4byte	0xe8
 3663 01aa 02       		.uleb128 0x2
 3664 01ab 91       		.byte	0x91
 3665 01ac 00       		.sleb128 0
 3666 01ad 0B       		.uleb128 0xb
 3667 01ae BA010000 		.4byte	.LASF29
 3668 01b2 01       		.byte	0x1
 3669 01b3 49       		.byte	0x49
 3670 01b4 E8000000 		.4byte	0xe8
 3671 01b8 02       		.uleb128 0x2
 3672 01b9 91       		.byte	0x91
 3673 01ba 74       		.sleb128 -12
 3674 01bb 0B       		.uleb128 0xb
 3675 01bc A1000000 		.4byte	.LASF30
 3676 01c0 01       		.byte	0x1
 3677 01c1 4A       		.byte	0x4a
 3678 01c2 E8000000 		.4byte	0xe8
 3679 01c6 02       		.uleb128 0x2
 3680 01c7 91       		.byte	0x91
 3681 01c8 70       		.sleb128 -16
 3682 01c9 0B       		.uleb128 0xb
 3683 01ca 88000000 		.4byte	.LASF31
 3684 01ce 01       		.byte	0x1
 3685 01cf 4B       		.byte	0x4b
 3686 01d0 E8000000 		.4byte	0xe8
 3687 01d4 03       		.uleb128 0x3
 3688 01d5 91       		.byte	0x91
 3689 01d6 A07C     		.sleb128 -480
 3690 01d8 0C       		.uleb128 0xc
 3691 01d9 73756D00 		.ascii	"sum\000"
 3692 01dd 01       		.byte	0x1
 3693 01de 4C       		.byte	0x4c
 3694 01df DC000000 		.4byte	0xdc
 3695 01e3 02       		.uleb128 0x2
 3696 01e4 91       		.byte	0x91
 3697 01e5 6C       		.sleb128 -20
 3698 01e6 0B       		.uleb128 0xb
 3699 01e7 87020000 		.4byte	.LASF32
 3700 01eb 01       		.byte	0x1
 3701 01ec 4C       		.byte	0x4c
 3702 01ed DC000000 		.4byte	0xdc
 3703 01f1 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 110


 3704 01f2 91       		.byte	0x91
 3705 01f3 68       		.sleb128 -24
 3706 01f4 0B       		.uleb128 0xb
 3707 01f5 8C020000 		.4byte	.LASF33
 3708 01f9 01       		.byte	0x1
 3709 01fa 4C       		.byte	0x4c
 3710 01fb DC000000 		.4byte	0xdc
 3711 01ff 02       		.uleb128 0x2
 3712 0200 91       		.byte	0x91
 3713 0201 64       		.sleb128 -28
 3714 0202 0B       		.uleb128 0xb
 3715 0203 91020000 		.4byte	.LASF34
 3716 0207 01       		.byte	0x1
 3717 0208 4C       		.byte	0x4c
 3718 0209 DC000000 		.4byte	0xdc
 3719 020d 02       		.uleb128 0x2
 3720 020e 91       		.byte	0x91
 3721 020f 60       		.sleb128 -32
 3722 0210 0B       		.uleb128 0xb
 3723 0211 00000000 		.4byte	.LASF35
 3724 0215 01       		.byte	0x1
 3725 0216 4C       		.byte	0x4c
 3726 0217 DC000000 		.4byte	0xdc
 3727 021b 02       		.uleb128 0x2
 3728 021c 91       		.byte	0x91
 3729 021d 5C       		.sleb128 -36
 3730 021e 0C       		.uleb128 0xc
 3731 021f 707800   		.ascii	"px\000"
 3732 0222 01       		.byte	0x1
 3733 0223 4D       		.byte	0x4d
 3734 0224 E8000000 		.4byte	0xe8
 3735 0228 03       		.uleb128 0x3
 3736 0229 91       		.byte	0x91
 3737 022a 9C7C     		.sleb128 -484
 3738 022c 0C       		.uleb128 0xc
 3739 022d 707900   		.ascii	"py\000"
 3740 0230 01       		.byte	0x1
 3741 0231 4E       		.byte	0x4e
 3742 0232 E8000000 		.4byte	0xe8
 3743 0236 03       		.uleb128 0x3
 3744 0237 91       		.byte	0x91
 3745 0238 987C     		.sleb128 -488
 3746 023a 0B       		.uleb128 0xb
 3747 023b 7B020000 		.4byte	.LASF36
 3748 023f 01       		.byte	0x1
 3749 0240 4F       		.byte	0x4f
 3750 0241 E8000000 		.4byte	0xe8
 3751 0245 02       		.uleb128 0x2
 3752 0246 91       		.byte	0x91
 3753 0247 58       		.sleb128 -40
 3754 0248 0B       		.uleb128 0xb
 3755 0249 81020000 		.4byte	.LASF37
 3756 024d 01       		.byte	0x1
 3757 024e 4F       		.byte	0x4f
 3758 024f E8000000 		.4byte	0xe8
 3759 0253 03       		.uleb128 0x3
 3760 0254 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 111


 3761 0255 B07F     		.sleb128 -80
 3762 0257 0C       		.uleb128 0xc
 3763 0258 783000   		.ascii	"x0\000"
 3764 025b 01       		.byte	0x1
 3765 025c 50       		.byte	0x50
 3766 025d DC000000 		.4byte	0xdc
 3767 0261 02       		.uleb128 0x2
 3768 0262 91       		.byte	0x91
 3769 0263 54       		.sleb128 -44
 3770 0264 0C       		.uleb128 0xc
 3771 0265 783100   		.ascii	"x1\000"
 3772 0268 01       		.byte	0x1
 3773 0269 50       		.byte	0x50
 3774 026a DC000000 		.4byte	0xdc
 3775 026e 02       		.uleb128 0x2
 3776 026f 91       		.byte	0x91
 3777 0270 50       		.sleb128 -48
 3778 0271 0C       		.uleb128 0xc
 3779 0272 783200   		.ascii	"x2\000"
 3780 0275 01       		.byte	0x1
 3781 0276 50       		.byte	0x50
 3782 0277 DC000000 		.4byte	0xdc
 3783 027b 03       		.uleb128 0x3
 3784 027c 91       		.byte	0x91
 3785 027d A87F     		.sleb128 -88
 3786 027f 0C       		.uleb128 0xc
 3787 0280 783300   		.ascii	"x3\000"
 3788 0283 01       		.byte	0x1
 3789 0284 50       		.byte	0x50
 3790 0285 DC000000 		.4byte	0xdc
 3791 0289 03       		.uleb128 0x3
 3792 028a 91       		.byte	0x91
 3793 028b A47F     		.sleb128 -92
 3794 028d 0C       		.uleb128 0xc
 3795 028e 633000   		.ascii	"c0\000"
 3796 0291 01       		.byte	0x1
 3797 0292 50       		.byte	0x50
 3798 0293 DC000000 		.4byte	0xdc
 3799 0297 03       		.uleb128 0x3
 3800 0298 91       		.byte	0x91
 3801 0299 AC7F     		.sleb128 -84
 3802 029b 0B       		.uleb128 0xb
 3803 029c 0C020000 		.4byte	.LASF38
 3804 02a0 01       		.byte	0x1
 3805 02a1 51       		.byte	0x51
 3806 02a2 A2000000 		.4byte	0xa2
 3807 02a6 02       		.uleb128 0x2
 3808 02a7 91       		.byte	0x91
 3809 02a8 4C       		.sleb128 -52
 3810 02a9 0B       		.uleb128 0xb
 3811 02aa 17020000 		.4byte	.LASF39
 3812 02ae 01       		.byte	0x1
 3813 02af 51       		.byte	0x51
 3814 02b0 A2000000 		.4byte	0xa2
 3815 02b4 03       		.uleb128 0x3
 3816 02b5 91       		.byte	0x91
 3817 02b6 B47F     		.sleb128 -76
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 112


 3818 02b8 0B       		.uleb128 0xb
 3819 02b9 EE000000 		.4byte	.LASF40
 3820 02bd 01       		.byte	0x1
 3821 02be 51       		.byte	0x51
 3822 02bf A2000000 		.4byte	0xa2
 3823 02c3 02       		.uleb128 0x2
 3824 02c4 91       		.byte	0x91
 3825 02c5 48       		.sleb128 -56
 3826 02c6 0C       		.uleb128 0xc
 3827 02c7 6A00     		.ascii	"j\000"
 3828 02c9 01       		.byte	0x1
 3829 02ca 51       		.byte	0x51
 3830 02cb A2000000 		.4byte	0xa2
 3831 02cf 02       		.uleb128 0x2
 3832 02d0 91       		.byte	0x91
 3833 02d1 44       		.sleb128 -60
 3834 02d2 0C       		.uleb128 0xc
 3835 02d3 6B00     		.ascii	"k\000"
 3836 02d5 01       		.byte	0x1
 3837 02d6 51       		.byte	0x51
 3838 02d7 A2000000 		.4byte	0xa2
 3839 02db 02       		.uleb128 0x2
 3840 02dc 91       		.byte	0x91
 3841 02dd 40       		.sleb128 -64
 3842 02de 0B       		.uleb128 0xb
 3843 02df 1B000000 		.4byte	.LASF41
 3844 02e3 01       		.byte	0x1
 3845 02e4 51       		.byte	0x51
 3846 02e5 A2000000 		.4byte	0xa2
 3847 02e9 03       		.uleb128 0x3
 3848 02ea 91       		.byte	0x91
 3849 02eb BC7F     		.sleb128 -68
 3850 02ed 0B       		.uleb128 0xb
 3851 02ee A6000000 		.4byte	.LASF42
 3852 02f2 01       		.byte	0x1
 3853 02f3 51       		.byte	0x51
 3854 02f4 A2000000 		.4byte	0xa2
 3855 02f8 03       		.uleb128 0x3
 3856 02f9 91       		.byte	0x91
 3857 02fa B87F     		.sleb128 -72
 3858 02fc 0D       		.uleb128 0xd
 3859 02fd EE000000 		.4byte	0xee
 3860 0301 FE000000 		.4byte	.LBB66
 3861 0305 3C000000 		.4byte	.LBE66-.LBB66
 3862 0309 01       		.byte	0x1
 3863 030a A5       		.byte	0xa5
 3864 030b 2B030000 		.4byte	0x32b
 3865 030f 0E       		.uleb128 0xe
 3866 0310 13010000 		.4byte	0x113
 3867 0314 03       		.uleb128 0x3
 3868 0315 91       		.byte	0x91
 3869 0316 987F     		.sleb128 -104
 3870 0318 0E       		.uleb128 0xe
 3871 0319 09010000 		.4byte	0x109
 3872 031d 03       		.uleb128 0x3
 3873 031e 91       		.byte	0x91
 3874 031f 9C7F     		.sleb128 -100
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 113


 3875 0321 0E       		.uleb128 0xe
 3876 0322 FF000000 		.4byte	0xff
 3877 0326 03       		.uleb128 0x3
 3878 0327 91       		.byte	0x91
 3879 0328 A07F     		.sleb128 -96
 3880 032a 00       		.byte	0
 3881 032b 0D       		.uleb128 0xd
 3882 032c 20010000 		.4byte	0x120
 3883 0330 34020000 		.4byte	.LBB68
 3884 0334 3C000000 		.4byte	.LBE68-.LBB68
 3885 0338 01       		.byte	0x1
 3886 0339 CD       		.byte	0xcd
 3887 033a 5A030000 		.4byte	0x35a
 3888 033e 0E       		.uleb128 0xe
 3889 033f 45010000 		.4byte	0x145
 3890 0343 03       		.uleb128 0x3
 3891 0344 91       		.byte	0x91
 3892 0345 8C7F     		.sleb128 -116
 3893 0347 0E       		.uleb128 0xe
 3894 0348 3B010000 		.4byte	0x13b
 3895 034c 03       		.uleb128 0x3
 3896 034d 91       		.byte	0x91
 3897 034e 907F     		.sleb128 -112
 3898 0350 0E       		.uleb128 0xe
 3899 0351 31010000 		.4byte	0x131
 3900 0355 03       		.uleb128 0x3
 3901 0356 91       		.byte	0x91
 3902 0357 947F     		.sleb128 -108
 3903 0359 00       		.byte	0
 3904 035a 0D       		.uleb128 0xd
 3905 035b 20010000 		.4byte	0x120
 3906 035f B4020000 		.4byte	.LBB70
 3907 0363 3C000000 		.4byte	.LBE70-.LBB70
 3908 0367 01       		.byte	0x1
 3909 0368 CF       		.byte	0xcf
 3910 0369 89030000 		.4byte	0x389
 3911 036d 0E       		.uleb128 0xe
 3912 036e 45010000 		.4byte	0x145
 3913 0372 03       		.uleb128 0x3
 3914 0373 91       		.byte	0x91
 3915 0374 807F     		.sleb128 -128
 3916 0376 0E       		.uleb128 0xe
 3917 0377 3B010000 		.4byte	0x13b
 3918 037b 03       		.uleb128 0x3
 3919 037c 91       		.byte	0x91
 3920 037d 847F     		.sleb128 -124
 3921 037f 0E       		.uleb128 0xe
 3922 0380 31010000 		.4byte	0x131
 3923 0384 03       		.uleb128 0x3
 3924 0385 91       		.byte	0x91
 3925 0386 887F     		.sleb128 -120
 3926 0388 00       		.byte	0
 3927 0389 0D       		.uleb128 0xd
 3928 038a EE000000 		.4byte	0xee
 3929 038e 68030000 		.4byte	.LBB72
 3930 0392 3C000000 		.4byte	.LBE72-.LBB72
 3931 0396 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 114


 3932 0397 E0       		.byte	0xe0
 3933 0398 B8030000 		.4byte	0x3b8
 3934 039c 0E       		.uleb128 0xe
 3935 039d 13010000 		.4byte	0x113
 3936 03a1 03       		.uleb128 0x3
 3937 03a2 91       		.byte	0x91
 3938 03a3 F47E     		.sleb128 -140
 3939 03a5 0E       		.uleb128 0xe
 3940 03a6 09010000 		.4byte	0x109
 3941 03aa 03       		.uleb128 0x3
 3942 03ab 91       		.byte	0x91
 3943 03ac F87E     		.sleb128 -136
 3944 03ae 0E       		.uleb128 0xe
 3945 03af FF000000 		.4byte	0xff
 3946 03b3 03       		.uleb128 0x3
 3947 03b4 91       		.byte	0x91
 3948 03b5 FC7E     		.sleb128 -132
 3949 03b7 00       		.byte	0
 3950 03b8 0F       		.uleb128 0xf
 3951 03b9 20010000 		.4byte	0x120
 3952 03bd 36050000 		.4byte	.LBB74
 3953 03c1 3C000000 		.4byte	.LBE74-.LBB74
 3954 03c5 01       		.byte	0x1
 3955 03c6 3301     		.2byte	0x133
 3956 03c8 E8030000 		.4byte	0x3e8
 3957 03cc 0E       		.uleb128 0xe
 3958 03cd 45010000 		.4byte	0x145
 3959 03d1 03       		.uleb128 0x3
 3960 03d2 91       		.byte	0x91
 3961 03d3 E87E     		.sleb128 -152
 3962 03d5 0E       		.uleb128 0xe
 3963 03d6 3B010000 		.4byte	0x13b
 3964 03da 03       		.uleb128 0x3
 3965 03db 91       		.byte	0x91
 3966 03dc EC7E     		.sleb128 -148
 3967 03de 0E       		.uleb128 0xe
 3968 03df 31010000 		.4byte	0x131
 3969 03e3 03       		.uleb128 0x3
 3970 03e4 91       		.byte	0x91
 3971 03e5 F07E     		.sleb128 -144
 3972 03e7 00       		.byte	0
 3973 03e8 0F       		.uleb128 0xf
 3974 03e9 20010000 		.4byte	0x120
 3975 03ed AA050000 		.4byte	.LBB76
 3976 03f1 3C000000 		.4byte	.LBE76-.LBB76
 3977 03f5 01       		.byte	0x1
 3978 03f6 3601     		.2byte	0x136
 3979 03f8 18040000 		.4byte	0x418
 3980 03fc 0E       		.uleb128 0xe
 3981 03fd 45010000 		.4byte	0x145
 3982 0401 03       		.uleb128 0x3
 3983 0402 91       		.byte	0x91
 3984 0403 DC7E     		.sleb128 -164
 3985 0405 0E       		.uleb128 0xe
 3986 0406 3B010000 		.4byte	0x13b
 3987 040a 03       		.uleb128 0x3
 3988 040b 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 115


 3989 040c E07E     		.sleb128 -160
 3990 040e 0E       		.uleb128 0xe
 3991 040f 31010000 		.4byte	0x131
 3992 0413 03       		.uleb128 0x3
 3993 0414 91       		.byte	0x91
 3994 0415 E47E     		.sleb128 -156
 3995 0417 00       		.byte	0
 3996 0418 0F       		.uleb128 0xf
 3997 0419 20010000 		.4byte	0x120
 3998 041d 3C060000 		.4byte	.LBB78
 3999 0421 3C000000 		.4byte	.LBE78-.LBB78
 4000 0425 01       		.byte	0x1
 4001 0426 3F01     		.2byte	0x13f
 4002 0428 48040000 		.4byte	0x448
 4003 042c 0E       		.uleb128 0xe
 4004 042d 45010000 		.4byte	0x145
 4005 0431 03       		.uleb128 0x3
 4006 0432 91       		.byte	0x91
 4007 0433 D07E     		.sleb128 -176
 4008 0435 0E       		.uleb128 0xe
 4009 0436 3B010000 		.4byte	0x13b
 4010 043a 03       		.uleb128 0x3
 4011 043b 91       		.byte	0x91
 4012 043c D47E     		.sleb128 -172
 4013 043e 0E       		.uleb128 0xe
 4014 043f 31010000 		.4byte	0x131
 4015 0443 03       		.uleb128 0x3
 4016 0444 91       		.byte	0x91
 4017 0445 D87E     		.sleb128 -168
 4018 0447 00       		.byte	0
 4019 0448 0F       		.uleb128 0xf
 4020 0449 20010000 		.4byte	0x120
 4021 044d B0060000 		.4byte	.LBB80
 4022 0451 3C000000 		.4byte	.LBE80-.LBB80
 4023 0455 01       		.byte	0x1
 4024 0456 4201     		.2byte	0x142
 4025 0458 78040000 		.4byte	0x478
 4026 045c 0E       		.uleb128 0xe
 4027 045d 45010000 		.4byte	0x145
 4028 0461 03       		.uleb128 0x3
 4029 0462 91       		.byte	0x91
 4030 0463 C47E     		.sleb128 -188
 4031 0465 0E       		.uleb128 0xe
 4032 0466 3B010000 		.4byte	0x13b
 4033 046a 03       		.uleb128 0x3
 4034 046b 91       		.byte	0x91
 4035 046c C87E     		.sleb128 -184
 4036 046e 0E       		.uleb128 0xe
 4037 046f 31010000 		.4byte	0x131
 4038 0473 03       		.uleb128 0x3
 4039 0474 91       		.byte	0x91
 4040 0475 CC7E     		.sleb128 -180
 4041 0477 00       		.byte	0
 4042 0478 0F       		.uleb128 0xf
 4043 0479 20010000 		.4byte	0x120
 4044 047d 38070000 		.4byte	.LBB82
 4045 0481 3C000000 		.4byte	.LBE82-.LBB82
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 116


 4046 0485 01       		.byte	0x1
 4047 0486 4801     		.2byte	0x148
 4048 0488 A8040000 		.4byte	0x4a8
 4049 048c 0E       		.uleb128 0xe
 4050 048d 45010000 		.4byte	0x145
 4051 0491 03       		.uleb128 0x3
 4052 0492 91       		.byte	0x91
 4053 0493 B87E     		.sleb128 -200
 4054 0495 0E       		.uleb128 0xe
 4055 0496 3B010000 		.4byte	0x13b
 4056 049a 03       		.uleb128 0x3
 4057 049b 91       		.byte	0x91
 4058 049c BC7E     		.sleb128 -196
 4059 049e 0E       		.uleb128 0xe
 4060 049f 31010000 		.4byte	0x131
 4061 04a3 03       		.uleb128 0x3
 4062 04a4 91       		.byte	0x91
 4063 04a5 C07E     		.sleb128 -192
 4064 04a7 00       		.byte	0
 4065 04a8 0F       		.uleb128 0xf
 4066 04a9 20010000 		.4byte	0x120
 4067 04ad AC070000 		.4byte	.LBB84
 4068 04b1 3C000000 		.4byte	.LBE84-.LBB84
 4069 04b5 01       		.byte	0x1
 4070 04b6 4B01     		.2byte	0x14b
 4071 04b8 D8040000 		.4byte	0x4d8
 4072 04bc 0E       		.uleb128 0xe
 4073 04bd 45010000 		.4byte	0x145
 4074 04c1 03       		.uleb128 0x3
 4075 04c2 91       		.byte	0x91
 4076 04c3 AC7E     		.sleb128 -212
 4077 04c5 0E       		.uleb128 0xe
 4078 04c6 3B010000 		.4byte	0x13b
 4079 04ca 03       		.uleb128 0x3
 4080 04cb 91       		.byte	0x91
 4081 04cc B07E     		.sleb128 -208
 4082 04ce 0E       		.uleb128 0xe
 4083 04cf 31010000 		.4byte	0x131
 4084 04d3 03       		.uleb128 0x3
 4085 04d4 91       		.byte	0x91
 4086 04d5 B47E     		.sleb128 -204
 4087 04d7 00       		.byte	0
 4088 04d8 0F       		.uleb128 0xf
 4089 04d9 20010000 		.4byte	0x120
 4090 04dd 40080000 		.4byte	.LBB86
 4091 04e1 3C000000 		.4byte	.LBE86-.LBB86
 4092 04e5 01       		.byte	0x1
 4093 04e6 5501     		.2byte	0x155
 4094 04e8 08050000 		.4byte	0x508
 4095 04ec 0E       		.uleb128 0xe
 4096 04ed 45010000 		.4byte	0x145
 4097 04f1 03       		.uleb128 0x3
 4098 04f2 91       		.byte	0x91
 4099 04f3 A07E     		.sleb128 -224
 4100 04f5 0E       		.uleb128 0xe
 4101 04f6 3B010000 		.4byte	0x13b
 4102 04fa 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 117


 4103 04fb 91       		.byte	0x91
 4104 04fc A47E     		.sleb128 -220
 4105 04fe 0E       		.uleb128 0xe
 4106 04ff 31010000 		.4byte	0x131
 4107 0503 03       		.uleb128 0x3
 4108 0504 91       		.byte	0x91
 4109 0505 A87E     		.sleb128 -216
 4110 0507 00       		.byte	0
 4111 0508 0F       		.uleb128 0xf
 4112 0509 20010000 		.4byte	0x120
 4113 050d B4080000 		.4byte	.LBB88
 4114 0511 3C000000 		.4byte	.LBE88-.LBB88
 4115 0515 01       		.byte	0x1
 4116 0516 5801     		.2byte	0x158
 4117 0518 38050000 		.4byte	0x538
 4118 051c 0E       		.uleb128 0xe
 4119 051d 45010000 		.4byte	0x145
 4120 0521 03       		.uleb128 0x3
 4121 0522 91       		.byte	0x91
 4122 0523 947E     		.sleb128 -236
 4123 0525 0E       		.uleb128 0xe
 4124 0526 3B010000 		.4byte	0x13b
 4125 052a 03       		.uleb128 0x3
 4126 052b 91       		.byte	0x91
 4127 052c 987E     		.sleb128 -232
 4128 052e 0E       		.uleb128 0xe
 4129 052f 31010000 		.4byte	0x131
 4130 0533 03       		.uleb128 0x3
 4131 0534 91       		.byte	0x91
 4132 0535 9C7E     		.sleb128 -228
 4133 0537 00       		.byte	0
 4134 0538 0F       		.uleb128 0xf
 4135 0539 EE000000 		.4byte	0xee
 4136 053d 9A090000 		.4byte	.LBB90
 4137 0541 36000000 		.4byte	.LBE90-.LBB90
 4138 0545 01       		.byte	0x1
 4139 0546 7701     		.2byte	0x177
 4140 0548 68050000 		.4byte	0x568
 4141 054c 0E       		.uleb128 0xe
 4142 054d 13010000 		.4byte	0x113
 4143 0551 03       		.uleb128 0x3
 4144 0552 91       		.byte	0x91
 4145 0553 887E     		.sleb128 -248
 4146 0555 0E       		.uleb128 0xe
 4147 0556 09010000 		.4byte	0x109
 4148 055a 03       		.uleb128 0x3
 4149 055b 91       		.byte	0x91
 4150 055c 8C7E     		.sleb128 -244
 4151 055e 0E       		.uleb128 0xe
 4152 055f FF000000 		.4byte	0xff
 4153 0563 03       		.uleb128 0x3
 4154 0564 91       		.byte	0x91
 4155 0565 907E     		.sleb128 -240
 4156 0567 00       		.byte	0
 4157 0568 0F       		.uleb128 0xf
 4158 0569 EE000000 		.4byte	0xee
 4159 056d 020A0000 		.4byte	.LBB92
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 118


 4160 0571 32000000 		.4byte	.LBE92-.LBB92
 4161 0575 01       		.byte	0x1
 4162 0576 7801     		.2byte	0x178
 4163 0578 98050000 		.4byte	0x598
 4164 057c 0E       		.uleb128 0xe
 4165 057d 13010000 		.4byte	0x113
 4166 0581 03       		.uleb128 0x3
 4167 0582 91       		.byte	0x91
 4168 0583 FC7D     		.sleb128 -260
 4169 0585 0E       		.uleb128 0xe
 4170 0586 09010000 		.4byte	0x109
 4171 058a 03       		.uleb128 0x3
 4172 058b 91       		.byte	0x91
 4173 058c 807E     		.sleb128 -256
 4174 058e 0E       		.uleb128 0xe
 4175 058f FF000000 		.4byte	0xff
 4176 0593 03       		.uleb128 0x3
 4177 0594 91       		.byte	0x91
 4178 0595 847E     		.sleb128 -252
 4179 0597 00       		.byte	0
 4180 0598 0F       		.uleb128 0xf
 4181 0599 20010000 		.4byte	0x120
 4182 059d 660A0000 		.4byte	.LBB94
 4183 05a1 32000000 		.4byte	.LBE94-.LBB94
 4184 05a5 01       		.byte	0x1
 4185 05a6 7901     		.2byte	0x179
 4186 05a8 C8050000 		.4byte	0x5c8
 4187 05ac 0E       		.uleb128 0xe
 4188 05ad 45010000 		.4byte	0x145
 4189 05b1 03       		.uleb128 0x3
 4190 05b2 91       		.byte	0x91
 4191 05b3 F07D     		.sleb128 -272
 4192 05b5 0E       		.uleb128 0xe
 4193 05b6 3B010000 		.4byte	0x13b
 4194 05ba 03       		.uleb128 0x3
 4195 05bb 91       		.byte	0x91
 4196 05bc F47D     		.sleb128 -268
 4197 05be 0E       		.uleb128 0xe
 4198 05bf 31010000 		.4byte	0x131
 4199 05c3 03       		.uleb128 0x3
 4200 05c4 91       		.byte	0x91
 4201 05c5 F87D     		.sleb128 -264
 4202 05c7 00       		.byte	0
 4203 05c8 0F       		.uleb128 0xf
 4204 05c9 20010000 		.4byte	0x120
 4205 05cd CA0A0000 		.4byte	.LBB96
 4206 05d1 32000000 		.4byte	.LBE96-.LBB96
 4207 05d5 01       		.byte	0x1
 4208 05d6 7A01     		.2byte	0x17a
 4209 05d8 F8050000 		.4byte	0x5f8
 4210 05dc 0E       		.uleb128 0xe
 4211 05dd 45010000 		.4byte	0x145
 4212 05e1 03       		.uleb128 0x3
 4213 05e2 91       		.byte	0x91
 4214 05e3 E47D     		.sleb128 -284
 4215 05e5 0E       		.uleb128 0xe
 4216 05e6 3B010000 		.4byte	0x13b
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 119


 4217 05ea 03       		.uleb128 0x3
 4218 05eb 91       		.byte	0x91
 4219 05ec E87D     		.sleb128 -280
 4220 05ee 0E       		.uleb128 0xe
 4221 05ef 31010000 		.4byte	0x131
 4222 05f3 03       		.uleb128 0x3
 4223 05f4 91       		.byte	0x91
 4224 05f5 EC7D     		.sleb128 -276
 4225 05f7 00       		.byte	0
 4226 05f8 0F       		.uleb128 0xf
 4227 05f9 20010000 		.4byte	0x120
 4228 05fd 6C0B0000 		.4byte	.LBB98
 4229 0601 32000000 		.4byte	.LBE98-.LBB98
 4230 0605 01       		.byte	0x1
 4231 0606 8A01     		.2byte	0x18a
 4232 0608 28060000 		.4byte	0x628
 4233 060c 0E       		.uleb128 0xe
 4234 060d 45010000 		.4byte	0x145
 4235 0611 03       		.uleb128 0x3
 4236 0612 91       		.byte	0x91
 4237 0613 D87D     		.sleb128 -296
 4238 0615 0E       		.uleb128 0xe
 4239 0616 3B010000 		.4byte	0x13b
 4240 061a 03       		.uleb128 0x3
 4241 061b 91       		.byte	0x91
 4242 061c DC7D     		.sleb128 -292
 4243 061e 0E       		.uleb128 0xe
 4244 061f 31010000 		.4byte	0x131
 4245 0623 03       		.uleb128 0x3
 4246 0624 91       		.byte	0x91
 4247 0625 E07D     		.sleb128 -288
 4248 0627 00       		.byte	0
 4249 0628 0F       		.uleb128 0xf
 4250 0629 20010000 		.4byte	0x120
 4251 062d D00B0000 		.4byte	.LBB100
 4252 0631 32000000 		.4byte	.LBE100-.LBB100
 4253 0635 01       		.byte	0x1
 4254 0636 8B01     		.2byte	0x18b
 4255 0638 58060000 		.4byte	0x658
 4256 063c 0E       		.uleb128 0xe
 4257 063d 45010000 		.4byte	0x145
 4258 0641 03       		.uleb128 0x3
 4259 0642 91       		.byte	0x91
 4260 0643 CC7D     		.sleb128 -308
 4261 0645 0E       		.uleb128 0xe
 4262 0646 3B010000 		.4byte	0x13b
 4263 064a 03       		.uleb128 0x3
 4264 064b 91       		.byte	0x91
 4265 064c D07D     		.sleb128 -304
 4266 064e 0E       		.uleb128 0xe
 4267 064f 31010000 		.4byte	0x131
 4268 0653 03       		.uleb128 0x3
 4269 0654 91       		.byte	0x91
 4270 0655 D47D     		.sleb128 -300
 4271 0657 00       		.byte	0
 4272 0658 0F       		.uleb128 0xf
 4273 0659 20010000 		.4byte	0x120
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 120


 4274 065d 340C0000 		.4byte	.LBB102
 4275 0661 32000000 		.4byte	.LBE102-.LBB102
 4276 0665 01       		.byte	0x1
 4277 0666 8C01     		.2byte	0x18c
 4278 0668 88060000 		.4byte	0x688
 4279 066c 0E       		.uleb128 0xe
 4280 066d 45010000 		.4byte	0x145
 4281 0671 03       		.uleb128 0x3
 4282 0672 91       		.byte	0x91
 4283 0673 C07D     		.sleb128 -320
 4284 0675 0E       		.uleb128 0xe
 4285 0676 3B010000 		.4byte	0x13b
 4286 067a 03       		.uleb128 0x3
 4287 067b 91       		.byte	0x91
 4288 067c C47D     		.sleb128 -316
 4289 067e 0E       		.uleb128 0xe
 4290 067f 31010000 		.4byte	0x131
 4291 0683 03       		.uleb128 0x3
 4292 0684 91       		.byte	0x91
 4293 0685 C87D     		.sleb128 -312
 4294 0687 00       		.byte	0
 4295 0688 0F       		.uleb128 0xf
 4296 0689 20010000 		.4byte	0x120
 4297 068d 980C0000 		.4byte	.LBB104
 4298 0691 32000000 		.4byte	.LBE104-.LBB104
 4299 0695 01       		.byte	0x1
 4300 0696 8D01     		.2byte	0x18d
 4301 0698 B8060000 		.4byte	0x6b8
 4302 069c 0E       		.uleb128 0xe
 4303 069d 45010000 		.4byte	0x145
 4304 06a1 03       		.uleb128 0x3
 4305 06a2 91       		.byte	0x91
 4306 06a3 B47D     		.sleb128 -332
 4307 06a5 0E       		.uleb128 0xe
 4308 06a6 3B010000 		.4byte	0x13b
 4309 06aa 03       		.uleb128 0x3
 4310 06ab 91       		.byte	0x91
 4311 06ac B87D     		.sleb128 -328
 4312 06ae 0E       		.uleb128 0xe
 4313 06af 31010000 		.4byte	0x131
 4314 06b3 03       		.uleb128 0x3
 4315 06b4 91       		.byte	0x91
 4316 06b5 BC7D     		.sleb128 -324
 4317 06b7 00       		.byte	0
 4318 06b8 0F       		.uleb128 0xf
 4319 06b9 20010000 		.4byte	0x120
 4320 06bd 340D0000 		.4byte	.LBB106
 4321 06c1 32000000 		.4byte	.LBE106-.LBB106
 4322 06c5 01       		.byte	0x1
 4323 06c6 9C01     		.2byte	0x19c
 4324 06c8 E8060000 		.4byte	0x6e8
 4325 06cc 0E       		.uleb128 0xe
 4326 06cd 45010000 		.4byte	0x145
 4327 06d1 03       		.uleb128 0x3
 4328 06d2 91       		.byte	0x91
 4329 06d3 A87D     		.sleb128 -344
 4330 06d5 0E       		.uleb128 0xe
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 121


 4331 06d6 3B010000 		.4byte	0x13b
 4332 06da 03       		.uleb128 0x3
 4333 06db 91       		.byte	0x91
 4334 06dc AC7D     		.sleb128 -340
 4335 06de 0E       		.uleb128 0xe
 4336 06df 31010000 		.4byte	0x131
 4337 06e3 03       		.uleb128 0x3
 4338 06e4 91       		.byte	0x91
 4339 06e5 B07D     		.sleb128 -336
 4340 06e7 00       		.byte	0
 4341 06e8 0F       		.uleb128 0xf
 4342 06e9 20010000 		.4byte	0x120
 4343 06ed 980D0000 		.4byte	.LBB108
 4344 06f1 32000000 		.4byte	.LBE108-.LBB108
 4345 06f5 01       		.byte	0x1
 4346 06f6 9D01     		.2byte	0x19d
 4347 06f8 18070000 		.4byte	0x718
 4348 06fc 0E       		.uleb128 0xe
 4349 06fd 45010000 		.4byte	0x145
 4350 0701 03       		.uleb128 0x3
 4351 0702 91       		.byte	0x91
 4352 0703 9C7D     		.sleb128 -356
 4353 0705 0E       		.uleb128 0xe
 4354 0706 3B010000 		.4byte	0x13b
 4355 070a 03       		.uleb128 0x3
 4356 070b 91       		.byte	0x91
 4357 070c A07D     		.sleb128 -352
 4358 070e 0E       		.uleb128 0xe
 4359 070f 31010000 		.4byte	0x131
 4360 0713 03       		.uleb128 0x3
 4361 0714 91       		.byte	0x91
 4362 0715 A47D     		.sleb128 -348
 4363 0717 00       		.byte	0
 4364 0718 0F       		.uleb128 0xf
 4365 0719 20010000 		.4byte	0x120
 4366 071d FC0D0000 		.4byte	.LBB110
 4367 0721 32000000 		.4byte	.LBE110-.LBB110
 4368 0725 01       		.byte	0x1
 4369 0726 9E01     		.2byte	0x19e
 4370 0728 48070000 		.4byte	0x748
 4371 072c 0E       		.uleb128 0xe
 4372 072d 45010000 		.4byte	0x145
 4373 0731 03       		.uleb128 0x3
 4374 0732 91       		.byte	0x91
 4375 0733 907D     		.sleb128 -368
 4376 0735 0E       		.uleb128 0xe
 4377 0736 3B010000 		.4byte	0x13b
 4378 073a 03       		.uleb128 0x3
 4379 073b 91       		.byte	0x91
 4380 073c 947D     		.sleb128 -364
 4381 073e 0E       		.uleb128 0xe
 4382 073f 31010000 		.4byte	0x131
 4383 0743 03       		.uleb128 0x3
 4384 0744 91       		.byte	0x91
 4385 0745 987D     		.sleb128 -360
 4386 0747 00       		.byte	0
 4387 0748 0F       		.uleb128 0xf
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 122


 4388 0749 20010000 		.4byte	0x120
 4389 074d 5C0E0000 		.4byte	.LBB112
 4390 0751 2E000000 		.4byte	.LBE112-.LBB112
 4391 0755 01       		.byte	0x1
 4392 0756 9F01     		.2byte	0x19f
 4393 0758 78070000 		.4byte	0x778
 4394 075c 0E       		.uleb128 0xe
 4395 075d 45010000 		.4byte	0x145
 4396 0761 03       		.uleb128 0x3
 4397 0762 91       		.byte	0x91
 4398 0763 847D     		.sleb128 -380
 4399 0765 0E       		.uleb128 0xe
 4400 0766 3B010000 		.4byte	0x13b
 4401 076a 03       		.uleb128 0x3
 4402 076b 91       		.byte	0x91
 4403 076c 887D     		.sleb128 -376
 4404 076e 0E       		.uleb128 0xe
 4405 076f 31010000 		.4byte	0x131
 4406 0773 03       		.uleb128 0x3
 4407 0774 91       		.byte	0x91
 4408 0775 8C7D     		.sleb128 -372
 4409 0777 00       		.byte	0
 4410 0778 0F       		.uleb128 0xf
 4411 0779 20010000 		.4byte	0x120
 4412 077d E60E0000 		.4byte	.LBB114
 4413 0781 1E000000 		.4byte	.LBE114-.LBB114
 4414 0785 01       		.byte	0x1
 4415 0786 B001     		.2byte	0x1b0
 4416 0788 A8070000 		.4byte	0x7a8
 4417 078c 0E       		.uleb128 0xe
 4418 078d 45010000 		.4byte	0x145
 4419 0791 03       		.uleb128 0x3
 4420 0792 91       		.byte	0x91
 4421 0793 F87C     		.sleb128 -392
 4422 0795 0E       		.uleb128 0xe
 4423 0796 3B010000 		.4byte	0x13b
 4424 079a 03       		.uleb128 0x3
 4425 079b 91       		.byte	0x91
 4426 079c FC7C     		.sleb128 -388
 4427 079e 0E       		.uleb128 0xe
 4428 079f 31010000 		.4byte	0x131
 4429 07a3 03       		.uleb128 0x3
 4430 07a4 91       		.byte	0x91
 4431 07a5 807D     		.sleb128 -384
 4432 07a7 00       		.byte	0
 4433 07a8 0F       		.uleb128 0xf
 4434 07a9 EE000000 		.4byte	0xee
 4435 07ad 2A0F0000 		.4byte	.LBB116
 4436 07b1 1E000000 		.4byte	.LBE116-.LBB116
 4437 07b5 01       		.byte	0x1
 4438 07b6 B101     		.2byte	0x1b1
 4439 07b8 D8070000 		.4byte	0x7d8
 4440 07bc 0E       		.uleb128 0xe
 4441 07bd 13010000 		.4byte	0x113
 4442 07c1 03       		.uleb128 0x3
 4443 07c2 91       		.byte	0x91
 4444 07c3 EC7C     		.sleb128 -404
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 123


 4445 07c5 0E       		.uleb128 0xe
 4446 07c6 09010000 		.4byte	0x109
 4447 07ca 03       		.uleb128 0x3
 4448 07cb 91       		.byte	0x91
 4449 07cc F07C     		.sleb128 -400
 4450 07ce 0E       		.uleb128 0xe
 4451 07cf FF000000 		.4byte	0xff
 4452 07d3 03       		.uleb128 0x3
 4453 07d4 91       		.byte	0x91
 4454 07d5 F47C     		.sleb128 -396
 4455 07d7 00       		.byte	0
 4456 07d8 0F       		.uleb128 0xf
 4457 07d9 20010000 		.4byte	0x120
 4458 07dd 6E0F0000 		.4byte	.LBB118
 4459 07e1 1E000000 		.4byte	.LBE118-.LBB118
 4460 07e5 01       		.byte	0x1
 4461 07e6 B201     		.2byte	0x1b2
 4462 07e8 08080000 		.4byte	0x808
 4463 07ec 0E       		.uleb128 0xe
 4464 07ed 45010000 		.4byte	0x145
 4465 07f1 03       		.uleb128 0x3
 4466 07f2 91       		.byte	0x91
 4467 07f3 E07C     		.sleb128 -416
 4468 07f5 0E       		.uleb128 0xe
 4469 07f6 3B010000 		.4byte	0x13b
 4470 07fa 03       		.uleb128 0x3
 4471 07fb 91       		.byte	0x91
 4472 07fc E47C     		.sleb128 -412
 4473 07fe 0E       		.uleb128 0xe
 4474 07ff 31010000 		.4byte	0x131
 4475 0803 03       		.uleb128 0x3
 4476 0804 91       		.byte	0x91
 4477 0805 E87C     		.sleb128 -408
 4478 0807 00       		.byte	0
 4479 0808 0F       		.uleb128 0xf
 4480 0809 20010000 		.4byte	0x120
 4481 080d B20F0000 		.4byte	.LBB120
 4482 0811 1E000000 		.4byte	.LBE120-.LBB120
 4483 0815 01       		.byte	0x1
 4484 0816 B301     		.2byte	0x1b3
 4485 0818 38080000 		.4byte	0x838
 4486 081c 0E       		.uleb128 0xe
 4487 081d 45010000 		.4byte	0x145
 4488 0821 03       		.uleb128 0x3
 4489 0822 91       		.byte	0x91
 4490 0823 D47C     		.sleb128 -428
 4491 0825 0E       		.uleb128 0xe
 4492 0826 3B010000 		.4byte	0x13b
 4493 082a 03       		.uleb128 0x3
 4494 082b 91       		.byte	0x91
 4495 082c D87C     		.sleb128 -424
 4496 082e 0E       		.uleb128 0xe
 4497 082f 31010000 		.4byte	0x131
 4498 0833 03       		.uleb128 0x3
 4499 0834 91       		.byte	0x91
 4500 0835 DC7C     		.sleb128 -420
 4501 0837 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 124


 4502 0838 0F       		.uleb128 0xf
 4503 0839 20010000 		.4byte	0x120
 4504 083d B2130000 		.4byte	.LBB122
 4505 0841 1E000000 		.4byte	.LBE122-.LBB122
 4506 0845 01       		.byte	0x1
 4507 0846 5A02     		.2byte	0x25a
 4508 0848 68080000 		.4byte	0x868
 4509 084c 0E       		.uleb128 0xe
 4510 084d 45010000 		.4byte	0x145
 4511 0851 03       		.uleb128 0x3
 4512 0852 91       		.byte	0x91
 4513 0853 C87C     		.sleb128 -440
 4514 0855 0E       		.uleb128 0xe
 4515 0856 3B010000 		.4byte	0x13b
 4516 085a 03       		.uleb128 0x3
 4517 085b 91       		.byte	0x91
 4518 085c CC7C     		.sleb128 -436
 4519 085e 0E       		.uleb128 0xe
 4520 085f 31010000 		.4byte	0x131
 4521 0863 03       		.uleb128 0x3
 4522 0864 91       		.byte	0x91
 4523 0865 D07C     		.sleb128 -432
 4524 0867 00       		.byte	0
 4525 0868 0F       		.uleb128 0xf
 4526 0869 20010000 		.4byte	0x120
 4527 086d 02140000 		.4byte	.LBB124
 4528 0871 1E000000 		.4byte	.LBE124-.LBB124
 4529 0875 01       		.byte	0x1
 4530 0876 5D02     		.2byte	0x25d
 4531 0878 98080000 		.4byte	0x898
 4532 087c 0E       		.uleb128 0xe
 4533 087d 45010000 		.4byte	0x145
 4534 0881 03       		.uleb128 0x3
 4535 0882 91       		.byte	0x91
 4536 0883 BC7C     		.sleb128 -452
 4537 0885 0E       		.uleb128 0xe
 4538 0886 3B010000 		.4byte	0x13b
 4539 088a 03       		.uleb128 0x3
 4540 088b 91       		.byte	0x91
 4541 088c C07C     		.sleb128 -448
 4542 088e 0E       		.uleb128 0xe
 4543 088f 31010000 		.4byte	0x131
 4544 0893 03       		.uleb128 0x3
 4545 0894 91       		.byte	0x91
 4546 0895 C47C     		.sleb128 -444
 4547 0897 00       		.byte	0
 4548 0898 0F       		.uleb128 0xf
 4549 0899 EE000000 		.4byte	0xee
 4550 089d 84140000 		.4byte	.LBB126
 4551 08a1 1E000000 		.4byte	.LBE126-.LBB126
 4552 08a5 01       		.byte	0x1
 4553 08a6 6E02     		.2byte	0x26e
 4554 08a8 C8080000 		.4byte	0x8c8
 4555 08ac 0E       		.uleb128 0xe
 4556 08ad 13010000 		.4byte	0x113
 4557 08b1 03       		.uleb128 0x3
 4558 08b2 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 125


 4559 08b3 B07C     		.sleb128 -464
 4560 08b5 0E       		.uleb128 0xe
 4561 08b6 09010000 		.4byte	0x109
 4562 08ba 03       		.uleb128 0x3
 4563 08bb 91       		.byte	0x91
 4564 08bc B47C     		.sleb128 -460
 4565 08be 0E       		.uleb128 0xe
 4566 08bf FF000000 		.4byte	0xff
 4567 08c3 03       		.uleb128 0x3
 4568 08c4 91       		.byte	0x91
 4569 08c5 B87C     		.sleb128 -456
 4570 08c7 00       		.byte	0
 4571 08c8 10       		.uleb128 0x10
 4572 08c9 EE000000 		.4byte	0xee
 4573 08cd 86150000 		.4byte	.LBB128
 4574 08d1 1E000000 		.4byte	.LBE128-.LBB128
 4575 08d5 01       		.byte	0x1
 4576 08d6 9202     		.2byte	0x292
 4577 08d8 0E       		.uleb128 0xe
 4578 08d9 13010000 		.4byte	0x113
 4579 08dd 03       		.uleb128 0x3
 4580 08de 91       		.byte	0x91
 4581 08df A47C     		.sleb128 -476
 4582 08e1 0E       		.uleb128 0xe
 4583 08e2 09010000 		.4byte	0x109
 4584 08e6 03       		.uleb128 0x3
 4585 08e7 91       		.byte	0x91
 4586 08e8 A87C     		.sleb128 -472
 4587 08ea 0E       		.uleb128 0xe
 4588 08eb FF000000 		.4byte	0xff
 4589 08ef 03       		.uleb128 0x3
 4590 08f0 91       		.byte	0x91
 4591 08f1 AC7C     		.sleb128 -468
 4592 08f3 00       		.byte	0
 4593 08f4 00       		.byte	0
 4594 08f5 00       		.byte	0
 4595              		.section	.debug_abbrev,"",%progbits
 4596              	.Ldebug_abbrev0:
 4597 0000 01       		.uleb128 0x1
 4598 0001 11       		.uleb128 0x11
 4599 0002 01       		.byte	0x1
 4600 0003 25       		.uleb128 0x25
 4601 0004 0E       		.uleb128 0xe
 4602 0005 13       		.uleb128 0x13
 4603 0006 0B       		.uleb128 0xb
 4604 0007 03       		.uleb128 0x3
 4605 0008 0E       		.uleb128 0xe
 4606 0009 1B       		.uleb128 0x1b
 4607 000a 0E       		.uleb128 0xe
 4608 000b 55       		.uleb128 0x55
 4609 000c 17       		.uleb128 0x17
 4610 000d 11       		.uleb128 0x11
 4611 000e 01       		.uleb128 0x1
 4612 000f 10       		.uleb128 0x10
 4613 0010 17       		.uleb128 0x17
 4614 0011 00       		.byte	0
 4615 0012 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 126


 4616 0013 02       		.uleb128 0x2
 4617 0014 24       		.uleb128 0x24
 4618 0015 00       		.byte	0
 4619 0016 0B       		.uleb128 0xb
 4620 0017 0B       		.uleb128 0xb
 4621 0018 3E       		.uleb128 0x3e
 4622 0019 0B       		.uleb128 0xb
 4623 001a 03       		.uleb128 0x3
 4624 001b 0E       		.uleb128 0xe
 4625 001c 00       		.byte	0
 4626 001d 00       		.byte	0
 4627 001e 03       		.uleb128 0x3
 4628 001f 16       		.uleb128 0x16
 4629 0020 00       		.byte	0
 4630 0021 03       		.uleb128 0x3
 4631 0022 0E       		.uleb128 0xe
 4632 0023 3A       		.uleb128 0x3a
 4633 0024 0B       		.uleb128 0xb
 4634 0025 3B       		.uleb128 0x3b
 4635 0026 0B       		.uleb128 0xb
 4636 0027 49       		.uleb128 0x49
 4637 0028 13       		.uleb128 0x13
 4638 0029 00       		.byte	0
 4639 002a 00       		.byte	0
 4640 002b 04       		.uleb128 0x4
 4641 002c 24       		.uleb128 0x24
 4642 002d 00       		.byte	0
 4643 002e 0B       		.uleb128 0xb
 4644 002f 0B       		.uleb128 0xb
 4645 0030 3E       		.uleb128 0x3e
 4646 0031 0B       		.uleb128 0xb
 4647 0032 03       		.uleb128 0x3
 4648 0033 08       		.uleb128 0x8
 4649 0034 00       		.byte	0
 4650 0035 00       		.byte	0
 4651 0036 05       		.uleb128 0x5
 4652 0037 16       		.uleb128 0x16
 4653 0038 00       		.byte	0
 4654 0039 03       		.uleb128 0x3
 4655 003a 0E       		.uleb128 0xe
 4656 003b 3A       		.uleb128 0x3a
 4657 003c 0B       		.uleb128 0xb
 4658 003d 3B       		.uleb128 0x3b
 4659 003e 05       		.uleb128 0x5
 4660 003f 49       		.uleb128 0x49
 4661 0040 13       		.uleb128 0x13
 4662 0041 00       		.byte	0
 4663 0042 00       		.byte	0
 4664 0043 06       		.uleb128 0x6
 4665 0044 0F       		.uleb128 0xf
 4666 0045 00       		.byte	0
 4667 0046 0B       		.uleb128 0xb
 4668 0047 0B       		.uleb128 0xb
 4669 0048 49       		.uleb128 0x49
 4670 0049 13       		.uleb128 0x13
 4671 004a 00       		.byte	0
 4672 004b 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 127


 4673 004c 07       		.uleb128 0x7
 4674 004d 2E       		.uleb128 0x2e
 4675 004e 01       		.byte	0x1
 4676 004f 03       		.uleb128 0x3
 4677 0050 0E       		.uleb128 0xe
 4678 0051 3A       		.uleb128 0x3a
 4679 0052 0B       		.uleb128 0xb
 4680 0053 3B       		.uleb128 0x3b
 4681 0054 05       		.uleb128 0x5
 4682 0055 27       		.uleb128 0x27
 4683 0056 19       		.uleb128 0x19
 4684 0057 49       		.uleb128 0x49
 4685 0058 13       		.uleb128 0x13
 4686 0059 20       		.uleb128 0x20
 4687 005a 0B       		.uleb128 0xb
 4688 005b 01       		.uleb128 0x1
 4689 005c 13       		.uleb128 0x13
 4690 005d 00       		.byte	0
 4691 005e 00       		.byte	0
 4692 005f 08       		.uleb128 0x8
 4693 0060 05       		.uleb128 0x5
 4694 0061 00       		.byte	0
 4695 0062 03       		.uleb128 0x3
 4696 0063 08       		.uleb128 0x8
 4697 0064 3A       		.uleb128 0x3a
 4698 0065 0B       		.uleb128 0xb
 4699 0066 3B       		.uleb128 0x3b
 4700 0067 05       		.uleb128 0x5
 4701 0068 49       		.uleb128 0x49
 4702 0069 13       		.uleb128 0x13
 4703 006a 00       		.byte	0
 4704 006b 00       		.byte	0
 4705 006c 09       		.uleb128 0x9
 4706 006d 2E       		.uleb128 0x2e
 4707 006e 01       		.byte	0x1
 4708 006f 3F       		.uleb128 0x3f
 4709 0070 19       		.uleb128 0x19
 4710 0071 03       		.uleb128 0x3
 4711 0072 0E       		.uleb128 0xe
 4712 0073 3A       		.uleb128 0x3a
 4713 0074 0B       		.uleb128 0xb
 4714 0075 3B       		.uleb128 0x3b
 4715 0076 0B       		.uleb128 0xb
 4716 0077 27       		.uleb128 0x27
 4717 0078 19       		.uleb128 0x19
 4718 0079 11       		.uleb128 0x11
 4719 007a 01       		.uleb128 0x1
 4720 007b 12       		.uleb128 0x12
 4721 007c 06       		.uleb128 0x6
 4722 007d 40       		.uleb128 0x40
 4723 007e 18       		.uleb128 0x18
 4724 007f 9742     		.uleb128 0x2117
 4725 0081 19       		.uleb128 0x19
 4726 0082 00       		.byte	0
 4727 0083 00       		.byte	0
 4728 0084 0A       		.uleb128 0xa
 4729 0085 05       		.uleb128 0x5
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 128


 4730 0086 00       		.byte	0
 4731 0087 03       		.uleb128 0x3
 4732 0088 0E       		.uleb128 0xe
 4733 0089 3A       		.uleb128 0x3a
 4734 008a 0B       		.uleb128 0xb
 4735 008b 3B       		.uleb128 0x3b
 4736 008c 0B       		.uleb128 0xb
 4737 008d 49       		.uleb128 0x49
 4738 008e 13       		.uleb128 0x13
 4739 008f 02       		.uleb128 0x2
 4740 0090 18       		.uleb128 0x18
 4741 0091 00       		.byte	0
 4742 0092 00       		.byte	0
 4743 0093 0B       		.uleb128 0xb
 4744 0094 34       		.uleb128 0x34
 4745 0095 00       		.byte	0
 4746 0096 03       		.uleb128 0x3
 4747 0097 0E       		.uleb128 0xe
 4748 0098 3A       		.uleb128 0x3a
 4749 0099 0B       		.uleb128 0xb
 4750 009a 3B       		.uleb128 0x3b
 4751 009b 0B       		.uleb128 0xb
 4752 009c 49       		.uleb128 0x49
 4753 009d 13       		.uleb128 0x13
 4754 009e 02       		.uleb128 0x2
 4755 009f 18       		.uleb128 0x18
 4756 00a0 00       		.byte	0
 4757 00a1 00       		.byte	0
 4758 00a2 0C       		.uleb128 0xc
 4759 00a3 34       		.uleb128 0x34
 4760 00a4 00       		.byte	0
 4761 00a5 03       		.uleb128 0x3
 4762 00a6 08       		.uleb128 0x8
 4763 00a7 3A       		.uleb128 0x3a
 4764 00a8 0B       		.uleb128 0xb
 4765 00a9 3B       		.uleb128 0x3b
 4766 00aa 0B       		.uleb128 0xb
 4767 00ab 49       		.uleb128 0x49
 4768 00ac 13       		.uleb128 0x13
 4769 00ad 02       		.uleb128 0x2
 4770 00ae 18       		.uleb128 0x18
 4771 00af 00       		.byte	0
 4772 00b0 00       		.byte	0
 4773 00b1 0D       		.uleb128 0xd
 4774 00b2 1D       		.uleb128 0x1d
 4775 00b3 01       		.byte	0x1
 4776 00b4 31       		.uleb128 0x31
 4777 00b5 13       		.uleb128 0x13
 4778 00b6 11       		.uleb128 0x11
 4779 00b7 01       		.uleb128 0x1
 4780 00b8 12       		.uleb128 0x12
 4781 00b9 06       		.uleb128 0x6
 4782 00ba 58       		.uleb128 0x58
 4783 00bb 0B       		.uleb128 0xb
 4784 00bc 59       		.uleb128 0x59
 4785 00bd 0B       		.uleb128 0xb
 4786 00be 01       		.uleb128 0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 129


 4787 00bf 13       		.uleb128 0x13
 4788 00c0 00       		.byte	0
 4789 00c1 00       		.byte	0
 4790 00c2 0E       		.uleb128 0xe
 4791 00c3 05       		.uleb128 0x5
 4792 00c4 00       		.byte	0
 4793 00c5 31       		.uleb128 0x31
 4794 00c6 13       		.uleb128 0x13
 4795 00c7 02       		.uleb128 0x2
 4796 00c8 18       		.uleb128 0x18
 4797 00c9 00       		.byte	0
 4798 00ca 00       		.byte	0
 4799 00cb 0F       		.uleb128 0xf
 4800 00cc 1D       		.uleb128 0x1d
 4801 00cd 01       		.byte	0x1
 4802 00ce 31       		.uleb128 0x31
 4803 00cf 13       		.uleb128 0x13
 4804 00d0 11       		.uleb128 0x11
 4805 00d1 01       		.uleb128 0x1
 4806 00d2 12       		.uleb128 0x12
 4807 00d3 06       		.uleb128 0x6
 4808 00d4 58       		.uleb128 0x58
 4809 00d5 0B       		.uleb128 0xb
 4810 00d6 59       		.uleb128 0x59
 4811 00d7 05       		.uleb128 0x5
 4812 00d8 01       		.uleb128 0x1
 4813 00d9 13       		.uleb128 0x13
 4814 00da 00       		.byte	0
 4815 00db 00       		.byte	0
 4816 00dc 10       		.uleb128 0x10
 4817 00dd 1D       		.uleb128 0x1d
 4818 00de 01       		.byte	0x1
 4819 00df 31       		.uleb128 0x31
 4820 00e0 13       		.uleb128 0x13
 4821 00e1 11       		.uleb128 0x11
 4822 00e2 01       		.uleb128 0x1
 4823 00e3 12       		.uleb128 0x12
 4824 00e4 06       		.uleb128 0x6
 4825 00e5 58       		.uleb128 0x58
 4826 00e6 0B       		.uleb128 0xb
 4827 00e7 59       		.uleb128 0x59
 4828 00e8 05       		.uleb128 0x5
 4829 00e9 00       		.byte	0
 4830 00ea 00       		.byte	0
 4831 00eb 00       		.byte	0
 4832              		.section	.debug_aranges,"",%progbits
 4833 0000 1C000000 		.4byte	0x1c
 4834 0004 0200     		.2byte	0x2
 4835 0006 00000000 		.4byte	.Ldebug_info0
 4836 000a 04       		.byte	0x4
 4837 000b 00       		.byte	0
 4838 000c 0000     		.2byte	0
 4839 000e 0000     		.2byte	0
 4840 0010 00000000 		.4byte	.LFB82
 4841 0014 2C160000 		.4byte	.LFE82-.LFB82
 4842 0018 00000000 		.4byte	0
 4843 001c 00000000 		.4byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 130


 4844              		.section	.debug_ranges,"",%progbits
 4845              	.Ldebug_ranges0:
 4846 0000 00000000 		.4byte	.LFB82
 4847 0004 2C160000 		.4byte	.LFE82
 4848 0008 00000000 		.4byte	0
 4849 000c 00000000 		.4byte	0
 4850              		.section	.debug_line,"",%progbits
 4851              	.Ldebug_line0:
 4852 0000 B5050000 		.section	.debug_str,"MS",%progbits,1
 4852      02005401 
 4852      00000201 
 4852      FB0E0D00 
 4852      01010101 
 4853              	.LASF35:
 4854 0000 61636333 		.ascii	"acc3\000"
 4854      00
 4855              	.LASF4:
 4856 0005 5F5F696E 		.ascii	"__int16_t\000"
 4856      7431365F 
 4856      7400
 4857              	.LASF24:
 4858 000f 70537263 		.ascii	"pSrcA\000"
 4858      4100
 4859              	.LASF26:
 4860 0015 70537263 		.ascii	"pSrcB\000"
 4860      4200
 4861              	.LASF41:
 4862 001b 636F756E 		.ascii	"count\000"
 4862      7400
 4863              	.LASF5:
 4864 0021 5F5F696E 		.ascii	"__int32_t\000"
 4864      7433325F 
 4864      7400
 4865              	.LASF45:
 4866 002b 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 4866      73657273 
 4866      5C666E65 
 4866      7665735C 
 4866      446F6375 
 4867 0058 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 4867      655F7370 
 4867      6565645F 
 4867      73656E73 
 4867      6F722E63 
 4868              	.LASF13:
 4869 0071 696E7433 		.ascii	"int32_t\000"
 4869      325F7400 
 4870              	.LASF23:
 4871 0079 5F5F534D 		.ascii	"__SMLADX\000"
 4871      4C414458 
 4871      00
 4872              	.LASF20:
 4873 0082 7131355F 		.ascii	"q15_t\000"
 4873      7400
 4874              	.LASF31:
 4875 0088 704F7574 		.ascii	"pOut\000"
 4875      00
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 131


 4876              	.LASF21:
 4877 008d 7133315F 		.ascii	"q31_t\000"
 4877      7400
 4878              	.LASF1:
 4879 0093 756E7369 		.ascii	"unsigned char\000"
 4879      676E6564 
 4879      20636861 
 4879      7200
 4880              	.LASF30:
 4881 00a1 70496E32 		.ascii	"pIn2\000"
 4881      00
 4882              	.LASF42:
 4883 00a6 626C6B43 		.ascii	"blkCnt\000"
 4883      6E7400
 4884              	.LASF22:
 4885 00ad 5F5F534D 		.ascii	"__SMLAD\000"
 4885      4C414400 
 4886              	.LASF8:
 4887 00b5 6C6F6E67 		.ascii	"long unsigned int\000"
 4887      20756E73 
 4887      69676E65 
 4887      6420696E 
 4887      7400
 4888              	.LASF3:
 4889 00c7 73686F72 		.ascii	"short unsigned int\000"
 4889      7420756E 
 4889      7369676E 
 4889      65642069 
 4889      6E7400
 4890              	.LASF28:
 4891 00da 70447374 		.ascii	"pDst\000"
 4891      00
 4892              	.LASF27:
 4893 00df 73726342 		.ascii	"srcBLen\000"
 4893      4C656E00 
 4894              	.LASF17:
 4895 00e7 646F7562 		.ascii	"double\000"
 4895      6C6500
 4896              	.LASF40:
 4897 00ee 626C6F63 		.ascii	"blockSize3\000"
 4897      6B53697A 
 4897      653300
 4898              	.LASF7:
 4899 00f9 5F5F7569 		.ascii	"__uint32_t\000"
 4899      6E743332 
 4899      5F7400
 4900              	.LASF11:
 4901 0104 756E7369 		.ascii	"unsigned int\000"
 4901      676E6564 
 4901      20696E74 
 4901      00
 4902              	.LASF10:
 4903 0111 6C6F6E67 		.ascii	"long long unsigned int\000"
 4903      206C6F6E 
 4903      6720756E 
 4903      7369676E 
 4903      65642069 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 132


 4904              	.LASF43:
 4905 0128 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 4905      4320342E 
 4905      392E3320 
 4905      32303135 
 4905      30333033 
 4906 015b 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 4906      20726576 
 4906      6973696F 
 4906      6E203232 
 4906      31323230 
 4907 018e 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 4907      30202D66 
 4907      66756E63 
 4907      74696F6E 
 4907      2D736563 
 4908              	.LASF29:
 4909 01ba 70496E31 		.ascii	"pIn1\000"
 4909      00
 4910              	.LASF12:
 4911 01bf 696E7431 		.ascii	"int16_t\000"
 4911      365F7400 
 4912              	.LASF44:
 4913 01c7 536F7572 		.ascii	"Source\\FilteringFunctions\\arm_conv_fast_q15.c\000"
 4913      63655C46 
 4913      696C7465 
 4913      72696E67 
 4913      46756E63 
 4914              	.LASF15:
 4915 01f5 73697A65 		.ascii	"sizetype\000"
 4915      74797065 
 4915      00
 4916              	.LASF9:
 4917 01fe 6C6F6E67 		.ascii	"long long int\000"
 4917      206C6F6E 
 4917      6720696E 
 4917      7400
 4918              	.LASF38:
 4919 020c 626C6F63 		.ascii	"blockSize1\000"
 4919      6B53697A 
 4919      653100
 4920              	.LASF39:
 4921 0217 626C6F63 		.ascii	"blockSize2\000"
 4921      6B53697A 
 4921      653200
 4922              	.LASF16:
 4923 0222 63686172 		.ascii	"char\000"
 4923      00
 4924              	.LASF25:
 4925 0227 73726341 		.ascii	"srcALen\000"
 4925      4C656E00 
 4926              	.LASF2:
 4927 022f 73686F72 		.ascii	"short int\000"
 4927      7420696E 
 4927      7400
 4928              	.LASF14:
 4929 0239 75696E74 		.ascii	"uint32_t\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBsP8Fs.s 			page 133


 4929      33325F74 
 4929      00
 4930              	.LASF6:
 4931 0242 6C6F6E67 		.ascii	"long int\000"
 4931      20696E74 
 4931      00
 4932              	.LASF19:
 4933 024b 6C6F6E67 		.ascii	"long double\000"
 4933      20646F75 
 4933      626C6500 
 4934              	.LASF18:
 4935 0257 666C6F61 		.ascii	"float\000"
 4935      7400
 4936              	.LASF0:
 4937 025d 7369676E 		.ascii	"signed char\000"
 4937      65642063 
 4937      68617200 
 4938              	.LASF46:
 4939 0269 61726D5F 		.ascii	"arm_conv_fast_q15\000"
 4939      636F6E76 
 4939      5F666173 
 4939      745F7131 
 4939      3500
 4940              	.LASF36:
 4941 027b 70537263 		.ascii	"pSrc1\000"
 4941      3100
 4942              	.LASF37:
 4943 0281 70537263 		.ascii	"pSrc2\000"
 4943      3200
 4944              	.LASF32:
 4945 0287 61636330 		.ascii	"acc0\000"
 4945      00
 4946              	.LASF33:
 4947 028c 61636331 		.ascii	"acc1\000"
 4947      00
 4948              	.LASF34:
 4949 0291 61636332 		.ascii	"acc2\000"
 4949      00
 4950              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
