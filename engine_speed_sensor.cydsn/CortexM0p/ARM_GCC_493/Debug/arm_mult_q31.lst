ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_mult_q31.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_lmul
  18              		.section	.text.arm_mult_q31,"ax",%progbits
  19              		.align	2
  20              		.global	arm_mult_q31
  21              		.code	16
  22              		.thumb_func
  23              		.type	arm_mult_q31, %function
  24              	arm_mult_q31:
  25              	.LFB82:
  26              		.file 1 "Source\\BasicMathFunctions\\arm_mult_q31.c"
   1:Source\BasicMathFunctions/arm_mult_q31.c **** /* ----------------------------------------------------------------------
   2:Source\BasicMathFunctions/arm_mult_q31.c ****  * Project:      CMSIS DSP Library
   3:Source\BasicMathFunctions/arm_mult_q31.c ****  * Title:        arm_mult_q31.c
   4:Source\BasicMathFunctions/arm_mult_q31.c ****  * Description:  Q31 vector multiplication
   5:Source\BasicMathFunctions/arm_mult_q31.c ****  *
   6:Source\BasicMathFunctions/arm_mult_q31.c ****  * $Date:        27. January 2017
   7:Source\BasicMathFunctions/arm_mult_q31.c ****  * $Revision:    V.1.5.1
   8:Source\BasicMathFunctions/arm_mult_q31.c ****  *
   9:Source\BasicMathFunctions/arm_mult_q31.c ****  * Target Processor: Cortex-M cores
  10:Source\BasicMathFunctions/arm_mult_q31.c ****  * -------------------------------------------------------------------- */
  11:Source\BasicMathFunctions/arm_mult_q31.c **** /*
  12:Source\BasicMathFunctions/arm_mult_q31.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\BasicMathFunctions/arm_mult_q31.c ****  *
  14:Source\BasicMathFunctions/arm_mult_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\BasicMathFunctions/arm_mult_q31.c ****  *
  16:Source\BasicMathFunctions/arm_mult_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\BasicMathFunctions/arm_mult_q31.c ****  * not use this file except in compliance with the License.
  18:Source\BasicMathFunctions/arm_mult_q31.c ****  * You may obtain a copy of the License at
  19:Source\BasicMathFunctions/arm_mult_q31.c ****  *
  20:Source\BasicMathFunctions/arm_mult_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\BasicMathFunctions/arm_mult_q31.c ****  *
  22:Source\BasicMathFunctions/arm_mult_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\BasicMathFunctions/arm_mult_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\BasicMathFunctions/arm_mult_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\BasicMathFunctions/arm_mult_q31.c ****  * See the License for the specific language governing permissions and
  26:Source\BasicMathFunctions/arm_mult_q31.c ****  * limitations under the License.
  27:Source\BasicMathFunctions/arm_mult_q31.c ****  */
  28:Source\BasicMathFunctions/arm_mult_q31.c **** 
  29:Source\BasicMathFunctions/arm_mult_q31.c **** #include "arm_math.h"
  30:Source\BasicMathFunctions/arm_mult_q31.c **** 
  31:Source\BasicMathFunctions/arm_mult_q31.c **** /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 2


  32:Source\BasicMathFunctions/arm_mult_q31.c ****  * @ingroup groupMath
  33:Source\BasicMathFunctions/arm_mult_q31.c ****  */
  34:Source\BasicMathFunctions/arm_mult_q31.c **** 
  35:Source\BasicMathFunctions/arm_mult_q31.c **** /**
  36:Source\BasicMathFunctions/arm_mult_q31.c ****  * @addtogroup BasicMult
  37:Source\BasicMathFunctions/arm_mult_q31.c ****  * @{
  38:Source\BasicMathFunctions/arm_mult_q31.c ****  */
  39:Source\BasicMathFunctions/arm_mult_q31.c **** 
  40:Source\BasicMathFunctions/arm_mult_q31.c **** /**
  41:Source\BasicMathFunctions/arm_mult_q31.c ****  * @brief Q31 vector multiplication.
  42:Source\BasicMathFunctions/arm_mult_q31.c ****  * @param[in]       *pSrcA points to the first input vector
  43:Source\BasicMathFunctions/arm_mult_q31.c ****  * @param[in]       *pSrcB points to the second input vector
  44:Source\BasicMathFunctions/arm_mult_q31.c ****  * @param[out]      *pDst points to the output vector
  45:Source\BasicMathFunctions/arm_mult_q31.c ****  * @param[in]       blockSize number of samples in each vector
  46:Source\BasicMathFunctions/arm_mult_q31.c ****  * @return none.
  47:Source\BasicMathFunctions/arm_mult_q31.c ****  *
  48:Source\BasicMathFunctions/arm_mult_q31.c ****  * <b>Scaling and Overflow Behavior:</b>
  49:Source\BasicMathFunctions/arm_mult_q31.c ****  * \par
  50:Source\BasicMathFunctions/arm_mult_q31.c ****  * The function uses saturating arithmetic.
  51:Source\BasicMathFunctions/arm_mult_q31.c ****  * Results outside of the allowable Q31 range[0x80000000 0x7FFFFFFF] will be saturated.
  52:Source\BasicMathFunctions/arm_mult_q31.c ****  */
  53:Source\BasicMathFunctions/arm_mult_q31.c **** 
  54:Source\BasicMathFunctions/arm_mult_q31.c **** void arm_mult_q31(
  55:Source\BasicMathFunctions/arm_mult_q31.c ****   q31_t * pSrcA,
  56:Source\BasicMathFunctions/arm_mult_q31.c ****   q31_t * pSrcB,
  57:Source\BasicMathFunctions/arm_mult_q31.c ****   q31_t * pDst,
  58:Source\BasicMathFunctions/arm_mult_q31.c ****   uint32_t blockSize)
  59:Source\BasicMathFunctions/arm_mult_q31.c **** {
  27              		.loc 1 59 0
  28              		.cfi_startproc
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              		.cfi_def_cfa_offset 20
  31              		.cfi_offset 4, -20
  32              		.cfi_offset 5, -16
  33              		.cfi_offset 6, -12
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 4746     		mov	r7, r8
  37 0004 80B4     		push	{r7}
  38              		.cfi_def_cfa_offset 24
  39              		.cfi_offset 8, -24
  40 0006 90B0     		sub	sp, sp, #64
  41              		.cfi_def_cfa_offset 88
  42 0008 00AF     		add	r7, sp, #0
  43              		.cfi_def_cfa_register 7
  44 000a F862     		str	r0, [r7, #44]
  45 000c B962     		str	r1, [r7, #40]
  46 000e 7A62     		str	r2, [r7, #36]
  47 0010 3B62     		str	r3, [r7, #32]
  60:Source\BasicMathFunctions/arm_mult_q31.c ****   uint32_t blkCnt;                               /* loop counters */
  61:Source\BasicMathFunctions/arm_mult_q31.c **** 
  62:Source\BasicMathFunctions/arm_mult_q31.c **** #if defined (ARM_MATH_DSP)
  63:Source\BasicMathFunctions/arm_mult_q31.c **** 
  64:Source\BasicMathFunctions/arm_mult_q31.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  65:Source\BasicMathFunctions/arm_mult_q31.c ****   q31_t inA1, inA2, inA3, inA4;                  /* temporary input variables */
  66:Source\BasicMathFunctions/arm_mult_q31.c ****   q31_t inB1, inB2, inB3, inB4;                  /* temporary input variables */
  67:Source\BasicMathFunctions/arm_mult_q31.c ****   q31_t out1, out2, out3, out4;                  /* temporary output variables */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 3


  68:Source\BasicMathFunctions/arm_mult_q31.c **** 
  69:Source\BasicMathFunctions/arm_mult_q31.c ****   /* loop Unrolling */
  70:Source\BasicMathFunctions/arm_mult_q31.c ****   blkCnt = blockSize >> 2u;
  71:Source\BasicMathFunctions/arm_mult_q31.c **** 
  72:Source\BasicMathFunctions/arm_mult_q31.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  73:Source\BasicMathFunctions/arm_mult_q31.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  74:Source\BasicMathFunctions/arm_mult_q31.c ****   while (blkCnt > 0u)
  75:Source\BasicMathFunctions/arm_mult_q31.c ****   {
  76:Source\BasicMathFunctions/arm_mult_q31.c ****     /* C = A * B */
  77:Source\BasicMathFunctions/arm_mult_q31.c ****     /* Multiply the inputs and then store the results in the destination buffer. */
  78:Source\BasicMathFunctions/arm_mult_q31.c ****     inA1 = *pSrcA++;
  79:Source\BasicMathFunctions/arm_mult_q31.c ****     inA2 = *pSrcA++;
  80:Source\BasicMathFunctions/arm_mult_q31.c ****     inA3 = *pSrcA++;
  81:Source\BasicMathFunctions/arm_mult_q31.c ****     inA4 = *pSrcA++;
  82:Source\BasicMathFunctions/arm_mult_q31.c ****     inB1 = *pSrcB++;
  83:Source\BasicMathFunctions/arm_mult_q31.c ****     inB2 = *pSrcB++;
  84:Source\BasicMathFunctions/arm_mult_q31.c ****     inB3 = *pSrcB++;
  85:Source\BasicMathFunctions/arm_mult_q31.c ****     inB4 = *pSrcB++;
  86:Source\BasicMathFunctions/arm_mult_q31.c **** 
  87:Source\BasicMathFunctions/arm_mult_q31.c ****     out1 = ((q63_t) inA1 * inB1) >> 32;
  88:Source\BasicMathFunctions/arm_mult_q31.c ****     out2 = ((q63_t) inA2 * inB2) >> 32;
  89:Source\BasicMathFunctions/arm_mult_q31.c ****     out3 = ((q63_t) inA3 * inB3) >> 32;
  90:Source\BasicMathFunctions/arm_mult_q31.c ****     out4 = ((q63_t) inA4 * inB4) >> 32;
  91:Source\BasicMathFunctions/arm_mult_q31.c **** 
  92:Source\BasicMathFunctions/arm_mult_q31.c ****     out1 = __SSAT(out1, 31);
  93:Source\BasicMathFunctions/arm_mult_q31.c ****     out2 = __SSAT(out2, 31);
  94:Source\BasicMathFunctions/arm_mult_q31.c ****     out3 = __SSAT(out3, 31);
  95:Source\BasicMathFunctions/arm_mult_q31.c ****     out4 = __SSAT(out4, 31);
  96:Source\BasicMathFunctions/arm_mult_q31.c **** 
  97:Source\BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out1 << 1u;
  98:Source\BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out2 << 1u;
  99:Source\BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out3 << 1u;
 100:Source\BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out4 << 1u;
 101:Source\BasicMathFunctions/arm_mult_q31.c **** 
 102:Source\BasicMathFunctions/arm_mult_q31.c ****     /* Decrement the blockSize loop counter */
 103:Source\BasicMathFunctions/arm_mult_q31.c ****     blkCnt--;
 104:Source\BasicMathFunctions/arm_mult_q31.c ****   }
 105:Source\BasicMathFunctions/arm_mult_q31.c **** 
 106:Source\BasicMathFunctions/arm_mult_q31.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 107:Source\BasicMathFunctions/arm_mult_q31.c ****    ** No loop unrolling is used. */
 108:Source\BasicMathFunctions/arm_mult_q31.c ****   blkCnt = blockSize % 0x4u;
 109:Source\BasicMathFunctions/arm_mult_q31.c **** 
 110:Source\BasicMathFunctions/arm_mult_q31.c ****   while (blkCnt > 0u)
 111:Source\BasicMathFunctions/arm_mult_q31.c ****   {
 112:Source\BasicMathFunctions/arm_mult_q31.c ****     /* C = A * B */
 113:Source\BasicMathFunctions/arm_mult_q31.c ****     /* Multiply the inputs and then store the results in the destination buffer. */
 114:Source\BasicMathFunctions/arm_mult_q31.c ****     inA1 = *pSrcA++;
 115:Source\BasicMathFunctions/arm_mult_q31.c ****     inB1 = *pSrcB++;
 116:Source\BasicMathFunctions/arm_mult_q31.c ****     out1 = ((q63_t) inA1 * inB1) >> 32;
 117:Source\BasicMathFunctions/arm_mult_q31.c ****     out1 = __SSAT(out1, 31);
 118:Source\BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out1 << 1u;
 119:Source\BasicMathFunctions/arm_mult_q31.c **** 
 120:Source\BasicMathFunctions/arm_mult_q31.c ****     /* Decrement the blockSize loop counter */
 121:Source\BasicMathFunctions/arm_mult_q31.c ****     blkCnt--;
 122:Source\BasicMathFunctions/arm_mult_q31.c ****   }
 123:Source\BasicMathFunctions/arm_mult_q31.c **** 
 124:Source\BasicMathFunctions/arm_mult_q31.c **** #else
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 4


 125:Source\BasicMathFunctions/arm_mult_q31.c **** 
 126:Source\BasicMathFunctions/arm_mult_q31.c ****   /* Run the below code for Cortex-M0 */
 127:Source\BasicMathFunctions/arm_mult_q31.c **** 
 128:Source\BasicMathFunctions/arm_mult_q31.c ****   /* Initialize blkCnt with number of samples */
 129:Source\BasicMathFunctions/arm_mult_q31.c ****   blkCnt = blockSize;
  48              		.loc 1 129 0
  49 0012 3B6A     		ldr	r3, [r7, #32]
  50 0014 FB63     		str	r3, [r7, #60]
 130:Source\BasicMathFunctions/arm_mult_q31.c **** 
 131:Source\BasicMathFunctions/arm_mult_q31.c **** 
 132:Source\BasicMathFunctions/arm_mult_q31.c ****   while (blkCnt > 0u)
  51              		.loc 1 132 0
  52 0016 3BE0     		b	.L2
  53              	.L6:
 133:Source\BasicMathFunctions/arm_mult_q31.c ****   {
 134:Source\BasicMathFunctions/arm_mult_q31.c ****     /* C = A * B */
 135:Source\BasicMathFunctions/arm_mult_q31.c ****     /* Multiply the inputs and then store the results in the destination buffer. */
 136:Source\BasicMathFunctions/arm_mult_q31.c ****     *pDst++ =
  54              		.loc 1 136 0
  55 0018 7B6A     		ldr	r3, [r7, #36]
  56 001a 9846     		mov	r8, r3
  57 001c 4346     		mov	r3, r8
  58 001e 0433     		add	r3, r3, #4
  59 0020 7B62     		str	r3, [r7, #36]
 137:Source\BasicMathFunctions/arm_mult_q31.c ****       (q31_t) clip_q63_to_q31(((q63_t) (*pSrcA++) * (*pSrcB++)) >> 31);
  60              		.loc 1 137 0
  61 0022 FB6A     		ldr	r3, [r7, #44]
  62 0024 1A1D     		add	r2, r3, #4
  63 0026 FA62     		str	r2, [r7, #44]
  64 0028 1B68     		ldr	r3, [r3]
  65 002a BB61     		str	r3, [r7, #24]
  66 002c DB17     		asr	r3, r3, #31
  67 002e FB61     		str	r3, [r7, #28]
  68 0030 BB6A     		ldr	r3, [r7, #40]
  69 0032 1A1D     		add	r2, r3, #4
  70 0034 BA62     		str	r2, [r7, #40]
  71 0036 1B68     		ldr	r3, [r3]
  72 0038 3B61     		str	r3, [r7, #16]
  73 003a DB17     		asr	r3, r3, #31
  74 003c 7B61     		str	r3, [r7, #20]
  75 003e B869     		ldr	r0, [r7, #24]
  76 0040 F969     		ldr	r1, [r7, #28]
  77 0042 3A69     		ldr	r2, [r7, #16]
  78 0044 7B69     		ldr	r3, [r7, #20]
  79 0046 FFF7FEFF 		bl	__aeabi_lmul
  80 004a 031C     		mov	r3, r0
  81 004c 0C1C     		mov	r4, r1
  82 004e 6200     		lsl	r2, r4, #1
  83 0050 DD0F     		lsr	r5, r3, #31
  84 0052 1543     		orr	r5, r2
  85 0054 E617     		asr	r6, r4, #31
  86 0056 3D63     		str	r5, [r7, #48]
  87 0058 7E63     		str	r6, [r7, #52]
  88              	.LBB4:
  89              	.LBB5:
  90              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 5


   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 6


  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 7


 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 8


 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 9


 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 10


 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 11


 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 12


 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 13


 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
  91              		.loc 2 513 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 14


  92 005a 7B6B     		ldr	r3, [r7, #52]
  93 005c 1B00     		asr	r3, r3, #0
  94 005e BB60     		str	r3, [r7, #8]
  95 0060 7B6B     		ldr	r3, [r7, #52]
  96 0062 DB17     		asr	r3, r3, #31
  97 0064 FB60     		str	r3, [r7, #12]
  98 0066 BA68     		ldr	r2, [r7, #8]
  99 0068 3B6B     		ldr	r3, [r7, #48]
 100 006a DB17     		asr	r3, r3, #31
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 101              		.loc 2 514 0
 102 006c 9A42     		cmp	r2, r3
 103 006e 09D0     		beq	.L3
 104 0070 7B6B     		ldr	r3, [r7, #52]
 105 0072 DB17     		asr	r3, r3, #31
 106 0074 3B60     		str	r3, [r7]
 107 0076 7B6B     		ldr	r3, [r7, #52]
 108 0078 DB17     		asr	r3, r3, #31
 109 007a 7B60     		str	r3, [r7, #4]
 110 007c 3A68     		ldr	r2, [r7]
 111 007e 084B     		ldr	r3, .L8
 112 0080 5340     		eor	r3, r2
 113 0082 00E0     		b	.L7
 114              	.L3:
 115 0084 3B6B     		ldr	r3, [r7, #48]
 116              	.L7:
 117              	.LBE5:
 118              	.LBE4:
 136:Source\BasicMathFunctions/arm_mult_q31.c ****       (q31_t) clip_q63_to_q31(((q63_t) (*pSrcA++) * (*pSrcB++)) >> 31);
 119              		.loc 1 136 0
 120 0086 4246     		mov	r2, r8
 121 0088 1360     		str	r3, [r2]
 138:Source\BasicMathFunctions/arm_mult_q31.c **** 
 139:Source\BasicMathFunctions/arm_mult_q31.c ****     /* Decrement the blockSize loop counter */
 140:Source\BasicMathFunctions/arm_mult_q31.c ****     blkCnt--;
 122              		.loc 1 140 0
 123 008a FB6B     		ldr	r3, [r7, #60]
 124 008c 013B     		sub	r3, r3, #1
 125 008e FB63     		str	r3, [r7, #60]
 126              	.L2:
 132:Source\BasicMathFunctions/arm_mult_q31.c ****   {
 127              		.loc 1 132 0
 128 0090 FB6B     		ldr	r3, [r7, #60]
 129 0092 002B     		cmp	r3, #0
 130 0094 C0D1     		bne	.L6
 141:Source\BasicMathFunctions/arm_mult_q31.c ****   }
 142:Source\BasicMathFunctions/arm_mult_q31.c **** 
 143:Source\BasicMathFunctions/arm_mult_q31.c **** #endif /* #if defined (ARM_MATH_DSP) */
 144:Source\BasicMathFunctions/arm_mult_q31.c **** }
 131              		.loc 1 144 0
 132 0096 BD46     		mov	sp, r7
 133 0098 10B0     		add	sp, sp, #64
 134              		@ sp needed
 135 009a 04BC     		pop	{r2}
 136 009c 9046     		mov	r8, r2
 137 009e F0BD     		pop	{r4, r5, r6, r7, pc}
 138              	.L9:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 15


 139              		.align	2
 140              	.L8:
 141 00a0 FFFFFF7F 		.word	2147483647
 142              		.cfi_endproc
 143              	.LFE82:
 144              		.size	arm_mult_q31, .-arm_mult_q31
 145              		.text
 146              	.Letext0:
 147              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 148              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 149              		.section	.debug_info,"",%progbits
 150              	.Ldebug_info0:
 151 0000 77010000 		.4byte	0x177
 152 0004 0400     		.2byte	0x4
 153 0006 00000000 		.4byte	.Ldebug_abbrev0
 154 000a 04       		.byte	0x4
 155 000b 01       		.uleb128 0x1
 156 000c 25010000 		.4byte	.LASF26
 157 0010 01       		.byte	0x1
 158 0011 64000000 		.4byte	.LASF27
 159 0015 1E000000 		.4byte	.LASF28
 160 0019 00000000 		.4byte	.Ldebug_ranges0+0
 161 001d 00000000 		.4byte	0
 162 0021 00000000 		.4byte	.Ldebug_line0
 163 0025 02       		.uleb128 0x2
 164 0026 01       		.byte	0x1
 165 0027 06       		.byte	0x6
 166 0028 23020000 		.4byte	.LASF0
 167 002c 02       		.uleb128 0x2
 168 002d 01       		.byte	0x1
 169 002e 08       		.byte	0x8
 170 002f 99000000 		.4byte	.LASF1
 171 0033 02       		.uleb128 0x2
 172 0034 02       		.byte	0x2
 173 0035 05       		.byte	0x5
 174 0036 FB010000 		.4byte	.LASF2
 175 003a 02       		.uleb128 0x2
 176 003b 02       		.byte	0x2
 177 003c 07       		.byte	0x7
 178 003d C0000000 		.4byte	.LASF3
 179 0041 03       		.uleb128 0x3
 180 0042 14000000 		.4byte	.LASF5
 181 0046 03       		.byte	0x3
 182 0047 3F       		.byte	0x3f
 183 0048 4C000000 		.4byte	0x4c
 184 004c 02       		.uleb128 0x2
 185 004d 04       		.byte	0x4
 186 004e 05       		.byte	0x5
 187 004f 0E020000 		.4byte	.LASF4
 188 0053 03       		.uleb128 0x3
 189 0054 F6000000 		.4byte	.LASF6
 190 0058 03       		.byte	0x3
 191 0059 41       		.byte	0x41
 192 005a 5E000000 		.4byte	0x5e
 193 005e 02       		.uleb128 0x2
 194 005f 04       		.byte	0x4
 195 0060 07       		.byte	0x7
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 16


 196 0061 AE000000 		.4byte	.LASF7
 197 0065 03       		.uleb128 0x3
 198 0066 D8000000 		.4byte	.LASF8
 199 006a 03       		.byte	0x3
 200 006b 59       		.byte	0x59
 201 006c 70000000 		.4byte	0x70
 202 0070 02       		.uleb128 0x2
 203 0071 08       		.byte	0x8
 204 0072 05       		.byte	0x5
 205 0073 CE010000 		.4byte	.LASF9
 206 0077 02       		.uleb128 0x2
 207 0078 08       		.byte	0x8
 208 0079 07       		.byte	0x7
 209 007a 0E010000 		.4byte	.LASF10
 210 007e 04       		.uleb128 0x4
 211 007f 04       		.byte	0x4
 212 0080 05       		.byte	0x5
 213 0081 696E7400 		.ascii	"int\000"
 214 0085 02       		.uleb128 0x2
 215 0086 04       		.byte	0x4
 216 0087 07       		.byte	0x7
 217 0088 01010000 		.4byte	.LASF11
 218 008c 03       		.uleb128 0x3
 219 008d BD010000 		.4byte	.LASF12
 220 0091 04       		.byte	0x4
 221 0092 2C       		.byte	0x2c
 222 0093 41000000 		.4byte	0x41
 223 0097 03       		.uleb128 0x3
 224 0098 05020000 		.4byte	.LASF13
 225 009c 04       		.byte	0x4
 226 009d 2D       		.byte	0x2d
 227 009e 53000000 		.4byte	0x53
 228 00a2 03       		.uleb128 0x3
 229 00a3 00000000 		.4byte	.LASF14
 230 00a7 04       		.byte	0x4
 231 00a8 38       		.byte	0x38
 232 00a9 65000000 		.4byte	0x65
 233 00ad 02       		.uleb128 0x2
 234 00ae 04       		.byte	0x4
 235 00af 07       		.byte	0x7
 236 00b0 C5010000 		.4byte	.LASF15
 237 00b4 02       		.uleb128 0x2
 238 00b5 01       		.byte	0x1
 239 00b6 08       		.byte	0x8
 240 00b7 F6010000 		.4byte	.LASF16
 241 00bb 02       		.uleb128 0x2
 242 00bc 08       		.byte	0x8
 243 00bd 04       		.byte	0x4
 244 00be EF000000 		.4byte	.LASF17
 245 00c2 02       		.uleb128 0x2
 246 00c3 04       		.byte	0x4
 247 00c4 04       		.byte	0x4
 248 00c5 8D000000 		.4byte	.LASF18
 249 00c9 02       		.uleb128 0x2
 250 00ca 08       		.byte	0x8
 251 00cb 04       		.byte	0x4
 252 00cc 17020000 		.4byte	.LASF19
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 17


 253 00d0 05       		.uleb128 0x5
 254 00d1 93000000 		.4byte	.LASF20
 255 00d5 02       		.byte	0x2
 256 00d6 9B01     		.2byte	0x19b
 257 00d8 8C000000 		.4byte	0x8c
 258 00dc 05       		.uleb128 0x5
 259 00dd B7010000 		.4byte	.LASF21
 260 00e1 02       		.byte	0x2
 261 00e2 A001     		.2byte	0x1a0
 262 00e4 A2000000 		.4byte	0xa2
 263 00e8 06       		.uleb128 0x6
 264 00e9 04       		.byte	0x4
 265 00ea D0000000 		.4byte	0xd0
 266 00ee 07       		.uleb128 0x7
 267 00ef E6010000 		.4byte	.LASF29
 268 00f3 02       		.byte	0x2
 269 00f4 FE01     		.2byte	0x1fe
 270 00f6 D0000000 		.4byte	0xd0
 271 00fa 03       		.byte	0x3
 272 00fb 0A010000 		.4byte	0x10a
 273 00ff 08       		.uleb128 0x8
 274 0100 7800     		.ascii	"x\000"
 275 0102 02       		.byte	0x2
 276 0103 FF01     		.2byte	0x1ff
 277 0105 DC000000 		.4byte	0xdc
 278 0109 00       		.byte	0
 279 010a 09       		.uleb128 0x9
 280 010b E2000000 		.4byte	.LASF30
 281 010f 01       		.byte	0x1
 282 0110 36       		.byte	0x36
 283 0111 00000000 		.4byte	.LFB82
 284 0115 A4000000 		.4byte	.LFE82-.LFB82
 285 0119 01       		.uleb128 0x1
 286 011a 9C       		.byte	0x9c
 287 011b 0A       		.uleb128 0xa
 288 011c 08000000 		.4byte	.LASF22
 289 0120 01       		.byte	0x1
 290 0121 37       		.byte	0x37
 291 0122 E8000000 		.4byte	0xe8
 292 0126 02       		.uleb128 0x2
 293 0127 91       		.byte	0x91
 294 0128 54       		.sleb128 -44
 295 0129 0A       		.uleb128 0xa
 296 012a 0E000000 		.4byte	.LASF23
 297 012e 01       		.byte	0x1
 298 012f 38       		.byte	0x38
 299 0130 E8000000 		.4byte	0xe8
 300 0134 02       		.uleb128 0x2
 301 0135 91       		.byte	0x91
 302 0136 50       		.sleb128 -48
 303 0137 0A       		.uleb128 0xa
 304 0138 D3000000 		.4byte	.LASF24
 305 013c 01       		.byte	0x1
 306 013d 39       		.byte	0x39
 307 013e E8000000 		.4byte	0xe8
 308 0142 02       		.uleb128 0x2
 309 0143 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 18


 310 0144 4C       		.sleb128 -52
 311 0145 0A       		.uleb128 0xa
 312 0146 DC010000 		.4byte	.LASF25
 313 014a 01       		.byte	0x1
 314 014b 3A       		.byte	0x3a
 315 014c 97000000 		.4byte	0x97
 316 0150 02       		.uleb128 0x2
 317 0151 91       		.byte	0x91
 318 0152 48       		.sleb128 -56
 319 0153 0B       		.uleb128 0xb
 320 0154 A7000000 		.4byte	.LASF31
 321 0158 01       		.byte	0x1
 322 0159 3C       		.byte	0x3c
 323 015a 97000000 		.4byte	0x97
 324 015e 02       		.uleb128 0x2
 325 015f 91       		.byte	0x91
 326 0160 64       		.sleb128 -28
 327 0161 0C       		.uleb128 0xc
 328 0162 EE000000 		.4byte	0xee
 329 0166 5A000000 		.4byte	.LBB4
 330 016a 2C000000 		.4byte	.LBE4-.LBB4
 331 016e 01       		.byte	0x1
 332 016f 89       		.byte	0x89
 333 0170 0D       		.uleb128 0xd
 334 0171 FF000000 		.4byte	0xff
 335 0175 02       		.uleb128 0x2
 336 0176 91       		.byte	0x91
 337 0177 58       		.sleb128 -40
 338 0178 00       		.byte	0
 339 0179 00       		.byte	0
 340 017a 00       		.byte	0
 341              		.section	.debug_abbrev,"",%progbits
 342              	.Ldebug_abbrev0:
 343 0000 01       		.uleb128 0x1
 344 0001 11       		.uleb128 0x11
 345 0002 01       		.byte	0x1
 346 0003 25       		.uleb128 0x25
 347 0004 0E       		.uleb128 0xe
 348 0005 13       		.uleb128 0x13
 349 0006 0B       		.uleb128 0xb
 350 0007 03       		.uleb128 0x3
 351 0008 0E       		.uleb128 0xe
 352 0009 1B       		.uleb128 0x1b
 353 000a 0E       		.uleb128 0xe
 354 000b 55       		.uleb128 0x55
 355 000c 17       		.uleb128 0x17
 356 000d 11       		.uleb128 0x11
 357 000e 01       		.uleb128 0x1
 358 000f 10       		.uleb128 0x10
 359 0010 17       		.uleb128 0x17
 360 0011 00       		.byte	0
 361 0012 00       		.byte	0
 362 0013 02       		.uleb128 0x2
 363 0014 24       		.uleb128 0x24
 364 0015 00       		.byte	0
 365 0016 0B       		.uleb128 0xb
 366 0017 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 19


 367 0018 3E       		.uleb128 0x3e
 368 0019 0B       		.uleb128 0xb
 369 001a 03       		.uleb128 0x3
 370 001b 0E       		.uleb128 0xe
 371 001c 00       		.byte	0
 372 001d 00       		.byte	0
 373 001e 03       		.uleb128 0x3
 374 001f 16       		.uleb128 0x16
 375 0020 00       		.byte	0
 376 0021 03       		.uleb128 0x3
 377 0022 0E       		.uleb128 0xe
 378 0023 3A       		.uleb128 0x3a
 379 0024 0B       		.uleb128 0xb
 380 0025 3B       		.uleb128 0x3b
 381 0026 0B       		.uleb128 0xb
 382 0027 49       		.uleb128 0x49
 383 0028 13       		.uleb128 0x13
 384 0029 00       		.byte	0
 385 002a 00       		.byte	0
 386 002b 04       		.uleb128 0x4
 387 002c 24       		.uleb128 0x24
 388 002d 00       		.byte	0
 389 002e 0B       		.uleb128 0xb
 390 002f 0B       		.uleb128 0xb
 391 0030 3E       		.uleb128 0x3e
 392 0031 0B       		.uleb128 0xb
 393 0032 03       		.uleb128 0x3
 394 0033 08       		.uleb128 0x8
 395 0034 00       		.byte	0
 396 0035 00       		.byte	0
 397 0036 05       		.uleb128 0x5
 398 0037 16       		.uleb128 0x16
 399 0038 00       		.byte	0
 400 0039 03       		.uleb128 0x3
 401 003a 0E       		.uleb128 0xe
 402 003b 3A       		.uleb128 0x3a
 403 003c 0B       		.uleb128 0xb
 404 003d 3B       		.uleb128 0x3b
 405 003e 05       		.uleb128 0x5
 406 003f 49       		.uleb128 0x49
 407 0040 13       		.uleb128 0x13
 408 0041 00       		.byte	0
 409 0042 00       		.byte	0
 410 0043 06       		.uleb128 0x6
 411 0044 0F       		.uleb128 0xf
 412 0045 00       		.byte	0
 413 0046 0B       		.uleb128 0xb
 414 0047 0B       		.uleb128 0xb
 415 0048 49       		.uleb128 0x49
 416 0049 13       		.uleb128 0x13
 417 004a 00       		.byte	0
 418 004b 00       		.byte	0
 419 004c 07       		.uleb128 0x7
 420 004d 2E       		.uleb128 0x2e
 421 004e 01       		.byte	0x1
 422 004f 03       		.uleb128 0x3
 423 0050 0E       		.uleb128 0xe
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 20


 424 0051 3A       		.uleb128 0x3a
 425 0052 0B       		.uleb128 0xb
 426 0053 3B       		.uleb128 0x3b
 427 0054 05       		.uleb128 0x5
 428 0055 27       		.uleb128 0x27
 429 0056 19       		.uleb128 0x19
 430 0057 49       		.uleb128 0x49
 431 0058 13       		.uleb128 0x13
 432 0059 20       		.uleb128 0x20
 433 005a 0B       		.uleb128 0xb
 434 005b 01       		.uleb128 0x1
 435 005c 13       		.uleb128 0x13
 436 005d 00       		.byte	0
 437 005e 00       		.byte	0
 438 005f 08       		.uleb128 0x8
 439 0060 05       		.uleb128 0x5
 440 0061 00       		.byte	0
 441 0062 03       		.uleb128 0x3
 442 0063 08       		.uleb128 0x8
 443 0064 3A       		.uleb128 0x3a
 444 0065 0B       		.uleb128 0xb
 445 0066 3B       		.uleb128 0x3b
 446 0067 05       		.uleb128 0x5
 447 0068 49       		.uleb128 0x49
 448 0069 13       		.uleb128 0x13
 449 006a 00       		.byte	0
 450 006b 00       		.byte	0
 451 006c 09       		.uleb128 0x9
 452 006d 2E       		.uleb128 0x2e
 453 006e 01       		.byte	0x1
 454 006f 3F       		.uleb128 0x3f
 455 0070 19       		.uleb128 0x19
 456 0071 03       		.uleb128 0x3
 457 0072 0E       		.uleb128 0xe
 458 0073 3A       		.uleb128 0x3a
 459 0074 0B       		.uleb128 0xb
 460 0075 3B       		.uleb128 0x3b
 461 0076 0B       		.uleb128 0xb
 462 0077 27       		.uleb128 0x27
 463 0078 19       		.uleb128 0x19
 464 0079 11       		.uleb128 0x11
 465 007a 01       		.uleb128 0x1
 466 007b 12       		.uleb128 0x12
 467 007c 06       		.uleb128 0x6
 468 007d 40       		.uleb128 0x40
 469 007e 18       		.uleb128 0x18
 470 007f 9642     		.uleb128 0x2116
 471 0081 19       		.uleb128 0x19
 472 0082 00       		.byte	0
 473 0083 00       		.byte	0
 474 0084 0A       		.uleb128 0xa
 475 0085 05       		.uleb128 0x5
 476 0086 00       		.byte	0
 477 0087 03       		.uleb128 0x3
 478 0088 0E       		.uleb128 0xe
 479 0089 3A       		.uleb128 0x3a
 480 008a 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 21


 481 008b 3B       		.uleb128 0x3b
 482 008c 0B       		.uleb128 0xb
 483 008d 49       		.uleb128 0x49
 484 008e 13       		.uleb128 0x13
 485 008f 02       		.uleb128 0x2
 486 0090 18       		.uleb128 0x18
 487 0091 00       		.byte	0
 488 0092 00       		.byte	0
 489 0093 0B       		.uleb128 0xb
 490 0094 34       		.uleb128 0x34
 491 0095 00       		.byte	0
 492 0096 03       		.uleb128 0x3
 493 0097 0E       		.uleb128 0xe
 494 0098 3A       		.uleb128 0x3a
 495 0099 0B       		.uleb128 0xb
 496 009a 3B       		.uleb128 0x3b
 497 009b 0B       		.uleb128 0xb
 498 009c 49       		.uleb128 0x49
 499 009d 13       		.uleb128 0x13
 500 009e 02       		.uleb128 0x2
 501 009f 18       		.uleb128 0x18
 502 00a0 00       		.byte	0
 503 00a1 00       		.byte	0
 504 00a2 0C       		.uleb128 0xc
 505 00a3 1D       		.uleb128 0x1d
 506 00a4 01       		.byte	0x1
 507 00a5 31       		.uleb128 0x31
 508 00a6 13       		.uleb128 0x13
 509 00a7 11       		.uleb128 0x11
 510 00a8 01       		.uleb128 0x1
 511 00a9 12       		.uleb128 0x12
 512 00aa 06       		.uleb128 0x6
 513 00ab 58       		.uleb128 0x58
 514 00ac 0B       		.uleb128 0xb
 515 00ad 59       		.uleb128 0x59
 516 00ae 0B       		.uleb128 0xb
 517 00af 00       		.byte	0
 518 00b0 00       		.byte	0
 519 00b1 0D       		.uleb128 0xd
 520 00b2 05       		.uleb128 0x5
 521 00b3 00       		.byte	0
 522 00b4 31       		.uleb128 0x31
 523 00b5 13       		.uleb128 0x13
 524 00b6 02       		.uleb128 0x2
 525 00b7 18       		.uleb128 0x18
 526 00b8 00       		.byte	0
 527 00b9 00       		.byte	0
 528 00ba 00       		.byte	0
 529              		.section	.debug_aranges,"",%progbits
 530 0000 1C000000 		.4byte	0x1c
 531 0004 0200     		.2byte	0x2
 532 0006 00000000 		.4byte	.Ldebug_info0
 533 000a 04       		.byte	0x4
 534 000b 00       		.byte	0
 535 000c 0000     		.2byte	0
 536 000e 0000     		.2byte	0
 537 0010 00000000 		.4byte	.LFB82
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 22


 538 0014 A4000000 		.4byte	.LFE82-.LFB82
 539 0018 00000000 		.4byte	0
 540 001c 00000000 		.4byte	0
 541              		.section	.debug_ranges,"",%progbits
 542              	.Ldebug_ranges0:
 543 0000 00000000 		.4byte	.LFB82
 544 0004 A4000000 		.4byte	.LFE82
 545 0008 00000000 		.4byte	0
 546 000c 00000000 		.4byte	0
 547              		.section	.debug_line,"",%progbits
 548              	.Ldebug_line0:
 549 0000 80010000 		.section	.debug_str,"MS",%progbits,1
 549      02004F01 
 549      00000201 
 549      FB0E0D00 
 549      01010101 
 550              	.LASF14:
 551 0000 696E7436 		.ascii	"int64_t\000"
 551      345F7400 
 552              	.LASF22:
 553 0008 70537263 		.ascii	"pSrcA\000"
 553      4100
 554              	.LASF23:
 555 000e 70537263 		.ascii	"pSrcB\000"
 555      4200
 556              	.LASF5:
 557 0014 5F5F696E 		.ascii	"__int32_t\000"
 557      7433325F 
 557      7400
 558              	.LASF28:
 559 001e 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 559      73657273 
 559      5C666E65 
 559      7665735C 
 559      446F6375 
 560 004b 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 560      655F7370 
 560      6565645F 
 560      73656E73 
 560      6F722E63 
 561              	.LASF27:
 562 0064 536F7572 		.ascii	"Source\\BasicMathFunctions\\arm_mult_q31.c\000"
 562      63655C42 
 562      61736963 
 562      4D617468 
 562      46756E63 
 563              	.LASF18:
 564 008d 666C6F61 		.ascii	"float\000"
 564      7400
 565              	.LASF20:
 566 0093 7133315F 		.ascii	"q31_t\000"
 566      7400
 567              	.LASF1:
 568 0099 756E7369 		.ascii	"unsigned char\000"
 568      676E6564 
 568      20636861 
 568      7200
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 23


 569              	.LASF31:
 570 00a7 626C6B43 		.ascii	"blkCnt\000"
 570      6E7400
 571              	.LASF7:
 572 00ae 6C6F6E67 		.ascii	"long unsigned int\000"
 572      20756E73 
 572      69676E65 
 572      6420696E 
 572      7400
 573              	.LASF3:
 574 00c0 73686F72 		.ascii	"short unsigned int\000"
 574      7420756E 
 574      7369676E 
 574      65642069 
 574      6E7400
 575              	.LASF24:
 576 00d3 70447374 		.ascii	"pDst\000"
 576      00
 577              	.LASF8:
 578 00d8 5F5F696E 		.ascii	"__int64_t\000"
 578      7436345F 
 578      7400
 579              	.LASF30:
 580 00e2 61726D5F 		.ascii	"arm_mult_q31\000"
 580      6D756C74 
 580      5F713331 
 580      00
 581              	.LASF17:
 582 00ef 646F7562 		.ascii	"double\000"
 582      6C6500
 583              	.LASF6:
 584 00f6 5F5F7569 		.ascii	"__uint32_t\000"
 584      6E743332 
 584      5F7400
 585              	.LASF11:
 586 0101 756E7369 		.ascii	"unsigned int\000"
 586      676E6564 
 586      20696E74 
 586      00
 587              	.LASF10:
 588 010e 6C6F6E67 		.ascii	"long long unsigned int\000"
 588      206C6F6E 
 588      6720756E 
 588      7369676E 
 588      65642069 
 589              	.LASF26:
 590 0125 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 590      4320342E 
 590      392E3320 
 590      32303135 
 590      30333033 
 591 0158 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 591      20726576 
 591      6973696F 
 591      6E203232 
 591      31323230 
 592 018b 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccXTAXk1.s 			page 24


 592      30202D66 
 592      66756E63 
 592      74696F6E 
 592      2D736563 
 593              	.LASF21:
 594 01b7 7136335F 		.ascii	"q63_t\000"
 594      7400
 595              	.LASF12:
 596 01bd 696E7433 		.ascii	"int32_t\000"
 596      325F7400 
 597              	.LASF15:
 598 01c5 73697A65 		.ascii	"sizetype\000"
 598      74797065 
 598      00
 599              	.LASF9:
 600 01ce 6C6F6E67 		.ascii	"long long int\000"
 600      206C6F6E 
 600      6720696E 
 600      7400
 601              	.LASF25:
 602 01dc 626C6F63 		.ascii	"blockSize\000"
 602      6B53697A 
 602      6500
 603              	.LASF29:
 604 01e6 636C6970 		.ascii	"clip_q63_to_q31\000"
 604      5F713633 
 604      5F746F5F 
 604      71333100 
 605              	.LASF16:
 606 01f6 63686172 		.ascii	"char\000"
 606      00
 607              	.LASF2:
 608 01fb 73686F72 		.ascii	"short int\000"
 608      7420696E 
 608      7400
 609              	.LASF13:
 610 0205 75696E74 		.ascii	"uint32_t\000"
 610      33325F74 
 610      00
 611              	.LASF4:
 612 020e 6C6F6E67 		.ascii	"long int\000"
 612      20696E74 
 612      00
 613              	.LASF19:
 614 0217 6C6F6E67 		.ascii	"long double\000"
 614      20646F75 
 614      626C6500 
 615              	.LASF0:
 616 0223 7369676E 		.ascii	"signed char\000"
 616      65642063 
 616      68617200 
 617              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
