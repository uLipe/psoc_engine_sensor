ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_cmplx_mult_real_q31.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_lmul
  18              		.section	.text.arm_cmplx_mult_real_q31,"ax",%progbits
  19              		.align	2
  20              		.global	arm_cmplx_mult_real_q31
  21              		.code	16
  22              		.thumb_func
  23              		.type	arm_cmplx_mult_real_q31, %function
  24              	arm_cmplx_mult_real_q31:
  25              	.LFB82:
  26              		.file 1 "Source\\ComplexMathFunctions\\arm_cmplx_mult_real_q31.c"
   1:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** /* ----------------------------------------------------------------------
   2:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Project:      CMSIS DSP Library
   3:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Title:        arm_cmplx_mult_real_q31.c
   4:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Description:  Q31 complex by real multiplication
   5:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  *
   6:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * $Date:        27. January 2017
   7:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * $Revision:    V.1.5.1
   8:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  *
   9:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Target Processor: Cortex-M cores
  10:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * -------------------------------------------------------------------- */
  11:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** /*
  12:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  *
  14:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  *
  16:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * not use this file except in compliance with the License.
  18:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * You may obtain a copy of the License at
  19:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  *
  20:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  *
  22:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * See the License for the specific language governing permissions and
  26:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * limitations under the License.
  27:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  */
  28:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  29:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #include "arm_math.h"
  30:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  31:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 2


  32:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * @ingroup groupCmplxMath
  33:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  */
  34:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  35:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** /**
  36:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * @addtogroup CmplxByRealMult
  37:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * @{
  38:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  */
  39:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  40:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  41:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** /**
  42:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * @brief  Q31 complex-by-real multiplication
  43:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * @param[in]  *pSrcCmplx points to the complex input vector
  44:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * @param[in]  *pSrcReal points to the real input vector
  45:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * @param[out]  *pCmplxDst points to the complex output vector
  46:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * @param[in]  numSamples number of samples in each vector
  47:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * @return none.
  48:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  *
  49:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * \par
  51:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * The function uses saturating arithmetic.
  52:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  * Results outside of the allowable Q31 range[0x80000000 0x7FFFFFFF] will be saturated.
  53:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****  */
  54:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  55:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** void arm_cmplx_mult_real_q31(
  56:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   q31_t * pSrcCmplx,
  57:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   q31_t * pSrcReal,
  58:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   q31_t * pCmplxDst,
  59:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   uint32_t numSamples)
  60:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** {
  27              		.loc 1 60 0
  28              		.cfi_startproc
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              		.cfi_def_cfa_offset 20
  31              		.cfi_offset 4, -20
  32              		.cfi_offset 5, -16
  33              		.cfi_offset 6, -12
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 4746     		mov	r7, r8
  37 0004 80B4     		push	{r7}
  38              		.cfi_def_cfa_offset 24
  39              		.cfi_offset 8, -24
  40 0006 9CB0     		sub	sp, sp, #112
  41              		.cfi_def_cfa_offset 136
  42 0008 00AF     		add	r7, sp, #0
  43              		.cfi_def_cfa_register 7
  44 000a 7865     		str	r0, [r7, #84]
  45 000c 3965     		str	r1, [r7, #80]
  46 000e FA64     		str	r2, [r7, #76]
  47 0010 BB64     		str	r3, [r7, #72]
  61:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   q31_t inA1;                                    /* Temporary variable to store input value */
  62:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  63:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #if defined (ARM_MATH_DSP)
  64:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  65:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  66:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   uint32_t blkCnt;                               /* loop counters */
  67:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   q31_t inA2, inA3, inA4;                        /* Temporary variables to hold input data */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 3


  68:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   q31_t inB1, inB2;                              /* Temporary variabels to hold input data */
  69:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   q31_t out1, out2, out3, out4;                  /* Temporary variables to hold output data */
  70:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  71:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   /* loop Unrolling */
  72:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   blkCnt = numSamples >> 2u;
  73:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  74:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  75:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  76:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   while (blkCnt > 0u)
  77:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   {
  78:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* C[2 * i] = A[2 * i] * B[i].            */
  79:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* C[2 * i + 1] = A[2 * i + 1] * B[i].        */
  80:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* read real input from complex input buffer */
  81:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inA1 = *pSrcCmplx++;
  82:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inA2 = *pSrcCmplx++;
  83:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* read input from real input bufer */
  84:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inB1 = *pSrcReal++;
  85:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inB2 = *pSrcReal++;
  86:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* read imaginary input from complex input buffer */
  87:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inA3 = *pSrcCmplx++;
  88:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inA4 = *pSrcCmplx++;
  89:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  90:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* multiply complex input with real input */
  91:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out1 = ((q63_t) inA1 * inB1) >> 32;
  92:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out2 = ((q63_t) inA2 * inB1) >> 32;
  93:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out3 = ((q63_t) inA3 * inB2) >> 32;
  94:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out4 = ((q63_t) inA4 * inB2) >> 32;
  95:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
  96:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* sature the result */
  97:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out1 = __SSAT(out1, 31);
  98:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out2 = __SSAT(out2, 31);
  99:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out3 = __SSAT(out3, 31);
 100:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out4 = __SSAT(out4, 31);
 101:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 102:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* get result in 1.31 format */
 103:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out1 = out1 << 1;
 104:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out2 = out2 << 1;
 105:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out3 = out3 << 1;
 106:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out4 = out4 << 1;
 107:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 108:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* store the result to destination buffer */
 109:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = out1;
 110:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = out2;
 111:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = out3;
 112:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = out4;
 113:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 114:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* read real input from complex input buffer */
 115:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inA1 = *pSrcCmplx++;
 116:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inA2 = *pSrcCmplx++;
 117:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* read input from real input bufer */
 118:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inB1 = *pSrcReal++;
 119:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inB2 = *pSrcReal++;
 120:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* read imaginary input from complex input buffer */
 121:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inA3 = *pSrcCmplx++;
 122:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inA4 = *pSrcCmplx++;
 123:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 124:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* multiply complex input with real input */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 4


 125:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out1 = ((q63_t) inA1 * inB1) >> 32;
 126:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out2 = ((q63_t) inA2 * inB1) >> 32;
 127:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out3 = ((q63_t) inA3 * inB2) >> 32;
 128:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out4 = ((q63_t) inA4 * inB2) >> 32;
 129:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 130:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* sature the result */
 131:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out1 = __SSAT(out1, 31);
 132:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out2 = __SSAT(out2, 31);
 133:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out3 = __SSAT(out3, 31);
 134:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out4 = __SSAT(out4, 31);
 135:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 136:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* get result in 1.31 format */
 137:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out1 = out1 << 1;
 138:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out2 = out2 << 1;
 139:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out3 = out3 << 1;
 140:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out4 = out4 << 1;
 141:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 142:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* store the result to destination buffer */
 143:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = out1;
 144:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = out2;
 145:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = out3;
 146:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = out4;
 147:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 148:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* Decrement the numSamples loop counter */
 149:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     blkCnt--;
 150:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   }
 151:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 152:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
 153:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****    ** No loop unrolling is used. */
 154:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   blkCnt = numSamples % 0x4u;
 155:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 156:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   while (blkCnt > 0u)
 157:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   {
 158:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* C[2 * i] = A[2 * i] * B[i].            */
 159:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* C[2 * i + 1] = A[2 * i + 1] * B[i].        */
 160:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* read real input from complex input buffer */
 161:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inA1 = *pSrcCmplx++;
 162:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inA2 = *pSrcCmplx++;
 163:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* read input from real input bufer */
 164:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inB1 = *pSrcReal++;
 165:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 166:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* multiply complex input with real input */
 167:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out1 = ((q63_t) inA1 * inB1) >> 32;
 168:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out2 = ((q63_t) inA2 * inB1) >> 32;
 169:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 170:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* sature the result */
 171:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out1 = __SSAT(out1, 31);
 172:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out2 = __SSAT(out2, 31);
 173:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 174:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* get result in 1.31 format */
 175:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out1 = out1 << 1;
 176:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     out2 = out2 << 1;
 177:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 178:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* store the result to destination buffer */
 179:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = out1;
 180:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ = out2;
 181:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 5


 182:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* Decrement the numSamples loop counter */
 183:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     blkCnt--;
 184:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   }
 185:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 186:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #else
 187:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 188:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   /* Run the below code for Cortex-M0 */
 189:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 190:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   while (numSamples > 0u)
  48              		.loc 1 190 0
  49 0012 79E0     		b	.L2
  50              	.L9:
 191:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   {
 192:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* realOut = realA * realB.            */
 193:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* imagReal = imagA * realB.               */
 194:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     inA1 = *pSrcReal++;
  51              		.loc 1 194 0
  52 0014 3A6D     		ldr	r2, [r7, #80]
  53 0016 131D     		add	r3, r2, #4
  54 0018 3B65     		str	r3, [r7, #80]
  55 001a 1368     		ldr	r3, [r2]
  56 001c FB66     		str	r3, [r7, #108]
 195:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* store the result in the destination buffer. */
 196:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ =
  57              		.loc 1 196 0
  58 001e FB6C     		ldr	r3, [r7, #76]
  59 0020 9846     		mov	r8, r3
  60 0022 4346     		mov	r3, r8
  61 0024 0433     		add	r3, r3, #4
  62 0026 FB64     		str	r3, [r7, #76]
 197:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****       (q31_t) clip_q63_to_q31(((q63_t) * pSrcCmplx++ * inA1) >> 31);
  63              		.loc 1 197 0
  64 0028 7A6D     		ldr	r2, [r7, #84]
  65 002a 131D     		add	r3, r2, #4
  66 002c 7B65     		str	r3, [r7, #84]
  67 002e 1368     		ldr	r3, [r2]
  68 0030 BB63     		str	r3, [r7, #56]
  69 0032 DB17     		asr	r3, r3, #31
  70 0034 FB63     		str	r3, [r7, #60]
  71 0036 FB6E     		ldr	r3, [r7, #108]
  72 0038 3B63     		str	r3, [r7, #48]
  73 003a DB17     		asr	r3, r3, #31
  74 003c 7B63     		str	r3, [r7, #52]
  75 003e B86B     		ldr	r0, [r7, #56]
  76 0040 F96B     		ldr	r1, [r7, #60]
  77 0042 3A6B     		ldr	r2, [r7, #48]
  78 0044 7B6B     		ldr	r3, [r7, #52]
  79 0046 FFF7FEFF 		bl	__aeabi_lmul
  80 004a 031C     		mov	r3, r0
  81 004c 0C1C     		mov	r4, r1
  82 004e 6200     		lsl	r2, r4, #1
  83 0050 DD0F     		lsr	r5, r3, #31
  84 0052 1543     		orr	r5, r2
  85 0054 E617     		asr	r6, r4, #31
  86 0056 3D66     		str	r5, [r7, #96]
  87 0058 7E66     		str	r6, [r7, #100]
  88              	.LBB6:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 6


  89              	.LBB7:
  90              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 7


  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 8


 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 9


 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 10


 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 11


 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 12


 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 13


 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 14


 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 15


 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
  91              		.loc 2 513 0
  92 005a 7B6E     		ldr	r3, [r7, #100]
  93 005c 1B00     		asr	r3, r3, #0
  94 005e BB61     		str	r3, [r7, #24]
  95 0060 7B6E     		ldr	r3, [r7, #100]
  96 0062 DB17     		asr	r3, r3, #31
  97 0064 FB61     		str	r3, [r7, #28]
  98 0066 BA69     		ldr	r2, [r7, #24]
  99 0068 3B6E     		ldr	r3, [r7, #96]
 100 006a DB17     		asr	r3, r3, #31
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 101              		.loc 2 514 0
 102 006c 9A42     		cmp	r2, r3
 103 006e 09D0     		beq	.L3
 104 0070 7B6E     		ldr	r3, [r7, #100]
 105 0072 DB17     		asr	r3, r3, #31
 106 0074 3B61     		str	r3, [r7, #16]
 107 0076 7B6E     		ldr	r3, [r7, #100]
 108 0078 DB17     		asr	r3, r3, #31
 109 007a 7B61     		str	r3, [r7, #20]
 110 007c 3A69     		ldr	r2, [r7, #16]
 111 007e 274B     		ldr	r3, .L11
 112 0080 5340     		eor	r3, r2
 113 0082 00E0     		b	.L5
 114              	.L3:
 115 0084 3B6E     		ldr	r3, [r7, #96]
 116              	.L5:
 117              	.LBE7:
 118              	.LBE6:
 196:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****       (q31_t) clip_q63_to_q31(((q63_t) * pSrcCmplx++ * inA1) >> 31);
 119              		.loc 1 196 0
 120 0086 4246     		mov	r2, r8
 121 0088 1360     		str	r3, [r2]
 198:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ =
 122              		.loc 1 198 0
 123 008a FB6C     		ldr	r3, [r7, #76]
 124 008c 9846     		mov	r8, r3
 125 008e 4346     		mov	r3, r8
 126 0090 0433     		add	r3, r3, #4
 127 0092 FB64     		str	r3, [r7, #76]
 199:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****       (q31_t) clip_q63_to_q31(((q63_t) * pSrcCmplx++ * inA1) >> 31);
 128              		.loc 1 199 0
 129 0094 7A6D     		ldr	r2, [r7, #84]
 130 0096 131D     		add	r3, r2, #4
 131 0098 7B65     		str	r3, [r7, #84]
 132 009a 1368     		ldr	r3, [r2]
 133 009c BB62     		str	r3, [r7, #40]
 134 009e DB17     		asr	r3, r3, #31
 135 00a0 FB62     		str	r3, [r7, #44]
 136 00a2 FB6E     		ldr	r3, [r7, #108]
 137 00a4 3B62     		str	r3, [r7, #32]
 138 00a6 DB17     		asr	r3, r3, #31
 139 00a8 7B62     		str	r3, [r7, #36]
 140 00aa B86A     		ldr	r0, [r7, #40]
 141 00ac F96A     		ldr	r1, [r7, #44]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 16


 142 00ae 3A6A     		ldr	r2, [r7, #32]
 143 00b0 7B6A     		ldr	r3, [r7, #36]
 144 00b2 FFF7FEFF 		bl	__aeabi_lmul
 145 00b6 031C     		mov	r3, r0
 146 00b8 0C1C     		mov	r4, r1
 147 00ba 6200     		lsl	r2, r4, #1
 148 00bc D90F     		lsr	r1, r3, #31
 149 00be 3964     		str	r1, [r7, #64]
 150 00c0 396C     		ldr	r1, [r7, #64]
 151 00c2 1143     		orr	r1, r2
 152 00c4 3964     		str	r1, [r7, #64]
 153 00c6 E317     		asr	r3, r4, #31
 154 00c8 7B64     		str	r3, [r7, #68]
 155 00ca 3B6C     		ldr	r3, [r7, #64]
 156 00cc 7C6C     		ldr	r4, [r7, #68]
 157 00ce BB65     		str	r3, [r7, #88]
 158 00d0 FC65     		str	r4, [r7, #92]
 159              	.LBB8:
 160              	.LBB9:
 513:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 161              		.loc 2 513 0
 162 00d2 FB6D     		ldr	r3, [r7, #92]
 163 00d4 1B00     		asr	r3, r3, #0
 164 00d6 BB60     		str	r3, [r7, #8]
 165 00d8 FB6D     		ldr	r3, [r7, #92]
 166 00da DB17     		asr	r3, r3, #31
 167 00dc FB60     		str	r3, [r7, #12]
 168 00de BA68     		ldr	r2, [r7, #8]
 169 00e0 BB6D     		ldr	r3, [r7, #88]
 170 00e2 DB17     		asr	r3, r3, #31
 171              		.loc 2 514 0
 172 00e4 9A42     		cmp	r2, r3
 173 00e6 09D0     		beq	.L6
 174 00e8 FB6D     		ldr	r3, [r7, #92]
 175 00ea DB17     		asr	r3, r3, #31
 176 00ec 3B60     		str	r3, [r7]
 177 00ee FB6D     		ldr	r3, [r7, #92]
 178 00f0 DB17     		asr	r3, r3, #31
 179 00f2 7B60     		str	r3, [r7, #4]
 180 00f4 3A68     		ldr	r2, [r7]
 181 00f6 094B     		ldr	r3, .L11
 182 00f8 5340     		eor	r3, r2
 183 00fa 00E0     		b	.L10
 184              	.L6:
 185 00fc BB6D     		ldr	r3, [r7, #88]
 186              	.L10:
 187              	.LBE9:
 188              	.LBE8:
 198:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     *pCmplxDst++ =
 189              		.loc 1 198 0
 190 00fe 4246     		mov	r2, r8
 191 0100 1360     		str	r3, [r2]
 200:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 201:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     /* Decrement the numSamples loop counter */
 202:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****     numSamples--;
 192              		.loc 1 202 0
 193 0102 BB6C     		ldr	r3, [r7, #72]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 17


 194 0104 013B     		sub	r3, r3, #1
 195 0106 BB64     		str	r3, [r7, #72]
 196              	.L2:
 190:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   {
 197              		.loc 1 190 0
 198 0108 BB6C     		ldr	r3, [r7, #72]
 199 010a 002B     		cmp	r3, #0
 200 010c 00D0     		beq	.LCB162
 201 010e 81E7     		b	.L9	@long jump
 202              	.LCB162:
 203:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c ****   }
 204:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 205:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** #endif /* #if defined (ARM_MATH_DSP) */
 206:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** 
 207:Source\ComplexMathFunctions/arm_cmplx_mult_real_q31.c **** }
 203              		.loc 1 207 0
 204 0110 BD46     		mov	sp, r7
 205 0112 1CB0     		add	sp, sp, #112
 206              		@ sp needed
 207 0114 04BC     		pop	{r2}
 208 0116 9046     		mov	r8, r2
 209 0118 F0BD     		pop	{r4, r5, r6, r7, pc}
 210              	.L12:
 211 011a C046     		.align	2
 212              	.L11:
 213 011c FFFFFF7F 		.word	2147483647
 214              		.cfi_endproc
 215              	.LFE82:
 216              		.size	arm_cmplx_mult_real_q31, .-arm_cmplx_mult_real_q31
 217              		.text
 218              	.Letext0:
 219              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 220              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 221              		.section	.debug_info,"",%progbits
 222              	.Ldebug_info0:
 223 0000 93010000 		.4byte	0x193
 224 0004 0400     		.2byte	0x4
 225 0006 00000000 		.4byte	.Ldebug_abbrev0
 226 000a 04       		.byte	0x4
 227 000b 01       		.uleb128 0x1
 228 000c 3D010000 		.4byte	.LASF26
 229 0010 01       		.byte	0x1
 230 0011 C2000000 		.4byte	.LASF27
 231 0015 34000000 		.4byte	.LASF28
 232 0019 00000000 		.4byte	.Ldebug_ranges0+0
 233 001d 00000000 		.4byte	0
 234 0021 00000000 		.4byte	.Ldebug_line0
 235 0025 02       		.uleb128 0x2
 236 0026 01       		.byte	0x1
 237 0027 06       		.byte	0x6
 238 0028 3B020000 		.4byte	.LASF0
 239 002c 02       		.uleb128 0x2
 240 002d 01       		.byte	0x1
 241 002e 08       		.byte	0x8
 242 002f 8F000000 		.4byte	.LASF1
 243 0033 02       		.uleb128 0x2
 244 0034 02       		.byte	0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 18


 245 0035 05       		.byte	0x5
 246 0036 13020000 		.4byte	.LASF2
 247 003a 02       		.uleb128 0x2
 248 003b 02       		.byte	0x2
 249 003c 07       		.byte	0x7
 250 003d AF000000 		.4byte	.LASF3
 251 0041 03       		.uleb128 0x3
 252 0042 2A000000 		.4byte	.LASF5
 253 0046 03       		.byte	0x3
 254 0047 3F       		.byte	0x3f
 255 0048 4C000000 		.4byte	0x4c
 256 004c 02       		.uleb128 0x2
 257 004d 04       		.byte	0x4
 258 004e 05       		.byte	0x5
 259 004f 26020000 		.4byte	.LASF4
 260 0053 03       		.uleb128 0x3
 261 0054 09010000 		.4byte	.LASF6
 262 0058 03       		.byte	0x3
 263 0059 41       		.byte	0x41
 264 005a 5E000000 		.4byte	0x5e
 265 005e 02       		.uleb128 0x2
 266 005f 04       		.byte	0x4
 267 0060 07       		.byte	0x7
 268 0061 9D000000 		.4byte	.LASF7
 269 0065 03       		.uleb128 0x3
 270 0066 F8000000 		.4byte	.LASF8
 271 006a 03       		.byte	0x3
 272 006b 59       		.byte	0x59
 273 006c 70000000 		.4byte	0x70
 274 0070 02       		.uleb128 0x2
 275 0071 08       		.byte	0x8
 276 0072 05       		.byte	0x5
 277 0073 F0010000 		.4byte	.LASF9
 278 0077 02       		.uleb128 0x2
 279 0078 08       		.byte	0x8
 280 0079 07       		.byte	0x7
 281 007a 26010000 		.4byte	.LASF10
 282 007e 04       		.uleb128 0x4
 283 007f 04       		.byte	0x4
 284 0080 05       		.byte	0x5
 285 0081 696E7400 		.ascii	"int\000"
 286 0085 02       		.uleb128 0x2
 287 0086 04       		.byte	0x4
 288 0087 07       		.byte	0x7
 289 0088 19010000 		.4byte	.LASF11
 290 008c 03       		.uleb128 0x3
 291 008d DF010000 		.4byte	.LASF12
 292 0091 04       		.byte	0x4
 293 0092 2C       		.byte	0x2c
 294 0093 41000000 		.4byte	0x41
 295 0097 03       		.uleb128 0x3
 296 0098 1D020000 		.4byte	.LASF13
 297 009c 04       		.byte	0x4
 298 009d 2D       		.byte	0x2d
 299 009e 53000000 		.4byte	0x53
 300 00a2 03       		.uleb128 0x3
 301 00a3 00000000 		.4byte	.LASF14
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 19


 302 00a7 04       		.byte	0x4
 303 00a8 38       		.byte	0x38
 304 00a9 65000000 		.4byte	0x65
 305 00ad 02       		.uleb128 0x2
 306 00ae 04       		.byte	0x4
 307 00af 07       		.byte	0x7
 308 00b0 E7010000 		.4byte	.LASF15
 309 00b4 02       		.uleb128 0x2
 310 00b5 01       		.byte	0x1
 311 00b6 08       		.byte	0x8
 312 00b7 0E020000 		.4byte	.LASF16
 313 00bb 02       		.uleb128 0x2
 314 00bc 08       		.byte	0x8
 315 00bd 04       		.byte	0x4
 316 00be 02010000 		.4byte	.LASF17
 317 00c2 02       		.uleb128 0x2
 318 00c3 04       		.byte	0x4
 319 00c4 04       		.byte	0x4
 320 00c5 80000000 		.4byte	.LASF18
 321 00c9 02       		.uleb128 0x2
 322 00ca 08       		.byte	0x8
 323 00cb 04       		.byte	0x4
 324 00cc 2F020000 		.4byte	.LASF19
 325 00d0 05       		.uleb128 0x5
 326 00d1 7A000000 		.4byte	.LASF20
 327 00d5 02       		.byte	0x2
 328 00d6 9B01     		.2byte	0x19b
 329 00d8 8C000000 		.4byte	0x8c
 330 00dc 05       		.uleb128 0x5
 331 00dd CF010000 		.4byte	.LASF21
 332 00e1 02       		.byte	0x2
 333 00e2 A001     		.2byte	0x1a0
 334 00e4 A2000000 		.4byte	0xa2
 335 00e8 06       		.uleb128 0x6
 336 00e9 04       		.byte	0x4
 337 00ea D0000000 		.4byte	0xd0
 338 00ee 07       		.uleb128 0x7
 339 00ef FE010000 		.4byte	.LASF29
 340 00f3 02       		.byte	0x2
 341 00f4 FE01     		.2byte	0x1fe
 342 00f6 D0000000 		.4byte	0xd0
 343 00fa 03       		.byte	0x3
 344 00fb 0A010000 		.4byte	0x10a
 345 00ff 08       		.uleb128 0x8
 346 0100 7800     		.ascii	"x\000"
 347 0102 02       		.byte	0x2
 348 0103 FF01     		.2byte	0x1ff
 349 0105 DC000000 		.4byte	0xdc
 350 0109 00       		.byte	0
 351 010a 09       		.uleb128 0x9
 352 010b 12000000 		.4byte	.LASF30
 353 010f 01       		.byte	0x1
 354 0110 37       		.byte	0x37
 355 0111 00000000 		.4byte	.LFB82
 356 0115 20010000 		.4byte	.LFE82-.LFB82
 357 0119 01       		.uleb128 0x1
 358 011a 9C       		.byte	0x9c
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 20


 359 011b 0A       		.uleb128 0xa
 360 011c 08000000 		.4byte	.LASF22
 361 0120 01       		.byte	0x1
 362 0121 38       		.byte	0x38
 363 0122 E8000000 		.4byte	0xe8
 364 0126 02       		.uleb128 0x2
 365 0127 91       		.byte	0x91
 366 0128 4C       		.sleb128 -52
 367 0129 0A       		.uleb128 0xa
 368 012a 86000000 		.4byte	.LASF23
 369 012e 01       		.byte	0x1
 370 012f 39       		.byte	0x39
 371 0130 E8000000 		.4byte	0xe8
 372 0134 02       		.uleb128 0x2
 373 0135 91       		.byte	0x91
 374 0136 48       		.sleb128 -56
 375 0137 0A       		.uleb128 0xa
 376 0138 D5010000 		.4byte	.LASF24
 377 013c 01       		.byte	0x1
 378 013d 3A       		.byte	0x3a
 379 013e E8000000 		.4byte	0xe8
 380 0142 02       		.uleb128 0x2
 381 0143 91       		.byte	0x91
 382 0144 44       		.sleb128 -60
 383 0145 0A       		.uleb128 0xa
 384 0146 47020000 		.4byte	.LASF25
 385 014a 01       		.byte	0x1
 386 014b 3B       		.byte	0x3b
 387 014c 97000000 		.4byte	0x97
 388 0150 02       		.uleb128 0x2
 389 0151 91       		.byte	0x91
 390 0152 40       		.sleb128 -64
 391 0153 0B       		.uleb128 0xb
 392 0154 14010000 		.4byte	.LASF31
 393 0158 01       		.byte	0x1
 394 0159 3D       		.byte	0x3d
 395 015a D0000000 		.4byte	0xd0
 396 015e 02       		.uleb128 0x2
 397 015f 91       		.byte	0x91
 398 0160 64       		.sleb128 -28
 399 0161 0C       		.uleb128 0xc
 400 0162 EE000000 		.4byte	0xee
 401 0166 5A000000 		.4byte	.LBB6
 402 016a 2C000000 		.4byte	.LBE6-.LBB6
 403 016e 01       		.byte	0x1
 404 016f C5       		.byte	0xc5
 405 0170 7D010000 		.4byte	0x17d
 406 0174 0D       		.uleb128 0xd
 407 0175 FF000000 		.4byte	0xff
 408 0179 02       		.uleb128 0x2
 409 017a 91       		.byte	0x91
 410 017b 58       		.sleb128 -40
 411 017c 00       		.byte	0
 412 017d 0E       		.uleb128 0xe
 413 017e EE000000 		.4byte	0xee
 414 0182 D2000000 		.4byte	.LBB8
 415 0186 2C000000 		.4byte	.LBE8-.LBB8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 21


 416 018a 01       		.byte	0x1
 417 018b C7       		.byte	0xc7
 418 018c 0D       		.uleb128 0xd
 419 018d FF000000 		.4byte	0xff
 420 0191 02       		.uleb128 0x2
 421 0192 91       		.byte	0x91
 422 0193 50       		.sleb128 -48
 423 0194 00       		.byte	0
 424 0195 00       		.byte	0
 425 0196 00       		.byte	0
 426              		.section	.debug_abbrev,"",%progbits
 427              	.Ldebug_abbrev0:
 428 0000 01       		.uleb128 0x1
 429 0001 11       		.uleb128 0x11
 430 0002 01       		.byte	0x1
 431 0003 25       		.uleb128 0x25
 432 0004 0E       		.uleb128 0xe
 433 0005 13       		.uleb128 0x13
 434 0006 0B       		.uleb128 0xb
 435 0007 03       		.uleb128 0x3
 436 0008 0E       		.uleb128 0xe
 437 0009 1B       		.uleb128 0x1b
 438 000a 0E       		.uleb128 0xe
 439 000b 55       		.uleb128 0x55
 440 000c 17       		.uleb128 0x17
 441 000d 11       		.uleb128 0x11
 442 000e 01       		.uleb128 0x1
 443 000f 10       		.uleb128 0x10
 444 0010 17       		.uleb128 0x17
 445 0011 00       		.byte	0
 446 0012 00       		.byte	0
 447 0013 02       		.uleb128 0x2
 448 0014 24       		.uleb128 0x24
 449 0015 00       		.byte	0
 450 0016 0B       		.uleb128 0xb
 451 0017 0B       		.uleb128 0xb
 452 0018 3E       		.uleb128 0x3e
 453 0019 0B       		.uleb128 0xb
 454 001a 03       		.uleb128 0x3
 455 001b 0E       		.uleb128 0xe
 456 001c 00       		.byte	0
 457 001d 00       		.byte	0
 458 001e 03       		.uleb128 0x3
 459 001f 16       		.uleb128 0x16
 460 0020 00       		.byte	0
 461 0021 03       		.uleb128 0x3
 462 0022 0E       		.uleb128 0xe
 463 0023 3A       		.uleb128 0x3a
 464 0024 0B       		.uleb128 0xb
 465 0025 3B       		.uleb128 0x3b
 466 0026 0B       		.uleb128 0xb
 467 0027 49       		.uleb128 0x49
 468 0028 13       		.uleb128 0x13
 469 0029 00       		.byte	0
 470 002a 00       		.byte	0
 471 002b 04       		.uleb128 0x4
 472 002c 24       		.uleb128 0x24
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 22


 473 002d 00       		.byte	0
 474 002e 0B       		.uleb128 0xb
 475 002f 0B       		.uleb128 0xb
 476 0030 3E       		.uleb128 0x3e
 477 0031 0B       		.uleb128 0xb
 478 0032 03       		.uleb128 0x3
 479 0033 08       		.uleb128 0x8
 480 0034 00       		.byte	0
 481 0035 00       		.byte	0
 482 0036 05       		.uleb128 0x5
 483 0037 16       		.uleb128 0x16
 484 0038 00       		.byte	0
 485 0039 03       		.uleb128 0x3
 486 003a 0E       		.uleb128 0xe
 487 003b 3A       		.uleb128 0x3a
 488 003c 0B       		.uleb128 0xb
 489 003d 3B       		.uleb128 0x3b
 490 003e 05       		.uleb128 0x5
 491 003f 49       		.uleb128 0x49
 492 0040 13       		.uleb128 0x13
 493 0041 00       		.byte	0
 494 0042 00       		.byte	0
 495 0043 06       		.uleb128 0x6
 496 0044 0F       		.uleb128 0xf
 497 0045 00       		.byte	0
 498 0046 0B       		.uleb128 0xb
 499 0047 0B       		.uleb128 0xb
 500 0048 49       		.uleb128 0x49
 501 0049 13       		.uleb128 0x13
 502 004a 00       		.byte	0
 503 004b 00       		.byte	0
 504 004c 07       		.uleb128 0x7
 505 004d 2E       		.uleb128 0x2e
 506 004e 01       		.byte	0x1
 507 004f 03       		.uleb128 0x3
 508 0050 0E       		.uleb128 0xe
 509 0051 3A       		.uleb128 0x3a
 510 0052 0B       		.uleb128 0xb
 511 0053 3B       		.uleb128 0x3b
 512 0054 05       		.uleb128 0x5
 513 0055 27       		.uleb128 0x27
 514 0056 19       		.uleb128 0x19
 515 0057 49       		.uleb128 0x49
 516 0058 13       		.uleb128 0x13
 517 0059 20       		.uleb128 0x20
 518 005a 0B       		.uleb128 0xb
 519 005b 01       		.uleb128 0x1
 520 005c 13       		.uleb128 0x13
 521 005d 00       		.byte	0
 522 005e 00       		.byte	0
 523 005f 08       		.uleb128 0x8
 524 0060 05       		.uleb128 0x5
 525 0061 00       		.byte	0
 526 0062 03       		.uleb128 0x3
 527 0063 08       		.uleb128 0x8
 528 0064 3A       		.uleb128 0x3a
 529 0065 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 23


 530 0066 3B       		.uleb128 0x3b
 531 0067 05       		.uleb128 0x5
 532 0068 49       		.uleb128 0x49
 533 0069 13       		.uleb128 0x13
 534 006a 00       		.byte	0
 535 006b 00       		.byte	0
 536 006c 09       		.uleb128 0x9
 537 006d 2E       		.uleb128 0x2e
 538 006e 01       		.byte	0x1
 539 006f 3F       		.uleb128 0x3f
 540 0070 19       		.uleb128 0x19
 541 0071 03       		.uleb128 0x3
 542 0072 0E       		.uleb128 0xe
 543 0073 3A       		.uleb128 0x3a
 544 0074 0B       		.uleb128 0xb
 545 0075 3B       		.uleb128 0x3b
 546 0076 0B       		.uleb128 0xb
 547 0077 27       		.uleb128 0x27
 548 0078 19       		.uleb128 0x19
 549 0079 11       		.uleb128 0x11
 550 007a 01       		.uleb128 0x1
 551 007b 12       		.uleb128 0x12
 552 007c 06       		.uleb128 0x6
 553 007d 40       		.uleb128 0x40
 554 007e 18       		.uleb128 0x18
 555 007f 9642     		.uleb128 0x2116
 556 0081 19       		.uleb128 0x19
 557 0082 00       		.byte	0
 558 0083 00       		.byte	0
 559 0084 0A       		.uleb128 0xa
 560 0085 05       		.uleb128 0x5
 561 0086 00       		.byte	0
 562 0087 03       		.uleb128 0x3
 563 0088 0E       		.uleb128 0xe
 564 0089 3A       		.uleb128 0x3a
 565 008a 0B       		.uleb128 0xb
 566 008b 3B       		.uleb128 0x3b
 567 008c 0B       		.uleb128 0xb
 568 008d 49       		.uleb128 0x49
 569 008e 13       		.uleb128 0x13
 570 008f 02       		.uleb128 0x2
 571 0090 18       		.uleb128 0x18
 572 0091 00       		.byte	0
 573 0092 00       		.byte	0
 574 0093 0B       		.uleb128 0xb
 575 0094 34       		.uleb128 0x34
 576 0095 00       		.byte	0
 577 0096 03       		.uleb128 0x3
 578 0097 0E       		.uleb128 0xe
 579 0098 3A       		.uleb128 0x3a
 580 0099 0B       		.uleb128 0xb
 581 009a 3B       		.uleb128 0x3b
 582 009b 0B       		.uleb128 0xb
 583 009c 49       		.uleb128 0x49
 584 009d 13       		.uleb128 0x13
 585 009e 02       		.uleb128 0x2
 586 009f 18       		.uleb128 0x18
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 24


 587 00a0 00       		.byte	0
 588 00a1 00       		.byte	0
 589 00a2 0C       		.uleb128 0xc
 590 00a3 1D       		.uleb128 0x1d
 591 00a4 01       		.byte	0x1
 592 00a5 31       		.uleb128 0x31
 593 00a6 13       		.uleb128 0x13
 594 00a7 11       		.uleb128 0x11
 595 00a8 01       		.uleb128 0x1
 596 00a9 12       		.uleb128 0x12
 597 00aa 06       		.uleb128 0x6
 598 00ab 58       		.uleb128 0x58
 599 00ac 0B       		.uleb128 0xb
 600 00ad 59       		.uleb128 0x59
 601 00ae 0B       		.uleb128 0xb
 602 00af 01       		.uleb128 0x1
 603 00b0 13       		.uleb128 0x13
 604 00b1 00       		.byte	0
 605 00b2 00       		.byte	0
 606 00b3 0D       		.uleb128 0xd
 607 00b4 05       		.uleb128 0x5
 608 00b5 00       		.byte	0
 609 00b6 31       		.uleb128 0x31
 610 00b7 13       		.uleb128 0x13
 611 00b8 02       		.uleb128 0x2
 612 00b9 18       		.uleb128 0x18
 613 00ba 00       		.byte	0
 614 00bb 00       		.byte	0
 615 00bc 0E       		.uleb128 0xe
 616 00bd 1D       		.uleb128 0x1d
 617 00be 01       		.byte	0x1
 618 00bf 31       		.uleb128 0x31
 619 00c0 13       		.uleb128 0x13
 620 00c1 11       		.uleb128 0x11
 621 00c2 01       		.uleb128 0x1
 622 00c3 12       		.uleb128 0x12
 623 00c4 06       		.uleb128 0x6
 624 00c5 58       		.uleb128 0x58
 625 00c6 0B       		.uleb128 0xb
 626 00c7 59       		.uleb128 0x59
 627 00c8 0B       		.uleb128 0xb
 628 00c9 00       		.byte	0
 629 00ca 00       		.byte	0
 630 00cb 00       		.byte	0
 631              		.section	.debug_aranges,"",%progbits
 632 0000 1C000000 		.4byte	0x1c
 633 0004 0200     		.2byte	0x2
 634 0006 00000000 		.4byte	.Ldebug_info0
 635 000a 04       		.byte	0x4
 636 000b 00       		.byte	0
 637 000c 0000     		.2byte	0
 638 000e 0000     		.2byte	0
 639 0010 00000000 		.4byte	.LFB82
 640 0014 20010000 		.4byte	.LFE82-.LFB82
 641 0018 00000000 		.4byte	0
 642 001c 00000000 		.4byte	0
 643              		.section	.debug_ranges,"",%progbits
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 25


 644              	.Ldebug_ranges0:
 645 0000 00000000 		.4byte	.LFB82
 646 0004 20010000 		.4byte	.LFE82
 647 0008 00000000 		.4byte	0
 648 000c 00000000 		.4byte	0
 649              		.section	.debug_line,"",%progbits
 650              	.Ldebug_line0:
 651 0000 9D010000 		.section	.debug_str,"MS",%progbits,1
 651      02005C01 
 651      00000201 
 651      FB0E0D00 
 651      01010101 
 652              	.LASF14:
 653 0000 696E7436 		.ascii	"int64_t\000"
 653      345F7400 
 654              	.LASF22:
 655 0008 70537263 		.ascii	"pSrcCmplx\000"
 655      436D706C 
 655      7800
 656              	.LASF30:
 657 0012 61726D5F 		.ascii	"arm_cmplx_mult_real_q31\000"
 657      636D706C 
 657      785F6D75 
 657      6C745F72 
 657      65616C5F 
 658              	.LASF5:
 659 002a 5F5F696E 		.ascii	"__int32_t\000"
 659      7433325F 
 659      7400
 660              	.LASF28:
 661 0034 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 661      73657273 
 661      5C666E65 
 661      7665735C 
 661      446F6375 
 662 0061 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 662      655F7370 
 662      6565645F 
 662      73656E73 
 662      6F722E63 
 663              	.LASF20:
 664 007a 7133315F 		.ascii	"q31_t\000"
 664      7400
 665              	.LASF18:
 666 0080 666C6F61 		.ascii	"float\000"
 666      7400
 667              	.LASF23:
 668 0086 70537263 		.ascii	"pSrcReal\000"
 668      5265616C 
 668      00
 669              	.LASF1:
 670 008f 756E7369 		.ascii	"unsigned char\000"
 670      676E6564 
 670      20636861 
 670      7200
 671              	.LASF7:
 672 009d 6C6F6E67 		.ascii	"long unsigned int\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 26


 672      20756E73 
 672      69676E65 
 672      6420696E 
 672      7400
 673              	.LASF3:
 674 00af 73686F72 		.ascii	"short unsigned int\000"
 674      7420756E 
 674      7369676E 
 674      65642069 
 674      6E7400
 675              	.LASF27:
 676 00c2 536F7572 		.ascii	"Source\\ComplexMathFunctions\\arm_cmplx_mult_real_q"
 676      63655C43 
 676      6F6D706C 
 676      65784D61 
 676      74684675 
 677 00f3 33312E63 		.ascii	"31.c\000"
 677      00
 678              	.LASF8:
 679 00f8 5F5F696E 		.ascii	"__int64_t\000"
 679      7436345F 
 679      7400
 680              	.LASF17:
 681 0102 646F7562 		.ascii	"double\000"
 681      6C6500
 682              	.LASF6:
 683 0109 5F5F7569 		.ascii	"__uint32_t\000"
 683      6E743332 
 683      5F7400
 684              	.LASF31:
 685 0114 696E4131 		.ascii	"inA1\000"
 685      00
 686              	.LASF11:
 687 0119 756E7369 		.ascii	"unsigned int\000"
 687      676E6564 
 687      20696E74 
 687      00
 688              	.LASF10:
 689 0126 6C6F6E67 		.ascii	"long long unsigned int\000"
 689      206C6F6E 
 689      6720756E 
 689      7369676E 
 689      65642069 
 690              	.LASF26:
 691 013d 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 691      4320342E 
 691      392E3320 
 691      32303135 
 691      30333033 
 692 0170 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 692      20726576 
 692      6973696F 
 692      6E203232 
 692      31323230 
 693 01a3 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 693      30202D66 
 693      66756E63 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc64FHYC.s 			page 27


 693      74696F6E 
 693      2D736563 
 694              	.LASF21:
 695 01cf 7136335F 		.ascii	"q63_t\000"
 695      7400
 696              	.LASF24:
 697 01d5 70436D70 		.ascii	"pCmplxDst\000"
 697      6C784473 
 697      7400
 698              	.LASF12:
 699 01df 696E7433 		.ascii	"int32_t\000"
 699      325F7400 
 700              	.LASF15:
 701 01e7 73697A65 		.ascii	"sizetype\000"
 701      74797065 
 701      00
 702              	.LASF9:
 703 01f0 6C6F6E67 		.ascii	"long long int\000"
 703      206C6F6E 
 703      6720696E 
 703      7400
 704              	.LASF29:
 705 01fe 636C6970 		.ascii	"clip_q63_to_q31\000"
 705      5F713633 
 705      5F746F5F 
 705      71333100 
 706              	.LASF16:
 707 020e 63686172 		.ascii	"char\000"
 707      00
 708              	.LASF2:
 709 0213 73686F72 		.ascii	"short int\000"
 709      7420696E 
 709      7400
 710              	.LASF13:
 711 021d 75696E74 		.ascii	"uint32_t\000"
 711      33325F74 
 711      00
 712              	.LASF4:
 713 0226 6C6F6E67 		.ascii	"long int\000"
 713      20696E74 
 713      00
 714              	.LASF19:
 715 022f 6C6F6E67 		.ascii	"long double\000"
 715      20646F75 
 715      626C6500 
 716              	.LASF0:
 717 023b 7369676E 		.ascii	"signed char\000"
 717      65642063 
 717      68617200 
 718              	.LASF25:
 719 0247 6E756D53 		.ascii	"numSamples\000"
 719      616D706C 
 719      657300
 720              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
