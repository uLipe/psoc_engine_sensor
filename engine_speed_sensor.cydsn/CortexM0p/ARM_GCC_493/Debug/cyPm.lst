ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"cyPm.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CySysPmSleep,"ax",%progbits
  18              		.align	2
  19              		.global	CySysPmSleep
  20              		.code	16
  21              		.thumb_func
  22              		.type	CySysPmSleep, %function
  23              	CySysPmSleep:
  24              	.LFB1:
  25              		.file 1 "Generated_Source\\PSoC4\\cyPm.c"
   1:Generated_Source\PSoC4/cyPm.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/cyPm.c **** * \file cyPm.c
   3:Generated_Source\PSoC4/cyPm.c **** * \version 5.50
   4:Generated_Source\PSoC4/cyPm.c **** *
   5:Generated_Source\PSoC4/cyPm.c **** * \brief Provides an API for the power management.
   6:Generated_Source\PSoC4/cyPm.c **** *
   7:Generated_Source\PSoC4/cyPm.c **** * \note Documentation of the API's in this file is located in the System
   8:Generated_Source\PSoC4/cyPm.c **** * Reference Guide provided with PSoC Creator.
   9:Generated_Source\PSoC4/cyPm.c **** *
  10:Generated_Source\PSoC4/cyPm.c **** ********************************************************************************
  11:Generated_Source\PSoC4/cyPm.c **** * \copyright
  12:Generated_Source\PSoC4/cyPm.c **** * Copyright 2011-2016, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/cyPm.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/cyPm.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/cyPm.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/cyPm.c **** 
  18:Generated_Source\PSoC4/cyPm.c **** #include "cyPm.h"
  19:Generated_Source\PSoC4/cyPm.c **** #include "CyLib.h"
  20:Generated_Source\PSoC4/cyPm.c **** 
  21:Generated_Source\PSoC4/cyPm.c **** 
  22:Generated_Source\PSoC4/cyPm.c **** /*******************************************************************************
  23:Generated_Source\PSoC4/cyPm.c **** * Function Name: CySysPmSleep
  24:Generated_Source\PSoC4/cyPm.c **** ****************************************************************************//**
  25:Generated_Source\PSoC4/cyPm.c **** *
  26:Generated_Source\PSoC4/cyPm.c **** * Puts the part into the Sleep state. This is a CPU-centric power mode.
  27:Generated_Source\PSoC4/cyPm.c **** * It means that the CPU has indicated that it is in the sleep mode and
  28:Generated_Source\PSoC4/cyPm.c **** * its main clock can be removed. It is identical to Active from a peripheral
  29:Generated_Source\PSoC4/cyPm.c **** * point of view. Any enabled interrupts can cause wakeup from the Sleep mode.
  30:Generated_Source\PSoC4/cyPm.c **** *
  31:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  32:Generated_Source\PSoC4/cyPm.c **** void CySysPmSleep(void)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 2


  33:Generated_Source\PSoC4/cyPm.c **** {
  26              		.loc 1 33 0
  27              		.cfi_startproc
  28 0000 90B5     		push	{r4, r7, lr}
  29              		.cfi_def_cfa_offset 12
  30              		.cfi_offset 4, -12
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 83B0     		sub	sp, sp, #12
  34              		.cfi_def_cfa_offset 24
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  34:Generated_Source\PSoC4/cyPm.c ****     uint8 interruptState;
  35:Generated_Source\PSoC4/cyPm.c **** 
  36:Generated_Source\PSoC4/cyPm.c ****     interruptState = CyEnterCriticalSection();
  37              		.loc 1 36 0
  38 0006 FC1D     		add	r4, r7, #7
  39 0008 FFF7FEFF 		bl	CyEnterCriticalSection
  40 000c 031C     		mov	r3, r0
  41 000e 2370     		strb	r3, [r4]
  37:Generated_Source\PSoC4/cyPm.c **** 
  38:Generated_Source\PSoC4/cyPm.c ****     /* CPU enters Sleep mode upon execution of WFI */
  39:Generated_Source\PSoC4/cyPm.c ****     CY_PM_CPU_SCR_REG &= (uint32) (~CY_PM_CPU_SCR_SLEEPDEEP);
  42              		.loc 1 39 0
  43 0010 074B     		ldr	r3, .L2
  44 0012 074A     		ldr	r2, .L2
  45 0014 1268     		ldr	r2, [r2]
  46 0016 0421     		mov	r1, #4
  47 0018 8A43     		bic	r2, r1
  48 001a 1A60     		str	r2, [r3]
  40:Generated_Source\PSoC4/cyPm.c **** 
  41:Generated_Source\PSoC4/cyPm.c ****     /* Sleep and wait for interrupt */
  42:Generated_Source\PSoC4/cyPm.c ****     CY_PM_WFI;
  49              		.loc 1 42 0
  50              	@ 42 "Generated_Source\PSoC4\cyPm.c" 1
  51 001c 30BF     		WFI 
  52              	
  53              	@ 0 "" 2
  43:Generated_Source\PSoC4/cyPm.c **** 
  44:Generated_Source\PSoC4/cyPm.c ****     CyExitCriticalSection(interruptState);
  54              		.loc 1 44 0
  55              		.code	16
  56 001e FB1D     		add	r3, r7, #7
  57 0020 1B78     		ldrb	r3, [r3]
  58 0022 181C     		mov	r0, r3
  59 0024 FFF7FEFF 		bl	CyExitCriticalSection
  45:Generated_Source\PSoC4/cyPm.c **** }
  60              		.loc 1 45 0
  61 0028 BD46     		mov	sp, r7
  62 002a 03B0     		add	sp, sp, #12
  63              		@ sp needed
  64 002c 90BD     		pop	{r4, r7, pc}
  65              	.L3:
  66 002e C046     		.align	2
  67              	.L2:
  68 0030 10ED00E0 		.word	-536810224
  69              		.cfi_endproc
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 3


  70              	.LFE1:
  71              		.size	CySysPmSleep, .-CySysPmSleep
  72              		.section	.text.CySysPmDeepSleep,"ax",%progbits
  73              		.align	2
  74              		.global	CySysPmDeepSleep
  75              		.code	16
  76              		.thumb_func
  77              		.type	CySysPmDeepSleep, %function
  78              	CySysPmDeepSleep:
  79              	.LFB2:
  46:Generated_Source\PSoC4/cyPm.c **** 
  47:Generated_Source\PSoC4/cyPm.c **** 
  48:Generated_Source\PSoC4/cyPm.c **** /*******************************************************************************
  49:Generated_Source\PSoC4/cyPm.c **** * Function Name: CySysPmDeepSleep
  50:Generated_Source\PSoC4/cyPm.c **** ****************************************************************************//**
  51:Generated_Source\PSoC4/cyPm.c **** *
  52:Generated_Source\PSoC4/cyPm.c **** * Puts the part into the Deep Sleep state. If the firmware attempts to enter
  53:Generated_Source\PSoC4/cyPm.c **** * this mode before the system is ready (that is, when
  54:Generated_Source\PSoC4/cyPm.c **** * PWR_CONTROL.LPM_READY = 0), then the device will go into the Sleep mode
  55:Generated_Source\PSoC4/cyPm.c **** * instead and automatically enter the originally intended mode when the
  56:Generated_Source\PSoC4/cyPm.c **** * holdoff expires.
  57:Generated_Source\PSoC4/cyPm.c **** *
  58:Generated_Source\PSoC4/cyPm.c **** * The wakeup occurs when an interrupt is received from a DeepSleep or
  59:Generated_Source\PSoC4/cyPm.c **** * Hibernate peripheral. For more details, see a corresponding
  60:Generated_Source\PSoC4/cyPm.c **** * peripheral's datasheet.
  61:Generated_Source\PSoC4/cyPm.c **** *
  62:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/cyPm.c **** void CySysPmDeepSleep(void)
  64:Generated_Source\PSoC4/cyPm.c **** {
  80              		.loc 1 64 0
  81              		.cfi_startproc
  82 0000 90B5     		push	{r4, r7, lr}
  83              		.cfi_def_cfa_offset 12
  84              		.cfi_offset 4, -12
  85              		.cfi_offset 7, -8
  86              		.cfi_offset 14, -4
  87 0002 83B0     		sub	sp, sp, #12
  88              		.cfi_def_cfa_offset 24
  89 0004 00AF     		add	r7, sp, #0
  90              		.cfi_def_cfa_register 7
  65:Generated_Source\PSoC4/cyPm.c ****     uint8 interruptState;
  66:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  67:Generated_Source\PSoC4/cyPm.c ****         volatile uint32 clkSelectReg;
  68:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  69:Generated_Source\PSoC4/cyPm.c **** 
  70:Generated_Source\PSoC4/cyPm.c ****     interruptState = CyEnterCriticalSection();
  91              		.loc 1 70 0
  92 0006 FC1D     		add	r4, r7, #7
  93 0008 FFF7FEFF 		bl	CyEnterCriticalSection
  94 000c 031C     		mov	r3, r0
  95 000e 2370     		strb	r3, [r4]
  71:Generated_Source\PSoC4/cyPm.c **** 
  72:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  73:Generated_Source\PSoC4/cyPm.c ****         /* Device enters DeepSleep mode when CPU asserts SLEEPDEEP signal */
  74:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_CONTROL_REG &= (uint32) (~CY_PM_PWR_CONTROL_HIBERNATE);
  75:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  76:Generated_Source\PSoC4/cyPm.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 4


  77:Generated_Source\PSoC4/cyPm.c ****     #if (CY_IP_CPUSS && CY_IP_SRSSV2)
  78:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPUSS_CONFIG_REG |= CY_PM_CPUSS_CONFIG_FLSH_ACC_BYPASS;
  79:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_CPUSS && CY_IP_SRSSV2) */
  80:Generated_Source\PSoC4/cyPm.c **** 
  81:Generated_Source\PSoC4/cyPm.c ****     /* Adjust delay to wait for references to settle on wakeup from Deep Sleep */
  82:Generated_Source\PSoC4/cyPm.c ****     CY_PM_PWR_KEY_DELAY_REG = CY_SFLASH_DPSLP_KEY_DELAY_REG;
  96              		.loc 1 82 0
  97 0010 094B     		ldr	r3, .L5
  98 0012 0A4A     		ldr	r2, .L5+4
  99 0014 1288     		ldrh	r2, [r2]
 100 0016 92B2     		uxth	r2, r2
 101 0018 1A60     		str	r2, [r3]
  83:Generated_Source\PSoC4/cyPm.c **** 
  84:Generated_Source\PSoC4/cyPm.c ****     /* CPU enters DeepSleep/Hibernate mode upon execution of WFI */
  85:Generated_Source\PSoC4/cyPm.c ****     CY_PM_CPU_SCR_REG |= CY_PM_CPU_SCR_SLEEPDEEP;
 102              		.loc 1 85 0
 103 001a 094B     		ldr	r3, .L5+8
 104 001c 084A     		ldr	r2, .L5+8
 105 001e 1268     		ldr	r2, [r2]
 106 0020 0421     		mov	r1, #4
 107 0022 0A43     		orr	r2, r1
 108 0024 1A60     		str	r2, [r3]
  86:Generated_Source\PSoC4/cyPm.c **** 
  87:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  88:Generated_Source\PSoC4/cyPm.c ****         /* Preserve system clock configuration and
  89:Generated_Source\PSoC4/cyPm.c ****         * reduce sysclk to <=12 MHz (Cypress ID #158710, #179888).
  90:Generated_Source\PSoC4/cyPm.c ****         */
  91:Generated_Source\PSoC4/cyPm.c ****         clkSelectReg = CY_SYS_CLK_SELECT_REG;
  92:Generated_Source\PSoC4/cyPm.c ****         CySysClkWriteSysclkDiv(CY_SYS_CLK_SYSCLK_DIV4);
  93:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  94:Generated_Source\PSoC4/cyPm.c **** 
  95:Generated_Source\PSoC4/cyPm.c ****     /* Sleep and wait for interrupt */
  96:Generated_Source\PSoC4/cyPm.c ****     CY_PM_WFI;
 109              		.loc 1 96 0
 110              	@ 96 "Generated_Source\PSoC4\cyPm.c" 1
 111 0026 30BF     		WFI 
 112              	
 113              	@ 0 "" 2
  97:Generated_Source\PSoC4/cyPm.c **** 
  98:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  99:Generated_Source\PSoC4/cyPm.c ****         /* Restore system clock configuration */
 100:Generated_Source\PSoC4/cyPm.c ****         CY_SYS_CLK_SELECT_REG = clkSelectReg;
 101:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
 102:Generated_Source\PSoC4/cyPm.c **** 
 103:Generated_Source\PSoC4/cyPm.c ****     #if (CY_IP_CPUSS && CY_IP_SRSSV2)
 104:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPUSS_CONFIG_REG &= (uint32) (~CY_PM_CPUSS_CONFIG_FLSH_ACC_BYPASS);
 105:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_CPUSS && CY_IP_SRSSV2) */
 106:Generated_Source\PSoC4/cyPm.c **** 
 107:Generated_Source\PSoC4/cyPm.c ****     CyExitCriticalSection(interruptState);
 114              		.loc 1 107 0
 115              		.code	16
 116 0028 FB1D     		add	r3, r7, #7
 117 002a 1B78     		ldrb	r3, [r3]
 118 002c 181C     		mov	r0, r3
 119 002e FFF7FEFF 		bl	CyExitCriticalSection
 108:Generated_Source\PSoC4/cyPm.c **** }
 120              		.loc 1 108 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 5


 121 0032 BD46     		mov	sp, r7
 122 0034 03B0     		add	sp, sp, #12
 123              		@ sp needed
 124 0036 90BD     		pop	{r4, r7, pc}
 125              	.L6:
 126              		.align	2
 127              	.L5:
 128 0038 04000340 		.word	1073938436
 129 003c 52F1FF0F 		.word	268431698
 130 0040 10ED00E0 		.word	-536810224
 131              		.cfi_endproc
 132              	.LFE2:
 133              		.size	CySysPmDeepSleep, .-CySysPmDeepSleep
 134              		.section	.text.CySysPmSetWakeupHoldoff,"ax",%progbits
 135              		.align	2
 136              		.global	CySysPmSetWakeupHoldoff
 137              		.code	16
 138              		.thumb_func
 139              		.type	CySysPmSetWakeupHoldoff, %function
 140              	CySysPmSetWakeupHoldoff:
 141              	.LFB3:
 109:Generated_Source\PSoC4/cyPm.c **** 
 110:Generated_Source\PSoC4/cyPm.c **** 
 111:Generated_Source\PSoC4/cyPm.c **** #if(CY_IP_SRSSV2)
 112:Generated_Source\PSoC4/cyPm.c **** 
 113:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 114:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmHibernate
 115:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 116:Generated_Source\PSoC4/cyPm.c ****     *
 117:Generated_Source\PSoC4/cyPm.c ****     * Puts the part into the Hibernate state. Only SRAM and UDBs are retained;
 118:Generated_Source\PSoC4/cyPm.c ****     * most internal supplies are off. Wakeup is possible from a pin or a hibernate
 119:Generated_Source\PSoC4/cyPm.c ****     * comparator only.
 120:Generated_Source\PSoC4/cyPm.c ****     *
 121:Generated_Source\PSoC4/cyPm.c ****     * It is expected that the firmware has already frozen the IO-Cells using
 122:Generated_Source\PSoC4/cyPm.c ****     * CySysPmFreezeIo() function before the call to this function. If this is
 123:Generated_Source\PSoC4/cyPm.c ****     * omitted, the IO-cells will be frozen in the same way as they are
 124:Generated_Source\PSoC4/cyPm.c ****     * in the Active to Deep Sleep transition, but will lose their state on wake up
 125:Generated_Source\PSoC4/cyPm.c ****     * (because of the reset occurring at that time).
 126:Generated_Source\PSoC4/cyPm.c ****     *
 127:Generated_Source\PSoC4/cyPm.c ****     * Because all the CPU state is lost, the CPU will start up at the reset vector.
 128:Generated_Source\PSoC4/cyPm.c ****     * To save the firmware state through the Hibernate low power mode, a
 129:Generated_Source\PSoC4/cyPm.c ****     * corresponding variable should be defined with CY_NOINIT attribute. It
 130:Generated_Source\PSoC4/cyPm.c ****     * prevents data from being initialized to zero on startup. The interrupt
 131:Generated_Source\PSoC4/cyPm.c ****     * cause of the hibernate peripheral is retained, such that it can be either
 132:Generated_Source\PSoC4/cyPm.c ****     * read by the firmware or cause an interrupt after the firmware has booted and
 133:Generated_Source\PSoC4/cyPm.c ****     * enabled the corresponding interrupt. To distinguish the wakeup from
 134:Generated_Source\PSoC4/cyPm.c ****     * the Hibernate mode and the general Reset event, the
 135:Generated_Source\PSoC4/cyPm.c ****     * \ref CySysPmGetResetReason() function could be used.
 136:Generated_Source\PSoC4/cyPm.c ****     *
 137:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 138:Generated_Source\PSoC4/cyPm.c ****     void CySysPmHibernate(void)
 139:Generated_Source\PSoC4/cyPm.c ****     {
 140:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 141:Generated_Source\PSoC4/cyPm.c **** 
 142:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 143:Generated_Source\PSoC4/cyPm.c **** 
 144:Generated_Source\PSoC4/cyPm.c ****         #if (CY_IP_HOBTO_DEVICE)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 6


 145:Generated_Source\PSoC4/cyPm.c ****             /* Disable input buffers for all ports */
 146:Generated_Source\PSoC4/cyPm.c ****             CySysPmHibPinsDisableInputBuf();
 147:Generated_Source\PSoC4/cyPm.c ****         #endif /* (CY_IP_HOBTO_DEVICE) */
 148:Generated_Source\PSoC4/cyPm.c **** 
 149:Generated_Source\PSoC4/cyPm.c ****         /* Device enters Hibernate mode when CPU asserts SLEEPDEEP signal */
 150:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_CONTROL_REG |= CY_PM_PWR_CONTROL_HIBERNATE;
 151:Generated_Source\PSoC4/cyPm.c **** 
 152:Generated_Source\PSoC4/cyPm.c ****         /* Adjust delay to wait for references to settle on wakeup from hibernate */
 153:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = CY_SFLASH_HIB_KEY_DELAY_REG;
 154:Generated_Source\PSoC4/cyPm.c **** 
 155:Generated_Source\PSoC4/cyPm.c ****         /* CPU enters DeepSleep/Hibernate mode upon execution of WFI */
 156:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPU_SCR_REG |= CY_PM_CPU_SCR_SLEEPDEEP;
 157:Generated_Source\PSoC4/cyPm.c **** 
 158:Generated_Source\PSoC4/cyPm.c ****         /* Save token that will retain through a STOP/WAKEUP sequence
 159:Generated_Source\PSoC4/cyPm.c ****          * thus could be used by CySysPmGetResetReason() to differentiate
 160:Generated_Source\PSoC4/cyPm.c ****          * WAKEUP from a general RESET event.
 161:Generated_Source\PSoC4/cyPm.c ****          */
 162:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_PWR_STOP_REG & (uint32)(~CY_PM_PWR_STOP_TOKEN_MASK)) | CY_PM_PW
 163:Generated_Source\PSoC4/cyPm.c **** 
 164:Generated_Source\PSoC4/cyPm.c ****         /* Sleep and wait for interrupt. Wakeup from Hibernate is performed
 165:Generated_Source\PSoC4/cyPm.c ****          * through RESET state, causing a normal Boot procedure to occur.
 166:Generated_Source\PSoC4/cyPm.c ****          * The WFI instruction doesn't put the core to sleep if its wake condition
 167:Generated_Source\PSoC4/cyPm.c ****          * is true when the instruction is executed.
 168:Generated_Source\PSoC4/cyPm.c ****          */
 169:Generated_Source\PSoC4/cyPm.c ****         CY_PM_WFI;
 170:Generated_Source\PSoC4/cyPm.c **** 
 171:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 172:Generated_Source\PSoC4/cyPm.c ****     }
 173:Generated_Source\PSoC4/cyPm.c **** 
 174:Generated_Source\PSoC4/cyPm.c **** 
 175:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 176:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmStop
 177:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 178:Generated_Source\PSoC4/cyPm.c ****     *
 179:Generated_Source\PSoC4/cyPm.c ****     * Puts the part into the Stop state. All internal supplies are off;
 180:Generated_Source\PSoC4/cyPm.c ****     * no state is retained.
 181:Generated_Source\PSoC4/cyPm.c ****     *
 182:Generated_Source\PSoC4/cyPm.c ****     * Wakeup from Stop is performed by toggling the wakeup pin, causing
 183:Generated_Source\PSoC4/cyPm.c ****     * a normal boot procedure to occur. To configure the wakeup pin,
 184:Generated_Source\PSoC4/cyPm.c ****     * the Digital Input Pin component should be placed on the schematic,
 185:Generated_Source\PSoC4/cyPm.c ****     * assigned to the wakeup pin, and resistively pulled up or down to the inverse
 186:Generated_Source\PSoC4/cyPm.c ****     * state of the wakeup polarity. To distinguish the wakeup from the Stop mode
 187:Generated_Source\PSoC4/cyPm.c ****     * and the general Reset event, \ref CySysPmGetResetReason() function could be
 188:Generated_Source\PSoC4/cyPm.c ****     * used.  The wakeup pin is active low by default. The wakeup pin polarity
 189:Generated_Source\PSoC4/cyPm.c ****     * could be changed with the \ref CySysPmSetWakeupPolarity() function.
 190:Generated_Source\PSoC4/cyPm.c ****     *
 191:Generated_Source\PSoC4/cyPm.c ****     * This function freezes IO cells implicitly. It is not possible to enter
 192:Generated_Source\PSoC4/cyPm.c ****     * the STOP mode before freezing the IO cells. The IO cells remain frozen after
 193:Generated_Source\PSoC4/cyPm.c ****     * awake from the Stop mode until the firmware unfreezes them after booting
 194:Generated_Source\PSoC4/cyPm.c ****     * explicitly with \ref CySysPmUnfreezeIo() function call.
 195:Generated_Source\PSoC4/cyPm.c ****     *
 196:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 197:Generated_Source\PSoC4/cyPm.c ****     void CySysPmStop(void)
 198:Generated_Source\PSoC4/cyPm.c ****     {
 199:Generated_Source\PSoC4/cyPm.c ****         (void) CyEnterCriticalSection();
 200:Generated_Source\PSoC4/cyPm.c **** 
 201:Generated_Source\PSoC4/cyPm.c ****         /* Update token to indicate Stop mode transition. Preserve only polarity. */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 7


 202:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_POLARITY) | CY_PM_PWR_STOP_TOKEN_
 203:Generated_Source\PSoC4/cyPm.c **** 
 204:Generated_Source\PSoC4/cyPm.c ****         /* Freeze IO-Cells to save IO-Cell state */
 205:Generated_Source\PSoC4/cyPm.c ****         CySysPmFreezeIo();
 206:Generated_Source\PSoC4/cyPm.c **** 
 207:Generated_Source\PSoC4/cyPm.c ****         /* Initiates transition to Stop state */
 208:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_REG | CY_PM_PWR_STOP_STOP;
 209:Generated_Source\PSoC4/cyPm.c **** 
 210:Generated_Source\PSoC4/cyPm.c ****         /* Depending on the clock frequency and internal timing delays,
 211:Generated_Source\PSoC4/cyPm.c ****          * the final AHB transaction may or may not complete. To guard against
 212:Generated_Source\PSoC4/cyPm.c ****          * accidentally executing an unintended instruction, it is recommended
 213:Generated_Source\PSoC4/cyPm.c ****          * to add 2 NOP cycles after the final write to the STOP register.
 214:Generated_Source\PSoC4/cyPm.c ****          */
 215:Generated_Source\PSoC4/cyPm.c ****         CY_NOP;
 216:Generated_Source\PSoC4/cyPm.c ****         CY_NOP;
 217:Generated_Source\PSoC4/cyPm.c **** 
 218:Generated_Source\PSoC4/cyPm.c ****         /* Should never get to this WFI instruction */
 219:Generated_Source\PSoC4/cyPm.c ****         CY_PM_WFI;
 220:Generated_Source\PSoC4/cyPm.c **** 
 221:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Stop is performed by toggling of Wakeup pin,
 222:Generated_Source\PSoC4/cyPm.c ****          * causing a normal Boot procedure to occur. No need to exit
 223:Generated_Source\PSoC4/cyPm.c ****          * from the critical section.
 224:Generated_Source\PSoC4/cyPm.c ****          */
 225:Generated_Source\PSoC4/cyPm.c ****     }
 226:Generated_Source\PSoC4/cyPm.c **** 
 227:Generated_Source\PSoC4/cyPm.c **** 
 228:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 229:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmSetWakeupPolarity
 230:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 231:Generated_Source\PSoC4/cyPm.c ****     *
 232:Generated_Source\PSoC4/cyPm.c ****     * Wake up from the stop mode is performed by toggling the wakeup pin,
 233:Generated_Source\PSoC4/cyPm.c ****     * causing a normal boot procedure to occur. This function assigns
 234:Generated_Source\PSoC4/cyPm.c ****     * the wakeup pin active level. Setting the wakeup pin to this level will cause
 235:Generated_Source\PSoC4/cyPm.c ****     * the wakeup from stop mode. The wakeup pin is active low by default.
 236:Generated_Source\PSoC4/cyPm.c ****     *
 237:Generated_Source\PSoC4/cyPm.c ****     * \param polarity
 238:Generated_Source\PSoC4/cyPm.c ****     * - \ref CY_PM_STOP_WAKEUP_ACTIVE_LOW Logical zero will wakeup the chip
 239:Generated_Source\PSoC4/cyPm.c ****     * - \ref CY_PM_STOP_WAKEUP_ACTIVE_HIGH Logical one will wakeup the chip
 240:Generated_Source\PSoC4/cyPm.c ****     *
 241:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 242:Generated_Source\PSoC4/cyPm.c ****     void CySysPmSetWakeupPolarity(uint32 polarity)
 243:Generated_Source\PSoC4/cyPm.c ****     {
 244:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 245:Generated_Source\PSoC4/cyPm.c **** 
 246:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 247:Generated_Source\PSoC4/cyPm.c **** 
 248:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_STOP_WAKEUP_ACTIVE_LOW != polarity) ?
 249:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG | CY_PM_PWR_STOP_POLARITY) :
 250:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG & (uint32) (~CY_PM_PWR_STOP_POLARITY));
 251:Generated_Source\PSoC4/cyPm.c **** 
 252:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 253:Generated_Source\PSoC4/cyPm.c ****     }
 254:Generated_Source\PSoC4/cyPm.c **** 
 255:Generated_Source\PSoC4/cyPm.c **** 
 256:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 257:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmGetResetReason
 258:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 8


 259:Generated_Source\PSoC4/cyPm.c ****     *
 260:Generated_Source\PSoC4/cyPm.c ****     * Retrieves the last reset reason - transition from OFF/XRES/STOP/HIBERNATE to
 261:Generated_Source\PSoC4/cyPm.c ****     * the RESET state. Note that waking up from STOP using XRES will be perceived
 262:Generated_Source\PSoC4/cyPm.c ****     * as a general RESET.
 263:Generated_Source\PSoC4/cyPm.c ****     *
 264:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_UNKN          Unknown reset reason.
 265:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_XRES          Transition from OFF/XRES to RESET
 266:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_WAKEUP_HIB    Transition/wakeup from HIBERNATE to RESET
 267:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_WAKEUP_STOP   Transition/wakeup from STOP to RESET
 268:Generated_Source\PSoC4/cyPm.c ****     *
 269:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 270:Generated_Source\PSoC4/cyPm.c ****     uint32 CySysPmGetResetReason(void)
 271:Generated_Source\PSoC4/cyPm.c ****     {
 272:Generated_Source\PSoC4/cyPm.c ****         uint32 reason = CY_PM_RESET_REASON_UNKN;
 273:Generated_Source\PSoC4/cyPm.c **** 
 274:Generated_Source\PSoC4/cyPm.c ****         switch(CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_TOKEN_MASK)
 275:Generated_Source\PSoC4/cyPm.c ****         {
 276:Generated_Source\PSoC4/cyPm.c ****         /* Power up, XRES */
 277:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_XRES:
 278:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_XRES;
 279:Generated_Source\PSoC4/cyPm.c ****             break;
 280:Generated_Source\PSoC4/cyPm.c **** 
 281:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Hibernate */
 282:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_HIB:
 283:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_WAKEUP_HIB;
 284:Generated_Source\PSoC4/cyPm.c ****             break;
 285:Generated_Source\PSoC4/cyPm.c **** 
 286:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Stop (through WAKEUP pin assert) */
 287:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_STOP:
 288:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_WAKEUP_STOP;
 289:Generated_Source\PSoC4/cyPm.c ****             break;
 290:Generated_Source\PSoC4/cyPm.c **** 
 291:Generated_Source\PSoC4/cyPm.c ****         /* Unknown reason */
 292:Generated_Source\PSoC4/cyPm.c ****         default:
 293:Generated_Source\PSoC4/cyPm.c ****             break;
 294:Generated_Source\PSoC4/cyPm.c ****         }
 295:Generated_Source\PSoC4/cyPm.c **** 
 296:Generated_Source\PSoC4/cyPm.c ****         return (reason);
 297:Generated_Source\PSoC4/cyPm.c ****     }
 298:Generated_Source\PSoC4/cyPm.c **** 
 299:Generated_Source\PSoC4/cyPm.c **** 
 300:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 301:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmFreezeIo
 302:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 303:Generated_Source\PSoC4/cyPm.c ****     *
 304:Generated_Source\PSoC4/cyPm.c ****     * Freezes IO-Cells directly to save the IO-Cell state on wake up from the
 305:Generated_Source\PSoC4/cyPm.c ****     * Hibernate or Stop state. It is not required to call this function before
 306:Generated_Source\PSoC4/cyPm.c ****     * entering the Stop mode, since \ref CySysPmStop() function freezes IO-Cells
 307:Generated_Source\PSoC4/cyPm.c ****     * implicitly.
 308:Generated_Source\PSoC4/cyPm.c ****     *
 309:Generated_Source\PSoC4/cyPm.c ****     * This API is not available for PSoC 4000 family of devices.
 310:Generated_Source\PSoC4/cyPm.c ****     *
 311:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 312:Generated_Source\PSoC4/cyPm.c ****     void CySysPmFreezeIo(void)
 313:Generated_Source\PSoC4/cyPm.c ****     {
 314:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 315:Generated_Source\PSoC4/cyPm.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 9


 316:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 317:Generated_Source\PSoC4/cyPm.c **** 
 318:Generated_Source\PSoC4/cyPm.c ****         /* Check FREEZE state to avoid recurrent IO-Cells freeze attempt,
 319:Generated_Source\PSoC4/cyPm.c ****          * since the second call to this function will cause accidental switch
 320:Generated_Source\PSoC4/cyPm.c ****          * to the STOP mode (the system will enter STOP mode immediately after
 321:Generated_Source\PSoC4/cyPm.c ****          * writing to STOP bit since both UNLOCK and FREEZE have been set correctly
 322:Generated_Source\PSoC4/cyPm.c ****          * in a previous call to this function).
 323:Generated_Source\PSoC4/cyPm.c ****          */
 324:Generated_Source\PSoC4/cyPm.c ****         if (0u == (CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_FREEZE))
 325:Generated_Source\PSoC4/cyPm.c ****         {
 326:Generated_Source\PSoC4/cyPm.c ****             /* Preserve last reset reason and disable overrides the next freeze command by peripher
 327:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_STOP | CY_PM_PWR_STOP_FREEZE | CY_PM_PWR_STOP_UNLOC
 328:Generated_Source\PSoC4/cyPm.c ****                                 (CY_PM_PWR_STOP_REG & (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_P
 329:Generated_Source\PSoC4/cyPm.c **** 
 330:Generated_Source\PSoC4/cyPm.c ****             /* If reading after writing, read this register three times to delay
 331:Generated_Source\PSoC4/cyPm.c ****             *  enough time for internal settling.
 332:Generated_Source\PSoC4/cyPm.c ****             */
 333:Generated_Source\PSoC4/cyPm.c ****             (void) CY_PM_PWR_STOP_REG;
 334:Generated_Source\PSoC4/cyPm.c ****             (void) CY_PM_PWR_STOP_REG;
 335:Generated_Source\PSoC4/cyPm.c **** 
 336:Generated_Source\PSoC4/cyPm.c ****             /* Second write causes the freeze of IO-Cells to save IO-Cell state */
 337:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_REG;
 338:Generated_Source\PSoC4/cyPm.c ****         }
 339:Generated_Source\PSoC4/cyPm.c **** 
 340:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 341:Generated_Source\PSoC4/cyPm.c ****     }
 342:Generated_Source\PSoC4/cyPm.c **** 
 343:Generated_Source\PSoC4/cyPm.c **** 
 344:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 345:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmUnfreezeIo
 346:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 347:Generated_Source\PSoC4/cyPm.c ****     *
 348:Generated_Source\PSoC4/cyPm.c ****     * The IO-Cells remain frozen after awake from Hibernate or Stop mode until
 349:Generated_Source\PSoC4/cyPm.c ****     * the firmware unfreezes them after booting. The call of this function
 350:Generated_Source\PSoC4/cyPm.c ****     * unfreezes IO-Cells explicitly.
 351:Generated_Source\PSoC4/cyPm.c ****     *
 352:Generated_Source\PSoC4/cyPm.c ****     * If the firmware intent is to retain the data value on the port, then the
 353:Generated_Source\PSoC4/cyPm.c ****     * value must be read and re-written to the data register before calling this
 354:Generated_Source\PSoC4/cyPm.c ****     * API. Furthermore, the drive mode must be re-programmed.  If this is not done,
 355:Generated_Source\PSoC4/cyPm.c ****     * the pin state will change to default state the moment the freeze is removed.
 356:Generated_Source\PSoC4/cyPm.c ****     *
 357:Generated_Source\PSoC4/cyPm.c ****     * This API is not available for PSoC 4000 family of devices.
 358:Generated_Source\PSoC4/cyPm.c ****     *
 359:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 360:Generated_Source\PSoC4/cyPm.c ****     void CySysPmUnfreezeIo(void)
 361:Generated_Source\PSoC4/cyPm.c ****     {
 362:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 363:Generated_Source\PSoC4/cyPm.c **** 
 364:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 365:Generated_Source\PSoC4/cyPm.c **** 
 366:Generated_Source\PSoC4/cyPm.c ****         /* Preserve last reset reason and wakeup polarity. Then, unfreeze I/O:
 367:Generated_Source\PSoC4/cyPm.c ****          * write PWR_STOP.FREEZE=0, .UNLOCK=0x3A, .STOP=0, .TOKEN
 368:Generated_Source\PSoC4/cyPm.c ****          */
 369:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_UNLOCK |
 370:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG & (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_POLAR
 371:Generated_Source\PSoC4/cyPm.c **** 
 372:Generated_Source\PSoC4/cyPm.c ****         /* If reading after writing, read this register three times to delay
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 10


 373:Generated_Source\PSoC4/cyPm.c ****         *  enough time for internal settling.
 374:Generated_Source\PSoC4/cyPm.c ****         */
 375:Generated_Source\PSoC4/cyPm.c ****         (void) CY_PM_PWR_STOP_REG;
 376:Generated_Source\PSoC4/cyPm.c ****         (void) CY_PM_PWR_STOP_REG;
 377:Generated_Source\PSoC4/cyPm.c **** 
 378:Generated_Source\PSoC4/cyPm.c ****         /* Lock STOP mode: write PWR_STOP.FREEZE=0, UNLOCK=0x00, STOP=0, .TOKEN */
 379:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG &= (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_POLARITY);
 380:Generated_Source\PSoC4/cyPm.c **** 
 381:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 382:Generated_Source\PSoC4/cyPm.c ****     }
 383:Generated_Source\PSoC4/cyPm.c **** 
 384:Generated_Source\PSoC4/cyPm.c **** #else
 385:Generated_Source\PSoC4/cyPm.c **** 
 386:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 387:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmSetWakeupHoldoff
 388:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 389:Generated_Source\PSoC4/cyPm.c ****     *
 390:Generated_Source\PSoC4/cyPm.c ****     * Sets the Deep Sleep wakeup time by scaling the hold-off to the HFCLK
 391:Generated_Source\PSoC4/cyPm.c ****     * frequency.
 392:Generated_Source\PSoC4/cyPm.c ****     *
 393:Generated_Source\PSoC4/cyPm.c ****     * This function must be called before increasing HFCLK clock frequency. It can
 394:Generated_Source\PSoC4/cyPm.c ****     * optionally be called after lowering HFCLK clock frequency in order to improve
 395:Generated_Source\PSoC4/cyPm.c ****     * Deep Sleep wakeup time.
 396:Generated_Source\PSoC4/cyPm.c ****     *
 397:Generated_Source\PSoC4/cyPm.c ****     * It is functionally acceptable to leave the default hold-off setting, but
 398:Generated_Source\PSoC4/cyPm.c ****     * Deep Sleep wakeup time may exceed the specification.
 399:Generated_Source\PSoC4/cyPm.c ****     *
 400:Generated_Source\PSoC4/cyPm.c ****     * This function is applicable only for the 4000 device family.
 401:Generated_Source\PSoC4/cyPm.c ****     *
 402:Generated_Source\PSoC4/cyPm.c ****     * \param hfclkFrequencyMhz The HFCLK frequency in MHz.
 403:Generated_Source\PSoC4/cyPm.c ****     *
 404:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 405:Generated_Source\PSoC4/cyPm.c ****     void CySysPmSetWakeupHoldoff(uint32 hfclkFrequencyMhz)
 406:Generated_Source\PSoC4/cyPm.c ****     {
 142              		.loc 1 406 0
 143              		.cfi_startproc
 144 0000 80B5     		push	{r7, lr}
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 7, -8
 147              		.cfi_offset 14, -4
 148 0002 82B0     		sub	sp, sp, #8
 149              		.cfi_def_cfa_offset 16
 150 0004 00AF     		add	r7, sp, #0
 151              		.cfi_def_cfa_register 7
 152 0006 7860     		str	r0, [r7, #4]
 407:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = ((((uint32)(CY_PM_PWR_KEY_DELAY_REG_DEFAULT << 16u) /
 153              		.loc 1 407 0
 154 0008 044B     		ldr	r3, .L8
 408:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_KEY_DELAY_FREQ_DEFAULT) * hfclkFrequencyMhz) >> 16u) + 1u;
 155              		.loc 1 408 0
 156 000a 7A68     		ldr	r2, [r7, #4]
 157 000c 0449     		ldr	r1, .L8+4
 158 000e 4A43     		mul	r2, r1
 159 0010 120C     		lsr	r2, r2, #16
 160 0012 0132     		add	r2, r2, #1
 407:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = ((((uint32)(CY_PM_PWR_KEY_DELAY_REG_DEFAULT << 16u) /
 161              		.loc 1 407 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 11


 162 0014 1A60     		str	r2, [r3]
 409:Generated_Source\PSoC4/cyPm.c ****     }
 163              		.loc 1 409 0
 164 0016 BD46     		mov	sp, r7
 165 0018 02B0     		add	sp, sp, #8
 166              		@ sp needed
 167 001a 80BD     		pop	{r7, pc}
 168              	.L9:
 169              		.align	2
 170              	.L8:
 171 001c 04000340 		.word	1073938436
 172 0020 AA2A0500 		.word	338602
 173              		.cfi_endproc
 174              	.LFE3:
 175              		.size	CySysPmSetWakeupHoldoff, .-CySysPmSetWakeupHoldoff
 176              		.text
 177              	.Letext0:
 178              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 179              		.section	.debug_info,"",%progbits
 180              	.Ldebug_info0:
 181 0000 34010000 		.4byte	0x134
 182 0004 0400     		.2byte	0x4
 183 0006 00000000 		.4byte	.Ldebug_abbrev0
 184 000a 04       		.byte	0x4
 185 000b 01       		.uleb128 0x1
 186 000c 6B010000 		.4byte	.LASF21
 187 0010 01       		.byte	0x1
 188 0011 33000000 		.4byte	.LASF22
 189 0015 0B010000 		.4byte	.LASF23
 190 0019 00000000 		.4byte	.Ldebug_ranges0+0
 191 001d 00000000 		.4byte	0
 192 0021 00000000 		.4byte	.Ldebug_line0
 193 0025 02       		.uleb128 0x2
 194 0026 01       		.byte	0x1
 195 0027 06       		.byte	0x6
 196 0028 F2000000 		.4byte	.LASF0
 197 002c 02       		.uleb128 0x2
 198 002d 01       		.byte	0x1
 199 002e 08       		.byte	0x8
 200 002f 9E000000 		.4byte	.LASF1
 201 0033 02       		.uleb128 0x2
 202 0034 02       		.byte	0x2
 203 0035 05       		.byte	0x5
 204 0036 5A010000 		.4byte	.LASF2
 205 003a 02       		.uleb128 0x2
 206 003b 02       		.byte	0x2
 207 003c 07       		.byte	0x7
 208 003d DF000000 		.4byte	.LASF3
 209 0041 02       		.uleb128 0x2
 210 0042 04       		.byte	0x4
 211 0043 05       		.byte	0x5
 212 0044 B1000000 		.4byte	.LASF4
 213 0048 02       		.uleb128 0x2
 214 0049 04       		.byte	0x4
 215 004a 07       		.byte	0x7
 216 004b 6F000000 		.4byte	.LASF5
 217 004f 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 12


 218 0050 08       		.byte	0x8
 219 0051 05       		.byte	0x5
 220 0052 00000000 		.4byte	.LASF6
 221 0056 02       		.uleb128 0x2
 222 0057 08       		.byte	0x8
 223 0058 07       		.byte	0x7
 224 0059 81000000 		.4byte	.LASF7
 225 005d 03       		.uleb128 0x3
 226 005e 04       		.byte	0x4
 227 005f 05       		.byte	0x5
 228 0060 696E7400 		.ascii	"int\000"
 229 0064 02       		.uleb128 0x2
 230 0065 04       		.byte	0x4
 231 0066 07       		.byte	0x7
 232 0067 15000000 		.4byte	.LASF8
 233 006b 04       		.uleb128 0x4
 234 006c 69000000 		.4byte	.LASF9
 235 0070 02       		.byte	0x2
 236 0071 B901     		.2byte	0x1b9
 237 0073 2C000000 		.4byte	0x2c
 238 0077 04       		.uleb128 0x4
 239 0078 64010000 		.4byte	.LASF10
 240 007c 02       		.byte	0x2
 241 007d BA01     		.2byte	0x1ba
 242 007f 3A000000 		.4byte	0x3a
 243 0083 04       		.uleb128 0x4
 244 0084 0E000000 		.4byte	.LASF11
 245 0088 02       		.byte	0x2
 246 0089 BB01     		.2byte	0x1bb
 247 008b 48000000 		.4byte	0x48
 248 008f 02       		.uleb128 0x2
 249 0090 04       		.byte	0x4
 250 0091 04       		.byte	0x4
 251 0092 98000000 		.4byte	.LASF12
 252 0096 02       		.uleb128 0x2
 253 0097 08       		.byte	0x8
 254 0098 04       		.byte	0x4
 255 0099 C0000000 		.4byte	.LASF13
 256 009d 02       		.uleb128 0x2
 257 009e 01       		.byte	0x1
 258 009f 08       		.byte	0x8
 259 00a0 AC000000 		.4byte	.LASF14
 260 00a4 04       		.uleb128 0x4
 261 00a5 BA000000 		.4byte	.LASF15
 262 00a9 02       		.byte	0x2
 263 00aa 6402     		.2byte	0x264
 264 00ac B0000000 		.4byte	0xb0
 265 00b0 05       		.uleb128 0x5
 266 00b1 77000000 		.4byte	0x77
 267 00b5 04       		.uleb128 0x4
 268 00b6 D9000000 		.4byte	.LASF16
 269 00ba 02       		.byte	0x2
 270 00bb 6502     		.2byte	0x265
 271 00bd C1000000 		.4byte	0xc1
 272 00c1 05       		.uleb128 0x5
 273 00c2 83000000 		.4byte	0x83
 274 00c6 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 13


 275 00c7 04       		.byte	0x4
 276 00c8 07       		.byte	0x7
 277 00c9 51010000 		.4byte	.LASF17
 278 00cd 06       		.uleb128 0x6
 279 00ce FE000000 		.4byte	.LASF18
 280 00d2 01       		.byte	0x1
 281 00d3 20       		.byte	0x20
 282 00d4 00000000 		.4byte	.LFB1
 283 00d8 34000000 		.4byte	.LFE1-.LFB1
 284 00dc 01       		.uleb128 0x1
 285 00dd 9C       		.byte	0x9c
 286 00de F1000000 		.4byte	0xf1
 287 00e2 07       		.uleb128 0x7
 288 00e3 FD010000 		.4byte	.LASF20
 289 00e7 01       		.byte	0x1
 290 00e8 22       		.byte	0x22
 291 00e9 6B000000 		.4byte	0x6b
 292 00ed 02       		.uleb128 0x2
 293 00ee 91       		.byte	0x91
 294 00ef 6F       		.sleb128 -17
 295 00f0 00       		.byte	0
 296 00f1 06       		.uleb128 0x6
 297 00f2 22000000 		.4byte	.LASF19
 298 00f6 01       		.byte	0x1
 299 00f7 3F       		.byte	0x3f
 300 00f8 00000000 		.4byte	.LFB2
 301 00fc 44000000 		.4byte	.LFE2-.LFB2
 302 0100 01       		.uleb128 0x1
 303 0101 9C       		.byte	0x9c
 304 0102 15010000 		.4byte	0x115
 305 0106 07       		.uleb128 0x7
 306 0107 FD010000 		.4byte	.LASF20
 307 010b 01       		.byte	0x1
 308 010c 41       		.byte	0x41
 309 010d 6B000000 		.4byte	0x6b
 310 0111 02       		.uleb128 0x2
 311 0112 91       		.byte	0x91
 312 0113 6F       		.sleb128 -17
 313 0114 00       		.byte	0
 314 0115 08       		.uleb128 0x8
 315 0116 51000000 		.4byte	.LASF24
 316 011a 01       		.byte	0x1
 317 011b 9501     		.2byte	0x195
 318 011d 00000000 		.4byte	.LFB3
 319 0121 24000000 		.4byte	.LFE3-.LFB3
 320 0125 01       		.uleb128 0x1
 321 0126 9C       		.byte	0x9c
 322 0127 09       		.uleb128 0x9
 323 0128 C7000000 		.4byte	.LASF25
 324 012c 01       		.byte	0x1
 325 012d 9501     		.2byte	0x195
 326 012f 83000000 		.4byte	0x83
 327 0133 02       		.uleb128 0x2
 328 0134 91       		.byte	0x91
 329 0135 74       		.sleb128 -12
 330 0136 00       		.byte	0
 331 0137 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 14


 332              		.section	.debug_abbrev,"",%progbits
 333              	.Ldebug_abbrev0:
 334 0000 01       		.uleb128 0x1
 335 0001 11       		.uleb128 0x11
 336 0002 01       		.byte	0x1
 337 0003 25       		.uleb128 0x25
 338 0004 0E       		.uleb128 0xe
 339 0005 13       		.uleb128 0x13
 340 0006 0B       		.uleb128 0xb
 341 0007 03       		.uleb128 0x3
 342 0008 0E       		.uleb128 0xe
 343 0009 1B       		.uleb128 0x1b
 344 000a 0E       		.uleb128 0xe
 345 000b 55       		.uleb128 0x55
 346 000c 17       		.uleb128 0x17
 347 000d 11       		.uleb128 0x11
 348 000e 01       		.uleb128 0x1
 349 000f 10       		.uleb128 0x10
 350 0010 17       		.uleb128 0x17
 351 0011 00       		.byte	0
 352 0012 00       		.byte	0
 353 0013 02       		.uleb128 0x2
 354 0014 24       		.uleb128 0x24
 355 0015 00       		.byte	0
 356 0016 0B       		.uleb128 0xb
 357 0017 0B       		.uleb128 0xb
 358 0018 3E       		.uleb128 0x3e
 359 0019 0B       		.uleb128 0xb
 360 001a 03       		.uleb128 0x3
 361 001b 0E       		.uleb128 0xe
 362 001c 00       		.byte	0
 363 001d 00       		.byte	0
 364 001e 03       		.uleb128 0x3
 365 001f 24       		.uleb128 0x24
 366 0020 00       		.byte	0
 367 0021 0B       		.uleb128 0xb
 368 0022 0B       		.uleb128 0xb
 369 0023 3E       		.uleb128 0x3e
 370 0024 0B       		.uleb128 0xb
 371 0025 03       		.uleb128 0x3
 372 0026 08       		.uleb128 0x8
 373 0027 00       		.byte	0
 374 0028 00       		.byte	0
 375 0029 04       		.uleb128 0x4
 376 002a 16       		.uleb128 0x16
 377 002b 00       		.byte	0
 378 002c 03       		.uleb128 0x3
 379 002d 0E       		.uleb128 0xe
 380 002e 3A       		.uleb128 0x3a
 381 002f 0B       		.uleb128 0xb
 382 0030 3B       		.uleb128 0x3b
 383 0031 05       		.uleb128 0x5
 384 0032 49       		.uleb128 0x49
 385 0033 13       		.uleb128 0x13
 386 0034 00       		.byte	0
 387 0035 00       		.byte	0
 388 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 15


 389 0037 35       		.uleb128 0x35
 390 0038 00       		.byte	0
 391 0039 49       		.uleb128 0x49
 392 003a 13       		.uleb128 0x13
 393 003b 00       		.byte	0
 394 003c 00       		.byte	0
 395 003d 06       		.uleb128 0x6
 396 003e 2E       		.uleb128 0x2e
 397 003f 01       		.byte	0x1
 398 0040 3F       		.uleb128 0x3f
 399 0041 19       		.uleb128 0x19
 400 0042 03       		.uleb128 0x3
 401 0043 0E       		.uleb128 0xe
 402 0044 3A       		.uleb128 0x3a
 403 0045 0B       		.uleb128 0xb
 404 0046 3B       		.uleb128 0x3b
 405 0047 0B       		.uleb128 0xb
 406 0048 27       		.uleb128 0x27
 407 0049 19       		.uleb128 0x19
 408 004a 11       		.uleb128 0x11
 409 004b 01       		.uleb128 0x1
 410 004c 12       		.uleb128 0x12
 411 004d 06       		.uleb128 0x6
 412 004e 40       		.uleb128 0x40
 413 004f 18       		.uleb128 0x18
 414 0050 9642     		.uleb128 0x2116
 415 0052 19       		.uleb128 0x19
 416 0053 01       		.uleb128 0x1
 417 0054 13       		.uleb128 0x13
 418 0055 00       		.byte	0
 419 0056 00       		.byte	0
 420 0057 07       		.uleb128 0x7
 421 0058 34       		.uleb128 0x34
 422 0059 00       		.byte	0
 423 005a 03       		.uleb128 0x3
 424 005b 0E       		.uleb128 0xe
 425 005c 3A       		.uleb128 0x3a
 426 005d 0B       		.uleb128 0xb
 427 005e 3B       		.uleb128 0x3b
 428 005f 0B       		.uleb128 0xb
 429 0060 49       		.uleb128 0x49
 430 0061 13       		.uleb128 0x13
 431 0062 02       		.uleb128 0x2
 432 0063 18       		.uleb128 0x18
 433 0064 00       		.byte	0
 434 0065 00       		.byte	0
 435 0066 08       		.uleb128 0x8
 436 0067 2E       		.uleb128 0x2e
 437 0068 01       		.byte	0x1
 438 0069 3F       		.uleb128 0x3f
 439 006a 19       		.uleb128 0x19
 440 006b 03       		.uleb128 0x3
 441 006c 0E       		.uleb128 0xe
 442 006d 3A       		.uleb128 0x3a
 443 006e 0B       		.uleb128 0xb
 444 006f 3B       		.uleb128 0x3b
 445 0070 05       		.uleb128 0x5
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 16


 446 0071 27       		.uleb128 0x27
 447 0072 19       		.uleb128 0x19
 448 0073 11       		.uleb128 0x11
 449 0074 01       		.uleb128 0x1
 450 0075 12       		.uleb128 0x12
 451 0076 06       		.uleb128 0x6
 452 0077 40       		.uleb128 0x40
 453 0078 18       		.uleb128 0x18
 454 0079 9742     		.uleb128 0x2117
 455 007b 19       		.uleb128 0x19
 456 007c 00       		.byte	0
 457 007d 00       		.byte	0
 458 007e 09       		.uleb128 0x9
 459 007f 05       		.uleb128 0x5
 460 0080 00       		.byte	0
 461 0081 03       		.uleb128 0x3
 462 0082 0E       		.uleb128 0xe
 463 0083 3A       		.uleb128 0x3a
 464 0084 0B       		.uleb128 0xb
 465 0085 3B       		.uleb128 0x3b
 466 0086 05       		.uleb128 0x5
 467 0087 49       		.uleb128 0x49
 468 0088 13       		.uleb128 0x13
 469 0089 02       		.uleb128 0x2
 470 008a 18       		.uleb128 0x18
 471 008b 00       		.byte	0
 472 008c 00       		.byte	0
 473 008d 00       		.byte	0
 474              		.section	.debug_aranges,"",%progbits
 475 0000 2C000000 		.4byte	0x2c
 476 0004 0200     		.2byte	0x2
 477 0006 00000000 		.4byte	.Ldebug_info0
 478 000a 04       		.byte	0x4
 479 000b 00       		.byte	0
 480 000c 0000     		.2byte	0
 481 000e 0000     		.2byte	0
 482 0010 00000000 		.4byte	.LFB1
 483 0014 34000000 		.4byte	.LFE1-.LFB1
 484 0018 00000000 		.4byte	.LFB2
 485 001c 44000000 		.4byte	.LFE2-.LFB2
 486 0020 00000000 		.4byte	.LFB3
 487 0024 24000000 		.4byte	.LFE3-.LFB3
 488 0028 00000000 		.4byte	0
 489 002c 00000000 		.4byte	0
 490              		.section	.debug_ranges,"",%progbits
 491              	.Ldebug_ranges0:
 492 0000 00000000 		.4byte	.LFB1
 493 0004 34000000 		.4byte	.LFE1
 494 0008 00000000 		.4byte	.LFB2
 495 000c 44000000 		.4byte	.LFE2
 496 0010 00000000 		.4byte	.LFB3
 497 0014 24000000 		.4byte	.LFE3
 498 0018 00000000 		.4byte	0
 499 001c 00000000 		.4byte	0
 500              		.section	.debug_line,"",%progbits
 501              	.Ldebug_line0:
 502 0000 8A000000 		.section	.debug_str,"MS",%progbits,1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 17


 502      02004100 
 502      00000201 
 502      FB0E0D00 
 502      01010101 
 503              	.LASF6:
 504 0000 6C6F6E67 		.ascii	"long long int\000"
 504      206C6F6E 
 504      6720696E 
 504      7400
 505              	.LASF11:
 506 000e 75696E74 		.ascii	"uint32\000"
 506      333200
 507              	.LASF8:
 508 0015 756E7369 		.ascii	"unsigned int\000"
 508      676E6564 
 508      20696E74 
 508      00
 509              	.LASF19:
 510 0022 43795379 		.ascii	"CySysPmDeepSleep\000"
 510      73506D44 
 510      65657053 
 510      6C656570 
 510      00
 511              	.LASF22:
 512 0033 47656E65 		.ascii	"Generated_Source\\PSoC4\\cyPm.c\000"
 512      72617465 
 512      645F536F 
 512      75726365 
 512      5C50536F 
 513              	.LASF24:
 514 0051 43795379 		.ascii	"CySysPmSetWakeupHoldoff\000"
 514      73506D53 
 514      65745761 
 514      6B657570 
 514      486F6C64 
 515              	.LASF9:
 516 0069 75696E74 		.ascii	"uint8\000"
 516      3800
 517              	.LASF5:
 518 006f 6C6F6E67 		.ascii	"long unsigned int\000"
 518      20756E73 
 518      69676E65 
 518      6420696E 
 518      7400
 519              	.LASF7:
 520 0081 6C6F6E67 		.ascii	"long long unsigned int\000"
 520      206C6F6E 
 520      6720756E 
 520      7369676E 
 520      65642069 
 521              	.LASF12:
 522 0098 666C6F61 		.ascii	"float\000"
 522      7400
 523              	.LASF1:
 524 009e 756E7369 		.ascii	"unsigned char\000"
 524      676E6564 
 524      20636861 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 18


 524      7200
 525              	.LASF14:
 526 00ac 63686172 		.ascii	"char\000"
 526      00
 527              	.LASF4:
 528 00b1 6C6F6E67 		.ascii	"long int\000"
 528      20696E74 
 528      00
 529              	.LASF15:
 530 00ba 72656731 		.ascii	"reg16\000"
 530      3600
 531              	.LASF13:
 532 00c0 646F7562 		.ascii	"double\000"
 532      6C6500
 533              	.LASF25:
 534 00c7 6866636C 		.ascii	"hfclkFrequencyMhz\000"
 534      6B467265 
 534      7175656E 
 534      63794D68 
 534      7A00
 535              	.LASF16:
 536 00d9 72656733 		.ascii	"reg32\000"
 536      3200
 537              	.LASF3:
 538 00df 73686F72 		.ascii	"short unsigned int\000"
 538      7420756E 
 538      7369676E 
 538      65642069 
 538      6E7400
 539              	.LASF0:
 540 00f2 7369676E 		.ascii	"signed char\000"
 540      65642063 
 540      68617200 
 541              	.LASF18:
 542 00fe 43795379 		.ascii	"CySysPmSleep\000"
 542      73506D53 
 542      6C656570 
 542      00
 543              	.LASF23:
 544 010b 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 544      73657273 
 544      5C666E65 
 544      7665735C 
 544      446F6375 
 545 0138 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 545      655F7370 
 545      6565645F 
 545      73656E73 
 545      6F722E63 
 546              	.LASF17:
 547 0151 73697A65 		.ascii	"sizetype\000"
 547      74797065 
 547      00
 548              	.LASF2:
 549 015a 73686F72 		.ascii	"short int\000"
 549      7420696E 
 549      7400
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccVoF9Jf.s 			page 19


 550              	.LASF10:
 551 0164 75696E74 		.ascii	"uint16\000"
 551      313600
 552              	.LASF21:
 553 016b 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 553      4320342E 
 553      392E3320 
 553      32303135 
 553      30333033 
 554 019e 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 554      20726576 
 554      6973696F 
 554      6E203232 
 554      31323230 
 555 01d1 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 555      30202D66 
 555      66756E63 
 555      74696F6E 
 555      2D736563 
 556              	.LASF20:
 557 01fd 696E7465 		.ascii	"interruptState\000"
 557      72727570 
 557      74537461 
 557      746500
 558              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
