ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_conv_partial_q7.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_conv_partial_q7,"ax",%progbits
  18              		.align	2
  19              		.global	arm_conv_partial_q7
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_conv_partial_q7, %function
  23              	arm_conv_partial_q7:
  24              	.LFB82:
  25              		.file 1 "Source\\FilteringFunctions\\arm_conv_partial_q7.c"
   1:Source\FilteringFunctions/arm_conv_partial_q7.c **** /* ----------------------------------------------------------------------
   2:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * Project:      CMSIS DSP Library
   3:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * Title:        arm_conv_partial_q7.c
   4:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * Description:  Partial convolution of Q7 sequences
   5:Source\FilteringFunctions/arm_conv_partial_q7.c ****  *
   6:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * $Date:        27. January 2017
   7:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * $Revision:    V.1.5.1
   8:Source\FilteringFunctions/arm_conv_partial_q7.c ****  *
   9:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * Target Processor: Cortex-M cores
  10:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * -------------------------------------------------------------------- */
  11:Source\FilteringFunctions/arm_conv_partial_q7.c **** /*
  12:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\FilteringFunctions/arm_conv_partial_q7.c ****  *
  14:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\FilteringFunctions/arm_conv_partial_q7.c ****  *
  16:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * not use this file except in compliance with the License.
  18:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * You may obtain a copy of the License at
  19:Source\FilteringFunctions/arm_conv_partial_q7.c ****  *
  20:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\FilteringFunctions/arm_conv_partial_q7.c ****  *
  22:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * See the License for the specific language governing permissions and
  26:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * limitations under the License.
  27:Source\FilteringFunctions/arm_conv_partial_q7.c ****  */
  28:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
  29:Source\FilteringFunctions/arm_conv_partial_q7.c **** #include "arm_math.h"
  30:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
  31:Source\FilteringFunctions/arm_conv_partial_q7.c **** /**
  32:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * @ingroup groupFilters
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 2


  33:Source\FilteringFunctions/arm_conv_partial_q7.c ****  */
  34:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
  35:Source\FilteringFunctions/arm_conv_partial_q7.c **** /**
  36:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * @addtogroup PartialConv
  37:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * @{
  38:Source\FilteringFunctions/arm_conv_partial_q7.c ****  */
  39:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
  40:Source\FilteringFunctions/arm_conv_partial_q7.c **** /**
  41:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * @brief Partial convolution of Q7 sequences.
  42:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * @param[in]       *pSrcA points to the first input sequence.
  43:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * @param[in]       srcALen length of the first input sequence.
  44:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * @param[in]       *pSrcB points to the second input sequence.
  45:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * @param[in]       srcBLen length of the second input sequence.
  46:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * @param[out]      *pDst points to the location where the output result is written.
  47:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * @param[in]       firstIndex is the first output sample to start with.
  48:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * @param[in]       numPoints is the number of output points to be computed.
  49:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMEN
  50:Source\FilteringFunctions/arm_conv_partial_q7.c ****  *
  51:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * \par
  52:Source\FilteringFunctions/arm_conv_partial_q7.c ****  * Refer the function <code>arm_conv_partial_opt_q7()</code> for a faster implementation of this fu
  53:Source\FilteringFunctions/arm_conv_partial_q7.c ****  *
  54:Source\FilteringFunctions/arm_conv_partial_q7.c ****  */
  55:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
  56:Source\FilteringFunctions/arm_conv_partial_q7.c **** arm_status arm_conv_partial_q7(
  57:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q7_t * pSrcA,
  58:Source\FilteringFunctions/arm_conv_partial_q7.c ****   uint32_t srcALen,
  59:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q7_t * pSrcB,
  60:Source\FilteringFunctions/arm_conv_partial_q7.c ****   uint32_t srcBLen,
  61:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q7_t * pDst,
  62:Source\FilteringFunctions/arm_conv_partial_q7.c ****   uint32_t firstIndex,
  63:Source\FilteringFunctions/arm_conv_partial_q7.c ****   uint32_t numPoints)
  64:Source\FilteringFunctions/arm_conv_partial_q7.c **** {
  26              		.loc 1 64 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 90B0     		sub	sp, sp, #64
  33              		.cfi_def_cfa_offset 72
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 B960     		str	r1, [r7, #8]
  38 000a 7A60     		str	r2, [r7, #4]
  39 000c 3B60     		str	r3, [r7]
  65:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
  66:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
  67:Source\FilteringFunctions/arm_conv_partial_q7.c **** #if defined (ARM_MATH_DSP)
  68:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
  69:Source\FilteringFunctions/arm_conv_partial_q7.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  70:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
  71:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q7_t *pIn1;                                    /* inputA pointer */
  72:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q7_t *pIn2;                                    /* inputB pointer */
  73:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q7_t *pOut = pDst;                             /* output pointer */
  74:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q7_t *px;                                      /* Intermediate inputA pointer */
  75:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q7_t *py;                                      /* Intermediate inputB pointer */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 3


  76:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q7_t *pSrc1, *pSrc2;                           /* Intermediate pointers */
  77:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q31_t sum, acc0, acc1, acc2, acc3;             /* Accumulator */
  78:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q31_t input1, input2;
  79:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q15_t in1, in2;
  80:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q7_t x0, x1, x2, x3, c0, c1;
  81:Source\FilteringFunctions/arm_conv_partial_q7.c ****   uint32_t j, k, count, check, blkCnt;
  82:Source\FilteringFunctions/arm_conv_partial_q7.c ****   int32_t blockSize1, blockSize2, blockSize3;    /* loop counter */
  83:Source\FilteringFunctions/arm_conv_partial_q7.c ****   arm_status status;
  84:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
  85:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
  86:Source\FilteringFunctions/arm_conv_partial_q7.c ****   /* Check for range of output samples to be calculated */
  87:Source\FilteringFunctions/arm_conv_partial_q7.c ****   if ((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
  88:Source\FilteringFunctions/arm_conv_partial_q7.c ****   {
  89:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* Set status as ARM_MATH_ARGUMENT_ERROR */
  90:Source\FilteringFunctions/arm_conv_partial_q7.c ****     status = ARM_MATH_ARGUMENT_ERROR;
  91:Source\FilteringFunctions/arm_conv_partial_q7.c ****   }
  92:Source\FilteringFunctions/arm_conv_partial_q7.c ****   else
  93:Source\FilteringFunctions/arm_conv_partial_q7.c ****   {
  94:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
  95:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* The algorithm implementation is based on the lengths of the inputs. */
  96:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* srcB is always made to slide across srcA. */
  97:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* So srcBLen is always considered as shorter or equal to srcALen */
  98:Source\FilteringFunctions/arm_conv_partial_q7.c ****     if (srcALen >= srcBLen)
  99:Source\FilteringFunctions/arm_conv_partial_q7.c ****     {
 100:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Initialization of inputA pointer */
 101:Source\FilteringFunctions/arm_conv_partial_q7.c ****       pIn1 = pSrcA;
 102:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 103:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Initialization of inputB pointer */
 104:Source\FilteringFunctions/arm_conv_partial_q7.c ****       pIn2 = pSrcB;
 105:Source\FilteringFunctions/arm_conv_partial_q7.c ****     }
 106:Source\FilteringFunctions/arm_conv_partial_q7.c ****     else
 107:Source\FilteringFunctions/arm_conv_partial_q7.c ****     {
 108:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Initialization of inputA pointer */
 109:Source\FilteringFunctions/arm_conv_partial_q7.c ****       pIn1 = pSrcB;
 110:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 111:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Initialization of inputB pointer */
 112:Source\FilteringFunctions/arm_conv_partial_q7.c ****       pIn2 = pSrcA;
 113:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 114:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* srcBLen is always considered as shorter or equal to srcALen */
 115:Source\FilteringFunctions/arm_conv_partial_q7.c ****       j = srcBLen;
 116:Source\FilteringFunctions/arm_conv_partial_q7.c ****       srcBLen = srcALen;
 117:Source\FilteringFunctions/arm_conv_partial_q7.c ****       srcALen = j;
 118:Source\FilteringFunctions/arm_conv_partial_q7.c ****     }
 119:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 120:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* Conditions to check which loopCounter holds
 121:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * the first and last indices of the output samples to be calculated. */
 122:Source\FilteringFunctions/arm_conv_partial_q7.c ****     check = firstIndex + numPoints;
 123:Source\FilteringFunctions/arm_conv_partial_q7.c ****     blockSize3 = ((int32_t)check > (int32_t)srcALen) ? (int32_t)check - (int32_t)srcALen : 0;
 124:Source\FilteringFunctions/arm_conv_partial_q7.c ****     blockSize3 = ((int32_t)firstIndex > (int32_t)srcALen - 1) ? blockSize3 - (int32_t)firstIndex + 
 125:Source\FilteringFunctions/arm_conv_partial_q7.c ****     blockSize1 = (((int32_t) srcBLen - 1) - (int32_t) firstIndex);
 126:Source\FilteringFunctions/arm_conv_partial_q7.c ****     blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
 127:Source\FilteringFunctions/arm_conv_partial_q7.c ****                                      (int32_t) numPoints) : 0;
 128:Source\FilteringFunctions/arm_conv_partial_q7.c ****     blockSize2 = (int32_t) check - ((blockSize3 + blockSize1) +
 129:Source\FilteringFunctions/arm_conv_partial_q7.c ****                                     (int32_t) firstIndex);
 130:Source\FilteringFunctions/arm_conv_partial_q7.c ****     blockSize2 = (blockSize2 > 0) ? blockSize2 : 0;
 131:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 132:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 4


 133:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* The function is internally
 134:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * divided into three stages according to the number of multiplications that has to be
 135:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * taken place between inputA samples and inputB samples. In the first stage of the
 136:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * algorithm, the multiplications increase by one for every iteration.
 137:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * In the second stage of the algorithm, srcBLen number of multiplications are done.
 138:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * In the third stage of the algorithm, the multiplications decrease by one
 139:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * for every iteration. */
 140:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 141:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* Set the output pointer to point to the firstIndex
 142:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * of the output sample to be calculated. */
 143:Source\FilteringFunctions/arm_conv_partial_q7.c ****     pOut = pDst + firstIndex;
 144:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 145:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* --------------------------
 146:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * Initializations of stage1
 147:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * -------------------------*/
 148:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 149:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* sum = x[0] * y[0]
 150:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * sum = x[0] * y[1] + x[1] * y[0]
 151:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * ....
 152:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]
 153:Source\FilteringFunctions/arm_conv_partial_q7.c ****      */
 154:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 155:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* In this stage the MAC operations are increased by 1 for every iteration.
 156:Source\FilteringFunctions/arm_conv_partial_q7.c ****        The count variable holds the number of MAC operations performed.
 157:Source\FilteringFunctions/arm_conv_partial_q7.c ****        Since the partial convolution starts from from firstIndex
 158:Source\FilteringFunctions/arm_conv_partial_q7.c ****        Number of Macs to be performed is firstIndex + 1 */
 159:Source\FilteringFunctions/arm_conv_partial_q7.c ****     count = 1u + firstIndex;
 160:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 161:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* Working pointer of inputA */
 162:Source\FilteringFunctions/arm_conv_partial_q7.c ****     px = pIn1;
 163:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 164:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* Working pointer of inputB */
 165:Source\FilteringFunctions/arm_conv_partial_q7.c ****     pSrc2 = pIn2 + firstIndex;
 166:Source\FilteringFunctions/arm_conv_partial_q7.c ****     py = pSrc2;
 167:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 168:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* ------------------------
 169:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * Stage1 process
 170:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * ----------------------*/
 171:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 172:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* The first stage starts here */
 173:Source\FilteringFunctions/arm_conv_partial_q7.c ****     while (blockSize1 > 0)
 174:Source\FilteringFunctions/arm_conv_partial_q7.c ****     {
 175:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Accumulator is made zero for every iteration */
 176:Source\FilteringFunctions/arm_conv_partial_q7.c ****       sum = 0;
 177:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 178:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 179:Source\FilteringFunctions/arm_conv_partial_q7.c ****       k = count >> 2u;
 180:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 181:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 182:Source\FilteringFunctions/arm_conv_partial_q7.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 183:Source\FilteringFunctions/arm_conv_partial_q7.c ****       while (k > 0u)
 184:Source\FilteringFunctions/arm_conv_partial_q7.c ****       {
 185:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* x[0] , x[1] */
 186:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in1 = (q15_t) * px++;
 187:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in2 = (q15_t) * px++;
 188:Source\FilteringFunctions/arm_conv_partial_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 189:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 5


 190:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* y[srcBLen - 1] , y[srcBLen - 2] */
 191:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in1 = (q15_t) * py--;
 192:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in2 = (q15_t) * py--;
 193:Source\FilteringFunctions/arm_conv_partial_q7.c ****         input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 194:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 195:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* x[0] * y[srcBLen - 1] */
 196:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* x[1] * y[srcBLen - 2] */
 197:Source\FilteringFunctions/arm_conv_partial_q7.c ****         sum = __SMLAD(input1, input2, sum);
 198:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 199:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* x[2] , x[3] */
 200:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in1 = (q15_t) * px++;
 201:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in2 = (q15_t) * px++;
 202:Source\FilteringFunctions/arm_conv_partial_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 203:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 204:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* y[srcBLen - 3] , y[srcBLen - 4] */
 205:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in1 = (q15_t) * py--;
 206:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in2 = (q15_t) * py--;
 207:Source\FilteringFunctions/arm_conv_partial_q7.c ****         input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 208:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 209:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* x[2] * y[srcBLen - 3] */
 210:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* x[3] * y[srcBLen - 4] */
 211:Source\FilteringFunctions/arm_conv_partial_q7.c ****         sum = __SMLAD(input1, input2, sum);
 212:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 213:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Decrement the loop counter */
 214:Source\FilteringFunctions/arm_conv_partial_q7.c ****         k--;
 215:Source\FilteringFunctions/arm_conv_partial_q7.c ****       }
 216:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 217:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* If the count is not a multiple of 4, compute any remaining MACs here.
 218:Source\FilteringFunctions/arm_conv_partial_q7.c ****        ** No loop unrolling is used. */
 219:Source\FilteringFunctions/arm_conv_partial_q7.c ****       k = count % 0x4u;
 220:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 221:Source\FilteringFunctions/arm_conv_partial_q7.c ****       while (k > 0u)
 222:Source\FilteringFunctions/arm_conv_partial_q7.c ****       {
 223:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Perform the multiply-accumulates */
 224:Source\FilteringFunctions/arm_conv_partial_q7.c ****         sum += ((q31_t) * px++ * *py--);
 225:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 226:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Decrement the loop counter */
 227:Source\FilteringFunctions/arm_conv_partial_q7.c ****         k--;
 228:Source\FilteringFunctions/arm_conv_partial_q7.c ****       }
 229:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 230:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Store the result in the accumulator in the destination buffer. */
 231:Source\FilteringFunctions/arm_conv_partial_q7.c ****       *pOut++ = (q7_t) (__SSAT(sum >> 7, 8));
 232:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 233:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 234:Source\FilteringFunctions/arm_conv_partial_q7.c ****       py = ++pSrc2;
 235:Source\FilteringFunctions/arm_conv_partial_q7.c ****       px = pIn1;
 236:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 237:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Increment the MAC count */
 238:Source\FilteringFunctions/arm_conv_partial_q7.c ****       count++;
 239:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 240:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Decrement the loop counter */
 241:Source\FilteringFunctions/arm_conv_partial_q7.c ****       blockSize1--;
 242:Source\FilteringFunctions/arm_conv_partial_q7.c ****     }
 243:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 244:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* --------------------------
 245:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * Initializations of stage2
 246:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * ------------------------*/
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 6


 247:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 248:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]
 249:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]
 250:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * ....
 251:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y
 252:Source\FilteringFunctions/arm_conv_partial_q7.c ****      */
 253:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 254:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* Working pointer of inputA */
 255:Source\FilteringFunctions/arm_conv_partial_q7.c ****     if ((int32_t)firstIndex - (int32_t)srcBLen + 1 > 0)
 256:Source\FilteringFunctions/arm_conv_partial_q7.c ****     {
 257:Source\FilteringFunctions/arm_conv_partial_q7.c ****       px = pIn1 + firstIndex - srcBLen + 1;
 258:Source\FilteringFunctions/arm_conv_partial_q7.c ****     }
 259:Source\FilteringFunctions/arm_conv_partial_q7.c ****     else
 260:Source\FilteringFunctions/arm_conv_partial_q7.c ****     {
 261:Source\FilteringFunctions/arm_conv_partial_q7.c ****       px = pIn1;
 262:Source\FilteringFunctions/arm_conv_partial_q7.c ****     }
 263:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 264:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* Working pointer of inputB */
 265:Source\FilteringFunctions/arm_conv_partial_q7.c ****     pSrc2 = pIn2 + (srcBLen - 1u);
 266:Source\FilteringFunctions/arm_conv_partial_q7.c ****     py = pSrc2;
 267:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 268:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* count is index by which the pointer pIn1 to be incremented */
 269:Source\FilteringFunctions/arm_conv_partial_q7.c ****     count = 0u;
 270:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 271:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* -------------------
 272:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * Stage2 process
 273:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * ------------------*/
 274:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 275:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
 276:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * So, to loop unroll over blockSize2,
 277:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * srcBLen should be greater than or equal to 4 */
 278:Source\FilteringFunctions/arm_conv_partial_q7.c ****     if (srcBLen >= 4u)
 279:Source\FilteringFunctions/arm_conv_partial_q7.c ****     {
 280:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Loop unroll over blockSize2, by 4 */
 281:Source\FilteringFunctions/arm_conv_partial_q7.c ****       blkCnt = ((uint32_t) blockSize2 >> 2u);
 282:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 283:Source\FilteringFunctions/arm_conv_partial_q7.c ****       while (blkCnt > 0u)
 284:Source\FilteringFunctions/arm_conv_partial_q7.c ****       {
 285:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Set all accumulators to zero */
 286:Source\FilteringFunctions/arm_conv_partial_q7.c ****         acc0 = 0;
 287:Source\FilteringFunctions/arm_conv_partial_q7.c ****         acc1 = 0;
 288:Source\FilteringFunctions/arm_conv_partial_q7.c ****         acc2 = 0;
 289:Source\FilteringFunctions/arm_conv_partial_q7.c ****         acc3 = 0;
 290:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 291:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* read x[0], x[1], x[2] samples */
 292:Source\FilteringFunctions/arm_conv_partial_q7.c ****         x0 = *(px++);
 293:Source\FilteringFunctions/arm_conv_partial_q7.c ****         x1 = *(px++);
 294:Source\FilteringFunctions/arm_conv_partial_q7.c ****         x2 = *(px++);
 295:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 296:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 297:Source\FilteringFunctions/arm_conv_partial_q7.c ****         k = srcBLen >> 2u;
 298:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 299:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 300:Source\FilteringFunctions/arm_conv_partial_q7.c ****          ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 301:Source\FilteringFunctions/arm_conv_partial_q7.c ****         do
 302:Source\FilteringFunctions/arm_conv_partial_q7.c ****         {
 303:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Read y[srcBLen - 1] sample */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 7


 304:Source\FilteringFunctions/arm_conv_partial_q7.c ****           c0 = *(py--);
 305:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Read y[srcBLen - 2] sample */
 306:Source\FilteringFunctions/arm_conv_partial_q7.c ****           c1 = *(py--);
 307:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 308:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Read x[3] sample */
 309:Source\FilteringFunctions/arm_conv_partial_q7.c ****           x3 = *(px++);
 310:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 311:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* x[0] and x[1] are packed */
 312:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) x0;
 313:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) x1;
 314:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 315:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 316:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 317:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* y[srcBLen - 1]   and y[srcBLen - 2] are packed */
 318:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) c0;
 319:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) c1;
 320:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 321:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 322:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 323:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* acc0 += x[0] * y[srcBLen - 1] + x[1] * y[srcBLen - 2]  */
 324:Source\FilteringFunctions/arm_conv_partial_q7.c ****           acc0 = __SMLAD(input1, input2, acc0);
 325:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 326:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* x[1] and x[2] are packed */
 327:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) x1;
 328:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) x2;
 329:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 330:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 331:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 332:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* acc1 += x[1] * y[srcBLen - 1] + x[2] * y[srcBLen - 2]  */
 333:Source\FilteringFunctions/arm_conv_partial_q7.c ****           acc1 = __SMLAD(input1, input2, acc1);
 334:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 335:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* x[2] and x[3] are packed */
 336:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) x2;
 337:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) x3;
 338:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 339:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 340:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 341:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* acc2 += x[2] * y[srcBLen - 1] + x[3] * y[srcBLen - 2]  */
 342:Source\FilteringFunctions/arm_conv_partial_q7.c ****           acc2 = __SMLAD(input1, input2, acc2);
 343:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 344:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Read x[4] sample */
 345:Source\FilteringFunctions/arm_conv_partial_q7.c ****           x0 = *(px++);
 346:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 347:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* x[3] and x[4] are packed */
 348:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) x3;
 349:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) x0;
 350:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 351:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 352:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 353:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* acc3 += x[3] * y[srcBLen - 1] + x[4] * y[srcBLen - 2]  */
 354:Source\FilteringFunctions/arm_conv_partial_q7.c ****           acc3 = __SMLAD(input1, input2, acc3);
 355:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 356:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Read y[srcBLen - 3] sample */
 357:Source\FilteringFunctions/arm_conv_partial_q7.c ****           c0 = *(py--);
 358:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Read y[srcBLen - 4] sample */
 359:Source\FilteringFunctions/arm_conv_partial_q7.c ****           c1 = *(py--);
 360:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 8


 361:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Read x[5] sample */
 362:Source\FilteringFunctions/arm_conv_partial_q7.c ****           x1 = *(px++);
 363:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 364:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* x[2] and x[3] are packed */
 365:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) x2;
 366:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) x3;
 367:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 368:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 369:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 370:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* y[srcBLen - 3] and y[srcBLen - 4] are packed */
 371:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) c0;
 372:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) c1;
 373:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 374:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 375:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 376:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* acc0 += x[2] * y[srcBLen - 3] + x[3] * y[srcBLen - 4]  */
 377:Source\FilteringFunctions/arm_conv_partial_q7.c ****           acc0 = __SMLAD(input1, input2, acc0);
 378:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 379:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* x[3] and x[4] are packed */
 380:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) x3;
 381:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) x0;
 382:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 383:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 384:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 385:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* acc1 += x[3] * y[srcBLen - 3] + x[4] * y[srcBLen - 4]  */
 386:Source\FilteringFunctions/arm_conv_partial_q7.c ****           acc1 = __SMLAD(input1, input2, acc1);
 387:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 388:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* x[4] and x[5] are packed */
 389:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) x0;
 390:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) x1;
 391:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 392:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 393:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 394:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* acc2 += x[4] * y[srcBLen - 3] + x[5] * y[srcBLen - 4]  */
 395:Source\FilteringFunctions/arm_conv_partial_q7.c ****           acc2 = __SMLAD(input1, input2, acc2);
 396:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 397:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Read x[6] sample */
 398:Source\FilteringFunctions/arm_conv_partial_q7.c ****           x2 = *(px++);
 399:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 400:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* x[5] and x[6] are packed */
 401:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) x1;
 402:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) x2;
 403:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 404:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 405:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 406:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* acc3 += x[5] * y[srcBLen - 3] + x[6] * y[srcBLen - 4]  */
 407:Source\FilteringFunctions/arm_conv_partial_q7.c ****           acc3 = __SMLAD(input1, input2, acc3);
 408:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 409:Source\FilteringFunctions/arm_conv_partial_q7.c ****         } while (--k);
 410:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 411:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
 412:Source\FilteringFunctions/arm_conv_partial_q7.c ****          ** No loop unrolling is used. */
 413:Source\FilteringFunctions/arm_conv_partial_q7.c ****         k = srcBLen % 0x4u;
 414:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 415:Source\FilteringFunctions/arm_conv_partial_q7.c ****         while (k > 0u)
 416:Source\FilteringFunctions/arm_conv_partial_q7.c ****         {
 417:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Read y[srcBLen - 5] sample */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 9


 418:Source\FilteringFunctions/arm_conv_partial_q7.c ****           c0 = *(py--);
 419:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 420:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Read x[7] sample */
 421:Source\FilteringFunctions/arm_conv_partial_q7.c ****           x3 = *(px++);
 422:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 423:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Perform the multiply-accumulates */
 424:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* acc0 +=  x[4] * y[srcBLen - 5] */
 425:Source\FilteringFunctions/arm_conv_partial_q7.c ****           acc0 += ((q31_t) x0 * c0);
 426:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* acc1 +=  x[5] * y[srcBLen - 5] */
 427:Source\FilteringFunctions/arm_conv_partial_q7.c ****           acc1 += ((q31_t) x1 * c0);
 428:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* acc2 +=  x[6] * y[srcBLen - 5] */
 429:Source\FilteringFunctions/arm_conv_partial_q7.c ****           acc2 += ((q31_t) x2 * c0);
 430:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* acc3 +=  x[7] * y[srcBLen - 5] */
 431:Source\FilteringFunctions/arm_conv_partial_q7.c ****           acc3 += ((q31_t) x3 * c0);
 432:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 433:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Reuse the present samples for the next MAC */
 434:Source\FilteringFunctions/arm_conv_partial_q7.c ****           x0 = x1;
 435:Source\FilteringFunctions/arm_conv_partial_q7.c ****           x1 = x2;
 436:Source\FilteringFunctions/arm_conv_partial_q7.c ****           x2 = x3;
 437:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 438:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Decrement the loop counter */
 439:Source\FilteringFunctions/arm_conv_partial_q7.c ****           k--;
 440:Source\FilteringFunctions/arm_conv_partial_q7.c ****         }
 441:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 442:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Store the result in the accumulator in the destination buffer. */
 443:Source\FilteringFunctions/arm_conv_partial_q7.c ****         *pOut++ = (q7_t) (__SSAT(acc0 >> 7, 8));
 444:Source\FilteringFunctions/arm_conv_partial_q7.c ****         *pOut++ = (q7_t) (__SSAT(acc1 >> 7, 8));
 445:Source\FilteringFunctions/arm_conv_partial_q7.c ****         *pOut++ = (q7_t) (__SSAT(acc2 >> 7, 8));
 446:Source\FilteringFunctions/arm_conv_partial_q7.c ****         *pOut++ = (q7_t) (__SSAT(acc3 >> 7, 8));
 447:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 448:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Increment the pointer pIn1 index, count by 4 */
 449:Source\FilteringFunctions/arm_conv_partial_q7.c ****         count += 4u;
 450:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 451:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 452:Source\FilteringFunctions/arm_conv_partial_q7.c ****         px = pIn1 + count;
 453:Source\FilteringFunctions/arm_conv_partial_q7.c ****         py = pSrc2;
 454:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 455:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 456:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Decrement the loop counter */
 457:Source\FilteringFunctions/arm_conv_partial_q7.c ****         blkCnt--;
 458:Source\FilteringFunctions/arm_conv_partial_q7.c ****       }
 459:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 460:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.
 461:Source\FilteringFunctions/arm_conv_partial_q7.c ****        ** No loop unrolling is used. */
 462:Source\FilteringFunctions/arm_conv_partial_q7.c ****       blkCnt = (uint32_t) blockSize2 % 0x4u;
 463:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 464:Source\FilteringFunctions/arm_conv_partial_q7.c ****       while (blkCnt > 0u)
 465:Source\FilteringFunctions/arm_conv_partial_q7.c ****       {
 466:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Accumulator is made zero for every iteration */
 467:Source\FilteringFunctions/arm_conv_partial_q7.c ****         sum = 0;
 468:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 469:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 470:Source\FilteringFunctions/arm_conv_partial_q7.c ****         k = srcBLen >> 2u;
 471:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 472:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 473:Source\FilteringFunctions/arm_conv_partial_q7.c ****          ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 474:Source\FilteringFunctions/arm_conv_partial_q7.c ****         while (k > 0u)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 10


 475:Source\FilteringFunctions/arm_conv_partial_q7.c ****         {
 476:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 477:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Reading two inputs of SrcA buffer and packing */
 478:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) * px++;
 479:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) * px++;
 480:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 481:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 482:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Reading two inputs of SrcB buffer and packing */
 483:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) * py--;
 484:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) * py--;
 485:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 486:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 487:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Perform the multiply-accumulates */
 488:Source\FilteringFunctions/arm_conv_partial_q7.c ****           sum = __SMLAD(input1, input2, sum);
 489:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 490:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Reading two inputs of SrcA buffer and packing */
 491:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) * px++;
 492:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) * px++;
 493:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 494:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 495:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Reading two inputs of SrcB buffer and packing */
 496:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in1 = (q15_t) * py--;
 497:Source\FilteringFunctions/arm_conv_partial_q7.c ****           in2 = (q15_t) * py--;
 498:Source\FilteringFunctions/arm_conv_partial_q7.c ****           input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 499:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 500:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Perform the multiply-accumulates */
 501:Source\FilteringFunctions/arm_conv_partial_q7.c ****           sum = __SMLAD(input1, input2, sum);
 502:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 503:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Decrement the loop counter */
 504:Source\FilteringFunctions/arm_conv_partial_q7.c ****           k--;
 505:Source\FilteringFunctions/arm_conv_partial_q7.c ****         }
 506:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 507:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
 508:Source\FilteringFunctions/arm_conv_partial_q7.c ****          ** No loop unrolling is used. */
 509:Source\FilteringFunctions/arm_conv_partial_q7.c ****         k = srcBLen % 0x4u;
 510:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 511:Source\FilteringFunctions/arm_conv_partial_q7.c ****         while (k > 0u)
 512:Source\FilteringFunctions/arm_conv_partial_q7.c ****         {
 513:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Perform the multiply-accumulates */
 514:Source\FilteringFunctions/arm_conv_partial_q7.c ****           sum += ((q31_t) * px++ * *py--);
 515:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 516:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Decrement the loop counter */
 517:Source\FilteringFunctions/arm_conv_partial_q7.c ****           k--;
 518:Source\FilteringFunctions/arm_conv_partial_q7.c ****         }
 519:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 520:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Store the result in the accumulator in the destination buffer. */
 521:Source\FilteringFunctions/arm_conv_partial_q7.c ****         *pOut++ = (q7_t) (__SSAT(sum >> 7, 8));
 522:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 523:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Increment the pointer pIn1 index, count by 1 */
 524:Source\FilteringFunctions/arm_conv_partial_q7.c ****  	    count++;
 525:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 526:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 527:Source\FilteringFunctions/arm_conv_partial_q7.c ****       	px = pIn1 + count;
 528:Source\FilteringFunctions/arm_conv_partial_q7.c ****         py = pSrc2;
 529:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 530:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Decrement the loop counter */
 531:Source\FilteringFunctions/arm_conv_partial_q7.c ****         blkCnt--;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 11


 532:Source\FilteringFunctions/arm_conv_partial_q7.c ****       }
 533:Source\FilteringFunctions/arm_conv_partial_q7.c ****     }
 534:Source\FilteringFunctions/arm_conv_partial_q7.c ****     else
 535:Source\FilteringFunctions/arm_conv_partial_q7.c ****     {
 536:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* If the srcBLen is not a multiple of 4,
 537:Source\FilteringFunctions/arm_conv_partial_q7.c ****        * the blockSize2 loop cannot be unrolled by 4 */
 538:Source\FilteringFunctions/arm_conv_partial_q7.c ****       blkCnt = (uint32_t) blockSize2;
 539:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 540:Source\FilteringFunctions/arm_conv_partial_q7.c ****       while (blkCnt > 0u)
 541:Source\FilteringFunctions/arm_conv_partial_q7.c ****       {
 542:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Accumulator is made zero for every iteration */
 543:Source\FilteringFunctions/arm_conv_partial_q7.c ****         sum = 0;
 544:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 545:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* srcBLen number of MACS should be performed */
 546:Source\FilteringFunctions/arm_conv_partial_q7.c ****         k = srcBLen;
 547:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 548:Source\FilteringFunctions/arm_conv_partial_q7.c ****         while (k > 0u)
 549:Source\FilteringFunctions/arm_conv_partial_q7.c ****         {
 550:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Perform the multiply-accumulate */
 551:Source\FilteringFunctions/arm_conv_partial_q7.c ****           sum += ((q31_t) * px++ * *py--);
 552:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 553:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* Decrement the loop counter */
 554:Source\FilteringFunctions/arm_conv_partial_q7.c ****           k--;
 555:Source\FilteringFunctions/arm_conv_partial_q7.c ****         }
 556:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 557:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Store the result in the accumulator in the destination buffer. */
 558:Source\FilteringFunctions/arm_conv_partial_q7.c ****         *pOut++ = (q7_t) (__SSAT(sum >> 7, 8));
 559:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 560:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Increment the MAC count */
 561:Source\FilteringFunctions/arm_conv_partial_q7.c ****         count++;
 562:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 563:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 564:Source\FilteringFunctions/arm_conv_partial_q7.c ****         px = pIn1 + count;
 565:Source\FilteringFunctions/arm_conv_partial_q7.c ****         py = pSrc2;
 566:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 567:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Decrement the loop counter */
 568:Source\FilteringFunctions/arm_conv_partial_q7.c ****         blkCnt--;
 569:Source\FilteringFunctions/arm_conv_partial_q7.c ****       }
 570:Source\FilteringFunctions/arm_conv_partial_q7.c ****     }
 571:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 572:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 573:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* --------------------------
 574:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * Initializations of stage3
 575:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * -------------------------*/
 576:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 577:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[src
 578:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[src
 579:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * ....
 580:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]
 581:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * sum +=  x[srcALen-1] * y[srcBLen-1]
 582:Source\FilteringFunctions/arm_conv_partial_q7.c ****      */
 583:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 584:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* In this stage the MAC operations are decreased by 1 for every iteration.
 585:Source\FilteringFunctions/arm_conv_partial_q7.c ****        The count variable holds the number of MAC operations performed */
 586:Source\FilteringFunctions/arm_conv_partial_q7.c ****     count = srcBLen - 1u;
 587:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 588:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* Working pointer of inputA */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 12


 589:Source\FilteringFunctions/arm_conv_partial_q7.c ****     pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
 590:Source\FilteringFunctions/arm_conv_partial_q7.c ****     px = pSrc1;
 591:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 592:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* Working pointer of inputB */
 593:Source\FilteringFunctions/arm_conv_partial_q7.c ****     pSrc2 = pIn2 + (srcBLen - 1u);
 594:Source\FilteringFunctions/arm_conv_partial_q7.c ****     py = pSrc2;
 595:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 596:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* -------------------
 597:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * Stage3 process
 598:Source\FilteringFunctions/arm_conv_partial_q7.c ****      * ------------------*/
 599:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 600:Source\FilteringFunctions/arm_conv_partial_q7.c ****     while (blockSize3 > 0)
 601:Source\FilteringFunctions/arm_conv_partial_q7.c ****     {
 602:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Accumulator is made zero for every iteration */
 603:Source\FilteringFunctions/arm_conv_partial_q7.c ****       sum = 0;
 604:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 605:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 606:Source\FilteringFunctions/arm_conv_partial_q7.c ****       k = count >> 2u;
 607:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 608:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 609:Source\FilteringFunctions/arm_conv_partial_q7.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 610:Source\FilteringFunctions/arm_conv_partial_q7.c ****       while (k > 0u)
 611:Source\FilteringFunctions/arm_conv_partial_q7.c ****       {
 612:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Reading two inputs, x[srcALen - srcBLen + 1] and x[srcALen - srcBLen + 2] of SrcA buffer
 613:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in1 = (q15_t) * px++;
 614:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in2 = (q15_t) * px++;
 615:Source\FilteringFunctions/arm_conv_partial_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 616:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 617:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Reading two inputs, y[srcBLen - 1] and y[srcBLen - 2] of SrcB buffer and packing */
 618:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in1 = (q15_t) * py--;
 619:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in2 = (q15_t) * py--;
 620:Source\FilteringFunctions/arm_conv_partial_q7.c ****         input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 621:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 622:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* sum += x[srcALen - srcBLen + 1] * y[srcBLen - 1] */
 623:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* sum += x[srcALen - srcBLen + 2] * y[srcBLen - 2] */
 624:Source\FilteringFunctions/arm_conv_partial_q7.c ****         sum = __SMLAD(input1, input2, sum);
 625:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 626:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Reading two inputs, x[srcALen - srcBLen + 3] and x[srcALen - srcBLen + 4] of SrcA buffer
 627:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in1 = (q15_t) * px++;
 628:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in2 = (q15_t) * px++;
 629:Source\FilteringFunctions/arm_conv_partial_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 630:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 631:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Reading two inputs, y[srcBLen - 3] and y[srcBLen - 4] of SrcB buffer and packing */
 632:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in1 = (q15_t) * py--;
 633:Source\FilteringFunctions/arm_conv_partial_q7.c ****         in2 = (q15_t) * py--;
 634:Source\FilteringFunctions/arm_conv_partial_q7.c ****         input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 635:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 636:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* sum += x[srcALen - srcBLen + 3] * y[srcBLen - 3] */
 637:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* sum += x[srcALen - srcBLen + 4] * y[srcBLen - 4] */
 638:Source\FilteringFunctions/arm_conv_partial_q7.c ****         sum = __SMLAD(input1, input2, sum);
 639:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 640:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Decrement the loop counter */
 641:Source\FilteringFunctions/arm_conv_partial_q7.c ****         k--;
 642:Source\FilteringFunctions/arm_conv_partial_q7.c ****       }
 643:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 644:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* If the count is not a multiple of 4, compute any remaining MACs here.
 645:Source\FilteringFunctions/arm_conv_partial_q7.c ****        ** No loop unrolling is used. */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 13


 646:Source\FilteringFunctions/arm_conv_partial_q7.c ****       k = count % 0x4u;
 647:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 648:Source\FilteringFunctions/arm_conv_partial_q7.c ****       while (k > 0u)
 649:Source\FilteringFunctions/arm_conv_partial_q7.c ****       {
 650:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Perform the multiply-accumulates */
 651:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* sum +=  x[srcALen-1] * y[srcBLen-1] */
 652:Source\FilteringFunctions/arm_conv_partial_q7.c ****         sum += ((q31_t) * px++ * *py--);
 653:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 654:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Decrement the loop counter */
 655:Source\FilteringFunctions/arm_conv_partial_q7.c ****         k--;
 656:Source\FilteringFunctions/arm_conv_partial_q7.c ****       }
 657:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 658:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Store the result in the accumulator in the destination buffer. */
 659:Source\FilteringFunctions/arm_conv_partial_q7.c ****       *pOut++ = (q7_t) (__SSAT(sum >> 7, 8));
 660:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 661:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 662:Source\FilteringFunctions/arm_conv_partial_q7.c ****       px = ++pSrc1;
 663:Source\FilteringFunctions/arm_conv_partial_q7.c ****       py = pSrc2;
 664:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 665:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Decrement the MAC count */
 666:Source\FilteringFunctions/arm_conv_partial_q7.c ****       count--;
 667:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 668:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Decrement the loop counter */
 669:Source\FilteringFunctions/arm_conv_partial_q7.c ****       blockSize3--;
 670:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 671:Source\FilteringFunctions/arm_conv_partial_q7.c ****     }
 672:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 673:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* set status as ARM_MATH_SUCCESS */
 674:Source\FilteringFunctions/arm_conv_partial_q7.c ****     status = ARM_MATH_SUCCESS;
 675:Source\FilteringFunctions/arm_conv_partial_q7.c ****   }
 676:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 677:Source\FilteringFunctions/arm_conv_partial_q7.c ****   /* Return to application */
 678:Source\FilteringFunctions/arm_conv_partial_q7.c ****   return (status);
 679:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 680:Source\FilteringFunctions/arm_conv_partial_q7.c **** #else
 681:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 682:Source\FilteringFunctions/arm_conv_partial_q7.c ****   /* Run the below code for Cortex-M0 */
 683:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 684:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q7_t *pIn1 = pSrcA;                            /* inputA pointer */
  40              		.loc 1 684 0
  41 000e FB68     		ldr	r3, [r7, #12]
  42 0010 FB62     		str	r3, [r7, #44]
 685:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q7_t *pIn2 = pSrcB;                            /* inputB pointer */
  43              		.loc 1 685 0
  44 0012 7B68     		ldr	r3, [r7, #4]
  45 0014 BB62     		str	r3, [r7, #40]
 686:Source\FilteringFunctions/arm_conv_partial_q7.c ****   q31_t sum;                                     /* Accumulator */
 687:Source\FilteringFunctions/arm_conv_partial_q7.c ****   uint32_t i, j;                                 /* loop counters */
 688:Source\FilteringFunctions/arm_conv_partial_q7.c ****   arm_status status;                             /* status of Partial convolution */
 689:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 690:Source\FilteringFunctions/arm_conv_partial_q7.c ****   /* Check for range of output samples to be calculated */
 691:Source\FilteringFunctions/arm_conv_partial_q7.c ****   if ((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
  46              		.loc 1 691 0
  47 0016 FA6C     		ldr	r2, [r7, #76]
  48 0018 3B6D     		ldr	r3, [r7, #80]
  49 001a D218     		add	r2, r2, r3
  50 001c 3968     		ldr	r1, [r7]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 14


  51 001e BB68     		ldr	r3, [r7, #8]
  52 0020 CB18     		add	r3, r1, r3
  53 0022 013B     		sub	r3, r3, #1
  54 0024 9A42     		cmp	r2, r3
  55 0026 04D9     		bls	.L2
 692:Source\FilteringFunctions/arm_conv_partial_q7.c ****   {
 693:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* Set status as ARM_ARGUMENT_ERROR */
 694:Source\FilteringFunctions/arm_conv_partial_q7.c ****     status = ARM_MATH_ARGUMENT_ERROR;
  56              		.loc 1 694 0
  57 0028 3323     		mov	r3, #51
  58 002a FB18     		add	r3, r7, r3
  59 002c FF22     		mov	r2, #255
  60 002e 1A70     		strb	r2, [r3]
  61 0030 69E0     		b	.L3
  62              	.L2:
 695:Source\FilteringFunctions/arm_conv_partial_q7.c ****   }
 696:Source\FilteringFunctions/arm_conv_partial_q7.c ****   else
 697:Source\FilteringFunctions/arm_conv_partial_q7.c ****   {
 698:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* Loop to calculate convolution for output length number of values */
 699:Source\FilteringFunctions/arm_conv_partial_q7.c ****     for (i = firstIndex; i <= (firstIndex + numPoints - 1); i++)
  63              		.loc 1 699 0
  64 0032 FB6C     		ldr	r3, [r7, #76]
  65 0034 BB63     		str	r3, [r7, #56]
  66 0036 5BE0     		b	.L4
  67              	.L14:
 700:Source\FilteringFunctions/arm_conv_partial_q7.c ****     {
 701:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Initialize sum with zero to carry on MAC operations */
 702:Source\FilteringFunctions/arm_conv_partial_q7.c ****       sum = 0;
  68              		.loc 1 702 0
  69 0038 0023     		mov	r3, #0
  70 003a FB63     		str	r3, [r7, #60]
 703:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 704:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Loop to perform MAC operations according to convolution equation */
 705:Source\FilteringFunctions/arm_conv_partial_q7.c ****       for (j = 0; j <= i; j++)
  71              		.loc 1 705 0
  72 003c 0023     		mov	r3, #0
  73 003e 7B63     		str	r3, [r7, #52]
  74 0040 1CE0     		b	.L5
  75              	.L7:
 706:Source\FilteringFunctions/arm_conv_partial_q7.c ****       {
 707:Source\FilteringFunctions/arm_conv_partial_q7.c ****         /* Check the array limitations */
 708:Source\FilteringFunctions/arm_conv_partial_q7.c ****         if (((i - j) < srcBLen) && (j < srcALen))
  76              		.loc 1 708 0
  77 0042 BA6B     		ldr	r2, [r7, #56]
  78 0044 7B6B     		ldr	r3, [r7, #52]
  79 0046 D21A     		sub	r2, r2, r3
  80 0048 3B68     		ldr	r3, [r7]
  81 004a 9A42     		cmp	r2, r3
  82 004c 13D2     		bcs	.L6
  83              		.loc 1 708 0 is_stmt 0 discriminator 1
  84 004e 7A6B     		ldr	r2, [r7, #52]
  85 0050 BB68     		ldr	r3, [r7, #8]
  86 0052 9A42     		cmp	r2, r3
  87 0054 0FD2     		bcs	.L6
 709:Source\FilteringFunctions/arm_conv_partial_q7.c ****         {
 710:Source\FilteringFunctions/arm_conv_partial_q7.c ****           /* z[i] += x[i-j] * y[j] */
 711:Source\FilteringFunctions/arm_conv_partial_q7.c ****           sum += ((q15_t) pIn1[j] * (pIn2[i - j]));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 15


  88              		.loc 1 711 0 is_stmt 1
  89 0056 FA6A     		ldr	r2, [r7, #44]
  90 0058 7B6B     		ldr	r3, [r7, #52]
  91 005a D318     		add	r3, r2, r3
  92 005c 1B78     		ldrb	r3, [r3]
  93 005e 5BB2     		sxtb	r3, r3
  94 0060 B96B     		ldr	r1, [r7, #56]
  95 0062 7A6B     		ldr	r2, [r7, #52]
  96 0064 8A1A     		sub	r2, r1, r2
  97 0066 B96A     		ldr	r1, [r7, #40]
  98 0068 8A18     		add	r2, r1, r2
  99 006a 1278     		ldrb	r2, [r2]
 100 006c 52B2     		sxtb	r2, r2
 101 006e 5343     		mul	r3, r2
 102 0070 FA6B     		ldr	r2, [r7, #60]
 103 0072 D318     		add	r3, r2, r3
 104 0074 FB63     		str	r3, [r7, #60]
 105              	.L6:
 705:Source\FilteringFunctions/arm_conv_partial_q7.c ****       {
 106              		.loc 1 705 0 discriminator 2
 107 0076 7B6B     		ldr	r3, [r7, #52]
 108 0078 0133     		add	r3, r3, #1
 109 007a 7B63     		str	r3, [r7, #52]
 110              	.L5:
 705:Source\FilteringFunctions/arm_conv_partial_q7.c ****       {
 111              		.loc 1 705 0 is_stmt 0 discriminator 1
 112 007c 7A6B     		ldr	r2, [r7, #52]
 113 007e BB6B     		ldr	r3, [r7, #56]
 114 0080 9A42     		cmp	r2, r3
 115 0082 DED9     		bls	.L7
 712:Source\FilteringFunctions/arm_conv_partial_q7.c ****         }
 713:Source\FilteringFunctions/arm_conv_partial_q7.c ****       }
 714:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 715:Source\FilteringFunctions/arm_conv_partial_q7.c ****       /* Store the output in the destination buffer */
 716:Source\FilteringFunctions/arm_conv_partial_q7.c ****       pDst[i] = (q7_t) __SSAT((sum >> 7u), 8u);
 116              		.loc 1 716 0 is_stmt 1 discriminator 2
 117 0084 BA6C     		ldr	r2, [r7, #72]
 118 0086 BB6B     		ldr	r3, [r7, #56]
 119 0088 D318     		add	r3, r2, r3
 120 008a FA6B     		ldr	r2, [r7, #60]
 121 008c D211     		asr	r2, r2, #7
 122 008e 7A62     		str	r2, [r7, #36]
 123 0090 0822     		mov	r2, #8
 124 0092 3A62     		str	r2, [r7, #32]
 125              	.LBB4:
 126              	.LBB5:
 127              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 16


  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 17


  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 18


 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 19


 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 20


 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 21


 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 22


 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 23


 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 24


 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 25


 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 26


 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 27


 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 28


 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
 128              		.loc 2 699 0 discriminator 2
 129 0094 0122     		mov	r2, #1
 130 0096 FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 131              		.loc 2 700 0 discriminator 2
 132 0098 0022     		mov	r2, #0
 133 009a BA61     		str	r2, [r7, #24]
 134 009c 05E0     		b	.L8
 135              	.L9:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 136              		.loc 2 702 0
 137 009e FA69     		ldr	r2, [r7, #28]
 138 00a0 5200     		lsl	r2, r2, #1
 139 00a2 FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 140              		.loc 2 700 0
 141 00a4 BA69     		ldr	r2, [r7, #24]
 142 00a6 0132     		add	r2, r2, #1
 143 00a8 BA61     		str	r2, [r7, #24]
 144              	.L8:
 145 00aa 3A6A     		ldr	r2, [r7, #32]
 146 00ac 013A     		sub	r2, r2, #1
 147 00ae B969     		ldr	r1, [r7, #24]
 148 00b0 9142     		cmp	r1, r2
 149 00b2 F4D3     		bcc	.L9
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 150              		.loc 2 705 0
 151 00b4 7A6A     		ldr	r2, [r7, #36]
 152 00b6 002A     		cmp	r2, #0
 153 00b8 09DD     		ble	.L10
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 154              		.loc 2 707 0
 155 00ba FA69     		ldr	r2, [r7, #28]
 156 00bc 013A     		sub	r2, r2, #1
 157 00be FA61     		str	r2, [r7, #28]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 158              		.loc 2 709 0
 159 00c0 796A     		ldr	r1, [r7, #36]
 160 00c2 FA69     		ldr	r2, [r7, #28]
 161 00c4 9142     		cmp	r1, r2
 162 00c6 0CDD     		ble	.L16
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 163              		.loc 2 711 0
 164 00c8 FA69     		ldr	r2, [r7, #28]
 165 00ca 7A62     		str	r2, [r7, #36]
 166 00cc 0AE0     		b	.L12
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 29


 167              	.L10:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 168              		.loc 2 716 0
 169 00ce FA69     		ldr	r2, [r7, #28]
 170 00d0 5242     		neg	r2, r2
 171 00d2 7A61     		str	r2, [r7, #20]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 172              		.loc 2 718 0
 173 00d4 796A     		ldr	r1, [r7, #36]
 174 00d6 7A69     		ldr	r2, [r7, #20]
 175 00d8 9142     		cmp	r1, r2
 176 00da 03DA     		bge	.L12
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 177              		.loc 2 720 0
 178 00dc 7A69     		ldr	r2, [r7, #20]
 179 00de 7A62     		str	r2, [r7, #36]
 180 00e0 00E0     		b	.L12
 181              	.L16:
 711:.\Include/arm_math.h ****       }
 182              		.loc 2 711 0
 183 00e2 C046     		mov	r8, r8
 184              	.L12:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 185              		.loc 2 723 0
 186 00e4 7A6A     		ldr	r2, [r7, #36]
 187              	.LBE5:
 188              	.LBE4:
 189              		.loc 1 716 0
 190 00e6 D2B2     		uxtb	r2, r2
 191 00e8 1A70     		strb	r2, [r3]
 699:Source\FilteringFunctions/arm_conv_partial_q7.c ****     {
 192              		.loc 1 699 0
 193 00ea BB6B     		ldr	r3, [r7, #56]
 194 00ec 0133     		add	r3, r3, #1
 195 00ee BB63     		str	r3, [r7, #56]
 196              	.L4:
 699:Source\FilteringFunctions/arm_conv_partial_q7.c ****     {
 197              		.loc 1 699 0 is_stmt 0 discriminator 1
 198 00f0 FA6C     		ldr	r2, [r7, #76]
 199 00f2 3B6D     		ldr	r3, [r7, #80]
 200 00f4 D318     		add	r3, r2, r3
 201 00f6 5A1E     		sub	r2, r3, #1
 202 00f8 BB6B     		ldr	r3, [r7, #56]
 203 00fa 9A42     		cmp	r2, r3
 204 00fc 9CD2     		bcs	.L14
 717:Source\FilteringFunctions/arm_conv_partial_q7.c ****     }
 718:Source\FilteringFunctions/arm_conv_partial_q7.c ****     /* set status as ARM_SUCCESS as there are no argument errors */
 719:Source\FilteringFunctions/arm_conv_partial_q7.c ****     status = ARM_MATH_SUCCESS;
 205              		.loc 1 719 0 is_stmt 1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 30


 206 00fe 3323     		mov	r3, #51
 207 0100 FB18     		add	r3, r7, r3
 208 0102 0022     		mov	r2, #0
 209 0104 1A70     		strb	r2, [r3]
 210              	.L3:
 720:Source\FilteringFunctions/arm_conv_partial_q7.c ****   }
 721:Source\FilteringFunctions/arm_conv_partial_q7.c ****   return (status);
 211              		.loc 1 721 0
 212 0106 3323     		mov	r3, #51
 213 0108 FB18     		add	r3, r7, r3
 214 010a 1B78     		ldrb	r3, [r3]
 215 010c 5BB2     		sxtb	r3, r3
 722:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 723:Source\FilteringFunctions/arm_conv_partial_q7.c **** #endif /*  #if defined (ARM_MATH_DSP) */
 724:Source\FilteringFunctions/arm_conv_partial_q7.c **** 
 725:Source\FilteringFunctions/arm_conv_partial_q7.c **** }
 216              		.loc 1 725 0
 217 010e 181C     		mov	r0, r3
 218 0110 BD46     		mov	sp, r7
 219 0112 10B0     		add	sp, sp, #64
 220              		@ sp needed
 221 0114 80BD     		pop	{r7, pc}
 222              		.cfi_endproc
 223              	.LFE82:
 224              		.size	arm_conv_partial_q7, .-arm_conv_partial_q7
 225 0116 C046     		.text
 226              	.Letext0:
 227              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 228              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 229              		.section	.debug_info,"",%progbits
 230              	.Ldebug_info0:
 231 0000 A8020000 		.4byte	0x2a8
 232 0004 0400     		.2byte	0x4
 233 0006 00000000 		.4byte	.Ldebug_abbrev0
 234 000a 04       		.byte	0x4
 235 000b 01       		.uleb128 0x1
 236 000c 6F010000 		.4byte	.LASF45
 237 0010 01       		.byte	0x1
 238 0011 86020000 		.4byte	.LASF46
 239 0015 3F000000 		.4byte	.LASF47
 240 0019 00000000 		.4byte	.Ldebug_ranges0+0
 241 001d 00000000 		.4byte	0
 242 0021 00000000 		.4byte	.Ldebug_line0
 243 0025 02       		.uleb128 0x2
 244 0026 00000000 		.4byte	.LASF2
 245 002a 03       		.byte	0x3
 246 002b 1B       		.byte	0x1b
 247 002c 30000000 		.4byte	0x30
 248 0030 03       		.uleb128 0x3
 249 0031 01       		.byte	0x1
 250 0032 06       		.byte	0x6
 251 0033 E5020000 		.4byte	.LASF0
 252 0037 03       		.uleb128 0x3
 253 0038 01       		.byte	0x1
 254 0039 08       		.byte	0x8
 255 003a BC000000 		.4byte	.LASF1
 256 003e 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 31


 257 003f 1F000000 		.4byte	.LASF3
 258 0043 03       		.byte	0x3
 259 0044 29       		.byte	0x29
 260 0045 49000000 		.4byte	0x49
 261 0049 03       		.uleb128 0x3
 262 004a 02       		.byte	0x2
 263 004b 05       		.byte	0x5
 264 004c 7C020000 		.4byte	.LASF4
 265 0050 03       		.uleb128 0x3
 266 0051 02       		.byte	0x2
 267 0052 07       		.byte	0x7
 268 0053 FD000000 		.4byte	.LASF5
 269 0057 02       		.uleb128 0x2
 270 0058 35000000 		.4byte	.LASF6
 271 005c 03       		.byte	0x3
 272 005d 3F       		.byte	0x3f
 273 005e 62000000 		.4byte	0x62
 274 0062 03       		.uleb128 0x3
 275 0063 04       		.byte	0x4
 276 0064 05       		.byte	0x5
 277 0065 C6020000 		.4byte	.LASF7
 278 0069 02       		.uleb128 0x2
 279 006a 23010000 		.4byte	.LASF8
 280 006e 03       		.byte	0x3
 281 006f 41       		.byte	0x41
 282 0070 74000000 		.4byte	0x74
 283 0074 03       		.uleb128 0x3
 284 0075 04       		.byte	0x4
 285 0076 07       		.byte	0x7
 286 0077 EB000000 		.4byte	.LASF9
 287 007b 03       		.uleb128 0x3
 288 007c 08       		.byte	0x8
 289 007d 05       		.byte	0x5
 290 007e 45020000 		.4byte	.LASF10
 291 0082 03       		.uleb128 0x3
 292 0083 08       		.byte	0x8
 293 0084 07       		.byte	0x7
 294 0085 58010000 		.4byte	.LASF11
 295 0089 04       		.uleb128 0x4
 296 008a 04       		.byte	0x4
 297 008b 05       		.byte	0x5
 298 008c 696E7400 		.ascii	"int\000"
 299 0090 03       		.uleb128 0x3
 300 0091 04       		.byte	0x4
 301 0092 07       		.byte	0x7
 302 0093 4B010000 		.4byte	.LASF12
 303 0097 02       		.uleb128 0x2
 304 0098 AF000000 		.4byte	.LASF13
 305 009c 04       		.byte	0x4
 306 009d 14       		.byte	0x14
 307 009e 25000000 		.4byte	0x25
 308 00a2 02       		.uleb128 0x2
 309 00a3 25020000 		.4byte	.LASF14
 310 00a7 04       		.byte	0x4
 311 00a8 20       		.byte	0x20
 312 00a9 3E000000 		.4byte	0x3e
 313 00ad 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 32


 314 00ae 34020000 		.4byte	.LASF15
 315 00b2 04       		.byte	0x4
 316 00b3 2C       		.byte	0x2c
 317 00b4 57000000 		.4byte	0x57
 318 00b8 02       		.uleb128 0x2
 319 00b9 BD020000 		.4byte	.LASF16
 320 00bd 04       		.byte	0x4
 321 00be 2D       		.byte	0x2d
 322 00bf 69000000 		.4byte	0x69
 323 00c3 03       		.uleb128 0x3
 324 00c4 04       		.byte	0x4
 325 00c5 07       		.byte	0x7
 326 00c6 3C020000 		.4byte	.LASF17
 327 00ca 03       		.uleb128 0x3
 328 00cb 01       		.byte	0x1
 329 00cc 08       		.byte	0x8
 330 00cd 5E020000 		.4byte	.LASF18
 331 00d1 03       		.uleb128 0x3
 332 00d2 08       		.byte	0x8
 333 00d3 04       		.byte	0x4
 334 00d4 1C010000 		.4byte	.LASF19
 335 00d8 03       		.uleb128 0x3
 336 00d9 04       		.byte	0x4
 337 00da 04       		.byte	0x4
 338 00db A9000000 		.4byte	.LASF20
 339 00df 03       		.uleb128 0x3
 340 00e0 08       		.byte	0x8
 341 00e1 04       		.byte	0x4
 342 00e2 CF020000 		.4byte	.LASF21
 343 00e6 05       		.uleb128 0x5
 344 00e7 01       		.byte	0x1
 345 00e8 02       		.byte	0x2
 346 00e9 8401     		.2byte	0x184
 347 00eb 1A010000 		.4byte	0x11a
 348 00ef 06       		.uleb128 0x6
 349 00f0 6B020000 		.4byte	.LASF22
 350 00f4 00       		.sleb128 0
 351 00f5 06       		.uleb128 0x6
 352 00f6 2E010000 		.4byte	.LASF23
 353 00fa 7F       		.sleb128 -1
 354 00fb 06       		.uleb128 0x6
 355 00fc 09000000 		.4byte	.LASF24
 356 0100 7E       		.sleb128 -2
 357 0101 06       		.uleb128 0x6
 358 0102 8C000000 		.4byte	.LASF25
 359 0106 7D       		.sleb128 -3
 360 0107 06       		.uleb128 0x6
 361 0108 01020000 		.4byte	.LASF26
 362 010c 7C       		.sleb128 -4
 363 010d 06       		.uleb128 0x6
 364 010e 03030000 		.4byte	.LASF27
 365 0112 7B       		.sleb128 -5
 366 0113 06       		.uleb128 0x6
 367 0114 D5000000 		.4byte	.LASF28
 368 0118 7A       		.sleb128 -6
 369 0119 00       		.byte	0
 370 011a 07       		.uleb128 0x7
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 33


 371 011b 53020000 		.4byte	.LASF29
 372 011f 02       		.byte	0x2
 373 0120 8C01     		.2byte	0x18c
 374 0122 E6000000 		.4byte	0xe6
 375 0126 07       		.uleb128 0x7
 376 0127 46010000 		.4byte	.LASF30
 377 012b 02       		.byte	0x2
 378 012c 9101     		.2byte	0x191
 379 012e 97000000 		.4byte	0x97
 380 0132 07       		.uleb128 0x7
 381 0133 A3000000 		.4byte	.LASF31
 382 0137 02       		.byte	0x2
 383 0138 9601     		.2byte	0x196
 384 013a A2000000 		.4byte	0xa2
 385 013e 07       		.uleb128 0x7
 386 013f B6000000 		.4byte	.LASF32
 387 0143 02       		.byte	0x2
 388 0144 9B01     		.2byte	0x19b
 389 0146 AD000000 		.4byte	0xad
 390 014a 08       		.uleb128 0x8
 391 014b 04       		.byte	0x4
 392 014c 26010000 		.4byte	0x126
 393 0150 09       		.uleb128 0x9
 394 0151 2D020000 		.4byte	.LASF48
 395 0155 02       		.byte	0x2
 396 0156 B402     		.2byte	0x2b4
 397 0158 3E010000 		.4byte	0x13e
 398 015c 03       		.byte	0x3
 399 015d 98010000 		.4byte	0x198
 400 0161 0A       		.uleb128 0xa
 401 0162 7800     		.ascii	"x\000"
 402 0164 02       		.byte	0x2
 403 0165 B502     		.2byte	0x2b5
 404 0167 3E010000 		.4byte	0x13e
 405 016b 0A       		.uleb128 0xa
 406 016c 7900     		.ascii	"y\000"
 407 016e 02       		.byte	0x2
 408 016f B602     		.2byte	0x2b6
 409 0171 B8000000 		.4byte	0xb8
 410 0175 0B       		.uleb128 0xb
 411 0176 B6020000 		.4byte	.LASF33
 412 017a 02       		.byte	0x2
 413 017b B802     		.2byte	0x2b8
 414 017d AD000000 		.4byte	0xad
 415 0181 0B       		.uleb128 0xb
 416 0182 15010000 		.4byte	.LASF34
 417 0186 02       		.byte	0x2
 418 0187 B802     		.2byte	0x2b8
 419 0189 AD000000 		.4byte	0xad
 420 018d 0C       		.uleb128 0xc
 421 018e 6900     		.ascii	"i\000"
 422 0190 02       		.byte	0x2
 423 0191 B902     		.2byte	0x2b9
 424 0193 B8000000 		.4byte	0xb8
 425 0197 00       		.byte	0
 426 0198 0D       		.uleb128 0xd
 427 0199 11020000 		.4byte	.LASF49
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 34


 428 019d 01       		.byte	0x1
 429 019e 38       		.byte	0x38
 430 019f 1A010000 		.4byte	0x11a
 431 01a3 00000000 		.4byte	.LFB82
 432 01a7 16010000 		.4byte	.LFE82-.LFB82
 433 01ab 01       		.uleb128 0x1
 434 01ac 9C       		.byte	0x9c
 435 01ad 0E       		.uleb128 0xe
 436 01ae 29000000 		.4byte	.LASF35
 437 01b2 01       		.byte	0x1
 438 01b3 39       		.byte	0x39
 439 01b4 4A010000 		.4byte	0x14a
 440 01b8 02       		.uleb128 0x2
 441 01b9 91       		.byte	0x91
 442 01ba 44       		.sleb128 -60
 443 01bb 0E       		.uleb128 0xe
 444 01bc 63020000 		.4byte	.LASF36
 445 01c0 01       		.byte	0x1
 446 01c1 3A       		.byte	0x3a
 447 01c2 B8000000 		.4byte	0xb8
 448 01c6 02       		.uleb128 0x2
 449 01c7 91       		.byte	0x91
 450 01c8 40       		.sleb128 -64
 451 01c9 0E       		.uleb128 0xe
 452 01ca 2F000000 		.4byte	.LASF37
 453 01ce 01       		.byte	0x1
 454 01cf 3B       		.byte	0x3b
 455 01d0 4A010000 		.4byte	0x14a
 456 01d4 03       		.uleb128 0x3
 457 01d5 91       		.byte	0x91
 458 01d6 BC7F     		.sleb128 -68
 459 01d8 0E       		.uleb128 0xe
 460 01d9 F1020000 		.4byte	.LASF38
 461 01dd 01       		.byte	0x1
 462 01de 3C       		.byte	0x3c
 463 01df B8000000 		.4byte	0xb8
 464 01e3 03       		.uleb128 0x3
 465 01e4 91       		.byte	0x91
 466 01e5 B87F     		.sleb128 -72
 467 01e7 0E       		.uleb128 0xe
 468 01e8 10010000 		.4byte	.LASF39
 469 01ec 01       		.byte	0x1
 470 01ed 3D       		.byte	0x3d
 471 01ee 4A010000 		.4byte	0x14a
 472 01f2 02       		.uleb128 0x2
 473 01f3 91       		.byte	0x91
 474 01f4 00       		.sleb128 0
 475 01f5 0E       		.uleb128 0xe
 476 01f6 CA000000 		.4byte	.LASF40
 477 01fa 01       		.byte	0x1
 478 01fb 3E       		.byte	0x3e
 479 01fc B8000000 		.4byte	0xb8
 480 0200 02       		.uleb128 0x2
 481 0201 91       		.byte	0x91
 482 0202 04       		.sleb128 4
 483 0203 0E       		.uleb128 0xe
 484 0204 DB020000 		.4byte	.LASF41
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 35


 485 0208 01       		.byte	0x1
 486 0209 3F       		.byte	0x3f
 487 020a B8000000 		.4byte	0xb8
 488 020e 02       		.uleb128 0x2
 489 020f 91       		.byte	0x91
 490 0210 08       		.sleb128 8
 491 0211 0F       		.uleb128 0xf
 492 0212 F9020000 		.4byte	.LASF42
 493 0216 01       		.byte	0x1
 494 0217 AC02     		.2byte	0x2ac
 495 0219 4A010000 		.4byte	0x14a
 496 021d 02       		.uleb128 0x2
 497 021e 91       		.byte	0x91
 498 021f 64       		.sleb128 -28
 499 0220 0F       		.uleb128 0xf
 500 0221 FE020000 		.4byte	.LASF43
 501 0225 01       		.byte	0x1
 502 0226 AD02     		.2byte	0x2ad
 503 0228 4A010000 		.4byte	0x14a
 504 022c 02       		.uleb128 0x2
 505 022d 91       		.byte	0x91
 506 022e 60       		.sleb128 -32
 507 022f 10       		.uleb128 0x10
 508 0230 73756D00 		.ascii	"sum\000"
 509 0234 01       		.byte	0x1
 510 0235 AE02     		.2byte	0x2ae
 511 0237 3E010000 		.4byte	0x13e
 512 023b 02       		.uleb128 0x2
 513 023c 91       		.byte	0x91
 514 023d 74       		.sleb128 -12
 515 023e 10       		.uleb128 0x10
 516 023f 6900     		.ascii	"i\000"
 517 0241 01       		.byte	0x1
 518 0242 AF02     		.2byte	0x2af
 519 0244 B8000000 		.4byte	0xb8
 520 0248 02       		.uleb128 0x2
 521 0249 91       		.byte	0x91
 522 024a 70       		.sleb128 -16
 523 024b 10       		.uleb128 0x10
 524 024c 6A00     		.ascii	"j\000"
 525 024e 01       		.byte	0x1
 526 024f AF02     		.2byte	0x2af
 527 0251 B8000000 		.4byte	0xb8
 528 0255 02       		.uleb128 0x2
 529 0256 91       		.byte	0x91
 530 0257 6C       		.sleb128 -20
 531 0258 0F       		.uleb128 0xf
 532 0259 85000000 		.4byte	.LASF44
 533 025d 01       		.byte	0x1
 534 025e B002     		.2byte	0x2b0
 535 0260 1A010000 		.4byte	0x11a
 536 0264 02       		.uleb128 0x2
 537 0265 91       		.byte	0x91
 538 0266 6B       		.sleb128 -21
 539 0267 11       		.uleb128 0x11
 540 0268 50010000 		.4byte	0x150
 541 026c 94000000 		.4byte	.LBB4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 36


 542 0270 52000000 		.4byte	.LBE4-.LBB4
 543 0274 01       		.byte	0x1
 544 0275 CC02     		.2byte	0x2cc
 545 0277 12       		.uleb128 0x12
 546 0278 6B010000 		.4byte	0x16b
 547 027c 02       		.uleb128 0x2
 548 027d 91       		.byte	0x91
 549 027e 58       		.sleb128 -40
 550 027f 12       		.uleb128 0x12
 551 0280 61010000 		.4byte	0x161
 552 0284 02       		.uleb128 0x2
 553 0285 91       		.byte	0x91
 554 0286 5C       		.sleb128 -36
 555 0287 13       		.uleb128 0x13
 556 0288 94000000 		.4byte	.LBB5
 557 028c 52000000 		.4byte	.LBE5-.LBB5
 558 0290 14       		.uleb128 0x14
 559 0291 75010000 		.4byte	0x175
 560 0295 02       		.uleb128 0x2
 561 0296 91       		.byte	0x91
 562 0297 54       		.sleb128 -44
 563 0298 14       		.uleb128 0x14
 564 0299 81010000 		.4byte	0x181
 565 029d 02       		.uleb128 0x2
 566 029e 91       		.byte	0x91
 567 029f 4C       		.sleb128 -52
 568 02a0 14       		.uleb128 0x14
 569 02a1 8D010000 		.4byte	0x18d
 570 02a5 02       		.uleb128 0x2
 571 02a6 91       		.byte	0x91
 572 02a7 50       		.sleb128 -48
 573 02a8 00       		.byte	0
 574 02a9 00       		.byte	0
 575 02aa 00       		.byte	0
 576 02ab 00       		.byte	0
 577              		.section	.debug_abbrev,"",%progbits
 578              	.Ldebug_abbrev0:
 579 0000 01       		.uleb128 0x1
 580 0001 11       		.uleb128 0x11
 581 0002 01       		.byte	0x1
 582 0003 25       		.uleb128 0x25
 583 0004 0E       		.uleb128 0xe
 584 0005 13       		.uleb128 0x13
 585 0006 0B       		.uleb128 0xb
 586 0007 03       		.uleb128 0x3
 587 0008 0E       		.uleb128 0xe
 588 0009 1B       		.uleb128 0x1b
 589 000a 0E       		.uleb128 0xe
 590 000b 55       		.uleb128 0x55
 591 000c 17       		.uleb128 0x17
 592 000d 11       		.uleb128 0x11
 593 000e 01       		.uleb128 0x1
 594 000f 10       		.uleb128 0x10
 595 0010 17       		.uleb128 0x17
 596 0011 00       		.byte	0
 597 0012 00       		.byte	0
 598 0013 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 37


 599 0014 16       		.uleb128 0x16
 600 0015 00       		.byte	0
 601 0016 03       		.uleb128 0x3
 602 0017 0E       		.uleb128 0xe
 603 0018 3A       		.uleb128 0x3a
 604 0019 0B       		.uleb128 0xb
 605 001a 3B       		.uleb128 0x3b
 606 001b 0B       		.uleb128 0xb
 607 001c 49       		.uleb128 0x49
 608 001d 13       		.uleb128 0x13
 609 001e 00       		.byte	0
 610 001f 00       		.byte	0
 611 0020 03       		.uleb128 0x3
 612 0021 24       		.uleb128 0x24
 613 0022 00       		.byte	0
 614 0023 0B       		.uleb128 0xb
 615 0024 0B       		.uleb128 0xb
 616 0025 3E       		.uleb128 0x3e
 617 0026 0B       		.uleb128 0xb
 618 0027 03       		.uleb128 0x3
 619 0028 0E       		.uleb128 0xe
 620 0029 00       		.byte	0
 621 002a 00       		.byte	0
 622 002b 04       		.uleb128 0x4
 623 002c 24       		.uleb128 0x24
 624 002d 00       		.byte	0
 625 002e 0B       		.uleb128 0xb
 626 002f 0B       		.uleb128 0xb
 627 0030 3E       		.uleb128 0x3e
 628 0031 0B       		.uleb128 0xb
 629 0032 03       		.uleb128 0x3
 630 0033 08       		.uleb128 0x8
 631 0034 00       		.byte	0
 632 0035 00       		.byte	0
 633 0036 05       		.uleb128 0x5
 634 0037 04       		.uleb128 0x4
 635 0038 01       		.byte	0x1
 636 0039 0B       		.uleb128 0xb
 637 003a 0B       		.uleb128 0xb
 638 003b 3A       		.uleb128 0x3a
 639 003c 0B       		.uleb128 0xb
 640 003d 3B       		.uleb128 0x3b
 641 003e 05       		.uleb128 0x5
 642 003f 01       		.uleb128 0x1
 643 0040 13       		.uleb128 0x13
 644 0041 00       		.byte	0
 645 0042 00       		.byte	0
 646 0043 06       		.uleb128 0x6
 647 0044 28       		.uleb128 0x28
 648 0045 00       		.byte	0
 649 0046 03       		.uleb128 0x3
 650 0047 0E       		.uleb128 0xe
 651 0048 1C       		.uleb128 0x1c
 652 0049 0D       		.uleb128 0xd
 653 004a 00       		.byte	0
 654 004b 00       		.byte	0
 655 004c 07       		.uleb128 0x7
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 38


 656 004d 16       		.uleb128 0x16
 657 004e 00       		.byte	0
 658 004f 03       		.uleb128 0x3
 659 0050 0E       		.uleb128 0xe
 660 0051 3A       		.uleb128 0x3a
 661 0052 0B       		.uleb128 0xb
 662 0053 3B       		.uleb128 0x3b
 663 0054 05       		.uleb128 0x5
 664 0055 49       		.uleb128 0x49
 665 0056 13       		.uleb128 0x13
 666 0057 00       		.byte	0
 667 0058 00       		.byte	0
 668 0059 08       		.uleb128 0x8
 669 005a 0F       		.uleb128 0xf
 670 005b 00       		.byte	0
 671 005c 0B       		.uleb128 0xb
 672 005d 0B       		.uleb128 0xb
 673 005e 49       		.uleb128 0x49
 674 005f 13       		.uleb128 0x13
 675 0060 00       		.byte	0
 676 0061 00       		.byte	0
 677 0062 09       		.uleb128 0x9
 678 0063 2E       		.uleb128 0x2e
 679 0064 01       		.byte	0x1
 680 0065 03       		.uleb128 0x3
 681 0066 0E       		.uleb128 0xe
 682 0067 3A       		.uleb128 0x3a
 683 0068 0B       		.uleb128 0xb
 684 0069 3B       		.uleb128 0x3b
 685 006a 05       		.uleb128 0x5
 686 006b 27       		.uleb128 0x27
 687 006c 19       		.uleb128 0x19
 688 006d 49       		.uleb128 0x49
 689 006e 13       		.uleb128 0x13
 690 006f 20       		.uleb128 0x20
 691 0070 0B       		.uleb128 0xb
 692 0071 01       		.uleb128 0x1
 693 0072 13       		.uleb128 0x13
 694 0073 00       		.byte	0
 695 0074 00       		.byte	0
 696 0075 0A       		.uleb128 0xa
 697 0076 05       		.uleb128 0x5
 698 0077 00       		.byte	0
 699 0078 03       		.uleb128 0x3
 700 0079 08       		.uleb128 0x8
 701 007a 3A       		.uleb128 0x3a
 702 007b 0B       		.uleb128 0xb
 703 007c 3B       		.uleb128 0x3b
 704 007d 05       		.uleb128 0x5
 705 007e 49       		.uleb128 0x49
 706 007f 13       		.uleb128 0x13
 707 0080 00       		.byte	0
 708 0081 00       		.byte	0
 709 0082 0B       		.uleb128 0xb
 710 0083 34       		.uleb128 0x34
 711 0084 00       		.byte	0
 712 0085 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 39


 713 0086 0E       		.uleb128 0xe
 714 0087 3A       		.uleb128 0x3a
 715 0088 0B       		.uleb128 0xb
 716 0089 3B       		.uleb128 0x3b
 717 008a 05       		.uleb128 0x5
 718 008b 49       		.uleb128 0x49
 719 008c 13       		.uleb128 0x13
 720 008d 00       		.byte	0
 721 008e 00       		.byte	0
 722 008f 0C       		.uleb128 0xc
 723 0090 34       		.uleb128 0x34
 724 0091 00       		.byte	0
 725 0092 03       		.uleb128 0x3
 726 0093 08       		.uleb128 0x8
 727 0094 3A       		.uleb128 0x3a
 728 0095 0B       		.uleb128 0xb
 729 0096 3B       		.uleb128 0x3b
 730 0097 05       		.uleb128 0x5
 731 0098 49       		.uleb128 0x49
 732 0099 13       		.uleb128 0x13
 733 009a 00       		.byte	0
 734 009b 00       		.byte	0
 735 009c 0D       		.uleb128 0xd
 736 009d 2E       		.uleb128 0x2e
 737 009e 01       		.byte	0x1
 738 009f 3F       		.uleb128 0x3f
 739 00a0 19       		.uleb128 0x19
 740 00a1 03       		.uleb128 0x3
 741 00a2 0E       		.uleb128 0xe
 742 00a3 3A       		.uleb128 0x3a
 743 00a4 0B       		.uleb128 0xb
 744 00a5 3B       		.uleb128 0x3b
 745 00a6 0B       		.uleb128 0xb
 746 00a7 27       		.uleb128 0x27
 747 00a8 19       		.uleb128 0x19
 748 00a9 49       		.uleb128 0x49
 749 00aa 13       		.uleb128 0x13
 750 00ab 11       		.uleb128 0x11
 751 00ac 01       		.uleb128 0x1
 752 00ad 12       		.uleb128 0x12
 753 00ae 06       		.uleb128 0x6
 754 00af 40       		.uleb128 0x40
 755 00b0 18       		.uleb128 0x18
 756 00b1 9742     		.uleb128 0x2117
 757 00b3 19       		.uleb128 0x19
 758 00b4 00       		.byte	0
 759 00b5 00       		.byte	0
 760 00b6 0E       		.uleb128 0xe
 761 00b7 05       		.uleb128 0x5
 762 00b8 00       		.byte	0
 763 00b9 03       		.uleb128 0x3
 764 00ba 0E       		.uleb128 0xe
 765 00bb 3A       		.uleb128 0x3a
 766 00bc 0B       		.uleb128 0xb
 767 00bd 3B       		.uleb128 0x3b
 768 00be 0B       		.uleb128 0xb
 769 00bf 49       		.uleb128 0x49
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 40


 770 00c0 13       		.uleb128 0x13
 771 00c1 02       		.uleb128 0x2
 772 00c2 18       		.uleb128 0x18
 773 00c3 00       		.byte	0
 774 00c4 00       		.byte	0
 775 00c5 0F       		.uleb128 0xf
 776 00c6 34       		.uleb128 0x34
 777 00c7 00       		.byte	0
 778 00c8 03       		.uleb128 0x3
 779 00c9 0E       		.uleb128 0xe
 780 00ca 3A       		.uleb128 0x3a
 781 00cb 0B       		.uleb128 0xb
 782 00cc 3B       		.uleb128 0x3b
 783 00cd 05       		.uleb128 0x5
 784 00ce 49       		.uleb128 0x49
 785 00cf 13       		.uleb128 0x13
 786 00d0 02       		.uleb128 0x2
 787 00d1 18       		.uleb128 0x18
 788 00d2 00       		.byte	0
 789 00d3 00       		.byte	0
 790 00d4 10       		.uleb128 0x10
 791 00d5 34       		.uleb128 0x34
 792 00d6 00       		.byte	0
 793 00d7 03       		.uleb128 0x3
 794 00d8 08       		.uleb128 0x8
 795 00d9 3A       		.uleb128 0x3a
 796 00da 0B       		.uleb128 0xb
 797 00db 3B       		.uleb128 0x3b
 798 00dc 05       		.uleb128 0x5
 799 00dd 49       		.uleb128 0x49
 800 00de 13       		.uleb128 0x13
 801 00df 02       		.uleb128 0x2
 802 00e0 18       		.uleb128 0x18
 803 00e1 00       		.byte	0
 804 00e2 00       		.byte	0
 805 00e3 11       		.uleb128 0x11
 806 00e4 1D       		.uleb128 0x1d
 807 00e5 01       		.byte	0x1
 808 00e6 31       		.uleb128 0x31
 809 00e7 13       		.uleb128 0x13
 810 00e8 11       		.uleb128 0x11
 811 00e9 01       		.uleb128 0x1
 812 00ea 12       		.uleb128 0x12
 813 00eb 06       		.uleb128 0x6
 814 00ec 58       		.uleb128 0x58
 815 00ed 0B       		.uleb128 0xb
 816 00ee 59       		.uleb128 0x59
 817 00ef 05       		.uleb128 0x5
 818 00f0 00       		.byte	0
 819 00f1 00       		.byte	0
 820 00f2 12       		.uleb128 0x12
 821 00f3 05       		.uleb128 0x5
 822 00f4 00       		.byte	0
 823 00f5 31       		.uleb128 0x31
 824 00f6 13       		.uleb128 0x13
 825 00f7 02       		.uleb128 0x2
 826 00f8 18       		.uleb128 0x18
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 41


 827 00f9 00       		.byte	0
 828 00fa 00       		.byte	0
 829 00fb 13       		.uleb128 0x13
 830 00fc 0B       		.uleb128 0xb
 831 00fd 01       		.byte	0x1
 832 00fe 11       		.uleb128 0x11
 833 00ff 01       		.uleb128 0x1
 834 0100 12       		.uleb128 0x12
 835 0101 06       		.uleb128 0x6
 836 0102 00       		.byte	0
 837 0103 00       		.byte	0
 838 0104 14       		.uleb128 0x14
 839 0105 34       		.uleb128 0x34
 840 0106 00       		.byte	0
 841 0107 31       		.uleb128 0x31
 842 0108 13       		.uleb128 0x13
 843 0109 02       		.uleb128 0x2
 844 010a 18       		.uleb128 0x18
 845 010b 00       		.byte	0
 846 010c 00       		.byte	0
 847 010d 00       		.byte	0
 848              		.section	.debug_aranges,"",%progbits
 849 0000 1C000000 		.4byte	0x1c
 850 0004 0200     		.2byte	0x2
 851 0006 00000000 		.4byte	.Ldebug_info0
 852 000a 04       		.byte	0x4
 853 000b 00       		.byte	0
 854 000c 0000     		.2byte	0
 855 000e 0000     		.2byte	0
 856 0010 00000000 		.4byte	.LFB82
 857 0014 16010000 		.4byte	.LFE82-.LFB82
 858 0018 00000000 		.4byte	0
 859 001c 00000000 		.4byte	0
 860              		.section	.debug_ranges,"",%progbits
 861              	.Ldebug_ranges0:
 862 0000 00000000 		.4byte	.LFB82
 863 0004 16010000 		.4byte	.LFE82
 864 0008 00000000 		.4byte	0
 865 000c 00000000 		.4byte	0
 866              		.section	.debug_line,"",%progbits
 867              	.Ldebug_line0:
 868 0000 C4010000 		.section	.debug_str,"MS",%progbits,1
 868      02005601 
 868      00000201 
 868      FB0E0D00 
 868      01010101 
 869              	.LASF2:
 870 0000 5F5F696E 		.ascii	"__int8_t\000"
 870      74385F74 
 870      00
 871              	.LASF24:
 872 0009 41524D5F 		.ascii	"ARM_MATH_LENGTH_ERROR\000"
 872      4D415448 
 872      5F4C454E 
 872      4754485F 
 872      4552524F 
 873              	.LASF3:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 42


 874 001f 5F5F696E 		.ascii	"__int16_t\000"
 874      7431365F 
 874      7400
 875              	.LASF35:
 876 0029 70537263 		.ascii	"pSrcA\000"
 876      4100
 877              	.LASF37:
 878 002f 70537263 		.ascii	"pSrcB\000"
 878      4200
 879              	.LASF6:
 880 0035 5F5F696E 		.ascii	"__int32_t\000"
 880      7433325F 
 880      7400
 881              	.LASF47:
 882 003f 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 882      73657273 
 882      5C666E65 
 882      7665735C 
 882      446F6375 
 883 006c 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 883      655F7370 
 883      6565645F 
 883      73656E73 
 883      6F722E63 
 884              	.LASF44:
 885 0085 73746174 		.ascii	"status\000"
 885      757300
 886              	.LASF25:
 887 008c 41524D5F 		.ascii	"ARM_MATH_SIZE_MISMATCH\000"
 887      4D415448 
 887      5F53495A 
 887      455F4D49 
 887      534D4154 
 888              	.LASF31:
 889 00a3 7131355F 		.ascii	"q15_t\000"
 889      7400
 890              	.LASF20:
 891 00a9 666C6F61 		.ascii	"float\000"
 891      7400
 892              	.LASF13:
 893 00af 696E7438 		.ascii	"int8_t\000"
 893      5F7400
 894              	.LASF32:
 895 00b6 7133315F 		.ascii	"q31_t\000"
 895      7400
 896              	.LASF1:
 897 00bc 756E7369 		.ascii	"unsigned char\000"
 897      676E6564 
 897      20636861 
 897      7200
 898              	.LASF40:
 899 00ca 66697273 		.ascii	"firstIndex\000"
 899      74496E64 
 899      657800
 900              	.LASF28:
 901 00d5 41524D5F 		.ascii	"ARM_MATH_TEST_FAILURE\000"
 901      4D415448 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 43


 901      5F544553 
 901      545F4641 
 901      494C5552 
 902              	.LASF9:
 903 00eb 6C6F6E67 		.ascii	"long unsigned int\000"
 903      20756E73 
 903      69676E65 
 903      6420696E 
 903      7400
 904              	.LASF5:
 905 00fd 73686F72 		.ascii	"short unsigned int\000"
 905      7420756E 
 905      7369676E 
 905      65642069 
 905      6E7400
 906              	.LASF39:
 907 0110 70447374 		.ascii	"pDst\000"
 907      00
 908              	.LASF34:
 909 0115 6E65674D 		.ascii	"negMin\000"
 909      696E00
 910              	.LASF19:
 911 011c 646F7562 		.ascii	"double\000"
 911      6C6500
 912              	.LASF8:
 913 0123 5F5F7569 		.ascii	"__uint32_t\000"
 913      6E743332 
 913      5F7400
 914              	.LASF23:
 915 012e 41524D5F 		.ascii	"ARM_MATH_ARGUMENT_ERROR\000"
 915      4D415448 
 915      5F415247 
 915      554D454E 
 915      545F4552 
 916              	.LASF30:
 917 0146 71375F74 		.ascii	"q7_t\000"
 917      00
 918              	.LASF12:
 919 014b 756E7369 		.ascii	"unsigned int\000"
 919      676E6564 
 919      20696E74 
 919      00
 920              	.LASF11:
 921 0158 6C6F6E67 		.ascii	"long long unsigned int\000"
 921      206C6F6E 
 921      6720756E 
 921      7369676E 
 921      65642069 
 922              	.LASF45:
 923 016f 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 923      4320342E 
 923      392E3320 
 923      32303135 
 923      30333033 
 924 01a2 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 924      20726576 
 924      6973696F 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 44


 924      6E203232 
 924      31323230 
 925 01d5 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 925      30202D66 
 925      66756E63 
 925      74696F6E 
 925      2D736563 
 926              	.LASF26:
 927 0201 41524D5F 		.ascii	"ARM_MATH_NANINF\000"
 927      4D415448 
 927      5F4E414E 
 927      494E4600 
 928              	.LASF49:
 929 0211 61726D5F 		.ascii	"arm_conv_partial_q7\000"
 929      636F6E76 
 929      5F706172 
 929      7469616C 
 929      5F713700 
 930              	.LASF14:
 931 0225 696E7431 		.ascii	"int16_t\000"
 931      365F7400 
 932              	.LASF48:
 933 022d 5F5F5353 		.ascii	"__SSAT\000"
 933      415400
 934              	.LASF15:
 935 0234 696E7433 		.ascii	"int32_t\000"
 935      325F7400 
 936              	.LASF17:
 937 023c 73697A65 		.ascii	"sizetype\000"
 937      74797065 
 937      00
 938              	.LASF10:
 939 0245 6C6F6E67 		.ascii	"long long int\000"
 939      206C6F6E 
 939      6720696E 
 939      7400
 940              	.LASF29:
 941 0253 61726D5F 		.ascii	"arm_status\000"
 941      73746174 
 941      757300
 942              	.LASF18:
 943 025e 63686172 		.ascii	"char\000"
 943      00
 944              	.LASF36:
 945 0263 73726341 		.ascii	"srcALen\000"
 945      4C656E00 
 946              	.LASF22:
 947 026b 41524D5F 		.ascii	"ARM_MATH_SUCCESS\000"
 947      4D415448 
 947      5F535543 
 947      43455353 
 947      00
 948              	.LASF4:
 949 027c 73686F72 		.ascii	"short int\000"
 949      7420696E 
 949      7400
 950              	.LASF46:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccWLlrE0.s 			page 45


 951 0286 536F7572 		.ascii	"Source\\FilteringFunctions\\arm_conv_partial_q7.c\000"
 951      63655C46 
 951      696C7465 
 951      72696E67 
 951      46756E63 
 952              	.LASF33:
 953 02b6 706F734D 		.ascii	"posMax\000"
 953      617800
 954              	.LASF16:
 955 02bd 75696E74 		.ascii	"uint32_t\000"
 955      33325F74 
 955      00
 956              	.LASF7:
 957 02c6 6C6F6E67 		.ascii	"long int\000"
 957      20696E74 
 957      00
 958              	.LASF21:
 959 02cf 6C6F6E67 		.ascii	"long double\000"
 959      20646F75 
 959      626C6500 
 960              	.LASF41:
 961 02db 6E756D50 		.ascii	"numPoints\000"
 961      6F696E74 
 961      7300
 962              	.LASF0:
 963 02e5 7369676E 		.ascii	"signed char\000"
 963      65642063 
 963      68617200 
 964              	.LASF38:
 965 02f1 73726342 		.ascii	"srcBLen\000"
 965      4C656E00 
 966              	.LASF42:
 967 02f9 70496E31 		.ascii	"pIn1\000"
 967      00
 968              	.LASF43:
 969 02fe 70496E32 		.ascii	"pIn2\000"
 969      00
 970              	.LASF27:
 971 0303 41524D5F 		.ascii	"ARM_MATH_SINGULAR\000"
 971      4D415448 
 971      5F53494E 
 971      47554C41 
 971      5200
 972              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
