ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_conv_partial_f32.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_fmul
  18              		.global	__aeabi_fadd
  19              		.section	.text.arm_conv_partial_f32,"ax",%progbits
  20              		.align	2
  21              		.global	arm_conv_partial_f32
  22              		.code	16
  23              		.thumb_func
  24              		.type	arm_conv_partial_f32, %function
  25              	arm_conv_partial_f32:
  26              	.LFB82:
  27              		.file 1 "Source\\FilteringFunctions\\arm_conv_partial_f32.c"
   1:Source\FilteringFunctions/arm_conv_partial_f32.c **** /* ----------------------------------------------------------------------
   2:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * Project:      CMSIS DSP Library
   3:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * Title:        arm_conv_partial_f32.c
   4:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * Description:  Partial convolution of floating-point sequences
   5:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
   6:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * $Date:        27. January 2017
   7:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * $Revision:    V.1.5.1
   8:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
   9:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * Target Processor: Cortex-M cores
  10:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * -------------------------------------------------------------------- */
  11:Source\FilteringFunctions/arm_conv_partial_f32.c **** /*
  12:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
  14:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
  16:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * not use this file except in compliance with the License.
  18:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * You may obtain a copy of the License at
  19:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
  20:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
  22:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * See the License for the specific language governing permissions and
  26:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * limitations under the License.
  27:Source\FilteringFunctions/arm_conv_partial_f32.c ****  */
  28:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
  29:Source\FilteringFunctions/arm_conv_partial_f32.c **** #include "arm_math.h"
  30:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 2


  31:Source\FilteringFunctions/arm_conv_partial_f32.c **** /**
  32:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * @ingroup groupFilters
  33:Source\FilteringFunctions/arm_conv_partial_f32.c ****  */
  34:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
  35:Source\FilteringFunctions/arm_conv_partial_f32.c **** /**
  36:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * @defgroup PartialConv Partial Convolution
  37:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
  38:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * Partial Convolution is equivalent to Convolution except that a subset of the output samples is g
  39:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * Each function has two additional arguments.
  40:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * <code>firstIndex</code> specifies the starting index of the subset of output samples.
  41:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * <code>numPoints</code> is the number of output samples to compute.
  42:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * The function computes the output in the range
  43:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * <code>[firstIndex, ..., firstIndex+numPoints-1]</code>.
  44:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * The output array <code>pDst</code> contains <code>numPoints</code> values.
  45:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
  46:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * The allowable range of output indices is [0 srcALen+srcBLen-2].
  47:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * If the requested subset does not fall in this range then the functions return ARM_MATH_ARGUMENT_
  48:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * Otherwise the functions return ARM_MATH_SUCCESS.
  49:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * \note Refer arm_conv_f32() for details on fixed point behavior.
  50:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
  51:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
  52:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * <b>Fast Versions</b>
  53:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
  54:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * \par
  55:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * Fast versions are supported for Q31 and Q15 of partial convolution.  Cycles for Fast versions ar
  56:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * the input signals should be scaled down to avoid intermediate overflows.
  57:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
  58:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
  59:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * <b>Opt Versions</b>
  60:Source\FilteringFunctions/arm_conv_partial_f32.c ****  *
  61:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * \par
  62:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * Opt versions are supported for Q15 and Q7.  Design uses internal scratch buffer for getting good
  63:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * These versions are optimised in cycles and consumes more memory(Scratch memory) compared to Q15 
  64:Source\FilteringFunctions/arm_conv_partial_f32.c ****  */
  65:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
  66:Source\FilteringFunctions/arm_conv_partial_f32.c **** /**
  67:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * @addtogroup PartialConv
  68:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * @{
  69:Source\FilteringFunctions/arm_conv_partial_f32.c ****  */
  70:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
  71:Source\FilteringFunctions/arm_conv_partial_f32.c **** /**
  72:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * @brief Partial convolution of floating-point sequences.
  73:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * @param[in]       *pSrcA points to the first input sequence.
  74:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * @param[in]       srcALen length of the first input sequence.
  75:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * @param[in]       *pSrcB points to the second input sequence.
  76:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * @param[in]       srcBLen length of the second input sequence.
  77:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * @param[out]      *pDst points to the location where the output result is written.
  78:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * @param[in]       firstIndex is the first output sample to start with.
  79:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * @param[in]       numPoints is the number of output points to be computed.
  80:Source\FilteringFunctions/arm_conv_partial_f32.c ****  * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMEN
  81:Source\FilteringFunctions/arm_conv_partial_f32.c ****  */
  82:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
  83:Source\FilteringFunctions/arm_conv_partial_f32.c **** arm_status arm_conv_partial_f32(
  84:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t * pSrcA,
  85:Source\FilteringFunctions/arm_conv_partial_f32.c ****   uint32_t srcALen,
  86:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t * pSrcB,
  87:Source\FilteringFunctions/arm_conv_partial_f32.c ****   uint32_t srcBLen,
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 3


  88:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t * pDst,
  89:Source\FilteringFunctions/arm_conv_partial_f32.c ****   uint32_t firstIndex,
  90:Source\FilteringFunctions/arm_conv_partial_f32.c ****   uint32_t numPoints)
  91:Source\FilteringFunctions/arm_conv_partial_f32.c **** {
  28              		.loc 1 91 0
  29              		.cfi_startproc
  30 0000 80B5     		push	{r7, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 8AB0     		sub	sp, sp, #40
  35              		.cfi_def_cfa_offset 48
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 F860     		str	r0, [r7, #12]
  39 0008 B960     		str	r1, [r7, #8]
  40 000a 7A60     		str	r2, [r7, #4]
  41 000c 3B60     		str	r3, [r7]
  92:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
  93:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
  94:Source\FilteringFunctions/arm_conv_partial_f32.c **** #if defined (ARM_MATH_DSP)
  95:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
  96:Source\FilteringFunctions/arm_conv_partial_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  97:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
  98:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *pIn1 = pSrcA;                       /* inputA pointer */
  99:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *pIn2 = pSrcB;                       /* inputB pointer */
 100:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *pOut = pDst;                        /* output pointer */
 101:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *px;                                 /* Intermediate inputA pointer */
 102:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *py;                                 /* Intermediate inputB pointer */
 103:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *pSrc1, *pSrc2;                      /* Intermediate pointers */
 104:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t sum, acc0, acc1, acc2, acc3;         /* Accumulator */
 105:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t x0, x1, x2, x3, c0;                  /* Temporary variables to hold state and coefficie
 106:Source\FilteringFunctions/arm_conv_partial_f32.c ****   uint32_t j, k, count = 0u, blkCnt, check;
 107:Source\FilteringFunctions/arm_conv_partial_f32.c ****   int32_t blockSize1, blockSize2, blockSize3;    /* loop counters */
 108:Source\FilteringFunctions/arm_conv_partial_f32.c ****   arm_status status;                             /* status of Partial convolution */
 109:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 110:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 111:Source\FilteringFunctions/arm_conv_partial_f32.c ****   /* Check for range of output samples to be calculated */
 112:Source\FilteringFunctions/arm_conv_partial_f32.c ****   if ((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
 113:Source\FilteringFunctions/arm_conv_partial_f32.c ****   {
 114:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* Set status as ARM_MATH_ARGUMENT_ERROR */
 115:Source\FilteringFunctions/arm_conv_partial_f32.c ****     status = ARM_MATH_ARGUMENT_ERROR;
 116:Source\FilteringFunctions/arm_conv_partial_f32.c ****   }
 117:Source\FilteringFunctions/arm_conv_partial_f32.c ****   else
 118:Source\FilteringFunctions/arm_conv_partial_f32.c ****   {
 119:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 120:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* The algorithm implementation is based on the lengths of the inputs. */
 121:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* srcB is always made to slide across srcA. */
 122:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* So srcBLen is always considered as shorter or equal to srcALen */
 123:Source\FilteringFunctions/arm_conv_partial_f32.c ****     if (srcALen >= srcBLen)
 124:Source\FilteringFunctions/arm_conv_partial_f32.c ****     {
 125:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialization of inputA pointer */
 126:Source\FilteringFunctions/arm_conv_partial_f32.c ****       pIn1 = pSrcA;
 127:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 128:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialization of inputB pointer */
 129:Source\FilteringFunctions/arm_conv_partial_f32.c ****       pIn2 = pSrcB;
 130:Source\FilteringFunctions/arm_conv_partial_f32.c ****     }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 4


 131:Source\FilteringFunctions/arm_conv_partial_f32.c ****     else
 132:Source\FilteringFunctions/arm_conv_partial_f32.c ****     {
 133:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialization of inputA pointer */
 134:Source\FilteringFunctions/arm_conv_partial_f32.c ****       pIn1 = pSrcB;
 135:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 136:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialization of inputB pointer */
 137:Source\FilteringFunctions/arm_conv_partial_f32.c ****       pIn2 = pSrcA;
 138:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 139:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* srcBLen is always considered as shorter or equal to srcALen */
 140:Source\FilteringFunctions/arm_conv_partial_f32.c ****       j = srcBLen;
 141:Source\FilteringFunctions/arm_conv_partial_f32.c ****       srcBLen = srcALen;
 142:Source\FilteringFunctions/arm_conv_partial_f32.c ****       srcALen = j;
 143:Source\FilteringFunctions/arm_conv_partial_f32.c ****     }
 144:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 145:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* Conditions to check which loopCounter holds
 146:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * the first and last indices of the output samples to be calculated. */
 147:Source\FilteringFunctions/arm_conv_partial_f32.c ****     check = firstIndex + numPoints;
 148:Source\FilteringFunctions/arm_conv_partial_f32.c ****     blockSize3 = ((int32_t)check > (int32_t)srcALen) ? (int32_t)check - (int32_t)srcALen : 0;
 149:Source\FilteringFunctions/arm_conv_partial_f32.c ****     blockSize3 = ((int32_t)firstIndex > (int32_t)srcALen - 1) ? blockSize3 - (int32_t)firstIndex + 
 150:Source\FilteringFunctions/arm_conv_partial_f32.c ****     blockSize1 = ((int32_t) srcBLen - 1) - (int32_t) firstIndex;
 151:Source\FilteringFunctions/arm_conv_partial_f32.c ****     blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
 152:Source\FilteringFunctions/arm_conv_partial_f32.c ****                                      (int32_t) numPoints) : 0;
 153:Source\FilteringFunctions/arm_conv_partial_f32.c ****     blockSize2 = ((int32_t) check - blockSize3) -
 154:Source\FilteringFunctions/arm_conv_partial_f32.c ****       (blockSize1 + (int32_t) firstIndex);
 155:Source\FilteringFunctions/arm_conv_partial_f32.c ****     blockSize2 = (blockSize2 > 0) ? blockSize2 : 0;
 156:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 157:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
 158:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* The function is internally
 159:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * divided into three stages according to the number of multiplications that has to be
 160:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * taken place between inputA samples and inputB samples. In the first stage of the
 161:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * algorithm, the multiplications increase by one for every iteration.
 162:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * In the second stage of the algorithm, srcBLen number of multiplications are done.
 163:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * In the third stage of the algorithm, the multiplications decrease by one
 164:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * for every iteration. */
 165:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 166:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* Set the output pointer to point to the firstIndex
 167:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * of the output sample to be calculated. */
 168:Source\FilteringFunctions/arm_conv_partial_f32.c ****     pOut = pDst + firstIndex;
 169:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 170:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* --------------------------
 171:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * Initializations of stage1
 172:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * -------------------------*/
 173:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 174:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* sum = x[0] * y[0]
 175:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * sum = x[0] * y[1] + x[1] * y[0]
 176:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * ....
 177:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]
 178:Source\FilteringFunctions/arm_conv_partial_f32.c ****      */
 179:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 180:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* In this stage the MAC operations are increased by 1 for every iteration.
 181:Source\FilteringFunctions/arm_conv_partial_f32.c ****        The count variable holds the number of MAC operations performed.
 182:Source\FilteringFunctions/arm_conv_partial_f32.c ****        Since the partial convolution starts from from firstIndex
 183:Source\FilteringFunctions/arm_conv_partial_f32.c ****        Number of Macs to be performed is firstIndex + 1 */
 184:Source\FilteringFunctions/arm_conv_partial_f32.c ****     count = 1u + firstIndex;
 185:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 186:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputA */
 187:Source\FilteringFunctions/arm_conv_partial_f32.c ****     px = pIn1;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 5


 188:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 189:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputB */
 190:Source\FilteringFunctions/arm_conv_partial_f32.c ****     pSrc1 = pIn2 + firstIndex;
 191:Source\FilteringFunctions/arm_conv_partial_f32.c ****     py = pSrc1;
 192:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 193:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* ------------------------
 194:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * Stage1 process
 195:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * ----------------------*/
 196:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 197:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* The first stage starts here */
 198:Source\FilteringFunctions/arm_conv_partial_f32.c ****     while (blockSize1 > 0)
 199:Source\FilteringFunctions/arm_conv_partial_f32.c ****     {
 200:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Accumulator is made zero for every iteration */
 201:Source\FilteringFunctions/arm_conv_partial_f32.c ****       sum = 0.0f;
 202:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 203:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 204:Source\FilteringFunctions/arm_conv_partial_f32.c ****       k = count >> 2u;
 205:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 206:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 207:Source\FilteringFunctions/arm_conv_partial_f32.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 208:Source\FilteringFunctions/arm_conv_partial_f32.c ****       while (k > 0u)
 209:Source\FilteringFunctions/arm_conv_partial_f32.c ****       {
 210:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* x[0] * y[srcBLen - 1] */
 211:Source\FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 212:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 213:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* x[1] * y[srcBLen - 2] */
 214:Source\FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 215:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 216:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* x[2] * y[srcBLen - 3] */
 217:Source\FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 218:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 219:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* x[3] * y[srcBLen - 4] */
 220:Source\FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 221:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 222:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 223:Source\FilteringFunctions/arm_conv_partial_f32.c ****         k--;
 224:Source\FilteringFunctions/arm_conv_partial_f32.c ****       }
 225:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 226:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* If the count is not a multiple of 4, compute any remaining MACs here.
 227:Source\FilteringFunctions/arm_conv_partial_f32.c ****        ** No loop unrolling is used. */
 228:Source\FilteringFunctions/arm_conv_partial_f32.c ****       k = count % 0x4u;
 229:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 230:Source\FilteringFunctions/arm_conv_partial_f32.c ****       while (k > 0u)
 231:Source\FilteringFunctions/arm_conv_partial_f32.c ****       {
 232:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Perform the multiply-accumulates */
 233:Source\FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 234:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 235:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 236:Source\FilteringFunctions/arm_conv_partial_f32.c ****         k--;
 237:Source\FilteringFunctions/arm_conv_partial_f32.c ****       }
 238:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 239:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 240:Source\FilteringFunctions/arm_conv_partial_f32.c ****       *pOut++ = sum;
 241:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 242:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 243:Source\FilteringFunctions/arm_conv_partial_f32.c ****       py = ++pSrc1;
 244:Source\FilteringFunctions/arm_conv_partial_f32.c ****       px = pIn1;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 6


 245:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 246:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Increment the MAC count */
 247:Source\FilteringFunctions/arm_conv_partial_f32.c ****       count++;
 248:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 249:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Decrement the loop counter */
 250:Source\FilteringFunctions/arm_conv_partial_f32.c ****       blockSize1--;
 251:Source\FilteringFunctions/arm_conv_partial_f32.c ****     }
 252:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 253:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* --------------------------
 254:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * Initializations of stage2
 255:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * ------------------------*/
 256:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 257:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]
 258:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]
 259:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * ....
 260:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y
 261:Source\FilteringFunctions/arm_conv_partial_f32.c ****      */
 262:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 263:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputA */
 264:Source\FilteringFunctions/arm_conv_partial_f32.c ****     if ((int32_t)firstIndex - (int32_t)srcBLen + 1 > 0)
 265:Source\FilteringFunctions/arm_conv_partial_f32.c ****     {
 266:Source\FilteringFunctions/arm_conv_partial_f32.c ****       px = pIn1 + firstIndex - srcBLen + 1;
 267:Source\FilteringFunctions/arm_conv_partial_f32.c ****     }
 268:Source\FilteringFunctions/arm_conv_partial_f32.c ****     else
 269:Source\FilteringFunctions/arm_conv_partial_f32.c ****     {
 270:Source\FilteringFunctions/arm_conv_partial_f32.c ****       px = pIn1;
 271:Source\FilteringFunctions/arm_conv_partial_f32.c ****     }
 272:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 273:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputB */
 274:Source\FilteringFunctions/arm_conv_partial_f32.c ****     pSrc2 = pIn2 + (srcBLen - 1u);
 275:Source\FilteringFunctions/arm_conv_partial_f32.c ****     py = pSrc2;
 276:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 277:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* count is index by which the pointer pIn1 to be incremented */
 278:Source\FilteringFunctions/arm_conv_partial_f32.c ****     count = 0u;
 279:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 280:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* -------------------
 281:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * Stage2 process
 282:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * ------------------*/
 283:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 284:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
 285:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * So, to loop unroll over blockSize2,
 286:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * srcBLen should be greater than or equal to 4 */
 287:Source\FilteringFunctions/arm_conv_partial_f32.c ****     if (srcBLen >= 4u)
 288:Source\FilteringFunctions/arm_conv_partial_f32.c ****     {
 289:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Loop unroll over blockSize2, by 4 */
 290:Source\FilteringFunctions/arm_conv_partial_f32.c ****       blkCnt = ((uint32_t) blockSize2 >> 2u);
 291:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 292:Source\FilteringFunctions/arm_conv_partial_f32.c ****       while (blkCnt > 0u)
 293:Source\FilteringFunctions/arm_conv_partial_f32.c ****       {
 294:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Set all accumulators to zero */
 295:Source\FilteringFunctions/arm_conv_partial_f32.c ****         acc0 = 0.0f;
 296:Source\FilteringFunctions/arm_conv_partial_f32.c ****         acc1 = 0.0f;
 297:Source\FilteringFunctions/arm_conv_partial_f32.c ****         acc2 = 0.0f;
 298:Source\FilteringFunctions/arm_conv_partial_f32.c ****         acc3 = 0.0f;
 299:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 300:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* read x[0], x[1], x[2] samples */
 301:Source\FilteringFunctions/arm_conv_partial_f32.c ****         x0 = *(px++);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 7


 302:Source\FilteringFunctions/arm_conv_partial_f32.c ****         x1 = *(px++);
 303:Source\FilteringFunctions/arm_conv_partial_f32.c ****         x2 = *(px++);
 304:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 305:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 306:Source\FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen >> 2u;
 307:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 308:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 309:Source\FilteringFunctions/arm_conv_partial_f32.c ****          ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 310:Source\FilteringFunctions/arm_conv_partial_f32.c ****         do
 311:Source\FilteringFunctions/arm_conv_partial_f32.c ****         {
 312:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 1] sample */
 313:Source\FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *(py--);
 314:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 315:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[3] sample */
 316:Source\FilteringFunctions/arm_conv_partial_f32.c ****           x3 = *(px++);
 317:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 318:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 319:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[0] * y[srcBLen - 1] */
 320:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x0 * c0;
 321:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 322:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[1] * y[srcBLen - 1] */
 323:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x1 * c0;
 324:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 325:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[2] * y[srcBLen - 1] */
 326:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x2 * c0;
 327:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 328:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[3] * y[srcBLen - 1] */
 329:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x3 * c0;
 330:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 331:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 2] sample */
 332:Source\FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *(py--);
 333:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 334:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[4] sample */
 335:Source\FilteringFunctions/arm_conv_partial_f32.c ****           x0 = *(px++);
 336:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 337:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 338:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[1] * y[srcBLen - 2] */
 339:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x1 * c0;
 340:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[2] * y[srcBLen - 2] */
 341:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x2 * c0;
 342:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[3] * y[srcBLen - 2] */
 343:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x3 * c0;
 344:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[4] * y[srcBLen - 2] */
 345:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x0 * c0;
 346:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 347:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 3] sample */
 348:Source\FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *(py--);
 349:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 350:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[5] sample */
 351:Source\FilteringFunctions/arm_conv_partial_f32.c ****           x1 = *(px++);
 352:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 353:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulates */
 354:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[2] * y[srcBLen - 3] */
 355:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x2 * c0;
 356:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[3] * y[srcBLen - 2] */
 357:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x3 * c0;
 358:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[4] * y[srcBLen - 2] */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 8


 359:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x0 * c0;
 360:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[5] * y[srcBLen - 2] */
 361:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x1 * c0;
 362:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 363:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 4] sample */
 364:Source\FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *(py--);
 365:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 366:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[6] sample */
 367:Source\FilteringFunctions/arm_conv_partial_f32.c ****           x2 = *(px++);
 368:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 369:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulates */
 370:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[3] * y[srcBLen - 4] */
 371:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x3 * c0;
 372:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[4] * y[srcBLen - 4] */
 373:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x0 * c0;
 374:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[5] * y[srcBLen - 4] */
 375:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x1 * c0;
 376:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[6] * y[srcBLen - 4] */
 377:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x2 * c0;
 378:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 379:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 380:Source\FilteringFunctions/arm_conv_partial_f32.c ****         } while (--k);
 381:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 382:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
 383:Source\FilteringFunctions/arm_conv_partial_f32.c ****          ** No loop unrolling is used. */
 384:Source\FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen % 0x4u;
 385:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 386:Source\FilteringFunctions/arm_conv_partial_f32.c ****         while (k > 0u)
 387:Source\FilteringFunctions/arm_conv_partial_f32.c ****         {
 388:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 5] sample */
 389:Source\FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *(py--);
 390:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 391:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[7] sample */
 392:Source\FilteringFunctions/arm_conv_partial_f32.c ****           x3 = *(px++);
 393:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 394:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulates */
 395:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[4] * y[srcBLen - 5] */
 396:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x0 * c0;
 397:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[5] * y[srcBLen - 5] */
 398:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x1 * c0;
 399:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[6] * y[srcBLen - 5] */
 400:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x2 * c0;
 401:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[7] * y[srcBLen - 5] */
 402:Source\FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x3 * c0;
 403:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 404:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Reuse the present samples for the next MAC */
 405:Source\FilteringFunctions/arm_conv_partial_f32.c ****           x0 = x1;
 406:Source\FilteringFunctions/arm_conv_partial_f32.c ****           x1 = x2;
 407:Source\FilteringFunctions/arm_conv_partial_f32.c ****           x2 = x3;
 408:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 409:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Decrement the loop counter */
 410:Source\FilteringFunctions/arm_conv_partial_f32.c ****           k--;
 411:Source\FilteringFunctions/arm_conv_partial_f32.c ****         }
 412:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 413:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Store the result in the accumulator in the destination buffer. */
 414:Source\FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = acc0;
 415:Source\FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = acc1;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 9


 416:Source\FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = acc2;
 417:Source\FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = acc3;
 418:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 419:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Increment the pointer pIn1 index, count by 1 */
 420:Source\FilteringFunctions/arm_conv_partial_f32.c ****         count += 4u;
 421:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 422:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 423:Source\FilteringFunctions/arm_conv_partial_f32.c ****         px = pIn1 + count;
 424:Source\FilteringFunctions/arm_conv_partial_f32.c ****         py = pSrc2;
 425:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 426:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 427:Source\FilteringFunctions/arm_conv_partial_f32.c ****         blkCnt--;
 428:Source\FilteringFunctions/arm_conv_partial_f32.c ****       }
 429:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 430:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.
 431:Source\FilteringFunctions/arm_conv_partial_f32.c ****        ** No loop unrolling is used. */
 432:Source\FilteringFunctions/arm_conv_partial_f32.c ****       blkCnt = (uint32_t) blockSize2 % 0x4u;
 433:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 434:Source\FilteringFunctions/arm_conv_partial_f32.c ****       while (blkCnt > 0u)
 435:Source\FilteringFunctions/arm_conv_partial_f32.c ****       {
 436:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Accumulator is made zero for every iteration */
 437:Source\FilteringFunctions/arm_conv_partial_f32.c ****         sum = 0.0f;
 438:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 439:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 440:Source\FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen >> 2u;
 441:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 442:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 443:Source\FilteringFunctions/arm_conv_partial_f32.c ****          ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 444:Source\FilteringFunctions/arm_conv_partial_f32.c ****         while (k > 0u)
 445:Source\FilteringFunctions/arm_conv_partial_f32.c ****         {
 446:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulates */
 447:Source\FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 448:Source\FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 449:Source\FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 450:Source\FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 451:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 452:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Decrement the loop counter */
 453:Source\FilteringFunctions/arm_conv_partial_f32.c ****           k--;
 454:Source\FilteringFunctions/arm_conv_partial_f32.c ****         }
 455:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 456:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
 457:Source\FilteringFunctions/arm_conv_partial_f32.c ****          ** No loop unrolling is used. */
 458:Source\FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen % 0x4u;
 459:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 460:Source\FilteringFunctions/arm_conv_partial_f32.c ****         while (k > 0u)
 461:Source\FilteringFunctions/arm_conv_partial_f32.c ****         {
 462:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 463:Source\FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 464:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 465:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Decrement the loop counter */
 466:Source\FilteringFunctions/arm_conv_partial_f32.c ****           k--;
 467:Source\FilteringFunctions/arm_conv_partial_f32.c ****         }
 468:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 469:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Store the result in the accumulator in the destination buffer. */
 470:Source\FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = sum;
 471:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 472:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Increment the MAC count */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 10


 473:Source\FilteringFunctions/arm_conv_partial_f32.c ****         count++;
 474:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 475:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 476:Source\FilteringFunctions/arm_conv_partial_f32.c ****         px = pIn1 + count;
 477:Source\FilteringFunctions/arm_conv_partial_f32.c ****         py = pSrc2;
 478:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 479:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 480:Source\FilteringFunctions/arm_conv_partial_f32.c ****         blkCnt--;
 481:Source\FilteringFunctions/arm_conv_partial_f32.c ****       }
 482:Source\FilteringFunctions/arm_conv_partial_f32.c ****     }
 483:Source\FilteringFunctions/arm_conv_partial_f32.c ****     else
 484:Source\FilteringFunctions/arm_conv_partial_f32.c ****     {
 485:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* If the srcBLen is not a multiple of 4,
 486:Source\FilteringFunctions/arm_conv_partial_f32.c ****        * the blockSize2 loop cannot be unrolled by 4 */
 487:Source\FilteringFunctions/arm_conv_partial_f32.c ****       blkCnt = (uint32_t) blockSize2;
 488:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 489:Source\FilteringFunctions/arm_conv_partial_f32.c ****       while (blkCnt > 0u)
 490:Source\FilteringFunctions/arm_conv_partial_f32.c ****       {
 491:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Accumulator is made zero for every iteration */
 492:Source\FilteringFunctions/arm_conv_partial_f32.c ****         sum = 0.0f;
 493:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 494:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* srcBLen number of MACS should be performed */
 495:Source\FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen;
 496:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 497:Source\FilteringFunctions/arm_conv_partial_f32.c ****         while (k > 0u)
 498:Source\FilteringFunctions/arm_conv_partial_f32.c ****         {
 499:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 500:Source\FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 501:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 502:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* Decrement the loop counter */
 503:Source\FilteringFunctions/arm_conv_partial_f32.c ****           k--;
 504:Source\FilteringFunctions/arm_conv_partial_f32.c ****         }
 505:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 506:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Store the result in the accumulator in the destination buffer. */
 507:Source\FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = sum;
 508:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 509:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Increment the MAC count */
 510:Source\FilteringFunctions/arm_conv_partial_f32.c ****         count++;
 511:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 512:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 513:Source\FilteringFunctions/arm_conv_partial_f32.c ****         px = pIn1 + count;
 514:Source\FilteringFunctions/arm_conv_partial_f32.c ****         py = pSrc2;
 515:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 516:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 517:Source\FilteringFunctions/arm_conv_partial_f32.c ****         blkCnt--;
 518:Source\FilteringFunctions/arm_conv_partial_f32.c ****       }
 519:Source\FilteringFunctions/arm_conv_partial_f32.c ****     }
 520:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 521:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 522:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* --------------------------
 523:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * Initializations of stage3
 524:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * -------------------------*/
 525:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 526:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[src
 527:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[src
 528:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * ....
 529:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 11


 530:Source\FilteringFunctions/arm_conv_partial_f32.c ****      * sum +=  x[srcALen-1] * y[srcBLen-1]
 531:Source\FilteringFunctions/arm_conv_partial_f32.c ****      */
 532:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 533:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* In this stage the MAC operations are decreased by 1 for every iteration.
 534:Source\FilteringFunctions/arm_conv_partial_f32.c ****        The count variable holds the number of MAC operations performed */
 535:Source\FilteringFunctions/arm_conv_partial_f32.c ****     count = srcBLen - 1u;
 536:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 537:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputA */
 538:Source\FilteringFunctions/arm_conv_partial_f32.c ****     pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
 539:Source\FilteringFunctions/arm_conv_partial_f32.c ****     px = pSrc1;
 540:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 541:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputB */
 542:Source\FilteringFunctions/arm_conv_partial_f32.c ****     pSrc2 = pIn2 + (srcBLen - 1u);
 543:Source\FilteringFunctions/arm_conv_partial_f32.c ****     py = pSrc2;
 544:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 545:Source\FilteringFunctions/arm_conv_partial_f32.c ****     while (blockSize3 > 0)
 546:Source\FilteringFunctions/arm_conv_partial_f32.c ****     {
 547:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Accumulator is made zero for every iteration */
 548:Source\FilteringFunctions/arm_conv_partial_f32.c ****       sum = 0.0f;
 549:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 550:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 551:Source\FilteringFunctions/arm_conv_partial_f32.c ****       k = count >> 2u;
 552:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 553:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 554:Source\FilteringFunctions/arm_conv_partial_f32.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 555:Source\FilteringFunctions/arm_conv_partial_f32.c ****       while (k > 0u)
 556:Source\FilteringFunctions/arm_conv_partial_f32.c ****       {
 557:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* sum += x[srcALen - srcBLen + 1] * y[srcBLen - 1] */
 558:Source\FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 559:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 560:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* sum += x[srcALen - srcBLen + 2] * y[srcBLen - 2] */
 561:Source\FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 562:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 563:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* sum += x[srcALen - srcBLen + 3] * y[srcBLen - 3] */
 564:Source\FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 565:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 566:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* sum += x[srcALen - srcBLen + 4] * y[srcBLen - 4] */
 567:Source\FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 568:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 569:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 570:Source\FilteringFunctions/arm_conv_partial_f32.c ****         k--;
 571:Source\FilteringFunctions/arm_conv_partial_f32.c ****       }
 572:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 573:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* If the count is not a multiple of 4, compute any remaining MACs here.
 574:Source\FilteringFunctions/arm_conv_partial_f32.c ****        ** No loop unrolling is used. */
 575:Source\FilteringFunctions/arm_conv_partial_f32.c ****       k = count % 0x4u;
 576:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 577:Source\FilteringFunctions/arm_conv_partial_f32.c ****       while (k > 0u)
 578:Source\FilteringFunctions/arm_conv_partial_f32.c ****       {
 579:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Perform the multiply-accumulates */
 580:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* sum +=  x[srcALen-1] * y[srcBLen-1] */
 581:Source\FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 582:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 583:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 584:Source\FilteringFunctions/arm_conv_partial_f32.c ****         k--;
 585:Source\FilteringFunctions/arm_conv_partial_f32.c ****       }
 586:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 12


 587:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 588:Source\FilteringFunctions/arm_conv_partial_f32.c ****       *pOut++ = sum;
 589:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 590:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 591:Source\FilteringFunctions/arm_conv_partial_f32.c ****       px = ++pSrc1;
 592:Source\FilteringFunctions/arm_conv_partial_f32.c ****       py = pSrc2;
 593:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 594:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Decrement the MAC count */
 595:Source\FilteringFunctions/arm_conv_partial_f32.c ****       count--;
 596:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 597:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Decrement the loop counter */
 598:Source\FilteringFunctions/arm_conv_partial_f32.c ****       blockSize3--;
 599:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 600:Source\FilteringFunctions/arm_conv_partial_f32.c ****     }
 601:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 602:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* set status as ARM_MATH_SUCCESS */
 603:Source\FilteringFunctions/arm_conv_partial_f32.c ****     status = ARM_MATH_SUCCESS;
 604:Source\FilteringFunctions/arm_conv_partial_f32.c ****   }
 605:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 606:Source\FilteringFunctions/arm_conv_partial_f32.c ****   /* Return to application */
 607:Source\FilteringFunctions/arm_conv_partial_f32.c ****   return (status);
 608:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 609:Source\FilteringFunctions/arm_conv_partial_f32.c **** #else
 610:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 611:Source\FilteringFunctions/arm_conv_partial_f32.c ****   /* Run the below code for Cortex-M0 */
 612:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 613:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *pIn1 = pSrcA;                       /* inputA pointer */
  42              		.loc 1 613 0
  43 000e FB68     		ldr	r3, [r7, #12]
  44 0010 7B61     		str	r3, [r7, #20]
 614:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *pIn2 = pSrcB;                       /* inputB pointer */
  45              		.loc 1 614 0
  46 0012 7B68     		ldr	r3, [r7, #4]
  47 0014 3B61     		str	r3, [r7, #16]
 615:Source\FilteringFunctions/arm_conv_partial_f32.c ****   float32_t sum;                                 /* Accumulator */
 616:Source\FilteringFunctions/arm_conv_partial_f32.c ****   uint32_t i, j;                                 /* loop counters */
 617:Source\FilteringFunctions/arm_conv_partial_f32.c ****   arm_status status;                             /* status of Partial convolution */
 618:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 619:Source\FilteringFunctions/arm_conv_partial_f32.c ****   /* Check for range of output samples to be calculated */
 620:Source\FilteringFunctions/arm_conv_partial_f32.c ****   if ((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
  48              		.loc 1 620 0
  49 0016 7A6B     		ldr	r2, [r7, #52]
  50 0018 BB6B     		ldr	r3, [r7, #56]
  51 001a D218     		add	r2, r2, r3
  52 001c 3968     		ldr	r1, [r7]
  53 001e BB68     		ldr	r3, [r7, #8]
  54 0020 CB18     		add	r3, r1, r3
  55 0022 013B     		sub	r3, r3, #1
  56 0024 9A42     		cmp	r2, r3
  57 0026 04D9     		bls	.L2
 621:Source\FilteringFunctions/arm_conv_partial_f32.c ****   {
 622:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* Set status as ARM_ARGUMENT_ERROR */
 623:Source\FilteringFunctions/arm_conv_partial_f32.c ****     status = ARM_MATH_ARGUMENT_ERROR;
  58              		.loc 1 623 0
  59 0028 1B23     		mov	r3, #27
  60 002a FB18     		add	r3, r7, r3
  61 002c FF22     		mov	r2, #255
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 13


  62 002e 1A70     		strb	r2, [r3]
  63 0030 43E0     		b	.L3
  64              	.L2:
 624:Source\FilteringFunctions/arm_conv_partial_f32.c ****   }
 625:Source\FilteringFunctions/arm_conv_partial_f32.c ****   else
 626:Source\FilteringFunctions/arm_conv_partial_f32.c ****   {
 627:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* Loop to calculate convolution for output length number of values */
 628:Source\FilteringFunctions/arm_conv_partial_f32.c ****     for (i = firstIndex; i <= (firstIndex + numPoints - 1); i++)
  65              		.loc 1 628 0
  66 0032 7B6B     		ldr	r3, [r7, #52]
  67 0034 3B62     		str	r3, [r7, #32]
  68 0036 35E0     		b	.L4
  69              	.L8:
 629:Source\FilteringFunctions/arm_conv_partial_f32.c ****     {
 630:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialize sum with zero to carry on MAC operations */
 631:Source\FilteringFunctions/arm_conv_partial_f32.c ****       sum = 0.0f;
  70              		.loc 1 631 0
  71 0038 0023     		mov	r3, #0
  72 003a 7B62     		str	r3, [r7, #36]
 632:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 633:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Loop to perform MAC operations according to convolution equation */
 634:Source\FilteringFunctions/arm_conv_partial_f32.c ****       for (j = 0u; j <= i; j++)
  73              		.loc 1 634 0
  74 003c 0023     		mov	r3, #0
  75 003e FB61     		str	r3, [r7, #28]
  76 0040 23E0     		b	.L5
  77              	.L7:
 635:Source\FilteringFunctions/arm_conv_partial_f32.c ****       {
 636:Source\FilteringFunctions/arm_conv_partial_f32.c ****         /* Check the array limitations for inputs */
 637:Source\FilteringFunctions/arm_conv_partial_f32.c ****         if ((((i - j) < srcBLen) && (j < srcALen)))
  78              		.loc 1 637 0
  79 0042 3A6A     		ldr	r2, [r7, #32]
  80 0044 FB69     		ldr	r3, [r7, #28]
  81 0046 D21A     		sub	r2, r2, r3
  82 0048 3B68     		ldr	r3, [r7]
  83 004a 9A42     		cmp	r2, r3
  84 004c 1AD2     		bcs	.L6
  85              		.loc 1 637 0 is_stmt 0 discriminator 1
  86 004e FA69     		ldr	r2, [r7, #28]
  87 0050 BB68     		ldr	r3, [r7, #8]
  88 0052 9A42     		cmp	r2, r3
  89 0054 16D2     		bcs	.L6
 638:Source\FilteringFunctions/arm_conv_partial_f32.c ****         {
 639:Source\FilteringFunctions/arm_conv_partial_f32.c ****           /* z[i] += x[i-j] * y[j] */
 640:Source\FilteringFunctions/arm_conv_partial_f32.c ****           sum += pIn1[j] * pIn2[i - j];
  90              		.loc 1 640 0 is_stmt 1
  91 0056 FB69     		ldr	r3, [r7, #28]
  92 0058 9B00     		lsl	r3, r3, #2
  93 005a 7A69     		ldr	r2, [r7, #20]
  94 005c D318     		add	r3, r2, r3
  95 005e 1968     		ldr	r1, [r3]
  96 0060 3A6A     		ldr	r2, [r7, #32]
  97 0062 FB69     		ldr	r3, [r7, #28]
  98 0064 D31A     		sub	r3, r2, r3
  99 0066 9B00     		lsl	r3, r3, #2
 100 0068 3A69     		ldr	r2, [r7, #16]
 101 006a D318     		add	r3, r2, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 14


 102 006c 1B68     		ldr	r3, [r3]
 103 006e 081C     		add	r0, r1, #0
 104 0070 191C     		add	r1, r3, #0
 105 0072 FFF7FEFF 		bl	__aeabi_fmul
 106 0076 031C     		add	r3, r0, #0
 107 0078 786A     		ldr	r0, [r7, #36]
 108 007a 191C     		add	r1, r3, #0
 109 007c FFF7FEFF 		bl	__aeabi_fadd
 110 0080 031C     		add	r3, r0, #0
 111 0082 7B62     		str	r3, [r7, #36]
 112              	.L6:
 634:Source\FilteringFunctions/arm_conv_partial_f32.c ****       {
 113              		.loc 1 634 0 discriminator 2
 114 0084 FB69     		ldr	r3, [r7, #28]
 115 0086 0133     		add	r3, r3, #1
 116 0088 FB61     		str	r3, [r7, #28]
 117              	.L5:
 634:Source\FilteringFunctions/arm_conv_partial_f32.c ****       {
 118              		.loc 1 634 0 is_stmt 0 discriminator 1
 119 008a FA69     		ldr	r2, [r7, #28]
 120 008c 3B6A     		ldr	r3, [r7, #32]
 121 008e 9A42     		cmp	r2, r3
 122 0090 D7D9     		bls	.L7
 641:Source\FilteringFunctions/arm_conv_partial_f32.c ****         }
 642:Source\FilteringFunctions/arm_conv_partial_f32.c ****       }
 643:Source\FilteringFunctions/arm_conv_partial_f32.c ****       /* Store the output in the destination buffer */
 644:Source\FilteringFunctions/arm_conv_partial_f32.c ****       pDst[i] = sum;
 123              		.loc 1 644 0 is_stmt 1 discriminator 2
 124 0092 3B6A     		ldr	r3, [r7, #32]
 125 0094 9B00     		lsl	r3, r3, #2
 126 0096 3A6B     		ldr	r2, [r7, #48]
 127 0098 D318     		add	r3, r2, r3
 128 009a 7A6A     		ldr	r2, [r7, #36]
 129 009c 1A60     		str	r2, [r3]
 628:Source\FilteringFunctions/arm_conv_partial_f32.c ****     {
 130              		.loc 1 628 0 discriminator 2
 131 009e 3B6A     		ldr	r3, [r7, #32]
 132 00a0 0133     		add	r3, r3, #1
 133 00a2 3B62     		str	r3, [r7, #32]
 134              	.L4:
 628:Source\FilteringFunctions/arm_conv_partial_f32.c ****     {
 135              		.loc 1 628 0 is_stmt 0 discriminator 1
 136 00a4 7A6B     		ldr	r2, [r7, #52]
 137 00a6 BB6B     		ldr	r3, [r7, #56]
 138 00a8 D318     		add	r3, r2, r3
 139 00aa 5A1E     		sub	r2, r3, #1
 140 00ac 3B6A     		ldr	r3, [r7, #32]
 141 00ae 9A42     		cmp	r2, r3
 142 00b0 C2D2     		bcs	.L8
 645:Source\FilteringFunctions/arm_conv_partial_f32.c ****     }
 646:Source\FilteringFunctions/arm_conv_partial_f32.c ****     /* set status as ARM_SUCCESS as there are no argument errors */
 647:Source\FilteringFunctions/arm_conv_partial_f32.c ****     status = ARM_MATH_SUCCESS;
 143              		.loc 1 647 0 is_stmt 1
 144 00b2 1B23     		mov	r3, #27
 145 00b4 FB18     		add	r3, r7, r3
 146 00b6 0022     		mov	r2, #0
 147 00b8 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 15


 148              	.L3:
 648:Source\FilteringFunctions/arm_conv_partial_f32.c ****   }
 649:Source\FilteringFunctions/arm_conv_partial_f32.c ****   return (status);
 149              		.loc 1 649 0
 150 00ba 1B23     		mov	r3, #27
 151 00bc FB18     		add	r3, r7, r3
 152 00be 1B78     		ldrb	r3, [r3]
 153 00c0 5BB2     		sxtb	r3, r3
 650:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 651:Source\FilteringFunctions/arm_conv_partial_f32.c **** #endif /*   #if defined (ARM_MATH_DSP) */
 652:Source\FilteringFunctions/arm_conv_partial_f32.c **** 
 653:Source\FilteringFunctions/arm_conv_partial_f32.c **** }
 154              		.loc 1 653 0
 155 00c2 181C     		mov	r0, r3
 156 00c4 BD46     		mov	sp, r7
 157 00c6 0AB0     		add	sp, sp, #40
 158              		@ sp needed
 159 00c8 80BD     		pop	{r7, pc}
 160              		.cfi_endproc
 161              	.LFE82:
 162              		.size	arm_conv_partial_f32, .-arm_conv_partial_f32
 163 00ca C046     		.text
 164              	.Letext0:
 165              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 166              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 167              		.file 4 ".\\Include/arm_math.h"
 168              		.section	.debug_info,"",%progbits
 169              	.Ldebug_info0:
 170 0000 C1010000 		.4byte	0x1c1
 171 0004 0400     		.2byte	0x4
 172 0006 00000000 		.4byte	.Ldebug_abbrev0
 173 000a 04       		.byte	0x4
 174 000b 01       		.uleb128 0x1
 175 000c 83010000 		.4byte	.LASF35
 176 0010 01       		.byte	0x1
 177 0011 9A000000 		.4byte	.LASF36
 178 0015 22000000 		.4byte	.LASF37
 179 0019 00000000 		.4byte	.Ldebug_ranges0+0
 180 001d 00000000 		.4byte	0
 181 0021 00000000 		.4byte	.Ldebug_line0
 182 0025 02       		.uleb128 0x2
 183 0026 01       		.byte	0x1
 184 0027 06       		.byte	0x6
 185 0028 97020000 		.4byte	.LASF0
 186 002c 02       		.uleb128 0x2
 187 002d 01       		.byte	0x1
 188 002e 08       		.byte	0x8
 189 002f 8C000000 		.4byte	.LASF1
 190 0033 02       		.uleb128 0x2
 191 0034 02       		.byte	0x2
 192 0035 05       		.byte	0x5
 193 0036 5A020000 		.4byte	.LASF2
 194 003a 02       		.uleb128 0x2
 195 003b 02       		.byte	0x2
 196 003c 07       		.byte	0x7
 197 003d FE000000 		.4byte	.LASF3
 198 0041 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 16


 199 0042 04       		.byte	0x4
 200 0043 05       		.byte	0x5
 201 0044 82020000 		.4byte	.LASF4
 202 0048 03       		.uleb128 0x3
 203 0049 27010000 		.4byte	.LASF9
 204 004d 02       		.byte	0x2
 205 004e 41       		.byte	0x41
 206 004f 53000000 		.4byte	0x53
 207 0053 02       		.uleb128 0x2
 208 0054 04       		.byte	0x4
 209 0055 07       		.byte	0x7
 210 0056 EC000000 		.4byte	.LASF5
 211 005a 02       		.uleb128 0x2
 212 005b 08       		.byte	0x8
 213 005c 05       		.byte	0x5
 214 005d 2E020000 		.4byte	.LASF6
 215 0061 02       		.uleb128 0x2
 216 0062 08       		.byte	0x8
 217 0063 07       		.byte	0x7
 218 0064 6C010000 		.4byte	.LASF7
 219 0068 04       		.uleb128 0x4
 220 0069 04       		.byte	0x4
 221 006a 05       		.byte	0x5
 222 006b 696E7400 		.ascii	"int\000"
 223 006f 02       		.uleb128 0x2
 224 0070 04       		.byte	0x4
 225 0071 07       		.byte	0x7
 226 0072 5F010000 		.4byte	.LASF8
 227 0076 03       		.uleb128 0x3
 228 0077 79020000 		.4byte	.LASF10
 229 007b 03       		.byte	0x3
 230 007c 2D       		.byte	0x2d
 231 007d 48000000 		.4byte	0x48
 232 0081 02       		.uleb128 0x2
 233 0082 04       		.byte	0x4
 234 0083 07       		.byte	0x7
 235 0084 25020000 		.4byte	.LASF11
 236 0088 02       		.uleb128 0x2
 237 0089 01       		.byte	0x1
 238 008a 08       		.byte	0x8
 239 008b 3C020000 		.4byte	.LASF12
 240 008f 02       		.uleb128 0x2
 241 0090 08       		.byte	0x8
 242 0091 04       		.byte	0x4
 243 0092 16010000 		.4byte	.LASF13
 244 0096 02       		.uleb128 0x2
 245 0097 04       		.byte	0x4
 246 0098 04       		.byte	0x4
 247 0099 86000000 		.4byte	.LASF14
 248 009d 02       		.uleb128 0x2
 249 009e 08       		.byte	0x8
 250 009f 04       		.byte	0x4
 251 00a0 8B020000 		.4byte	.LASF15
 252 00a4 05       		.uleb128 0x5
 253 00a5 01       		.byte	0x1
 254 00a6 04       		.byte	0x4
 255 00a7 8401     		.2byte	0x184
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 17


 256 00a9 D8000000 		.4byte	0xd8
 257 00ad 06       		.uleb128 0x6
 258 00ae 49020000 		.4byte	.LASF16
 259 00b2 00       		.sleb128 0
 260 00b3 06       		.uleb128 0x6
 261 00b4 47010000 		.4byte	.LASF17
 262 00b8 7F       		.sleb128 -1
 263 00b9 06       		.uleb128 0x6
 264 00ba 00000000 		.4byte	.LASF18
 265 00be 7E       		.sleb128 -2
 266 00bf 06       		.uleb128 0x6
 267 00c0 6F000000 		.4byte	.LASF19
 268 00c4 7D       		.sleb128 -3
 269 00c5 06       		.uleb128 0x6
 270 00c6 15020000 		.4byte	.LASF20
 271 00ca 7C       		.sleb128 -4
 272 00cb 06       		.uleb128 0x6
 273 00cc B5020000 		.4byte	.LASF21
 274 00d0 7B       		.sleb128 -5
 275 00d1 06       		.uleb128 0x6
 276 00d2 D6000000 		.4byte	.LASF22
 277 00d6 7A       		.sleb128 -6
 278 00d7 00       		.byte	0
 279 00d8 07       		.uleb128 0x7
 280 00d9 6E020000 		.4byte	.LASF23
 281 00dd 04       		.byte	0x4
 282 00de 8C01     		.2byte	0x18c
 283 00e0 A4000000 		.4byte	0xa4
 284 00e4 07       		.uleb128 0x7
 285 00e5 1D010000 		.4byte	.LASF24
 286 00e9 04       		.byte	0x4
 287 00ea A501     		.2byte	0x1a5
 288 00ec 96000000 		.4byte	0x96
 289 00f0 08       		.uleb128 0x8
 290 00f1 04       		.byte	0x4
 291 00f2 E4000000 		.4byte	0xe4
 292 00f6 09       		.uleb128 0x9
 293 00f7 32010000 		.4byte	.LASF38
 294 00fb 01       		.byte	0x1
 295 00fc 53       		.byte	0x53
 296 00fd D8000000 		.4byte	0xd8
 297 0101 00000000 		.4byte	.LFB82
 298 0105 CA000000 		.4byte	.LFE82-.LFB82
 299 0109 01       		.uleb128 0x1
 300 010a 9C       		.byte	0x9c
 301 010b 0A       		.uleb128 0xa
 302 010c 16000000 		.4byte	.LASF25
 303 0110 01       		.byte	0x1
 304 0111 54       		.byte	0x54
 305 0112 F0000000 		.4byte	0xf0
 306 0116 02       		.uleb128 0x2
 307 0117 91       		.byte	0x91
 308 0118 5C       		.sleb128 -36
 309 0119 0A       		.uleb128 0xa
 310 011a 41020000 		.4byte	.LASF26
 311 011e 01       		.byte	0x1
 312 011f 55       		.byte	0x55
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 18


 313 0120 76000000 		.4byte	0x76
 314 0124 02       		.uleb128 0x2
 315 0125 91       		.byte	0x91
 316 0126 58       		.sleb128 -40
 317 0127 0A       		.uleb128 0xa
 318 0128 1C000000 		.4byte	.LASF27
 319 012c 01       		.byte	0x1
 320 012d 56       		.byte	0x56
 321 012e F0000000 		.4byte	0xf0
 322 0132 02       		.uleb128 0x2
 323 0133 91       		.byte	0x91
 324 0134 54       		.sleb128 -44
 325 0135 0A       		.uleb128 0xa
 326 0136 A3020000 		.4byte	.LASF28
 327 013a 01       		.byte	0x1
 328 013b 57       		.byte	0x57
 329 013c 76000000 		.4byte	0x76
 330 0140 02       		.uleb128 0x2
 331 0141 91       		.byte	0x91
 332 0142 50       		.sleb128 -48
 333 0143 0A       		.uleb128 0xa
 334 0144 11010000 		.4byte	.LASF29
 335 0148 01       		.byte	0x1
 336 0149 58       		.byte	0x58
 337 014a F0000000 		.4byte	0xf0
 338 014e 02       		.uleb128 0x2
 339 014f 91       		.byte	0x91
 340 0150 00       		.sleb128 0
 341 0151 0A       		.uleb128 0xa
 342 0152 CB000000 		.4byte	.LASF30
 343 0156 01       		.byte	0x1
 344 0157 59       		.byte	0x59
 345 0158 76000000 		.4byte	0x76
 346 015c 02       		.uleb128 0x2
 347 015d 91       		.byte	0x91
 348 015e 04       		.sleb128 4
 349 015f 0A       		.uleb128 0xa
 350 0160 64020000 		.4byte	.LASF31
 351 0164 01       		.byte	0x1
 352 0165 5A       		.byte	0x5a
 353 0166 76000000 		.4byte	0x76
 354 016a 02       		.uleb128 0x2
 355 016b 91       		.byte	0x91
 356 016c 08       		.sleb128 8
 357 016d 0B       		.uleb128 0xb
 358 016e AB020000 		.4byte	.LASF32
 359 0172 01       		.byte	0x1
 360 0173 6502     		.2byte	0x265
 361 0175 F0000000 		.4byte	0xf0
 362 0179 02       		.uleb128 0x2
 363 017a 91       		.byte	0x91
 364 017b 64       		.sleb128 -28
 365 017c 0B       		.uleb128 0xb
 366 017d B0020000 		.4byte	.LASF33
 367 0181 01       		.byte	0x1
 368 0182 6602     		.2byte	0x266
 369 0184 F0000000 		.4byte	0xf0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 19


 370 0188 02       		.uleb128 0x2
 371 0189 91       		.byte	0x91
 372 018a 60       		.sleb128 -32
 373 018b 0C       		.uleb128 0xc
 374 018c 73756D00 		.ascii	"sum\000"
 375 0190 01       		.byte	0x1
 376 0191 6702     		.2byte	0x267
 377 0193 E4000000 		.4byte	0xe4
 378 0197 02       		.uleb128 0x2
 379 0198 91       		.byte	0x91
 380 0199 74       		.sleb128 -12
 381 019a 0C       		.uleb128 0xc
 382 019b 6900     		.ascii	"i\000"
 383 019d 01       		.byte	0x1
 384 019e 6802     		.2byte	0x268
 385 01a0 76000000 		.4byte	0x76
 386 01a4 02       		.uleb128 0x2
 387 01a5 91       		.byte	0x91
 388 01a6 70       		.sleb128 -16
 389 01a7 0C       		.uleb128 0xc
 390 01a8 6A00     		.ascii	"j\000"
 391 01aa 01       		.byte	0x1
 392 01ab 6802     		.2byte	0x268
 393 01ad 76000000 		.4byte	0x76
 394 01b1 02       		.uleb128 0x2
 395 01b2 91       		.byte	0x91
 396 01b3 6C       		.sleb128 -20
 397 01b4 0B       		.uleb128 0xb
 398 01b5 68000000 		.4byte	.LASF34
 399 01b9 01       		.byte	0x1
 400 01ba 6902     		.2byte	0x269
 401 01bc D8000000 		.4byte	0xd8
 402 01c0 02       		.uleb128 0x2
 403 01c1 91       		.byte	0x91
 404 01c2 6B       		.sleb128 -21
 405 01c3 00       		.byte	0
 406 01c4 00       		.byte	0
 407              		.section	.debug_abbrev,"",%progbits
 408              	.Ldebug_abbrev0:
 409 0000 01       		.uleb128 0x1
 410 0001 11       		.uleb128 0x11
 411 0002 01       		.byte	0x1
 412 0003 25       		.uleb128 0x25
 413 0004 0E       		.uleb128 0xe
 414 0005 13       		.uleb128 0x13
 415 0006 0B       		.uleb128 0xb
 416 0007 03       		.uleb128 0x3
 417 0008 0E       		.uleb128 0xe
 418 0009 1B       		.uleb128 0x1b
 419 000a 0E       		.uleb128 0xe
 420 000b 55       		.uleb128 0x55
 421 000c 17       		.uleb128 0x17
 422 000d 11       		.uleb128 0x11
 423 000e 01       		.uleb128 0x1
 424 000f 10       		.uleb128 0x10
 425 0010 17       		.uleb128 0x17
 426 0011 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 20


 427 0012 00       		.byte	0
 428 0013 02       		.uleb128 0x2
 429 0014 24       		.uleb128 0x24
 430 0015 00       		.byte	0
 431 0016 0B       		.uleb128 0xb
 432 0017 0B       		.uleb128 0xb
 433 0018 3E       		.uleb128 0x3e
 434 0019 0B       		.uleb128 0xb
 435 001a 03       		.uleb128 0x3
 436 001b 0E       		.uleb128 0xe
 437 001c 00       		.byte	0
 438 001d 00       		.byte	0
 439 001e 03       		.uleb128 0x3
 440 001f 16       		.uleb128 0x16
 441 0020 00       		.byte	0
 442 0021 03       		.uleb128 0x3
 443 0022 0E       		.uleb128 0xe
 444 0023 3A       		.uleb128 0x3a
 445 0024 0B       		.uleb128 0xb
 446 0025 3B       		.uleb128 0x3b
 447 0026 0B       		.uleb128 0xb
 448 0027 49       		.uleb128 0x49
 449 0028 13       		.uleb128 0x13
 450 0029 00       		.byte	0
 451 002a 00       		.byte	0
 452 002b 04       		.uleb128 0x4
 453 002c 24       		.uleb128 0x24
 454 002d 00       		.byte	0
 455 002e 0B       		.uleb128 0xb
 456 002f 0B       		.uleb128 0xb
 457 0030 3E       		.uleb128 0x3e
 458 0031 0B       		.uleb128 0xb
 459 0032 03       		.uleb128 0x3
 460 0033 08       		.uleb128 0x8
 461 0034 00       		.byte	0
 462 0035 00       		.byte	0
 463 0036 05       		.uleb128 0x5
 464 0037 04       		.uleb128 0x4
 465 0038 01       		.byte	0x1
 466 0039 0B       		.uleb128 0xb
 467 003a 0B       		.uleb128 0xb
 468 003b 3A       		.uleb128 0x3a
 469 003c 0B       		.uleb128 0xb
 470 003d 3B       		.uleb128 0x3b
 471 003e 05       		.uleb128 0x5
 472 003f 01       		.uleb128 0x1
 473 0040 13       		.uleb128 0x13
 474 0041 00       		.byte	0
 475 0042 00       		.byte	0
 476 0043 06       		.uleb128 0x6
 477 0044 28       		.uleb128 0x28
 478 0045 00       		.byte	0
 479 0046 03       		.uleb128 0x3
 480 0047 0E       		.uleb128 0xe
 481 0048 1C       		.uleb128 0x1c
 482 0049 0D       		.uleb128 0xd
 483 004a 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 21


 484 004b 00       		.byte	0
 485 004c 07       		.uleb128 0x7
 486 004d 16       		.uleb128 0x16
 487 004e 00       		.byte	0
 488 004f 03       		.uleb128 0x3
 489 0050 0E       		.uleb128 0xe
 490 0051 3A       		.uleb128 0x3a
 491 0052 0B       		.uleb128 0xb
 492 0053 3B       		.uleb128 0x3b
 493 0054 05       		.uleb128 0x5
 494 0055 49       		.uleb128 0x49
 495 0056 13       		.uleb128 0x13
 496 0057 00       		.byte	0
 497 0058 00       		.byte	0
 498 0059 08       		.uleb128 0x8
 499 005a 0F       		.uleb128 0xf
 500 005b 00       		.byte	0
 501 005c 0B       		.uleb128 0xb
 502 005d 0B       		.uleb128 0xb
 503 005e 49       		.uleb128 0x49
 504 005f 13       		.uleb128 0x13
 505 0060 00       		.byte	0
 506 0061 00       		.byte	0
 507 0062 09       		.uleb128 0x9
 508 0063 2E       		.uleb128 0x2e
 509 0064 01       		.byte	0x1
 510 0065 3F       		.uleb128 0x3f
 511 0066 19       		.uleb128 0x19
 512 0067 03       		.uleb128 0x3
 513 0068 0E       		.uleb128 0xe
 514 0069 3A       		.uleb128 0x3a
 515 006a 0B       		.uleb128 0xb
 516 006b 3B       		.uleb128 0x3b
 517 006c 0B       		.uleb128 0xb
 518 006d 27       		.uleb128 0x27
 519 006e 19       		.uleb128 0x19
 520 006f 49       		.uleb128 0x49
 521 0070 13       		.uleb128 0x13
 522 0071 11       		.uleb128 0x11
 523 0072 01       		.uleb128 0x1
 524 0073 12       		.uleb128 0x12
 525 0074 06       		.uleb128 0x6
 526 0075 40       		.uleb128 0x40
 527 0076 18       		.uleb128 0x18
 528 0077 9642     		.uleb128 0x2116
 529 0079 19       		.uleb128 0x19
 530 007a 00       		.byte	0
 531 007b 00       		.byte	0
 532 007c 0A       		.uleb128 0xa
 533 007d 05       		.uleb128 0x5
 534 007e 00       		.byte	0
 535 007f 03       		.uleb128 0x3
 536 0080 0E       		.uleb128 0xe
 537 0081 3A       		.uleb128 0x3a
 538 0082 0B       		.uleb128 0xb
 539 0083 3B       		.uleb128 0x3b
 540 0084 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 22


 541 0085 49       		.uleb128 0x49
 542 0086 13       		.uleb128 0x13
 543 0087 02       		.uleb128 0x2
 544 0088 18       		.uleb128 0x18
 545 0089 00       		.byte	0
 546 008a 00       		.byte	0
 547 008b 0B       		.uleb128 0xb
 548 008c 34       		.uleb128 0x34
 549 008d 00       		.byte	0
 550 008e 03       		.uleb128 0x3
 551 008f 0E       		.uleb128 0xe
 552 0090 3A       		.uleb128 0x3a
 553 0091 0B       		.uleb128 0xb
 554 0092 3B       		.uleb128 0x3b
 555 0093 05       		.uleb128 0x5
 556 0094 49       		.uleb128 0x49
 557 0095 13       		.uleb128 0x13
 558 0096 02       		.uleb128 0x2
 559 0097 18       		.uleb128 0x18
 560 0098 00       		.byte	0
 561 0099 00       		.byte	0
 562 009a 0C       		.uleb128 0xc
 563 009b 34       		.uleb128 0x34
 564 009c 00       		.byte	0
 565 009d 03       		.uleb128 0x3
 566 009e 08       		.uleb128 0x8
 567 009f 3A       		.uleb128 0x3a
 568 00a0 0B       		.uleb128 0xb
 569 00a1 3B       		.uleb128 0x3b
 570 00a2 05       		.uleb128 0x5
 571 00a3 49       		.uleb128 0x49
 572 00a4 13       		.uleb128 0x13
 573 00a5 02       		.uleb128 0x2
 574 00a6 18       		.uleb128 0x18
 575 00a7 00       		.byte	0
 576 00a8 00       		.byte	0
 577 00a9 00       		.byte	0
 578              		.section	.debug_aranges,"",%progbits
 579 0000 1C000000 		.4byte	0x1c
 580 0004 0200     		.2byte	0x2
 581 0006 00000000 		.4byte	.Ldebug_info0
 582 000a 04       		.byte	0x4
 583 000b 00       		.byte	0
 584 000c 0000     		.2byte	0
 585 000e 0000     		.2byte	0
 586 0010 00000000 		.4byte	.LFB82
 587 0014 CA000000 		.4byte	.LFE82-.LFB82
 588 0018 00000000 		.4byte	0
 589 001c 00000000 		.4byte	0
 590              		.section	.debug_ranges,"",%progbits
 591              	.Ldebug_ranges0:
 592 0000 00000000 		.4byte	.LFB82
 593 0004 CA000000 		.4byte	.LFE82
 594 0008 00000000 		.4byte	0
 595 000c 00000000 		.4byte	0
 596              		.section	.debug_line,"",%progbits
 597              	.Ldebug_line0:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 23


 598 0000 A9010000 		.section	.debug_str,"MS",%progbits,1
 598      02005701 
 598      00000201 
 598      FB0E0D00 
 598      01010101 
 599              	.LASF18:
 600 0000 41524D5F 		.ascii	"ARM_MATH_LENGTH_ERROR\000"
 600      4D415448 
 600      5F4C454E 
 600      4754485F 
 600      4552524F 
 601              	.LASF25:
 602 0016 70537263 		.ascii	"pSrcA\000"
 602      4100
 603              	.LASF27:
 604 001c 70537263 		.ascii	"pSrcB\000"
 604      4200
 605              	.LASF37:
 606 0022 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 606      73657273 
 606      5C666E65 
 606      7665735C 
 606      446F6375 
 607 004f 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 607      655F7370 
 607      6565645F 
 607      73656E73 
 607      6F722E63 
 608              	.LASF34:
 609 0068 73746174 		.ascii	"status\000"
 609      757300
 610              	.LASF19:
 611 006f 41524D5F 		.ascii	"ARM_MATH_SIZE_MISMATCH\000"
 611      4D415448 
 611      5F53495A 
 611      455F4D49 
 611      534D4154 
 612              	.LASF14:
 613 0086 666C6F61 		.ascii	"float\000"
 613      7400
 614              	.LASF1:
 615 008c 756E7369 		.ascii	"unsigned char\000"
 615      676E6564 
 615      20636861 
 615      7200
 616              	.LASF36:
 617 009a 536F7572 		.ascii	"Source\\FilteringFunctions\\arm_conv_partial_f32.c\000"
 617      63655C46 
 617      696C7465 
 617      72696E67 
 617      46756E63 
 618              	.LASF30:
 619 00cb 66697273 		.ascii	"firstIndex\000"
 619      74496E64 
 619      657800
 620              	.LASF22:
 621 00d6 41524D5F 		.ascii	"ARM_MATH_TEST_FAILURE\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 24


 621      4D415448 
 621      5F544553 
 621      545F4641 
 621      494C5552 
 622              	.LASF5:
 623 00ec 6C6F6E67 		.ascii	"long unsigned int\000"
 623      20756E73 
 623      69676E65 
 623      6420696E 
 623      7400
 624              	.LASF3:
 625 00fe 73686F72 		.ascii	"short unsigned int\000"
 625      7420756E 
 625      7369676E 
 625      65642069 
 625      6E7400
 626              	.LASF29:
 627 0111 70447374 		.ascii	"pDst\000"
 627      00
 628              	.LASF13:
 629 0116 646F7562 		.ascii	"double\000"
 629      6C6500
 630              	.LASF24:
 631 011d 666C6F61 		.ascii	"float32_t\000"
 631      7433325F 
 631      7400
 632              	.LASF9:
 633 0127 5F5F7569 		.ascii	"__uint32_t\000"
 633      6E743332 
 633      5F7400
 634              	.LASF38:
 635 0132 61726D5F 		.ascii	"arm_conv_partial_f32\000"
 635      636F6E76 
 635      5F706172 
 635      7469616C 
 635      5F663332 
 636              	.LASF17:
 637 0147 41524D5F 		.ascii	"ARM_MATH_ARGUMENT_ERROR\000"
 637      4D415448 
 637      5F415247 
 637      554D454E 
 637      545F4552 
 638              	.LASF8:
 639 015f 756E7369 		.ascii	"unsigned int\000"
 639      676E6564 
 639      20696E74 
 639      00
 640              	.LASF7:
 641 016c 6C6F6E67 		.ascii	"long long unsigned int\000"
 641      206C6F6E 
 641      6720756E 
 641      7369676E 
 641      65642069 
 642              	.LASF35:
 643 0183 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 643      4320342E 
 643      392E3320 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 25


 643      32303135 
 643      30333033 
 644 01b6 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 644      20726576 
 644      6973696F 
 644      6E203232 
 644      31323230 
 645 01e9 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 645      30202D66 
 645      66756E63 
 645      74696F6E 
 645      2D736563 
 646              	.LASF20:
 647 0215 41524D5F 		.ascii	"ARM_MATH_NANINF\000"
 647      4D415448 
 647      5F4E414E 
 647      494E4600 
 648              	.LASF11:
 649 0225 73697A65 		.ascii	"sizetype\000"
 649      74797065 
 649      00
 650              	.LASF6:
 651 022e 6C6F6E67 		.ascii	"long long int\000"
 651      206C6F6E 
 651      6720696E 
 651      7400
 652              	.LASF12:
 653 023c 63686172 		.ascii	"char\000"
 653      00
 654              	.LASF26:
 655 0241 73726341 		.ascii	"srcALen\000"
 655      4C656E00 
 656              	.LASF16:
 657 0249 41524D5F 		.ascii	"ARM_MATH_SUCCESS\000"
 657      4D415448 
 657      5F535543 
 657      43455353 
 657      00
 658              	.LASF2:
 659 025a 73686F72 		.ascii	"short int\000"
 659      7420696E 
 659      7400
 660              	.LASF31:
 661 0264 6E756D50 		.ascii	"numPoints\000"
 661      6F696E74 
 661      7300
 662              	.LASF23:
 663 026e 61726D5F 		.ascii	"arm_status\000"
 663      73746174 
 663      757300
 664              	.LASF10:
 665 0279 75696E74 		.ascii	"uint32_t\000"
 665      33325F74 
 665      00
 666              	.LASF4:
 667 0282 6C6F6E67 		.ascii	"long int\000"
 667      20696E74 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQzfOzd.s 			page 26


 667      00
 668              	.LASF15:
 669 028b 6C6F6E67 		.ascii	"long double\000"
 669      20646F75 
 669      626C6500 
 670              	.LASF0:
 671 0297 7369676E 		.ascii	"signed char\000"
 671      65642063 
 671      68617200 
 672              	.LASF28:
 673 02a3 73726342 		.ascii	"srcBLen\000"
 673      4C656E00 
 674              	.LASF32:
 675 02ab 70496E31 		.ascii	"pIn1\000"
 675      00
 676              	.LASF33:
 677 02b0 70496E32 		.ascii	"pIn2\000"
 677      00
 678              	.LASF21:
 679 02b5 41524D5F 		.ascii	"ARM_MATH_SINGULAR\000"
 679      4D415448 
 679      5F53494E 
 679      47554C41 
 679      5200
 680              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
