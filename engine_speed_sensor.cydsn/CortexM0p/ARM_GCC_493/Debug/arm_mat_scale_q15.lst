ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_mat_scale_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_mat_scale_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_mat_scale_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_mat_scale_q15, %function
  23              	arm_mat_scale_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\MatrixFunctions\\arm_mat_scale_q15.c"
   1:Source\MatrixFunctions/arm_mat_scale_q15.c **** /* ----------------------------------------------------------------------
   2:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * Title:        arm_mat_scale_q15.c
   4:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * Description:  Multiplies a Q15 matrix by a scalar
   5:Source\MatrixFunctions/arm_mat_scale_q15.c ****  *
   6:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * $Date:        27. January 2017
   7:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * $Revision:    V.1.5.1
   8:Source\MatrixFunctions/arm_mat_scale_q15.c ****  *
   9:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\MatrixFunctions/arm_mat_scale_q15.c **** /*
  12:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\MatrixFunctions/arm_mat_scale_q15.c ****  *
  14:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\MatrixFunctions/arm_mat_scale_q15.c ****  *
  16:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * not use this file except in compliance with the License.
  18:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * You may obtain a copy of the License at
  19:Source\MatrixFunctions/arm_mat_scale_q15.c ****  *
  20:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\MatrixFunctions/arm_mat_scale_q15.c ****  *
  22:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * limitations under the License.
  27:Source\MatrixFunctions/arm_mat_scale_q15.c ****  */
  28:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
  29:Source\MatrixFunctions/arm_mat_scale_q15.c **** #include "arm_math.h"
  30:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
  31:Source\MatrixFunctions/arm_mat_scale_q15.c **** /**
  32:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * @ingroup groupMatrix
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 2


  33:Source\MatrixFunctions/arm_mat_scale_q15.c ****  */
  34:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
  35:Source\MatrixFunctions/arm_mat_scale_q15.c **** /**
  36:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * @addtogroup MatrixScale
  37:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * @{
  38:Source\MatrixFunctions/arm_mat_scale_q15.c ****  */
  39:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
  40:Source\MatrixFunctions/arm_mat_scale_q15.c **** /**
  41:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * @brief Q15 matrix scaling.
  42:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * @param[in]       *pSrc points to input matrix
  43:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * @param[in]       scaleFract fractional portion of the scale factor
  44:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * @param[in]       shift number of bits to shift the result by
  45:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * @param[out]      *pDst points to output matrix structure
  46:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * @return     		The function returns either
  47:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  48:Source\MatrixFunctions/arm_mat_scale_q15.c ****  *
  49:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * @details
  50:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  51:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * \par
  52:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.15 format.
  53:Source\MatrixFunctions/arm_mat_scale_q15.c ****  * These are multiplied to yield a 2.30 intermediate result and this is shifted with saturation to 
  54:Source\MatrixFunctions/arm_mat_scale_q15.c ****  */
  55:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
  56:Source\MatrixFunctions/arm_mat_scale_q15.c **** arm_status arm_mat_scale_q15(
  57:Source\MatrixFunctions/arm_mat_scale_q15.c ****   const arm_matrix_instance_q15 * pSrc,
  58:Source\MatrixFunctions/arm_mat_scale_q15.c ****   q15_t scaleFract,
  59:Source\MatrixFunctions/arm_mat_scale_q15.c ****   int32_t shift,
  60:Source\MatrixFunctions/arm_mat_scale_q15.c ****   arm_matrix_instance_q15 * pDst)
  61:Source\MatrixFunctions/arm_mat_scale_q15.c **** {
  26              		.loc 1 61 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 90B0     		sub	sp, sp, #64
  33              		.cfi_def_cfa_offset 72
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 7A60     		str	r2, [r7, #4]
  38 000a 3B60     		str	r3, [r7]
  39 000c 0A23     		mov	r3, #10
  40 000e FB18     		add	r3, r7, r3
  41 0010 0A1C     		add	r2, r1, #0
  42 0012 1A80     		strh	r2, [r3]
  62:Source\MatrixFunctions/arm_mat_scale_q15.c ****   q15_t *pIn = pSrc->pData;                      /* input data matrix pointer */
  43              		.loc 1 62 0
  44 0014 FB68     		ldr	r3, [r7, #12]
  45 0016 5B68     		ldr	r3, [r3, #4]
  46 0018 FB63     		str	r3, [r7, #60]
  63:Source\MatrixFunctions/arm_mat_scale_q15.c ****   q15_t *pOut = pDst->pData;                     /* output data matrix pointer */
  47              		.loc 1 63 0
  48 001a 3B68     		ldr	r3, [r7]
  49 001c 5B68     		ldr	r3, [r3, #4]
  50 001e BB63     		str	r3, [r7, #56]
  64:Source\MatrixFunctions/arm_mat_scale_q15.c ****   uint32_t numSamples;                           /* total number of elements in the matrix */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 3


  65:Source\MatrixFunctions/arm_mat_scale_q15.c ****   int32_t totShift = 15 - shift;                 /* total shift to apply after scaling */
  51              		.loc 1 65 0
  52 0020 7B68     		ldr	r3, [r7, #4]
  53 0022 0F22     		mov	r2, #15
  54 0024 D31A     		sub	r3, r2, r3
  55 0026 3B63     		str	r3, [r7, #48]
  66:Source\MatrixFunctions/arm_mat_scale_q15.c ****   uint32_t blkCnt;                               /* loop counters */
  67:Source\MatrixFunctions/arm_mat_scale_q15.c ****   arm_status status;                             /* status of matrix scaling     */
  68:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
  69:Source\MatrixFunctions/arm_mat_scale_q15.c **** #if defined (ARM_MATH_DSP)
  70:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
  71:Source\MatrixFunctions/arm_mat_scale_q15.c ****   q15_t in1, in2, in3, in4;
  72:Source\MatrixFunctions/arm_mat_scale_q15.c ****   q31_t out1, out2, out3, out4;
  73:Source\MatrixFunctions/arm_mat_scale_q15.c ****   q31_t inA1, inA2;
  74:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
  75:Source\MatrixFunctions/arm_mat_scale_q15.c **** #endif //     #if defined (ARM_MATH_DSP)
  76:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
  77:Source\MatrixFunctions/arm_mat_scale_q15.c **** #ifdef ARM_MATH_MATRIX_CHECK
  78:Source\MatrixFunctions/arm_mat_scale_q15.c ****   /* Check for matrix mismatch */
  79:Source\MatrixFunctions/arm_mat_scale_q15.c ****   if ((pSrc->numRows != pDst->numRows) || (pSrc->numCols != pDst->numCols))
  80:Source\MatrixFunctions/arm_mat_scale_q15.c ****   {
  81:Source\MatrixFunctions/arm_mat_scale_q15.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  82:Source\MatrixFunctions/arm_mat_scale_q15.c ****     status = ARM_MATH_SIZE_MISMATCH;
  83:Source\MatrixFunctions/arm_mat_scale_q15.c ****   }
  84:Source\MatrixFunctions/arm_mat_scale_q15.c ****   else
  85:Source\MatrixFunctions/arm_mat_scale_q15.c **** #endif //    #ifdef ARM_MATH_MATRIX_CHECK
  86:Source\MatrixFunctions/arm_mat_scale_q15.c ****   {
  87:Source\MatrixFunctions/arm_mat_scale_q15.c ****     /* Total number of samples in the input matrix */
  88:Source\MatrixFunctions/arm_mat_scale_q15.c ****     numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
  56              		.loc 1 88 0
  57 0028 FB68     		ldr	r3, [r7, #12]
  58 002a 1B88     		ldrh	r3, [r3]
  59 002c 1A1C     		mov	r2, r3
  60 002e FB68     		ldr	r3, [r7, #12]
  61 0030 5B88     		ldrh	r3, [r3, #2]
  62 0032 5343     		mul	r3, r2
  63 0034 FB62     		str	r3, [r7, #44]
  89:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
  90:Source\MatrixFunctions/arm_mat_scale_q15.c **** #if defined (ARM_MATH_DSP)
  91:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
  92:Source\MatrixFunctions/arm_mat_scale_q15.c ****     /* Run the below code for Cortex-M4 and Cortex-M3 */
  93:Source\MatrixFunctions/arm_mat_scale_q15.c ****     /* Loop Unrolling */
  94:Source\MatrixFunctions/arm_mat_scale_q15.c ****     blkCnt = numSamples >> 2;
  95:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
  96:Source\MatrixFunctions/arm_mat_scale_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  97:Source\MatrixFunctions/arm_mat_scale_q15.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
  98:Source\MatrixFunctions/arm_mat_scale_q15.c ****     while (blkCnt > 0u)
  99:Source\MatrixFunctions/arm_mat_scale_q15.c ****     {
 100:Source\MatrixFunctions/arm_mat_scale_q15.c ****       /* C(m,n) = A(m,n) * k */
 101:Source\MatrixFunctions/arm_mat_scale_q15.c ****       /* Scale, saturate and then store the results in the destination buffer. */
 102:Source\MatrixFunctions/arm_mat_scale_q15.c ****       /* Reading 2 inputs from memory */
 103:Source\MatrixFunctions/arm_mat_scale_q15.c ****       inA1 = _SIMD32_OFFSET(pIn);
 104:Source\MatrixFunctions/arm_mat_scale_q15.c ****       inA2 = _SIMD32_OFFSET(pIn + 2);
 105:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 106:Source\MatrixFunctions/arm_mat_scale_q15.c ****       /* C = A * scale */
 107:Source\MatrixFunctions/arm_mat_scale_q15.c ****       /* Scale the inputs and then store the 2 results in the destination buffer
 108:Source\MatrixFunctions/arm_mat_scale_q15.c ****        * in single cycle by packing the outputs */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 4


 109:Source\MatrixFunctions/arm_mat_scale_q15.c ****       out1 = (q31_t) ((q15_t) (inA1 >> 16) * scaleFract);
 110:Source\MatrixFunctions/arm_mat_scale_q15.c ****       out2 = (q31_t) ((q15_t) inA1 * scaleFract);
 111:Source\MatrixFunctions/arm_mat_scale_q15.c ****       out3 = (q31_t) ((q15_t) (inA2 >> 16) * scaleFract);
 112:Source\MatrixFunctions/arm_mat_scale_q15.c ****       out4 = (q31_t) ((q15_t) inA2 * scaleFract);
 113:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 114:Source\MatrixFunctions/arm_mat_scale_q15.c ****       out1 = out1 >> totShift;
 115:Source\MatrixFunctions/arm_mat_scale_q15.c ****       inA1 = _SIMD32_OFFSET(pIn + 4);
 116:Source\MatrixFunctions/arm_mat_scale_q15.c ****       out2 = out2 >> totShift;
 117:Source\MatrixFunctions/arm_mat_scale_q15.c ****       inA2 = _SIMD32_OFFSET(pIn + 6);
 118:Source\MatrixFunctions/arm_mat_scale_q15.c ****       out3 = out3 >> totShift;
 119:Source\MatrixFunctions/arm_mat_scale_q15.c ****       out4 = out4 >> totShift;
 120:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 121:Source\MatrixFunctions/arm_mat_scale_q15.c ****       in1 = (q15_t) (__SSAT(out1, 16));
 122:Source\MatrixFunctions/arm_mat_scale_q15.c ****       in2 = (q15_t) (__SSAT(out2, 16));
 123:Source\MatrixFunctions/arm_mat_scale_q15.c ****       in3 = (q15_t) (__SSAT(out3, 16));
 124:Source\MatrixFunctions/arm_mat_scale_q15.c ****       in4 = (q15_t) (__SSAT(out4, 16));
 125:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 126:Source\MatrixFunctions/arm_mat_scale_q15.c ****       _SIMD32_OFFSET(pOut) = __PKHBT(in2, in1, 16);
 127:Source\MatrixFunctions/arm_mat_scale_q15.c ****       _SIMD32_OFFSET(pOut + 2) = __PKHBT(in4, in3, 16);
 128:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 129:Source\MatrixFunctions/arm_mat_scale_q15.c ****       /* update pointers to process next sampels */
 130:Source\MatrixFunctions/arm_mat_scale_q15.c ****       pIn += 4u;
 131:Source\MatrixFunctions/arm_mat_scale_q15.c ****       pOut += 4u;
 132:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 133:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 134:Source\MatrixFunctions/arm_mat_scale_q15.c ****       /* Decrement the numSamples loop counter */
 135:Source\MatrixFunctions/arm_mat_scale_q15.c ****       blkCnt--;
 136:Source\MatrixFunctions/arm_mat_scale_q15.c ****     }
 137:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 138:Source\MatrixFunctions/arm_mat_scale_q15.c ****     /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
 139:Source\MatrixFunctions/arm_mat_scale_q15.c ****      ** No loop unrolling is used. */
 140:Source\MatrixFunctions/arm_mat_scale_q15.c ****     blkCnt = numSamples % 0x4u;
 141:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 142:Source\MatrixFunctions/arm_mat_scale_q15.c **** #else
 143:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 144:Source\MatrixFunctions/arm_mat_scale_q15.c ****     /* Run the below code for Cortex-M0 */
 145:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 146:Source\MatrixFunctions/arm_mat_scale_q15.c ****     /* Initialize blkCnt with number of samples */
 147:Source\MatrixFunctions/arm_mat_scale_q15.c ****     blkCnt = numSamples;
  64              		.loc 1 147 0
  65 0036 FB6A     		ldr	r3, [r7, #44]
  66 0038 7B63     		str	r3, [r7, #52]
 148:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 149:Source\MatrixFunctions/arm_mat_scale_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 150:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 151:Source\MatrixFunctions/arm_mat_scale_q15.c ****     while (blkCnt > 0u)
  67              		.loc 1 151 0
  68 003a 40E0     		b	.L2
  69              	.L9:
 152:Source\MatrixFunctions/arm_mat_scale_q15.c ****     {
 153:Source\MatrixFunctions/arm_mat_scale_q15.c ****       /* C(m,n) = A(m,n) * k */
 154:Source\MatrixFunctions/arm_mat_scale_q15.c ****       /* Scale, saturate and then store the results in the destination buffer. */
 155:Source\MatrixFunctions/arm_mat_scale_q15.c ****       *pOut++ =
  70              		.loc 1 155 0
  71 003c BB6B     		ldr	r3, [r7, #56]
  72 003e 9A1C     		add	r2, r3, #2
  73 0040 BA63     		str	r2, [r7, #56]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 5


 156:Source\MatrixFunctions/arm_mat_scale_q15.c ****         (q15_t) (__SSAT(((q31_t) (*pIn++) * scaleFract) >> totShift, 16));
  74              		.loc 1 156 0
  75 0042 FA6B     		ldr	r2, [r7, #60]
  76 0044 911C     		add	r1, r2, #2
  77 0046 F963     		str	r1, [r7, #60]
  78 0048 1288     		ldrh	r2, [r2]
  79 004a 12B2     		sxth	r2, r2
  80 004c 0A21     		mov	r1, #10
  81 004e 7918     		add	r1, r7, r1
  82 0050 0020     		mov	r0, #0
  83 0052 095E     		ldrsh	r1, [r1, r0]
  84 0054 5143     		mul	r1, r2
  85 0056 3A6B     		ldr	r2, [r7, #48]
  86 0058 1141     		asr	r1, r1, r2
  87 005a 0A1C     		mov	r2, r1
  88 005c 7A62     		str	r2, [r7, #36]
  89 005e 1022     		mov	r2, #16
  90 0060 3A62     		str	r2, [r7, #32]
  91              	.LBB4:
  92              	.LBB5:
  93              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 6


  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 7


  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 8


 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 9


 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 10


 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 11


 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 12


 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 13


 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 14


 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 15


 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 16


 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 17


 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
  94              		.loc 2 699 0
  95 0062 0122     		mov	r2, #1
  96 0064 FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  97              		.loc 2 700 0
  98 0066 0022     		mov	r2, #0
  99 0068 BA61     		str	r2, [r7, #24]
 100 006a 05E0     		b	.L3
 101              	.L4:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 102              		.loc 2 702 0
 103 006c FA69     		ldr	r2, [r7, #28]
 104 006e 5200     		lsl	r2, r2, #1
 105 0070 FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 106              		.loc 2 700 0
 107 0072 BA69     		ldr	r2, [r7, #24]
 108 0074 0132     		add	r2, r2, #1
 109 0076 BA61     		str	r2, [r7, #24]
 110              	.L3:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 18


 111 0078 3A6A     		ldr	r2, [r7, #32]
 112 007a 013A     		sub	r2, r2, #1
 113 007c B969     		ldr	r1, [r7, #24]
 114 007e 9142     		cmp	r1, r2
 115 0080 F4D3     		bcc	.L4
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 116              		.loc 2 705 0
 117 0082 7A6A     		ldr	r2, [r7, #36]
 118 0084 002A     		cmp	r2, #0
 119 0086 09DD     		ble	.L5
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 120              		.loc 2 707 0
 121 0088 FA69     		ldr	r2, [r7, #28]
 122 008a 013A     		sub	r2, r2, #1
 123 008c FA61     		str	r2, [r7, #28]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 124              		.loc 2 709 0
 125 008e 796A     		ldr	r1, [r7, #36]
 126 0090 FA69     		ldr	r2, [r7, #28]
 127 0092 9142     		cmp	r1, r2
 128 0094 0CDD     		ble	.L11
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 129              		.loc 2 711 0
 130 0096 FA69     		ldr	r2, [r7, #28]
 131 0098 7A62     		str	r2, [r7, #36]
 132 009a 0AE0     		b	.L7
 133              	.L5:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 134              		.loc 2 716 0
 135 009c FA69     		ldr	r2, [r7, #28]
 136 009e 5242     		neg	r2, r2
 137 00a0 7A61     		str	r2, [r7, #20]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 138              		.loc 2 718 0
 139 00a2 796A     		ldr	r1, [r7, #36]
 140 00a4 7A69     		ldr	r2, [r7, #20]
 141 00a6 9142     		cmp	r1, r2
 142 00a8 03DA     		bge	.L7
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 143              		.loc 2 720 0
 144 00aa 7A69     		ldr	r2, [r7, #20]
 145 00ac 7A62     		str	r2, [r7, #36]
 146 00ae 00E0     		b	.L7
 147              	.L11:
 711:.\Include/arm_math.h ****       }
 148              		.loc 2 711 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 19


 149 00b0 C046     		mov	r8, r8
 150              	.L7:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 151              		.loc 2 723 0
 152 00b2 7A6A     		ldr	r2, [r7, #36]
 153              	.LBE5:
 154              	.LBE4:
 155              		.loc 1 156 0
 156 00b4 92B2     		uxth	r2, r2
 155:Source\MatrixFunctions/arm_mat_scale_q15.c ****         (q15_t) (__SSAT(((q31_t) (*pIn++) * scaleFract) >> totShift, 16));
 157              		.loc 1 155 0
 158 00b6 1A80     		strh	r2, [r3]
 157:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 158:Source\MatrixFunctions/arm_mat_scale_q15.c ****       /* Decrement the numSamples loop counter */
 159:Source\MatrixFunctions/arm_mat_scale_q15.c ****       blkCnt--;
 159              		.loc 1 159 0
 160 00b8 7B6B     		ldr	r3, [r7, #52]
 161 00ba 013B     		sub	r3, r3, #1
 162 00bc 7B63     		str	r3, [r7, #52]
 163              	.L2:
 151:Source\MatrixFunctions/arm_mat_scale_q15.c ****     {
 164              		.loc 1 151 0
 165 00be 7B6B     		ldr	r3, [r7, #52]
 166 00c0 002B     		cmp	r3, #0
 167 00c2 BBD1     		bne	.L9
 160:Source\MatrixFunctions/arm_mat_scale_q15.c ****     }
 161:Source\MatrixFunctions/arm_mat_scale_q15.c ****     /* Set status as ARM_MATH_SUCCESS */
 162:Source\MatrixFunctions/arm_mat_scale_q15.c ****     status = ARM_MATH_SUCCESS;
 168              		.loc 1 162 0
 169 00c4 2B23     		mov	r3, #43
 170 00c6 FB18     		add	r3, r7, r3
 171 00c8 0022     		mov	r2, #0
 172 00ca 1A70     		strb	r2, [r3]
 163:Source\MatrixFunctions/arm_mat_scale_q15.c ****   }
 164:Source\MatrixFunctions/arm_mat_scale_q15.c **** 
 165:Source\MatrixFunctions/arm_mat_scale_q15.c ****   /* Return to application */
 166:Source\MatrixFunctions/arm_mat_scale_q15.c ****   return (status);
 173              		.loc 1 166 0
 174 00cc 2B23     		mov	r3, #43
 175 00ce FB18     		add	r3, r7, r3
 176 00d0 1B78     		ldrb	r3, [r3]
 177 00d2 5BB2     		sxtb	r3, r3
 167:Source\MatrixFunctions/arm_mat_scale_q15.c **** }
 178              		.loc 1 167 0
 179 00d4 181C     		mov	r0, r3
 180 00d6 BD46     		mov	sp, r7
 181 00d8 10B0     		add	sp, sp, #64
 182              		@ sp needed
 183 00da 80BD     		pop	{r7, pc}
 184              		.cfi_endproc
 185              	.LFE82:
 186              		.size	arm_mat_scale_q15, .-arm_mat_scale_q15
 187              		.text
 188              	.Letext0:
 189              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 20


 190              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 191              		.section	.debug_info,"",%progbits
 192              	.Ldebug_info0:
 193 0000 C1020000 		.4byte	0x2c1
 194 0004 0400     		.2byte	0x4
 195 0006 00000000 		.4byte	.Ldebug_abbrev0
 196 000a 04       		.byte	0x4
 197 000b 01       		.uleb128 0x1
 198 000c 91010000 		.4byte	.LASF47
 199 0010 01       		.byte	0x1
 200 0011 06000000 		.4byte	.LASF48
 201 0015 4B000000 		.4byte	.LASF49
 202 0019 00000000 		.4byte	.Ldebug_ranges0+0
 203 001d 00000000 		.4byte	0
 204 0021 00000000 		.4byte	.Ldebug_line0
 205 0025 02       		.uleb128 0x2
 206 0026 01       		.byte	0x1
 207 0027 06       		.byte	0x6
 208 0028 ED020000 		.4byte	.LASF0
 209 002c 02       		.uleb128 0x2
 210 002d 01       		.byte	0x1
 211 002e 08       		.byte	0x8
 212 002f BB000000 		.4byte	.LASF1
 213 0033 03       		.uleb128 0x3
 214 0034 31000000 		.4byte	.LASF3
 215 0038 03       		.byte	0x3
 216 0039 29       		.byte	0x29
 217 003a 3E000000 		.4byte	0x3e
 218 003e 02       		.uleb128 0x2
 219 003f 02       		.byte	0x2
 220 0040 05       		.byte	0x5
 221 0041 B5020000 		.4byte	.LASF2
 222 0045 03       		.uleb128 0x3
 223 0046 38010000 		.4byte	.LASF4
 224 004a 03       		.byte	0x3
 225 004b 2B       		.byte	0x2b
 226 004c 50000000 		.4byte	0x50
 227 0050 02       		.uleb128 0x2
 228 0051 02       		.byte	0x2
 229 0052 07       		.byte	0x7
 230 0053 10010000 		.4byte	.LASF5
 231 0057 03       		.uleb128 0x3
 232 0058 41000000 		.4byte	.LASF6
 233 005c 03       		.byte	0x3
 234 005d 3F       		.byte	0x3f
 235 005e 62000000 		.4byte	0x62
 236 0062 02       		.uleb128 0x2
 237 0063 04       		.byte	0x4
 238 0064 05       		.byte	0x5
 239 0065 D8020000 		.4byte	.LASF7
 240 0069 03       		.uleb128 0x3
 241 006a 4A010000 		.4byte	.LASF8
 242 006e 03       		.byte	0x3
 243 006f 41       		.byte	0x41
 244 0070 74000000 		.4byte	0x74
 245 0074 02       		.uleb128 0x2
 246 0075 04       		.byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 21


 247 0076 07       		.byte	0x7
 248 0077 FE000000 		.4byte	.LASF9
 249 007b 02       		.uleb128 0x2
 250 007c 08       		.byte	0x8
 251 007d 05       		.byte	0x5
 252 007e 76020000 		.4byte	.LASF10
 253 0082 02       		.uleb128 0x2
 254 0083 08       		.byte	0x8
 255 0084 07       		.byte	0x7
 256 0085 7A010000 		.4byte	.LASF11
 257 0089 04       		.uleb128 0x4
 258 008a 04       		.byte	0x4
 259 008b 05       		.byte	0x5
 260 008c 696E7400 		.ascii	"int\000"
 261 0090 02       		.uleb128 0x2
 262 0091 04       		.byte	0x4
 263 0092 07       		.byte	0x7
 264 0093 6D010000 		.4byte	.LASF12
 265 0097 03       		.uleb128 0x3
 266 0098 40020000 		.4byte	.LASF13
 267 009c 04       		.byte	0x4
 268 009d 20       		.byte	0x20
 269 009e 33000000 		.4byte	0x33
 270 00a2 03       		.uleb128 0x3
 271 00a3 BF020000 		.4byte	.LASF14
 272 00a7 04       		.byte	0x4
 273 00a8 21       		.byte	0x21
 274 00a9 45000000 		.4byte	0x45
 275 00ad 03       		.uleb128 0x3
 276 00ae 65020000 		.4byte	.LASF15
 277 00b2 04       		.byte	0x4
 278 00b3 2C       		.byte	0x2c
 279 00b4 57000000 		.4byte	0x57
 280 00b8 03       		.uleb128 0x3
 281 00b9 CF020000 		.4byte	.LASF16
 282 00bd 04       		.byte	0x4
 283 00be 2D       		.byte	0x2d
 284 00bf 69000000 		.4byte	0x69
 285 00c3 02       		.uleb128 0x2
 286 00c4 04       		.byte	0x4
 287 00c5 07       		.byte	0x7
 288 00c6 6D020000 		.4byte	.LASF17
 289 00ca 02       		.uleb128 0x2
 290 00cb 01       		.byte	0x1
 291 00cc 08       		.byte	0x8
 292 00cd 84020000 		.4byte	.LASF18
 293 00d1 02       		.uleb128 0x2
 294 00d2 08       		.byte	0x8
 295 00d3 04       		.byte	0x4
 296 00d4 43010000 		.4byte	.LASF19
 297 00d8 02       		.uleb128 0x2
 298 00d9 04       		.byte	0x4
 299 00da 04       		.byte	0x4
 300 00db 3B000000 		.4byte	.LASF20
 301 00df 02       		.uleb128 0x2
 302 00e0 08       		.byte	0x8
 303 00e1 04       		.byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 22


 304 00e2 E1020000 		.4byte	.LASF21
 305 00e6 05       		.uleb128 0x5
 306 00e7 01       		.byte	0x1
 307 00e8 02       		.byte	0x2
 308 00e9 8401     		.2byte	0x184
 309 00eb 1A010000 		.4byte	0x11a
 310 00ef 06       		.uleb128 0x6
 311 00f0 99020000 		.4byte	.LASF22
 312 00f4 00       		.sleb128 0
 313 00f5 06       		.uleb128 0x6
 314 00f6 55010000 		.4byte	.LASF23
 315 00fa 7F       		.sleb128 -1
 316 00fb 06       		.uleb128 0x6
 317 00fc 48020000 		.4byte	.LASF24
 318 0100 7E       		.sleb128 -2
 319 0101 06       		.uleb128 0x6
 320 0102 23020000 		.4byte	.LASF25
 321 0106 7D       		.sleb128 -3
 322 0107 06       		.uleb128 0x6
 323 0108 89020000 		.4byte	.LASF26
 324 010c 7C       		.sleb128 -4
 325 010d 06       		.uleb128 0x6
 326 010e 24030000 		.4byte	.LASF27
 327 0112 7B       		.sleb128 -5
 328 0113 06       		.uleb128 0x6
 329 0114 E8000000 		.4byte	.LASF28
 330 0118 7A       		.sleb128 -6
 331 0119 00       		.byte	0
 332 011a 07       		.uleb128 0x7
 333 011b 11030000 		.4byte	.LASF29
 334 011f 02       		.byte	0x2
 335 0120 8C01     		.2byte	0x18c
 336 0122 E6000000 		.4byte	0xe6
 337 0126 07       		.uleb128 0x7
 338 0127 3A020000 		.4byte	.LASF30
 339 012b 02       		.byte	0x2
 340 012c 9601     		.2byte	0x196
 341 012e 97000000 		.4byte	0x97
 342 0132 07       		.uleb128 0x7
 343 0133 B5000000 		.4byte	.LASF31
 344 0137 02       		.byte	0x2
 345 0138 9B01     		.2byte	0x19b
 346 013a AD000000 		.4byte	0xad
 347 013e 08       		.uleb128 0x8
 348 013f 04       		.byte	0x4
 349 0140 26010000 		.4byte	0x126
 350 0144 09       		.uleb128 0x9
 351 0145 08       		.byte	0x8
 352 0146 02       		.byte	0x2
 353 0147 AF05     		.2byte	0x5af
 354 0149 75010000 		.4byte	0x175
 355 014d 0A       		.uleb128 0xa
 356 014e F9020000 		.4byte	.LASF32
 357 0152 02       		.byte	0x2
 358 0153 B105     		.2byte	0x5b1
 359 0155 A2000000 		.4byte	0xa2
 360 0159 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 23


 361 015a 0A       		.uleb128 0xa
 362 015b 1C030000 		.4byte	.LASF33
 363 015f 02       		.byte	0x2
 364 0160 B205     		.2byte	0x5b2
 365 0162 A2000000 		.4byte	0xa2
 366 0166 02       		.byte	0x2
 367 0167 0A       		.uleb128 0xa
 368 0168 98000000 		.4byte	.LASF34
 369 016c 02       		.byte	0x2
 370 016d B305     		.2byte	0x5b3
 371 016f 3E010000 		.4byte	0x13e
 372 0173 04       		.byte	0x4
 373 0174 00       		.byte	0
 374 0175 07       		.uleb128 0x7
 375 0176 D0000000 		.4byte	.LASF35
 376 017a 02       		.byte	0x2
 377 017b B405     		.2byte	0x5b4
 378 017d 44010000 		.4byte	0x144
 379 0181 0B       		.uleb128 0xb
 380 0182 5E020000 		.4byte	.LASF50
 381 0186 02       		.byte	0x2
 382 0187 B402     		.2byte	0x2b4
 383 0189 32010000 		.4byte	0x132
 384 018d 03       		.byte	0x3
 385 018e C9010000 		.4byte	0x1c9
 386 0192 0C       		.uleb128 0xc
 387 0193 7800     		.ascii	"x\000"
 388 0195 02       		.byte	0x2
 389 0196 B502     		.2byte	0x2b5
 390 0198 32010000 		.4byte	0x132
 391 019c 0C       		.uleb128 0xc
 392 019d 7900     		.ascii	"y\000"
 393 019f 02       		.byte	0x2
 394 01a0 B602     		.2byte	0x2b6
 395 01a2 B8000000 		.4byte	0xb8
 396 01a6 0D       		.uleb128 0xd
 397 01a7 C8020000 		.4byte	.LASF36
 398 01ab 02       		.byte	0x2
 399 01ac B802     		.2byte	0x2b8
 400 01ae AD000000 		.4byte	0xad
 401 01b2 0D       		.uleb128 0xd
 402 01b3 28010000 		.4byte	.LASF37
 403 01b7 02       		.byte	0x2
 404 01b8 B802     		.2byte	0x2b8
 405 01ba AD000000 		.4byte	0xad
 406 01be 0E       		.uleb128 0xe
 407 01bf 6900     		.ascii	"i\000"
 408 01c1 02       		.byte	0x2
 409 01c2 B902     		.2byte	0x2b9
 410 01c4 B8000000 		.4byte	0xb8
 411 01c8 00       		.byte	0
 412 01c9 0F       		.uleb128 0xf
 413 01ca 9E000000 		.4byte	.LASF51
 414 01ce 01       		.byte	0x1
 415 01cf 38       		.byte	0x38
 416 01d0 1A010000 		.4byte	0x11a
 417 01d4 00000000 		.4byte	.LFB82
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 24


 418 01d8 DC000000 		.4byte	.LFE82-.LFB82
 419 01dc 01       		.uleb128 0x1
 420 01dd 9C       		.byte	0x9c
 421 01de B3020000 		.4byte	0x2b3
 422 01e2 10       		.uleb128 0x10
 423 01e3 01030000 		.4byte	.LASF38
 424 01e7 01       		.byte	0x1
 425 01e8 39       		.byte	0x39
 426 01e9 B3020000 		.4byte	0x2b3
 427 01ed 02       		.uleb128 0x2
 428 01ee 91       		.byte	0x91
 429 01ef 44       		.sleb128 -60
 430 01f0 10       		.uleb128 0x10
 431 01f1 AA020000 		.4byte	.LASF39
 432 01f5 01       		.byte	0x1
 433 01f6 3A       		.byte	0x3a
 434 01f7 26010000 		.4byte	0x126
 435 01fb 02       		.uleb128 0x2
 436 01fc 91       		.byte	0x91
 437 01fd 42       		.sleb128 -62
 438 01fe 10       		.uleb128 0x10
 439 01ff 00000000 		.4byte	.LASF40
 440 0203 01       		.byte	0x1
 441 0204 3B       		.byte	0x3b
 442 0205 AD000000 		.4byte	0xad
 443 0209 03       		.uleb128 0x3
 444 020a 91       		.byte	0x91
 445 020b BC7F     		.sleb128 -68
 446 020d 10       		.uleb128 0x10
 447 020e 23010000 		.4byte	.LASF41
 448 0212 01       		.byte	0x1
 449 0213 3C       		.byte	0x3c
 450 0214 BE020000 		.4byte	0x2be
 451 0218 03       		.uleb128 0x3
 452 0219 91       		.byte	0x91
 453 021a B87F     		.sleb128 -72
 454 021c 11       		.uleb128 0x11
 455 021d 70496E00 		.ascii	"pIn\000"
 456 0221 01       		.byte	0x1
 457 0222 3E       		.byte	0x3e
 458 0223 3E010000 		.4byte	0x13e
 459 0227 02       		.uleb128 0x2
 460 0228 91       		.byte	0x91
 461 0229 74       		.sleb128 -12
 462 022a 12       		.uleb128 0x12
 463 022b B0000000 		.4byte	.LASF42
 464 022f 01       		.byte	0x1
 465 0230 3F       		.byte	0x3f
 466 0231 3E010000 		.4byte	0x13e
 467 0235 02       		.uleb128 0x2
 468 0236 91       		.byte	0x91
 469 0237 70       		.sleb128 -16
 470 0238 12       		.uleb128 0x12
 471 0239 06030000 		.4byte	.LASF43
 472 023d 01       		.byte	0x1
 473 023e 40       		.byte	0x40
 474 023f B8000000 		.4byte	0xb8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 25


 475 0243 02       		.uleb128 0x2
 476 0244 91       		.byte	0x91
 477 0245 64       		.sleb128 -28
 478 0246 12       		.uleb128 0x12
 479 0247 2F010000 		.4byte	.LASF44
 480 024b 01       		.byte	0x1
 481 024c 41       		.byte	0x41
 482 024d AD000000 		.4byte	0xad
 483 0251 02       		.uleb128 0x2
 484 0252 91       		.byte	0x91
 485 0253 68       		.sleb128 -24
 486 0254 12       		.uleb128 0x12
 487 0255 C9000000 		.4byte	.LASF45
 488 0259 01       		.byte	0x1
 489 025a 42       		.byte	0x42
 490 025b B8000000 		.4byte	0xb8
 491 025f 02       		.uleb128 0x2
 492 0260 91       		.byte	0x91
 493 0261 6C       		.sleb128 -20
 494 0262 12       		.uleb128 0x12
 495 0263 91000000 		.4byte	.LASF46
 496 0267 01       		.byte	0x1
 497 0268 43       		.byte	0x43
 498 0269 1A010000 		.4byte	0x11a
 499 026d 02       		.uleb128 0x2
 500 026e 91       		.byte	0x91
 501 026f 63       		.sleb128 -29
 502 0270 13       		.uleb128 0x13
 503 0271 81010000 		.4byte	0x181
 504 0275 62000000 		.4byte	.LBB4
 505 0279 52000000 		.4byte	.LBE4-.LBB4
 506 027d 01       		.byte	0x1
 507 027e 9C       		.byte	0x9c
 508 027f 14       		.uleb128 0x14
 509 0280 9C010000 		.4byte	0x19c
 510 0284 02       		.uleb128 0x2
 511 0285 91       		.byte	0x91
 512 0286 58       		.sleb128 -40
 513 0287 14       		.uleb128 0x14
 514 0288 92010000 		.4byte	0x192
 515 028c 02       		.uleb128 0x2
 516 028d 91       		.byte	0x91
 517 028e 5C       		.sleb128 -36
 518 028f 15       		.uleb128 0x15
 519 0290 62000000 		.4byte	.LBB5
 520 0294 52000000 		.4byte	.LBE5-.LBB5
 521 0298 16       		.uleb128 0x16
 522 0299 A6010000 		.4byte	0x1a6
 523 029d 02       		.uleb128 0x2
 524 029e 91       		.byte	0x91
 525 029f 54       		.sleb128 -44
 526 02a0 16       		.uleb128 0x16
 527 02a1 B2010000 		.4byte	0x1b2
 528 02a5 02       		.uleb128 0x2
 529 02a6 91       		.byte	0x91
 530 02a7 4C       		.sleb128 -52
 531 02a8 16       		.uleb128 0x16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 26


 532 02a9 BE010000 		.4byte	0x1be
 533 02ad 02       		.uleb128 0x2
 534 02ae 91       		.byte	0x91
 535 02af 50       		.sleb128 -48
 536 02b0 00       		.byte	0
 537 02b1 00       		.byte	0
 538 02b2 00       		.byte	0
 539 02b3 08       		.uleb128 0x8
 540 02b4 04       		.byte	0x4
 541 02b5 B9020000 		.4byte	0x2b9
 542 02b9 17       		.uleb128 0x17
 543 02ba 75010000 		.4byte	0x175
 544 02be 08       		.uleb128 0x8
 545 02bf 04       		.byte	0x4
 546 02c0 75010000 		.4byte	0x175
 547 02c4 00       		.byte	0
 548              		.section	.debug_abbrev,"",%progbits
 549              	.Ldebug_abbrev0:
 550 0000 01       		.uleb128 0x1
 551 0001 11       		.uleb128 0x11
 552 0002 01       		.byte	0x1
 553 0003 25       		.uleb128 0x25
 554 0004 0E       		.uleb128 0xe
 555 0005 13       		.uleb128 0x13
 556 0006 0B       		.uleb128 0xb
 557 0007 03       		.uleb128 0x3
 558 0008 0E       		.uleb128 0xe
 559 0009 1B       		.uleb128 0x1b
 560 000a 0E       		.uleb128 0xe
 561 000b 55       		.uleb128 0x55
 562 000c 17       		.uleb128 0x17
 563 000d 11       		.uleb128 0x11
 564 000e 01       		.uleb128 0x1
 565 000f 10       		.uleb128 0x10
 566 0010 17       		.uleb128 0x17
 567 0011 00       		.byte	0
 568 0012 00       		.byte	0
 569 0013 02       		.uleb128 0x2
 570 0014 24       		.uleb128 0x24
 571 0015 00       		.byte	0
 572 0016 0B       		.uleb128 0xb
 573 0017 0B       		.uleb128 0xb
 574 0018 3E       		.uleb128 0x3e
 575 0019 0B       		.uleb128 0xb
 576 001a 03       		.uleb128 0x3
 577 001b 0E       		.uleb128 0xe
 578 001c 00       		.byte	0
 579 001d 00       		.byte	0
 580 001e 03       		.uleb128 0x3
 581 001f 16       		.uleb128 0x16
 582 0020 00       		.byte	0
 583 0021 03       		.uleb128 0x3
 584 0022 0E       		.uleb128 0xe
 585 0023 3A       		.uleb128 0x3a
 586 0024 0B       		.uleb128 0xb
 587 0025 3B       		.uleb128 0x3b
 588 0026 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 27


 589 0027 49       		.uleb128 0x49
 590 0028 13       		.uleb128 0x13
 591 0029 00       		.byte	0
 592 002a 00       		.byte	0
 593 002b 04       		.uleb128 0x4
 594 002c 24       		.uleb128 0x24
 595 002d 00       		.byte	0
 596 002e 0B       		.uleb128 0xb
 597 002f 0B       		.uleb128 0xb
 598 0030 3E       		.uleb128 0x3e
 599 0031 0B       		.uleb128 0xb
 600 0032 03       		.uleb128 0x3
 601 0033 08       		.uleb128 0x8
 602 0034 00       		.byte	0
 603 0035 00       		.byte	0
 604 0036 05       		.uleb128 0x5
 605 0037 04       		.uleb128 0x4
 606 0038 01       		.byte	0x1
 607 0039 0B       		.uleb128 0xb
 608 003a 0B       		.uleb128 0xb
 609 003b 3A       		.uleb128 0x3a
 610 003c 0B       		.uleb128 0xb
 611 003d 3B       		.uleb128 0x3b
 612 003e 05       		.uleb128 0x5
 613 003f 01       		.uleb128 0x1
 614 0040 13       		.uleb128 0x13
 615 0041 00       		.byte	0
 616 0042 00       		.byte	0
 617 0043 06       		.uleb128 0x6
 618 0044 28       		.uleb128 0x28
 619 0045 00       		.byte	0
 620 0046 03       		.uleb128 0x3
 621 0047 0E       		.uleb128 0xe
 622 0048 1C       		.uleb128 0x1c
 623 0049 0D       		.uleb128 0xd
 624 004a 00       		.byte	0
 625 004b 00       		.byte	0
 626 004c 07       		.uleb128 0x7
 627 004d 16       		.uleb128 0x16
 628 004e 00       		.byte	0
 629 004f 03       		.uleb128 0x3
 630 0050 0E       		.uleb128 0xe
 631 0051 3A       		.uleb128 0x3a
 632 0052 0B       		.uleb128 0xb
 633 0053 3B       		.uleb128 0x3b
 634 0054 05       		.uleb128 0x5
 635 0055 49       		.uleb128 0x49
 636 0056 13       		.uleb128 0x13
 637 0057 00       		.byte	0
 638 0058 00       		.byte	0
 639 0059 08       		.uleb128 0x8
 640 005a 0F       		.uleb128 0xf
 641 005b 00       		.byte	0
 642 005c 0B       		.uleb128 0xb
 643 005d 0B       		.uleb128 0xb
 644 005e 49       		.uleb128 0x49
 645 005f 13       		.uleb128 0x13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 28


 646 0060 00       		.byte	0
 647 0061 00       		.byte	0
 648 0062 09       		.uleb128 0x9
 649 0063 13       		.uleb128 0x13
 650 0064 01       		.byte	0x1
 651 0065 0B       		.uleb128 0xb
 652 0066 0B       		.uleb128 0xb
 653 0067 3A       		.uleb128 0x3a
 654 0068 0B       		.uleb128 0xb
 655 0069 3B       		.uleb128 0x3b
 656 006a 05       		.uleb128 0x5
 657 006b 01       		.uleb128 0x1
 658 006c 13       		.uleb128 0x13
 659 006d 00       		.byte	0
 660 006e 00       		.byte	0
 661 006f 0A       		.uleb128 0xa
 662 0070 0D       		.uleb128 0xd
 663 0071 00       		.byte	0
 664 0072 03       		.uleb128 0x3
 665 0073 0E       		.uleb128 0xe
 666 0074 3A       		.uleb128 0x3a
 667 0075 0B       		.uleb128 0xb
 668 0076 3B       		.uleb128 0x3b
 669 0077 05       		.uleb128 0x5
 670 0078 49       		.uleb128 0x49
 671 0079 13       		.uleb128 0x13
 672 007a 38       		.uleb128 0x38
 673 007b 0B       		.uleb128 0xb
 674 007c 00       		.byte	0
 675 007d 00       		.byte	0
 676 007e 0B       		.uleb128 0xb
 677 007f 2E       		.uleb128 0x2e
 678 0080 01       		.byte	0x1
 679 0081 03       		.uleb128 0x3
 680 0082 0E       		.uleb128 0xe
 681 0083 3A       		.uleb128 0x3a
 682 0084 0B       		.uleb128 0xb
 683 0085 3B       		.uleb128 0x3b
 684 0086 05       		.uleb128 0x5
 685 0087 27       		.uleb128 0x27
 686 0088 19       		.uleb128 0x19
 687 0089 49       		.uleb128 0x49
 688 008a 13       		.uleb128 0x13
 689 008b 20       		.uleb128 0x20
 690 008c 0B       		.uleb128 0xb
 691 008d 01       		.uleb128 0x1
 692 008e 13       		.uleb128 0x13
 693 008f 00       		.byte	0
 694 0090 00       		.byte	0
 695 0091 0C       		.uleb128 0xc
 696 0092 05       		.uleb128 0x5
 697 0093 00       		.byte	0
 698 0094 03       		.uleb128 0x3
 699 0095 08       		.uleb128 0x8
 700 0096 3A       		.uleb128 0x3a
 701 0097 0B       		.uleb128 0xb
 702 0098 3B       		.uleb128 0x3b
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 29


 703 0099 05       		.uleb128 0x5
 704 009a 49       		.uleb128 0x49
 705 009b 13       		.uleb128 0x13
 706 009c 00       		.byte	0
 707 009d 00       		.byte	0
 708 009e 0D       		.uleb128 0xd
 709 009f 34       		.uleb128 0x34
 710 00a0 00       		.byte	0
 711 00a1 03       		.uleb128 0x3
 712 00a2 0E       		.uleb128 0xe
 713 00a3 3A       		.uleb128 0x3a
 714 00a4 0B       		.uleb128 0xb
 715 00a5 3B       		.uleb128 0x3b
 716 00a6 05       		.uleb128 0x5
 717 00a7 49       		.uleb128 0x49
 718 00a8 13       		.uleb128 0x13
 719 00a9 00       		.byte	0
 720 00aa 00       		.byte	0
 721 00ab 0E       		.uleb128 0xe
 722 00ac 34       		.uleb128 0x34
 723 00ad 00       		.byte	0
 724 00ae 03       		.uleb128 0x3
 725 00af 08       		.uleb128 0x8
 726 00b0 3A       		.uleb128 0x3a
 727 00b1 0B       		.uleb128 0xb
 728 00b2 3B       		.uleb128 0x3b
 729 00b3 05       		.uleb128 0x5
 730 00b4 49       		.uleb128 0x49
 731 00b5 13       		.uleb128 0x13
 732 00b6 00       		.byte	0
 733 00b7 00       		.byte	0
 734 00b8 0F       		.uleb128 0xf
 735 00b9 2E       		.uleb128 0x2e
 736 00ba 01       		.byte	0x1
 737 00bb 3F       		.uleb128 0x3f
 738 00bc 19       		.uleb128 0x19
 739 00bd 03       		.uleb128 0x3
 740 00be 0E       		.uleb128 0xe
 741 00bf 3A       		.uleb128 0x3a
 742 00c0 0B       		.uleb128 0xb
 743 00c1 3B       		.uleb128 0x3b
 744 00c2 0B       		.uleb128 0xb
 745 00c3 27       		.uleb128 0x27
 746 00c4 19       		.uleb128 0x19
 747 00c5 49       		.uleb128 0x49
 748 00c6 13       		.uleb128 0x13
 749 00c7 11       		.uleb128 0x11
 750 00c8 01       		.uleb128 0x1
 751 00c9 12       		.uleb128 0x12
 752 00ca 06       		.uleb128 0x6
 753 00cb 40       		.uleb128 0x40
 754 00cc 18       		.uleb128 0x18
 755 00cd 9742     		.uleb128 0x2117
 756 00cf 19       		.uleb128 0x19
 757 00d0 01       		.uleb128 0x1
 758 00d1 13       		.uleb128 0x13
 759 00d2 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 30


 760 00d3 00       		.byte	0
 761 00d4 10       		.uleb128 0x10
 762 00d5 05       		.uleb128 0x5
 763 00d6 00       		.byte	0
 764 00d7 03       		.uleb128 0x3
 765 00d8 0E       		.uleb128 0xe
 766 00d9 3A       		.uleb128 0x3a
 767 00da 0B       		.uleb128 0xb
 768 00db 3B       		.uleb128 0x3b
 769 00dc 0B       		.uleb128 0xb
 770 00dd 49       		.uleb128 0x49
 771 00de 13       		.uleb128 0x13
 772 00df 02       		.uleb128 0x2
 773 00e0 18       		.uleb128 0x18
 774 00e1 00       		.byte	0
 775 00e2 00       		.byte	0
 776 00e3 11       		.uleb128 0x11
 777 00e4 34       		.uleb128 0x34
 778 00e5 00       		.byte	0
 779 00e6 03       		.uleb128 0x3
 780 00e7 08       		.uleb128 0x8
 781 00e8 3A       		.uleb128 0x3a
 782 00e9 0B       		.uleb128 0xb
 783 00ea 3B       		.uleb128 0x3b
 784 00eb 0B       		.uleb128 0xb
 785 00ec 49       		.uleb128 0x49
 786 00ed 13       		.uleb128 0x13
 787 00ee 02       		.uleb128 0x2
 788 00ef 18       		.uleb128 0x18
 789 00f0 00       		.byte	0
 790 00f1 00       		.byte	0
 791 00f2 12       		.uleb128 0x12
 792 00f3 34       		.uleb128 0x34
 793 00f4 00       		.byte	0
 794 00f5 03       		.uleb128 0x3
 795 00f6 0E       		.uleb128 0xe
 796 00f7 3A       		.uleb128 0x3a
 797 00f8 0B       		.uleb128 0xb
 798 00f9 3B       		.uleb128 0x3b
 799 00fa 0B       		.uleb128 0xb
 800 00fb 49       		.uleb128 0x49
 801 00fc 13       		.uleb128 0x13
 802 00fd 02       		.uleb128 0x2
 803 00fe 18       		.uleb128 0x18
 804 00ff 00       		.byte	0
 805 0100 00       		.byte	0
 806 0101 13       		.uleb128 0x13
 807 0102 1D       		.uleb128 0x1d
 808 0103 01       		.byte	0x1
 809 0104 31       		.uleb128 0x31
 810 0105 13       		.uleb128 0x13
 811 0106 11       		.uleb128 0x11
 812 0107 01       		.uleb128 0x1
 813 0108 12       		.uleb128 0x12
 814 0109 06       		.uleb128 0x6
 815 010a 58       		.uleb128 0x58
 816 010b 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 31


 817 010c 59       		.uleb128 0x59
 818 010d 0B       		.uleb128 0xb
 819 010e 00       		.byte	0
 820 010f 00       		.byte	0
 821 0110 14       		.uleb128 0x14
 822 0111 05       		.uleb128 0x5
 823 0112 00       		.byte	0
 824 0113 31       		.uleb128 0x31
 825 0114 13       		.uleb128 0x13
 826 0115 02       		.uleb128 0x2
 827 0116 18       		.uleb128 0x18
 828 0117 00       		.byte	0
 829 0118 00       		.byte	0
 830 0119 15       		.uleb128 0x15
 831 011a 0B       		.uleb128 0xb
 832 011b 01       		.byte	0x1
 833 011c 11       		.uleb128 0x11
 834 011d 01       		.uleb128 0x1
 835 011e 12       		.uleb128 0x12
 836 011f 06       		.uleb128 0x6
 837 0120 00       		.byte	0
 838 0121 00       		.byte	0
 839 0122 16       		.uleb128 0x16
 840 0123 34       		.uleb128 0x34
 841 0124 00       		.byte	0
 842 0125 31       		.uleb128 0x31
 843 0126 13       		.uleb128 0x13
 844 0127 02       		.uleb128 0x2
 845 0128 18       		.uleb128 0x18
 846 0129 00       		.byte	0
 847 012a 00       		.byte	0
 848 012b 17       		.uleb128 0x17
 849 012c 26       		.uleb128 0x26
 850 012d 00       		.byte	0
 851 012e 49       		.uleb128 0x49
 852 012f 13       		.uleb128 0x13
 853 0130 00       		.byte	0
 854 0131 00       		.byte	0
 855 0132 00       		.byte	0
 856              		.section	.debug_aranges,"",%progbits
 857 0000 1C000000 		.4byte	0x1c
 858 0004 0200     		.2byte	0x2
 859 0006 00000000 		.4byte	.Ldebug_info0
 860 000a 04       		.byte	0x4
 861 000b 00       		.byte	0
 862 000c 0000     		.2byte	0
 863 000e 0000     		.2byte	0
 864 0010 00000000 		.4byte	.LFB82
 865 0014 DC000000 		.4byte	.LFE82-.LFB82
 866 0018 00000000 		.4byte	0
 867 001c 00000000 		.4byte	0
 868              		.section	.debug_ranges,"",%progbits
 869              	.Ldebug_ranges0:
 870 0000 00000000 		.4byte	.LFB82
 871 0004 DC000000 		.4byte	.LFE82
 872 0008 00000000 		.4byte	0
 873 000c 00000000 		.4byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 32


 874              		.section	.debug_line,"",%progbits
 875              	.Ldebug_line0:
 876 0000 98010000 		.section	.debug_str,"MS",%progbits,1
 876      02005101 
 876      00000201 
 876      FB0E0D00 
 876      01010101 
 877              	.LASF40:
 878 0000 73686966 		.ascii	"shift\000"
 878      7400
 879              	.LASF48:
 880 0006 536F7572 		.ascii	"Source\\MatrixFunctions\\arm_mat_scale_q15.c\000"
 880      63655C4D 
 880      61747269 
 880      7846756E 
 880      6374696F 
 881              	.LASF3:
 882 0031 5F5F696E 		.ascii	"__int16_t\000"
 882      7431365F 
 882      7400
 883              	.LASF20:
 884 003b 666C6F61 		.ascii	"float\000"
 884      7400
 885              	.LASF6:
 886 0041 5F5F696E 		.ascii	"__int32_t\000"
 886      7433325F 
 886      7400
 887              	.LASF49:
 888 004b 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 888      73657273 
 888      5C666E65 
 888      7665735C 
 888      446F6375 
 889 0078 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 889      655F7370 
 889      6565645F 
 889      73656E73 
 889      6F722E63 
 890              	.LASF46:
 891 0091 73746174 		.ascii	"status\000"
 891      757300
 892              	.LASF34:
 893 0098 70446174 		.ascii	"pData\000"
 893      6100
 894              	.LASF51:
 895 009e 61726D5F 		.ascii	"arm_mat_scale_q15\000"
 895      6D61745F 
 895      7363616C 
 895      655F7131 
 895      3500
 896              	.LASF42:
 897 00b0 704F7574 		.ascii	"pOut\000"
 897      00
 898              	.LASF31:
 899 00b5 7133315F 		.ascii	"q31_t\000"
 899      7400
 900              	.LASF1:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 33


 901 00bb 756E7369 		.ascii	"unsigned char\000"
 901      676E6564 
 901      20636861 
 901      7200
 902              	.LASF45:
 903 00c9 626C6B43 		.ascii	"blkCnt\000"
 903      6E7400
 904              	.LASF35:
 905 00d0 61726D5F 		.ascii	"arm_matrix_instance_q15\000"
 905      6D617472 
 905      69785F69 
 905      6E737461 
 905      6E63655F 
 906              	.LASF28:
 907 00e8 41524D5F 		.ascii	"ARM_MATH_TEST_FAILURE\000"
 907      4D415448 
 907      5F544553 
 907      545F4641 
 907      494C5552 
 908              	.LASF9:
 909 00fe 6C6F6E67 		.ascii	"long unsigned int\000"
 909      20756E73 
 909      69676E65 
 909      6420696E 
 909      7400
 910              	.LASF5:
 911 0110 73686F72 		.ascii	"short unsigned int\000"
 911      7420756E 
 911      7369676E 
 911      65642069 
 911      6E7400
 912              	.LASF41:
 913 0123 70447374 		.ascii	"pDst\000"
 913      00
 914              	.LASF37:
 915 0128 6E65674D 		.ascii	"negMin\000"
 915      696E00
 916              	.LASF44:
 917 012f 746F7453 		.ascii	"totShift\000"
 917      68696674 
 917      00
 918              	.LASF4:
 919 0138 5F5F7569 		.ascii	"__uint16_t\000"
 919      6E743136 
 919      5F7400
 920              	.LASF19:
 921 0143 646F7562 		.ascii	"double\000"
 921      6C6500
 922              	.LASF8:
 923 014a 5F5F7569 		.ascii	"__uint32_t\000"
 923      6E743332 
 923      5F7400
 924              	.LASF23:
 925 0155 41524D5F 		.ascii	"ARM_MATH_ARGUMENT_ERROR\000"
 925      4D415448 
 925      5F415247 
 925      554D454E 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 34


 925      545F4552 
 926              	.LASF12:
 927 016d 756E7369 		.ascii	"unsigned int\000"
 927      676E6564 
 927      20696E74 
 927      00
 928              	.LASF11:
 929 017a 6C6F6E67 		.ascii	"long long unsigned int\000"
 929      206C6F6E 
 929      6720756E 
 929      7369676E 
 929      65642069 
 930              	.LASF47:
 931 0191 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 931      4320342E 
 931      392E3320 
 931      32303135 
 931      30333033 
 932 01c4 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 932      20726576 
 932      6973696F 
 932      6E203232 
 932      31323230 
 933 01f7 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 933      30202D66 
 933      66756E63 
 933      74696F6E 
 933      2D736563 
 934              	.LASF25:
 935 0223 41524D5F 		.ascii	"ARM_MATH_SIZE_MISMATCH\000"
 935      4D415448 
 935      5F53495A 
 935      455F4D49 
 935      534D4154 
 936              	.LASF30:
 937 023a 7131355F 		.ascii	"q15_t\000"
 937      7400
 938              	.LASF13:
 939 0240 696E7431 		.ascii	"int16_t\000"
 939      365F7400 
 940              	.LASF24:
 941 0248 41524D5F 		.ascii	"ARM_MATH_LENGTH_ERROR\000"
 941      4D415448 
 941      5F4C454E 
 941      4754485F 
 941      4552524F 
 942              	.LASF50:
 943 025e 5F5F5353 		.ascii	"__SSAT\000"
 943      415400
 944              	.LASF15:
 945 0265 696E7433 		.ascii	"int32_t\000"
 945      325F7400 
 946              	.LASF17:
 947 026d 73697A65 		.ascii	"sizetype\000"
 947      74797065 
 947      00
 948              	.LASF10:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 35


 949 0276 6C6F6E67 		.ascii	"long long int\000"
 949      206C6F6E 
 949      6720696E 
 949      7400
 950              	.LASF18:
 951 0284 63686172 		.ascii	"char\000"
 951      00
 952              	.LASF26:
 953 0289 41524D5F 		.ascii	"ARM_MATH_NANINF\000"
 953      4D415448 
 953      5F4E414E 
 953      494E4600 
 954              	.LASF22:
 955 0299 41524D5F 		.ascii	"ARM_MATH_SUCCESS\000"
 955      4D415448 
 955      5F535543 
 955      43455353 
 955      00
 956              	.LASF39:
 957 02aa 7363616C 		.ascii	"scaleFract\000"
 957      65467261 
 957      637400
 958              	.LASF2:
 959 02b5 73686F72 		.ascii	"short int\000"
 959      7420696E 
 959      7400
 960              	.LASF14:
 961 02bf 75696E74 		.ascii	"uint16_t\000"
 961      31365F74 
 961      00
 962              	.LASF36:
 963 02c8 706F734D 		.ascii	"posMax\000"
 963      617800
 964              	.LASF16:
 965 02cf 75696E74 		.ascii	"uint32_t\000"
 965      33325F74 
 965      00
 966              	.LASF7:
 967 02d8 6C6F6E67 		.ascii	"long int\000"
 967      20696E74 
 967      00
 968              	.LASF21:
 969 02e1 6C6F6E67 		.ascii	"long double\000"
 969      20646F75 
 969      626C6500 
 970              	.LASF0:
 971 02ed 7369676E 		.ascii	"signed char\000"
 971      65642063 
 971      68617200 
 972              	.LASF32:
 973 02f9 6E756D52 		.ascii	"numRows\000"
 973      6F777300 
 974              	.LASF38:
 975 0301 70537263 		.ascii	"pSrc\000"
 975      00
 976              	.LASF43:
 977 0306 6E756D53 		.ascii	"numSamples\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccPKLEJK.s 			page 36


 977      616D706C 
 977      657300
 978              	.LASF29:
 979 0311 61726D5F 		.ascii	"arm_status\000"
 979      73746174 
 979      757300
 980              	.LASF33:
 981 031c 6E756D43 		.ascii	"numCols\000"
 981      6F6C7300 
 982              	.LASF27:
 983 0324 41524D5F 		.ascii	"ARM_MATH_SINGULAR\000"
 983      4D415448 
 983      5F53494E 
 983      47554C41 
 983      5200
 984              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
