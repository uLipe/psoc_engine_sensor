ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_mat_add_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_mat_add_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_mat_add_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_mat_add_q15, %function
  23              	arm_mat_add_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\MatrixFunctions\\arm_mat_add_q15.c"
   1:Source\MatrixFunctions/arm_mat_add_q15.c **** /* ----------------------------------------------------------------------
   2:Source\MatrixFunctions/arm_mat_add_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\MatrixFunctions/arm_mat_add_q15.c ****  * Title:        arm_mat_add_q15.c
   4:Source\MatrixFunctions/arm_mat_add_q15.c ****  * Description:  Q15 matrix addition
   5:Source\MatrixFunctions/arm_mat_add_q15.c ****  *
   6:Source\MatrixFunctions/arm_mat_add_q15.c ****  * $Date:        27. January 2017
   7:Source\MatrixFunctions/arm_mat_add_q15.c ****  * $Revision:    V.1.5.1
   8:Source\MatrixFunctions/arm_mat_add_q15.c ****  *
   9:Source\MatrixFunctions/arm_mat_add_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\MatrixFunctions/arm_mat_add_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\MatrixFunctions/arm_mat_add_q15.c **** /*
  12:Source\MatrixFunctions/arm_mat_add_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\MatrixFunctions/arm_mat_add_q15.c ****  *
  14:Source\MatrixFunctions/arm_mat_add_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\MatrixFunctions/arm_mat_add_q15.c ****  *
  16:Source\MatrixFunctions/arm_mat_add_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\MatrixFunctions/arm_mat_add_q15.c ****  * not use this file except in compliance with the License.
  18:Source\MatrixFunctions/arm_mat_add_q15.c ****  * You may obtain a copy of the License at
  19:Source\MatrixFunctions/arm_mat_add_q15.c ****  *
  20:Source\MatrixFunctions/arm_mat_add_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\MatrixFunctions/arm_mat_add_q15.c ****  *
  22:Source\MatrixFunctions/arm_mat_add_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\MatrixFunctions/arm_mat_add_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\MatrixFunctions/arm_mat_add_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\MatrixFunctions/arm_mat_add_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\MatrixFunctions/arm_mat_add_q15.c ****  * limitations under the License.
  27:Source\MatrixFunctions/arm_mat_add_q15.c ****  */
  28:Source\MatrixFunctions/arm_mat_add_q15.c **** 
  29:Source\MatrixFunctions/arm_mat_add_q15.c **** #include "arm_math.h"
  30:Source\MatrixFunctions/arm_mat_add_q15.c **** 
  31:Source\MatrixFunctions/arm_mat_add_q15.c **** /**
  32:Source\MatrixFunctions/arm_mat_add_q15.c ****  * @ingroup groupMatrix
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 2


  33:Source\MatrixFunctions/arm_mat_add_q15.c ****  */
  34:Source\MatrixFunctions/arm_mat_add_q15.c **** 
  35:Source\MatrixFunctions/arm_mat_add_q15.c **** /**
  36:Source\MatrixFunctions/arm_mat_add_q15.c ****  * @addtogroup MatrixAdd
  37:Source\MatrixFunctions/arm_mat_add_q15.c ****  * @{
  38:Source\MatrixFunctions/arm_mat_add_q15.c ****  */
  39:Source\MatrixFunctions/arm_mat_add_q15.c **** 
  40:Source\MatrixFunctions/arm_mat_add_q15.c **** /**
  41:Source\MatrixFunctions/arm_mat_add_q15.c ****  * @brief Q15 matrix addition.
  42:Source\MatrixFunctions/arm_mat_add_q15.c ****  * @param[in]       *pSrcA points to the first input matrix structure
  43:Source\MatrixFunctions/arm_mat_add_q15.c ****  * @param[in]       *pSrcB points to the second input matrix structure
  44:Source\MatrixFunctions/arm_mat_add_q15.c ****  * @param[out]      *pDst points to output matrix structure
  45:Source\MatrixFunctions/arm_mat_add_q15.c ****  * @return     		The function returns either
  46:Source\MatrixFunctions/arm_mat_add_q15.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  47:Source\MatrixFunctions/arm_mat_add_q15.c ****  *
  48:Source\MatrixFunctions/arm_mat_add_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  49:Source\MatrixFunctions/arm_mat_add_q15.c ****  * \par
  50:Source\MatrixFunctions/arm_mat_add_q15.c ****  * The function uses saturating arithmetic.
  51:Source\MatrixFunctions/arm_mat_add_q15.c ****  * Results outside of the allowable Q15 range [0x8000 0x7FFF] will be saturated.
  52:Source\MatrixFunctions/arm_mat_add_q15.c ****  */
  53:Source\MatrixFunctions/arm_mat_add_q15.c **** 
  54:Source\MatrixFunctions/arm_mat_add_q15.c **** arm_status arm_mat_add_q15(
  55:Source\MatrixFunctions/arm_mat_add_q15.c ****   const arm_matrix_instance_q15 * pSrcA,
  56:Source\MatrixFunctions/arm_mat_add_q15.c ****   const arm_matrix_instance_q15 * pSrcB,
  57:Source\MatrixFunctions/arm_mat_add_q15.c ****   arm_matrix_instance_q15 * pDst)
  58:Source\MatrixFunctions/arm_mat_add_q15.c **** {
  26              		.loc 1 58 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 8EB0     		sub	sp, sp, #56
  33              		.cfi_def_cfa_offset 64
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 B960     		str	r1, [r7, #8]
  38 000a 7A60     		str	r2, [r7, #4]
  59:Source\MatrixFunctions/arm_mat_add_q15.c ****   q15_t *pInA = pSrcA->pData;                    /* input data matrix pointer A  */
  39              		.loc 1 59 0
  40 000c FB68     		ldr	r3, [r7, #12]
  41 000e 5B68     		ldr	r3, [r3, #4]
  42 0010 7B63     		str	r3, [r7, #52]
  60:Source\MatrixFunctions/arm_mat_add_q15.c ****   q15_t *pInB = pSrcB->pData;                    /* input data matrix pointer B */
  43              		.loc 1 60 0
  44 0012 BB68     		ldr	r3, [r7, #8]
  45 0014 5B68     		ldr	r3, [r3, #4]
  46 0016 3B63     		str	r3, [r7, #48]
  61:Source\MatrixFunctions/arm_mat_add_q15.c ****   q15_t *pOut = pDst->pData;                     /* output data matrix pointer */
  47              		.loc 1 61 0
  48 0018 7B68     		ldr	r3, [r7, #4]
  49 001a 5B68     		ldr	r3, [r3, #4]
  50 001c FB62     		str	r3, [r7, #44]
  62:Source\MatrixFunctions/arm_mat_add_q15.c ****   uint16_t numSamples;                           /* total number of elements in the matrix  */
  63:Source\MatrixFunctions/arm_mat_add_q15.c ****   uint32_t blkCnt;                               /* loop counters  */
  64:Source\MatrixFunctions/arm_mat_add_q15.c ****   arm_status status;                             /* status of matrix addition  */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 3


  65:Source\MatrixFunctions/arm_mat_add_q15.c **** 
  66:Source\MatrixFunctions/arm_mat_add_q15.c **** #ifdef ARM_MATH_MATRIX_CHECK
  67:Source\MatrixFunctions/arm_mat_add_q15.c **** 
  68:Source\MatrixFunctions/arm_mat_add_q15.c **** 
  69:Source\MatrixFunctions/arm_mat_add_q15.c ****   /* Check for matrix mismatch condition */
  70:Source\MatrixFunctions/arm_mat_add_q15.c ****   if ((pSrcA->numRows != pSrcB->numRows) ||
  71:Source\MatrixFunctions/arm_mat_add_q15.c ****      (pSrcA->numCols != pSrcB->numCols) ||
  72:Source\MatrixFunctions/arm_mat_add_q15.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcA->numCols != pDst->numCols))
  73:Source\MatrixFunctions/arm_mat_add_q15.c ****   {
  74:Source\MatrixFunctions/arm_mat_add_q15.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  75:Source\MatrixFunctions/arm_mat_add_q15.c ****     status = ARM_MATH_SIZE_MISMATCH;
  76:Source\MatrixFunctions/arm_mat_add_q15.c ****   }
  77:Source\MatrixFunctions/arm_mat_add_q15.c ****   else
  78:Source\MatrixFunctions/arm_mat_add_q15.c **** #endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  79:Source\MatrixFunctions/arm_mat_add_q15.c **** 
  80:Source\MatrixFunctions/arm_mat_add_q15.c ****   {
  81:Source\MatrixFunctions/arm_mat_add_q15.c ****     /* Total number of samples in the input matrix */
  82:Source\MatrixFunctions/arm_mat_add_q15.c ****     numSamples = (uint16_t) (pSrcA->numRows * pSrcA->numCols);
  51              		.loc 1 82 0
  52 001e FB68     		ldr	r3, [r7, #12]
  53 0020 1A88     		ldrh	r2, [r3]
  54 0022 FB68     		ldr	r3, [r7, #12]
  55 0024 5988     		ldrh	r1, [r3, #2]
  56 0026 2623     		mov	r3, #38
  57 0028 FB18     		add	r3, r7, r3
  58 002a 4A43     		mul	r2, r1
  59 002c 1A80     		strh	r2, [r3]
  83:Source\MatrixFunctions/arm_mat_add_q15.c **** 
  84:Source\MatrixFunctions/arm_mat_add_q15.c **** #if defined (ARM_MATH_DSP)
  85:Source\MatrixFunctions/arm_mat_add_q15.c **** 
  86:Source\MatrixFunctions/arm_mat_add_q15.c ****     /* Run the below code for Cortex-M4 and Cortex-M3 */
  87:Source\MatrixFunctions/arm_mat_add_q15.c **** 
  88:Source\MatrixFunctions/arm_mat_add_q15.c ****     /* Loop unrolling */
  89:Source\MatrixFunctions/arm_mat_add_q15.c ****     blkCnt = (uint32_t) numSamples >> 2u;
  90:Source\MatrixFunctions/arm_mat_add_q15.c **** 
  91:Source\MatrixFunctions/arm_mat_add_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  92:Source\MatrixFunctions/arm_mat_add_q15.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
  93:Source\MatrixFunctions/arm_mat_add_q15.c ****     while (blkCnt > 0u)
  94:Source\MatrixFunctions/arm_mat_add_q15.c ****     {
  95:Source\MatrixFunctions/arm_mat_add_q15.c ****       /* C(m,n) = A(m,n) + B(m,n) */
  96:Source\MatrixFunctions/arm_mat_add_q15.c ****       /* Add, Saturate and then store the results in the destination buffer. */
  97:Source\MatrixFunctions/arm_mat_add_q15.c ****       *__SIMD32(pOut)++ = __QADD16(*__SIMD32(pInA)++, *__SIMD32(pInB)++);
  98:Source\MatrixFunctions/arm_mat_add_q15.c ****       *__SIMD32(pOut)++ = __QADD16(*__SIMD32(pInA)++, *__SIMD32(pInB)++);
  99:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 100:Source\MatrixFunctions/arm_mat_add_q15.c ****       /* Decrement the loop counter */
 101:Source\MatrixFunctions/arm_mat_add_q15.c ****       blkCnt--;
 102:Source\MatrixFunctions/arm_mat_add_q15.c ****     }
 103:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 104:Source\MatrixFunctions/arm_mat_add_q15.c ****     /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 105:Source\MatrixFunctions/arm_mat_add_q15.c ****      ** No loop unrolling is used. */
 106:Source\MatrixFunctions/arm_mat_add_q15.c ****     blkCnt = (uint32_t) numSamples % 0x4u;
 107:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 108:Source\MatrixFunctions/arm_mat_add_q15.c ****     /* q15 pointers of input and output are initialized */
 109:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 110:Source\MatrixFunctions/arm_mat_add_q15.c ****     while (blkCnt > 0u)
 111:Source\MatrixFunctions/arm_mat_add_q15.c ****     {
 112:Source\MatrixFunctions/arm_mat_add_q15.c ****       /* C(m,n) = A(m,n) + B(m,n) */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 4


 113:Source\MatrixFunctions/arm_mat_add_q15.c ****       /* Add, Saturate and then store the results in the destination buffer. */
 114:Source\MatrixFunctions/arm_mat_add_q15.c ****       *pOut++ = (q15_t) __QADD16(*pInA++, *pInB++);
 115:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 116:Source\MatrixFunctions/arm_mat_add_q15.c ****       /* Decrement the loop counter */
 117:Source\MatrixFunctions/arm_mat_add_q15.c ****       blkCnt--;
 118:Source\MatrixFunctions/arm_mat_add_q15.c ****     }
 119:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 120:Source\MatrixFunctions/arm_mat_add_q15.c **** #else
 121:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 122:Source\MatrixFunctions/arm_mat_add_q15.c ****     /* Run the below code for Cortex-M0 */
 123:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 124:Source\MatrixFunctions/arm_mat_add_q15.c ****     /* Initialize blkCnt with number of samples */
 125:Source\MatrixFunctions/arm_mat_add_q15.c ****     blkCnt = (uint32_t) numSamples;
  60              		.loc 1 125 0
  61 002e 2623     		mov	r3, #38
  62 0030 FB18     		add	r3, r7, r3
  63 0032 1B88     		ldrh	r3, [r3]
  64 0034 BB62     		str	r3, [r7, #40]
 126:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 127:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 128:Source\MatrixFunctions/arm_mat_add_q15.c ****     /* q15 pointers of input and output are initialized */
 129:Source\MatrixFunctions/arm_mat_add_q15.c ****     while (blkCnt > 0u)
  65              		.loc 1 129 0
  66 0036 3EE0     		b	.L2
  67              	.L9:
 130:Source\MatrixFunctions/arm_mat_add_q15.c ****     {
 131:Source\MatrixFunctions/arm_mat_add_q15.c ****       /* C(m,n) = A(m,n) + B(m,n) */
 132:Source\MatrixFunctions/arm_mat_add_q15.c ****       /* Add, Saturate and then store the results in the destination buffer. */
 133:Source\MatrixFunctions/arm_mat_add_q15.c ****       *pOut++ = (q15_t) __SSAT(((q31_t) * pInA++ + *pInB++), 16);
  68              		.loc 1 133 0
  69 0038 FB6A     		ldr	r3, [r7, #44]
  70 003a 9A1C     		add	r2, r3, #2
  71 003c FA62     		str	r2, [r7, #44]
  72 003e 7A6B     		ldr	r2, [r7, #52]
  73 0040 911C     		add	r1, r2, #2
  74 0042 7963     		str	r1, [r7, #52]
  75 0044 1288     		ldrh	r2, [r2]
  76 0046 11B2     		sxth	r1, r2
  77 0048 3A6B     		ldr	r2, [r7, #48]
  78 004a 901C     		add	r0, r2, #2
  79 004c 3863     		str	r0, [r7, #48]
  80 004e 1288     		ldrh	r2, [r2]
  81 0050 12B2     		sxth	r2, r2
  82 0052 8A18     		add	r2, r1, r2
  83 0054 3A62     		str	r2, [r7, #32]
  84 0056 1022     		mov	r2, #16
  85 0058 FA61     		str	r2, [r7, #28]
  86              	.LBB4:
  87              	.LBB5:
  88              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 5


   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 6


  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 7


 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 8


 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 9


 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 10


 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 11


 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 12


 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 13


 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 14


 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 15


 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 16


 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 17


 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
  89              		.loc 2 699 0
  90 005a 0122     		mov	r2, #1
  91 005c BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  92              		.loc 2 700 0
  93 005e 0022     		mov	r2, #0
  94 0060 7A61     		str	r2, [r7, #20]
  95 0062 05E0     		b	.L3
  96              	.L4:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
  97              		.loc 2 702 0
  98 0064 BA69     		ldr	r2, [r7, #24]
  99 0066 5200     		lsl	r2, r2, #1
 100 0068 BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 101              		.loc 2 700 0
 102 006a 7A69     		ldr	r2, [r7, #20]
 103 006c 0132     		add	r2, r2, #1
 104 006e 7A61     		str	r2, [r7, #20]
 105              	.L3:
 106 0070 FA69     		ldr	r2, [r7, #28]
 107 0072 013A     		sub	r2, r2, #1
 108 0074 7969     		ldr	r1, [r7, #20]
 109 0076 9142     		cmp	r1, r2
 110 0078 F4D3     		bcc	.L4
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 111              		.loc 2 705 0
 112 007a 3A6A     		ldr	r2, [r7, #32]
 113 007c 002A     		cmp	r2, #0
 114 007e 09DD     		ble	.L5
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 115              		.loc 2 707 0
 116 0080 BA69     		ldr	r2, [r7, #24]
 117 0082 013A     		sub	r2, r2, #1
 118 0084 BA61     		str	r2, [r7, #24]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 119              		.loc 2 709 0
 120 0086 396A     		ldr	r1, [r7, #32]
 121 0088 BA69     		ldr	r2, [r7, #24]
 122 008a 9142     		cmp	r1, r2
 123 008c 0CDD     		ble	.L11
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 124              		.loc 2 711 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 18


 125 008e BA69     		ldr	r2, [r7, #24]
 126 0090 3A62     		str	r2, [r7, #32]
 127 0092 0AE0     		b	.L7
 128              	.L5:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 129              		.loc 2 716 0
 130 0094 BA69     		ldr	r2, [r7, #24]
 131 0096 5242     		neg	r2, r2
 132 0098 3A61     		str	r2, [r7, #16]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 133              		.loc 2 718 0
 134 009a 396A     		ldr	r1, [r7, #32]
 135 009c 3A69     		ldr	r2, [r7, #16]
 136 009e 9142     		cmp	r1, r2
 137 00a0 03DA     		bge	.L7
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 138              		.loc 2 720 0
 139 00a2 3A69     		ldr	r2, [r7, #16]
 140 00a4 3A62     		str	r2, [r7, #32]
 141 00a6 00E0     		b	.L7
 142              	.L11:
 711:.\Include/arm_math.h ****       }
 143              		.loc 2 711 0
 144 00a8 C046     		mov	r8, r8
 145              	.L7:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 146              		.loc 2 723 0
 147 00aa 3A6A     		ldr	r2, [r7, #32]
 148              	.LBE5:
 149              	.LBE4:
 150              		.loc 1 133 0
 151 00ac 92B2     		uxth	r2, r2
 152 00ae 1A80     		strh	r2, [r3]
 134:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 135:Source\MatrixFunctions/arm_mat_add_q15.c ****       /* Decrement the loop counter */
 136:Source\MatrixFunctions/arm_mat_add_q15.c ****       blkCnt--;
 153              		.loc 1 136 0
 154 00b0 BB6A     		ldr	r3, [r7, #40]
 155 00b2 013B     		sub	r3, r3, #1
 156 00b4 BB62     		str	r3, [r7, #40]
 157              	.L2:
 129:Source\MatrixFunctions/arm_mat_add_q15.c ****     {
 158              		.loc 1 129 0
 159 00b6 BB6A     		ldr	r3, [r7, #40]
 160 00b8 002B     		cmp	r3, #0
 161 00ba BDD1     		bne	.L9
 137:Source\MatrixFunctions/arm_mat_add_q15.c ****     }
 138:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 139:Source\MatrixFunctions/arm_mat_add_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 19


 140:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 141:Source\MatrixFunctions/arm_mat_add_q15.c ****     /* set status as ARM_MATH_SUCCESS */
 142:Source\MatrixFunctions/arm_mat_add_q15.c ****     status = ARM_MATH_SUCCESS;
 162              		.loc 1 142 0
 163 00bc 2523     		mov	r3, #37
 164 00be FB18     		add	r3, r7, r3
 165 00c0 0022     		mov	r2, #0
 166 00c2 1A70     		strb	r2, [r3]
 143:Source\MatrixFunctions/arm_mat_add_q15.c ****   }
 144:Source\MatrixFunctions/arm_mat_add_q15.c **** 
 145:Source\MatrixFunctions/arm_mat_add_q15.c ****   /* Return to application */
 146:Source\MatrixFunctions/arm_mat_add_q15.c ****   return (status);
 167              		.loc 1 146 0
 168 00c4 2523     		mov	r3, #37
 169 00c6 FB18     		add	r3, r7, r3
 170 00c8 1B78     		ldrb	r3, [r3]
 171 00ca 5BB2     		sxtb	r3, r3
 147:Source\MatrixFunctions/arm_mat_add_q15.c **** }
 172              		.loc 1 147 0
 173 00cc 181C     		mov	r0, r3
 174 00ce BD46     		mov	sp, r7
 175 00d0 0EB0     		add	sp, sp, #56
 176              		@ sp needed
 177 00d2 80BD     		pop	{r7, pc}
 178              		.cfi_endproc
 179              	.LFE82:
 180              		.size	arm_mat_add_q15, .-arm_mat_add_q15
 181              		.text
 182              	.Letext0:
 183              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 184              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 185              		.section	.debug_info,"",%progbits
 186              	.Ldebug_info0:
 187 0000 B1020000 		.4byte	0x2b1
 188 0004 0400     		.2byte	0x4
 189 0006 00000000 		.4byte	.Ldebug_abbrev0
 190 000a 04       		.byte	0x4
 191 000b 01       		.uleb128 0x1
 192 000c A5010000 		.4byte	.LASF47
 193 0010 01       		.byte	0x1
 194 0011 98000000 		.4byte	.LASF48
 195 0015 4B000000 		.4byte	.LASF49
 196 0019 00000000 		.4byte	.Ldebug_ranges0+0
 197 001d 00000000 		.4byte	0
 198 0021 00000000 		.4byte	.Ldebug_line0
 199 0025 02       		.uleb128 0x2
 200 0026 01       		.byte	0x1
 201 0027 06       		.byte	0x6
 202 0028 E5020000 		.4byte	.LASF0
 203 002c 02       		.uleb128 0x2
 204 002d 01       		.byte	0x1
 205 002e 08       		.byte	0x8
 206 002f D8000000 		.4byte	.LASF1
 207 0033 03       		.uleb128 0x3
 208 0034 16000000 		.4byte	.LASF3
 209 0038 03       		.byte	0x3
 210 0039 29       		.byte	0x29
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 20


 211 003a 3E000000 		.4byte	0x3e
 212 003e 02       		.uleb128 0x2
 213 003f 02       		.byte	0x2
 214 0040 05       		.byte	0x5
 215 0041 A2020000 		.4byte	.LASF2
 216 0045 03       		.uleb128 0x3
 217 0046 4C010000 		.4byte	.LASF4
 218 004a 03       		.byte	0x3
 219 004b 2B       		.byte	0x2b
 220 004c 50000000 		.4byte	0x50
 221 0050 02       		.uleb128 0x2
 222 0051 02       		.byte	0x2
 223 0052 07       		.byte	0x7
 224 0053 2D010000 		.4byte	.LASF5
 225 0057 03       		.uleb128 0x3
 226 0058 31000000 		.4byte	.LASF6
 227 005c 03       		.byte	0x3
 228 005d 3F       		.byte	0x3f
 229 005e 62000000 		.4byte	0x62
 230 0062 02       		.uleb128 0x2
 231 0063 04       		.byte	0x4
 232 0064 05       		.byte	0x5
 233 0065 C5020000 		.4byte	.LASF7
 234 0069 03       		.uleb128 0x3
 235 006a 5E010000 		.4byte	.LASF8
 236 006e 03       		.byte	0x3
 237 006f 41       		.byte	0x41
 238 0070 74000000 		.4byte	0x74
 239 0074 02       		.uleb128 0x2
 240 0075 04       		.byte	0x4
 241 0076 07       		.byte	0x7
 242 0077 1B010000 		.4byte	.LASF9
 243 007b 02       		.uleb128 0x2
 244 007c 08       		.byte	0x8
 245 007d 05       		.byte	0x5
 246 007e 7E020000 		.4byte	.LASF10
 247 0082 02       		.uleb128 0x2
 248 0083 08       		.byte	0x8
 249 0084 07       		.byte	0x7
 250 0085 8E010000 		.4byte	.LASF11
 251 0089 04       		.uleb128 0x4
 252 008a 04       		.byte	0x4
 253 008b 05       		.byte	0x5
 254 008c 696E7400 		.ascii	"int\000"
 255 0090 02       		.uleb128 0x2
 256 0091 04       		.byte	0x4
 257 0092 07       		.byte	0x7
 258 0093 81010000 		.4byte	.LASF12
 259 0097 03       		.uleb128 0x3
 260 0098 5E020000 		.4byte	.LASF13
 261 009c 04       		.byte	0x4
 262 009d 20       		.byte	0x20
 263 009e 33000000 		.4byte	0x33
 264 00a2 03       		.uleb128 0x3
 265 00a3 AC020000 		.4byte	.LASF14
 266 00a7 04       		.byte	0x4
 267 00a8 21       		.byte	0x21
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 21


 268 00a9 45000000 		.4byte	0x45
 269 00ad 03       		.uleb128 0x3
 270 00ae 6D020000 		.4byte	.LASF15
 271 00b2 04       		.byte	0x4
 272 00b3 2C       		.byte	0x2c
 273 00b4 57000000 		.4byte	0x57
 274 00b8 03       		.uleb128 0x3
 275 00b9 BC020000 		.4byte	.LASF16
 276 00bd 04       		.byte	0x4
 277 00be 2D       		.byte	0x2d
 278 00bf 69000000 		.4byte	0x69
 279 00c3 02       		.uleb128 0x2
 280 00c4 04       		.byte	0x4
 281 00c5 07       		.byte	0x7
 282 00c6 75020000 		.4byte	.LASF17
 283 00ca 02       		.uleb128 0x2
 284 00cb 01       		.byte	0x1
 285 00cc 08       		.byte	0x8
 286 00cd 8C020000 		.4byte	.LASF18
 287 00d1 02       		.uleb128 0x2
 288 00d2 08       		.byte	0x8
 289 00d3 04       		.byte	0x4
 290 00d4 57010000 		.4byte	.LASF19
 291 00d8 02       		.uleb128 0x2
 292 00d9 04       		.byte	0x4
 293 00da 04       		.byte	0x4
 294 00db DF020000 		.4byte	.LASF20
 295 00df 02       		.uleb128 0x2
 296 00e0 08       		.byte	0x8
 297 00e1 04       		.byte	0x4
 298 00e2 D3020000 		.4byte	.LASF21
 299 00e6 05       		.uleb128 0x5
 300 00e7 01       		.byte	0x1
 301 00e8 02       		.byte	0x2
 302 00e9 8401     		.2byte	0x184
 303 00eb 1A010000 		.4byte	0x11a
 304 00ef 06       		.uleb128 0x6
 305 00f0 91020000 		.4byte	.LASF22
 306 00f4 00       		.sleb128 0
 307 00f5 06       		.uleb128 0x6
 308 00f6 69010000 		.4byte	.LASF23
 309 00fa 7F       		.sleb128 -1
 310 00fb 06       		.uleb128 0x6
 311 00fc 00000000 		.4byte	.LASF24
 312 0100 7E       		.sleb128 -2
 313 0101 06       		.uleb128 0x6
 314 0102 37020000 		.4byte	.LASF25
 315 0106 7D       		.sleb128 -3
 316 0107 06       		.uleb128 0x6
 317 0108 4E020000 		.4byte	.LASF26
 318 010c 7C       		.sleb128 -4
 319 010d 06       		.uleb128 0x6
 320 010e 17030000 		.4byte	.LASF27
 321 0112 7B       		.sleb128 -5
 322 0113 06       		.uleb128 0x6
 323 0114 05010000 		.4byte	.LASF28
 324 0118 7A       		.sleb128 -6
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 22


 325 0119 00       		.byte	0
 326 011a 07       		.uleb128 0x7
 327 011b 0C030000 		.4byte	.LASF29
 328 011f 02       		.byte	0x2
 329 0120 8C01     		.2byte	0x18c
 330 0122 E6000000 		.4byte	0xe6
 331 0126 07       		.uleb128 0x7
 332 0127 C7000000 		.4byte	.LASF30
 333 012b 02       		.byte	0x2
 334 012c 9601     		.2byte	0x196
 335 012e 97000000 		.4byte	0x97
 336 0132 07       		.uleb128 0x7
 337 0133 D2000000 		.4byte	.LASF31
 338 0137 02       		.byte	0x2
 339 0138 9B01     		.2byte	0x19b
 340 013a AD000000 		.4byte	0xad
 341 013e 08       		.uleb128 0x8
 342 013f 04       		.byte	0x4
 343 0140 26010000 		.4byte	0x126
 344 0144 09       		.uleb128 0x9
 345 0145 08       		.byte	0x8
 346 0146 02       		.byte	0x2
 347 0147 AF05     		.2byte	0x5af
 348 0149 75010000 		.4byte	0x175
 349 014d 0A       		.uleb128 0xa
 350 014e F1020000 		.4byte	.LASF32
 351 0152 02       		.byte	0x2
 352 0153 B105     		.2byte	0x5b1
 353 0155 A2000000 		.4byte	0xa2
 354 0159 00       		.byte	0
 355 015a 0A       		.uleb128 0xa
 356 015b F9020000 		.4byte	.LASF33
 357 015f 02       		.byte	0x2
 358 0160 B205     		.2byte	0x5b2
 359 0162 A2000000 		.4byte	0xa2
 360 0166 02       		.byte	0x2
 361 0167 0A       		.uleb128 0xa
 362 0168 C1000000 		.4byte	.LASF34
 363 016c 02       		.byte	0x2
 364 016d B305     		.2byte	0x5b3
 365 016f 3E010000 		.4byte	0x13e
 366 0173 04       		.byte	0x4
 367 0174 00       		.byte	0
 368 0175 07       		.uleb128 0x7
 369 0176 ED000000 		.4byte	.LASF35
 370 017a 02       		.byte	0x2
 371 017b B405     		.2byte	0x5b4
 372 017d 44010000 		.4byte	0x144
 373 0181 0B       		.uleb128 0xb
 374 0182 66020000 		.4byte	.LASF50
 375 0186 02       		.byte	0x2
 376 0187 B402     		.2byte	0x2b4
 377 0189 32010000 		.4byte	0x132
 378 018d 03       		.byte	0x3
 379 018e C9010000 		.4byte	0x1c9
 380 0192 0C       		.uleb128 0xc
 381 0193 7800     		.ascii	"x\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 23


 382 0195 02       		.byte	0x2
 383 0196 B502     		.2byte	0x2b5
 384 0198 32010000 		.4byte	0x132
 385 019c 0C       		.uleb128 0xc
 386 019d 7900     		.ascii	"y\000"
 387 019f 02       		.byte	0x2
 388 01a0 B602     		.2byte	0x2b6
 389 01a2 B8000000 		.4byte	0xb8
 390 01a6 0D       		.uleb128 0xd
 391 01a7 B5020000 		.4byte	.LASF36
 392 01ab 02       		.byte	0x2
 393 01ac B802     		.2byte	0x2b8
 394 01ae AD000000 		.4byte	0xad
 395 01b2 0D       		.uleb128 0xd
 396 01b3 45010000 		.4byte	.LASF37
 397 01b7 02       		.byte	0x2
 398 01b8 B802     		.2byte	0x2b8
 399 01ba AD000000 		.4byte	0xad
 400 01be 0E       		.uleb128 0xe
 401 01bf 6900     		.ascii	"i\000"
 402 01c1 02       		.byte	0x2
 403 01c2 B902     		.2byte	0x2b9
 404 01c4 B8000000 		.4byte	0xb8
 405 01c8 00       		.byte	0
 406 01c9 0F       		.uleb128 0xf
 407 01ca 3B000000 		.4byte	.LASF51
 408 01ce 01       		.byte	0x1
 409 01cf 36       		.byte	0x36
 410 01d0 1A010000 		.4byte	0x11a
 411 01d4 00000000 		.4byte	.LFB82
 412 01d8 D4000000 		.4byte	.LFE82-.LFB82
 413 01dc 01       		.uleb128 0x1
 414 01dd 9C       		.byte	0x9c
 415 01de A3020000 		.4byte	0x2a3
 416 01e2 10       		.uleb128 0x10
 417 01e3 20000000 		.4byte	.LASF38
 418 01e7 01       		.byte	0x1
 419 01e8 37       		.byte	0x37
 420 01e9 A3020000 		.4byte	0x2a3
 421 01ed 02       		.uleb128 0x2
 422 01ee 91       		.byte	0x91
 423 01ef 4C       		.sleb128 -52
 424 01f0 10       		.uleb128 0x10
 425 01f1 26000000 		.4byte	.LASF39
 426 01f5 01       		.byte	0x1
 427 01f6 38       		.byte	0x38
 428 01f7 A3020000 		.4byte	0x2a3
 429 01fb 02       		.uleb128 0x2
 430 01fc 91       		.byte	0x91
 431 01fd 48       		.sleb128 -56
 432 01fe 10       		.uleb128 0x10
 433 01ff 40010000 		.4byte	.LASF40
 434 0203 01       		.byte	0x1
 435 0204 39       		.byte	0x39
 436 0205 AE020000 		.4byte	0x2ae
 437 0209 02       		.uleb128 0x2
 438 020a 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 24


 439 020b 44       		.sleb128 -60
 440 020c 11       		.uleb128 0x11
 441 020d CE020000 		.4byte	.LASF41
 442 0211 01       		.byte	0x1
 443 0212 3B       		.byte	0x3b
 444 0213 3E010000 		.4byte	0x13e
 445 0217 02       		.uleb128 0x2
 446 0218 91       		.byte	0x91
 447 0219 74       		.sleb128 -12
 448 021a 11       		.uleb128 0x11
 449 021b 2C000000 		.4byte	.LASF42
 450 021f 01       		.byte	0x1
 451 0220 3C       		.byte	0x3c
 452 0221 3E010000 		.4byte	0x13e
 453 0225 02       		.uleb128 0x2
 454 0226 91       		.byte	0x91
 455 0227 70       		.sleb128 -16
 456 0228 11       		.uleb128 0x11
 457 0229 CD000000 		.4byte	.LASF43
 458 022d 01       		.byte	0x1
 459 022e 3D       		.byte	0x3d
 460 022f 3E010000 		.4byte	0x13e
 461 0233 02       		.uleb128 0x2
 462 0234 91       		.byte	0x91
 463 0235 6C       		.sleb128 -20
 464 0236 11       		.uleb128 0x11
 465 0237 01030000 		.4byte	.LASF44
 466 023b 01       		.byte	0x1
 467 023c 3E       		.byte	0x3e
 468 023d A2000000 		.4byte	0xa2
 469 0241 02       		.uleb128 0x2
 470 0242 91       		.byte	0x91
 471 0243 66       		.sleb128 -26
 472 0244 11       		.uleb128 0x11
 473 0245 E6000000 		.4byte	.LASF45
 474 0249 01       		.byte	0x1
 475 024a 3F       		.byte	0x3f
 476 024b B8000000 		.4byte	0xb8
 477 024f 02       		.uleb128 0x2
 478 0250 91       		.byte	0x91
 479 0251 68       		.sleb128 -24
 480 0252 11       		.uleb128 0x11
 481 0253 91000000 		.4byte	.LASF46
 482 0257 01       		.byte	0x1
 483 0258 40       		.byte	0x40
 484 0259 1A010000 		.4byte	0x11a
 485 025d 02       		.uleb128 0x2
 486 025e 91       		.byte	0x91
 487 025f 65       		.sleb128 -27
 488 0260 12       		.uleb128 0x12
 489 0261 81010000 		.4byte	0x181
 490 0265 5A000000 		.4byte	.LBB4
 491 0269 52000000 		.4byte	.LBE4-.LBB4
 492 026d 01       		.byte	0x1
 493 026e 85       		.byte	0x85
 494 026f 13       		.uleb128 0x13
 495 0270 9C010000 		.4byte	0x19c
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 25


 496 0274 02       		.uleb128 0x2
 497 0275 91       		.byte	0x91
 498 0276 5C       		.sleb128 -36
 499 0277 13       		.uleb128 0x13
 500 0278 92010000 		.4byte	0x192
 501 027c 02       		.uleb128 0x2
 502 027d 91       		.byte	0x91
 503 027e 60       		.sleb128 -32
 504 027f 14       		.uleb128 0x14
 505 0280 5A000000 		.4byte	.LBB5
 506 0284 52000000 		.4byte	.LBE5-.LBB5
 507 0288 15       		.uleb128 0x15
 508 0289 A6010000 		.4byte	0x1a6
 509 028d 02       		.uleb128 0x2
 510 028e 91       		.byte	0x91
 511 028f 58       		.sleb128 -40
 512 0290 15       		.uleb128 0x15
 513 0291 B2010000 		.4byte	0x1b2
 514 0295 02       		.uleb128 0x2
 515 0296 91       		.byte	0x91
 516 0297 50       		.sleb128 -48
 517 0298 15       		.uleb128 0x15
 518 0299 BE010000 		.4byte	0x1be
 519 029d 02       		.uleb128 0x2
 520 029e 91       		.byte	0x91
 521 029f 54       		.sleb128 -44
 522 02a0 00       		.byte	0
 523 02a1 00       		.byte	0
 524 02a2 00       		.byte	0
 525 02a3 08       		.uleb128 0x8
 526 02a4 04       		.byte	0x4
 527 02a5 A9020000 		.4byte	0x2a9
 528 02a9 16       		.uleb128 0x16
 529 02aa 75010000 		.4byte	0x175
 530 02ae 08       		.uleb128 0x8
 531 02af 04       		.byte	0x4
 532 02b0 75010000 		.4byte	0x175
 533 02b4 00       		.byte	0
 534              		.section	.debug_abbrev,"",%progbits
 535              	.Ldebug_abbrev0:
 536 0000 01       		.uleb128 0x1
 537 0001 11       		.uleb128 0x11
 538 0002 01       		.byte	0x1
 539 0003 25       		.uleb128 0x25
 540 0004 0E       		.uleb128 0xe
 541 0005 13       		.uleb128 0x13
 542 0006 0B       		.uleb128 0xb
 543 0007 03       		.uleb128 0x3
 544 0008 0E       		.uleb128 0xe
 545 0009 1B       		.uleb128 0x1b
 546 000a 0E       		.uleb128 0xe
 547 000b 55       		.uleb128 0x55
 548 000c 17       		.uleb128 0x17
 549 000d 11       		.uleb128 0x11
 550 000e 01       		.uleb128 0x1
 551 000f 10       		.uleb128 0x10
 552 0010 17       		.uleb128 0x17
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 26


 553 0011 00       		.byte	0
 554 0012 00       		.byte	0
 555 0013 02       		.uleb128 0x2
 556 0014 24       		.uleb128 0x24
 557 0015 00       		.byte	0
 558 0016 0B       		.uleb128 0xb
 559 0017 0B       		.uleb128 0xb
 560 0018 3E       		.uleb128 0x3e
 561 0019 0B       		.uleb128 0xb
 562 001a 03       		.uleb128 0x3
 563 001b 0E       		.uleb128 0xe
 564 001c 00       		.byte	0
 565 001d 00       		.byte	0
 566 001e 03       		.uleb128 0x3
 567 001f 16       		.uleb128 0x16
 568 0020 00       		.byte	0
 569 0021 03       		.uleb128 0x3
 570 0022 0E       		.uleb128 0xe
 571 0023 3A       		.uleb128 0x3a
 572 0024 0B       		.uleb128 0xb
 573 0025 3B       		.uleb128 0x3b
 574 0026 0B       		.uleb128 0xb
 575 0027 49       		.uleb128 0x49
 576 0028 13       		.uleb128 0x13
 577 0029 00       		.byte	0
 578 002a 00       		.byte	0
 579 002b 04       		.uleb128 0x4
 580 002c 24       		.uleb128 0x24
 581 002d 00       		.byte	0
 582 002e 0B       		.uleb128 0xb
 583 002f 0B       		.uleb128 0xb
 584 0030 3E       		.uleb128 0x3e
 585 0031 0B       		.uleb128 0xb
 586 0032 03       		.uleb128 0x3
 587 0033 08       		.uleb128 0x8
 588 0034 00       		.byte	0
 589 0035 00       		.byte	0
 590 0036 05       		.uleb128 0x5
 591 0037 04       		.uleb128 0x4
 592 0038 01       		.byte	0x1
 593 0039 0B       		.uleb128 0xb
 594 003a 0B       		.uleb128 0xb
 595 003b 3A       		.uleb128 0x3a
 596 003c 0B       		.uleb128 0xb
 597 003d 3B       		.uleb128 0x3b
 598 003e 05       		.uleb128 0x5
 599 003f 01       		.uleb128 0x1
 600 0040 13       		.uleb128 0x13
 601 0041 00       		.byte	0
 602 0042 00       		.byte	0
 603 0043 06       		.uleb128 0x6
 604 0044 28       		.uleb128 0x28
 605 0045 00       		.byte	0
 606 0046 03       		.uleb128 0x3
 607 0047 0E       		.uleb128 0xe
 608 0048 1C       		.uleb128 0x1c
 609 0049 0D       		.uleb128 0xd
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 27


 610 004a 00       		.byte	0
 611 004b 00       		.byte	0
 612 004c 07       		.uleb128 0x7
 613 004d 16       		.uleb128 0x16
 614 004e 00       		.byte	0
 615 004f 03       		.uleb128 0x3
 616 0050 0E       		.uleb128 0xe
 617 0051 3A       		.uleb128 0x3a
 618 0052 0B       		.uleb128 0xb
 619 0053 3B       		.uleb128 0x3b
 620 0054 05       		.uleb128 0x5
 621 0055 49       		.uleb128 0x49
 622 0056 13       		.uleb128 0x13
 623 0057 00       		.byte	0
 624 0058 00       		.byte	0
 625 0059 08       		.uleb128 0x8
 626 005a 0F       		.uleb128 0xf
 627 005b 00       		.byte	0
 628 005c 0B       		.uleb128 0xb
 629 005d 0B       		.uleb128 0xb
 630 005e 49       		.uleb128 0x49
 631 005f 13       		.uleb128 0x13
 632 0060 00       		.byte	0
 633 0061 00       		.byte	0
 634 0062 09       		.uleb128 0x9
 635 0063 13       		.uleb128 0x13
 636 0064 01       		.byte	0x1
 637 0065 0B       		.uleb128 0xb
 638 0066 0B       		.uleb128 0xb
 639 0067 3A       		.uleb128 0x3a
 640 0068 0B       		.uleb128 0xb
 641 0069 3B       		.uleb128 0x3b
 642 006a 05       		.uleb128 0x5
 643 006b 01       		.uleb128 0x1
 644 006c 13       		.uleb128 0x13
 645 006d 00       		.byte	0
 646 006e 00       		.byte	0
 647 006f 0A       		.uleb128 0xa
 648 0070 0D       		.uleb128 0xd
 649 0071 00       		.byte	0
 650 0072 03       		.uleb128 0x3
 651 0073 0E       		.uleb128 0xe
 652 0074 3A       		.uleb128 0x3a
 653 0075 0B       		.uleb128 0xb
 654 0076 3B       		.uleb128 0x3b
 655 0077 05       		.uleb128 0x5
 656 0078 49       		.uleb128 0x49
 657 0079 13       		.uleb128 0x13
 658 007a 38       		.uleb128 0x38
 659 007b 0B       		.uleb128 0xb
 660 007c 00       		.byte	0
 661 007d 00       		.byte	0
 662 007e 0B       		.uleb128 0xb
 663 007f 2E       		.uleb128 0x2e
 664 0080 01       		.byte	0x1
 665 0081 03       		.uleb128 0x3
 666 0082 0E       		.uleb128 0xe
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 28


 667 0083 3A       		.uleb128 0x3a
 668 0084 0B       		.uleb128 0xb
 669 0085 3B       		.uleb128 0x3b
 670 0086 05       		.uleb128 0x5
 671 0087 27       		.uleb128 0x27
 672 0088 19       		.uleb128 0x19
 673 0089 49       		.uleb128 0x49
 674 008a 13       		.uleb128 0x13
 675 008b 20       		.uleb128 0x20
 676 008c 0B       		.uleb128 0xb
 677 008d 01       		.uleb128 0x1
 678 008e 13       		.uleb128 0x13
 679 008f 00       		.byte	0
 680 0090 00       		.byte	0
 681 0091 0C       		.uleb128 0xc
 682 0092 05       		.uleb128 0x5
 683 0093 00       		.byte	0
 684 0094 03       		.uleb128 0x3
 685 0095 08       		.uleb128 0x8
 686 0096 3A       		.uleb128 0x3a
 687 0097 0B       		.uleb128 0xb
 688 0098 3B       		.uleb128 0x3b
 689 0099 05       		.uleb128 0x5
 690 009a 49       		.uleb128 0x49
 691 009b 13       		.uleb128 0x13
 692 009c 00       		.byte	0
 693 009d 00       		.byte	0
 694 009e 0D       		.uleb128 0xd
 695 009f 34       		.uleb128 0x34
 696 00a0 00       		.byte	0
 697 00a1 03       		.uleb128 0x3
 698 00a2 0E       		.uleb128 0xe
 699 00a3 3A       		.uleb128 0x3a
 700 00a4 0B       		.uleb128 0xb
 701 00a5 3B       		.uleb128 0x3b
 702 00a6 05       		.uleb128 0x5
 703 00a7 49       		.uleb128 0x49
 704 00a8 13       		.uleb128 0x13
 705 00a9 00       		.byte	0
 706 00aa 00       		.byte	0
 707 00ab 0E       		.uleb128 0xe
 708 00ac 34       		.uleb128 0x34
 709 00ad 00       		.byte	0
 710 00ae 03       		.uleb128 0x3
 711 00af 08       		.uleb128 0x8
 712 00b0 3A       		.uleb128 0x3a
 713 00b1 0B       		.uleb128 0xb
 714 00b2 3B       		.uleb128 0x3b
 715 00b3 05       		.uleb128 0x5
 716 00b4 49       		.uleb128 0x49
 717 00b5 13       		.uleb128 0x13
 718 00b6 00       		.byte	0
 719 00b7 00       		.byte	0
 720 00b8 0F       		.uleb128 0xf
 721 00b9 2E       		.uleb128 0x2e
 722 00ba 01       		.byte	0x1
 723 00bb 3F       		.uleb128 0x3f
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 29


 724 00bc 19       		.uleb128 0x19
 725 00bd 03       		.uleb128 0x3
 726 00be 0E       		.uleb128 0xe
 727 00bf 3A       		.uleb128 0x3a
 728 00c0 0B       		.uleb128 0xb
 729 00c1 3B       		.uleb128 0x3b
 730 00c2 0B       		.uleb128 0xb
 731 00c3 27       		.uleb128 0x27
 732 00c4 19       		.uleb128 0x19
 733 00c5 49       		.uleb128 0x49
 734 00c6 13       		.uleb128 0x13
 735 00c7 11       		.uleb128 0x11
 736 00c8 01       		.uleb128 0x1
 737 00c9 12       		.uleb128 0x12
 738 00ca 06       		.uleb128 0x6
 739 00cb 40       		.uleb128 0x40
 740 00cc 18       		.uleb128 0x18
 741 00cd 9742     		.uleb128 0x2117
 742 00cf 19       		.uleb128 0x19
 743 00d0 01       		.uleb128 0x1
 744 00d1 13       		.uleb128 0x13
 745 00d2 00       		.byte	0
 746 00d3 00       		.byte	0
 747 00d4 10       		.uleb128 0x10
 748 00d5 05       		.uleb128 0x5
 749 00d6 00       		.byte	0
 750 00d7 03       		.uleb128 0x3
 751 00d8 0E       		.uleb128 0xe
 752 00d9 3A       		.uleb128 0x3a
 753 00da 0B       		.uleb128 0xb
 754 00db 3B       		.uleb128 0x3b
 755 00dc 0B       		.uleb128 0xb
 756 00dd 49       		.uleb128 0x49
 757 00de 13       		.uleb128 0x13
 758 00df 02       		.uleb128 0x2
 759 00e0 18       		.uleb128 0x18
 760 00e1 00       		.byte	0
 761 00e2 00       		.byte	0
 762 00e3 11       		.uleb128 0x11
 763 00e4 34       		.uleb128 0x34
 764 00e5 00       		.byte	0
 765 00e6 03       		.uleb128 0x3
 766 00e7 0E       		.uleb128 0xe
 767 00e8 3A       		.uleb128 0x3a
 768 00e9 0B       		.uleb128 0xb
 769 00ea 3B       		.uleb128 0x3b
 770 00eb 0B       		.uleb128 0xb
 771 00ec 49       		.uleb128 0x49
 772 00ed 13       		.uleb128 0x13
 773 00ee 02       		.uleb128 0x2
 774 00ef 18       		.uleb128 0x18
 775 00f0 00       		.byte	0
 776 00f1 00       		.byte	0
 777 00f2 12       		.uleb128 0x12
 778 00f3 1D       		.uleb128 0x1d
 779 00f4 01       		.byte	0x1
 780 00f5 31       		.uleb128 0x31
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 30


 781 00f6 13       		.uleb128 0x13
 782 00f7 11       		.uleb128 0x11
 783 00f8 01       		.uleb128 0x1
 784 00f9 12       		.uleb128 0x12
 785 00fa 06       		.uleb128 0x6
 786 00fb 58       		.uleb128 0x58
 787 00fc 0B       		.uleb128 0xb
 788 00fd 59       		.uleb128 0x59
 789 00fe 0B       		.uleb128 0xb
 790 00ff 00       		.byte	0
 791 0100 00       		.byte	0
 792 0101 13       		.uleb128 0x13
 793 0102 05       		.uleb128 0x5
 794 0103 00       		.byte	0
 795 0104 31       		.uleb128 0x31
 796 0105 13       		.uleb128 0x13
 797 0106 02       		.uleb128 0x2
 798 0107 18       		.uleb128 0x18
 799 0108 00       		.byte	0
 800 0109 00       		.byte	0
 801 010a 14       		.uleb128 0x14
 802 010b 0B       		.uleb128 0xb
 803 010c 01       		.byte	0x1
 804 010d 11       		.uleb128 0x11
 805 010e 01       		.uleb128 0x1
 806 010f 12       		.uleb128 0x12
 807 0110 06       		.uleb128 0x6
 808 0111 00       		.byte	0
 809 0112 00       		.byte	0
 810 0113 15       		.uleb128 0x15
 811 0114 34       		.uleb128 0x34
 812 0115 00       		.byte	0
 813 0116 31       		.uleb128 0x31
 814 0117 13       		.uleb128 0x13
 815 0118 02       		.uleb128 0x2
 816 0119 18       		.uleb128 0x18
 817 011a 00       		.byte	0
 818 011b 00       		.byte	0
 819 011c 16       		.uleb128 0x16
 820 011d 26       		.uleb128 0x26
 821 011e 00       		.byte	0
 822 011f 49       		.uleb128 0x49
 823 0120 13       		.uleb128 0x13
 824 0121 00       		.byte	0
 825 0122 00       		.byte	0
 826 0123 00       		.byte	0
 827              		.section	.debug_aranges,"",%progbits
 828 0000 1C000000 		.4byte	0x1c
 829 0004 0200     		.2byte	0x2
 830 0006 00000000 		.4byte	.Ldebug_info0
 831 000a 04       		.byte	0x4
 832 000b 00       		.byte	0
 833 000c 0000     		.2byte	0
 834 000e 0000     		.2byte	0
 835 0010 00000000 		.4byte	.LFB82
 836 0014 D4000000 		.4byte	.LFE82-.LFB82
 837 0018 00000000 		.4byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 31


 838 001c 00000000 		.4byte	0
 839              		.section	.debug_ranges,"",%progbits
 840              	.Ldebug_ranges0:
 841 0000 00000000 		.4byte	.LFB82
 842 0004 D4000000 		.4byte	.LFE82
 843 0008 00000000 		.4byte	0
 844 000c 00000000 		.4byte	0
 845              		.section	.debug_line,"",%progbits
 846              	.Ldebug_line0:
 847 0000 95010000 		.section	.debug_str,"MS",%progbits,1
 847      02004F01 
 847      00000201 
 847      FB0E0D00 
 847      01010101 
 848              	.LASF24:
 849 0000 41524D5F 		.ascii	"ARM_MATH_LENGTH_ERROR\000"
 849      4D415448 
 849      5F4C454E 
 849      4754485F 
 849      4552524F 
 850              	.LASF3:
 851 0016 5F5F696E 		.ascii	"__int16_t\000"
 851      7431365F 
 851      7400
 852              	.LASF38:
 853 0020 70537263 		.ascii	"pSrcA\000"
 853      4100
 854              	.LASF39:
 855 0026 70537263 		.ascii	"pSrcB\000"
 855      4200
 856              	.LASF42:
 857 002c 70496E42 		.ascii	"pInB\000"
 857      00
 858              	.LASF6:
 859 0031 5F5F696E 		.ascii	"__int32_t\000"
 859      7433325F 
 859      7400
 860              	.LASF51:
 861 003b 61726D5F 		.ascii	"arm_mat_add_q15\000"
 861      6D61745F 
 861      6164645F 
 861      71313500 
 862              	.LASF49:
 863 004b 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 863      73657273 
 863      5C666E65 
 863      7665735C 
 863      446F6375 
 864 0078 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 864      655F7370 
 864      6565645F 
 864      73656E73 
 864      6F722E63 
 865              	.LASF46:
 866 0091 73746174 		.ascii	"status\000"
 866      757300
 867              	.LASF48:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 32


 868 0098 536F7572 		.ascii	"Source\\MatrixFunctions\\arm_mat_add_q15.c\000"
 868      63655C4D 
 868      61747269 
 868      7846756E 
 868      6374696F 
 869              	.LASF34:
 870 00c1 70446174 		.ascii	"pData\000"
 870      6100
 871              	.LASF30:
 872 00c7 7131355F 		.ascii	"q15_t\000"
 872      7400
 873              	.LASF43:
 874 00cd 704F7574 		.ascii	"pOut\000"
 874      00
 875              	.LASF31:
 876 00d2 7133315F 		.ascii	"q31_t\000"
 876      7400
 877              	.LASF1:
 878 00d8 756E7369 		.ascii	"unsigned char\000"
 878      676E6564 
 878      20636861 
 878      7200
 879              	.LASF45:
 880 00e6 626C6B43 		.ascii	"blkCnt\000"
 880      6E7400
 881              	.LASF35:
 882 00ed 61726D5F 		.ascii	"arm_matrix_instance_q15\000"
 882      6D617472 
 882      69785F69 
 882      6E737461 
 882      6E63655F 
 883              	.LASF28:
 884 0105 41524D5F 		.ascii	"ARM_MATH_TEST_FAILURE\000"
 884      4D415448 
 884      5F544553 
 884      545F4641 
 884      494C5552 
 885              	.LASF9:
 886 011b 6C6F6E67 		.ascii	"long unsigned int\000"
 886      20756E73 
 886      69676E65 
 886      6420696E 
 886      7400
 887              	.LASF5:
 888 012d 73686F72 		.ascii	"short unsigned int\000"
 888      7420756E 
 888      7369676E 
 888      65642069 
 888      6E7400
 889              	.LASF40:
 890 0140 70447374 		.ascii	"pDst\000"
 890      00
 891              	.LASF37:
 892 0145 6E65674D 		.ascii	"negMin\000"
 892      696E00
 893              	.LASF4:
 894 014c 5F5F7569 		.ascii	"__uint16_t\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 33


 894      6E743136 
 894      5F7400
 895              	.LASF19:
 896 0157 646F7562 		.ascii	"double\000"
 896      6C6500
 897              	.LASF8:
 898 015e 5F5F7569 		.ascii	"__uint32_t\000"
 898      6E743332 
 898      5F7400
 899              	.LASF23:
 900 0169 41524D5F 		.ascii	"ARM_MATH_ARGUMENT_ERROR\000"
 900      4D415448 
 900      5F415247 
 900      554D454E 
 900      545F4552 
 901              	.LASF12:
 902 0181 756E7369 		.ascii	"unsigned int\000"
 902      676E6564 
 902      20696E74 
 902      00
 903              	.LASF11:
 904 018e 6C6F6E67 		.ascii	"long long unsigned int\000"
 904      206C6F6E 
 904      6720756E 
 904      7369676E 
 904      65642069 
 905              	.LASF47:
 906 01a5 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 906      4320342E 
 906      392E3320 
 906      32303135 
 906      30333033 
 907 01d8 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 907      20726576 
 907      6973696F 
 907      6E203232 
 907      31323230 
 908 020b 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 908      30202D66 
 908      66756E63 
 908      74696F6E 
 908      2D736563 
 909              	.LASF25:
 910 0237 41524D5F 		.ascii	"ARM_MATH_SIZE_MISMATCH\000"
 910      4D415448 
 910      5F53495A 
 910      455F4D49 
 910      534D4154 
 911              	.LASF26:
 912 024e 41524D5F 		.ascii	"ARM_MATH_NANINF\000"
 912      4D415448 
 912      5F4E414E 
 912      494E4600 
 913              	.LASF13:
 914 025e 696E7431 		.ascii	"int16_t\000"
 914      365F7400 
 915              	.LASF50:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 34


 916 0266 5F5F5353 		.ascii	"__SSAT\000"
 916      415400
 917              	.LASF15:
 918 026d 696E7433 		.ascii	"int32_t\000"
 918      325F7400 
 919              	.LASF17:
 920 0275 73697A65 		.ascii	"sizetype\000"
 920      74797065 
 920      00
 921              	.LASF10:
 922 027e 6C6F6E67 		.ascii	"long long int\000"
 922      206C6F6E 
 922      6720696E 
 922      7400
 923              	.LASF18:
 924 028c 63686172 		.ascii	"char\000"
 924      00
 925              	.LASF22:
 926 0291 41524D5F 		.ascii	"ARM_MATH_SUCCESS\000"
 926      4D415448 
 926      5F535543 
 926      43455353 
 926      00
 927              	.LASF2:
 928 02a2 73686F72 		.ascii	"short int\000"
 928      7420696E 
 928      7400
 929              	.LASF14:
 930 02ac 75696E74 		.ascii	"uint16_t\000"
 930      31365F74 
 930      00
 931              	.LASF36:
 932 02b5 706F734D 		.ascii	"posMax\000"
 932      617800
 933              	.LASF16:
 934 02bc 75696E74 		.ascii	"uint32_t\000"
 934      33325F74 
 934      00
 935              	.LASF7:
 936 02c5 6C6F6E67 		.ascii	"long int\000"
 936      20696E74 
 936      00
 937              	.LASF41:
 938 02ce 70496E41 		.ascii	"pInA\000"
 938      00
 939              	.LASF21:
 940 02d3 6C6F6E67 		.ascii	"long double\000"
 940      20646F75 
 940      626C6500 
 941              	.LASF20:
 942 02df 666C6F61 		.ascii	"float\000"
 942      7400
 943              	.LASF0:
 944 02e5 7369676E 		.ascii	"signed char\000"
 944      65642063 
 944      68617200 
 945              	.LASF32:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccGXQPfu.s 			page 35


 946 02f1 6E756D52 		.ascii	"numRows\000"
 946      6F777300 
 947              	.LASF33:
 948 02f9 6E756D43 		.ascii	"numCols\000"
 948      6F6C7300 
 949              	.LASF44:
 950 0301 6E756D53 		.ascii	"numSamples\000"
 950      616D706C 
 950      657300
 951              	.LASF29:
 952 030c 61726D5F 		.ascii	"arm_status\000"
 952      73746174 
 952      757300
 953              	.LASF27:
 954 0317 41524D5F 		.ascii	"ARM_MATH_SINGULAR\000"
 954      4D415448 
 954      5F53494E 
 954      47554C41 
 954      5200
 955              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
