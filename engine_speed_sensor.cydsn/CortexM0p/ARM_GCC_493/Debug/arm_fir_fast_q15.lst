ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_fir_fast_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_fir_fast_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_fir_fast_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_fir_fast_q15, %function
  23              	arm_fir_fast_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\FilteringFunctions\\arm_fir_fast_q15.c"
   1:Source\FilteringFunctions/arm_fir_fast_q15.c **** /* ----------------------------------------------------------------------
   2:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * Title:        arm_fir_fast_q15.c
   4:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * Description:  Q15 Fast FIR filter processing function
   5:Source\FilteringFunctions/arm_fir_fast_q15.c ****  *
   6:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * $Date:        27. January 2017
   7:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * $Revision:    V.1.5.1
   8:Source\FilteringFunctions/arm_fir_fast_q15.c ****  *
   9:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\FilteringFunctions/arm_fir_fast_q15.c **** /*
  12:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\FilteringFunctions/arm_fir_fast_q15.c ****  *
  14:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\FilteringFunctions/arm_fir_fast_q15.c ****  *
  16:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * not use this file except in compliance with the License.
  18:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * You may obtain a copy of the License at
  19:Source\FilteringFunctions/arm_fir_fast_q15.c ****  *
  20:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\FilteringFunctions/arm_fir_fast_q15.c ****  *
  22:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * limitations under the License.
  27:Source\FilteringFunctions/arm_fir_fast_q15.c ****  */
  28:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
  29:Source\FilteringFunctions/arm_fir_fast_q15.c **** #include "arm_math.h"
  30:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
  31:Source\FilteringFunctions/arm_fir_fast_q15.c **** /**
  32:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * @ingroup groupFilters
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 2


  33:Source\FilteringFunctions/arm_fir_fast_q15.c ****  */
  34:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
  35:Source\FilteringFunctions/arm_fir_fast_q15.c **** /**
  36:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * @addtogroup FIR
  37:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * @{
  38:Source\FilteringFunctions/arm_fir_fast_q15.c ****  */
  39:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
  40:Source\FilteringFunctions/arm_fir_fast_q15.c **** /**
  41:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * @param[in] *S points to an instance of the Q15 FIR filter structure.
  42:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * @param[in] *pSrc points to the block of input data.
  43:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * @param[out] *pDst points to the block of output data.
  44:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * @param[in] blockSize number of samples to process per call.
  45:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * @return none.
  46:Source\FilteringFunctions/arm_fir_fast_q15.c ****  *
  47:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  48:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * \par
  49:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * This fast version uses a 32-bit accumulator with 2.30 format.
  50:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * The accumulator maintains full precision of the intermediate multiplication results but provides
  51:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * Thus, if the accumulator result overflows it wraps around and distorts the result.
  52:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * In order to avoid overflows completely the input signal must be scaled down by log2(numTaps) bit
  53:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * The 2.30 accumulator is then truncated to 2.15 format and saturated to yield the 1.15 result.
  54:Source\FilteringFunctions/arm_fir_fast_q15.c ****  *
  55:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * \par
  56:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * Refer to the function <code>arm_fir_q15()</code> for a slower implementation of this function wh
  57:Source\FilteringFunctions/arm_fir_fast_q15.c ****  * Use the function <code>arm_fir_init_q15()</code> to initialize the filter structure.
  58:Source\FilteringFunctions/arm_fir_fast_q15.c ****  */
  59:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
  60:Source\FilteringFunctions/arm_fir_fast_q15.c **** void arm_fir_fast_q15(
  61:Source\FilteringFunctions/arm_fir_fast_q15.c ****   const arm_fir_instance_q15 * S,
  62:Source\FilteringFunctions/arm_fir_fast_q15.c ****   q15_t * pSrc,
  63:Source\FilteringFunctions/arm_fir_fast_q15.c ****   q15_t * pDst,
  64:Source\FilteringFunctions/arm_fir_fast_q15.c ****   uint32_t blockSize)
  65:Source\FilteringFunctions/arm_fir_fast_q15.c **** {
  26              		.loc 1 65 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 D2B0     		sub	sp, sp, #328
  33              		.cfi_def_cfa_offset 336
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 B960     		str	r1, [r7, #8]
  38 000a 7A60     		str	r2, [r7, #4]
  39 000c 3B60     		str	r3, [r7]
  66:Source\FilteringFunctions/arm_fir_fast_q15.c ****   q15_t *pState = S->pState;                     /* State pointer */
  40              		.loc 1 66 0
  41 000e FB68     		ldr	r3, [r7, #12]
  42 0010 5B68     		ldr	r3, [r3, #4]
  43 0012 A222     		mov	r2, #162
  44 0014 5200     		lsl	r2, r2, #1
  45 0016 BA18     		add	r2, r7, r2
  46 0018 1360     		str	r3, [r2]
  67:Source\FilteringFunctions/arm_fir_fast_q15.c ****   q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
  47              		.loc 1 67 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 3


  48 001a FB68     		ldr	r3, [r7, #12]
  49 001c 9B68     		ldr	r3, [r3, #8]
  50 001e 8E22     		mov	r2, #142
  51 0020 5200     		lsl	r2, r2, #1
  52 0022 BA18     		add	r2, r7, r2
  53 0024 1360     		str	r3, [r2]
  68:Source\FilteringFunctions/arm_fir_fast_q15.c ****   q15_t *pStateCurnt;                            /* Points to the current sample of the state */
  69:Source\FilteringFunctions/arm_fir_fast_q15.c ****   q31_t acc0, acc1, acc2, acc3;                  /* Accumulators */
  70:Source\FilteringFunctions/arm_fir_fast_q15.c ****   q15_t *pb;                                     /* Temporary pointer for coefficient buffer */
  71:Source\FilteringFunctions/arm_fir_fast_q15.c ****   q15_t *px;                                     /* Temporary q31 pointer for SIMD state buffer acc
  72:Source\FilteringFunctions/arm_fir_fast_q15.c ****   q31_t x0, x1, x2, c0;                          /* Temporary variables to hold SIMD state and coef
  73:Source\FilteringFunctions/arm_fir_fast_q15.c ****   uint32_t numTaps = S->numTaps;                 /* Number of taps in the filter */
  54              		.loc 1 73 0
  55 0026 FB68     		ldr	r3, [r7, #12]
  56 0028 1B88     		ldrh	r3, [r3]
  57 002a 8C22     		mov	r2, #140
  58 002c 5200     		lsl	r2, r2, #1
  59 002e BA18     		add	r2, r7, r2
  60 0030 1360     		str	r3, [r2]
  74:Source\FilteringFunctions/arm_fir_fast_q15.c ****   uint32_t tapCnt, blkCnt;                       /* Loop counters */
  75:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
  76:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
  77:Source\FilteringFunctions/arm_fir_fast_q15.c ****   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  78:Source\FilteringFunctions/arm_fir_fast_q15.c ****   /* pStateCurnt points to the location where the new input data should be written */
  79:Source\FilteringFunctions/arm_fir_fast_q15.c ****   pStateCurnt = &(S->pState[(numTaps - 1u)]);
  61              		.loc 1 79 0
  62 0032 FB68     		ldr	r3, [r7, #12]
  63 0034 5A68     		ldr	r2, [r3, #4]
  64 0036 8C23     		mov	r3, #140
  65 0038 5B00     		lsl	r3, r3, #1
  66 003a FB18     		add	r3, r7, r3
  67 003c 1B68     		ldr	r3, [r3]
  68 003e 4249     		ldr	r1, .L61
  69 0040 8C46     		mov	ip, r1
  70 0042 6344     		add	r3, r3, ip
  71 0044 5B00     		lsl	r3, r3, #1
  72 0046 D318     		add	r3, r2, r3
  73 0048 A022     		mov	r2, #160
  74 004a 5200     		lsl	r2, r2, #1
  75 004c BA18     		add	r2, r7, r2
  76 004e 1360     		str	r3, [r2]
  80:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
  81:Source\FilteringFunctions/arm_fir_fast_q15.c ****   /* Apply loop unrolling and compute 4 output values simultaneously.
  82:Source\FilteringFunctions/arm_fir_fast_q15.c ****    * The variables acc0 ... acc3 hold output values that are being computed:
  83:Source\FilteringFunctions/arm_fir_fast_q15.c ****    *
  84:Source\FilteringFunctions/arm_fir_fast_q15.c ****    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-
  85:Source\FilteringFunctions/arm_fir_fast_q15.c ****    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-
  86:Source\FilteringFunctions/arm_fir_fast_q15.c ****    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-
  87:Source\FilteringFunctions/arm_fir_fast_q15.c ****    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-
  88:Source\FilteringFunctions/arm_fir_fast_q15.c ****    */
  89:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
  90:Source\FilteringFunctions/arm_fir_fast_q15.c ****   blkCnt = blockSize >> 2;
  77              		.loc 1 90 0
  78 0050 3B68     		ldr	r3, [r7]
  79 0052 9B08     		lsr	r3, r3, #2
  80 0054 9022     		mov	r2, #144
  81 0056 5200     		lsl	r2, r2, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 4


  82 0058 BA18     		add	r2, r7, r2
  83 005a 1360     		str	r3, [r2]
  91:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
  92:Source\FilteringFunctions/arm_fir_fast_q15.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  93:Source\FilteringFunctions/arm_fir_fast_q15.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  94:Source\FilteringFunctions/arm_fir_fast_q15.c ****   while (blkCnt > 0u)
  84              		.loc 1 94 0
  85 005c 00F05EFC 		bl	.L2	@ far jump
  86              	.L42:
  95:Source\FilteringFunctions/arm_fir_fast_q15.c ****   {
  96:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Copy four new input samples into the state buffer.
  97:Source\FilteringFunctions/arm_fir_fast_q15.c ****      ** Use 32-bit SIMD to move the 16-bit data.  Only requires two copies. */
  98:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *pStateCurnt++ = *pSrc++;
  87              		.loc 1 98 0
  88 0060 A023     		mov	r3, #160
  89 0062 5B00     		lsl	r3, r3, #1
  90 0064 FB18     		add	r3, r7, r3
  91 0066 1B68     		ldr	r3, [r3]
  92 0068 9A1C     		add	r2, r3, #2
  93 006a A021     		mov	r1, #160
  94 006c 4900     		lsl	r1, r1, #1
  95 006e 7918     		add	r1, r7, r1
  96 0070 0A60     		str	r2, [r1]
  97 0072 BA68     		ldr	r2, [r7, #8]
  98 0074 911C     		add	r1, r2, #2
  99 0076 B960     		str	r1, [r7, #8]
 100 0078 1288     		ldrh	r2, [r2]
 101 007a 1A80     		strh	r2, [r3]
  99:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *pStateCurnt++ = *pSrc++;
 102              		.loc 1 99 0
 103 007c A023     		mov	r3, #160
 104 007e 5B00     		lsl	r3, r3, #1
 105 0080 FB18     		add	r3, r7, r3
 106 0082 1B68     		ldr	r3, [r3]
 107 0084 9A1C     		add	r2, r3, #2
 108 0086 A021     		mov	r1, #160
 109 0088 4900     		lsl	r1, r1, #1
 110 008a 7918     		add	r1, r7, r1
 111 008c 0A60     		str	r2, [r1]
 112 008e BA68     		ldr	r2, [r7, #8]
 113 0090 911C     		add	r1, r2, #2
 114 0092 B960     		str	r1, [r7, #8]
 115 0094 1288     		ldrh	r2, [r2]
 116 0096 1A80     		strh	r2, [r3]
 100:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *pStateCurnt++ = *pSrc++;
 117              		.loc 1 100 0
 118 0098 A023     		mov	r3, #160
 119 009a 5B00     		lsl	r3, r3, #1
 120 009c FB18     		add	r3, r7, r3
 121 009e 1B68     		ldr	r3, [r3]
 122 00a0 9A1C     		add	r2, r3, #2
 123 00a2 A021     		mov	r1, #160
 124 00a4 4900     		lsl	r1, r1, #1
 125 00a6 7918     		add	r1, r7, r1
 126 00a8 0A60     		str	r2, [r1]
 127 00aa BA68     		ldr	r2, [r7, #8]
 128 00ac 911C     		add	r1, r2, #2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 5


 129 00ae B960     		str	r1, [r7, #8]
 130 00b0 1288     		ldrh	r2, [r2]
 131 00b2 1A80     		strh	r2, [r3]
 101:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *pStateCurnt++ = *pSrc++;
 132              		.loc 1 101 0
 133 00b4 A023     		mov	r3, #160
 134 00b6 5B00     		lsl	r3, r3, #1
 135 00b8 FB18     		add	r3, r7, r3
 136 00ba 1B68     		ldr	r3, [r3]
 137 00bc 9A1C     		add	r2, r3, #2
 138 00be A021     		mov	r1, #160
 139 00c0 4900     		lsl	r1, r1, #1
 140 00c2 7918     		add	r1, r7, r1
 141 00c4 0A60     		str	r2, [r1]
 142 00c6 BA68     		ldr	r2, [r7, #8]
 143 00c8 911C     		add	r1, r2, #2
 144 00ca B960     		str	r1, [r7, #8]
 145 00cc 1288     		ldrh	r2, [r2]
 146 00ce 1A80     		strh	r2, [r3]
 102:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 103:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 104:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Set all accumulators to zero */
 105:Source\FilteringFunctions/arm_fir_fast_q15.c ****     acc0 = 0;
 147              		.loc 1 105 0
 148 00d0 0023     		mov	r3, #0
 149 00d2 9E22     		mov	r2, #158
 150 00d4 5200     		lsl	r2, r2, #1
 151 00d6 BA18     		add	r2, r7, r2
 152 00d8 1360     		str	r3, [r2]
 106:Source\FilteringFunctions/arm_fir_fast_q15.c ****     acc1 = 0;
 153              		.loc 1 106 0
 154 00da 0023     		mov	r3, #0
 155 00dc 9C22     		mov	r2, #156
 156 00de 5200     		lsl	r2, r2, #1
 157 00e0 BA18     		add	r2, r7, r2
 158 00e2 1360     		str	r3, [r2]
 107:Source\FilteringFunctions/arm_fir_fast_q15.c ****     acc2 = 0;
 159              		.loc 1 107 0
 160 00e4 0023     		mov	r3, #0
 161 00e6 9A22     		mov	r2, #154
 162 00e8 5200     		lsl	r2, r2, #1
 163 00ea BA18     		add	r2, r7, r2
 164 00ec 1360     		str	r3, [r2]
 108:Source\FilteringFunctions/arm_fir_fast_q15.c ****     acc3 = 0;
 165              		.loc 1 108 0
 166 00ee 0023     		mov	r3, #0
 167 00f0 9822     		mov	r2, #152
 168 00f2 5200     		lsl	r2, r2, #1
 169 00f4 BA18     		add	r2, r7, r2
 170 00f6 1360     		str	r3, [r2]
 109:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 110:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Typecast q15_t pointer to q31_t pointer for state reading in q31_t */
 111:Source\FilteringFunctions/arm_fir_fast_q15.c ****     px = pState;
 171              		.loc 1 111 0
 172 00f8 A223     		mov	r3, #162
 173 00fa 5B00     		lsl	r3, r3, #1
 174 00fc FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 6


 175 00fe 1B68     		ldr	r3, [r3]
 176 0100 7B61     		str	r3, [r7, #20]
 112:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 113:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Typecast q15_t pointer to q31_t pointer for coefficient reading in q31_t */
 114:Source\FilteringFunctions/arm_fir_fast_q15.c ****     pb = pCoeffs;
 177              		.loc 1 114 0
 178 0102 8E23     		mov	r3, #142
 179 0104 5B00     		lsl	r3, r3, #1
 180 0106 FB18     		add	r3, r7, r3
 181 0108 1B68     		ldr	r3, [r3]
 182 010a BB61     		str	r3, [r7, #24]
 115:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 116:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Read the first two samples from the state buffer:  x[n-N], x[n-N-1] */
 117:Source\FilteringFunctions/arm_fir_fast_q15.c ****     x0 = *__SIMD32(px)++;
 183              		.loc 1 117 0
 184 010c 1423     		mov	r3, #20
 185 010e FB18     		add	r3, r7, r3
 186 0110 1A68     		ldr	r2, [r3]
 187 0112 111D     		add	r1, r2, #4
 188 0114 1960     		str	r1, [r3]
 189 0116 1368     		ldr	r3, [r2]
 190 0118 9622     		mov	r2, #150
 191 011a 5200     		lsl	r2, r2, #1
 192 011c BA18     		add	r2, r7, r2
 193 011e 1360     		str	r3, [r2]
 118:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 119:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Read the third and forth samples from the state buffer: x[n-N-2], x[n-N-3] */
 120:Source\FilteringFunctions/arm_fir_fast_q15.c ****     x2 = *__SIMD32(px)++;
 194              		.loc 1 120 0
 195 0120 1423     		mov	r3, #20
 196 0122 FB18     		add	r3, r7, r3
 197 0124 1A68     		ldr	r2, [r3]
 198 0126 111D     		add	r1, r2, #4
 199 0128 1960     		str	r1, [r3]
 200 012a 1368     		ldr	r3, [r2]
 201 012c 9422     		mov	r2, #148
 202 012e 5200     		lsl	r2, r2, #1
 203 0130 BA18     		add	r2, r7, r2
 204 0132 1360     		str	r3, [r2]
 121:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 122:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Loop over the number of taps.  Unroll by a factor of 4.
 123:Source\FilteringFunctions/arm_fir_fast_q15.c ****      ** Repeat until we've computed numTaps-(numTaps%4) coefficients. */
 124:Source\FilteringFunctions/arm_fir_fast_q15.c ****     tapCnt = numTaps >> 2;
 205              		.loc 1 124 0
 206 0134 8C23     		mov	r3, #140
 207 0136 5B00     		lsl	r3, r3, #1
 208 0138 FB18     		add	r3, r7, r3
 209 013a 1B68     		ldr	r3, [r3]
 210 013c 9B08     		lsr	r3, r3, #2
 211 013e 9222     		mov	r2, #146
 212 0140 5200     		lsl	r2, r2, #1
 213 0142 BA18     		add	r2, r7, r2
 214 0144 1360     		str	r3, [r2]
 125:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 126:Source\FilteringFunctions/arm_fir_fast_q15.c ****     while (tapCnt > 0)
 215              		.loc 1 126 0
 216 0146 F6E1     		b	.L3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 7


 217              	.L62:
 218              		.align	2
 219              	.L61:
 220 0148 FFFFFF7F 		.word	2147483647
 221              	.L12:
 127:Source\FilteringFunctions/arm_fir_fast_q15.c ****     {
 128:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* Read the first two coefficients using SIMD:  b[N] and b[N-1] coefficients */
 129:Source\FilteringFunctions/arm_fir_fast_q15.c ****       c0 = *__SIMD32(pb)++;
 222              		.loc 1 129 0
 223 014c 1823     		mov	r3, #24
 224 014e FB18     		add	r3, r7, r3
 225 0150 1A68     		ldr	r2, [r3]
 226 0152 111D     		add	r1, r2, #4
 227 0154 1960     		str	r1, [r3]
 228 0156 1368     		ldr	r3, [r2]
 229 0158 8A22     		mov	r2, #138
 230 015a 5200     		lsl	r2, r2, #1
 231 015c BA18     		add	r2, r7, r2
 232 015e 1360     		str	r3, [r2]
 130:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 131:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* acc0 +=  b[N] * x[n-N] + b[N-1] * x[n-N-1] */
 132:Source\FilteringFunctions/arm_fir_fast_q15.c ****       acc0 = __SMLAD(x0, c0, acc0);
 233              		.loc 1 132 0
 234 0160 9623     		mov	r3, #150
 235 0162 5B00     		lsl	r3, r3, #1
 236 0164 FB18     		add	r3, r7, r3
 237 0166 1968     		ldr	r1, [r3]
 238 0168 8A23     		mov	r3, #138
 239 016a 5B00     		lsl	r3, r3, #1
 240 016c FB18     		add	r3, r7, r3
 241 016e 1A68     		ldr	r2, [r3]
 242 0170 9E23     		mov	r3, #158
 243 0172 5B00     		lsl	r3, r3, #1
 244 0174 FB18     		add	r3, r7, r3
 245 0176 1B68     		ldr	r3, [r3]
 246 0178 8620     		mov	r0, #134
 247 017a 4000     		lsl	r0, r0, #1
 248 017c 3818     		add	r0, r7, r0
 249 017e 0160     		str	r1, [r0]
 250 0180 8421     		mov	r1, #132
 251 0182 4900     		lsl	r1, r1, #1
 252 0184 7918     		add	r1, r7, r1
 253 0186 0A60     		str	r2, [r1]
 254 0188 7A1D     		add	r2, r7, #5
 255 018a FF32     		add	r2, r2, #255
 256 018c 1360     		str	r3, [r2]
 257              	.LBB36:
 258              	.LBB37:
 259              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 8


   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 9


  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 10


 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 11


 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 12


 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 13


 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 14


 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 15


 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 16


 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 17


 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 18


 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 19


 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 20


 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 724:.\Include/arm_math.h ****   }
 725:.\Include/arm_math.h **** #endif /* end of ARM_MATH_CM0_FAMILY */
 726:.\Include/arm_math.h **** 
 727:.\Include/arm_math.h **** 
 728:.\Include/arm_math.h ****   /*
 729:.\Include/arm_math.h ****    * @brief C custom defined intrinsic function for M3 and M0 processors
 730:.\Include/arm_math.h ****    */
 731:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 732:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 733:.\Include/arm_math.h **** 
 734:.\Include/arm_math.h ****   /*
 735:.\Include/arm_math.h ****    * @brief C custom defined QADD8 for M3 and M0 processors
 736:.\Include/arm_math.h ****    */
 737:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD8(
 738:.\Include/arm_math.h ****   uint32_t x,
 739:.\Include/arm_math.h ****   uint32_t y)
 740:.\Include/arm_math.h ****   {
 741:.\Include/arm_math.h ****     q31_t r, s, t, u;
 742:.\Include/arm_math.h **** 
 743:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) + (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 744:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) + (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 745:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) + (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 746:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) + (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 747:.\Include/arm_math.h **** 
 748:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 749:.\Include/arm_math.h ****   }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 21


 750:.\Include/arm_math.h **** 
 751:.\Include/arm_math.h **** 
 752:.\Include/arm_math.h ****   /*
 753:.\Include/arm_math.h ****    * @brief C custom defined QSUB8 for M3 and M0 processors
 754:.\Include/arm_math.h ****    */
 755:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB8(
 756:.\Include/arm_math.h ****   uint32_t x,
 757:.\Include/arm_math.h ****   uint32_t y)
 758:.\Include/arm_math.h ****   {
 759:.\Include/arm_math.h ****     q31_t r, s, t, u;
 760:.\Include/arm_math.h **** 
 761:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) - (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 762:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) - (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 763:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) - (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 764:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) - (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 765:.\Include/arm_math.h **** 
 766:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 767:.\Include/arm_math.h ****   }
 768:.\Include/arm_math.h **** 
 769:.\Include/arm_math.h **** 
 770:.\Include/arm_math.h ****   /*
 771:.\Include/arm_math.h ****    * @brief C custom defined QADD16 for M3 and M0 processors
 772:.\Include/arm_math.h ****    */
 773:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD16(
 774:.\Include/arm_math.h ****   uint32_t x,
 775:.\Include/arm_math.h ****   uint32_t y)
 776:.\Include/arm_math.h ****   {
 777:.\Include/arm_math.h **** /*  q31_t r,     s;  without initialisation 'arm_offset_q15 test' fails  but 'intrinsic' tests pass
 778:.\Include/arm_math.h ****     q31_t r = 0, s = 0;
 779:.\Include/arm_math.h **** 
 780:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 781:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 782:.\Include/arm_math.h **** 
 783:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 784:.\Include/arm_math.h ****   }
 785:.\Include/arm_math.h **** 
 786:.\Include/arm_math.h **** 
 787:.\Include/arm_math.h ****   /*
 788:.\Include/arm_math.h ****    * @brief C custom defined SHADD16 for M3 and M0 processors
 789:.\Include/arm_math.h ****    */
 790:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHADD16(
 791:.\Include/arm_math.h ****   uint32_t x,
 792:.\Include/arm_math.h ****   uint32_t y)
 793:.\Include/arm_math.h ****   {
 794:.\Include/arm_math.h ****     q31_t r, s;
 795:.\Include/arm_math.h **** 
 796:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 797:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 798:.\Include/arm_math.h **** 
 799:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 800:.\Include/arm_math.h ****   }
 801:.\Include/arm_math.h **** 
 802:.\Include/arm_math.h **** 
 803:.\Include/arm_math.h ****   /*
 804:.\Include/arm_math.h ****    * @brief C custom defined QSUB16 for M3 and M0 processors
 805:.\Include/arm_math.h ****    */
 806:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB16(
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 22


 807:.\Include/arm_math.h ****   uint32_t x,
 808:.\Include/arm_math.h ****   uint32_t y)
 809:.\Include/arm_math.h ****   {
 810:.\Include/arm_math.h ****     q31_t r, s;
 811:.\Include/arm_math.h **** 
 812:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 813:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 814:.\Include/arm_math.h **** 
 815:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 816:.\Include/arm_math.h ****   }
 817:.\Include/arm_math.h **** 
 818:.\Include/arm_math.h **** 
 819:.\Include/arm_math.h ****   /*
 820:.\Include/arm_math.h ****    * @brief C custom defined SHSUB16 for M3 and M0 processors
 821:.\Include/arm_math.h ****    */
 822:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSUB16(
 823:.\Include/arm_math.h ****   uint32_t x,
 824:.\Include/arm_math.h ****   uint32_t y)
 825:.\Include/arm_math.h ****   {
 826:.\Include/arm_math.h ****     q31_t r, s;
 827:.\Include/arm_math.h **** 
 828:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 829:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 830:.\Include/arm_math.h **** 
 831:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 832:.\Include/arm_math.h ****   }
 833:.\Include/arm_math.h **** 
 834:.\Include/arm_math.h **** 
 835:.\Include/arm_math.h ****   /*
 836:.\Include/arm_math.h ****    * @brief C custom defined QASX for M3 and M0 processors
 837:.\Include/arm_math.h ****    */
 838:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QASX(
 839:.\Include/arm_math.h ****   uint32_t x,
 840:.\Include/arm_math.h ****   uint32_t y)
 841:.\Include/arm_math.h ****   {
 842:.\Include/arm_math.h ****     q31_t r, s;
 843:.\Include/arm_math.h **** 
 844:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 845:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 846:.\Include/arm_math.h **** 
 847:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 848:.\Include/arm_math.h ****   }
 849:.\Include/arm_math.h **** 
 850:.\Include/arm_math.h **** 
 851:.\Include/arm_math.h ****   /*
 852:.\Include/arm_math.h ****    * @brief C custom defined SHASX for M3 and M0 processors
 853:.\Include/arm_math.h ****    */
 854:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHASX(
 855:.\Include/arm_math.h ****   uint32_t x,
 856:.\Include/arm_math.h ****   uint32_t y)
 857:.\Include/arm_math.h ****   {
 858:.\Include/arm_math.h ****     q31_t r, s;
 859:.\Include/arm_math.h **** 
 860:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 861:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 862:.\Include/arm_math.h **** 
 863:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 23


 864:.\Include/arm_math.h ****   }
 865:.\Include/arm_math.h **** 
 866:.\Include/arm_math.h **** 
 867:.\Include/arm_math.h ****   /*
 868:.\Include/arm_math.h ****    * @brief C custom defined QSAX for M3 and M0 processors
 869:.\Include/arm_math.h ****    */
 870:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSAX(
 871:.\Include/arm_math.h ****   uint32_t x,
 872:.\Include/arm_math.h ****   uint32_t y)
 873:.\Include/arm_math.h ****   {
 874:.\Include/arm_math.h ****     q31_t r, s;
 875:.\Include/arm_math.h **** 
 876:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 877:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 878:.\Include/arm_math.h **** 
 879:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 880:.\Include/arm_math.h ****   }
 881:.\Include/arm_math.h **** 
 882:.\Include/arm_math.h **** 
 883:.\Include/arm_math.h ****   /*
 884:.\Include/arm_math.h ****    * @brief C custom defined SHSAX for M3 and M0 processors
 885:.\Include/arm_math.h ****    */
 886:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSAX(
 887:.\Include/arm_math.h ****   uint32_t x,
 888:.\Include/arm_math.h ****   uint32_t y)
 889:.\Include/arm_math.h ****   {
 890:.\Include/arm_math.h ****     q31_t r, s;
 891:.\Include/arm_math.h **** 
 892:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 893:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 894:.\Include/arm_math.h **** 
 895:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 896:.\Include/arm_math.h ****   }
 897:.\Include/arm_math.h **** 
 898:.\Include/arm_math.h **** 
 899:.\Include/arm_math.h ****   /*
 900:.\Include/arm_math.h ****    * @brief C custom defined SMUSDX for M3 and M0 processors
 901:.\Include/arm_math.h ****    */
 902:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUSDX(
 903:.\Include/arm_math.h ****   uint32_t x,
 904:.\Include/arm_math.h ****   uint32_t y)
 905:.\Include/arm_math.h ****   {
 906:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 907:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 908:.\Include/arm_math.h ****   }
 909:.\Include/arm_math.h **** 
 910:.\Include/arm_math.h ****   /*
 911:.\Include/arm_math.h ****    * @brief C custom defined SMUADX for M3 and M0 processors
 912:.\Include/arm_math.h ****    */
 913:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUADX(
 914:.\Include/arm_math.h ****   uint32_t x,
 915:.\Include/arm_math.h ****   uint32_t y)
 916:.\Include/arm_math.h ****   {
 917:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 918:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 919:.\Include/arm_math.h ****   }
 920:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 24


 921:.\Include/arm_math.h **** 
 922:.\Include/arm_math.h ****   /*
 923:.\Include/arm_math.h ****    * @brief C custom defined QADD for M3 and M0 processors
 924:.\Include/arm_math.h ****    */
 925:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QADD(
 926:.\Include/arm_math.h ****   int32_t x,
 927:.\Include/arm_math.h ****   int32_t y)
 928:.\Include/arm_math.h ****   {
 929:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x + (q31_t)y)));
 930:.\Include/arm_math.h ****   }
 931:.\Include/arm_math.h **** 
 932:.\Include/arm_math.h **** 
 933:.\Include/arm_math.h ****   /*
 934:.\Include/arm_math.h ****    * @brief C custom defined QSUB for M3 and M0 processors
 935:.\Include/arm_math.h ****    */
 936:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QSUB(
 937:.\Include/arm_math.h ****   int32_t x,
 938:.\Include/arm_math.h ****   int32_t y)
 939:.\Include/arm_math.h ****   {
 940:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x - (q31_t)y)));
 941:.\Include/arm_math.h ****   }
 942:.\Include/arm_math.h **** 
 943:.\Include/arm_math.h **** 
 944:.\Include/arm_math.h ****   /*
 945:.\Include/arm_math.h ****    * @brief C custom defined SMLAD for M3 and M0 processors
 946:.\Include/arm_math.h ****    */
 947:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLAD(
 948:.\Include/arm_math.h ****   uint32_t x,
 949:.\Include/arm_math.h ****   uint32_t y,
 950:.\Include/arm_math.h ****   uint32_t sum)
 951:.\Include/arm_math.h ****   {
 952:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 260              		.loc 2 952 0
 261 018e 8623     		mov	r3, #134
 262 0190 5B00     		lsl	r3, r3, #1
 263 0192 FB18     		add	r3, r7, r3
 264 0194 1B68     		ldr	r3, [r3]
 265 0196 1B04     		lsl	r3, r3, #16
 266 0198 1B14     		asr	r3, r3, #16
 267 019a 8422     		mov	r2, #132
 268 019c 5200     		lsl	r2, r2, #1
 269 019e BA18     		add	r2, r7, r2
 270 01a0 1268     		ldr	r2, [r2]
 271 01a2 1204     		lsl	r2, r2, #16
 272 01a4 1214     		asr	r2, r2, #16
 273 01a6 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 274              		.loc 2 953 0
 275 01a8 8623     		mov	r3, #134
 276 01aa 5B00     		lsl	r3, r3, #1
 277 01ac FB18     		add	r3, r7, r3
 278 01ae 1B68     		ldr	r3, [r3]
 279 01b0 1B14     		asr	r3, r3, #16
 280 01b2 8421     		mov	r1, #132
 281 01b4 4900     		lsl	r1, r1, #1
 282 01b6 7918     		add	r1, r7, r1
 283 01b8 0968     		ldr	r1, [r1]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 25


 284 01ba 0914     		asr	r1, r1, #16
 285 01bc 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 286              		.loc 2 952 0
 287 01be D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 288              		.loc 2 954 0
 289 01c0 7B1D     		add	r3, r7, #5
 290 01c2 FF33     		add	r3, r3, #255
 291 01c4 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 292              		.loc 2 953 0
 293 01c6 D318     		add	r3, r2, r3
 294              	.LBE37:
 295              	.LBE36:
 296              		.loc 1 132 0
 297 01c8 9E22     		mov	r2, #158
 298 01ca 5200     		lsl	r2, r2, #1
 299 01cc BA18     		add	r2, r7, r2
 300 01ce 1360     		str	r3, [r2]
 133:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 134:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* acc2 +=  b[N] * x[n-N-2] + b[N-1] * x[n-N-3] */
 135:Source\FilteringFunctions/arm_fir_fast_q15.c ****       acc2 = __SMLAD(x2, c0, acc2);
 301              		.loc 1 135 0
 302 01d0 9423     		mov	r3, #148
 303 01d2 5B00     		lsl	r3, r3, #1
 304 01d4 FB18     		add	r3, r7, r3
 305 01d6 1968     		ldr	r1, [r3]
 306 01d8 8A23     		mov	r3, #138
 307 01da 5B00     		lsl	r3, r3, #1
 308 01dc FB18     		add	r3, r7, r3
 309 01de 1A68     		ldr	r2, [r3]
 310 01e0 9A23     		mov	r3, #154
 311 01e2 5B00     		lsl	r3, r3, #1
 312 01e4 FB18     		add	r3, r7, r3
 313 01e6 1B68     		ldr	r3, [r3]
 314 01e8 781C     		add	r0, r7, #1
 315 01ea FF30     		add	r0, r0, #255
 316 01ec 0160     		str	r1, [r0]
 317 01ee FC21     		mov	r1, #252
 318 01f0 7918     		add	r1, r7, r1
 319 01f2 0A60     		str	r2, [r1]
 320 01f4 F822     		mov	r2, #248
 321 01f6 BA18     		add	r2, r7, r2
 322 01f8 1360     		str	r3, [r2]
 323              	.LBB38:
 324              	.LBB39:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 325              		.loc 2 952 0
 326 01fa 7B1C     		add	r3, r7, #1
 327 01fc FF33     		add	r3, r3, #255
 328 01fe 1B68     		ldr	r3, [r3]
 329 0200 1B04     		lsl	r3, r3, #16
 330 0202 1B14     		asr	r3, r3, #16
 331 0204 FC22     		mov	r2, #252
 332 0206 BA18     		add	r2, r7, r2
 333 0208 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 26


 334 020a 1204     		lsl	r2, r2, #16
 335 020c 1214     		asr	r2, r2, #16
 336 020e 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 337              		.loc 2 953 0
 338 0210 7B1C     		add	r3, r7, #1
 339 0212 FF33     		add	r3, r3, #255
 340 0214 1B68     		ldr	r3, [r3]
 341 0216 1B14     		asr	r3, r3, #16
 342 0218 FC21     		mov	r1, #252
 343 021a 7918     		add	r1, r7, r1
 344 021c 0968     		ldr	r1, [r1]
 345 021e 0914     		asr	r1, r1, #16
 346 0220 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 347              		.loc 2 952 0
 348 0222 D218     		add	r2, r2, r3
 349              		.loc 2 954 0
 350 0224 F823     		mov	r3, #248
 351 0226 FB18     		add	r3, r7, r3
 352 0228 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 353              		.loc 2 953 0
 354 022a D318     		add	r3, r2, r3
 355              	.LBE39:
 356              	.LBE38:
 357              		.loc 1 135 0
 358 022c 9A22     		mov	r2, #154
 359 022e 5200     		lsl	r2, r2, #1
 360 0230 BA18     		add	r2, r7, r2
 361 0232 1360     		str	r3, [r2]
 136:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 137:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* pack  x[n-N-1] and x[n-N-2] */
 138:Source\FilteringFunctions/arm_fir_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 139:Source\FilteringFunctions/arm_fir_fast_q15.c ****       x1 = __PKHBT(x2, x0, 0);
 362              		.loc 1 139 0
 363 0234 9423     		mov	r3, #148
 364 0236 5B00     		lsl	r3, r3, #1
 365 0238 FB18     		add	r3, r7, r3
 366 023a 1B68     		ldr	r3, [r3]
 367 023c 1B04     		lsl	r3, r3, #16
 368 023e 1A0C     		lsr	r2, r3, #16
 369 0240 9623     		mov	r3, #150
 370 0242 5B00     		lsl	r3, r3, #1
 371 0244 FB18     		add	r3, r7, r3
 372 0246 1B68     		ldr	r3, [r3]
 373 0248 1B0C     		lsr	r3, r3, #16
 374 024a 1B04     		lsl	r3, r3, #16
 375 024c 1343     		orr	r3, r2
 376 024e 8822     		mov	r2, #136
 377 0250 5200     		lsl	r2, r2, #1
 378 0252 BA18     		add	r2, r7, r2
 379 0254 1360     		str	r3, [r2]
 140:Source\FilteringFunctions/arm_fir_fast_q15.c **** #else
 141:Source\FilteringFunctions/arm_fir_fast_q15.c ****       x1 = __PKHBT(x0, x2, 0);
 142:Source\FilteringFunctions/arm_fir_fast_q15.c **** #endif
 143:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 27


 144:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* Read state x[n-N-4], x[n-N-5] */
 145:Source\FilteringFunctions/arm_fir_fast_q15.c ****       x0 = _SIMD32_OFFSET(px);
 380              		.loc 1 145 0
 381 0256 7B69     		ldr	r3, [r7, #20]
 382 0258 1B68     		ldr	r3, [r3]
 383 025a 9622     		mov	r2, #150
 384 025c 5200     		lsl	r2, r2, #1
 385 025e BA18     		add	r2, r7, r2
 386 0260 1360     		str	r3, [r2]
 146:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 147:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* acc1 +=  b[N] * x[n-N-1] + b[N-1] * x[n-N-2] */
 148:Source\FilteringFunctions/arm_fir_fast_q15.c ****       acc1 = __SMLADX(x1, c0, acc1);
 387              		.loc 1 148 0
 388 0262 8823     		mov	r3, #136
 389 0264 5B00     		lsl	r3, r3, #1
 390 0266 FB18     		add	r3, r7, r3
 391 0268 1968     		ldr	r1, [r3]
 392 026a 8A23     		mov	r3, #138
 393 026c 5B00     		lsl	r3, r3, #1
 394 026e FB18     		add	r3, r7, r3
 395 0270 1A68     		ldr	r2, [r3]
 396 0272 9C23     		mov	r3, #156
 397 0274 5B00     		lsl	r3, r3, #1
 398 0276 FB18     		add	r3, r7, r3
 399 0278 1B68     		ldr	r3, [r3]
 400 027a F420     		mov	r0, #244
 401 027c 3818     		add	r0, r7, r0
 402 027e 0160     		str	r1, [r0]
 403 0280 F021     		mov	r1, #240
 404 0282 7918     		add	r1, r7, r1
 405 0284 0A60     		str	r2, [r1]
 406 0286 EC22     		mov	r2, #236
 407 0288 BA18     		add	r2, r7, r2
 408 028a 1360     		str	r3, [r2]
 409              	.LBB40:
 410              	.LBB41:
 955:.\Include/arm_math.h ****   }
 956:.\Include/arm_math.h **** 
 957:.\Include/arm_math.h **** 
 958:.\Include/arm_math.h ****   /*
 959:.\Include/arm_math.h ****    * @brief C custom defined SMLADX for M3 and M0 processors
 960:.\Include/arm_math.h ****    */
 961:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLADX(
 962:.\Include/arm_math.h ****   uint32_t x,
 963:.\Include/arm_math.h ****   uint32_t y,
 964:.\Include/arm_math.h ****   uint32_t sum)
 965:.\Include/arm_math.h ****   {
 966:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 411              		.loc 2 966 0
 412 028c F423     		mov	r3, #244
 413 028e FB18     		add	r3, r7, r3
 414 0290 1B68     		ldr	r3, [r3]
 415 0292 1B04     		lsl	r3, r3, #16
 416 0294 1B14     		asr	r3, r3, #16
 417 0296 F022     		mov	r2, #240
 418 0298 BA18     		add	r2, r7, r2
 419 029a 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 28


 420 029c 1214     		asr	r2, r2, #16
 421 029e 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 422              		.loc 2 967 0
 423 02a0 F423     		mov	r3, #244
 424 02a2 FB18     		add	r3, r7, r3
 425 02a4 1B68     		ldr	r3, [r3]
 426 02a6 1B14     		asr	r3, r3, #16
 427 02a8 F021     		mov	r1, #240
 428 02aa 7918     		add	r1, r7, r1
 429 02ac 0968     		ldr	r1, [r1]
 430 02ae 0904     		lsl	r1, r1, #16
 431 02b0 0914     		asr	r1, r1, #16
 432 02b2 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 433              		.loc 2 966 0
 434 02b4 D218     		add	r2, r2, r3
 968:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 435              		.loc 2 968 0
 436 02b6 EC23     		mov	r3, #236
 437 02b8 FB18     		add	r3, r7, r3
 438 02ba 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 439              		.loc 2 967 0
 440 02bc D318     		add	r3, r2, r3
 441              	.LBE41:
 442              	.LBE40:
 443              		.loc 1 148 0
 444 02be 9C22     		mov	r2, #156
 445 02c0 5200     		lsl	r2, r2, #1
 446 02c2 BA18     		add	r2, r7, r2
 447 02c4 1360     		str	r3, [r2]
 149:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 150:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* pack  x[n-N-3] and x[n-N-4] */
 151:Source\FilteringFunctions/arm_fir_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 152:Source\FilteringFunctions/arm_fir_fast_q15.c ****       x1 = __PKHBT(x0, x2, 0);
 448              		.loc 1 152 0
 449 02c6 9623     		mov	r3, #150
 450 02c8 5B00     		lsl	r3, r3, #1
 451 02ca FB18     		add	r3, r7, r3
 452 02cc 1B68     		ldr	r3, [r3]
 453 02ce 1B04     		lsl	r3, r3, #16
 454 02d0 1A0C     		lsr	r2, r3, #16
 455 02d2 9423     		mov	r3, #148
 456 02d4 5B00     		lsl	r3, r3, #1
 457 02d6 FB18     		add	r3, r7, r3
 458 02d8 1B68     		ldr	r3, [r3]
 459 02da 1B0C     		lsr	r3, r3, #16
 460 02dc 1B04     		lsl	r3, r3, #16
 461 02de 1343     		orr	r3, r2
 462 02e0 8822     		mov	r2, #136
 463 02e2 5200     		lsl	r2, r2, #1
 464 02e4 BA18     		add	r2, r7, r2
 465 02e6 1360     		str	r3, [r2]
 153:Source\FilteringFunctions/arm_fir_fast_q15.c **** #else
 154:Source\FilteringFunctions/arm_fir_fast_q15.c ****       x1 = __PKHBT(x2, x0, 0);
 155:Source\FilteringFunctions/arm_fir_fast_q15.c **** #endif
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 29


 156:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 157:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* acc3 +=  b[N] * x[n-N-3] + b[N-1] * x[n-N-4] */
 158:Source\FilteringFunctions/arm_fir_fast_q15.c ****       acc3 = __SMLADX(x1, c0, acc3);
 466              		.loc 1 158 0
 467 02e8 8823     		mov	r3, #136
 468 02ea 5B00     		lsl	r3, r3, #1
 469 02ec FB18     		add	r3, r7, r3
 470 02ee 1968     		ldr	r1, [r3]
 471 02f0 8A23     		mov	r3, #138
 472 02f2 5B00     		lsl	r3, r3, #1
 473 02f4 FB18     		add	r3, r7, r3
 474 02f6 1A68     		ldr	r2, [r3]
 475 02f8 9823     		mov	r3, #152
 476 02fa 5B00     		lsl	r3, r3, #1
 477 02fc FB18     		add	r3, r7, r3
 478 02fe 1B68     		ldr	r3, [r3]
 479 0300 E820     		mov	r0, #232
 480 0302 3818     		add	r0, r7, r0
 481 0304 0160     		str	r1, [r0]
 482 0306 E421     		mov	r1, #228
 483 0308 7918     		add	r1, r7, r1
 484 030a 0A60     		str	r2, [r1]
 485 030c E022     		mov	r2, #224
 486 030e BA18     		add	r2, r7, r2
 487 0310 1360     		str	r3, [r2]
 488              	.LBB42:
 489              	.LBB43:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 490              		.loc 2 966 0
 491 0312 E823     		mov	r3, #232
 492 0314 FB18     		add	r3, r7, r3
 493 0316 1B68     		ldr	r3, [r3]
 494 0318 1B04     		lsl	r3, r3, #16
 495 031a 1B14     		asr	r3, r3, #16
 496 031c E422     		mov	r2, #228
 497 031e BA18     		add	r2, r7, r2
 498 0320 1268     		ldr	r2, [r2]
 499 0322 1214     		asr	r2, r2, #16
 500 0324 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 501              		.loc 2 967 0
 502 0326 E823     		mov	r3, #232
 503 0328 FB18     		add	r3, r7, r3
 504 032a 1B68     		ldr	r3, [r3]
 505 032c 1B14     		asr	r3, r3, #16
 506 032e E421     		mov	r1, #228
 507 0330 7918     		add	r1, r7, r1
 508 0332 0968     		ldr	r1, [r1]
 509 0334 0904     		lsl	r1, r1, #16
 510 0336 0914     		asr	r1, r1, #16
 511 0338 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 512              		.loc 2 966 0
 513 033a D218     		add	r2, r2, r3
 514              		.loc 2 968 0
 515 033c E023     		mov	r3, #224
 516 033e FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 30


 517 0340 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 518              		.loc 2 967 0
 519 0342 D318     		add	r3, r2, r3
 520              	.LBE43:
 521              	.LBE42:
 522              		.loc 1 158 0
 523 0344 9822     		mov	r2, #152
 524 0346 5200     		lsl	r2, r2, #1
 525 0348 BA18     		add	r2, r7, r2
 526 034a 1360     		str	r3, [r2]
 159:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 160:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* Read coefficients b[N-2], b[N-3] */
 161:Source\FilteringFunctions/arm_fir_fast_q15.c ****       c0 = *__SIMD32(pb)++;
 527              		.loc 1 161 0
 528 034c 1823     		mov	r3, #24
 529 034e FB18     		add	r3, r7, r3
 530 0350 1A68     		ldr	r2, [r3]
 531 0352 111D     		add	r1, r2, #4
 532 0354 1960     		str	r1, [r3]
 533 0356 1368     		ldr	r3, [r2]
 534 0358 8A22     		mov	r2, #138
 535 035a 5200     		lsl	r2, r2, #1
 536 035c BA18     		add	r2, r7, r2
 537 035e 1360     		str	r3, [r2]
 162:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 163:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* acc0 +=  b[N-2] * x[n-N-2] + b[N-3] * x[n-N-3] */
 164:Source\FilteringFunctions/arm_fir_fast_q15.c ****       acc0 = __SMLAD(x2, c0, acc0);
 538              		.loc 1 164 0
 539 0360 9423     		mov	r3, #148
 540 0362 5B00     		lsl	r3, r3, #1
 541 0364 FB18     		add	r3, r7, r3
 542 0366 1968     		ldr	r1, [r3]
 543 0368 8A23     		mov	r3, #138
 544 036a 5B00     		lsl	r3, r3, #1
 545 036c FB18     		add	r3, r7, r3
 546 036e 1A68     		ldr	r2, [r3]
 547 0370 9E23     		mov	r3, #158
 548 0372 5B00     		lsl	r3, r3, #1
 549 0374 FB18     		add	r3, r7, r3
 550 0376 1B68     		ldr	r3, [r3]
 551 0378 DC20     		mov	r0, #220
 552 037a 3818     		add	r0, r7, r0
 553 037c 0160     		str	r1, [r0]
 554 037e D821     		mov	r1, #216
 555 0380 7918     		add	r1, r7, r1
 556 0382 0A60     		str	r2, [r1]
 557 0384 D422     		mov	r2, #212
 558 0386 BA18     		add	r2, r7, r2
 559 0388 1360     		str	r3, [r2]
 560              	.LBB44:
 561              	.LBB45:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 562              		.loc 2 952 0
 563 038a DC23     		mov	r3, #220
 564 038c FB18     		add	r3, r7, r3
 565 038e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 31


 566 0390 1B04     		lsl	r3, r3, #16
 567 0392 1B14     		asr	r3, r3, #16
 568 0394 D822     		mov	r2, #216
 569 0396 BA18     		add	r2, r7, r2
 570 0398 1268     		ldr	r2, [r2]
 571 039a 1204     		lsl	r2, r2, #16
 572 039c 1214     		asr	r2, r2, #16
 573 039e 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 574              		.loc 2 953 0
 575 03a0 DC23     		mov	r3, #220
 576 03a2 FB18     		add	r3, r7, r3
 577 03a4 1B68     		ldr	r3, [r3]
 578 03a6 1B14     		asr	r3, r3, #16
 579 03a8 D821     		mov	r1, #216
 580 03aa 7918     		add	r1, r7, r1
 581 03ac 0968     		ldr	r1, [r1]
 582 03ae 0914     		asr	r1, r1, #16
 583 03b0 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 584              		.loc 2 952 0
 585 03b2 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 586              		.loc 2 954 0
 587 03b4 D423     		mov	r3, #212
 588 03b6 FB18     		add	r3, r7, r3
 589 03b8 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 590              		.loc 2 953 0
 591 03ba D318     		add	r3, r2, r3
 592              	.LBE45:
 593              	.LBE44:
 594              		.loc 1 164 0
 595 03bc 9E22     		mov	r2, #158
 596 03be 5200     		lsl	r2, r2, #1
 597 03c0 BA18     		add	r2, r7, r2
 598 03c2 1360     		str	r3, [r2]
 165:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 166:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* Read state x[n-N-6], x[n-N-7] with offset */
 167:Source\FilteringFunctions/arm_fir_fast_q15.c ****       x2 = _SIMD32_OFFSET(px + 2u);
 599              		.loc 1 167 0
 600 03c4 7B69     		ldr	r3, [r7, #20]
 601 03c6 5B68     		ldr	r3, [r3, #4]
 602 03c8 9422     		mov	r2, #148
 603 03ca 5200     		lsl	r2, r2, #1
 604 03cc BA18     		add	r2, r7, r2
 605 03ce 1360     		str	r3, [r2]
 168:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 169:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* acc2 +=  b[N-2] * x[n-N-4] + b[N-3] * x[n-N-5] */
 170:Source\FilteringFunctions/arm_fir_fast_q15.c ****       acc2 = __SMLAD(x0, c0, acc2);
 606              		.loc 1 170 0
 607 03d0 9623     		mov	r3, #150
 608 03d2 5B00     		lsl	r3, r3, #1
 609 03d4 FB18     		add	r3, r7, r3
 610 03d6 1968     		ldr	r1, [r3]
 611 03d8 8A23     		mov	r3, #138
 612 03da 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 32


 613 03dc FB18     		add	r3, r7, r3
 614 03de 1A68     		ldr	r2, [r3]
 615 03e0 9A23     		mov	r3, #154
 616 03e2 5B00     		lsl	r3, r3, #1
 617 03e4 FB18     		add	r3, r7, r3
 618 03e6 1B68     		ldr	r3, [r3]
 619 03e8 D020     		mov	r0, #208
 620 03ea 3818     		add	r0, r7, r0
 621 03ec 0160     		str	r1, [r0]
 622 03ee CC21     		mov	r1, #204
 623 03f0 7918     		add	r1, r7, r1
 624 03f2 0A60     		str	r2, [r1]
 625 03f4 C822     		mov	r2, #200
 626 03f6 BA18     		add	r2, r7, r2
 627 03f8 1360     		str	r3, [r2]
 628              	.LBB46:
 629              	.LBB47:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 630              		.loc 2 952 0
 631 03fa D023     		mov	r3, #208
 632 03fc FB18     		add	r3, r7, r3
 633 03fe 1B68     		ldr	r3, [r3]
 634 0400 1B04     		lsl	r3, r3, #16
 635 0402 1B14     		asr	r3, r3, #16
 636 0404 CC22     		mov	r2, #204
 637 0406 BA18     		add	r2, r7, r2
 638 0408 1268     		ldr	r2, [r2]
 639 040a 1204     		lsl	r2, r2, #16
 640 040c 1214     		asr	r2, r2, #16
 641 040e 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 642              		.loc 2 953 0
 643 0410 D023     		mov	r3, #208
 644 0412 FB18     		add	r3, r7, r3
 645 0414 1B68     		ldr	r3, [r3]
 646 0416 1B14     		asr	r3, r3, #16
 647 0418 CC21     		mov	r1, #204
 648 041a 7918     		add	r1, r7, r1
 649 041c 0968     		ldr	r1, [r1]
 650 041e 0914     		asr	r1, r1, #16
 651 0420 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 652              		.loc 2 952 0
 653 0422 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 654              		.loc 2 954 0
 655 0424 C823     		mov	r3, #200
 656 0426 FB18     		add	r3, r7, r3
 657 0428 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 658              		.loc 2 953 0
 659 042a D318     		add	r3, r2, r3
 660              	.LBE47:
 661              	.LBE46:
 662              		.loc 1 170 0
 663 042c 9A22     		mov	r2, #154
 664 042e 5200     		lsl	r2, r2, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 33


 665 0430 BA18     		add	r2, r7, r2
 666 0432 1360     		str	r3, [r2]
 171:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 172:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* acc1 +=  b[N-2] * x[n-N-3] + b[N-3] * x[n-N-4] */
 173:Source\FilteringFunctions/arm_fir_fast_q15.c ****       acc1 = __SMLADX(x1, c0, acc1);
 667              		.loc 1 173 0
 668 0434 8823     		mov	r3, #136
 669 0436 5B00     		lsl	r3, r3, #1
 670 0438 FB18     		add	r3, r7, r3
 671 043a 1968     		ldr	r1, [r3]
 672 043c 8A23     		mov	r3, #138
 673 043e 5B00     		lsl	r3, r3, #1
 674 0440 FB18     		add	r3, r7, r3
 675 0442 1A68     		ldr	r2, [r3]
 676 0444 9C23     		mov	r3, #156
 677 0446 5B00     		lsl	r3, r3, #1
 678 0448 FB18     		add	r3, r7, r3
 679 044a 1B68     		ldr	r3, [r3]
 680 044c C420     		mov	r0, #196
 681 044e 3818     		add	r0, r7, r0
 682 0450 0160     		str	r1, [r0]
 683 0452 C021     		mov	r1, #192
 684 0454 7918     		add	r1, r7, r1
 685 0456 0A60     		str	r2, [r1]
 686 0458 BC22     		mov	r2, #188
 687 045a BA18     		add	r2, r7, r2
 688 045c 1360     		str	r3, [r2]
 689              	.LBB48:
 690              	.LBB49:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 691              		.loc 2 966 0
 692 045e C423     		mov	r3, #196
 693 0460 FB18     		add	r3, r7, r3
 694 0462 1B68     		ldr	r3, [r3]
 695 0464 1B04     		lsl	r3, r3, #16
 696 0466 1B14     		asr	r3, r3, #16
 697 0468 C022     		mov	r2, #192
 698 046a BA18     		add	r2, r7, r2
 699 046c 1268     		ldr	r2, [r2]
 700 046e 1214     		asr	r2, r2, #16
 701 0470 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 702              		.loc 2 967 0
 703 0472 C423     		mov	r3, #196
 704 0474 FB18     		add	r3, r7, r3
 705 0476 1B68     		ldr	r3, [r3]
 706 0478 1B14     		asr	r3, r3, #16
 707 047a C021     		mov	r1, #192
 708 047c 7918     		add	r1, r7, r1
 709 047e 0968     		ldr	r1, [r1]
 710 0480 0904     		lsl	r1, r1, #16
 711 0482 0914     		asr	r1, r1, #16
 712 0484 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 713              		.loc 2 966 0
 714 0486 D218     		add	r2, r2, r3
 715              		.loc 2 968 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 34


 716 0488 BC23     		mov	r3, #188
 717 048a FB18     		add	r3, r7, r3
 718 048c 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 719              		.loc 2 967 0
 720 048e D318     		add	r3, r2, r3
 721              	.LBE49:
 722              	.LBE48:
 723              		.loc 1 173 0
 724 0490 9C22     		mov	r2, #156
 725 0492 5200     		lsl	r2, r2, #1
 726 0494 BA18     		add	r2, r7, r2
 727 0496 1360     		str	r3, [r2]
 174:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 175:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* pack  x[n-N-5] and x[n-N-6] */
 176:Source\FilteringFunctions/arm_fir_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 177:Source\FilteringFunctions/arm_fir_fast_q15.c ****       x1 = __PKHBT(x2, x0, 0);
 728              		.loc 1 177 0
 729 0498 9423     		mov	r3, #148
 730 049a 5B00     		lsl	r3, r3, #1
 731 049c FB18     		add	r3, r7, r3
 732 049e 1B68     		ldr	r3, [r3]
 733 04a0 1B04     		lsl	r3, r3, #16
 734 04a2 1A0C     		lsr	r2, r3, #16
 735 04a4 9623     		mov	r3, #150
 736 04a6 5B00     		lsl	r3, r3, #1
 737 04a8 FB18     		add	r3, r7, r3
 738 04aa 1B68     		ldr	r3, [r3]
 739 04ac 1B0C     		lsr	r3, r3, #16
 740 04ae 1B04     		lsl	r3, r3, #16
 741 04b0 1343     		orr	r3, r2
 742 04b2 8822     		mov	r2, #136
 743 04b4 5200     		lsl	r2, r2, #1
 744 04b6 BA18     		add	r2, r7, r2
 745 04b8 1360     		str	r3, [r2]
 178:Source\FilteringFunctions/arm_fir_fast_q15.c **** #else
 179:Source\FilteringFunctions/arm_fir_fast_q15.c ****       x1 = __PKHBT(x0, x2, 0);
 180:Source\FilteringFunctions/arm_fir_fast_q15.c **** #endif
 181:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 182:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* acc3 +=  b[N-2] * x[n-N-5] + b[N-3] * x[n-N-6] */
 183:Source\FilteringFunctions/arm_fir_fast_q15.c ****       acc3 = __SMLADX(x1, c0, acc3);
 746              		.loc 1 183 0
 747 04ba 8823     		mov	r3, #136
 748 04bc 5B00     		lsl	r3, r3, #1
 749 04be FB18     		add	r3, r7, r3
 750 04c0 1968     		ldr	r1, [r3]
 751 04c2 8A23     		mov	r3, #138
 752 04c4 5B00     		lsl	r3, r3, #1
 753 04c6 FB18     		add	r3, r7, r3
 754 04c8 1A68     		ldr	r2, [r3]
 755 04ca 9823     		mov	r3, #152
 756 04cc 5B00     		lsl	r3, r3, #1
 757 04ce FB18     		add	r3, r7, r3
 758 04d0 1B68     		ldr	r3, [r3]
 759 04d2 B820     		mov	r0, #184
 760 04d4 3818     		add	r0, r7, r0
 761 04d6 0160     		str	r1, [r0]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 35


 762 04d8 B421     		mov	r1, #180
 763 04da 7918     		add	r1, r7, r1
 764 04dc 0A60     		str	r2, [r1]
 765 04de B022     		mov	r2, #176
 766 04e0 BA18     		add	r2, r7, r2
 767 04e2 1360     		str	r3, [r2]
 768              	.LBB50:
 769              	.LBB51:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 770              		.loc 2 966 0
 771 04e4 B823     		mov	r3, #184
 772 04e6 FB18     		add	r3, r7, r3
 773 04e8 1B68     		ldr	r3, [r3]
 774 04ea 1B04     		lsl	r3, r3, #16
 775 04ec 1B14     		asr	r3, r3, #16
 776 04ee B422     		mov	r2, #180
 777 04f0 BA18     		add	r2, r7, r2
 778 04f2 1268     		ldr	r2, [r2]
 779 04f4 1214     		asr	r2, r2, #16
 780 04f6 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 781              		.loc 2 967 0
 782 04f8 B823     		mov	r3, #184
 783 04fa FB18     		add	r3, r7, r3
 784 04fc 1B68     		ldr	r3, [r3]
 785 04fe 1B14     		asr	r3, r3, #16
 786 0500 B421     		mov	r1, #180
 787 0502 7918     		add	r1, r7, r1
 788 0504 0968     		ldr	r1, [r1]
 789 0506 0904     		lsl	r1, r1, #16
 790 0508 0914     		asr	r1, r1, #16
 791 050a 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 792              		.loc 2 966 0
 793 050c D218     		add	r2, r2, r3
 794              		.loc 2 968 0
 795 050e B023     		mov	r3, #176
 796 0510 FB18     		add	r3, r7, r3
 797 0512 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 798              		.loc 2 967 0
 799 0514 D318     		add	r3, r2, r3
 800              	.LBE51:
 801              	.LBE50:
 802              		.loc 1 183 0
 803 0516 9822     		mov	r2, #152
 804 0518 5200     		lsl	r2, r2, #1
 805 051a BA18     		add	r2, r7, r2
 806 051c 1360     		str	r3, [r2]
 184:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 185:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* Update state pointer for next state reading */
 186:Source\FilteringFunctions/arm_fir_fast_q15.c ****       px += 4u;
 807              		.loc 1 186 0
 808 051e 7B69     		ldr	r3, [r7, #20]
 809 0520 0833     		add	r3, r3, #8
 810 0522 7B61     		str	r3, [r7, #20]
 187:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 36


 188:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* Decrement tap count */
 189:Source\FilteringFunctions/arm_fir_fast_q15.c ****       tapCnt--;
 811              		.loc 1 189 0
 812 0524 9223     		mov	r3, #146
 813 0526 5B00     		lsl	r3, r3, #1
 814 0528 FB18     		add	r3, r7, r3
 815 052a 1B68     		ldr	r3, [r3]
 816 052c 013B     		sub	r3, r3, #1
 817 052e 9222     		mov	r2, #146
 818 0530 5200     		lsl	r2, r2, #1
 819 0532 BA18     		add	r2, r7, r2
 820 0534 1360     		str	r3, [r2]
 821              	.L3:
 126:Source\FilteringFunctions/arm_fir_fast_q15.c ****     {
 822              		.loc 1 126 0
 823 0536 9223     		mov	r3, #146
 824 0538 5B00     		lsl	r3, r3, #1
 825 053a FB18     		add	r3, r7, r3
 826 053c 1B68     		ldr	r3, [r3]
 827 053e 002B     		cmp	r3, #0
 828 0540 00D0     		beq	.LCB724
 829 0542 03E6     		b	.L12	@long jump
 830              	.LCB724:
 190:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 191:Source\FilteringFunctions/arm_fir_fast_q15.c ****     }
 192:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 193:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps.
 194:Source\FilteringFunctions/arm_fir_fast_q15.c ****      ** This is always be 2 taps since the filter length is even. */
 195:Source\FilteringFunctions/arm_fir_fast_q15.c ****     if ((numTaps & 0x3u) != 0u)
 831              		.loc 1 195 0
 832 0544 8C23     		mov	r3, #140
 833 0546 5B00     		lsl	r3, r3, #1
 834 0548 FB18     		add	r3, r7, r3
 835 054a 1B68     		ldr	r3, [r3]
 836 054c 0322     		mov	r2, #3
 837 054e 1340     		and	r3, r2
 838 0550 00D1     		bne	.LCB732
 839 0552 FBE0     		b	.L13	@long jump
 840              	.LCB732:
 196:Source\FilteringFunctions/arm_fir_fast_q15.c ****     {
 197:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 198:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* Read last two coefficients */
 199:Source\FilteringFunctions/arm_fir_fast_q15.c ****       c0 = *__SIMD32(pb)++;
 841              		.loc 1 199 0
 842 0554 1823     		mov	r3, #24
 843 0556 FB18     		add	r3, r7, r3
 844 0558 1A68     		ldr	r2, [r3]
 845 055a 111D     		add	r1, r2, #4
 846 055c 1960     		str	r1, [r3]
 847 055e 1368     		ldr	r3, [r2]
 848 0560 8A22     		mov	r2, #138
 849 0562 5200     		lsl	r2, r2, #1
 850 0564 BA18     		add	r2, r7, r2
 851 0566 1360     		str	r3, [r2]
 200:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 201:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* Perform the multiply-accumulates */
 202:Source\FilteringFunctions/arm_fir_fast_q15.c ****       acc0 = __SMLAD(x0, c0, acc0);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 37


 852              		.loc 1 202 0
 853 0568 9623     		mov	r3, #150
 854 056a 5B00     		lsl	r3, r3, #1
 855 056c FB18     		add	r3, r7, r3
 856 056e 1968     		ldr	r1, [r3]
 857 0570 8A23     		mov	r3, #138
 858 0572 5B00     		lsl	r3, r3, #1
 859 0574 FB18     		add	r3, r7, r3
 860 0576 1A68     		ldr	r2, [r3]
 861 0578 9E23     		mov	r3, #158
 862 057a 5B00     		lsl	r3, r3, #1
 863 057c FB18     		add	r3, r7, r3
 864 057e 1B68     		ldr	r3, [r3]
 865 0580 AC20     		mov	r0, #172
 866 0582 3818     		add	r0, r7, r0
 867 0584 0160     		str	r1, [r0]
 868 0586 A821     		mov	r1, #168
 869 0588 7918     		add	r1, r7, r1
 870 058a 0A60     		str	r2, [r1]
 871 058c A422     		mov	r2, #164
 872 058e BA18     		add	r2, r7, r2
 873 0590 1360     		str	r3, [r2]
 874              	.LBB52:
 875              	.LBB53:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 876              		.loc 2 952 0
 877 0592 AC23     		mov	r3, #172
 878 0594 FB18     		add	r3, r7, r3
 879 0596 1B68     		ldr	r3, [r3]
 880 0598 1B04     		lsl	r3, r3, #16
 881 059a 1B14     		asr	r3, r3, #16
 882 059c A822     		mov	r2, #168
 883 059e BA18     		add	r2, r7, r2
 884 05a0 1268     		ldr	r2, [r2]
 885 05a2 1204     		lsl	r2, r2, #16
 886 05a4 1214     		asr	r2, r2, #16
 887 05a6 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 888              		.loc 2 953 0
 889 05a8 AC23     		mov	r3, #172
 890 05aa FB18     		add	r3, r7, r3
 891 05ac 1B68     		ldr	r3, [r3]
 892 05ae 1B14     		asr	r3, r3, #16
 893 05b0 A821     		mov	r1, #168
 894 05b2 7918     		add	r1, r7, r1
 895 05b4 0968     		ldr	r1, [r1]
 896 05b6 0914     		asr	r1, r1, #16
 897 05b8 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 898              		.loc 2 952 0
 899 05ba D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 900              		.loc 2 954 0
 901 05bc A423     		mov	r3, #164
 902 05be FB18     		add	r3, r7, r3
 903 05c0 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 38


 904              		.loc 2 953 0
 905 05c2 D318     		add	r3, r2, r3
 906              	.LBE53:
 907              	.LBE52:
 908              		.loc 1 202 0
 909 05c4 9E22     		mov	r2, #158
 910 05c6 5200     		lsl	r2, r2, #1
 911 05c8 BA18     		add	r2, r7, r2
 912 05ca 1360     		str	r3, [r2]
 203:Source\FilteringFunctions/arm_fir_fast_q15.c ****       acc2 = __SMLAD(x2, c0, acc2);
 913              		.loc 1 203 0
 914 05cc 9423     		mov	r3, #148
 915 05ce 5B00     		lsl	r3, r3, #1
 916 05d0 FB18     		add	r3, r7, r3
 917 05d2 1968     		ldr	r1, [r3]
 918 05d4 8A23     		mov	r3, #138
 919 05d6 5B00     		lsl	r3, r3, #1
 920 05d8 FB18     		add	r3, r7, r3
 921 05da 1A68     		ldr	r2, [r3]
 922 05dc 9A23     		mov	r3, #154
 923 05de 5B00     		lsl	r3, r3, #1
 924 05e0 FB18     		add	r3, r7, r3
 925 05e2 1B68     		ldr	r3, [r3]
 926 05e4 A020     		mov	r0, #160
 927 05e6 3818     		add	r0, r7, r0
 928 05e8 0160     		str	r1, [r0]
 929 05ea 9C21     		mov	r1, #156
 930 05ec 7918     		add	r1, r7, r1
 931 05ee 0A60     		str	r2, [r1]
 932 05f0 9822     		mov	r2, #152
 933 05f2 BA18     		add	r2, r7, r2
 934 05f4 1360     		str	r3, [r2]
 935              	.LBB54:
 936              	.LBB55:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 937              		.loc 2 952 0
 938 05f6 A023     		mov	r3, #160
 939 05f8 FB18     		add	r3, r7, r3
 940 05fa 1B68     		ldr	r3, [r3]
 941 05fc 1B04     		lsl	r3, r3, #16
 942 05fe 1B14     		asr	r3, r3, #16
 943 0600 9C22     		mov	r2, #156
 944 0602 BA18     		add	r2, r7, r2
 945 0604 1268     		ldr	r2, [r2]
 946 0606 1204     		lsl	r2, r2, #16
 947 0608 1214     		asr	r2, r2, #16
 948 060a 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 949              		.loc 2 953 0
 950 060c A023     		mov	r3, #160
 951 060e FB18     		add	r3, r7, r3
 952 0610 1B68     		ldr	r3, [r3]
 953 0612 1B14     		asr	r3, r3, #16
 954 0614 9C21     		mov	r1, #156
 955 0616 7918     		add	r1, r7, r1
 956 0618 0968     		ldr	r1, [r1]
 957 061a 0914     		asr	r1, r1, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 39


 958 061c 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 959              		.loc 2 952 0
 960 061e D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 961              		.loc 2 954 0
 962 0620 9823     		mov	r3, #152
 963 0622 FB18     		add	r3, r7, r3
 964 0624 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 965              		.loc 2 953 0
 966 0626 D318     		add	r3, r2, r3
 967              	.LBE55:
 968              	.LBE54:
 969              		.loc 1 203 0
 970 0628 9A22     		mov	r2, #154
 971 062a 5200     		lsl	r2, r2, #1
 972 062c BA18     		add	r2, r7, r2
 973 062e 1360     		str	r3, [r2]
 204:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 205:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* pack state variables */
 206:Source\FilteringFunctions/arm_fir_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 207:Source\FilteringFunctions/arm_fir_fast_q15.c ****       x1 = __PKHBT(x2, x0, 0);
 974              		.loc 1 207 0
 975 0630 9423     		mov	r3, #148
 976 0632 5B00     		lsl	r3, r3, #1
 977 0634 FB18     		add	r3, r7, r3
 978 0636 1B68     		ldr	r3, [r3]
 979 0638 1B04     		lsl	r3, r3, #16
 980 063a 1A0C     		lsr	r2, r3, #16
 981 063c 9623     		mov	r3, #150
 982 063e 5B00     		lsl	r3, r3, #1
 983 0640 FB18     		add	r3, r7, r3
 984 0642 1B68     		ldr	r3, [r3]
 985 0644 1B0C     		lsr	r3, r3, #16
 986 0646 1B04     		lsl	r3, r3, #16
 987 0648 1343     		orr	r3, r2
 988 064a 8822     		mov	r2, #136
 989 064c 5200     		lsl	r2, r2, #1
 990 064e BA18     		add	r2, r7, r2
 991 0650 1360     		str	r3, [r2]
 208:Source\FilteringFunctions/arm_fir_fast_q15.c **** #else
 209:Source\FilteringFunctions/arm_fir_fast_q15.c ****       x1 = __PKHBT(x0, x2, 0);
 210:Source\FilteringFunctions/arm_fir_fast_q15.c **** #endif
 211:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 212:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* Read last state variables */
 213:Source\FilteringFunctions/arm_fir_fast_q15.c ****       x0 = *__SIMD32(px);
 992              		.loc 1 213 0
 993 0652 1423     		mov	r3, #20
 994 0654 FB18     		add	r3, r7, r3
 995 0656 1B68     		ldr	r3, [r3]
 996 0658 1B68     		ldr	r3, [r3]
 997 065a 9622     		mov	r2, #150
 998 065c 5200     		lsl	r2, r2, #1
 999 065e BA18     		add	r2, r7, r2
 1000 0660 1360     		str	r3, [r2]
 214:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 40


 215:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* Perform the multiply-accumulates */
 216:Source\FilteringFunctions/arm_fir_fast_q15.c ****       acc1 = __SMLADX(x1, c0, acc1);
 1001              		.loc 1 216 0
 1002 0662 8823     		mov	r3, #136
 1003 0664 5B00     		lsl	r3, r3, #1
 1004 0666 FB18     		add	r3, r7, r3
 1005 0668 1968     		ldr	r1, [r3]
 1006 066a 8A23     		mov	r3, #138
 1007 066c 5B00     		lsl	r3, r3, #1
 1008 066e FB18     		add	r3, r7, r3
 1009 0670 1A68     		ldr	r2, [r3]
 1010 0672 9C23     		mov	r3, #156
 1011 0674 5B00     		lsl	r3, r3, #1
 1012 0676 FB18     		add	r3, r7, r3
 1013 0678 1B68     		ldr	r3, [r3]
 1014 067a 9420     		mov	r0, #148
 1015 067c 3818     		add	r0, r7, r0
 1016 067e 0160     		str	r1, [r0]
 1017 0680 9021     		mov	r1, #144
 1018 0682 7918     		add	r1, r7, r1
 1019 0684 0A60     		str	r2, [r1]
 1020 0686 8C22     		mov	r2, #140
 1021 0688 BA18     		add	r2, r7, r2
 1022 068a 1360     		str	r3, [r2]
 1023              	.LBB56:
 1024              	.LBB57:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1025              		.loc 2 966 0
 1026 068c 9423     		mov	r3, #148
 1027 068e FB18     		add	r3, r7, r3
 1028 0690 1B68     		ldr	r3, [r3]
 1029 0692 1B04     		lsl	r3, r3, #16
 1030 0694 1B14     		asr	r3, r3, #16
 1031 0696 9022     		mov	r2, #144
 1032 0698 BA18     		add	r2, r7, r2
 1033 069a 1268     		ldr	r2, [r2]
 1034 069c 1214     		asr	r2, r2, #16
 1035 069e 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1036              		.loc 2 967 0
 1037 06a0 9423     		mov	r3, #148
 1038 06a2 FB18     		add	r3, r7, r3
 1039 06a4 1B68     		ldr	r3, [r3]
 1040 06a6 1B14     		asr	r3, r3, #16
 1041 06a8 9021     		mov	r1, #144
 1042 06aa 7918     		add	r1, r7, r1
 1043 06ac 0968     		ldr	r1, [r1]
 1044 06ae 0904     		lsl	r1, r1, #16
 1045 06b0 0914     		asr	r1, r1, #16
 1046 06b2 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1047              		.loc 2 966 0
 1048 06b4 D218     		add	r2, r2, r3
 1049              		.loc 2 968 0
 1050 06b6 8C23     		mov	r3, #140
 1051 06b8 FB18     		add	r3, r7, r3
 1052 06ba 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 41


 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1053              		.loc 2 967 0
 1054 06bc D318     		add	r3, r2, r3
 1055              	.LBE57:
 1056              	.LBE56:
 1057              		.loc 1 216 0
 1058 06be 9C22     		mov	r2, #156
 1059 06c0 5200     		lsl	r2, r2, #1
 1060 06c2 BA18     		add	r2, r7, r2
 1061 06c4 1360     		str	r3, [r2]
 217:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 218:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* pack state variables */
 219:Source\FilteringFunctions/arm_fir_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 220:Source\FilteringFunctions/arm_fir_fast_q15.c ****       x1 = __PKHBT(x0, x2, 0);
 1062              		.loc 1 220 0
 1063 06c6 9623     		mov	r3, #150
 1064 06c8 5B00     		lsl	r3, r3, #1
 1065 06ca FB18     		add	r3, r7, r3
 1066 06cc 1B68     		ldr	r3, [r3]
 1067 06ce 1B04     		lsl	r3, r3, #16
 1068 06d0 1A0C     		lsr	r2, r3, #16
 1069 06d2 9423     		mov	r3, #148
 1070 06d4 5B00     		lsl	r3, r3, #1
 1071 06d6 FB18     		add	r3, r7, r3
 1072 06d8 1B68     		ldr	r3, [r3]
 1073 06da 1B0C     		lsr	r3, r3, #16
 1074 06dc 1B04     		lsl	r3, r3, #16
 1075 06de 1343     		orr	r3, r2
 1076 06e0 8822     		mov	r2, #136
 1077 06e2 5200     		lsl	r2, r2, #1
 1078 06e4 BA18     		add	r2, r7, r2
 1079 06e6 1360     		str	r3, [r2]
 221:Source\FilteringFunctions/arm_fir_fast_q15.c **** #else
 222:Source\FilteringFunctions/arm_fir_fast_q15.c ****       x1 = __PKHBT(x2, x0, 0);
 223:Source\FilteringFunctions/arm_fir_fast_q15.c **** #endif
 224:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 225:Source\FilteringFunctions/arm_fir_fast_q15.c ****       /* Perform the multiply-accumulates */
 226:Source\FilteringFunctions/arm_fir_fast_q15.c ****       acc3 = __SMLADX(x1, c0, acc3);
 1080              		.loc 1 226 0
 1081 06e8 8823     		mov	r3, #136
 1082 06ea 5B00     		lsl	r3, r3, #1
 1083 06ec FB18     		add	r3, r7, r3
 1084 06ee 1968     		ldr	r1, [r3]
 1085 06f0 8A23     		mov	r3, #138
 1086 06f2 5B00     		lsl	r3, r3, #1
 1087 06f4 FB18     		add	r3, r7, r3
 1088 06f6 1A68     		ldr	r2, [r3]
 1089 06f8 9823     		mov	r3, #152
 1090 06fa 5B00     		lsl	r3, r3, #1
 1091 06fc FB18     		add	r3, r7, r3
 1092 06fe 1B68     		ldr	r3, [r3]
 1093 0700 8820     		mov	r0, #136
 1094 0702 3818     		add	r0, r7, r0
 1095 0704 0160     		str	r1, [r0]
 1096 0706 8421     		mov	r1, #132
 1097 0708 7918     		add	r1, r7, r1
 1098 070a 0A60     		str	r2, [r1]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 42


 1099 070c 8022     		mov	r2, #128
 1100 070e BA18     		add	r2, r7, r2
 1101 0710 1360     		str	r3, [r2]
 1102              	.LBB58:
 1103              	.LBB59:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1104              		.loc 2 966 0
 1105 0712 8823     		mov	r3, #136
 1106 0714 FB18     		add	r3, r7, r3
 1107 0716 1B68     		ldr	r3, [r3]
 1108 0718 1B04     		lsl	r3, r3, #16
 1109 071a 1B14     		asr	r3, r3, #16
 1110 071c 8422     		mov	r2, #132
 1111 071e BA18     		add	r2, r7, r2
 1112 0720 1268     		ldr	r2, [r2]
 1113 0722 1214     		asr	r2, r2, #16
 1114 0724 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1115              		.loc 2 967 0
 1116 0726 8823     		mov	r3, #136
 1117 0728 FB18     		add	r3, r7, r3
 1118 072a 1B68     		ldr	r3, [r3]
 1119 072c 1B14     		asr	r3, r3, #16
 1120 072e 8421     		mov	r1, #132
 1121 0730 7918     		add	r1, r7, r1
 1122 0732 0968     		ldr	r1, [r1]
 1123 0734 0904     		lsl	r1, r1, #16
 1124 0736 0914     		asr	r1, r1, #16
 1125 0738 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1126              		.loc 2 966 0
 1127 073a D218     		add	r2, r2, r3
 1128              		.loc 2 968 0
 1129 073c 8023     		mov	r3, #128
 1130 073e FB18     		add	r3, r7, r3
 1131 0740 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1132              		.loc 2 967 0
 1133 0742 D318     		add	r3, r2, r3
 1134              	.LBE59:
 1135              	.LBE58:
 1136              		.loc 1 226 0
 1137 0744 9822     		mov	r2, #152
 1138 0746 5200     		lsl	r2, r2, #1
 1139 0748 BA18     		add	r2, r7, r2
 1140 074a 1360     		str	r3, [r2]
 1141              	.L13:
 227:Source\FilteringFunctions/arm_fir_fast_q15.c ****     }
 228:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 229:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* The results in the 4 accumulators are in 2.30 format.  Convert to 1.15 with saturation.
 230:Source\FilteringFunctions/arm_fir_fast_q15.c ****      ** Then store the 4 outputs in the destination buffer. */
 231:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 232:Source\FilteringFunctions/arm_fir_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 233:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 234:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *__SIMD32(pDst)++ =
 1142              		.loc 1 234 0
 1143 074c 3B1D     		add	r3, r7, #4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 43


 1144 074e 1A68     		ldr	r2, [r3]
 1145 0750 111D     		add	r1, r2, #4
 1146 0752 1960     		str	r1, [r3]
 235:Source\FilteringFunctions/arm_fir_fast_q15.c ****       __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 1147              		.loc 1 235 0
 1148 0754 9E23     		mov	r3, #158
 1149 0756 5B00     		lsl	r3, r3, #1
 1150 0758 FB18     		add	r3, r7, r3
 1151 075a 1B68     		ldr	r3, [r3]
 1152 075c DB13     		asr	r3, r3, #15
 1153 075e FB67     		str	r3, [r7, #124]
 1154 0760 1023     		mov	r3, #16
 1155 0762 BB67     		str	r3, [r7, #120]
 1156              	.LBB60:
 1157              	.LBB61:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 1158              		.loc 2 699 0
 1159 0764 0123     		mov	r3, #1
 1160 0766 7B67     		str	r3, [r7, #116]
 700:.\Include/arm_math.h ****     {
 1161              		.loc 2 700 0
 1162 0768 0023     		mov	r3, #0
 1163 076a 3B67     		str	r3, [r7, #112]
 1164 076c 05E0     		b	.L18
 1165              	.L19:
 702:.\Include/arm_math.h ****     }
 1166              		.loc 2 702 0
 1167 076e 7B6F     		ldr	r3, [r7, #116]
 1168 0770 5B00     		lsl	r3, r3, #1
 1169 0772 7B67     		str	r3, [r7, #116]
 700:.\Include/arm_math.h ****     {
 1170              		.loc 2 700 0
 1171 0774 3B6F     		ldr	r3, [r7, #112]
 1172 0776 0133     		add	r3, r3, #1
 1173 0778 3B67     		str	r3, [r7, #112]
 1174              	.L18:
 1175 077a BB6F     		ldr	r3, [r7, #120]
 1176 077c 013B     		sub	r3, r3, #1
 1177 077e 396F     		ldr	r1, [r7, #112]
 1178 0780 9942     		cmp	r1, r3
 1179 0782 F4D3     		bcc	.L19
 705:.\Include/arm_math.h ****     {
 1180              		.loc 2 705 0
 1181 0784 FB6F     		ldr	r3, [r7, #124]
 1182 0786 002B     		cmp	r3, #0
 1183 0788 09DD     		ble	.L20
 707:.\Include/arm_math.h **** 
 1184              		.loc 2 707 0
 1185 078a 7B6F     		ldr	r3, [r7, #116]
 1186 078c 013B     		sub	r3, r3, #1
 1187 078e 7B67     		str	r3, [r7, #116]
 709:.\Include/arm_math.h ****       {
 1188              		.loc 2 709 0
 1189 0790 F96F     		ldr	r1, [r7, #124]
 1190 0792 7B6F     		ldr	r3, [r7, #116]
 1191 0794 9942     		cmp	r1, r3
 1192 0796 0CDD     		ble	.L56
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 44


 711:.\Include/arm_math.h ****       }
 1193              		.loc 2 711 0
 1194 0798 7B6F     		ldr	r3, [r7, #116]
 1195 079a FB67     		str	r3, [r7, #124]
 1196 079c 0AE0     		b	.L22
 1197              	.L20:
 716:.\Include/arm_math.h **** 
 1198              		.loc 2 716 0
 1199 079e 7B6F     		ldr	r3, [r7, #116]
 1200 07a0 5B42     		neg	r3, r3
 1201 07a2 FB66     		str	r3, [r7, #108]
 718:.\Include/arm_math.h ****       {
 1202              		.loc 2 718 0
 1203 07a4 F96F     		ldr	r1, [r7, #124]
 1204 07a6 FB6E     		ldr	r3, [r7, #108]
 1205 07a8 9942     		cmp	r1, r3
 1206 07aa 03DA     		bge	.L22
 720:.\Include/arm_math.h ****       }
 1207              		.loc 2 720 0
 1208 07ac FB6E     		ldr	r3, [r7, #108]
 1209 07ae FB67     		str	r3, [r7, #124]
 1210 07b0 00E0     		b	.L22
 1211              	.L56:
 711:.\Include/arm_math.h ****       }
 1212              		.loc 2 711 0
 1213 07b2 C046     		mov	r8, r8
 1214              	.L22:
 723:.\Include/arm_math.h ****   }
 1215              		.loc 2 723 0
 1216 07b4 FB6F     		ldr	r3, [r7, #124]
 1217              	.LBE61:
 1218              	.LBE60:
 1219              		.loc 1 235 0
 1220 07b6 1B04     		lsl	r3, r3, #16
 1221 07b8 190C     		lsr	r1, r3, #16
 1222 07ba 9C23     		mov	r3, #156
 1223 07bc 5B00     		lsl	r3, r3, #1
 1224 07be FB18     		add	r3, r7, r3
 1225 07c0 1B68     		ldr	r3, [r3]
 1226 07c2 DB13     		asr	r3, r3, #15
 1227 07c4 BB66     		str	r3, [r7, #104]
 1228 07c6 1023     		mov	r3, #16
 1229 07c8 7B66     		str	r3, [r7, #100]
 1230              	.LBB62:
 1231              	.LBB63:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 1232              		.loc 2 699 0
 1233 07ca 0123     		mov	r3, #1
 1234 07cc 3B66     		str	r3, [r7, #96]
 700:.\Include/arm_math.h ****     {
 1235              		.loc 2 700 0
 1236 07ce 0023     		mov	r3, #0
 1237 07d0 FB65     		str	r3, [r7, #92]
 1238 07d2 05E0     		b	.L24
 1239              	.L25:
 702:.\Include/arm_math.h ****     }
 1240              		.loc 2 702 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 45


 1241 07d4 3B6E     		ldr	r3, [r7, #96]
 1242 07d6 5B00     		lsl	r3, r3, #1
 1243 07d8 3B66     		str	r3, [r7, #96]
 700:.\Include/arm_math.h ****     {
 1244              		.loc 2 700 0
 1245 07da FB6D     		ldr	r3, [r7, #92]
 1246 07dc 0133     		add	r3, r3, #1
 1247 07de FB65     		str	r3, [r7, #92]
 1248              	.L24:
 1249 07e0 7B6E     		ldr	r3, [r7, #100]
 1250 07e2 013B     		sub	r3, r3, #1
 1251 07e4 F86D     		ldr	r0, [r7, #92]
 1252 07e6 9842     		cmp	r0, r3
 1253 07e8 F4D3     		bcc	.L25
 705:.\Include/arm_math.h ****     {
 1254              		.loc 2 705 0
 1255 07ea BB6E     		ldr	r3, [r7, #104]
 1256 07ec 002B     		cmp	r3, #0
 1257 07ee 09DD     		ble	.L26
 707:.\Include/arm_math.h **** 
 1258              		.loc 2 707 0
 1259 07f0 3B6E     		ldr	r3, [r7, #96]
 1260 07f2 013B     		sub	r3, r3, #1
 1261 07f4 3B66     		str	r3, [r7, #96]
 709:.\Include/arm_math.h ****       {
 1262              		.loc 2 709 0
 1263 07f6 B86E     		ldr	r0, [r7, #104]
 1264 07f8 3B6E     		ldr	r3, [r7, #96]
 1265 07fa 9842     		cmp	r0, r3
 1266 07fc 0CDD     		ble	.L57
 711:.\Include/arm_math.h ****       }
 1267              		.loc 2 711 0
 1268 07fe 3B6E     		ldr	r3, [r7, #96]
 1269 0800 BB66     		str	r3, [r7, #104]
 1270 0802 0AE0     		b	.L28
 1271              	.L26:
 716:.\Include/arm_math.h **** 
 1272              		.loc 2 716 0
 1273 0804 3B6E     		ldr	r3, [r7, #96]
 1274 0806 5B42     		neg	r3, r3
 1275 0808 BB65     		str	r3, [r7, #88]
 718:.\Include/arm_math.h ****       {
 1276              		.loc 2 718 0
 1277 080a B86E     		ldr	r0, [r7, #104]
 1278 080c BB6D     		ldr	r3, [r7, #88]
 1279 080e 9842     		cmp	r0, r3
 1280 0810 03DA     		bge	.L28
 720:.\Include/arm_math.h ****       }
 1281              		.loc 2 720 0
 1282 0812 BB6D     		ldr	r3, [r7, #88]
 1283 0814 BB66     		str	r3, [r7, #104]
 1284 0816 00E0     		b	.L28
 1285              	.L57:
 711:.\Include/arm_math.h ****       }
 1286              		.loc 2 711 0
 1287 0818 C046     		mov	r8, r8
 1288              	.L28:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 46


 723:.\Include/arm_math.h ****   }
 1289              		.loc 2 723 0
 1290 081a BB6E     		ldr	r3, [r7, #104]
 1291              	.LBE63:
 1292              	.LBE62:
 1293              		.loc 1 235 0
 1294 081c 1B04     		lsl	r3, r3, #16
 1295 081e 0B43     		orr	r3, r1
 234:Source\FilteringFunctions/arm_fir_fast_q15.c ****       __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 1296              		.loc 1 234 0
 1297 0820 1360     		str	r3, [r2]
 236:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 237:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *__SIMD32(pDst)++ =
 1298              		.loc 1 237 0
 1299 0822 3B1D     		add	r3, r7, #4
 1300 0824 1A68     		ldr	r2, [r3]
 1301 0826 111D     		add	r1, r2, #4
 1302 0828 1960     		str	r1, [r3]
 238:Source\FilteringFunctions/arm_fir_fast_q15.c ****       __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 1303              		.loc 1 238 0
 1304 082a 9A23     		mov	r3, #154
 1305 082c 5B00     		lsl	r3, r3, #1
 1306 082e FB18     		add	r3, r7, r3
 1307 0830 1B68     		ldr	r3, [r3]
 1308 0832 DB13     		asr	r3, r3, #15
 1309 0834 7B65     		str	r3, [r7, #84]
 1310 0836 1023     		mov	r3, #16
 1311 0838 3B65     		str	r3, [r7, #80]
 1312              	.LBB64:
 1313              	.LBB65:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 1314              		.loc 2 699 0
 1315 083a 0123     		mov	r3, #1
 1316 083c FB64     		str	r3, [r7, #76]
 700:.\Include/arm_math.h ****     {
 1317              		.loc 2 700 0
 1318 083e 0023     		mov	r3, #0
 1319 0840 BB64     		str	r3, [r7, #72]
 1320 0842 05E0     		b	.L30
 1321              	.L31:
 702:.\Include/arm_math.h ****     }
 1322              		.loc 2 702 0
 1323 0844 FB6C     		ldr	r3, [r7, #76]
 1324 0846 5B00     		lsl	r3, r3, #1
 1325 0848 FB64     		str	r3, [r7, #76]
 700:.\Include/arm_math.h ****     {
 1326              		.loc 2 700 0
 1327 084a BB6C     		ldr	r3, [r7, #72]
 1328 084c 0133     		add	r3, r3, #1
 1329 084e BB64     		str	r3, [r7, #72]
 1330              	.L30:
 1331 0850 3B6D     		ldr	r3, [r7, #80]
 1332 0852 013B     		sub	r3, r3, #1
 1333 0854 B96C     		ldr	r1, [r7, #72]
 1334 0856 9942     		cmp	r1, r3
 1335 0858 F4D3     		bcc	.L31
 705:.\Include/arm_math.h ****     {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 47


 1336              		.loc 2 705 0
 1337 085a 7B6D     		ldr	r3, [r7, #84]
 1338 085c 002B     		cmp	r3, #0
 1339 085e 09DD     		ble	.L32
 707:.\Include/arm_math.h **** 
 1340              		.loc 2 707 0
 1341 0860 FB6C     		ldr	r3, [r7, #76]
 1342 0862 013B     		sub	r3, r3, #1
 1343 0864 FB64     		str	r3, [r7, #76]
 709:.\Include/arm_math.h ****       {
 1344              		.loc 2 709 0
 1345 0866 796D     		ldr	r1, [r7, #84]
 1346 0868 FB6C     		ldr	r3, [r7, #76]
 1347 086a 9942     		cmp	r1, r3
 1348 086c 0CDD     		ble	.L58
 711:.\Include/arm_math.h ****       }
 1349              		.loc 2 711 0
 1350 086e FB6C     		ldr	r3, [r7, #76]
 1351 0870 7B65     		str	r3, [r7, #84]
 1352 0872 0AE0     		b	.L34
 1353              	.L32:
 716:.\Include/arm_math.h **** 
 1354              		.loc 2 716 0
 1355 0874 FB6C     		ldr	r3, [r7, #76]
 1356 0876 5B42     		neg	r3, r3
 1357 0878 7B64     		str	r3, [r7, #68]
 718:.\Include/arm_math.h ****       {
 1358              		.loc 2 718 0
 1359 087a 796D     		ldr	r1, [r7, #84]
 1360 087c 7B6C     		ldr	r3, [r7, #68]
 1361 087e 9942     		cmp	r1, r3
 1362 0880 03DA     		bge	.L34
 720:.\Include/arm_math.h ****       }
 1363              		.loc 2 720 0
 1364 0882 7B6C     		ldr	r3, [r7, #68]
 1365 0884 7B65     		str	r3, [r7, #84]
 1366 0886 00E0     		b	.L34
 1367              	.L58:
 711:.\Include/arm_math.h ****       }
 1368              		.loc 2 711 0
 1369 0888 C046     		mov	r8, r8
 1370              	.L34:
 723:.\Include/arm_math.h ****   }
 1371              		.loc 2 723 0
 1372 088a 7B6D     		ldr	r3, [r7, #84]
 1373              	.LBE65:
 1374              	.LBE64:
 1375              		.loc 1 238 0
 1376 088c 1B04     		lsl	r3, r3, #16
 1377 088e 190C     		lsr	r1, r3, #16
 1378 0890 9823     		mov	r3, #152
 1379 0892 5B00     		lsl	r3, r3, #1
 1380 0894 FB18     		add	r3, r7, r3
 1381 0896 1B68     		ldr	r3, [r3]
 1382 0898 DB13     		asr	r3, r3, #15
 1383 089a 3B64     		str	r3, [r7, #64]
 1384 089c 1023     		mov	r3, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 48


 1385 089e FB63     		str	r3, [r7, #60]
 1386              	.LBB66:
 1387              	.LBB67:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 1388              		.loc 2 699 0
 1389 08a0 0123     		mov	r3, #1
 1390 08a2 BB63     		str	r3, [r7, #56]
 700:.\Include/arm_math.h ****     {
 1391              		.loc 2 700 0
 1392 08a4 0023     		mov	r3, #0
 1393 08a6 7B63     		str	r3, [r7, #52]
 1394 08a8 05E0     		b	.L36
 1395              	.L37:
 702:.\Include/arm_math.h ****     }
 1396              		.loc 2 702 0
 1397 08aa BB6B     		ldr	r3, [r7, #56]
 1398 08ac 5B00     		lsl	r3, r3, #1
 1399 08ae BB63     		str	r3, [r7, #56]
 700:.\Include/arm_math.h ****     {
 1400              		.loc 2 700 0
 1401 08b0 7B6B     		ldr	r3, [r7, #52]
 1402 08b2 0133     		add	r3, r3, #1
 1403 08b4 7B63     		str	r3, [r7, #52]
 1404              	.L36:
 1405 08b6 FB6B     		ldr	r3, [r7, #60]
 1406 08b8 013B     		sub	r3, r3, #1
 1407 08ba 786B     		ldr	r0, [r7, #52]
 1408 08bc 9842     		cmp	r0, r3
 1409 08be F4D3     		bcc	.L37
 705:.\Include/arm_math.h ****     {
 1410              		.loc 2 705 0
 1411 08c0 3B6C     		ldr	r3, [r7, #64]
 1412 08c2 002B     		cmp	r3, #0
 1413 08c4 09DD     		ble	.L38
 707:.\Include/arm_math.h **** 
 1414              		.loc 2 707 0
 1415 08c6 BB6B     		ldr	r3, [r7, #56]
 1416 08c8 013B     		sub	r3, r3, #1
 1417 08ca BB63     		str	r3, [r7, #56]
 709:.\Include/arm_math.h ****       {
 1418              		.loc 2 709 0
 1419 08cc 386C     		ldr	r0, [r7, #64]
 1420 08ce BB6B     		ldr	r3, [r7, #56]
 1421 08d0 9842     		cmp	r0, r3
 1422 08d2 0CDD     		ble	.L59
 711:.\Include/arm_math.h ****       }
 1423              		.loc 2 711 0
 1424 08d4 BB6B     		ldr	r3, [r7, #56]
 1425 08d6 3B64     		str	r3, [r7, #64]
 1426 08d8 0AE0     		b	.L40
 1427              	.L38:
 716:.\Include/arm_math.h **** 
 1428              		.loc 2 716 0
 1429 08da BB6B     		ldr	r3, [r7, #56]
 1430 08dc 5B42     		neg	r3, r3
 1431 08de 3B63     		str	r3, [r7, #48]
 718:.\Include/arm_math.h ****       {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 49


 1432              		.loc 2 718 0
 1433 08e0 386C     		ldr	r0, [r7, #64]
 1434 08e2 3B6B     		ldr	r3, [r7, #48]
 1435 08e4 9842     		cmp	r0, r3
 1436 08e6 03DA     		bge	.L40
 720:.\Include/arm_math.h ****       }
 1437              		.loc 2 720 0
 1438 08e8 3B6B     		ldr	r3, [r7, #48]
 1439 08ea 3B64     		str	r3, [r7, #64]
 1440 08ec 00E0     		b	.L40
 1441              	.L59:
 711:.\Include/arm_math.h ****       }
 1442              		.loc 2 711 0
 1443 08ee C046     		mov	r8, r8
 1444              	.L40:
 723:.\Include/arm_math.h ****   }
 1445              		.loc 2 723 0
 1446 08f0 3B6C     		ldr	r3, [r7, #64]
 1447              	.LBE67:
 1448              	.LBE66:
 1449              		.loc 1 238 0
 1450 08f2 1B04     		lsl	r3, r3, #16
 1451 08f4 0B43     		orr	r3, r1
 237:Source\FilteringFunctions/arm_fir_fast_q15.c ****       __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 1452              		.loc 1 237 0
 1453 08f6 1360     		str	r3, [r2]
 239:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 240:Source\FilteringFunctions/arm_fir_fast_q15.c **** #else
 241:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 242:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *__SIMD32(pDst)++ =
 243:Source\FilteringFunctions/arm_fir_fast_q15.c ****       __PKHBT(__SSAT((acc1 >> 15), 16), __SSAT((acc0 >> 15), 16), 16);
 244:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 245:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *__SIMD32(pDst)++ =
 246:Source\FilteringFunctions/arm_fir_fast_q15.c ****       __PKHBT(__SSAT((acc3 >> 15), 16), __SSAT((acc2 >> 15), 16), 16);
 247:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 248:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 249:Source\FilteringFunctions/arm_fir_fast_q15.c **** #endif /*      #ifndef ARM_MATH_BIG_ENDIAN       */
 250:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 251:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Advance the state pointer by 4 to process the next group of 4 samples */
 252:Source\FilteringFunctions/arm_fir_fast_q15.c ****     pState = pState + 4u;
 1454              		.loc 1 252 0
 1455 08f8 A223     		mov	r3, #162
 1456 08fa 5B00     		lsl	r3, r3, #1
 1457 08fc FB18     		add	r3, r7, r3
 1458 08fe 1B68     		ldr	r3, [r3]
 1459 0900 0833     		add	r3, r3, #8
 1460 0902 A222     		mov	r2, #162
 1461 0904 5200     		lsl	r2, r2, #1
 1462 0906 BA18     		add	r2, r7, r2
 1463 0908 1360     		str	r3, [r2]
 253:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 254:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Decrement the loop counter */
 255:Source\FilteringFunctions/arm_fir_fast_q15.c ****     blkCnt--;
 1464              		.loc 1 255 0
 1465 090a 9023     		mov	r3, #144
 1466 090c 5B00     		lsl	r3, r3, #1
 1467 090e FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 50


 1468 0910 1B68     		ldr	r3, [r3]
 1469 0912 013B     		sub	r3, r3, #1
 1470 0914 9022     		mov	r2, #144
 1471 0916 5200     		lsl	r2, r2, #1
 1472 0918 BA18     		add	r2, r7, r2
 1473 091a 1360     		str	r3, [r2]
 1474              	.L2:
  94:Source\FilteringFunctions/arm_fir_fast_q15.c ****   {
 1475              		.loc 1 94 0
 1476 091c 9023     		mov	r3, #144
 1477 091e 5B00     		lsl	r3, r3, #1
 1478 0920 FB18     		add	r3, r7, r3
 1479 0922 1B68     		ldr	r3, [r3]
 1480 0924 002B     		cmp	r3, #0
 1481 0926 01D0     		beq	.LCB1310
 1482 0928 FFF79AFB 		bl	.L42	@far jump
 1483              	.LCB1310:
 256:Source\FilteringFunctions/arm_fir_fast_q15.c ****   }
 257:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 258:Source\FilteringFunctions/arm_fir_fast_q15.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 259:Source\FilteringFunctions/arm_fir_fast_q15.c ****    ** No loop unrolling is used. */
 260:Source\FilteringFunctions/arm_fir_fast_q15.c ****   blkCnt = blockSize % 0x4u;
 1484              		.loc 1 260 0
 1485 092c 3B68     		ldr	r3, [r7]
 1486 092e 0322     		mov	r2, #3
 1487 0930 1340     		and	r3, r2
 1488 0932 9022     		mov	r2, #144
 1489 0934 5200     		lsl	r2, r2, #1
 1490 0936 BA18     		add	r2, r7, r2
 1491 0938 1360     		str	r3, [r2]
 261:Source\FilteringFunctions/arm_fir_fast_q15.c ****   while (blkCnt > 0u)
 1492              		.loc 1 261 0
 1493 093a A4E0     		b	.L43
 1494              	.L51:
 262:Source\FilteringFunctions/arm_fir_fast_q15.c ****   {
 263:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Copy two samples into state buffer */
 264:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *pStateCurnt++ = *pSrc++;
 1495              		.loc 1 264 0
 1496 093c A023     		mov	r3, #160
 1497 093e 5B00     		lsl	r3, r3, #1
 1498 0940 FB18     		add	r3, r7, r3
 1499 0942 1B68     		ldr	r3, [r3]
 1500 0944 9A1C     		add	r2, r3, #2
 1501 0946 A021     		mov	r1, #160
 1502 0948 4900     		lsl	r1, r1, #1
 1503 094a 7918     		add	r1, r7, r1
 1504 094c 0A60     		str	r2, [r1]
 1505 094e BA68     		ldr	r2, [r7, #8]
 1506 0950 911C     		add	r1, r2, #2
 1507 0952 B960     		str	r1, [r7, #8]
 1508 0954 1288     		ldrh	r2, [r2]
 1509 0956 1A80     		strh	r2, [r3]
 265:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 266:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Set the accumulator to zero */
 267:Source\FilteringFunctions/arm_fir_fast_q15.c ****     acc0 = 0;
 1510              		.loc 1 267 0
 1511 0958 0023     		mov	r3, #0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 51


 1512 095a 9E22     		mov	r2, #158
 1513 095c 5200     		lsl	r2, r2, #1
 1514 095e BA18     		add	r2, r7, r2
 1515 0960 1360     		str	r3, [r2]
 268:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 269:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Use SIMD to hold states and coefficients */
 270:Source\FilteringFunctions/arm_fir_fast_q15.c ****     px = pState;
 1516              		.loc 1 270 0
 1517 0962 A223     		mov	r3, #162
 1518 0964 5B00     		lsl	r3, r3, #1
 1519 0966 FB18     		add	r3, r7, r3
 1520 0968 1B68     		ldr	r3, [r3]
 1521 096a 7B61     		str	r3, [r7, #20]
 271:Source\FilteringFunctions/arm_fir_fast_q15.c ****     pb = pCoeffs;
 1522              		.loc 1 271 0
 1523 096c 8E23     		mov	r3, #142
 1524 096e 5B00     		lsl	r3, r3, #1
 1525 0970 FB18     		add	r3, r7, r3
 1526 0972 1B68     		ldr	r3, [r3]
 1527 0974 BB61     		str	r3, [r7, #24]
 272:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 273:Source\FilteringFunctions/arm_fir_fast_q15.c ****     tapCnt = numTaps >> 1u;
 1528              		.loc 1 273 0
 1529 0976 8C23     		mov	r3, #140
 1530 0978 5B00     		lsl	r3, r3, #1
 1531 097a FB18     		add	r3, r7, r3
 1532 097c 1B68     		ldr	r3, [r3]
 1533 097e 5B08     		lsr	r3, r3, #1
 1534 0980 9222     		mov	r2, #146
 1535 0982 5200     		lsl	r2, r2, #1
 1536 0984 BA18     		add	r2, r7, r2
 1537 0986 1360     		str	r3, [r2]
 1538              	.L44:
 274:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 275:Source\FilteringFunctions/arm_fir_fast_q15.c ****     do
 276:Source\FilteringFunctions/arm_fir_fast_q15.c ****     {
 277:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 278:Source\FilteringFunctions/arm_fir_fast_q15.c ****       acc0 += (q31_t) * px++ * *pb++;
 1539              		.loc 1 278 0 discriminator 1
 1540 0988 7B69     		ldr	r3, [r7, #20]
 1541 098a 9A1C     		add	r2, r3, #2
 1542 098c 7A61     		str	r2, [r7, #20]
 1543 098e 1B88     		ldrh	r3, [r3]
 1544 0990 1AB2     		sxth	r2, r3
 1545 0992 BB69     		ldr	r3, [r7, #24]
 1546 0994 991C     		add	r1, r3, #2
 1547 0996 B961     		str	r1, [r7, #24]
 1548 0998 1B88     		ldrh	r3, [r3]
 1549 099a 1BB2     		sxth	r3, r3
 1550 099c 5343     		mul	r3, r2
 1551 099e 9E22     		mov	r2, #158
 1552 09a0 5200     		lsl	r2, r2, #1
 1553 09a2 BA18     		add	r2, r7, r2
 1554 09a4 1268     		ldr	r2, [r2]
 1555 09a6 D318     		add	r3, r2, r3
 1556 09a8 9E22     		mov	r2, #158
 1557 09aa 5200     		lsl	r2, r2, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 52


 1558 09ac BA18     		add	r2, r7, r2
 1559 09ae 1360     		str	r3, [r2]
 279:Source\FilteringFunctions/arm_fir_fast_q15.c **** 	  acc0 += (q31_t) * px++ * *pb++;
 1560              		.loc 1 279 0 discriminator 1
 1561 09b0 7B69     		ldr	r3, [r7, #20]
 1562 09b2 9A1C     		add	r2, r3, #2
 1563 09b4 7A61     		str	r2, [r7, #20]
 1564 09b6 1B88     		ldrh	r3, [r3]
 1565 09b8 1AB2     		sxth	r2, r3
 1566 09ba BB69     		ldr	r3, [r7, #24]
 1567 09bc 991C     		add	r1, r3, #2
 1568 09be B961     		str	r1, [r7, #24]
 1569 09c0 1B88     		ldrh	r3, [r3]
 1570 09c2 1BB2     		sxth	r3, r3
 1571 09c4 5343     		mul	r3, r2
 1572 09c6 9E22     		mov	r2, #158
 1573 09c8 5200     		lsl	r2, r2, #1
 1574 09ca BA18     		add	r2, r7, r2
 1575 09cc 1268     		ldr	r2, [r2]
 1576 09ce D318     		add	r3, r2, r3
 1577 09d0 9E22     		mov	r2, #158
 1578 09d2 5200     		lsl	r2, r2, #1
 1579 09d4 BA18     		add	r2, r7, r2
 1580 09d6 1360     		str	r3, [r2]
 280:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 281:Source\FilteringFunctions/arm_fir_fast_q15.c ****       tapCnt--;
 1581              		.loc 1 281 0 discriminator 1
 1582 09d8 9223     		mov	r3, #146
 1583 09da 5B00     		lsl	r3, r3, #1
 1584 09dc FB18     		add	r3, r7, r3
 1585 09de 1B68     		ldr	r3, [r3]
 1586 09e0 013B     		sub	r3, r3, #1
 1587 09e2 9222     		mov	r2, #146
 1588 09e4 5200     		lsl	r2, r2, #1
 1589 09e6 BA18     		add	r2, r7, r2
 1590 09e8 1360     		str	r3, [r2]
 282:Source\FilteringFunctions/arm_fir_fast_q15.c ****     }
 283:Source\FilteringFunctions/arm_fir_fast_q15.c ****     while (tapCnt > 0u);
 1591              		.loc 1 283 0 discriminator 1
 1592 09ea 9223     		mov	r3, #146
 1593 09ec 5B00     		lsl	r3, r3, #1
 1594 09ee FB18     		add	r3, r7, r3
 1595 09f0 1B68     		ldr	r3, [r3]
 1596 09f2 002B     		cmp	r3, #0
 1597 09f4 C8D1     		bne	.L44
 284:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 285:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* The result is in 2.30 format.  Convert to 1.15 with saturation.
 286:Source\FilteringFunctions/arm_fir_fast_q15.c ****      ** Then store the output in the destination buffer. */
 287:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 1598              		.loc 1 287 0
 1599 09f6 7B68     		ldr	r3, [r7, #4]
 1600 09f8 9A1C     		add	r2, r3, #2
 1601 09fa 7A60     		str	r2, [r7, #4]
 1602 09fc 9E22     		mov	r2, #158
 1603 09fe 5200     		lsl	r2, r2, #1
 1604 0a00 BA18     		add	r2, r7, r2
 1605 0a02 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 53


 1606 0a04 D213     		asr	r2, r2, #15
 1607 0a06 FA62     		str	r2, [r7, #44]
 1608 0a08 1022     		mov	r2, #16
 1609 0a0a BA62     		str	r2, [r7, #40]
 1610              	.LBB68:
 1611              	.LBB69:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 1612              		.loc 2 699 0
 1613 0a0c 0122     		mov	r2, #1
 1614 0a0e 7A62     		str	r2, [r7, #36]
 700:.\Include/arm_math.h ****     {
 1615              		.loc 2 700 0
 1616 0a10 0022     		mov	r2, #0
 1617 0a12 3A62     		str	r2, [r7, #32]
 1618 0a14 05E0     		b	.L45
 1619              	.L46:
 702:.\Include/arm_math.h ****     }
 1620              		.loc 2 702 0
 1621 0a16 7A6A     		ldr	r2, [r7, #36]
 1622 0a18 5200     		lsl	r2, r2, #1
 1623 0a1a 7A62     		str	r2, [r7, #36]
 700:.\Include/arm_math.h ****     {
 1624              		.loc 2 700 0
 1625 0a1c 3A6A     		ldr	r2, [r7, #32]
 1626 0a1e 0132     		add	r2, r2, #1
 1627 0a20 3A62     		str	r2, [r7, #32]
 1628              	.L45:
 1629 0a22 BA6A     		ldr	r2, [r7, #40]
 1630 0a24 013A     		sub	r2, r2, #1
 1631 0a26 396A     		ldr	r1, [r7, #32]
 1632 0a28 9142     		cmp	r1, r2
 1633 0a2a F4D3     		bcc	.L46
 705:.\Include/arm_math.h ****     {
 1634              		.loc 2 705 0
 1635 0a2c FA6A     		ldr	r2, [r7, #44]
 1636 0a2e 002A     		cmp	r2, #0
 1637 0a30 09DD     		ble	.L47
 707:.\Include/arm_math.h **** 
 1638              		.loc 2 707 0
 1639 0a32 7A6A     		ldr	r2, [r7, #36]
 1640 0a34 013A     		sub	r2, r2, #1
 1641 0a36 7A62     		str	r2, [r7, #36]
 709:.\Include/arm_math.h ****       {
 1642              		.loc 2 709 0
 1643 0a38 F96A     		ldr	r1, [r7, #44]
 1644 0a3a 7A6A     		ldr	r2, [r7, #36]
 1645 0a3c 9142     		cmp	r1, r2
 1646 0a3e 0CDD     		ble	.L60
 711:.\Include/arm_math.h ****       }
 1647              		.loc 2 711 0
 1648 0a40 7A6A     		ldr	r2, [r7, #36]
 1649 0a42 FA62     		str	r2, [r7, #44]
 1650 0a44 0AE0     		b	.L49
 1651              	.L47:
 716:.\Include/arm_math.h **** 
 1652              		.loc 2 716 0
 1653 0a46 7A6A     		ldr	r2, [r7, #36]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 54


 1654 0a48 5242     		neg	r2, r2
 1655 0a4a FA61     		str	r2, [r7, #28]
 718:.\Include/arm_math.h ****       {
 1656              		.loc 2 718 0
 1657 0a4c F96A     		ldr	r1, [r7, #44]
 1658 0a4e FA69     		ldr	r2, [r7, #28]
 1659 0a50 9142     		cmp	r1, r2
 1660 0a52 03DA     		bge	.L49
 720:.\Include/arm_math.h ****       }
 1661              		.loc 2 720 0
 1662 0a54 FA69     		ldr	r2, [r7, #28]
 1663 0a56 FA62     		str	r2, [r7, #44]
 1664 0a58 00E0     		b	.L49
 1665              	.L60:
 711:.\Include/arm_math.h ****       }
 1666              		.loc 2 711 0
 1667 0a5a C046     		mov	r8, r8
 1668              	.L49:
 723:.\Include/arm_math.h ****   }
 1669              		.loc 2 723 0
 1670 0a5c FA6A     		ldr	r2, [r7, #44]
 1671              	.LBE69:
 1672              	.LBE68:
 1673              		.loc 1 287 0
 1674 0a5e 92B2     		uxth	r2, r2
 1675 0a60 1A80     		strh	r2, [r3]
 288:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 289:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Advance state pointer by 1 for the next sample */
 290:Source\FilteringFunctions/arm_fir_fast_q15.c ****     pState = pState + 1u;
 1676              		.loc 1 290 0
 1677 0a62 A223     		mov	r3, #162
 1678 0a64 5B00     		lsl	r3, r3, #1
 1679 0a66 FB18     		add	r3, r7, r3
 1680 0a68 1B68     		ldr	r3, [r3]
 1681 0a6a 0233     		add	r3, r3, #2
 1682 0a6c A222     		mov	r2, #162
 1683 0a6e 5200     		lsl	r2, r2, #1
 1684 0a70 BA18     		add	r2, r7, r2
 1685 0a72 1360     		str	r3, [r2]
 291:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 292:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Decrement the loop counter */
 293:Source\FilteringFunctions/arm_fir_fast_q15.c ****     blkCnt--;
 1686              		.loc 1 293 0
 1687 0a74 9023     		mov	r3, #144
 1688 0a76 5B00     		lsl	r3, r3, #1
 1689 0a78 FB18     		add	r3, r7, r3
 1690 0a7a 1B68     		ldr	r3, [r3]
 1691 0a7c 013B     		sub	r3, r3, #1
 1692 0a7e 9022     		mov	r2, #144
 1693 0a80 5200     		lsl	r2, r2, #1
 1694 0a82 BA18     		add	r2, r7, r2
 1695 0a84 1360     		str	r3, [r2]
 1696              	.L43:
 261:Source\FilteringFunctions/arm_fir_fast_q15.c ****   {
 1697              		.loc 1 261 0
 1698 0a86 9023     		mov	r3, #144
 1699 0a88 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 55


 1700 0a8a FB18     		add	r3, r7, r3
 1701 0a8c 1B68     		ldr	r3, [r3]
 1702 0a8e 002B     		cmp	r3, #0
 1703 0a90 00D0     		beq	.LCB1513
 1704 0a92 53E7     		b	.L51	@long jump
 1705              	.LCB1513:
 294:Source\FilteringFunctions/arm_fir_fast_q15.c ****   }
 295:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 296:Source\FilteringFunctions/arm_fir_fast_q15.c ****   /* Processing is complete.
 297:Source\FilteringFunctions/arm_fir_fast_q15.c ****    ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.
 298:Source\FilteringFunctions/arm_fir_fast_q15.c ****    ** This prepares the state buffer for the next function call. */
 299:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 300:Source\FilteringFunctions/arm_fir_fast_q15.c ****   /* Points to the start of the state buffer */
 301:Source\FilteringFunctions/arm_fir_fast_q15.c ****   pStateCurnt = S->pState;
 1706              		.loc 1 301 0
 1707 0a94 FB68     		ldr	r3, [r7, #12]
 1708 0a96 5B68     		ldr	r3, [r3, #4]
 1709 0a98 A022     		mov	r2, #160
 1710 0a9a 5200     		lsl	r2, r2, #1
 1711 0a9c BA18     		add	r2, r7, r2
 1712 0a9e 1360     		str	r3, [r2]
 302:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 303:Source\FilteringFunctions/arm_fir_fast_q15.c ****   /* Calculation of count for copying integer writes */
 304:Source\FilteringFunctions/arm_fir_fast_q15.c ****   tapCnt = (numTaps - 1u) >> 2;
 1713              		.loc 1 304 0
 1714 0aa0 8C23     		mov	r3, #140
 1715 0aa2 5B00     		lsl	r3, r3, #1
 1716 0aa4 FB18     		add	r3, r7, r3
 1717 0aa6 1B68     		ldr	r3, [r3]
 1718 0aa8 013B     		sub	r3, r3, #1
 1719 0aaa 9B08     		lsr	r3, r3, #2
 1720 0aac 9222     		mov	r2, #146
 1721 0aae 5200     		lsl	r2, r2, #1
 1722 0ab0 BA18     		add	r2, r7, r2
 1723 0ab2 1360     		str	r3, [r2]
 305:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 306:Source\FilteringFunctions/arm_fir_fast_q15.c ****   while (tapCnt > 0u)
 1724              		.loc 1 306 0
 1725 0ab4 58E0     		b	.L52
 1726              	.L53:
 307:Source\FilteringFunctions/arm_fir_fast_q15.c ****   {
 308:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *pStateCurnt++ = *pState++;
 1727              		.loc 1 308 0
 1728 0ab6 A023     		mov	r3, #160
 1729 0ab8 5B00     		lsl	r3, r3, #1
 1730 0aba FB18     		add	r3, r7, r3
 1731 0abc 1B68     		ldr	r3, [r3]
 1732 0abe 9A1C     		add	r2, r3, #2
 1733 0ac0 A021     		mov	r1, #160
 1734 0ac2 4900     		lsl	r1, r1, #1
 1735 0ac4 7918     		add	r1, r7, r1
 1736 0ac6 0A60     		str	r2, [r1]
 1737 0ac8 A222     		mov	r2, #162
 1738 0aca 5200     		lsl	r2, r2, #1
 1739 0acc BA18     		add	r2, r7, r2
 1740 0ace 1268     		ldr	r2, [r2]
 1741 0ad0 911C     		add	r1, r2, #2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 56


 1742 0ad2 A220     		mov	r0, #162
 1743 0ad4 4000     		lsl	r0, r0, #1
 1744 0ad6 3818     		add	r0, r7, r0
 1745 0ad8 0160     		str	r1, [r0]
 1746 0ada 1288     		ldrh	r2, [r2]
 1747 0adc 1A80     		strh	r2, [r3]
 309:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *pStateCurnt++ = *pState++;
 1748              		.loc 1 309 0
 1749 0ade A023     		mov	r3, #160
 1750 0ae0 5B00     		lsl	r3, r3, #1
 1751 0ae2 FB18     		add	r3, r7, r3
 1752 0ae4 1B68     		ldr	r3, [r3]
 1753 0ae6 9A1C     		add	r2, r3, #2
 1754 0ae8 A021     		mov	r1, #160
 1755 0aea 4900     		lsl	r1, r1, #1
 1756 0aec 7918     		add	r1, r7, r1
 1757 0aee 0A60     		str	r2, [r1]
 1758 0af0 A222     		mov	r2, #162
 1759 0af2 5200     		lsl	r2, r2, #1
 1760 0af4 BA18     		add	r2, r7, r2
 1761 0af6 1268     		ldr	r2, [r2]
 1762 0af8 911C     		add	r1, r2, #2
 1763 0afa A220     		mov	r0, #162
 1764 0afc 4000     		lsl	r0, r0, #1
 1765 0afe 3818     		add	r0, r7, r0
 1766 0b00 0160     		str	r1, [r0]
 1767 0b02 1288     		ldrh	r2, [r2]
 1768 0b04 1A80     		strh	r2, [r3]
 310:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *pStateCurnt++ = *pState++;
 1769              		.loc 1 310 0
 1770 0b06 A023     		mov	r3, #160
 1771 0b08 5B00     		lsl	r3, r3, #1
 1772 0b0a FB18     		add	r3, r7, r3
 1773 0b0c 1B68     		ldr	r3, [r3]
 1774 0b0e 9A1C     		add	r2, r3, #2
 1775 0b10 A021     		mov	r1, #160
 1776 0b12 4900     		lsl	r1, r1, #1
 1777 0b14 7918     		add	r1, r7, r1
 1778 0b16 0A60     		str	r2, [r1]
 1779 0b18 A222     		mov	r2, #162
 1780 0b1a 5200     		lsl	r2, r2, #1
 1781 0b1c BA18     		add	r2, r7, r2
 1782 0b1e 1268     		ldr	r2, [r2]
 1783 0b20 911C     		add	r1, r2, #2
 1784 0b22 A220     		mov	r0, #162
 1785 0b24 4000     		lsl	r0, r0, #1
 1786 0b26 3818     		add	r0, r7, r0
 1787 0b28 0160     		str	r1, [r0]
 1788 0b2a 1288     		ldrh	r2, [r2]
 1789 0b2c 1A80     		strh	r2, [r3]
 311:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *pStateCurnt++ = *pState++;
 1790              		.loc 1 311 0
 1791 0b2e A023     		mov	r3, #160
 1792 0b30 5B00     		lsl	r3, r3, #1
 1793 0b32 FB18     		add	r3, r7, r3
 1794 0b34 1B68     		ldr	r3, [r3]
 1795 0b36 9A1C     		add	r2, r3, #2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 57


 1796 0b38 A021     		mov	r1, #160
 1797 0b3a 4900     		lsl	r1, r1, #1
 1798 0b3c 7918     		add	r1, r7, r1
 1799 0b3e 0A60     		str	r2, [r1]
 1800 0b40 A222     		mov	r2, #162
 1801 0b42 5200     		lsl	r2, r2, #1
 1802 0b44 BA18     		add	r2, r7, r2
 1803 0b46 1268     		ldr	r2, [r2]
 1804 0b48 911C     		add	r1, r2, #2
 1805 0b4a A220     		mov	r0, #162
 1806 0b4c 4000     		lsl	r0, r0, #1
 1807 0b4e 3818     		add	r0, r7, r0
 1808 0b50 0160     		str	r1, [r0]
 1809 0b52 1288     		ldrh	r2, [r2]
 1810 0b54 1A80     		strh	r2, [r3]
 312:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 313:Source\FilteringFunctions/arm_fir_fast_q15.c ****     tapCnt--;
 1811              		.loc 1 313 0
 1812 0b56 9223     		mov	r3, #146
 1813 0b58 5B00     		lsl	r3, r3, #1
 1814 0b5a FB18     		add	r3, r7, r3
 1815 0b5c 1B68     		ldr	r3, [r3]
 1816 0b5e 013B     		sub	r3, r3, #1
 1817 0b60 9222     		mov	r2, #146
 1818 0b62 5200     		lsl	r2, r2, #1
 1819 0b64 BA18     		add	r2, r7, r2
 1820 0b66 1360     		str	r3, [r2]
 1821              	.L52:
 306:Source\FilteringFunctions/arm_fir_fast_q15.c ****   {
 1822              		.loc 1 306 0
 1823 0b68 9223     		mov	r3, #146
 1824 0b6a 5B00     		lsl	r3, r3, #1
 1825 0b6c FB18     		add	r3, r7, r3
 1826 0b6e 1B68     		ldr	r3, [r3]
 1827 0b70 002B     		cmp	r3, #0
 1828 0b72 A0D1     		bne	.L53
 314:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 315:Source\FilteringFunctions/arm_fir_fast_q15.c ****   }
 316:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 317:Source\FilteringFunctions/arm_fir_fast_q15.c ****   /* Calculation of count for remaining q15_t data */
 318:Source\FilteringFunctions/arm_fir_fast_q15.c ****   tapCnt = (numTaps - 1u) % 0x4u;
 1829              		.loc 1 318 0
 1830 0b74 8C23     		mov	r3, #140
 1831 0b76 5B00     		lsl	r3, r3, #1
 1832 0b78 FB18     		add	r3, r7, r3
 1833 0b7a 1B68     		ldr	r3, [r3]
 1834 0b7c 013B     		sub	r3, r3, #1
 1835 0b7e 0322     		mov	r2, #3
 1836 0b80 1340     		and	r3, r2
 1837 0b82 9222     		mov	r2, #146
 1838 0b84 5200     		lsl	r2, r2, #1
 1839 0b86 BA18     		add	r2, r7, r2
 1840 0b88 1360     		str	r3, [r2]
 319:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 320:Source\FilteringFunctions/arm_fir_fast_q15.c ****   /* copy remaining data */
 321:Source\FilteringFunctions/arm_fir_fast_q15.c ****   while (tapCnt > 0u)
 1841              		.loc 1 321 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 58


 1842 0b8a 1CE0     		b	.L54
 1843              	.L55:
 322:Source\FilteringFunctions/arm_fir_fast_q15.c ****   {
 323:Source\FilteringFunctions/arm_fir_fast_q15.c ****     *pStateCurnt++ = *pState++;
 1844              		.loc 1 323 0
 1845 0b8c A023     		mov	r3, #160
 1846 0b8e 5B00     		lsl	r3, r3, #1
 1847 0b90 FB18     		add	r3, r7, r3
 1848 0b92 1B68     		ldr	r3, [r3]
 1849 0b94 9A1C     		add	r2, r3, #2
 1850 0b96 A021     		mov	r1, #160
 1851 0b98 4900     		lsl	r1, r1, #1
 1852 0b9a 7918     		add	r1, r7, r1
 1853 0b9c 0A60     		str	r2, [r1]
 1854 0b9e A222     		mov	r2, #162
 1855 0ba0 5200     		lsl	r2, r2, #1
 1856 0ba2 BA18     		add	r2, r7, r2
 1857 0ba4 1268     		ldr	r2, [r2]
 1858 0ba6 911C     		add	r1, r2, #2
 1859 0ba8 A220     		mov	r0, #162
 1860 0baa 4000     		lsl	r0, r0, #1
 1861 0bac 3818     		add	r0, r7, r0
 1862 0bae 0160     		str	r1, [r0]
 1863 0bb0 1288     		ldrh	r2, [r2]
 1864 0bb2 1A80     		strh	r2, [r3]
 324:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 325:Source\FilteringFunctions/arm_fir_fast_q15.c ****     /* Decrement the loop counter */
 326:Source\FilteringFunctions/arm_fir_fast_q15.c ****     tapCnt--;
 1865              		.loc 1 326 0
 1866 0bb4 9223     		mov	r3, #146
 1867 0bb6 5B00     		lsl	r3, r3, #1
 1868 0bb8 FB18     		add	r3, r7, r3
 1869 0bba 1B68     		ldr	r3, [r3]
 1870 0bbc 013B     		sub	r3, r3, #1
 1871 0bbe 9222     		mov	r2, #146
 1872 0bc0 5200     		lsl	r2, r2, #1
 1873 0bc2 BA18     		add	r2, r7, r2
 1874 0bc4 1360     		str	r3, [r2]
 1875              	.L54:
 321:Source\FilteringFunctions/arm_fir_fast_q15.c ****   {
 1876              		.loc 1 321 0
 1877 0bc6 9223     		mov	r3, #146
 1878 0bc8 5B00     		lsl	r3, r3, #1
 1879 0bca FB18     		add	r3, r7, r3
 1880 0bcc 1B68     		ldr	r3, [r3]
 1881 0bce 002B     		cmp	r3, #0
 1882 0bd0 DCD1     		bne	.L55
 327:Source\FilteringFunctions/arm_fir_fast_q15.c ****   }
 328:Source\FilteringFunctions/arm_fir_fast_q15.c **** 
 329:Source\FilteringFunctions/arm_fir_fast_q15.c **** }
 1883              		.loc 1 329 0
 1884 0bd2 BD46     		mov	sp, r7
 1885 0bd4 52B0     		add	sp, sp, #328
 1886              		@ sp needed
 1887 0bd6 80BD     		pop	{r7, pc}
 1888              		.cfi_endproc
 1889              	.LFE82:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 59


 1890              		.size	arm_fir_fast_q15, .-arm_fir_fast_q15
 1891              		.text
 1892              	.Letext0:
 1893              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1894              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1895              		.section	.debug_info,"",%progbits
 1896              	.Ldebug_info0:
 1897 0000 C9060000 		.4byte	0x6c9
 1898 0004 0400     		.2byte	0x4
 1899 0006 00000000 		.4byte	.Ldebug_abbrev0
 1900 000a 04       		.byte	0x4
 1901 000b 01       		.uleb128 0x1
 1902 000c 5F010000 		.4byte	.LASF43
 1903 0010 01       		.byte	0x1
 1904 0011 A4000000 		.4byte	.LASF44
 1905 0015 35000000 		.4byte	.LASF45
 1906 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1907 001d 00000000 		.4byte	0
 1908 0021 00000000 		.4byte	.Ldebug_line0
 1909 0025 02       		.uleb128 0x2
 1910 0026 01       		.byte	0x1
 1911 0027 06       		.byte	0x6
 1912 0028 8D020000 		.4byte	.LASF0
 1913 002c 02       		.uleb128 0x2
 1914 002d 01       		.byte	0x1
 1915 002e 08       		.byte	0x8
 1916 002f 96000000 		.4byte	.LASF1
 1917 0033 03       		.uleb128 0x3
 1918 0034 0C000000 		.4byte	.LASF3
 1919 0038 03       		.byte	0x3
 1920 0039 29       		.byte	0x29
 1921 003a 3E000000 		.4byte	0x3e
 1922 003e 02       		.uleb128 0x2
 1923 003f 02       		.byte	0x2
 1924 0040 05       		.byte	0x5
 1925 0041 3A020000 		.4byte	.LASF2
 1926 0045 03       		.uleb128 0x3
 1927 0046 4C020000 		.4byte	.LASF4
 1928 004a 03       		.byte	0x3
 1929 004b 2B       		.byte	0x2b
 1930 004c 50000000 		.4byte	0x50
 1931 0050 02       		.uleb128 0x2
 1932 0051 02       		.byte	0x2
 1933 0052 07       		.byte	0x7
 1934 0053 F2000000 		.4byte	.LASF5
 1935 0057 03       		.uleb128 0x3
 1936 0058 2B000000 		.4byte	.LASF6
 1937 005c 03       		.byte	0x3
 1938 005d 3F       		.byte	0x3f
 1939 005e 62000000 		.4byte	0x62
 1940 0062 02       		.uleb128 0x2
 1941 0063 04       		.byte	0x4
 1942 0064 05       		.byte	0x5
 1943 0065 78020000 		.4byte	.LASF7
 1944 0069 03       		.uleb128 0x3
 1945 006a 30010000 		.4byte	.LASF8
 1946 006e 03       		.byte	0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 60


 1947 006f 41       		.byte	0x41
 1948 0070 74000000 		.4byte	0x74
 1949 0074 02       		.uleb128 0x2
 1950 0075 04       		.byte	0x4
 1951 0076 07       		.byte	0x7
 1952 0077 E0000000 		.4byte	.LASF9
 1953 007b 02       		.uleb128 0x2
 1954 007c 08       		.byte	0x8
 1955 007d 05       		.byte	0x5
 1956 007e 1D020000 		.4byte	.LASF10
 1957 0082 02       		.uleb128 0x2
 1958 0083 08       		.byte	0x8
 1959 0084 07       		.byte	0x7
 1960 0085 48010000 		.4byte	.LASF11
 1961 0089 04       		.uleb128 0x4
 1962 008a 04       		.byte	0x4
 1963 008b 05       		.byte	0x5
 1964 008c 696E7400 		.ascii	"int\000"
 1965 0090 02       		.uleb128 0x2
 1966 0091 04       		.byte	0x4
 1967 0092 07       		.byte	0x7
 1968 0093 3B010000 		.4byte	.LASF12
 1969 0097 03       		.uleb128 0x3
 1970 0098 FD010000 		.4byte	.LASF13
 1971 009c 04       		.byte	0x4
 1972 009d 20       		.byte	0x20
 1973 009e 33000000 		.4byte	0x33
 1974 00a2 03       		.uleb128 0x3
 1975 00a3 57020000 		.4byte	.LASF14
 1976 00a7 04       		.byte	0x4
 1977 00a8 21       		.byte	0x21
 1978 00a9 45000000 		.4byte	0x45
 1979 00ad 03       		.uleb128 0x3
 1980 00ae 0C020000 		.4byte	.LASF15
 1981 00b2 04       		.byte	0x4
 1982 00b3 2C       		.byte	0x2c
 1983 00b4 57000000 		.4byte	0x57
 1984 00b8 03       		.uleb128 0x3
 1985 00b9 6F020000 		.4byte	.LASF16
 1986 00bd 04       		.byte	0x4
 1987 00be 2D       		.byte	0x2d
 1988 00bf 69000000 		.4byte	0x69
 1989 00c3 02       		.uleb128 0x2
 1990 00c4 04       		.byte	0x4
 1991 00c5 07       		.byte	0x7
 1992 00c6 14020000 		.4byte	.LASF17
 1993 00ca 02       		.uleb128 0x2
 1994 00cb 01       		.byte	0x1
 1995 00cc 08       		.byte	0x8
 1996 00cd 35020000 		.4byte	.LASF18
 1997 00d1 02       		.uleb128 0x2
 1998 00d2 08       		.byte	0x8
 1999 00d3 04       		.byte	0x4
 2000 00d4 29010000 		.4byte	.LASF19
 2001 00d8 02       		.uleb128 0x2
 2002 00d9 04       		.byte	0x4
 2003 00da 04       		.byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 61


 2004 00db 8A000000 		.4byte	.LASF20
 2005 00df 02       		.uleb128 0x2
 2006 00e0 08       		.byte	0x8
 2007 00e1 04       		.byte	0x4
 2008 00e2 81020000 		.4byte	.LASF21
 2009 00e6 05       		.uleb128 0x5
 2010 00e7 84000000 		.4byte	.LASF22
 2011 00eb 02       		.byte	0x2
 2012 00ec 9601     		.2byte	0x196
 2013 00ee 97000000 		.4byte	0x97
 2014 00f2 05       		.uleb128 0x5
 2015 00f3 90000000 		.4byte	.LASF23
 2016 00f7 02       		.byte	0x2
 2017 00f8 9B01     		.2byte	0x19b
 2018 00fa AD000000 		.4byte	0xad
 2019 00fe 06       		.uleb128 0x6
 2020 00ff 0C       		.byte	0xc
 2021 0100 02       		.byte	0x2
 2022 0101 5004     		.2byte	0x450
 2023 0103 2F010000 		.4byte	0x12f
 2024 0107 07       		.uleb128 0x7
 2025 0108 44020000 		.4byte	.LASF24
 2026 010c 02       		.byte	0x2
 2027 010d 5204     		.2byte	0x452
 2028 010f A2000000 		.4byte	0xa2
 2029 0113 00       		.byte	0
 2030 0114 07       		.uleb128 0x7
 2031 0115 05000000 		.4byte	.LASF25
 2032 0119 02       		.byte	0x2
 2033 011a 5304     		.2byte	0x453
 2034 011c 2F010000 		.4byte	0x12f
 2035 0120 04       		.byte	0x4
 2036 0121 07       		.uleb128 0x7
 2037 0122 67020000 		.4byte	.LASF26
 2038 0126 02       		.byte	0x2
 2039 0127 5404     		.2byte	0x454
 2040 0129 2F010000 		.4byte	0x12f
 2041 012d 08       		.byte	0x8
 2042 012e 00       		.byte	0
 2043 012f 08       		.uleb128 0x8
 2044 0130 04       		.byte	0x4
 2045 0131 E6000000 		.4byte	0xe6
 2046 0135 05       		.uleb128 0x5
 2047 0136 16000000 		.4byte	.LASF27
 2048 013a 02       		.byte	0x2
 2049 013b 5504     		.2byte	0x455
 2050 013d FE000000 		.4byte	0xfe
 2051 0141 09       		.uleb128 0x9
 2052 0142 D8000000 		.4byte	.LASF28
 2053 0146 02       		.byte	0x2
 2054 0147 B303     		.2byte	0x3b3
 2055 0149 B8000000 		.4byte	0xb8
 2056 014d 03       		.byte	0x3
 2057 014e 73010000 		.4byte	0x173
 2058 0152 0A       		.uleb128 0xa
 2059 0153 7800     		.ascii	"x\000"
 2060 0155 02       		.byte	0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 62


 2061 0156 B403     		.2byte	0x3b4
 2062 0158 B8000000 		.4byte	0xb8
 2063 015c 0A       		.uleb128 0xa
 2064 015d 7900     		.ascii	"y\000"
 2065 015f 02       		.byte	0x2
 2066 0160 B503     		.2byte	0x3b5
 2067 0162 B8000000 		.4byte	0xb8
 2068 0166 0A       		.uleb128 0xa
 2069 0167 73756D00 		.ascii	"sum\000"
 2070 016b 02       		.byte	0x2
 2071 016c B603     		.2byte	0x3b6
 2072 016e B8000000 		.4byte	0xb8
 2073 0172 00       		.byte	0
 2074 0173 09       		.uleb128 0x9
 2075 0174 7B000000 		.4byte	.LASF29
 2076 0178 02       		.byte	0x2
 2077 0179 C103     		.2byte	0x3c1
 2078 017b B8000000 		.4byte	0xb8
 2079 017f 03       		.byte	0x3
 2080 0180 A5010000 		.4byte	0x1a5
 2081 0184 0A       		.uleb128 0xa
 2082 0185 7800     		.ascii	"x\000"
 2083 0187 02       		.byte	0x2
 2084 0188 C203     		.2byte	0x3c2
 2085 018a B8000000 		.4byte	0xb8
 2086 018e 0A       		.uleb128 0xa
 2087 018f 7900     		.ascii	"y\000"
 2088 0191 02       		.byte	0x2
 2089 0192 C303     		.2byte	0x3c3
 2090 0194 B8000000 		.4byte	0xb8
 2091 0198 0A       		.uleb128 0xa
 2092 0199 73756D00 		.ascii	"sum\000"
 2093 019d 02       		.byte	0x2
 2094 019e C403     		.2byte	0x3c4
 2095 01a0 B8000000 		.4byte	0xb8
 2096 01a4 00       		.byte	0
 2097 01a5 09       		.uleb128 0x9
 2098 01a6 05020000 		.4byte	.LASF30
 2099 01aa 02       		.byte	0x2
 2100 01ab B402     		.2byte	0x2b4
 2101 01ad F2000000 		.4byte	0xf2
 2102 01b1 03       		.byte	0x3
 2103 01b2 ED010000 		.4byte	0x1ed
 2104 01b6 0A       		.uleb128 0xa
 2105 01b7 7800     		.ascii	"x\000"
 2106 01b9 02       		.byte	0x2
 2107 01ba B502     		.2byte	0x2b5
 2108 01bc F2000000 		.4byte	0xf2
 2109 01c0 0A       		.uleb128 0xa
 2110 01c1 7900     		.ascii	"y\000"
 2111 01c3 02       		.byte	0x2
 2112 01c4 B602     		.2byte	0x2b6
 2113 01c6 B8000000 		.4byte	0xb8
 2114 01ca 0B       		.uleb128 0xb
 2115 01cb 60020000 		.4byte	.LASF31
 2116 01cf 02       		.byte	0x2
 2117 01d0 B802     		.2byte	0x2b8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 63


 2118 01d2 AD000000 		.4byte	0xad
 2119 01d6 0B       		.uleb128 0xb
 2120 01d7 0A010000 		.4byte	.LASF32
 2121 01db 02       		.byte	0x2
 2122 01dc B802     		.2byte	0x2b8
 2123 01de AD000000 		.4byte	0xad
 2124 01e2 0C       		.uleb128 0xc
 2125 01e3 6900     		.ascii	"i\000"
 2126 01e5 02       		.byte	0x2
 2127 01e6 B902     		.2byte	0x2b9
 2128 01e8 B8000000 		.4byte	0xb8
 2129 01ec 00       		.byte	0
 2130 01ed 0D       		.uleb128 0xd
 2131 01ee 11010000 		.4byte	.LASF46
 2132 01f2 01       		.byte	0x1
 2133 01f3 3C       		.byte	0x3c
 2134 01f4 00000000 		.4byte	.LFB82
 2135 01f8 D80B0000 		.4byte	.LFE82-.LFB82
 2136 01fc 01       		.uleb128 0x1
 2137 01fd 9C       		.byte	0x9c
 2138 01fe C1060000 		.4byte	0x6c1
 2139 0202 0E       		.uleb128 0xe
 2140 0203 5300     		.ascii	"S\000"
 2141 0205 01       		.byte	0x1
 2142 0206 3D       		.byte	0x3d
 2143 0207 C1060000 		.4byte	0x6c1
 2144 020b 03       		.uleb128 0x3
 2145 020c 91       		.byte	0x91
 2146 020d BC7D     		.sleb128 -324
 2147 020f 0F       		.uleb128 0xf
 2148 0210 99020000 		.4byte	.LASF33
 2149 0214 01       		.byte	0x1
 2150 0215 3E       		.byte	0x3e
 2151 0216 2F010000 		.4byte	0x12f
 2152 021a 03       		.uleb128 0x3
 2153 021b 91       		.byte	0x91
 2154 021c B87D     		.sleb128 -328
 2155 021e 0F       		.uleb128 0xf
 2156 021f 05010000 		.4byte	.LASF34
 2157 0223 01       		.byte	0x1
 2158 0224 3F       		.byte	0x3f
 2159 0225 2F010000 		.4byte	0x12f
 2160 0229 03       		.uleb128 0x3
 2161 022a 91       		.byte	0x91
 2162 022b B47D     		.sleb128 -332
 2163 022d 0F       		.uleb128 0xf
 2164 022e 2B020000 		.4byte	.LASF35
 2165 0232 01       		.byte	0x1
 2166 0233 40       		.byte	0x40
 2167 0234 B8000000 		.4byte	0xb8
 2168 0238 03       		.uleb128 0x3
 2169 0239 91       		.byte	0x91
 2170 023a B07D     		.sleb128 -336
 2171 023c 10       		.uleb128 0x10
 2172 023d 05000000 		.4byte	.LASF25
 2173 0241 01       		.byte	0x1
 2174 0242 42       		.byte	0x42
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 64


 2175 0243 2F010000 		.4byte	0x12f
 2176 0247 02       		.uleb128 0x2
 2177 0248 91       		.byte	0x91
 2178 0249 74       		.sleb128 -12
 2179 024a 10       		.uleb128 0x10
 2180 024b 67020000 		.4byte	.LASF26
 2181 024f 01       		.byte	0x1
 2182 0250 43       		.byte	0x43
 2183 0251 2F010000 		.4byte	0x12f
 2184 0255 02       		.uleb128 0x2
 2185 0256 91       		.byte	0x91
 2186 0257 4C       		.sleb128 -52
 2187 0258 10       		.uleb128 0x10
 2188 0259 F1010000 		.4byte	.LASF36
 2189 025d 01       		.byte	0x1
 2190 025e 44       		.byte	0x44
 2191 025f 2F010000 		.4byte	0x12f
 2192 0263 02       		.uleb128 0x2
 2193 0264 91       		.byte	0x91
 2194 0265 70       		.sleb128 -16
 2195 0266 10       		.uleb128 0x10
 2196 0267 9E020000 		.4byte	.LASF37
 2197 026b 01       		.byte	0x1
 2198 026c 45       		.byte	0x45
 2199 026d F2000000 		.4byte	0xf2
 2200 0271 02       		.uleb128 0x2
 2201 0272 91       		.byte	0x91
 2202 0273 6C       		.sleb128 -20
 2203 0274 10       		.uleb128 0x10
 2204 0275 A3020000 		.4byte	.LASF38
 2205 0279 01       		.byte	0x1
 2206 027a 45       		.byte	0x45
 2207 027b F2000000 		.4byte	0xf2
 2208 027f 02       		.uleb128 0x2
 2209 0280 91       		.byte	0x91
 2210 0281 68       		.sleb128 -24
 2211 0282 10       		.uleb128 0x10
 2212 0283 A8020000 		.4byte	.LASF39
 2213 0287 01       		.byte	0x1
 2214 0288 45       		.byte	0x45
 2215 0289 F2000000 		.4byte	0xf2
 2216 028d 02       		.uleb128 0x2
 2217 028e 91       		.byte	0x91
 2218 028f 64       		.sleb128 -28
 2219 0290 10       		.uleb128 0x10
 2220 0291 00000000 		.4byte	.LASF40
 2221 0295 01       		.byte	0x1
 2222 0296 45       		.byte	0x45
 2223 0297 F2000000 		.4byte	0xf2
 2224 029b 02       		.uleb128 0x2
 2225 029c 91       		.byte	0x91
 2226 029d 60       		.sleb128 -32
 2227 029e 11       		.uleb128 0x11
 2228 029f 706200   		.ascii	"pb\000"
 2229 02a2 01       		.byte	0x1
 2230 02a3 46       		.byte	0x46
 2231 02a4 2F010000 		.4byte	0x12f
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 65


 2232 02a8 03       		.uleb128 0x3
 2233 02a9 91       		.byte	0x91
 2234 02aa C87D     		.sleb128 -312
 2235 02ac 11       		.uleb128 0x11
 2236 02ad 707800   		.ascii	"px\000"
 2237 02b0 01       		.byte	0x1
 2238 02b1 47       		.byte	0x47
 2239 02b2 2F010000 		.4byte	0x12f
 2240 02b6 03       		.uleb128 0x3
 2241 02b7 91       		.byte	0x91
 2242 02b8 C47D     		.sleb128 -316
 2243 02ba 11       		.uleb128 0x11
 2244 02bb 783000   		.ascii	"x0\000"
 2245 02be 01       		.byte	0x1
 2246 02bf 48       		.byte	0x48
 2247 02c0 F2000000 		.4byte	0xf2
 2248 02c4 02       		.uleb128 0x2
 2249 02c5 91       		.byte	0x91
 2250 02c6 5C       		.sleb128 -36
 2251 02c7 11       		.uleb128 0x11
 2252 02c8 783100   		.ascii	"x1\000"
 2253 02cb 01       		.byte	0x1
 2254 02cc 48       		.byte	0x48
 2255 02cd F2000000 		.4byte	0xf2
 2256 02d1 02       		.uleb128 0x2
 2257 02d2 91       		.byte	0x91
 2258 02d3 40       		.sleb128 -64
 2259 02d4 11       		.uleb128 0x11
 2260 02d5 783200   		.ascii	"x2\000"
 2261 02d8 01       		.byte	0x1
 2262 02d9 48       		.byte	0x48
 2263 02da F2000000 		.4byte	0xf2
 2264 02de 02       		.uleb128 0x2
 2265 02df 91       		.byte	0x91
 2266 02e0 58       		.sleb128 -40
 2267 02e1 11       		.uleb128 0x11
 2268 02e2 633000   		.ascii	"c0\000"
 2269 02e5 01       		.byte	0x1
 2270 02e6 48       		.byte	0x48
 2271 02e7 F2000000 		.4byte	0xf2
 2272 02eb 02       		.uleb128 0x2
 2273 02ec 91       		.byte	0x91
 2274 02ed 44       		.sleb128 -60
 2275 02ee 10       		.uleb128 0x10
 2276 02ef 44020000 		.4byte	.LASF24
 2277 02f3 01       		.byte	0x1
 2278 02f4 49       		.byte	0x49
 2279 02f5 B8000000 		.4byte	0xb8
 2280 02f9 02       		.uleb128 0x2
 2281 02fa 91       		.byte	0x91
 2282 02fb 48       		.sleb128 -56
 2283 02fc 10       		.uleb128 0x10
 2284 02fd 22010000 		.4byte	.LASF41
 2285 0301 01       		.byte	0x1
 2286 0302 4A       		.byte	0x4a
 2287 0303 B8000000 		.4byte	0xb8
 2288 0307 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 66


 2289 0308 91       		.byte	0x91
 2290 0309 54       		.sleb128 -44
 2291 030a 10       		.uleb128 0x10
 2292 030b D1000000 		.4byte	.LASF42
 2293 030f 01       		.byte	0x1
 2294 0310 4A       		.byte	0x4a
 2295 0311 B8000000 		.4byte	0xb8
 2296 0315 02       		.uleb128 0x2
 2297 0316 91       		.byte	0x91
 2298 0317 50       		.sleb128 -48
 2299 0318 12       		.uleb128 0x12
 2300 0319 41010000 		.4byte	0x141
 2301 031d 8E010000 		.4byte	.LBB36
 2302 0321 3A000000 		.4byte	.LBE36-.LBB36
 2303 0325 01       		.byte	0x1
 2304 0326 84       		.byte	0x84
 2305 0327 47030000 		.4byte	0x347
 2306 032b 13       		.uleb128 0x13
 2307 032c 66010000 		.4byte	0x166
 2308 0330 03       		.uleb128 0x3
 2309 0331 91       		.byte	0x91
 2310 0332 B47F     		.sleb128 -76
 2311 0334 13       		.uleb128 0x13
 2312 0335 5C010000 		.4byte	0x15c
 2313 0339 03       		.uleb128 0x3
 2314 033a 91       		.byte	0x91
 2315 033b B87F     		.sleb128 -72
 2316 033d 13       		.uleb128 0x13
 2317 033e 52010000 		.4byte	0x152
 2318 0342 03       		.uleb128 0x3
 2319 0343 91       		.byte	0x91
 2320 0344 BC7F     		.sleb128 -68
 2321 0346 00       		.byte	0
 2322 0347 12       		.uleb128 0x12
 2323 0348 41010000 		.4byte	0x141
 2324 034c FA010000 		.4byte	.LBB38
 2325 0350 32000000 		.4byte	.LBE38-.LBB38
 2326 0354 01       		.byte	0x1
 2327 0355 87       		.byte	0x87
 2328 0356 76030000 		.4byte	0x376
 2329 035a 13       		.uleb128 0x13
 2330 035b 66010000 		.4byte	0x166
 2331 035f 03       		.uleb128 0x3
 2332 0360 91       		.byte	0x91
 2333 0361 A87F     		.sleb128 -88
 2334 0363 13       		.uleb128 0x13
 2335 0364 5C010000 		.4byte	0x15c
 2336 0368 03       		.uleb128 0x3
 2337 0369 91       		.byte	0x91
 2338 036a AC7F     		.sleb128 -84
 2339 036c 13       		.uleb128 0x13
 2340 036d 52010000 		.4byte	0x152
 2341 0371 03       		.uleb128 0x3
 2342 0372 91       		.byte	0x91
 2343 0373 B07F     		.sleb128 -80
 2344 0375 00       		.byte	0
 2345 0376 12       		.uleb128 0x12
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 67


 2346 0377 73010000 		.4byte	0x173
 2347 037b 8C020000 		.4byte	.LBB40
 2348 037f 32000000 		.4byte	.LBE40-.LBB40
 2349 0383 01       		.byte	0x1
 2350 0384 94       		.byte	0x94
 2351 0385 A5030000 		.4byte	0x3a5
 2352 0389 13       		.uleb128 0x13
 2353 038a 98010000 		.4byte	0x198
 2354 038e 03       		.uleb128 0x3
 2355 038f 91       		.byte	0x91
 2356 0390 9C7F     		.sleb128 -100
 2357 0392 13       		.uleb128 0x13
 2358 0393 8E010000 		.4byte	0x18e
 2359 0397 03       		.uleb128 0x3
 2360 0398 91       		.byte	0x91
 2361 0399 A07F     		.sleb128 -96
 2362 039b 13       		.uleb128 0x13
 2363 039c 84010000 		.4byte	0x184
 2364 03a0 03       		.uleb128 0x3
 2365 03a1 91       		.byte	0x91
 2366 03a2 A47F     		.sleb128 -92
 2367 03a4 00       		.byte	0
 2368 03a5 12       		.uleb128 0x12
 2369 03a6 73010000 		.4byte	0x173
 2370 03aa 12030000 		.4byte	.LBB42
 2371 03ae 32000000 		.4byte	.LBE42-.LBB42
 2372 03b2 01       		.byte	0x1
 2373 03b3 9E       		.byte	0x9e
 2374 03b4 D4030000 		.4byte	0x3d4
 2375 03b8 13       		.uleb128 0x13
 2376 03b9 98010000 		.4byte	0x198
 2377 03bd 03       		.uleb128 0x3
 2378 03be 91       		.byte	0x91
 2379 03bf 907F     		.sleb128 -112
 2380 03c1 13       		.uleb128 0x13
 2381 03c2 8E010000 		.4byte	0x18e
 2382 03c6 03       		.uleb128 0x3
 2383 03c7 91       		.byte	0x91
 2384 03c8 947F     		.sleb128 -108
 2385 03ca 13       		.uleb128 0x13
 2386 03cb 84010000 		.4byte	0x184
 2387 03cf 03       		.uleb128 0x3
 2388 03d0 91       		.byte	0x91
 2389 03d1 987F     		.sleb128 -104
 2390 03d3 00       		.byte	0
 2391 03d4 12       		.uleb128 0x12
 2392 03d5 41010000 		.4byte	0x141
 2393 03d9 8A030000 		.4byte	.LBB44
 2394 03dd 32000000 		.4byte	.LBE44-.LBB44
 2395 03e1 01       		.byte	0x1
 2396 03e2 A4       		.byte	0xa4
 2397 03e3 03040000 		.4byte	0x403
 2398 03e7 13       		.uleb128 0x13
 2399 03e8 66010000 		.4byte	0x166
 2400 03ec 03       		.uleb128 0x3
 2401 03ed 91       		.byte	0x91
 2402 03ee 847F     		.sleb128 -124
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 68


 2403 03f0 13       		.uleb128 0x13
 2404 03f1 5C010000 		.4byte	0x15c
 2405 03f5 03       		.uleb128 0x3
 2406 03f6 91       		.byte	0x91
 2407 03f7 887F     		.sleb128 -120
 2408 03f9 13       		.uleb128 0x13
 2409 03fa 52010000 		.4byte	0x152
 2410 03fe 03       		.uleb128 0x3
 2411 03ff 91       		.byte	0x91
 2412 0400 8C7F     		.sleb128 -116
 2413 0402 00       		.byte	0
 2414 0403 12       		.uleb128 0x12
 2415 0404 41010000 		.4byte	0x141
 2416 0408 FA030000 		.4byte	.LBB46
 2417 040c 32000000 		.4byte	.LBE46-.LBB46
 2418 0410 01       		.byte	0x1
 2419 0411 AA       		.byte	0xaa
 2420 0412 32040000 		.4byte	0x432
 2421 0416 13       		.uleb128 0x13
 2422 0417 66010000 		.4byte	0x166
 2423 041b 03       		.uleb128 0x3
 2424 041c 91       		.byte	0x91
 2425 041d F87E     		.sleb128 -136
 2426 041f 13       		.uleb128 0x13
 2427 0420 5C010000 		.4byte	0x15c
 2428 0424 03       		.uleb128 0x3
 2429 0425 91       		.byte	0x91
 2430 0426 FC7E     		.sleb128 -132
 2431 0428 13       		.uleb128 0x13
 2432 0429 52010000 		.4byte	0x152
 2433 042d 03       		.uleb128 0x3
 2434 042e 91       		.byte	0x91
 2435 042f 807F     		.sleb128 -128
 2436 0431 00       		.byte	0
 2437 0432 12       		.uleb128 0x12
 2438 0433 73010000 		.4byte	0x173
 2439 0437 5E040000 		.4byte	.LBB48
 2440 043b 32000000 		.4byte	.LBE48-.LBB48
 2441 043f 01       		.byte	0x1
 2442 0440 AD       		.byte	0xad
 2443 0441 61040000 		.4byte	0x461
 2444 0445 13       		.uleb128 0x13
 2445 0446 98010000 		.4byte	0x198
 2446 044a 03       		.uleb128 0x3
 2447 044b 91       		.byte	0x91
 2448 044c EC7E     		.sleb128 -148
 2449 044e 13       		.uleb128 0x13
 2450 044f 8E010000 		.4byte	0x18e
 2451 0453 03       		.uleb128 0x3
 2452 0454 91       		.byte	0x91
 2453 0455 F07E     		.sleb128 -144
 2454 0457 13       		.uleb128 0x13
 2455 0458 84010000 		.4byte	0x184
 2456 045c 03       		.uleb128 0x3
 2457 045d 91       		.byte	0x91
 2458 045e F47E     		.sleb128 -140
 2459 0460 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 69


 2460 0461 12       		.uleb128 0x12
 2461 0462 73010000 		.4byte	0x173
 2462 0466 E4040000 		.4byte	.LBB50
 2463 046a 32000000 		.4byte	.LBE50-.LBB50
 2464 046e 01       		.byte	0x1
 2465 046f B7       		.byte	0xb7
 2466 0470 90040000 		.4byte	0x490
 2467 0474 13       		.uleb128 0x13
 2468 0475 98010000 		.4byte	0x198
 2469 0479 03       		.uleb128 0x3
 2470 047a 91       		.byte	0x91
 2471 047b E07E     		.sleb128 -160
 2472 047d 13       		.uleb128 0x13
 2473 047e 8E010000 		.4byte	0x18e
 2474 0482 03       		.uleb128 0x3
 2475 0483 91       		.byte	0x91
 2476 0484 E47E     		.sleb128 -156
 2477 0486 13       		.uleb128 0x13
 2478 0487 84010000 		.4byte	0x184
 2479 048b 03       		.uleb128 0x3
 2480 048c 91       		.byte	0x91
 2481 048d E87E     		.sleb128 -152
 2482 048f 00       		.byte	0
 2483 0490 12       		.uleb128 0x12
 2484 0491 41010000 		.4byte	0x141
 2485 0495 92050000 		.4byte	.LBB52
 2486 0499 32000000 		.4byte	.LBE52-.LBB52
 2487 049d 01       		.byte	0x1
 2488 049e CA       		.byte	0xca
 2489 049f BF040000 		.4byte	0x4bf
 2490 04a3 13       		.uleb128 0x13
 2491 04a4 66010000 		.4byte	0x166
 2492 04a8 03       		.uleb128 0x3
 2493 04a9 91       		.byte	0x91
 2494 04aa D47E     		.sleb128 -172
 2495 04ac 13       		.uleb128 0x13
 2496 04ad 5C010000 		.4byte	0x15c
 2497 04b1 03       		.uleb128 0x3
 2498 04b2 91       		.byte	0x91
 2499 04b3 D87E     		.sleb128 -168
 2500 04b5 13       		.uleb128 0x13
 2501 04b6 52010000 		.4byte	0x152
 2502 04ba 03       		.uleb128 0x3
 2503 04bb 91       		.byte	0x91
 2504 04bc DC7E     		.sleb128 -164
 2505 04be 00       		.byte	0
 2506 04bf 12       		.uleb128 0x12
 2507 04c0 41010000 		.4byte	0x141
 2508 04c4 F6050000 		.4byte	.LBB54
 2509 04c8 32000000 		.4byte	.LBE54-.LBB54
 2510 04cc 01       		.byte	0x1
 2511 04cd CB       		.byte	0xcb
 2512 04ce EE040000 		.4byte	0x4ee
 2513 04d2 13       		.uleb128 0x13
 2514 04d3 66010000 		.4byte	0x166
 2515 04d7 03       		.uleb128 0x3
 2516 04d8 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 70


 2517 04d9 C87E     		.sleb128 -184
 2518 04db 13       		.uleb128 0x13
 2519 04dc 5C010000 		.4byte	0x15c
 2520 04e0 03       		.uleb128 0x3
 2521 04e1 91       		.byte	0x91
 2522 04e2 CC7E     		.sleb128 -180
 2523 04e4 13       		.uleb128 0x13
 2524 04e5 52010000 		.4byte	0x152
 2525 04e9 03       		.uleb128 0x3
 2526 04ea 91       		.byte	0x91
 2527 04eb D07E     		.sleb128 -176
 2528 04ed 00       		.byte	0
 2529 04ee 12       		.uleb128 0x12
 2530 04ef 73010000 		.4byte	0x173
 2531 04f3 8C060000 		.4byte	.LBB56
 2532 04f7 32000000 		.4byte	.LBE56-.LBB56
 2533 04fb 01       		.byte	0x1
 2534 04fc D8       		.byte	0xd8
 2535 04fd 1D050000 		.4byte	0x51d
 2536 0501 13       		.uleb128 0x13
 2537 0502 98010000 		.4byte	0x198
 2538 0506 03       		.uleb128 0x3
 2539 0507 91       		.byte	0x91
 2540 0508 BC7E     		.sleb128 -196
 2541 050a 13       		.uleb128 0x13
 2542 050b 8E010000 		.4byte	0x18e
 2543 050f 03       		.uleb128 0x3
 2544 0510 91       		.byte	0x91
 2545 0511 C07E     		.sleb128 -192
 2546 0513 13       		.uleb128 0x13
 2547 0514 84010000 		.4byte	0x184
 2548 0518 03       		.uleb128 0x3
 2549 0519 91       		.byte	0x91
 2550 051a C47E     		.sleb128 -188
 2551 051c 00       		.byte	0
 2552 051d 12       		.uleb128 0x12
 2553 051e 73010000 		.4byte	0x173
 2554 0522 12070000 		.4byte	.LBB58
 2555 0526 32000000 		.4byte	.LBE58-.LBB58
 2556 052a 01       		.byte	0x1
 2557 052b E2       		.byte	0xe2
 2558 052c 4C050000 		.4byte	0x54c
 2559 0530 13       		.uleb128 0x13
 2560 0531 98010000 		.4byte	0x198
 2561 0535 03       		.uleb128 0x3
 2562 0536 91       		.byte	0x91
 2563 0537 B07E     		.sleb128 -208
 2564 0539 13       		.uleb128 0x13
 2565 053a 8E010000 		.4byte	0x18e
 2566 053e 03       		.uleb128 0x3
 2567 053f 91       		.byte	0x91
 2568 0540 B47E     		.sleb128 -204
 2569 0542 13       		.uleb128 0x13
 2570 0543 84010000 		.4byte	0x184
 2571 0547 03       		.uleb128 0x3
 2572 0548 91       		.byte	0x91
 2573 0549 B87E     		.sleb128 -200
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 71


 2574 054b 00       		.byte	0
 2575 054c 12       		.uleb128 0x12
 2576 054d A5010000 		.4byte	0x1a5
 2577 0551 64070000 		.4byte	.LBB60
 2578 0555 52000000 		.4byte	.LBE60-.LBB60
 2579 0559 01       		.byte	0x1
 2580 055a EB       		.byte	0xeb
 2581 055b 97050000 		.4byte	0x597
 2582 055f 13       		.uleb128 0x13
 2583 0560 C0010000 		.4byte	0x1c0
 2584 0564 03       		.uleb128 0x3
 2585 0565 91       		.byte	0x91
 2586 0566 A87E     		.sleb128 -216
 2587 0568 13       		.uleb128 0x13
 2588 0569 B6010000 		.4byte	0x1b6
 2589 056d 03       		.uleb128 0x3
 2590 056e 91       		.byte	0x91
 2591 056f AC7E     		.sleb128 -212
 2592 0571 14       		.uleb128 0x14
 2593 0572 64070000 		.4byte	.LBB61
 2594 0576 52000000 		.4byte	.LBE61-.LBB61
 2595 057a 15       		.uleb128 0x15
 2596 057b CA010000 		.4byte	0x1ca
 2597 057f 03       		.uleb128 0x3
 2598 0580 91       		.byte	0x91
 2599 0581 A47E     		.sleb128 -220
 2600 0583 15       		.uleb128 0x15
 2601 0584 D6010000 		.4byte	0x1d6
 2602 0588 03       		.uleb128 0x3
 2603 0589 91       		.byte	0x91
 2604 058a 9C7E     		.sleb128 -228
 2605 058c 15       		.uleb128 0x15
 2606 058d E2010000 		.4byte	0x1e2
 2607 0591 03       		.uleb128 0x3
 2608 0592 91       		.byte	0x91
 2609 0593 A07E     		.sleb128 -224
 2610 0595 00       		.byte	0
 2611 0596 00       		.byte	0
 2612 0597 12       		.uleb128 0x12
 2613 0598 A5010000 		.4byte	0x1a5
 2614 059c CA070000 		.4byte	.LBB62
 2615 05a0 52000000 		.4byte	.LBE62-.LBB62
 2616 05a4 01       		.byte	0x1
 2617 05a5 EB       		.byte	0xeb
 2618 05a6 E2050000 		.4byte	0x5e2
 2619 05aa 13       		.uleb128 0x13
 2620 05ab C0010000 		.4byte	0x1c0
 2621 05af 03       		.uleb128 0x3
 2622 05b0 91       		.byte	0x91
 2623 05b1 947E     		.sleb128 -236
 2624 05b3 13       		.uleb128 0x13
 2625 05b4 B6010000 		.4byte	0x1b6
 2626 05b8 03       		.uleb128 0x3
 2627 05b9 91       		.byte	0x91
 2628 05ba 987E     		.sleb128 -232
 2629 05bc 14       		.uleb128 0x14
 2630 05bd CA070000 		.4byte	.LBB63
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 72


 2631 05c1 52000000 		.4byte	.LBE63-.LBB63
 2632 05c5 15       		.uleb128 0x15
 2633 05c6 CA010000 		.4byte	0x1ca
 2634 05ca 03       		.uleb128 0x3
 2635 05cb 91       		.byte	0x91
 2636 05cc 907E     		.sleb128 -240
 2637 05ce 15       		.uleb128 0x15
 2638 05cf D6010000 		.4byte	0x1d6
 2639 05d3 03       		.uleb128 0x3
 2640 05d4 91       		.byte	0x91
 2641 05d5 887E     		.sleb128 -248
 2642 05d7 15       		.uleb128 0x15
 2643 05d8 E2010000 		.4byte	0x1e2
 2644 05dc 03       		.uleb128 0x3
 2645 05dd 91       		.byte	0x91
 2646 05de 8C7E     		.sleb128 -244
 2647 05e0 00       		.byte	0
 2648 05e1 00       		.byte	0
 2649 05e2 12       		.uleb128 0x12
 2650 05e3 A5010000 		.4byte	0x1a5
 2651 05e7 3A080000 		.4byte	.LBB64
 2652 05eb 52000000 		.4byte	.LBE64-.LBB64
 2653 05ef 01       		.byte	0x1
 2654 05f0 EE       		.byte	0xee
 2655 05f1 2D060000 		.4byte	0x62d
 2656 05f5 13       		.uleb128 0x13
 2657 05f6 C0010000 		.4byte	0x1c0
 2658 05fa 03       		.uleb128 0x3
 2659 05fb 91       		.byte	0x91
 2660 05fc 807E     		.sleb128 -256
 2661 05fe 13       		.uleb128 0x13
 2662 05ff B6010000 		.4byte	0x1b6
 2663 0603 03       		.uleb128 0x3
 2664 0604 91       		.byte	0x91
 2665 0605 847E     		.sleb128 -252
 2666 0607 14       		.uleb128 0x14
 2667 0608 3A080000 		.4byte	.LBB65
 2668 060c 52000000 		.4byte	.LBE65-.LBB65
 2669 0610 15       		.uleb128 0x15
 2670 0611 CA010000 		.4byte	0x1ca
 2671 0615 03       		.uleb128 0x3
 2672 0616 91       		.byte	0x91
 2673 0617 FC7D     		.sleb128 -260
 2674 0619 15       		.uleb128 0x15
 2675 061a D6010000 		.4byte	0x1d6
 2676 061e 03       		.uleb128 0x3
 2677 061f 91       		.byte	0x91
 2678 0620 F47D     		.sleb128 -268
 2679 0622 15       		.uleb128 0x15
 2680 0623 E2010000 		.4byte	0x1e2
 2681 0627 03       		.uleb128 0x3
 2682 0628 91       		.byte	0x91
 2683 0629 F87D     		.sleb128 -264
 2684 062b 00       		.byte	0
 2685 062c 00       		.byte	0
 2686 062d 12       		.uleb128 0x12
 2687 062e A5010000 		.4byte	0x1a5
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 73


 2688 0632 A0080000 		.4byte	.LBB66
 2689 0636 52000000 		.4byte	.LBE66-.LBB66
 2690 063a 01       		.byte	0x1
 2691 063b EE       		.byte	0xee
 2692 063c 78060000 		.4byte	0x678
 2693 0640 13       		.uleb128 0x13
 2694 0641 C0010000 		.4byte	0x1c0
 2695 0645 03       		.uleb128 0x3
 2696 0646 91       		.byte	0x91
 2697 0647 EC7D     		.sleb128 -276
 2698 0649 13       		.uleb128 0x13
 2699 064a B6010000 		.4byte	0x1b6
 2700 064e 03       		.uleb128 0x3
 2701 064f 91       		.byte	0x91
 2702 0650 F07D     		.sleb128 -272
 2703 0652 14       		.uleb128 0x14
 2704 0653 A0080000 		.4byte	.LBB67
 2705 0657 52000000 		.4byte	.LBE67-.LBB67
 2706 065b 15       		.uleb128 0x15
 2707 065c CA010000 		.4byte	0x1ca
 2708 0660 03       		.uleb128 0x3
 2709 0661 91       		.byte	0x91
 2710 0662 E87D     		.sleb128 -280
 2711 0664 15       		.uleb128 0x15
 2712 0665 D6010000 		.4byte	0x1d6
 2713 0669 03       		.uleb128 0x3
 2714 066a 91       		.byte	0x91
 2715 066b E07D     		.sleb128 -288
 2716 066d 15       		.uleb128 0x15
 2717 066e E2010000 		.4byte	0x1e2
 2718 0672 03       		.uleb128 0x3
 2719 0673 91       		.byte	0x91
 2720 0674 E47D     		.sleb128 -284
 2721 0676 00       		.byte	0
 2722 0677 00       		.byte	0
 2723 0678 16       		.uleb128 0x16
 2724 0679 A5010000 		.4byte	0x1a5
 2725 067d 0C0A0000 		.4byte	.LBB68
 2726 0681 52000000 		.4byte	.LBE68-.LBB68
 2727 0685 01       		.byte	0x1
 2728 0686 1F01     		.2byte	0x11f
 2729 0688 13       		.uleb128 0x13
 2730 0689 C0010000 		.4byte	0x1c0
 2731 068d 03       		.uleb128 0x3
 2732 068e 91       		.byte	0x91
 2733 068f D87D     		.sleb128 -296
 2734 0691 13       		.uleb128 0x13
 2735 0692 B6010000 		.4byte	0x1b6
 2736 0696 03       		.uleb128 0x3
 2737 0697 91       		.byte	0x91
 2738 0698 DC7D     		.sleb128 -292
 2739 069a 14       		.uleb128 0x14
 2740 069b 0C0A0000 		.4byte	.LBB69
 2741 069f 52000000 		.4byte	.LBE69-.LBB69
 2742 06a3 15       		.uleb128 0x15
 2743 06a4 CA010000 		.4byte	0x1ca
 2744 06a8 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 74


 2745 06a9 91       		.byte	0x91
 2746 06aa D47D     		.sleb128 -300
 2747 06ac 15       		.uleb128 0x15
 2748 06ad D6010000 		.4byte	0x1d6
 2749 06b1 03       		.uleb128 0x3
 2750 06b2 91       		.byte	0x91
 2751 06b3 CC7D     		.sleb128 -308
 2752 06b5 15       		.uleb128 0x15
 2753 06b6 E2010000 		.4byte	0x1e2
 2754 06ba 03       		.uleb128 0x3
 2755 06bb 91       		.byte	0x91
 2756 06bc D07D     		.sleb128 -304
 2757 06be 00       		.byte	0
 2758 06bf 00       		.byte	0
 2759 06c0 00       		.byte	0
 2760 06c1 08       		.uleb128 0x8
 2761 06c2 04       		.byte	0x4
 2762 06c3 C7060000 		.4byte	0x6c7
 2763 06c7 17       		.uleb128 0x17
 2764 06c8 35010000 		.4byte	0x135
 2765 06cc 00       		.byte	0
 2766              		.section	.debug_abbrev,"",%progbits
 2767              	.Ldebug_abbrev0:
 2768 0000 01       		.uleb128 0x1
 2769 0001 11       		.uleb128 0x11
 2770 0002 01       		.byte	0x1
 2771 0003 25       		.uleb128 0x25
 2772 0004 0E       		.uleb128 0xe
 2773 0005 13       		.uleb128 0x13
 2774 0006 0B       		.uleb128 0xb
 2775 0007 03       		.uleb128 0x3
 2776 0008 0E       		.uleb128 0xe
 2777 0009 1B       		.uleb128 0x1b
 2778 000a 0E       		.uleb128 0xe
 2779 000b 55       		.uleb128 0x55
 2780 000c 17       		.uleb128 0x17
 2781 000d 11       		.uleb128 0x11
 2782 000e 01       		.uleb128 0x1
 2783 000f 10       		.uleb128 0x10
 2784 0010 17       		.uleb128 0x17
 2785 0011 00       		.byte	0
 2786 0012 00       		.byte	0
 2787 0013 02       		.uleb128 0x2
 2788 0014 24       		.uleb128 0x24
 2789 0015 00       		.byte	0
 2790 0016 0B       		.uleb128 0xb
 2791 0017 0B       		.uleb128 0xb
 2792 0018 3E       		.uleb128 0x3e
 2793 0019 0B       		.uleb128 0xb
 2794 001a 03       		.uleb128 0x3
 2795 001b 0E       		.uleb128 0xe
 2796 001c 00       		.byte	0
 2797 001d 00       		.byte	0
 2798 001e 03       		.uleb128 0x3
 2799 001f 16       		.uleb128 0x16
 2800 0020 00       		.byte	0
 2801 0021 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 75


 2802 0022 0E       		.uleb128 0xe
 2803 0023 3A       		.uleb128 0x3a
 2804 0024 0B       		.uleb128 0xb
 2805 0025 3B       		.uleb128 0x3b
 2806 0026 0B       		.uleb128 0xb
 2807 0027 49       		.uleb128 0x49
 2808 0028 13       		.uleb128 0x13
 2809 0029 00       		.byte	0
 2810 002a 00       		.byte	0
 2811 002b 04       		.uleb128 0x4
 2812 002c 24       		.uleb128 0x24
 2813 002d 00       		.byte	0
 2814 002e 0B       		.uleb128 0xb
 2815 002f 0B       		.uleb128 0xb
 2816 0030 3E       		.uleb128 0x3e
 2817 0031 0B       		.uleb128 0xb
 2818 0032 03       		.uleb128 0x3
 2819 0033 08       		.uleb128 0x8
 2820 0034 00       		.byte	0
 2821 0035 00       		.byte	0
 2822 0036 05       		.uleb128 0x5
 2823 0037 16       		.uleb128 0x16
 2824 0038 00       		.byte	0
 2825 0039 03       		.uleb128 0x3
 2826 003a 0E       		.uleb128 0xe
 2827 003b 3A       		.uleb128 0x3a
 2828 003c 0B       		.uleb128 0xb
 2829 003d 3B       		.uleb128 0x3b
 2830 003e 05       		.uleb128 0x5
 2831 003f 49       		.uleb128 0x49
 2832 0040 13       		.uleb128 0x13
 2833 0041 00       		.byte	0
 2834 0042 00       		.byte	0
 2835 0043 06       		.uleb128 0x6
 2836 0044 13       		.uleb128 0x13
 2837 0045 01       		.byte	0x1
 2838 0046 0B       		.uleb128 0xb
 2839 0047 0B       		.uleb128 0xb
 2840 0048 3A       		.uleb128 0x3a
 2841 0049 0B       		.uleb128 0xb
 2842 004a 3B       		.uleb128 0x3b
 2843 004b 05       		.uleb128 0x5
 2844 004c 01       		.uleb128 0x1
 2845 004d 13       		.uleb128 0x13
 2846 004e 00       		.byte	0
 2847 004f 00       		.byte	0
 2848 0050 07       		.uleb128 0x7
 2849 0051 0D       		.uleb128 0xd
 2850 0052 00       		.byte	0
 2851 0053 03       		.uleb128 0x3
 2852 0054 0E       		.uleb128 0xe
 2853 0055 3A       		.uleb128 0x3a
 2854 0056 0B       		.uleb128 0xb
 2855 0057 3B       		.uleb128 0x3b
 2856 0058 05       		.uleb128 0x5
 2857 0059 49       		.uleb128 0x49
 2858 005a 13       		.uleb128 0x13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 76


 2859 005b 38       		.uleb128 0x38
 2860 005c 0B       		.uleb128 0xb
 2861 005d 00       		.byte	0
 2862 005e 00       		.byte	0
 2863 005f 08       		.uleb128 0x8
 2864 0060 0F       		.uleb128 0xf
 2865 0061 00       		.byte	0
 2866 0062 0B       		.uleb128 0xb
 2867 0063 0B       		.uleb128 0xb
 2868 0064 49       		.uleb128 0x49
 2869 0065 13       		.uleb128 0x13
 2870 0066 00       		.byte	0
 2871 0067 00       		.byte	0
 2872 0068 09       		.uleb128 0x9
 2873 0069 2E       		.uleb128 0x2e
 2874 006a 01       		.byte	0x1
 2875 006b 03       		.uleb128 0x3
 2876 006c 0E       		.uleb128 0xe
 2877 006d 3A       		.uleb128 0x3a
 2878 006e 0B       		.uleb128 0xb
 2879 006f 3B       		.uleb128 0x3b
 2880 0070 05       		.uleb128 0x5
 2881 0071 27       		.uleb128 0x27
 2882 0072 19       		.uleb128 0x19
 2883 0073 49       		.uleb128 0x49
 2884 0074 13       		.uleb128 0x13
 2885 0075 20       		.uleb128 0x20
 2886 0076 0B       		.uleb128 0xb
 2887 0077 01       		.uleb128 0x1
 2888 0078 13       		.uleb128 0x13
 2889 0079 00       		.byte	0
 2890 007a 00       		.byte	0
 2891 007b 0A       		.uleb128 0xa
 2892 007c 05       		.uleb128 0x5
 2893 007d 00       		.byte	0
 2894 007e 03       		.uleb128 0x3
 2895 007f 08       		.uleb128 0x8
 2896 0080 3A       		.uleb128 0x3a
 2897 0081 0B       		.uleb128 0xb
 2898 0082 3B       		.uleb128 0x3b
 2899 0083 05       		.uleb128 0x5
 2900 0084 49       		.uleb128 0x49
 2901 0085 13       		.uleb128 0x13
 2902 0086 00       		.byte	0
 2903 0087 00       		.byte	0
 2904 0088 0B       		.uleb128 0xb
 2905 0089 34       		.uleb128 0x34
 2906 008a 00       		.byte	0
 2907 008b 03       		.uleb128 0x3
 2908 008c 0E       		.uleb128 0xe
 2909 008d 3A       		.uleb128 0x3a
 2910 008e 0B       		.uleb128 0xb
 2911 008f 3B       		.uleb128 0x3b
 2912 0090 05       		.uleb128 0x5
 2913 0091 49       		.uleb128 0x49
 2914 0092 13       		.uleb128 0x13
 2915 0093 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 77


 2916 0094 00       		.byte	0
 2917 0095 0C       		.uleb128 0xc
 2918 0096 34       		.uleb128 0x34
 2919 0097 00       		.byte	0
 2920 0098 03       		.uleb128 0x3
 2921 0099 08       		.uleb128 0x8
 2922 009a 3A       		.uleb128 0x3a
 2923 009b 0B       		.uleb128 0xb
 2924 009c 3B       		.uleb128 0x3b
 2925 009d 05       		.uleb128 0x5
 2926 009e 49       		.uleb128 0x49
 2927 009f 13       		.uleb128 0x13
 2928 00a0 00       		.byte	0
 2929 00a1 00       		.byte	0
 2930 00a2 0D       		.uleb128 0xd
 2931 00a3 2E       		.uleb128 0x2e
 2932 00a4 01       		.byte	0x1
 2933 00a5 3F       		.uleb128 0x3f
 2934 00a6 19       		.uleb128 0x19
 2935 00a7 03       		.uleb128 0x3
 2936 00a8 0E       		.uleb128 0xe
 2937 00a9 3A       		.uleb128 0x3a
 2938 00aa 0B       		.uleb128 0xb
 2939 00ab 3B       		.uleb128 0x3b
 2940 00ac 0B       		.uleb128 0xb
 2941 00ad 27       		.uleb128 0x27
 2942 00ae 19       		.uleb128 0x19
 2943 00af 11       		.uleb128 0x11
 2944 00b0 01       		.uleb128 0x1
 2945 00b1 12       		.uleb128 0x12
 2946 00b2 06       		.uleb128 0x6
 2947 00b3 40       		.uleb128 0x40
 2948 00b4 18       		.uleb128 0x18
 2949 00b5 9742     		.uleb128 0x2117
 2950 00b7 19       		.uleb128 0x19
 2951 00b8 01       		.uleb128 0x1
 2952 00b9 13       		.uleb128 0x13
 2953 00ba 00       		.byte	0
 2954 00bb 00       		.byte	0
 2955 00bc 0E       		.uleb128 0xe
 2956 00bd 05       		.uleb128 0x5
 2957 00be 00       		.byte	0
 2958 00bf 03       		.uleb128 0x3
 2959 00c0 08       		.uleb128 0x8
 2960 00c1 3A       		.uleb128 0x3a
 2961 00c2 0B       		.uleb128 0xb
 2962 00c3 3B       		.uleb128 0x3b
 2963 00c4 0B       		.uleb128 0xb
 2964 00c5 49       		.uleb128 0x49
 2965 00c6 13       		.uleb128 0x13
 2966 00c7 02       		.uleb128 0x2
 2967 00c8 18       		.uleb128 0x18
 2968 00c9 00       		.byte	0
 2969 00ca 00       		.byte	0
 2970 00cb 0F       		.uleb128 0xf
 2971 00cc 05       		.uleb128 0x5
 2972 00cd 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 78


 2973 00ce 03       		.uleb128 0x3
 2974 00cf 0E       		.uleb128 0xe
 2975 00d0 3A       		.uleb128 0x3a
 2976 00d1 0B       		.uleb128 0xb
 2977 00d2 3B       		.uleb128 0x3b
 2978 00d3 0B       		.uleb128 0xb
 2979 00d4 49       		.uleb128 0x49
 2980 00d5 13       		.uleb128 0x13
 2981 00d6 02       		.uleb128 0x2
 2982 00d7 18       		.uleb128 0x18
 2983 00d8 00       		.byte	0
 2984 00d9 00       		.byte	0
 2985 00da 10       		.uleb128 0x10
 2986 00db 34       		.uleb128 0x34
 2987 00dc 00       		.byte	0
 2988 00dd 03       		.uleb128 0x3
 2989 00de 0E       		.uleb128 0xe
 2990 00df 3A       		.uleb128 0x3a
 2991 00e0 0B       		.uleb128 0xb
 2992 00e1 3B       		.uleb128 0x3b
 2993 00e2 0B       		.uleb128 0xb
 2994 00e3 49       		.uleb128 0x49
 2995 00e4 13       		.uleb128 0x13
 2996 00e5 02       		.uleb128 0x2
 2997 00e6 18       		.uleb128 0x18
 2998 00e7 00       		.byte	0
 2999 00e8 00       		.byte	0
 3000 00e9 11       		.uleb128 0x11
 3001 00ea 34       		.uleb128 0x34
 3002 00eb 00       		.byte	0
 3003 00ec 03       		.uleb128 0x3
 3004 00ed 08       		.uleb128 0x8
 3005 00ee 3A       		.uleb128 0x3a
 3006 00ef 0B       		.uleb128 0xb
 3007 00f0 3B       		.uleb128 0x3b
 3008 00f1 0B       		.uleb128 0xb
 3009 00f2 49       		.uleb128 0x49
 3010 00f3 13       		.uleb128 0x13
 3011 00f4 02       		.uleb128 0x2
 3012 00f5 18       		.uleb128 0x18
 3013 00f6 00       		.byte	0
 3014 00f7 00       		.byte	0
 3015 00f8 12       		.uleb128 0x12
 3016 00f9 1D       		.uleb128 0x1d
 3017 00fa 01       		.byte	0x1
 3018 00fb 31       		.uleb128 0x31
 3019 00fc 13       		.uleb128 0x13
 3020 00fd 11       		.uleb128 0x11
 3021 00fe 01       		.uleb128 0x1
 3022 00ff 12       		.uleb128 0x12
 3023 0100 06       		.uleb128 0x6
 3024 0101 58       		.uleb128 0x58
 3025 0102 0B       		.uleb128 0xb
 3026 0103 59       		.uleb128 0x59
 3027 0104 0B       		.uleb128 0xb
 3028 0105 01       		.uleb128 0x1
 3029 0106 13       		.uleb128 0x13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 79


 3030 0107 00       		.byte	0
 3031 0108 00       		.byte	0
 3032 0109 13       		.uleb128 0x13
 3033 010a 05       		.uleb128 0x5
 3034 010b 00       		.byte	0
 3035 010c 31       		.uleb128 0x31
 3036 010d 13       		.uleb128 0x13
 3037 010e 02       		.uleb128 0x2
 3038 010f 18       		.uleb128 0x18
 3039 0110 00       		.byte	0
 3040 0111 00       		.byte	0
 3041 0112 14       		.uleb128 0x14
 3042 0113 0B       		.uleb128 0xb
 3043 0114 01       		.byte	0x1
 3044 0115 11       		.uleb128 0x11
 3045 0116 01       		.uleb128 0x1
 3046 0117 12       		.uleb128 0x12
 3047 0118 06       		.uleb128 0x6
 3048 0119 00       		.byte	0
 3049 011a 00       		.byte	0
 3050 011b 15       		.uleb128 0x15
 3051 011c 34       		.uleb128 0x34
 3052 011d 00       		.byte	0
 3053 011e 31       		.uleb128 0x31
 3054 011f 13       		.uleb128 0x13
 3055 0120 02       		.uleb128 0x2
 3056 0121 18       		.uleb128 0x18
 3057 0122 00       		.byte	0
 3058 0123 00       		.byte	0
 3059 0124 16       		.uleb128 0x16
 3060 0125 1D       		.uleb128 0x1d
 3061 0126 01       		.byte	0x1
 3062 0127 31       		.uleb128 0x31
 3063 0128 13       		.uleb128 0x13
 3064 0129 11       		.uleb128 0x11
 3065 012a 01       		.uleb128 0x1
 3066 012b 12       		.uleb128 0x12
 3067 012c 06       		.uleb128 0x6
 3068 012d 58       		.uleb128 0x58
 3069 012e 0B       		.uleb128 0xb
 3070 012f 59       		.uleb128 0x59
 3071 0130 05       		.uleb128 0x5
 3072 0131 00       		.byte	0
 3073 0132 00       		.byte	0
 3074 0133 17       		.uleb128 0x17
 3075 0134 26       		.uleb128 0x26
 3076 0135 00       		.byte	0
 3077 0136 49       		.uleb128 0x49
 3078 0137 13       		.uleb128 0x13
 3079 0138 00       		.byte	0
 3080 0139 00       		.byte	0
 3081 013a 00       		.byte	0
 3082              		.section	.debug_aranges,"",%progbits
 3083 0000 1C000000 		.4byte	0x1c
 3084 0004 0200     		.2byte	0x2
 3085 0006 00000000 		.4byte	.Ldebug_info0
 3086 000a 04       		.byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 80


 3087 000b 00       		.byte	0
 3088 000c 0000     		.2byte	0
 3089 000e 0000     		.2byte	0
 3090 0010 00000000 		.4byte	.LFB82
 3091 0014 D80B0000 		.4byte	.LFE82-.LFB82
 3092 0018 00000000 		.4byte	0
 3093 001c 00000000 		.4byte	0
 3094              		.section	.debug_ranges,"",%progbits
 3095              	.Ldebug_ranges0:
 3096 0000 00000000 		.4byte	.LFB82
 3097 0004 D80B0000 		.4byte	.LFE82
 3098 0008 00000000 		.4byte	0
 3099 000c 00000000 		.4byte	0
 3100              		.section	.debug_line,"",%progbits
 3101              	.Ldebug_line0:
 3102 0000 4A030000 		.section	.debug_str,"MS",%progbits,1
 3102      02005301 
 3102      00000201 
 3102      FB0E0D00 
 3102      01010101 
 3103              	.LASF40:
 3104 0000 61636333 		.ascii	"acc3\000"
 3104      00
 3105              	.LASF25:
 3106 0005 70537461 		.ascii	"pState\000"
 3106      746500
 3107              	.LASF3:
 3108 000c 5F5F696E 		.ascii	"__int16_t\000"
 3108      7431365F 
 3108      7400
 3109              	.LASF27:
 3110 0016 61726D5F 		.ascii	"arm_fir_instance_q15\000"
 3110      6669725F 
 3110      696E7374 
 3110      616E6365 
 3110      5F713135 
 3111              	.LASF6:
 3112 002b 5F5F696E 		.ascii	"__int32_t\000"
 3112      7433325F 
 3112      7400
 3113              	.LASF45:
 3114 0035 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 3114      73657273 
 3114      5C666E65 
 3114      7665735C 
 3114      446F6375 
 3115 0062 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 3115      655F7370 
 3115      6565645F 
 3115      73656E73 
 3115      6F722E63 
 3116              	.LASF29:
 3117 007b 5F5F534D 		.ascii	"__SMLADX\000"
 3117      4C414458 
 3117      00
 3118              	.LASF22:
 3119 0084 7131355F 		.ascii	"q15_t\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 81


 3119      7400
 3120              	.LASF20:
 3121 008a 666C6F61 		.ascii	"float\000"
 3121      7400
 3122              	.LASF23:
 3123 0090 7133315F 		.ascii	"q31_t\000"
 3123      7400
 3124              	.LASF1:
 3125 0096 756E7369 		.ascii	"unsigned char\000"
 3125      676E6564 
 3125      20636861 
 3125      7200
 3126              	.LASF44:
 3127 00a4 536F7572 		.ascii	"Source\\FilteringFunctions\\arm_fir_fast_q15.c\000"
 3127      63655C46 
 3127      696C7465 
 3127      72696E67 
 3127      46756E63 
 3128              	.LASF42:
 3129 00d1 626C6B43 		.ascii	"blkCnt\000"
 3129      6E7400
 3130              	.LASF28:
 3131 00d8 5F5F534D 		.ascii	"__SMLAD\000"
 3131      4C414400 
 3132              	.LASF9:
 3133 00e0 6C6F6E67 		.ascii	"long unsigned int\000"
 3133      20756E73 
 3133      69676E65 
 3133      6420696E 
 3133      7400
 3134              	.LASF5:
 3135 00f2 73686F72 		.ascii	"short unsigned int\000"
 3135      7420756E 
 3135      7369676E 
 3135      65642069 
 3135      6E7400
 3136              	.LASF34:
 3137 0105 70447374 		.ascii	"pDst\000"
 3137      00
 3138              	.LASF32:
 3139 010a 6E65674D 		.ascii	"negMin\000"
 3139      696E00
 3140              	.LASF46:
 3141 0111 61726D5F 		.ascii	"arm_fir_fast_q15\000"
 3141      6669725F 
 3141      66617374 
 3141      5F713135 
 3141      00
 3142              	.LASF41:
 3143 0122 74617043 		.ascii	"tapCnt\000"
 3143      6E7400
 3144              	.LASF19:
 3145 0129 646F7562 		.ascii	"double\000"
 3145      6C6500
 3146              	.LASF8:
 3147 0130 5F5F7569 		.ascii	"__uint32_t\000"
 3147      6E743332 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 82


 3147      5F7400
 3148              	.LASF12:
 3149 013b 756E7369 		.ascii	"unsigned int\000"
 3149      676E6564 
 3149      20696E74 
 3149      00
 3150              	.LASF11:
 3151 0148 6C6F6E67 		.ascii	"long long unsigned int\000"
 3151      206C6F6E 
 3151      6720756E 
 3151      7369676E 
 3151      65642069 
 3152              	.LASF43:
 3153 015f 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3153      4320342E 
 3153      392E3320 
 3153      32303135 
 3153      30333033 
 3154 0192 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 3154      20726576 
 3154      6973696F 
 3154      6E203232 
 3154      31323230 
 3155 01c5 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 3155      30202D66 
 3155      66756E63 
 3155      74696F6E 
 3155      2D736563 
 3156              	.LASF36:
 3157 01f1 70537461 		.ascii	"pStateCurnt\000"
 3157      74654375 
 3157      726E7400 
 3158              	.LASF13:
 3159 01fd 696E7431 		.ascii	"int16_t\000"
 3159      365F7400 
 3160              	.LASF30:
 3161 0205 5F5F5353 		.ascii	"__SSAT\000"
 3161      415400
 3162              	.LASF15:
 3163 020c 696E7433 		.ascii	"int32_t\000"
 3163      325F7400 
 3164              	.LASF17:
 3165 0214 73697A65 		.ascii	"sizetype\000"
 3165      74797065 
 3165      00
 3166              	.LASF10:
 3167 021d 6C6F6E67 		.ascii	"long long int\000"
 3167      206C6F6E 
 3167      6720696E 
 3167      7400
 3168              	.LASF35:
 3169 022b 626C6F63 		.ascii	"blockSize\000"
 3169      6B53697A 
 3169      6500
 3170              	.LASF18:
 3171 0235 63686172 		.ascii	"char\000"
 3171      00
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc86XrpW.s 			page 83


 3172              	.LASF2:
 3173 023a 73686F72 		.ascii	"short int\000"
 3173      7420696E 
 3173      7400
 3174              	.LASF24:
 3175 0244 6E756D54 		.ascii	"numTaps\000"
 3175      61707300 
 3176              	.LASF4:
 3177 024c 5F5F7569 		.ascii	"__uint16_t\000"
 3177      6E743136 
 3177      5F7400
 3178              	.LASF14:
 3179 0257 75696E74 		.ascii	"uint16_t\000"
 3179      31365F74 
 3179      00
 3180              	.LASF31:
 3181 0260 706F734D 		.ascii	"posMax\000"
 3181      617800
 3182              	.LASF26:
 3183 0267 70436F65 		.ascii	"pCoeffs\000"
 3183      66667300 
 3184              	.LASF16:
 3185 026f 75696E74 		.ascii	"uint32_t\000"
 3185      33325F74 
 3185      00
 3186              	.LASF7:
 3187 0278 6C6F6E67 		.ascii	"long int\000"
 3187      20696E74 
 3187      00
 3188              	.LASF21:
 3189 0281 6C6F6E67 		.ascii	"long double\000"
 3189      20646F75 
 3189      626C6500 
 3190              	.LASF0:
 3191 028d 7369676E 		.ascii	"signed char\000"
 3191      65642063 
 3191      68617200 
 3192              	.LASF33:
 3193 0299 70537263 		.ascii	"pSrc\000"
 3193      00
 3194              	.LASF37:
 3195 029e 61636330 		.ascii	"acc0\000"
 3195      00
 3196              	.LASF38:
 3197 02a3 61636331 		.ascii	"acc1\000"
 3197      00
 3198              	.LASF39:
 3199 02a8 61636332 		.ascii	"acc2\000"
 3199      00
 3200              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
