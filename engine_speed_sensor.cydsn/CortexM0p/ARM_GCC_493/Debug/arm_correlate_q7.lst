ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_correlate_q7.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_correlate_q7,"ax",%progbits
  18              		.align	2
  19              		.global	arm_correlate_q7
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_correlate_q7, %function
  23              	arm_correlate_q7:
  24              	.LFB82:
  25              		.file 1 "Source\\FilteringFunctions\\arm_correlate_q7.c"
   1:Source\FilteringFunctions/arm_correlate_q7.c **** /* ----------------------------------------------------------------------
   2:Source\FilteringFunctions/arm_correlate_q7.c ****  * Project:      CMSIS DSP Library
   3:Source\FilteringFunctions/arm_correlate_q7.c ****  * Title:        arm_correlate_q7.c
   4:Source\FilteringFunctions/arm_correlate_q7.c ****  * Description:  Correlation of Q7 sequences
   5:Source\FilteringFunctions/arm_correlate_q7.c ****  *
   6:Source\FilteringFunctions/arm_correlate_q7.c ****  * $Date:        27. January 2017
   7:Source\FilteringFunctions/arm_correlate_q7.c ****  * $Revision:    V.1.5.1
   8:Source\FilteringFunctions/arm_correlate_q7.c ****  *
   9:Source\FilteringFunctions/arm_correlate_q7.c ****  * Target Processor: Cortex-M cores
  10:Source\FilteringFunctions/arm_correlate_q7.c ****  * -------------------------------------------------------------------- */
  11:Source\FilteringFunctions/arm_correlate_q7.c **** /*
  12:Source\FilteringFunctions/arm_correlate_q7.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\FilteringFunctions/arm_correlate_q7.c ****  *
  14:Source\FilteringFunctions/arm_correlate_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\FilteringFunctions/arm_correlate_q7.c ****  *
  16:Source\FilteringFunctions/arm_correlate_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\FilteringFunctions/arm_correlate_q7.c ****  * not use this file except in compliance with the License.
  18:Source\FilteringFunctions/arm_correlate_q7.c ****  * You may obtain a copy of the License at
  19:Source\FilteringFunctions/arm_correlate_q7.c ****  *
  20:Source\FilteringFunctions/arm_correlate_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\FilteringFunctions/arm_correlate_q7.c ****  *
  22:Source\FilteringFunctions/arm_correlate_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\FilteringFunctions/arm_correlate_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\FilteringFunctions/arm_correlate_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\FilteringFunctions/arm_correlate_q7.c ****  * See the License for the specific language governing permissions and
  26:Source\FilteringFunctions/arm_correlate_q7.c ****  * limitations under the License.
  27:Source\FilteringFunctions/arm_correlate_q7.c ****  */
  28:Source\FilteringFunctions/arm_correlate_q7.c **** 
  29:Source\FilteringFunctions/arm_correlate_q7.c **** #include "arm_math.h"
  30:Source\FilteringFunctions/arm_correlate_q7.c **** 
  31:Source\FilteringFunctions/arm_correlate_q7.c **** /**
  32:Source\FilteringFunctions/arm_correlate_q7.c ****  * @ingroup groupFilters
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 2


  33:Source\FilteringFunctions/arm_correlate_q7.c ****  */
  34:Source\FilteringFunctions/arm_correlate_q7.c **** 
  35:Source\FilteringFunctions/arm_correlate_q7.c **** /**
  36:Source\FilteringFunctions/arm_correlate_q7.c ****  * @addtogroup Corr
  37:Source\FilteringFunctions/arm_correlate_q7.c ****  * @{
  38:Source\FilteringFunctions/arm_correlate_q7.c ****  */
  39:Source\FilteringFunctions/arm_correlate_q7.c **** 
  40:Source\FilteringFunctions/arm_correlate_q7.c **** /**
  41:Source\FilteringFunctions/arm_correlate_q7.c ****  * @brief Correlation of Q7 sequences.
  42:Source\FilteringFunctions/arm_correlate_q7.c ****  * @param[in] *pSrcA points to the first input sequence.
  43:Source\FilteringFunctions/arm_correlate_q7.c ****  * @param[in] srcALen length of the first input sequence.
  44:Source\FilteringFunctions/arm_correlate_q7.c ****  * @param[in] *pSrcB points to the second input sequence.
  45:Source\FilteringFunctions/arm_correlate_q7.c ****  * @param[in] srcBLen length of the second input sequence.
  46:Source\FilteringFunctions/arm_correlate_q7.c ****  * @param[out] *pDst points to the location where the output result is written.  Length 2 * max(src
  47:Source\FilteringFunctions/arm_correlate_q7.c ****  * @return none.
  48:Source\FilteringFunctions/arm_correlate_q7.c ****  *
  49:Source\FilteringFunctions/arm_correlate_q7.c ****  * @details
  50:Source\FilteringFunctions/arm_correlate_q7.c ****  * <b>Scaling and Overflow Behavior:</b>
  51:Source\FilteringFunctions/arm_correlate_q7.c ****  *
  52:Source\FilteringFunctions/arm_correlate_q7.c ****  * \par
  53:Source\FilteringFunctions/arm_correlate_q7.c ****  * The function is implemented using a 32-bit internal accumulator.
  54:Source\FilteringFunctions/arm_correlate_q7.c ****  * Both the inputs are represented in 1.7 format and multiplications yield a 2.14 result.
  55:Source\FilteringFunctions/arm_correlate_q7.c ****  * The 2.14 intermediate results are accumulated in a 32-bit accumulator in 18.14 format.
  56:Source\FilteringFunctions/arm_correlate_q7.c ****  * This approach provides 17 guard bits and there is no risk of overflow as long as <code>max(srcAL
  57:Source\FilteringFunctions/arm_correlate_q7.c ****  * The 18.14 result is then truncated to 18.7 format by discarding the low 7 bits and saturated to 
  58:Source\FilteringFunctions/arm_correlate_q7.c ****  *
  59:Source\FilteringFunctions/arm_correlate_q7.c ****  * \par
  60:Source\FilteringFunctions/arm_correlate_q7.c ****  * Refer the function <code>arm_correlate_opt_q7()</code> for a faster implementation of this funct
  61:Source\FilteringFunctions/arm_correlate_q7.c ****  *
  62:Source\FilteringFunctions/arm_correlate_q7.c ****  */
  63:Source\FilteringFunctions/arm_correlate_q7.c **** 
  64:Source\FilteringFunctions/arm_correlate_q7.c **** void arm_correlate_q7(
  65:Source\FilteringFunctions/arm_correlate_q7.c ****   q7_t * pSrcA,
  66:Source\FilteringFunctions/arm_correlate_q7.c ****   uint32_t srcALen,
  67:Source\FilteringFunctions/arm_correlate_q7.c ****   q7_t * pSrcB,
  68:Source\FilteringFunctions/arm_correlate_q7.c ****   uint32_t srcBLen,
  69:Source\FilteringFunctions/arm_correlate_q7.c ****   q7_t * pDst)
  70:Source\FilteringFunctions/arm_correlate_q7.c **** {
  26              		.loc 1 70 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 96B0     		sub	sp, sp, #88
  33              		.cfi_def_cfa_offset 96
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 B960     		str	r1, [r7, #8]
  38 000a 7A60     		str	r2, [r7, #4]
  39 000c 3B60     		str	r3, [r7]
  71:Source\FilteringFunctions/arm_correlate_q7.c **** 
  72:Source\FilteringFunctions/arm_correlate_q7.c **** 
  73:Source\FilteringFunctions/arm_correlate_q7.c **** #if defined (ARM_MATH_DSP)
  74:Source\FilteringFunctions/arm_correlate_q7.c **** 
  75:Source\FilteringFunctions/arm_correlate_q7.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 3


  76:Source\FilteringFunctions/arm_correlate_q7.c **** 
  77:Source\FilteringFunctions/arm_correlate_q7.c ****   q7_t *pIn1;                                    /* inputA pointer               */
  78:Source\FilteringFunctions/arm_correlate_q7.c ****   q7_t *pIn2;                                    /* inputB pointer               */
  79:Source\FilteringFunctions/arm_correlate_q7.c ****   q7_t *pOut = pDst;                             /* output pointer               */
  80:Source\FilteringFunctions/arm_correlate_q7.c ****   q7_t *px;                                      /* Intermediate inputA pointer  */
  81:Source\FilteringFunctions/arm_correlate_q7.c ****   q7_t *py;                                      /* Intermediate inputB pointer  */
  82:Source\FilteringFunctions/arm_correlate_q7.c ****   q7_t *pSrc1;                                   /* Intermediate pointers        */
  83:Source\FilteringFunctions/arm_correlate_q7.c ****   q31_t sum, acc0, acc1, acc2, acc3;             /* Accumulators                  */
  84:Source\FilteringFunctions/arm_correlate_q7.c ****   q31_t input1, input2;                          /* temporary variables */
  85:Source\FilteringFunctions/arm_correlate_q7.c ****   q15_t in1, in2;                                /* temporary variables */
  86:Source\FilteringFunctions/arm_correlate_q7.c ****   q7_t x0, x1, x2, x3, c0, c1;                   /* temporary variables for holding input and coeff
  87:Source\FilteringFunctions/arm_correlate_q7.c ****   uint32_t j, k = 0u, count, blkCnt, outBlockSize, blockSize1, blockSize2, blockSize3;  /* loop cou
  88:Source\FilteringFunctions/arm_correlate_q7.c ****   int32_t inc = 1;
  89:Source\FilteringFunctions/arm_correlate_q7.c **** 
  90:Source\FilteringFunctions/arm_correlate_q7.c **** 
  91:Source\FilteringFunctions/arm_correlate_q7.c ****   /* The algorithm implementation is based on the lengths of the inputs. */
  92:Source\FilteringFunctions/arm_correlate_q7.c ****   /* srcB is always made to slide across srcA. */
  93:Source\FilteringFunctions/arm_correlate_q7.c ****   /* So srcBLen is always considered as shorter or equal to srcALen */
  94:Source\FilteringFunctions/arm_correlate_q7.c ****   /* But CORR(x, y) is reverse of CORR(y, x) */
  95:Source\FilteringFunctions/arm_correlate_q7.c ****   /* So, when srcBLen > srcALen, output pointer is made to point to the end of the output buffer */
  96:Source\FilteringFunctions/arm_correlate_q7.c ****   /* and the destination pointer modifier, inc is set to -1 */
  97:Source\FilteringFunctions/arm_correlate_q7.c ****   /* If srcALen > srcBLen, zero pad has to be done to srcB to make the two inputs of same length */
  98:Source\FilteringFunctions/arm_correlate_q7.c ****   /* But to improve the performance,
  99:Source\FilteringFunctions/arm_correlate_q7.c ****    * we include zeroes in the output instead of zero padding either of the the inputs*/
 100:Source\FilteringFunctions/arm_correlate_q7.c ****   /* If srcALen > srcBLen,
 101:Source\FilteringFunctions/arm_correlate_q7.c ****    * (srcALen - srcBLen) zeroes has to included in the starting of the output buffer */
 102:Source\FilteringFunctions/arm_correlate_q7.c ****   /* If srcALen < srcBLen,
 103:Source\FilteringFunctions/arm_correlate_q7.c ****    * (srcALen - srcBLen) zeroes has to included in the ending of the output buffer */
 104:Source\FilteringFunctions/arm_correlate_q7.c ****   if (srcALen >= srcBLen)
 105:Source\FilteringFunctions/arm_correlate_q7.c ****   {
 106:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Initialization of inputA pointer */
 107:Source\FilteringFunctions/arm_correlate_q7.c ****     pIn1 = (pSrcA);
 108:Source\FilteringFunctions/arm_correlate_q7.c **** 
 109:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Initialization of inputB pointer */
 110:Source\FilteringFunctions/arm_correlate_q7.c ****     pIn2 = (pSrcB);
 111:Source\FilteringFunctions/arm_correlate_q7.c **** 
 112:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Number of output samples is calculated */
 113:Source\FilteringFunctions/arm_correlate_q7.c ****     outBlockSize = (2u * srcALen) - 1u;
 114:Source\FilteringFunctions/arm_correlate_q7.c **** 
 115:Source\FilteringFunctions/arm_correlate_q7.c ****     /* When srcALen > srcBLen, zero padding is done to srcB
 116:Source\FilteringFunctions/arm_correlate_q7.c ****      * to make their lengths equal.
 117:Source\FilteringFunctions/arm_correlate_q7.c ****      * Instead, (outBlockSize - (srcALen + srcBLen - 1))
 118:Source\FilteringFunctions/arm_correlate_q7.c ****      * number of output samples are made zero */
 119:Source\FilteringFunctions/arm_correlate_q7.c ****     j = outBlockSize - (srcALen + (srcBLen - 1u));
 120:Source\FilteringFunctions/arm_correlate_q7.c **** 
 121:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Updating the pointer position to non zero value */
 122:Source\FilteringFunctions/arm_correlate_q7.c ****     pOut += j;
 123:Source\FilteringFunctions/arm_correlate_q7.c **** 
 124:Source\FilteringFunctions/arm_correlate_q7.c ****   }
 125:Source\FilteringFunctions/arm_correlate_q7.c ****   else
 126:Source\FilteringFunctions/arm_correlate_q7.c ****   {
 127:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Initialization of inputA pointer */
 128:Source\FilteringFunctions/arm_correlate_q7.c ****     pIn1 = (pSrcB);
 129:Source\FilteringFunctions/arm_correlate_q7.c **** 
 130:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Initialization of inputB pointer */
 131:Source\FilteringFunctions/arm_correlate_q7.c ****     pIn2 = (pSrcA);
 132:Source\FilteringFunctions/arm_correlate_q7.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 4


 133:Source\FilteringFunctions/arm_correlate_q7.c ****     /* srcBLen is always considered as shorter or equal to srcALen */
 134:Source\FilteringFunctions/arm_correlate_q7.c ****     j = srcBLen;
 135:Source\FilteringFunctions/arm_correlate_q7.c ****     srcBLen = srcALen;
 136:Source\FilteringFunctions/arm_correlate_q7.c ****     srcALen = j;
 137:Source\FilteringFunctions/arm_correlate_q7.c **** 
 138:Source\FilteringFunctions/arm_correlate_q7.c ****     /* CORR(x, y) = Reverse order(CORR(y, x)) */
 139:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Hence set the destination pointer to point to the last output sample */
 140:Source\FilteringFunctions/arm_correlate_q7.c ****     pOut = pDst + ((srcALen + srcBLen) - 2u);
 141:Source\FilteringFunctions/arm_correlate_q7.c **** 
 142:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Destination address modifier is set to -1 */
 143:Source\FilteringFunctions/arm_correlate_q7.c ****     inc = -1;
 144:Source\FilteringFunctions/arm_correlate_q7.c **** 
 145:Source\FilteringFunctions/arm_correlate_q7.c ****   }
 146:Source\FilteringFunctions/arm_correlate_q7.c **** 
 147:Source\FilteringFunctions/arm_correlate_q7.c ****   /* The function is internally
 148:Source\FilteringFunctions/arm_correlate_q7.c ****    * divided into three parts according to the number of multiplications that has to be
 149:Source\FilteringFunctions/arm_correlate_q7.c ****    * taken place between inputA samples and inputB samples. In the first part of the
 150:Source\FilteringFunctions/arm_correlate_q7.c ****    * algorithm, the multiplications increase by one for every iteration.
 151:Source\FilteringFunctions/arm_correlate_q7.c ****    * In the second part of the algorithm, srcBLen number of multiplications are done.
 152:Source\FilteringFunctions/arm_correlate_q7.c ****    * In the third part of the algorithm, the multiplications decrease by one
 153:Source\FilteringFunctions/arm_correlate_q7.c ****    * for every iteration.*/
 154:Source\FilteringFunctions/arm_correlate_q7.c ****   /* The algorithm is implemented in three stages.
 155:Source\FilteringFunctions/arm_correlate_q7.c ****    * The loop counters of each stage is initiated here. */
 156:Source\FilteringFunctions/arm_correlate_q7.c ****   blockSize1 = srcBLen - 1u;
 157:Source\FilteringFunctions/arm_correlate_q7.c ****   blockSize2 = srcALen - (srcBLen - 1u);
 158:Source\FilteringFunctions/arm_correlate_q7.c ****   blockSize3 = blockSize1;
 159:Source\FilteringFunctions/arm_correlate_q7.c **** 
 160:Source\FilteringFunctions/arm_correlate_q7.c ****   /* --------------------------
 161:Source\FilteringFunctions/arm_correlate_q7.c ****    * Initializations of stage1
 162:Source\FilteringFunctions/arm_correlate_q7.c ****    * -------------------------*/
 163:Source\FilteringFunctions/arm_correlate_q7.c **** 
 164:Source\FilteringFunctions/arm_correlate_q7.c ****   /* sum = x[0] * y[srcBlen - 1]
 165:Source\FilteringFunctions/arm_correlate_q7.c ****    * sum = x[0] * y[srcBlen - 2] + x[1] * y[srcBlen - 1]
 166:Source\FilteringFunctions/arm_correlate_q7.c ****    * ....
 167:Source\FilteringFunctions/arm_correlate_q7.c ****    * sum = x[0] * y[0] + x[1] * y[1] +...+ x[srcBLen - 1] * y[srcBLen - 1]
 168:Source\FilteringFunctions/arm_correlate_q7.c ****    */
 169:Source\FilteringFunctions/arm_correlate_q7.c **** 
 170:Source\FilteringFunctions/arm_correlate_q7.c ****   /* In this stage the MAC operations are increased by 1 for every iteration.
 171:Source\FilteringFunctions/arm_correlate_q7.c ****      The count variable holds the number of MAC operations performed */
 172:Source\FilteringFunctions/arm_correlate_q7.c ****   count = 1u;
 173:Source\FilteringFunctions/arm_correlate_q7.c **** 
 174:Source\FilteringFunctions/arm_correlate_q7.c ****   /* Working pointer of inputA */
 175:Source\FilteringFunctions/arm_correlate_q7.c ****   px = pIn1;
 176:Source\FilteringFunctions/arm_correlate_q7.c **** 
 177:Source\FilteringFunctions/arm_correlate_q7.c ****   /* Working pointer of inputB */
 178:Source\FilteringFunctions/arm_correlate_q7.c ****   pSrc1 = pIn2 + (srcBLen - 1u);
 179:Source\FilteringFunctions/arm_correlate_q7.c ****   py = pSrc1;
 180:Source\FilteringFunctions/arm_correlate_q7.c **** 
 181:Source\FilteringFunctions/arm_correlate_q7.c ****   /* ------------------------
 182:Source\FilteringFunctions/arm_correlate_q7.c ****    * Stage1 process
 183:Source\FilteringFunctions/arm_correlate_q7.c ****    * ----------------------*/
 184:Source\FilteringFunctions/arm_correlate_q7.c **** 
 185:Source\FilteringFunctions/arm_correlate_q7.c ****   /* The first stage starts here */
 186:Source\FilteringFunctions/arm_correlate_q7.c ****   while (blockSize1 > 0u)
 187:Source\FilteringFunctions/arm_correlate_q7.c ****   {
 188:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Accumulator is made zero for every iteration */
 189:Source\FilteringFunctions/arm_correlate_q7.c ****     sum = 0;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 5


 190:Source\FilteringFunctions/arm_correlate_q7.c **** 
 191:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Apply loop unrolling and compute 4 MACs simultaneously. */
 192:Source\FilteringFunctions/arm_correlate_q7.c ****     k = count >> 2;
 193:Source\FilteringFunctions/arm_correlate_q7.c **** 
 194:Source\FilteringFunctions/arm_correlate_q7.c ****     /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 195:Source\FilteringFunctions/arm_correlate_q7.c ****      ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 196:Source\FilteringFunctions/arm_correlate_q7.c ****     while (k > 0u)
 197:Source\FilteringFunctions/arm_correlate_q7.c ****     {
 198:Source\FilteringFunctions/arm_correlate_q7.c ****       /* x[0] , x[1] */
 199:Source\FilteringFunctions/arm_correlate_q7.c ****       in1 = (q15_t) * px++;
 200:Source\FilteringFunctions/arm_correlate_q7.c ****       in2 = (q15_t) * px++;
 201:Source\FilteringFunctions/arm_correlate_q7.c ****       input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 202:Source\FilteringFunctions/arm_correlate_q7.c **** 
 203:Source\FilteringFunctions/arm_correlate_q7.c ****       /* y[srcBLen - 4] , y[srcBLen - 3] */
 204:Source\FilteringFunctions/arm_correlate_q7.c ****       in1 = (q15_t) * py++;
 205:Source\FilteringFunctions/arm_correlate_q7.c ****       in2 = (q15_t) * py++;
 206:Source\FilteringFunctions/arm_correlate_q7.c ****       input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 207:Source\FilteringFunctions/arm_correlate_q7.c **** 
 208:Source\FilteringFunctions/arm_correlate_q7.c ****       /* x[0] * y[srcBLen - 4] */
 209:Source\FilteringFunctions/arm_correlate_q7.c ****       /* x[1] * y[srcBLen - 3] */
 210:Source\FilteringFunctions/arm_correlate_q7.c ****       sum = __SMLAD(input1, input2, sum);
 211:Source\FilteringFunctions/arm_correlate_q7.c **** 
 212:Source\FilteringFunctions/arm_correlate_q7.c ****       /* x[2] , x[3] */
 213:Source\FilteringFunctions/arm_correlate_q7.c ****       in1 = (q15_t) * px++;
 214:Source\FilteringFunctions/arm_correlate_q7.c ****       in2 = (q15_t) * px++;
 215:Source\FilteringFunctions/arm_correlate_q7.c ****       input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 216:Source\FilteringFunctions/arm_correlate_q7.c **** 
 217:Source\FilteringFunctions/arm_correlate_q7.c ****       /* y[srcBLen - 2] , y[srcBLen - 1] */
 218:Source\FilteringFunctions/arm_correlate_q7.c ****       in1 = (q15_t) * py++;
 219:Source\FilteringFunctions/arm_correlate_q7.c ****       in2 = (q15_t) * py++;
 220:Source\FilteringFunctions/arm_correlate_q7.c ****       input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 221:Source\FilteringFunctions/arm_correlate_q7.c **** 
 222:Source\FilteringFunctions/arm_correlate_q7.c ****       /* x[2] * y[srcBLen - 2] */
 223:Source\FilteringFunctions/arm_correlate_q7.c ****       /* x[3] * y[srcBLen - 1] */
 224:Source\FilteringFunctions/arm_correlate_q7.c ****       sum = __SMLAD(input1, input2, sum);
 225:Source\FilteringFunctions/arm_correlate_q7.c **** 
 226:Source\FilteringFunctions/arm_correlate_q7.c **** 
 227:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Decrement the loop counter */
 228:Source\FilteringFunctions/arm_correlate_q7.c ****       k--;
 229:Source\FilteringFunctions/arm_correlate_q7.c ****     }
 230:Source\FilteringFunctions/arm_correlate_q7.c **** 
 231:Source\FilteringFunctions/arm_correlate_q7.c ****     /* If the count is not a multiple of 4, compute any remaining MACs here.
 232:Source\FilteringFunctions/arm_correlate_q7.c ****      ** No loop unrolling is used. */
 233:Source\FilteringFunctions/arm_correlate_q7.c ****     k = count % 0x4u;
 234:Source\FilteringFunctions/arm_correlate_q7.c **** 
 235:Source\FilteringFunctions/arm_correlate_q7.c ****     while (k > 0u)
 236:Source\FilteringFunctions/arm_correlate_q7.c ****     {
 237:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Perform the multiply-accumulates */
 238:Source\FilteringFunctions/arm_correlate_q7.c ****       /* x[0] * y[srcBLen - 1] */
 239:Source\FilteringFunctions/arm_correlate_q7.c ****       sum += (q31_t) ((q15_t) * px++ * *py++);
 240:Source\FilteringFunctions/arm_correlate_q7.c **** 
 241:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Decrement the loop counter */
 242:Source\FilteringFunctions/arm_correlate_q7.c ****       k--;
 243:Source\FilteringFunctions/arm_correlate_q7.c ****     }
 244:Source\FilteringFunctions/arm_correlate_q7.c **** 
 245:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Store the result in the accumulator in the destination buffer. */
 246:Source\FilteringFunctions/arm_correlate_q7.c ****     *pOut = (q7_t) (__SSAT(sum >> 7, 8));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 6


 247:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Destination pointer is updated according to the address modifier, inc */
 248:Source\FilteringFunctions/arm_correlate_q7.c ****     pOut += inc;
 249:Source\FilteringFunctions/arm_correlate_q7.c **** 
 250:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Update the inputA and inputB pointers for next MAC calculation */
 251:Source\FilteringFunctions/arm_correlate_q7.c ****     py = pSrc1 - count;
 252:Source\FilteringFunctions/arm_correlate_q7.c ****     px = pIn1;
 253:Source\FilteringFunctions/arm_correlate_q7.c **** 
 254:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Increment the MAC count */
 255:Source\FilteringFunctions/arm_correlate_q7.c ****     count++;
 256:Source\FilteringFunctions/arm_correlate_q7.c **** 
 257:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Decrement the loop counter */
 258:Source\FilteringFunctions/arm_correlate_q7.c ****     blockSize1--;
 259:Source\FilteringFunctions/arm_correlate_q7.c ****   }
 260:Source\FilteringFunctions/arm_correlate_q7.c **** 
 261:Source\FilteringFunctions/arm_correlate_q7.c ****   /* --------------------------
 262:Source\FilteringFunctions/arm_correlate_q7.c ****    * Initializations of stage2
 263:Source\FilteringFunctions/arm_correlate_q7.c ****    * ------------------------*/
 264:Source\FilteringFunctions/arm_correlate_q7.c **** 
 265:Source\FilteringFunctions/arm_correlate_q7.c ****   /* sum = x[0] * y[0] + x[1] * y[1] +...+ x[srcBLen-1] * y[srcBLen-1]
 266:Source\FilteringFunctions/arm_correlate_q7.c ****    * sum = x[1] * y[0] + x[2] * y[1] +...+ x[srcBLen] * y[srcBLen-1]
 267:Source\FilteringFunctions/arm_correlate_q7.c ****    * ....
 268:Source\FilteringFunctions/arm_correlate_q7.c ****    * sum = x[srcALen-srcBLen-2] * y[0] + x[srcALen-srcBLen-1] * y[1] +...+ x[srcALen-1] * y[srcBLen
 269:Source\FilteringFunctions/arm_correlate_q7.c ****    */
 270:Source\FilteringFunctions/arm_correlate_q7.c **** 
 271:Source\FilteringFunctions/arm_correlate_q7.c ****   /* Working pointer of inputA */
 272:Source\FilteringFunctions/arm_correlate_q7.c ****   px = pIn1;
 273:Source\FilteringFunctions/arm_correlate_q7.c **** 
 274:Source\FilteringFunctions/arm_correlate_q7.c ****   /* Working pointer of inputB */
 275:Source\FilteringFunctions/arm_correlate_q7.c ****   py = pIn2;
 276:Source\FilteringFunctions/arm_correlate_q7.c **** 
 277:Source\FilteringFunctions/arm_correlate_q7.c ****   /* count is index by which the pointer pIn1 to be incremented */
 278:Source\FilteringFunctions/arm_correlate_q7.c ****   count = 0u;
 279:Source\FilteringFunctions/arm_correlate_q7.c **** 
 280:Source\FilteringFunctions/arm_correlate_q7.c ****   /* -------------------
 281:Source\FilteringFunctions/arm_correlate_q7.c ****    * Stage2 process
 282:Source\FilteringFunctions/arm_correlate_q7.c ****    * ------------------*/
 283:Source\FilteringFunctions/arm_correlate_q7.c **** 
 284:Source\FilteringFunctions/arm_correlate_q7.c ****   /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
 285:Source\FilteringFunctions/arm_correlate_q7.c ****    * So, to loop unroll over blockSize2,
 286:Source\FilteringFunctions/arm_correlate_q7.c ****    * srcBLen should be greater than or equal to 4 */
 287:Source\FilteringFunctions/arm_correlate_q7.c ****   if (srcBLen >= 4u)
 288:Source\FilteringFunctions/arm_correlate_q7.c ****   {
 289:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Loop unroll over blockSize2, by 4 */
 290:Source\FilteringFunctions/arm_correlate_q7.c ****     blkCnt = blockSize2 >> 2u;
 291:Source\FilteringFunctions/arm_correlate_q7.c **** 
 292:Source\FilteringFunctions/arm_correlate_q7.c ****     while (blkCnt > 0u)
 293:Source\FilteringFunctions/arm_correlate_q7.c ****     {
 294:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Set all accumulators to zero */
 295:Source\FilteringFunctions/arm_correlate_q7.c ****       acc0 = 0;
 296:Source\FilteringFunctions/arm_correlate_q7.c ****       acc1 = 0;
 297:Source\FilteringFunctions/arm_correlate_q7.c ****       acc2 = 0;
 298:Source\FilteringFunctions/arm_correlate_q7.c ****       acc3 = 0;
 299:Source\FilteringFunctions/arm_correlate_q7.c **** 
 300:Source\FilteringFunctions/arm_correlate_q7.c ****       /* read x[0], x[1], x[2] samples */
 301:Source\FilteringFunctions/arm_correlate_q7.c ****       x0 = *px++;
 302:Source\FilteringFunctions/arm_correlate_q7.c ****       x1 = *px++;
 303:Source\FilteringFunctions/arm_correlate_q7.c ****       x2 = *px++;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 7


 304:Source\FilteringFunctions/arm_correlate_q7.c **** 
 305:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 306:Source\FilteringFunctions/arm_correlate_q7.c ****       k = srcBLen >> 2u;
 307:Source\FilteringFunctions/arm_correlate_q7.c **** 
 308:Source\FilteringFunctions/arm_correlate_q7.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 309:Source\FilteringFunctions/arm_correlate_q7.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 310:Source\FilteringFunctions/arm_correlate_q7.c ****       do
 311:Source\FilteringFunctions/arm_correlate_q7.c ****       {
 312:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Read y[0] sample */
 313:Source\FilteringFunctions/arm_correlate_q7.c ****         c0 = *py++;
 314:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Read y[1] sample */
 315:Source\FilteringFunctions/arm_correlate_q7.c ****         c1 = *py++;
 316:Source\FilteringFunctions/arm_correlate_q7.c **** 
 317:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Read x[3] sample */
 318:Source\FilteringFunctions/arm_correlate_q7.c ****         x3 = *px++;
 319:Source\FilteringFunctions/arm_correlate_q7.c **** 
 320:Source\FilteringFunctions/arm_correlate_q7.c ****         /* x[0] and x[1] are packed */
 321:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) x0;
 322:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) x1;
 323:Source\FilteringFunctions/arm_correlate_q7.c **** 
 324:Source\FilteringFunctions/arm_correlate_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 325:Source\FilteringFunctions/arm_correlate_q7.c **** 
 326:Source\FilteringFunctions/arm_correlate_q7.c ****         /* y[0] and y[1] are packed */
 327:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) c0;
 328:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) c1;
 329:Source\FilteringFunctions/arm_correlate_q7.c **** 
 330:Source\FilteringFunctions/arm_correlate_q7.c ****         input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 331:Source\FilteringFunctions/arm_correlate_q7.c **** 
 332:Source\FilteringFunctions/arm_correlate_q7.c ****         /* acc0 += x[0] * y[0] + x[1] * y[1]  */
 333:Source\FilteringFunctions/arm_correlate_q7.c ****         acc0 = __SMLAD(input1, input2, acc0);
 334:Source\FilteringFunctions/arm_correlate_q7.c **** 
 335:Source\FilteringFunctions/arm_correlate_q7.c ****         /* x[1] and x[2] are packed */
 336:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) x1;
 337:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) x2;
 338:Source\FilteringFunctions/arm_correlate_q7.c **** 
 339:Source\FilteringFunctions/arm_correlate_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 340:Source\FilteringFunctions/arm_correlate_q7.c **** 
 341:Source\FilteringFunctions/arm_correlate_q7.c ****         /* acc1 += x[1] * y[0] + x[2] * y[1] */
 342:Source\FilteringFunctions/arm_correlate_q7.c ****         acc1 = __SMLAD(input1, input2, acc1);
 343:Source\FilteringFunctions/arm_correlate_q7.c **** 
 344:Source\FilteringFunctions/arm_correlate_q7.c ****         /* x[2] and x[3] are packed */
 345:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) x2;
 346:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) x3;
 347:Source\FilteringFunctions/arm_correlate_q7.c **** 
 348:Source\FilteringFunctions/arm_correlate_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 349:Source\FilteringFunctions/arm_correlate_q7.c **** 
 350:Source\FilteringFunctions/arm_correlate_q7.c ****         /* acc2 += x[2] * y[0] + x[3] * y[1]  */
 351:Source\FilteringFunctions/arm_correlate_q7.c ****         acc2 = __SMLAD(input1, input2, acc2);
 352:Source\FilteringFunctions/arm_correlate_q7.c **** 
 353:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Read x[4] sample */
 354:Source\FilteringFunctions/arm_correlate_q7.c ****         x0 = *(px++);
 355:Source\FilteringFunctions/arm_correlate_q7.c **** 
 356:Source\FilteringFunctions/arm_correlate_q7.c ****         /* x[3] and x[4] are packed */
 357:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) x3;
 358:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) x0;
 359:Source\FilteringFunctions/arm_correlate_q7.c **** 
 360:Source\FilteringFunctions/arm_correlate_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 8


 361:Source\FilteringFunctions/arm_correlate_q7.c **** 
 362:Source\FilteringFunctions/arm_correlate_q7.c ****         /* acc3 += x[3] * y[0] + x[4] * y[1]  */
 363:Source\FilteringFunctions/arm_correlate_q7.c ****         acc3 = __SMLAD(input1, input2, acc3);
 364:Source\FilteringFunctions/arm_correlate_q7.c **** 
 365:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Read y[2] sample */
 366:Source\FilteringFunctions/arm_correlate_q7.c ****         c0 = *py++;
 367:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Read y[3] sample */
 368:Source\FilteringFunctions/arm_correlate_q7.c ****         c1 = *py++;
 369:Source\FilteringFunctions/arm_correlate_q7.c **** 
 370:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Read x[5] sample */
 371:Source\FilteringFunctions/arm_correlate_q7.c ****         x1 = *px++;
 372:Source\FilteringFunctions/arm_correlate_q7.c **** 
 373:Source\FilteringFunctions/arm_correlate_q7.c ****         /* x[2] and x[3] are packed */
 374:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) x2;
 375:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) x3;
 376:Source\FilteringFunctions/arm_correlate_q7.c **** 
 377:Source\FilteringFunctions/arm_correlate_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 378:Source\FilteringFunctions/arm_correlate_q7.c **** 
 379:Source\FilteringFunctions/arm_correlate_q7.c ****         /* y[2] and y[3] are packed */
 380:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) c0;
 381:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) c1;
 382:Source\FilteringFunctions/arm_correlate_q7.c **** 
 383:Source\FilteringFunctions/arm_correlate_q7.c ****         input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 384:Source\FilteringFunctions/arm_correlate_q7.c **** 
 385:Source\FilteringFunctions/arm_correlate_q7.c ****         /* acc0 += x[2] * y[2] + x[3] * y[3]  */
 386:Source\FilteringFunctions/arm_correlate_q7.c ****         acc0 = __SMLAD(input1, input2, acc0);
 387:Source\FilteringFunctions/arm_correlate_q7.c **** 
 388:Source\FilteringFunctions/arm_correlate_q7.c ****         /* x[3] and x[4] are packed */
 389:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) x3;
 390:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) x0;
 391:Source\FilteringFunctions/arm_correlate_q7.c **** 
 392:Source\FilteringFunctions/arm_correlate_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 393:Source\FilteringFunctions/arm_correlate_q7.c **** 
 394:Source\FilteringFunctions/arm_correlate_q7.c ****         /* acc1 += x[3] * y[2] + x[4] * y[3]  */
 395:Source\FilteringFunctions/arm_correlate_q7.c ****         acc1 = __SMLAD(input1, input2, acc1);
 396:Source\FilteringFunctions/arm_correlate_q7.c **** 
 397:Source\FilteringFunctions/arm_correlate_q7.c ****         /* x[4] and x[5] are packed */
 398:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) x0;
 399:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) x1;
 400:Source\FilteringFunctions/arm_correlate_q7.c **** 
 401:Source\FilteringFunctions/arm_correlate_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 402:Source\FilteringFunctions/arm_correlate_q7.c **** 
 403:Source\FilteringFunctions/arm_correlate_q7.c ****         /* acc2 += x[4] * y[2] + x[5] * y[3]  */
 404:Source\FilteringFunctions/arm_correlate_q7.c ****         acc2 = __SMLAD(input1, input2, acc2);
 405:Source\FilteringFunctions/arm_correlate_q7.c **** 
 406:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Read x[6] sample */
 407:Source\FilteringFunctions/arm_correlate_q7.c ****         x2 = *px++;
 408:Source\FilteringFunctions/arm_correlate_q7.c **** 
 409:Source\FilteringFunctions/arm_correlate_q7.c ****         /* x[5] and x[6] are packed */
 410:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) x1;
 411:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) x2;
 412:Source\FilteringFunctions/arm_correlate_q7.c **** 
 413:Source\FilteringFunctions/arm_correlate_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 414:Source\FilteringFunctions/arm_correlate_q7.c **** 
 415:Source\FilteringFunctions/arm_correlate_q7.c ****         /* acc3 += x[5] * y[2] + x[6] * y[3]  */
 416:Source\FilteringFunctions/arm_correlate_q7.c ****         acc3 = __SMLAD(input1, input2, acc3);
 417:Source\FilteringFunctions/arm_correlate_q7.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 9


 418:Source\FilteringFunctions/arm_correlate_q7.c ****       } while (--k);
 419:Source\FilteringFunctions/arm_correlate_q7.c **** 
 420:Source\FilteringFunctions/arm_correlate_q7.c ****       /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
 421:Source\FilteringFunctions/arm_correlate_q7.c ****        ** No loop unrolling is used. */
 422:Source\FilteringFunctions/arm_correlate_q7.c ****       k = srcBLen % 0x4u;
 423:Source\FilteringFunctions/arm_correlate_q7.c **** 
 424:Source\FilteringFunctions/arm_correlate_q7.c ****       while (k > 0u)
 425:Source\FilteringFunctions/arm_correlate_q7.c ****       {
 426:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Read y[4] sample */
 427:Source\FilteringFunctions/arm_correlate_q7.c ****         c0 = *py++;
 428:Source\FilteringFunctions/arm_correlate_q7.c **** 
 429:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Read x[7] sample */
 430:Source\FilteringFunctions/arm_correlate_q7.c ****         x3 = *px++;
 431:Source\FilteringFunctions/arm_correlate_q7.c **** 
 432:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Perform the multiply-accumulates */
 433:Source\FilteringFunctions/arm_correlate_q7.c ****         /* acc0 +=  x[4] * y[4] */
 434:Source\FilteringFunctions/arm_correlate_q7.c ****         acc0 += ((q15_t) x0 * c0);
 435:Source\FilteringFunctions/arm_correlate_q7.c ****         /* acc1 +=  x[5] * y[4] */
 436:Source\FilteringFunctions/arm_correlate_q7.c ****         acc1 += ((q15_t) x1 * c0);
 437:Source\FilteringFunctions/arm_correlate_q7.c ****         /* acc2 +=  x[6] * y[4] */
 438:Source\FilteringFunctions/arm_correlate_q7.c ****         acc2 += ((q15_t) x2 * c0);
 439:Source\FilteringFunctions/arm_correlate_q7.c ****         /* acc3 +=  x[7] * y[4] */
 440:Source\FilteringFunctions/arm_correlate_q7.c ****         acc3 += ((q15_t) x3 * c0);
 441:Source\FilteringFunctions/arm_correlate_q7.c **** 
 442:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Reuse the present samples for the next MAC */
 443:Source\FilteringFunctions/arm_correlate_q7.c ****         x0 = x1;
 444:Source\FilteringFunctions/arm_correlate_q7.c ****         x1 = x2;
 445:Source\FilteringFunctions/arm_correlate_q7.c ****         x2 = x3;
 446:Source\FilteringFunctions/arm_correlate_q7.c **** 
 447:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Decrement the loop counter */
 448:Source\FilteringFunctions/arm_correlate_q7.c ****         k--;
 449:Source\FilteringFunctions/arm_correlate_q7.c ****       }
 450:Source\FilteringFunctions/arm_correlate_q7.c **** 
 451:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Store the result in the accumulator in the destination buffer. */
 452:Source\FilteringFunctions/arm_correlate_q7.c ****       *pOut = (q7_t) (__SSAT(acc0 >> 7, 8));
 453:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Destination pointer is updated according to the address modifier, inc */
 454:Source\FilteringFunctions/arm_correlate_q7.c ****       pOut += inc;
 455:Source\FilteringFunctions/arm_correlate_q7.c **** 
 456:Source\FilteringFunctions/arm_correlate_q7.c ****       *pOut = (q7_t) (__SSAT(acc1 >> 7, 8));
 457:Source\FilteringFunctions/arm_correlate_q7.c ****       pOut += inc;
 458:Source\FilteringFunctions/arm_correlate_q7.c **** 
 459:Source\FilteringFunctions/arm_correlate_q7.c ****       *pOut = (q7_t) (__SSAT(acc2 >> 7, 8));
 460:Source\FilteringFunctions/arm_correlate_q7.c ****       pOut += inc;
 461:Source\FilteringFunctions/arm_correlate_q7.c **** 
 462:Source\FilteringFunctions/arm_correlate_q7.c ****       *pOut = (q7_t) (__SSAT(acc3 >> 7, 8));
 463:Source\FilteringFunctions/arm_correlate_q7.c ****       pOut += inc;
 464:Source\FilteringFunctions/arm_correlate_q7.c **** 
 465:Source\FilteringFunctions/arm_correlate_q7.c **** 	  count += 4u;
 466:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 467:Source\FilteringFunctions/arm_correlate_q7.c ****       px = pIn1 + count;
 468:Source\FilteringFunctions/arm_correlate_q7.c ****       py = pIn2;
 469:Source\FilteringFunctions/arm_correlate_q7.c **** 
 470:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Decrement the loop counter */
 471:Source\FilteringFunctions/arm_correlate_q7.c ****       blkCnt--;
 472:Source\FilteringFunctions/arm_correlate_q7.c ****     }
 473:Source\FilteringFunctions/arm_correlate_q7.c **** 
 474:Source\FilteringFunctions/arm_correlate_q7.c ****     /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 10


 475:Source\FilteringFunctions/arm_correlate_q7.c ****      ** No loop unrolling is used. */
 476:Source\FilteringFunctions/arm_correlate_q7.c ****     blkCnt = blockSize2 % 0x4u;
 477:Source\FilteringFunctions/arm_correlate_q7.c **** 
 478:Source\FilteringFunctions/arm_correlate_q7.c ****     while (blkCnt > 0u)
 479:Source\FilteringFunctions/arm_correlate_q7.c ****     {
 480:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Accumulator is made zero for every iteration */
 481:Source\FilteringFunctions/arm_correlate_q7.c ****       sum = 0;
 482:Source\FilteringFunctions/arm_correlate_q7.c **** 
 483:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 484:Source\FilteringFunctions/arm_correlate_q7.c ****       k = srcBLen >> 2u;
 485:Source\FilteringFunctions/arm_correlate_q7.c **** 
 486:Source\FilteringFunctions/arm_correlate_q7.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 487:Source\FilteringFunctions/arm_correlate_q7.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 488:Source\FilteringFunctions/arm_correlate_q7.c ****       while (k > 0u)
 489:Source\FilteringFunctions/arm_correlate_q7.c ****       {
 490:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Reading two inputs of SrcA buffer and packing */
 491:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) * px++;
 492:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) * px++;
 493:Source\FilteringFunctions/arm_correlate_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 494:Source\FilteringFunctions/arm_correlate_q7.c **** 
 495:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Reading two inputs of SrcB buffer and packing */
 496:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) * py++;
 497:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) * py++;
 498:Source\FilteringFunctions/arm_correlate_q7.c ****         input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 499:Source\FilteringFunctions/arm_correlate_q7.c **** 
 500:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Perform the multiply-accumulates */
 501:Source\FilteringFunctions/arm_correlate_q7.c ****         sum = __SMLAD(input1, input2, sum);
 502:Source\FilteringFunctions/arm_correlate_q7.c **** 
 503:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Reading two inputs of SrcA buffer and packing */
 504:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) * px++;
 505:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) * px++;
 506:Source\FilteringFunctions/arm_correlate_q7.c ****         input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 507:Source\FilteringFunctions/arm_correlate_q7.c **** 
 508:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Reading two inputs of SrcB buffer and packing */
 509:Source\FilteringFunctions/arm_correlate_q7.c ****         in1 = (q15_t) * py++;
 510:Source\FilteringFunctions/arm_correlate_q7.c ****         in2 = (q15_t) * py++;
 511:Source\FilteringFunctions/arm_correlate_q7.c ****         input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 512:Source\FilteringFunctions/arm_correlate_q7.c **** 
 513:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Perform the multiply-accumulates */
 514:Source\FilteringFunctions/arm_correlate_q7.c ****         sum = __SMLAD(input1, input2, sum);
 515:Source\FilteringFunctions/arm_correlate_q7.c **** 
 516:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Decrement the loop counter */
 517:Source\FilteringFunctions/arm_correlate_q7.c ****         k--;
 518:Source\FilteringFunctions/arm_correlate_q7.c ****       }
 519:Source\FilteringFunctions/arm_correlate_q7.c **** 
 520:Source\FilteringFunctions/arm_correlate_q7.c ****       /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
 521:Source\FilteringFunctions/arm_correlate_q7.c ****        ** No loop unrolling is used. */
 522:Source\FilteringFunctions/arm_correlate_q7.c ****       k = srcBLen % 0x4u;
 523:Source\FilteringFunctions/arm_correlate_q7.c **** 
 524:Source\FilteringFunctions/arm_correlate_q7.c ****       while (k > 0u)
 525:Source\FilteringFunctions/arm_correlate_q7.c ****       {
 526:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Perform the multiply-accumulates */
 527:Source\FilteringFunctions/arm_correlate_q7.c ****         sum += ((q15_t) * px++ * *py++);
 528:Source\FilteringFunctions/arm_correlate_q7.c **** 
 529:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Decrement the loop counter */
 530:Source\FilteringFunctions/arm_correlate_q7.c ****         k--;
 531:Source\FilteringFunctions/arm_correlate_q7.c ****       }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 11


 532:Source\FilteringFunctions/arm_correlate_q7.c **** 
 533:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Store the result in the accumulator in the destination buffer. */
 534:Source\FilteringFunctions/arm_correlate_q7.c ****       *pOut = (q7_t) (__SSAT(sum >> 7, 8));
 535:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Destination pointer is updated according to the address modifier, inc */
 536:Source\FilteringFunctions/arm_correlate_q7.c ****       pOut += inc;
 537:Source\FilteringFunctions/arm_correlate_q7.c **** 
 538:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Increment the pointer pIn1 index, count by 1 */
 539:Source\FilteringFunctions/arm_correlate_q7.c **** 	  count++;
 540:Source\FilteringFunctions/arm_correlate_q7.c **** 
 541:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 542:Source\FilteringFunctions/arm_correlate_q7.c ****       px = pIn1 + count;
 543:Source\FilteringFunctions/arm_correlate_q7.c ****       py = pIn2;
 544:Source\FilteringFunctions/arm_correlate_q7.c **** 
 545:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Decrement the loop counter */
 546:Source\FilteringFunctions/arm_correlate_q7.c ****       blkCnt--;
 547:Source\FilteringFunctions/arm_correlate_q7.c ****     }
 548:Source\FilteringFunctions/arm_correlate_q7.c ****   }
 549:Source\FilteringFunctions/arm_correlate_q7.c ****   else
 550:Source\FilteringFunctions/arm_correlate_q7.c ****   {
 551:Source\FilteringFunctions/arm_correlate_q7.c ****     /* If the srcBLen is not a multiple of 4,
 552:Source\FilteringFunctions/arm_correlate_q7.c ****      * the blockSize2 loop cannot be unrolled by 4 */
 553:Source\FilteringFunctions/arm_correlate_q7.c ****     blkCnt = blockSize2;
 554:Source\FilteringFunctions/arm_correlate_q7.c **** 
 555:Source\FilteringFunctions/arm_correlate_q7.c ****     while (blkCnt > 0u)
 556:Source\FilteringFunctions/arm_correlate_q7.c ****     {
 557:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Accumulator is made zero for every iteration */
 558:Source\FilteringFunctions/arm_correlate_q7.c ****       sum = 0;
 559:Source\FilteringFunctions/arm_correlate_q7.c **** 
 560:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Loop over srcBLen */
 561:Source\FilteringFunctions/arm_correlate_q7.c ****       k = srcBLen;
 562:Source\FilteringFunctions/arm_correlate_q7.c **** 
 563:Source\FilteringFunctions/arm_correlate_q7.c ****       while (k > 0u)
 564:Source\FilteringFunctions/arm_correlate_q7.c ****       {
 565:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Perform the multiply-accumulate */
 566:Source\FilteringFunctions/arm_correlate_q7.c ****         sum += ((q15_t) * px++ * *py++);
 567:Source\FilteringFunctions/arm_correlate_q7.c **** 
 568:Source\FilteringFunctions/arm_correlate_q7.c ****         /* Decrement the loop counter */
 569:Source\FilteringFunctions/arm_correlate_q7.c ****         k--;
 570:Source\FilteringFunctions/arm_correlate_q7.c ****       }
 571:Source\FilteringFunctions/arm_correlate_q7.c **** 
 572:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Store the result in the accumulator in the destination buffer. */
 573:Source\FilteringFunctions/arm_correlate_q7.c ****       *pOut = (q7_t) (__SSAT(sum >> 7, 8));
 574:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Destination pointer is updated according to the address modifier, inc */
 575:Source\FilteringFunctions/arm_correlate_q7.c ****       pOut += inc;
 576:Source\FilteringFunctions/arm_correlate_q7.c **** 
 577:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Increment the MAC count */
 578:Source\FilteringFunctions/arm_correlate_q7.c ****       count++;
 579:Source\FilteringFunctions/arm_correlate_q7.c **** 
 580:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 581:Source\FilteringFunctions/arm_correlate_q7.c ****       px = pIn1 + count;
 582:Source\FilteringFunctions/arm_correlate_q7.c ****       py = pIn2;
 583:Source\FilteringFunctions/arm_correlate_q7.c **** 
 584:Source\FilteringFunctions/arm_correlate_q7.c **** 
 585:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Decrement the loop counter */
 586:Source\FilteringFunctions/arm_correlate_q7.c ****       blkCnt--;
 587:Source\FilteringFunctions/arm_correlate_q7.c ****     }
 588:Source\FilteringFunctions/arm_correlate_q7.c ****   }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 12


 589:Source\FilteringFunctions/arm_correlate_q7.c **** 
 590:Source\FilteringFunctions/arm_correlate_q7.c ****   /* --------------------------
 591:Source\FilteringFunctions/arm_correlate_q7.c ****    * Initializations of stage3
 592:Source\FilteringFunctions/arm_correlate_q7.c ****    * -------------------------*/
 593:Source\FilteringFunctions/arm_correlate_q7.c **** 
 594:Source\FilteringFunctions/arm_correlate_q7.c ****   /* sum += x[srcALen-srcBLen+1] * y[0] + x[srcALen-srcBLen+2] * y[1] +...+ x[srcALen-1] * y[srcBLe
 595:Source\FilteringFunctions/arm_correlate_q7.c ****    * sum += x[srcALen-srcBLen+2] * y[0] + x[srcALen-srcBLen+3] * y[1] +...+ x[srcALen-1] * y[srcBLe
 596:Source\FilteringFunctions/arm_correlate_q7.c ****    * ....
 597:Source\FilteringFunctions/arm_correlate_q7.c ****    * sum +=  x[srcALen-2] * y[0] + x[srcALen-1] * y[1]
 598:Source\FilteringFunctions/arm_correlate_q7.c ****    * sum +=  x[srcALen-1] * y[0]
 599:Source\FilteringFunctions/arm_correlate_q7.c ****    */
 600:Source\FilteringFunctions/arm_correlate_q7.c **** 
 601:Source\FilteringFunctions/arm_correlate_q7.c ****   /* In this stage the MAC operations are decreased by 1 for every iteration.
 602:Source\FilteringFunctions/arm_correlate_q7.c ****      The count variable holds the number of MAC operations performed */
 603:Source\FilteringFunctions/arm_correlate_q7.c ****   count = srcBLen - 1u;
 604:Source\FilteringFunctions/arm_correlate_q7.c **** 
 605:Source\FilteringFunctions/arm_correlate_q7.c ****   /* Working pointer of inputA */
 606:Source\FilteringFunctions/arm_correlate_q7.c ****   pSrc1 = pIn1 + (srcALen - (srcBLen - 1u));
 607:Source\FilteringFunctions/arm_correlate_q7.c ****   px = pSrc1;
 608:Source\FilteringFunctions/arm_correlate_q7.c **** 
 609:Source\FilteringFunctions/arm_correlate_q7.c ****   /* Working pointer of inputB */
 610:Source\FilteringFunctions/arm_correlate_q7.c ****   py = pIn2;
 611:Source\FilteringFunctions/arm_correlate_q7.c **** 
 612:Source\FilteringFunctions/arm_correlate_q7.c ****   /* -------------------
 613:Source\FilteringFunctions/arm_correlate_q7.c ****    * Stage3 process
 614:Source\FilteringFunctions/arm_correlate_q7.c ****    * ------------------*/
 615:Source\FilteringFunctions/arm_correlate_q7.c **** 
 616:Source\FilteringFunctions/arm_correlate_q7.c ****   while (blockSize3 > 0u)
 617:Source\FilteringFunctions/arm_correlate_q7.c ****   {
 618:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Accumulator is made zero for every iteration */
 619:Source\FilteringFunctions/arm_correlate_q7.c ****     sum = 0;
 620:Source\FilteringFunctions/arm_correlate_q7.c **** 
 621:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Apply loop unrolling and compute 4 MACs simultaneously. */
 622:Source\FilteringFunctions/arm_correlate_q7.c ****     k = count >> 2u;
 623:Source\FilteringFunctions/arm_correlate_q7.c **** 
 624:Source\FilteringFunctions/arm_correlate_q7.c ****     /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 625:Source\FilteringFunctions/arm_correlate_q7.c ****      ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 626:Source\FilteringFunctions/arm_correlate_q7.c ****     while (k > 0u)
 627:Source\FilteringFunctions/arm_correlate_q7.c ****     {
 628:Source\FilteringFunctions/arm_correlate_q7.c ****       /* x[srcALen - srcBLen + 1] , x[srcALen - srcBLen + 2]  */
 629:Source\FilteringFunctions/arm_correlate_q7.c ****       in1 = (q15_t) * px++;
 630:Source\FilteringFunctions/arm_correlate_q7.c ****       in2 = (q15_t) * px++;
 631:Source\FilteringFunctions/arm_correlate_q7.c ****       input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 632:Source\FilteringFunctions/arm_correlate_q7.c **** 
 633:Source\FilteringFunctions/arm_correlate_q7.c ****       /* y[0] , y[1] */
 634:Source\FilteringFunctions/arm_correlate_q7.c ****       in1 = (q15_t) * py++;
 635:Source\FilteringFunctions/arm_correlate_q7.c ****       in2 = (q15_t) * py++;
 636:Source\FilteringFunctions/arm_correlate_q7.c ****       input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 637:Source\FilteringFunctions/arm_correlate_q7.c **** 
 638:Source\FilteringFunctions/arm_correlate_q7.c ****       /* sum += x[srcALen - srcBLen + 1] * y[0] */
 639:Source\FilteringFunctions/arm_correlate_q7.c ****       /* sum += x[srcALen - srcBLen + 2] * y[1] */
 640:Source\FilteringFunctions/arm_correlate_q7.c ****       sum = __SMLAD(input1, input2, sum);
 641:Source\FilteringFunctions/arm_correlate_q7.c **** 
 642:Source\FilteringFunctions/arm_correlate_q7.c ****       /* x[srcALen - srcBLen + 3] , x[srcALen - srcBLen + 4] */
 643:Source\FilteringFunctions/arm_correlate_q7.c ****       in1 = (q15_t) * px++;
 644:Source\FilteringFunctions/arm_correlate_q7.c ****       in2 = (q15_t) * px++;
 645:Source\FilteringFunctions/arm_correlate_q7.c ****       input1 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 13


 646:Source\FilteringFunctions/arm_correlate_q7.c **** 
 647:Source\FilteringFunctions/arm_correlate_q7.c ****       /* y[2] , y[3] */
 648:Source\FilteringFunctions/arm_correlate_q7.c ****       in1 = (q15_t) * py++;
 649:Source\FilteringFunctions/arm_correlate_q7.c ****       in2 = (q15_t) * py++;
 650:Source\FilteringFunctions/arm_correlate_q7.c ****       input2 = ((q31_t) in1 & 0x0000FFFF) | ((q31_t) in2 << 16);
 651:Source\FilteringFunctions/arm_correlate_q7.c **** 
 652:Source\FilteringFunctions/arm_correlate_q7.c ****       /* sum += x[srcALen - srcBLen + 3] * y[2] */
 653:Source\FilteringFunctions/arm_correlate_q7.c ****       /* sum += x[srcALen - srcBLen + 4] * y[3] */
 654:Source\FilteringFunctions/arm_correlate_q7.c ****       sum = __SMLAD(input1, input2, sum);
 655:Source\FilteringFunctions/arm_correlate_q7.c **** 
 656:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Decrement the loop counter */
 657:Source\FilteringFunctions/arm_correlate_q7.c ****       k--;
 658:Source\FilteringFunctions/arm_correlate_q7.c ****     }
 659:Source\FilteringFunctions/arm_correlate_q7.c **** 
 660:Source\FilteringFunctions/arm_correlate_q7.c ****     /* If the count is not a multiple of 4, compute any remaining MACs here.
 661:Source\FilteringFunctions/arm_correlate_q7.c ****      ** No loop unrolling is used. */
 662:Source\FilteringFunctions/arm_correlate_q7.c ****     k = count % 0x4u;
 663:Source\FilteringFunctions/arm_correlate_q7.c **** 
 664:Source\FilteringFunctions/arm_correlate_q7.c ****     while (k > 0u)
 665:Source\FilteringFunctions/arm_correlate_q7.c ****     {
 666:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Perform the multiply-accumulates */
 667:Source\FilteringFunctions/arm_correlate_q7.c ****       sum += ((q15_t) * px++ * *py++);
 668:Source\FilteringFunctions/arm_correlate_q7.c **** 
 669:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Decrement the loop counter */
 670:Source\FilteringFunctions/arm_correlate_q7.c ****       k--;
 671:Source\FilteringFunctions/arm_correlate_q7.c ****     }
 672:Source\FilteringFunctions/arm_correlate_q7.c **** 
 673:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Store the result in the accumulator in the destination buffer. */
 674:Source\FilteringFunctions/arm_correlate_q7.c ****     *pOut = (q7_t) (__SSAT(sum >> 7, 8));
 675:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Destination pointer is updated according to the address modifier, inc */
 676:Source\FilteringFunctions/arm_correlate_q7.c ****     pOut += inc;
 677:Source\FilteringFunctions/arm_correlate_q7.c **** 
 678:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Update the inputA and inputB pointers for next MAC calculation */
 679:Source\FilteringFunctions/arm_correlate_q7.c ****     px = ++pSrc1;
 680:Source\FilteringFunctions/arm_correlate_q7.c ****     py = pIn2;
 681:Source\FilteringFunctions/arm_correlate_q7.c **** 
 682:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Decrement the MAC count */
 683:Source\FilteringFunctions/arm_correlate_q7.c ****     count--;
 684:Source\FilteringFunctions/arm_correlate_q7.c **** 
 685:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Decrement the loop counter */
 686:Source\FilteringFunctions/arm_correlate_q7.c ****     blockSize3--;
 687:Source\FilteringFunctions/arm_correlate_q7.c ****   }
 688:Source\FilteringFunctions/arm_correlate_q7.c **** 
 689:Source\FilteringFunctions/arm_correlate_q7.c **** #else
 690:Source\FilteringFunctions/arm_correlate_q7.c **** 
 691:Source\FilteringFunctions/arm_correlate_q7.c **** /* Run the below code for Cortex-M0 */
 692:Source\FilteringFunctions/arm_correlate_q7.c **** 
 693:Source\FilteringFunctions/arm_correlate_q7.c ****   q7_t *pIn1 = pSrcA;                            /* inputA pointer */
  40              		.loc 1 693 0
  41 000e FB68     		ldr	r3, [r7, #12]
  42 0010 7B65     		str	r3, [r7, #84]
 694:Source\FilteringFunctions/arm_correlate_q7.c ****   q7_t *pIn2 = pSrcB + (srcBLen - 1u);           /* inputB pointer */
  43              		.loc 1 694 0
  44 0012 3B68     		ldr	r3, [r7]
  45 0014 013B     		sub	r3, r3, #1
  46 0016 7A68     		ldr	r2, [r7, #4]
  47 0018 D318     		add	r3, r2, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 14


  48 001a 3B65     		str	r3, [r7, #80]
 695:Source\FilteringFunctions/arm_correlate_q7.c ****   q31_t sum;                                     /* Accumulator */
 696:Source\FilteringFunctions/arm_correlate_q7.c ****   uint32_t i = 0u, j;                            /* loop counters */
  49              		.loc 1 696 0
  50 001c 0023     		mov	r3, #0
  51 001e BB64     		str	r3, [r7, #72]
 697:Source\FilteringFunctions/arm_correlate_q7.c ****   uint32_t inv = 0u;                             /* Reverse order flag */
  52              		.loc 1 697 0
  53 0020 0023     		mov	r3, #0
  54 0022 3B64     		str	r3, [r7, #64]
 698:Source\FilteringFunctions/arm_correlate_q7.c ****   uint32_t tot = 0u;                             /* Length */
  55              		.loc 1 698 0
  56 0024 0023     		mov	r3, #0
  57 0026 FB63     		str	r3, [r7, #60]
 699:Source\FilteringFunctions/arm_correlate_q7.c **** 
 700:Source\FilteringFunctions/arm_correlate_q7.c ****   /* The algorithm implementation is based on the lengths of the inputs. */
 701:Source\FilteringFunctions/arm_correlate_q7.c ****   /* srcB is always made to slide across srcA. */
 702:Source\FilteringFunctions/arm_correlate_q7.c ****   /* So srcBLen is always considered as shorter or equal to srcALen */
 703:Source\FilteringFunctions/arm_correlate_q7.c ****   /* But CORR(x, y) is reverse of CORR(y, x) */
 704:Source\FilteringFunctions/arm_correlate_q7.c ****   /* So, when srcBLen > srcALen, output pointer is made to point to the end of the output buffer */
 705:Source\FilteringFunctions/arm_correlate_q7.c ****   /* and a varaible, inv is set to 1 */
 706:Source\FilteringFunctions/arm_correlate_q7.c ****   /* If lengths are not equal then zero pad has to be done to  make the two
 707:Source\FilteringFunctions/arm_correlate_q7.c ****    * inputs of same length. But to improve the performance, we include zeroes
 708:Source\FilteringFunctions/arm_correlate_q7.c ****    * in the output instead of zero padding either of the the inputs*/
 709:Source\FilteringFunctions/arm_correlate_q7.c ****   /* If srcALen > srcBLen, (srcALen - srcBLen) zeroes has to included in the
 710:Source\FilteringFunctions/arm_correlate_q7.c ****    * starting of the output buffer */
 711:Source\FilteringFunctions/arm_correlate_q7.c ****   /* If srcALen < srcBLen, (srcALen - srcBLen) zeroes has to included in the
 712:Source\FilteringFunctions/arm_correlate_q7.c ****    * ending of the output buffer */
 713:Source\FilteringFunctions/arm_correlate_q7.c ****   /* Once the zero padding is done the remaining of the output is calcualted
 714:Source\FilteringFunctions/arm_correlate_q7.c ****    * using convolution but with the shorter signal time shifted. */
 715:Source\FilteringFunctions/arm_correlate_q7.c **** 
 716:Source\FilteringFunctions/arm_correlate_q7.c ****   /* Calculate the length of the remaining sequence */
 717:Source\FilteringFunctions/arm_correlate_q7.c ****   tot = ((srcALen + srcBLen) - 2u);
  58              		.loc 1 717 0
  59 0028 BA68     		ldr	r2, [r7, #8]
  60 002a 3B68     		ldr	r3, [r7]
  61 002c D318     		add	r3, r2, r3
  62 002e 023B     		sub	r3, r3, #2
  63 0030 FB63     		str	r3, [r7, #60]
 718:Source\FilteringFunctions/arm_correlate_q7.c **** 
 719:Source\FilteringFunctions/arm_correlate_q7.c ****   if (srcALen > srcBLen)
  64              		.loc 1 719 0
  65 0032 BA68     		ldr	r2, [r7, #8]
  66 0034 3B68     		ldr	r3, [r7]
  67 0036 9A42     		cmp	r2, r3
  68 0038 08D9     		bls	.L2
 720:Source\FilteringFunctions/arm_correlate_q7.c ****   {
 721:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Calculating the number of zeros to be padded to the output */
 722:Source\FilteringFunctions/arm_correlate_q7.c ****     j = srcALen - srcBLen;
  69              		.loc 1 722 0
  70 003a BA68     		ldr	r2, [r7, #8]
  71 003c 3B68     		ldr	r3, [r7]
  72 003e D31A     		sub	r3, r2, r3
  73 0040 7B64     		str	r3, [r7, #68]
 723:Source\FilteringFunctions/arm_correlate_q7.c **** 
 724:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Initialise the pointer after zero padding */
 725:Source\FilteringFunctions/arm_correlate_q7.c ****     pDst += j;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 15


  74              		.loc 1 725 0
  75 0042 3A6E     		ldr	r2, [r7, #96]
  76 0044 7B6C     		ldr	r3, [r7, #68]
  77 0046 D318     		add	r3, r2, r3
  78 0048 3B66     		str	r3, [r7, #96]
  79 004a 16E0     		b	.L3
  80              	.L2:
 726:Source\FilteringFunctions/arm_correlate_q7.c ****   }
 727:Source\FilteringFunctions/arm_correlate_q7.c **** 
 728:Source\FilteringFunctions/arm_correlate_q7.c ****   else if (srcALen < srcBLen)
  81              		.loc 1 728 0
  82 004c BA68     		ldr	r2, [r7, #8]
  83 004e 3B68     		ldr	r3, [r7]
  84 0050 9A42     		cmp	r2, r3
  85 0052 12D2     		bcs	.L3
 729:Source\FilteringFunctions/arm_correlate_q7.c ****   {
 730:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Initialization to inputB pointer */
 731:Source\FilteringFunctions/arm_correlate_q7.c ****     pIn1 = pSrcB;
  86              		.loc 1 731 0
  87 0054 7B68     		ldr	r3, [r7, #4]
  88 0056 7B65     		str	r3, [r7, #84]
 732:Source\FilteringFunctions/arm_correlate_q7.c **** 
 733:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Initialization to the end of inputA pointer */
 734:Source\FilteringFunctions/arm_correlate_q7.c ****     pIn2 = pSrcA + (srcALen - 1u);
  89              		.loc 1 734 0
  90 0058 BB68     		ldr	r3, [r7, #8]
  91 005a 013B     		sub	r3, r3, #1
  92 005c FA68     		ldr	r2, [r7, #12]
  93 005e D318     		add	r3, r2, r3
  94 0060 3B65     		str	r3, [r7, #80]
 735:Source\FilteringFunctions/arm_correlate_q7.c **** 
 736:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Initialisation of the pointer after zero padding */
 737:Source\FilteringFunctions/arm_correlate_q7.c ****     pDst = pDst + tot;
  95              		.loc 1 737 0
  96 0062 3A6E     		ldr	r2, [r7, #96]
  97 0064 FB6B     		ldr	r3, [r7, #60]
  98 0066 D318     		add	r3, r2, r3
  99 0068 3B66     		str	r3, [r7, #96]
 738:Source\FilteringFunctions/arm_correlate_q7.c **** 
 739:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Swapping the lengths */
 740:Source\FilteringFunctions/arm_correlate_q7.c ****     j = srcALen;
 100              		.loc 1 740 0
 101 006a BB68     		ldr	r3, [r7, #8]
 102 006c 7B64     		str	r3, [r7, #68]
 741:Source\FilteringFunctions/arm_correlate_q7.c ****     srcALen = srcBLen;
 103              		.loc 1 741 0
 104 006e 3B68     		ldr	r3, [r7]
 105 0070 BB60     		str	r3, [r7, #8]
 742:Source\FilteringFunctions/arm_correlate_q7.c ****     srcBLen = j;
 106              		.loc 1 742 0
 107 0072 7B6C     		ldr	r3, [r7, #68]
 108 0074 3B60     		str	r3, [r7]
 743:Source\FilteringFunctions/arm_correlate_q7.c **** 
 744:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Setting the reverse flag */
 745:Source\FilteringFunctions/arm_correlate_q7.c ****     inv = 1;
 109              		.loc 1 745 0
 110 0076 0123     		mov	r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 16


 111 0078 3B64     		str	r3, [r7, #64]
 112              	.L3:
 746:Source\FilteringFunctions/arm_correlate_q7.c **** 
 747:Source\FilteringFunctions/arm_correlate_q7.c ****   }
 748:Source\FilteringFunctions/arm_correlate_q7.c **** 
 749:Source\FilteringFunctions/arm_correlate_q7.c ****   /* Loop to calculate convolution for output length number of times */
 750:Source\FilteringFunctions/arm_correlate_q7.c ****   for (i = 0u; i <= tot; i++)
 113              		.loc 1 750 0
 114 007a 0023     		mov	r3, #0
 115 007c BB64     		str	r3, [r7, #72]
 116 007e 92E0     		b	.L4
 117              	.L22:
 751:Source\FilteringFunctions/arm_correlate_q7.c ****   {
 752:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Initialize sum with zero to carry on MAC operations */
 753:Source\FilteringFunctions/arm_correlate_q7.c ****     sum = 0;
 118              		.loc 1 753 0
 119 0080 0023     		mov	r3, #0
 120 0082 FB64     		str	r3, [r7, #76]
 754:Source\FilteringFunctions/arm_correlate_q7.c **** 
 755:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Loop to perform MAC operations according to convolution equation */
 756:Source\FilteringFunctions/arm_correlate_q7.c ****     for (j = 0u; j <= i; j++)
 121              		.loc 1 756 0
 122 0084 0023     		mov	r3, #0
 123 0086 7B64     		str	r3, [r7, #68]
 124 0088 1CE0     		b	.L5
 125              	.L7:
 757:Source\FilteringFunctions/arm_correlate_q7.c ****     {
 758:Source\FilteringFunctions/arm_correlate_q7.c ****       /* Check the array limitations */
 759:Source\FilteringFunctions/arm_correlate_q7.c ****       if ((((i - j) < srcBLen) && (j < srcALen)))
 126              		.loc 1 759 0
 127 008a BA6C     		ldr	r2, [r7, #72]
 128 008c 7B6C     		ldr	r3, [r7, #68]
 129 008e D21A     		sub	r2, r2, r3
 130 0090 3B68     		ldr	r3, [r7]
 131 0092 9A42     		cmp	r2, r3
 132 0094 13D2     		bcs	.L6
 133              		.loc 1 759 0 is_stmt 0 discriminator 1
 134 0096 7A6C     		ldr	r2, [r7, #68]
 135 0098 BB68     		ldr	r3, [r7, #8]
 136 009a 9A42     		cmp	r2, r3
 137 009c 0FD2     		bcs	.L6
 760:Source\FilteringFunctions/arm_correlate_q7.c ****       {
 761:Source\FilteringFunctions/arm_correlate_q7.c ****         /* z[i] += x[i-j] * y[j] */
 762:Source\FilteringFunctions/arm_correlate_q7.c ****         sum += ((q15_t) pIn1[j] * pIn2[-((int32_t) i - j)]);
 138              		.loc 1 762 0 is_stmt 1
 139 009e 7A6D     		ldr	r2, [r7, #84]
 140 00a0 7B6C     		ldr	r3, [r7, #68]
 141 00a2 D318     		add	r3, r2, r3
 142 00a4 1B78     		ldrb	r3, [r3]
 143 00a6 5BB2     		sxtb	r3, r3
 144 00a8 796C     		ldr	r1, [r7, #68]
 145 00aa BA6C     		ldr	r2, [r7, #72]
 146 00ac 8A1A     		sub	r2, r1, r2
 147 00ae 396D     		ldr	r1, [r7, #80]
 148 00b0 8A18     		add	r2, r1, r2
 149 00b2 1278     		ldrb	r2, [r2]
 150 00b4 52B2     		sxtb	r2, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 17


 151 00b6 5343     		mul	r3, r2
 152 00b8 FA6C     		ldr	r2, [r7, #76]
 153 00ba D318     		add	r3, r2, r3
 154 00bc FB64     		str	r3, [r7, #76]
 155              	.L6:
 756:Source\FilteringFunctions/arm_correlate_q7.c ****     {
 156              		.loc 1 756 0 discriminator 2
 157 00be 7B6C     		ldr	r3, [r7, #68]
 158 00c0 0133     		add	r3, r3, #1
 159 00c2 7B64     		str	r3, [r7, #68]
 160              	.L5:
 756:Source\FilteringFunctions/arm_correlate_q7.c ****     {
 161              		.loc 1 756 0 is_stmt 0 discriminator 1
 162 00c4 7A6C     		ldr	r2, [r7, #68]
 163 00c6 BB6C     		ldr	r3, [r7, #72]
 164 00c8 9A42     		cmp	r2, r3
 165 00ca DED9     		bls	.L7
 763:Source\FilteringFunctions/arm_correlate_q7.c ****       }
 764:Source\FilteringFunctions/arm_correlate_q7.c ****     }
 765:Source\FilteringFunctions/arm_correlate_q7.c ****     /* Store the output in the destination buffer */
 766:Source\FilteringFunctions/arm_correlate_q7.c ****     if (inv == 1)
 166              		.loc 1 766 0 is_stmt 1
 167 00cc 3B6C     		ldr	r3, [r7, #64]
 168 00ce 012B     		cmp	r3, #1
 169 00d0 33D1     		bne	.L8
 767:Source\FilteringFunctions/arm_correlate_q7.c ****       *pDst-- = (q7_t) __SSAT((sum >> 7u), 8u);
 170              		.loc 1 767 0
 171 00d2 3B6E     		ldr	r3, [r7, #96]
 172 00d4 5A1E     		sub	r2, r3, #1
 173 00d6 3A66     		str	r2, [r7, #96]
 174 00d8 FA6C     		ldr	r2, [r7, #76]
 175 00da D211     		asr	r2, r2, #7
 176 00dc BA63     		str	r2, [r7, #56]
 177 00de 0822     		mov	r2, #8
 178 00e0 7A63     		str	r2, [r7, #52]
 179              	.LBB6:
 180              	.LBB7:
 181              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 18


  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 19


  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 20


 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 21


 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 22


 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 23


 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 24


 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 25


 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 26


 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 27


 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 28


 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 29


 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
 182              		.loc 2 699 0
 183 00e2 0122     		mov	r2, #1
 184 00e4 3A63     		str	r2, [r7, #48]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 30


 185              		.loc 2 700 0
 186 00e6 0022     		mov	r2, #0
 187 00e8 FA62     		str	r2, [r7, #44]
 188 00ea 05E0     		b	.L9
 189              	.L10:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 190              		.loc 2 702 0
 191 00ec 3A6B     		ldr	r2, [r7, #48]
 192 00ee 5200     		lsl	r2, r2, #1
 193 00f0 3A63     		str	r2, [r7, #48]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 194              		.loc 2 700 0
 195 00f2 FA6A     		ldr	r2, [r7, #44]
 196 00f4 0132     		add	r2, r2, #1
 197 00f6 FA62     		str	r2, [r7, #44]
 198              	.L9:
 199 00f8 7A6B     		ldr	r2, [r7, #52]
 200 00fa 013A     		sub	r2, r2, #1
 201 00fc F96A     		ldr	r1, [r7, #44]
 202 00fe 9142     		cmp	r1, r2
 203 0100 F4D3     		bcc	.L10
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 204              		.loc 2 705 0
 205 0102 BA6B     		ldr	r2, [r7, #56]
 206 0104 002A     		cmp	r2, #0
 207 0106 09DD     		ble	.L11
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 208              		.loc 2 707 0
 209 0108 3A6B     		ldr	r2, [r7, #48]
 210 010a 013A     		sub	r2, r2, #1
 211 010c 3A63     		str	r2, [r7, #48]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 212              		.loc 2 709 0
 213 010e B96B     		ldr	r1, [r7, #56]
 214 0110 3A6B     		ldr	r2, [r7, #48]
 215 0112 9142     		cmp	r1, r2
 216 0114 0CDD     		ble	.L23
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 217              		.loc 2 711 0
 218 0116 3A6B     		ldr	r2, [r7, #48]
 219 0118 BA63     		str	r2, [r7, #56]
 220 011a 0AE0     		b	.L13
 221              	.L11:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 222              		.loc 2 716 0
 223 011c 3A6B     		ldr	r2, [r7, #48]
 224 011e 5242     		neg	r2, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 31


 225 0120 BA62     		str	r2, [r7, #40]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 226              		.loc 2 718 0
 227 0122 B96B     		ldr	r1, [r7, #56]
 228 0124 BA6A     		ldr	r2, [r7, #40]
 229 0126 9142     		cmp	r1, r2
 230 0128 03DA     		bge	.L13
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 231              		.loc 2 720 0
 232 012a BA6A     		ldr	r2, [r7, #40]
 233 012c BA63     		str	r2, [r7, #56]
 234 012e 00E0     		b	.L13
 235              	.L23:
 711:.\Include/arm_math.h ****       }
 236              		.loc 2 711 0
 237 0130 C046     		mov	r8, r8
 238              	.L13:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 239              		.loc 2 723 0
 240 0132 BA6B     		ldr	r2, [r7, #56]
 241              	.LBE7:
 242              	.LBE6:
 243              		.loc 1 767 0
 244 0134 D2B2     		uxtb	r2, r2
 245 0136 1A70     		strb	r2, [r3]
 246 0138 32E0     		b	.L15
 247              	.L8:
 768:Source\FilteringFunctions/arm_correlate_q7.c ****     else
 769:Source\FilteringFunctions/arm_correlate_q7.c ****       *pDst++ = (q7_t) __SSAT((sum >> 7u), 8u);
 248              		.loc 1 769 0
 249 013a 3B6E     		ldr	r3, [r7, #96]
 250 013c 5A1C     		add	r2, r3, #1
 251 013e 3A66     		str	r2, [r7, #96]
 252 0140 FA6C     		ldr	r2, [r7, #76]
 253 0142 D211     		asr	r2, r2, #7
 254 0144 7A62     		str	r2, [r7, #36]
 255 0146 0822     		mov	r2, #8
 256 0148 3A62     		str	r2, [r7, #32]
 257              	.LBB8:
 258              	.LBB9:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 259              		.loc 2 699 0
 260 014a 0122     		mov	r2, #1
 261 014c FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     {
 262              		.loc 2 700 0
 263 014e 0022     		mov	r2, #0
 264 0150 BA61     		str	r2, [r7, #24]
 265 0152 05E0     		b	.L16
 266              	.L17:
 702:.\Include/arm_math.h ****     }
 267              		.loc 2 702 0
 268 0154 FA69     		ldr	r2, [r7, #28]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 32


 269 0156 5200     		lsl	r2, r2, #1
 270 0158 FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     {
 271              		.loc 2 700 0
 272 015a BA69     		ldr	r2, [r7, #24]
 273 015c 0132     		add	r2, r2, #1
 274 015e BA61     		str	r2, [r7, #24]
 275              	.L16:
 276 0160 3A6A     		ldr	r2, [r7, #32]
 277 0162 013A     		sub	r2, r2, #1
 278 0164 B969     		ldr	r1, [r7, #24]
 279 0166 9142     		cmp	r1, r2
 280 0168 F4D3     		bcc	.L17
 705:.\Include/arm_math.h ****     {
 281              		.loc 2 705 0
 282 016a 7A6A     		ldr	r2, [r7, #36]
 283 016c 002A     		cmp	r2, #0
 284 016e 09DD     		ble	.L18
 707:.\Include/arm_math.h **** 
 285              		.loc 2 707 0
 286 0170 FA69     		ldr	r2, [r7, #28]
 287 0172 013A     		sub	r2, r2, #1
 288 0174 FA61     		str	r2, [r7, #28]
 709:.\Include/arm_math.h ****       {
 289              		.loc 2 709 0
 290 0176 796A     		ldr	r1, [r7, #36]
 291 0178 FA69     		ldr	r2, [r7, #28]
 292 017a 9142     		cmp	r1, r2
 293 017c 0CDD     		ble	.L24
 711:.\Include/arm_math.h ****       }
 294              		.loc 2 711 0
 295 017e FA69     		ldr	r2, [r7, #28]
 296 0180 7A62     		str	r2, [r7, #36]
 297 0182 0AE0     		b	.L20
 298              	.L18:
 716:.\Include/arm_math.h **** 
 299              		.loc 2 716 0
 300 0184 FA69     		ldr	r2, [r7, #28]
 301 0186 5242     		neg	r2, r2
 302 0188 7A61     		str	r2, [r7, #20]
 718:.\Include/arm_math.h ****       {
 303              		.loc 2 718 0
 304 018a 796A     		ldr	r1, [r7, #36]
 305 018c 7A69     		ldr	r2, [r7, #20]
 306 018e 9142     		cmp	r1, r2
 307 0190 03DA     		bge	.L20
 720:.\Include/arm_math.h ****       }
 308              		.loc 2 720 0
 309 0192 7A69     		ldr	r2, [r7, #20]
 310 0194 7A62     		str	r2, [r7, #36]
 311 0196 00E0     		b	.L20
 312              	.L24:
 711:.\Include/arm_math.h ****       }
 313              		.loc 2 711 0
 314 0198 C046     		mov	r8, r8
 315              	.L20:
 316              		.loc 2 723 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 33


 317 019a 7A6A     		ldr	r2, [r7, #36]
 318              	.LBE9:
 319              	.LBE8:
 320              		.loc 1 769 0
 321 019c D2B2     		uxtb	r2, r2
 322 019e 1A70     		strb	r2, [r3]
 323              	.L15:
 750:Source\FilteringFunctions/arm_correlate_q7.c ****   {
 324              		.loc 1 750 0 discriminator 2
 325 01a0 BB6C     		ldr	r3, [r7, #72]
 326 01a2 0133     		add	r3, r3, #1
 327 01a4 BB64     		str	r3, [r7, #72]
 328              	.L4:
 750:Source\FilteringFunctions/arm_correlate_q7.c ****   {
 329              		.loc 1 750 0 is_stmt 0 discriminator 1
 330 01a6 BA6C     		ldr	r2, [r7, #72]
 331 01a8 FB6B     		ldr	r3, [r7, #60]
 332 01aa 9A42     		cmp	r2, r3
 333 01ac 00D8     		bhi	.LCB279
 334 01ae 67E7     		b	.L22	@long jump
 335              	.LCB279:
 770:Source\FilteringFunctions/arm_correlate_q7.c ****   }
 771:Source\FilteringFunctions/arm_correlate_q7.c **** 
 772:Source\FilteringFunctions/arm_correlate_q7.c **** #endif /*   #if defined (ARM_MATH_DSP) */
 773:Source\FilteringFunctions/arm_correlate_q7.c **** 
 774:Source\FilteringFunctions/arm_correlate_q7.c **** }
 336              		.loc 1 774 0 is_stmt 1
 337 01b0 BD46     		mov	sp, r7
 338 01b2 16B0     		add	sp, sp, #88
 339              		@ sp needed
 340 01b4 80BD     		pop	{r7, pc}
 341              		.cfi_endproc
 342              	.LFE82:
 343              		.size	arm_correlate_q7, .-arm_correlate_q7
 344 01b6 C046     		.text
 345              	.Letext0:
 346              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 347              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 348              		.section	.debug_info,"",%progbits
 349              	.Ldebug_info0:
 350 0000 A3020000 		.4byte	0x2a3
 351 0004 0400     		.2byte	0x4
 352 0006 00000000 		.4byte	.Ldebug_abbrev0
 353 000a 04       		.byte	0x4
 354 000b 01       		.uleb128 0x1
 355 000c 2F010000 		.4byte	.LASF34
 356 0010 01       		.byte	0x1
 357 0011 EB000000 		.4byte	.LASF35
 358 0015 29000000 		.4byte	.LASF36
 359 0019 00000000 		.4byte	.Ldebug_ranges0+0
 360 001d 00000000 		.4byte	0
 361 0021 00000000 		.4byte	.Ldebug_line0
 362 0025 02       		.uleb128 0x2
 363 0026 00000000 		.4byte	.LASF2
 364 002a 03       		.byte	0x3
 365 002b 1B       		.byte	0x1b
 366 002c 30000000 		.4byte	0x30
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 34


 367 0030 03       		.uleb128 0x3
 368 0031 01       		.byte	0x1
 369 0032 06       		.byte	0x6
 370 0033 2B020000 		.4byte	.LASF0
 371 0037 03       		.uleb128 0x3
 372 0038 01       		.byte	0x1
 373 0039 08       		.byte	0x8
 374 003a 88000000 		.4byte	.LASF1
 375 003e 02       		.uleb128 0x2
 376 003f 09000000 		.4byte	.LASF3
 377 0043 03       		.byte	0x3
 378 0044 29       		.byte	0x29
 379 0045 49000000 		.4byte	0x49
 380 0049 03       		.uleb128 0x3
 381 004a 02       		.byte	0x2
 382 004b 05       		.byte	0x5
 383 004c FC010000 		.4byte	.LASF4
 384 0050 03       		.uleb128 0x3
 385 0051 02       		.byte	0x2
 386 0052 07       		.byte	0x7
 387 0053 A8000000 		.4byte	.LASF5
 388 0057 02       		.uleb128 0x2
 389 0058 1F000000 		.4byte	.LASF6
 390 005c 03       		.byte	0x3
 391 005d 3F       		.byte	0x3f
 392 005e 62000000 		.4byte	0x62
 393 0062 03       		.uleb128 0x3
 394 0063 04       		.byte	0x4
 395 0064 05       		.byte	0x5
 396 0065 16020000 		.4byte	.LASF7
 397 0069 02       		.uleb128 0x2
 398 006a CE000000 		.4byte	.LASF8
 399 006e 03       		.byte	0x3
 400 006f 41       		.byte	0x41
 401 0070 74000000 		.4byte	0x74
 402 0074 03       		.uleb128 0x3
 403 0075 04       		.byte	0x4
 404 0076 07       		.byte	0x7
 405 0077 96000000 		.4byte	.LASF9
 406 007b 03       		.uleb128 0x3
 407 007c 08       		.byte	0x8
 408 007d 05       		.byte	0x5
 409 007e E1010000 		.4byte	.LASF10
 410 0082 03       		.uleb128 0x3
 411 0083 08       		.byte	0x8
 412 0084 07       		.byte	0x7
 413 0085 18010000 		.4byte	.LASF11
 414 0089 04       		.uleb128 0x4
 415 008a 04       		.byte	0x4
 416 008b 05       		.byte	0x5
 417 008c 696E7400 		.ascii	"int\000"
 418 0090 03       		.uleb128 0x3
 419 0091 04       		.byte	0x4
 420 0092 07       		.byte	0x7
 421 0093 DE000000 		.4byte	.LASF12
 422 0097 02       		.uleb128 0x2
 423 0098 6F000000 		.4byte	.LASF13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 35


 424 009c 04       		.byte	0x4
 425 009d 14       		.byte	0x14
 426 009e 25000000 		.4byte	0x25
 427 00a2 02       		.uleb128 0x2
 428 00a3 C1010000 		.4byte	.LASF14
 429 00a7 04       		.byte	0x4
 430 00a8 20       		.byte	0x20
 431 00a9 3E000000 		.4byte	0x3e
 432 00ad 02       		.uleb128 0x2
 433 00ae D0010000 		.4byte	.LASF15
 434 00b2 04       		.byte	0x4
 435 00b3 2C       		.byte	0x2c
 436 00b4 57000000 		.4byte	0x57
 437 00b8 02       		.uleb128 0x2
 438 00b9 0D020000 		.4byte	.LASF16
 439 00bd 04       		.byte	0x4
 440 00be 2D       		.byte	0x2d
 441 00bf 69000000 		.4byte	0x69
 442 00c3 03       		.uleb128 0x3
 443 00c4 04       		.byte	0x4
 444 00c5 07       		.byte	0x7
 445 00c6 D8010000 		.4byte	.LASF17
 446 00ca 03       		.uleb128 0x3
 447 00cb 01       		.byte	0x1
 448 00cc 08       		.byte	0x8
 449 00cd EF010000 		.4byte	.LASF18
 450 00d1 03       		.uleb128 0x3
 451 00d2 08       		.byte	0x8
 452 00d3 04       		.byte	0x4
 453 00d4 C7000000 		.4byte	.LASF19
 454 00d8 03       		.uleb128 0x3
 455 00d9 04       		.byte	0x4
 456 00da 04       		.byte	0x4
 457 00db 7C000000 		.4byte	.LASF20
 458 00df 03       		.uleb128 0x3
 459 00e0 08       		.byte	0x8
 460 00e1 04       		.byte	0x4
 461 00e2 1F020000 		.4byte	.LASF21
 462 00e6 05       		.uleb128 0x5
 463 00e7 D9000000 		.4byte	.LASF22
 464 00eb 02       		.byte	0x2
 465 00ec 9101     		.2byte	0x191
 466 00ee 97000000 		.4byte	0x97
 467 00f2 05       		.uleb128 0x5
 468 00f3 76000000 		.4byte	.LASF23
 469 00f7 02       		.byte	0x2
 470 00f8 9601     		.2byte	0x196
 471 00fa A2000000 		.4byte	0xa2
 472 00fe 05       		.uleb128 0x5
 473 00ff 82000000 		.4byte	.LASF24
 474 0103 02       		.byte	0x2
 475 0104 9B01     		.2byte	0x19b
 476 0106 AD000000 		.4byte	0xad
 477 010a 06       		.uleb128 0x6
 478 010b 04       		.byte	0x4
 479 010c E6000000 		.4byte	0xe6
 480 0110 07       		.uleb128 0x7
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 36


 481 0111 C9010000 		.4byte	.LASF37
 482 0115 02       		.byte	0x2
 483 0116 B402     		.2byte	0x2b4
 484 0118 FE000000 		.4byte	0xfe
 485 011c 03       		.byte	0x3
 486 011d 58010000 		.4byte	0x158
 487 0121 08       		.uleb128 0x8
 488 0122 7800     		.ascii	"x\000"
 489 0124 02       		.byte	0x2
 490 0125 B502     		.2byte	0x2b5
 491 0127 FE000000 		.4byte	0xfe
 492 012b 08       		.uleb128 0x8
 493 012c 7900     		.ascii	"y\000"
 494 012e 02       		.byte	0x2
 495 012f B602     		.2byte	0x2b6
 496 0131 B8000000 		.4byte	0xb8
 497 0135 09       		.uleb128 0x9
 498 0136 06020000 		.4byte	.LASF25
 499 013a 02       		.byte	0x2
 500 013b B802     		.2byte	0x2b8
 501 013d AD000000 		.4byte	0xad
 502 0141 09       		.uleb128 0x9
 503 0142 C0000000 		.4byte	.LASF26
 504 0146 02       		.byte	0x2
 505 0147 B802     		.2byte	0x2b8
 506 0149 AD000000 		.4byte	0xad
 507 014d 0A       		.uleb128 0xa
 508 014e 6900     		.ascii	"i\000"
 509 0150 02       		.byte	0x2
 510 0151 B902     		.2byte	0x2b9
 511 0153 B8000000 		.4byte	0xb8
 512 0157 00       		.byte	0
 513 0158 0B       		.uleb128 0xb
 514 0159 37020000 		.4byte	.LASF38
 515 015d 01       		.byte	0x1
 516 015e 40       		.byte	0x40
 517 015f 00000000 		.4byte	.LFB82
 518 0163 B6010000 		.4byte	.LFE82-.LFB82
 519 0167 01       		.uleb128 0x1
 520 0168 9C       		.byte	0x9c
 521 0169 0C       		.uleb128 0xc
 522 016a 13000000 		.4byte	.LASF27
 523 016e 01       		.byte	0x1
 524 016f 41       		.byte	0x41
 525 0170 0A010000 		.4byte	0x10a
 526 0174 03       		.uleb128 0x3
 527 0175 91       		.byte	0x91
 528 0176 AC7F     		.sleb128 -84
 529 0178 0C       		.uleb128 0xc
 530 0179 F4010000 		.4byte	.LASF28
 531 017d 01       		.byte	0x1
 532 017e 42       		.byte	0x42
 533 017f B8000000 		.4byte	0xb8
 534 0183 03       		.uleb128 0x3
 535 0184 91       		.byte	0x91
 536 0185 A87F     		.sleb128 -88
 537 0187 0C       		.uleb128 0xc
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 37


 538 0188 19000000 		.4byte	.LASF29
 539 018c 01       		.byte	0x1
 540 018d 43       		.byte	0x43
 541 018e 0A010000 		.4byte	0x10a
 542 0192 03       		.uleb128 0x3
 543 0193 91       		.byte	0x91
 544 0194 A47F     		.sleb128 -92
 545 0196 0C       		.uleb128 0xc
 546 0197 48020000 		.4byte	.LASF30
 547 019b 01       		.byte	0x1
 548 019c 44       		.byte	0x44
 549 019d B8000000 		.4byte	0xb8
 550 01a1 03       		.uleb128 0x3
 551 01a2 91       		.byte	0x91
 552 01a3 A07F     		.sleb128 -96
 553 01a5 0C       		.uleb128 0xc
 554 01a6 BB000000 		.4byte	.LASF31
 555 01aa 01       		.byte	0x1
 556 01ab 45       		.byte	0x45
 557 01ac 0A010000 		.4byte	0x10a
 558 01b0 02       		.uleb128 0x2
 559 01b1 91       		.byte	0x91
 560 01b2 00       		.sleb128 0
 561 01b3 0D       		.uleb128 0xd
 562 01b4 50020000 		.4byte	.LASF32
 563 01b8 01       		.byte	0x1
 564 01b9 B502     		.2byte	0x2b5
 565 01bb 0A010000 		.4byte	0x10a
 566 01bf 02       		.uleb128 0x2
 567 01c0 91       		.byte	0x91
 568 01c1 74       		.sleb128 -12
 569 01c2 0D       		.uleb128 0xd
 570 01c3 55020000 		.4byte	.LASF33
 571 01c7 01       		.byte	0x1
 572 01c8 B602     		.2byte	0x2b6
 573 01ca 0A010000 		.4byte	0x10a
 574 01ce 02       		.uleb128 0x2
 575 01cf 91       		.byte	0x91
 576 01d0 70       		.sleb128 -16
 577 01d1 0E       		.uleb128 0xe
 578 01d2 73756D00 		.ascii	"sum\000"
 579 01d6 01       		.byte	0x1
 580 01d7 B702     		.2byte	0x2b7
 581 01d9 FE000000 		.4byte	0xfe
 582 01dd 02       		.uleb128 0x2
 583 01de 91       		.byte	0x91
 584 01df 6C       		.sleb128 -20
 585 01e0 0E       		.uleb128 0xe
 586 01e1 6900     		.ascii	"i\000"
 587 01e3 01       		.byte	0x1
 588 01e4 B802     		.2byte	0x2b8
 589 01e6 B8000000 		.4byte	0xb8
 590 01ea 02       		.uleb128 0x2
 591 01eb 91       		.byte	0x91
 592 01ec 68       		.sleb128 -24
 593 01ed 0E       		.uleb128 0xe
 594 01ee 6A00     		.ascii	"j\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 38


 595 01f0 01       		.byte	0x1
 596 01f1 B802     		.2byte	0x2b8
 597 01f3 B8000000 		.4byte	0xb8
 598 01f7 02       		.uleb128 0x2
 599 01f8 91       		.byte	0x91
 600 01f9 64       		.sleb128 -28
 601 01fa 0E       		.uleb128 0xe
 602 01fb 696E7600 		.ascii	"inv\000"
 603 01ff 01       		.byte	0x1
 604 0200 B902     		.2byte	0x2b9
 605 0202 B8000000 		.4byte	0xb8
 606 0206 02       		.uleb128 0x2
 607 0207 91       		.byte	0x91
 608 0208 60       		.sleb128 -32
 609 0209 0E       		.uleb128 0xe
 610 020a 746F7400 		.ascii	"tot\000"
 611 020e 01       		.byte	0x1
 612 020f BA02     		.2byte	0x2ba
 613 0211 B8000000 		.4byte	0xb8
 614 0215 02       		.uleb128 0x2
 615 0216 91       		.byte	0x91
 616 0217 5C       		.sleb128 -36
 617 0218 0F       		.uleb128 0xf
 618 0219 10010000 		.4byte	0x110
 619 021d E2000000 		.4byte	.LBB6
 620 0221 52000000 		.4byte	.LBE6-.LBB6
 621 0225 01       		.byte	0x1
 622 0226 FF02     		.2byte	0x2ff
 623 0228 5F020000 		.4byte	0x25f
 624 022c 10       		.uleb128 0x10
 625 022d 2B010000 		.4byte	0x12b
 626 0231 02       		.uleb128 0x2
 627 0232 91       		.byte	0x91
 628 0233 54       		.sleb128 -44
 629 0234 10       		.uleb128 0x10
 630 0235 21010000 		.4byte	0x121
 631 0239 02       		.uleb128 0x2
 632 023a 91       		.byte	0x91
 633 023b 58       		.sleb128 -40
 634 023c 11       		.uleb128 0x11
 635 023d E2000000 		.4byte	.LBB7
 636 0241 52000000 		.4byte	.LBE7-.LBB7
 637 0245 12       		.uleb128 0x12
 638 0246 35010000 		.4byte	0x135
 639 024a 02       		.uleb128 0x2
 640 024b 91       		.byte	0x91
 641 024c 50       		.sleb128 -48
 642 024d 12       		.uleb128 0x12
 643 024e 41010000 		.4byte	0x141
 644 0252 02       		.uleb128 0x2
 645 0253 91       		.byte	0x91
 646 0254 48       		.sleb128 -56
 647 0255 12       		.uleb128 0x12
 648 0256 4D010000 		.4byte	0x14d
 649 025a 02       		.uleb128 0x2
 650 025b 91       		.byte	0x91
 651 025c 4C       		.sleb128 -52
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 39


 652 025d 00       		.byte	0
 653 025e 00       		.byte	0
 654 025f 13       		.uleb128 0x13
 655 0260 10010000 		.4byte	0x110
 656 0264 4A010000 		.4byte	.LBB8
 657 0268 52000000 		.4byte	.LBE8-.LBB8
 658 026c 01       		.byte	0x1
 659 026d 0103     		.2byte	0x301
 660 026f 10       		.uleb128 0x10
 661 0270 2B010000 		.4byte	0x12b
 662 0274 02       		.uleb128 0x2
 663 0275 91       		.byte	0x91
 664 0276 40       		.sleb128 -64
 665 0277 10       		.uleb128 0x10
 666 0278 21010000 		.4byte	0x121
 667 027c 02       		.uleb128 0x2
 668 027d 91       		.byte	0x91
 669 027e 44       		.sleb128 -60
 670 027f 11       		.uleb128 0x11
 671 0280 4A010000 		.4byte	.LBB9
 672 0284 52000000 		.4byte	.LBE9-.LBB9
 673 0288 12       		.uleb128 0x12
 674 0289 35010000 		.4byte	0x135
 675 028d 03       		.uleb128 0x3
 676 028e 91       		.byte	0x91
 677 028f BC7F     		.sleb128 -68
 678 0291 12       		.uleb128 0x12
 679 0292 41010000 		.4byte	0x141
 680 0296 03       		.uleb128 0x3
 681 0297 91       		.byte	0x91
 682 0298 B47F     		.sleb128 -76
 683 029a 12       		.uleb128 0x12
 684 029b 4D010000 		.4byte	0x14d
 685 029f 03       		.uleb128 0x3
 686 02a0 91       		.byte	0x91
 687 02a1 B87F     		.sleb128 -72
 688 02a3 00       		.byte	0
 689 02a4 00       		.byte	0
 690 02a5 00       		.byte	0
 691 02a6 00       		.byte	0
 692              		.section	.debug_abbrev,"",%progbits
 693              	.Ldebug_abbrev0:
 694 0000 01       		.uleb128 0x1
 695 0001 11       		.uleb128 0x11
 696 0002 01       		.byte	0x1
 697 0003 25       		.uleb128 0x25
 698 0004 0E       		.uleb128 0xe
 699 0005 13       		.uleb128 0x13
 700 0006 0B       		.uleb128 0xb
 701 0007 03       		.uleb128 0x3
 702 0008 0E       		.uleb128 0xe
 703 0009 1B       		.uleb128 0x1b
 704 000a 0E       		.uleb128 0xe
 705 000b 55       		.uleb128 0x55
 706 000c 17       		.uleb128 0x17
 707 000d 11       		.uleb128 0x11
 708 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 40


 709 000f 10       		.uleb128 0x10
 710 0010 17       		.uleb128 0x17
 711 0011 00       		.byte	0
 712 0012 00       		.byte	0
 713 0013 02       		.uleb128 0x2
 714 0014 16       		.uleb128 0x16
 715 0015 00       		.byte	0
 716 0016 03       		.uleb128 0x3
 717 0017 0E       		.uleb128 0xe
 718 0018 3A       		.uleb128 0x3a
 719 0019 0B       		.uleb128 0xb
 720 001a 3B       		.uleb128 0x3b
 721 001b 0B       		.uleb128 0xb
 722 001c 49       		.uleb128 0x49
 723 001d 13       		.uleb128 0x13
 724 001e 00       		.byte	0
 725 001f 00       		.byte	0
 726 0020 03       		.uleb128 0x3
 727 0021 24       		.uleb128 0x24
 728 0022 00       		.byte	0
 729 0023 0B       		.uleb128 0xb
 730 0024 0B       		.uleb128 0xb
 731 0025 3E       		.uleb128 0x3e
 732 0026 0B       		.uleb128 0xb
 733 0027 03       		.uleb128 0x3
 734 0028 0E       		.uleb128 0xe
 735 0029 00       		.byte	0
 736 002a 00       		.byte	0
 737 002b 04       		.uleb128 0x4
 738 002c 24       		.uleb128 0x24
 739 002d 00       		.byte	0
 740 002e 0B       		.uleb128 0xb
 741 002f 0B       		.uleb128 0xb
 742 0030 3E       		.uleb128 0x3e
 743 0031 0B       		.uleb128 0xb
 744 0032 03       		.uleb128 0x3
 745 0033 08       		.uleb128 0x8
 746 0034 00       		.byte	0
 747 0035 00       		.byte	0
 748 0036 05       		.uleb128 0x5
 749 0037 16       		.uleb128 0x16
 750 0038 00       		.byte	0
 751 0039 03       		.uleb128 0x3
 752 003a 0E       		.uleb128 0xe
 753 003b 3A       		.uleb128 0x3a
 754 003c 0B       		.uleb128 0xb
 755 003d 3B       		.uleb128 0x3b
 756 003e 05       		.uleb128 0x5
 757 003f 49       		.uleb128 0x49
 758 0040 13       		.uleb128 0x13
 759 0041 00       		.byte	0
 760 0042 00       		.byte	0
 761 0043 06       		.uleb128 0x6
 762 0044 0F       		.uleb128 0xf
 763 0045 00       		.byte	0
 764 0046 0B       		.uleb128 0xb
 765 0047 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 41


 766 0048 49       		.uleb128 0x49
 767 0049 13       		.uleb128 0x13
 768 004a 00       		.byte	0
 769 004b 00       		.byte	0
 770 004c 07       		.uleb128 0x7
 771 004d 2E       		.uleb128 0x2e
 772 004e 01       		.byte	0x1
 773 004f 03       		.uleb128 0x3
 774 0050 0E       		.uleb128 0xe
 775 0051 3A       		.uleb128 0x3a
 776 0052 0B       		.uleb128 0xb
 777 0053 3B       		.uleb128 0x3b
 778 0054 05       		.uleb128 0x5
 779 0055 27       		.uleb128 0x27
 780 0056 19       		.uleb128 0x19
 781 0057 49       		.uleb128 0x49
 782 0058 13       		.uleb128 0x13
 783 0059 20       		.uleb128 0x20
 784 005a 0B       		.uleb128 0xb
 785 005b 01       		.uleb128 0x1
 786 005c 13       		.uleb128 0x13
 787 005d 00       		.byte	0
 788 005e 00       		.byte	0
 789 005f 08       		.uleb128 0x8
 790 0060 05       		.uleb128 0x5
 791 0061 00       		.byte	0
 792 0062 03       		.uleb128 0x3
 793 0063 08       		.uleb128 0x8
 794 0064 3A       		.uleb128 0x3a
 795 0065 0B       		.uleb128 0xb
 796 0066 3B       		.uleb128 0x3b
 797 0067 05       		.uleb128 0x5
 798 0068 49       		.uleb128 0x49
 799 0069 13       		.uleb128 0x13
 800 006a 00       		.byte	0
 801 006b 00       		.byte	0
 802 006c 09       		.uleb128 0x9
 803 006d 34       		.uleb128 0x34
 804 006e 00       		.byte	0
 805 006f 03       		.uleb128 0x3
 806 0070 0E       		.uleb128 0xe
 807 0071 3A       		.uleb128 0x3a
 808 0072 0B       		.uleb128 0xb
 809 0073 3B       		.uleb128 0x3b
 810 0074 05       		.uleb128 0x5
 811 0075 49       		.uleb128 0x49
 812 0076 13       		.uleb128 0x13
 813 0077 00       		.byte	0
 814 0078 00       		.byte	0
 815 0079 0A       		.uleb128 0xa
 816 007a 34       		.uleb128 0x34
 817 007b 00       		.byte	0
 818 007c 03       		.uleb128 0x3
 819 007d 08       		.uleb128 0x8
 820 007e 3A       		.uleb128 0x3a
 821 007f 0B       		.uleb128 0xb
 822 0080 3B       		.uleb128 0x3b
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 42


 823 0081 05       		.uleb128 0x5
 824 0082 49       		.uleb128 0x49
 825 0083 13       		.uleb128 0x13
 826 0084 00       		.byte	0
 827 0085 00       		.byte	0
 828 0086 0B       		.uleb128 0xb
 829 0087 2E       		.uleb128 0x2e
 830 0088 01       		.byte	0x1
 831 0089 3F       		.uleb128 0x3f
 832 008a 19       		.uleb128 0x19
 833 008b 03       		.uleb128 0x3
 834 008c 0E       		.uleb128 0xe
 835 008d 3A       		.uleb128 0x3a
 836 008e 0B       		.uleb128 0xb
 837 008f 3B       		.uleb128 0x3b
 838 0090 0B       		.uleb128 0xb
 839 0091 27       		.uleb128 0x27
 840 0092 19       		.uleb128 0x19
 841 0093 11       		.uleb128 0x11
 842 0094 01       		.uleb128 0x1
 843 0095 12       		.uleb128 0x12
 844 0096 06       		.uleb128 0x6
 845 0097 40       		.uleb128 0x40
 846 0098 18       		.uleb128 0x18
 847 0099 9742     		.uleb128 0x2117
 848 009b 19       		.uleb128 0x19
 849 009c 00       		.byte	0
 850 009d 00       		.byte	0
 851 009e 0C       		.uleb128 0xc
 852 009f 05       		.uleb128 0x5
 853 00a0 00       		.byte	0
 854 00a1 03       		.uleb128 0x3
 855 00a2 0E       		.uleb128 0xe
 856 00a3 3A       		.uleb128 0x3a
 857 00a4 0B       		.uleb128 0xb
 858 00a5 3B       		.uleb128 0x3b
 859 00a6 0B       		.uleb128 0xb
 860 00a7 49       		.uleb128 0x49
 861 00a8 13       		.uleb128 0x13
 862 00a9 02       		.uleb128 0x2
 863 00aa 18       		.uleb128 0x18
 864 00ab 00       		.byte	0
 865 00ac 00       		.byte	0
 866 00ad 0D       		.uleb128 0xd
 867 00ae 34       		.uleb128 0x34
 868 00af 00       		.byte	0
 869 00b0 03       		.uleb128 0x3
 870 00b1 0E       		.uleb128 0xe
 871 00b2 3A       		.uleb128 0x3a
 872 00b3 0B       		.uleb128 0xb
 873 00b4 3B       		.uleb128 0x3b
 874 00b5 05       		.uleb128 0x5
 875 00b6 49       		.uleb128 0x49
 876 00b7 13       		.uleb128 0x13
 877 00b8 02       		.uleb128 0x2
 878 00b9 18       		.uleb128 0x18
 879 00ba 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 43


 880 00bb 00       		.byte	0
 881 00bc 0E       		.uleb128 0xe
 882 00bd 34       		.uleb128 0x34
 883 00be 00       		.byte	0
 884 00bf 03       		.uleb128 0x3
 885 00c0 08       		.uleb128 0x8
 886 00c1 3A       		.uleb128 0x3a
 887 00c2 0B       		.uleb128 0xb
 888 00c3 3B       		.uleb128 0x3b
 889 00c4 05       		.uleb128 0x5
 890 00c5 49       		.uleb128 0x49
 891 00c6 13       		.uleb128 0x13
 892 00c7 02       		.uleb128 0x2
 893 00c8 18       		.uleb128 0x18
 894 00c9 00       		.byte	0
 895 00ca 00       		.byte	0
 896 00cb 0F       		.uleb128 0xf
 897 00cc 1D       		.uleb128 0x1d
 898 00cd 01       		.byte	0x1
 899 00ce 31       		.uleb128 0x31
 900 00cf 13       		.uleb128 0x13
 901 00d0 11       		.uleb128 0x11
 902 00d1 01       		.uleb128 0x1
 903 00d2 12       		.uleb128 0x12
 904 00d3 06       		.uleb128 0x6
 905 00d4 58       		.uleb128 0x58
 906 00d5 0B       		.uleb128 0xb
 907 00d6 59       		.uleb128 0x59
 908 00d7 05       		.uleb128 0x5
 909 00d8 01       		.uleb128 0x1
 910 00d9 13       		.uleb128 0x13
 911 00da 00       		.byte	0
 912 00db 00       		.byte	0
 913 00dc 10       		.uleb128 0x10
 914 00dd 05       		.uleb128 0x5
 915 00de 00       		.byte	0
 916 00df 31       		.uleb128 0x31
 917 00e0 13       		.uleb128 0x13
 918 00e1 02       		.uleb128 0x2
 919 00e2 18       		.uleb128 0x18
 920 00e3 00       		.byte	0
 921 00e4 00       		.byte	0
 922 00e5 11       		.uleb128 0x11
 923 00e6 0B       		.uleb128 0xb
 924 00e7 01       		.byte	0x1
 925 00e8 11       		.uleb128 0x11
 926 00e9 01       		.uleb128 0x1
 927 00ea 12       		.uleb128 0x12
 928 00eb 06       		.uleb128 0x6
 929 00ec 00       		.byte	0
 930 00ed 00       		.byte	0
 931 00ee 12       		.uleb128 0x12
 932 00ef 34       		.uleb128 0x34
 933 00f0 00       		.byte	0
 934 00f1 31       		.uleb128 0x31
 935 00f2 13       		.uleb128 0x13
 936 00f3 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 44


 937 00f4 18       		.uleb128 0x18
 938 00f5 00       		.byte	0
 939 00f6 00       		.byte	0
 940 00f7 13       		.uleb128 0x13
 941 00f8 1D       		.uleb128 0x1d
 942 00f9 01       		.byte	0x1
 943 00fa 31       		.uleb128 0x31
 944 00fb 13       		.uleb128 0x13
 945 00fc 11       		.uleb128 0x11
 946 00fd 01       		.uleb128 0x1
 947 00fe 12       		.uleb128 0x12
 948 00ff 06       		.uleb128 0x6
 949 0100 58       		.uleb128 0x58
 950 0101 0B       		.uleb128 0xb
 951 0102 59       		.uleb128 0x59
 952 0103 05       		.uleb128 0x5
 953 0104 00       		.byte	0
 954 0105 00       		.byte	0
 955 0106 00       		.byte	0
 956              		.section	.debug_aranges,"",%progbits
 957 0000 1C000000 		.4byte	0x1c
 958 0004 0200     		.2byte	0x2
 959 0006 00000000 		.4byte	.Ldebug_info0
 960 000a 04       		.byte	0x4
 961 000b 00       		.byte	0
 962 000c 0000     		.2byte	0
 963 000e 0000     		.2byte	0
 964 0010 00000000 		.4byte	.LFB82
 965 0014 B6010000 		.4byte	.LFE82-.LFB82
 966 0018 00000000 		.4byte	0
 967 001c 00000000 		.4byte	0
 968              		.section	.debug_ranges,"",%progbits
 969              	.Ldebug_ranges0:
 970 0000 00000000 		.4byte	.LFB82
 971 0004 B6010000 		.4byte	.LFE82
 972 0008 00000000 		.4byte	0
 973 000c 00000000 		.4byte	0
 974              		.section	.debug_line,"",%progbits
 975              	.Ldebug_line0:
 976 0000 E5010000 		.section	.debug_str,"MS",%progbits,1
 976      02005301 
 976      00000201 
 976      FB0E0D00 
 976      01010101 
 977              	.LASF2:
 978 0000 5F5F696E 		.ascii	"__int8_t\000"
 978      74385F74 
 978      00
 979              	.LASF3:
 980 0009 5F5F696E 		.ascii	"__int16_t\000"
 980      7431365F 
 980      7400
 981              	.LASF27:
 982 0013 70537263 		.ascii	"pSrcA\000"
 982      4100
 983              	.LASF29:
 984 0019 70537263 		.ascii	"pSrcB\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 45


 984      4200
 985              	.LASF6:
 986 001f 5F5F696E 		.ascii	"__int32_t\000"
 986      7433325F 
 986      7400
 987              	.LASF36:
 988 0029 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 988      73657273 
 988      5C666E65 
 988      7665735C 
 988      446F6375 
 989 0056 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 989      655F7370 
 989      6565645F 
 989      73656E73 
 989      6F722E63 
 990              	.LASF13:
 991 006f 696E7438 		.ascii	"int8_t\000"
 991      5F7400
 992              	.LASF23:
 993 0076 7131355F 		.ascii	"q15_t\000"
 993      7400
 994              	.LASF20:
 995 007c 666C6F61 		.ascii	"float\000"
 995      7400
 996              	.LASF24:
 997 0082 7133315F 		.ascii	"q31_t\000"
 997      7400
 998              	.LASF1:
 999 0088 756E7369 		.ascii	"unsigned char\000"
 999      676E6564 
 999      20636861 
 999      7200
 1000              	.LASF9:
 1001 0096 6C6F6E67 		.ascii	"long unsigned int\000"
 1001      20756E73 
 1001      69676E65 
 1001      6420696E 
 1001      7400
 1002              	.LASF5:
 1003 00a8 73686F72 		.ascii	"short unsigned int\000"
 1003      7420756E 
 1003      7369676E 
 1003      65642069 
 1003      6E7400
 1004              	.LASF31:
 1005 00bb 70447374 		.ascii	"pDst\000"
 1005      00
 1006              	.LASF26:
 1007 00c0 6E65674D 		.ascii	"negMin\000"
 1007      696E00
 1008              	.LASF19:
 1009 00c7 646F7562 		.ascii	"double\000"
 1009      6C6500
 1010              	.LASF8:
 1011 00ce 5F5F7569 		.ascii	"__uint32_t\000"
 1011      6E743332 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 46


 1011      5F7400
 1012              	.LASF22:
 1013 00d9 71375F74 		.ascii	"q7_t\000"
 1013      00
 1014              	.LASF12:
 1015 00de 756E7369 		.ascii	"unsigned int\000"
 1015      676E6564 
 1015      20696E74 
 1015      00
 1016              	.LASF35:
 1017 00eb 536F7572 		.ascii	"Source\\FilteringFunctions\\arm_correlate_q7.c\000"
 1017      63655C46 
 1017      696C7465 
 1017      72696E67 
 1017      46756E63 
 1018              	.LASF11:
 1019 0118 6C6F6E67 		.ascii	"long long unsigned int\000"
 1019      206C6F6E 
 1019      6720756E 
 1019      7369676E 
 1019      65642069 
 1020              	.LASF34:
 1021 012f 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1021      4320342E 
 1021      392E3320 
 1021      32303135 
 1021      30333033 
 1022 0162 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 1022      20726576 
 1022      6973696F 
 1022      6E203232 
 1022      31323230 
 1023 0195 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 1023      30202D66 
 1023      66756E63 
 1023      74696F6E 
 1023      2D736563 
 1024              	.LASF14:
 1025 01c1 696E7431 		.ascii	"int16_t\000"
 1025      365F7400 
 1026              	.LASF37:
 1027 01c9 5F5F5353 		.ascii	"__SSAT\000"
 1027      415400
 1028              	.LASF15:
 1029 01d0 696E7433 		.ascii	"int32_t\000"
 1029      325F7400 
 1030              	.LASF17:
 1031 01d8 73697A65 		.ascii	"sizetype\000"
 1031      74797065 
 1031      00
 1032              	.LASF10:
 1033 01e1 6C6F6E67 		.ascii	"long long int\000"
 1033      206C6F6E 
 1033      6720696E 
 1033      7400
 1034              	.LASF18:
 1035 01ef 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccSlhJ9d.s 			page 47


 1035      00
 1036              	.LASF28:
 1037 01f4 73726341 		.ascii	"srcALen\000"
 1037      4C656E00 
 1038              	.LASF4:
 1039 01fc 73686F72 		.ascii	"short int\000"
 1039      7420696E 
 1039      7400
 1040              	.LASF25:
 1041 0206 706F734D 		.ascii	"posMax\000"
 1041      617800
 1042              	.LASF16:
 1043 020d 75696E74 		.ascii	"uint32_t\000"
 1043      33325F74 
 1043      00
 1044              	.LASF7:
 1045 0216 6C6F6E67 		.ascii	"long int\000"
 1045      20696E74 
 1045      00
 1046              	.LASF21:
 1047 021f 6C6F6E67 		.ascii	"long double\000"
 1047      20646F75 
 1047      626C6500 
 1048              	.LASF0:
 1049 022b 7369676E 		.ascii	"signed char\000"
 1049      65642063 
 1049      68617200 
 1050              	.LASF38:
 1051 0237 61726D5F 		.ascii	"arm_correlate_q7\000"
 1051      636F7272 
 1051      656C6174 
 1051      655F7137 
 1051      00
 1052              	.LASF30:
 1053 0248 73726342 		.ascii	"srcBLen\000"
 1053      4C656E00 
 1054              	.LASF32:
 1055 0250 70496E31 		.ascii	"pIn1\000"
 1055      00
 1056              	.LASF33:
 1057 0255 70496E32 		.ascii	"pIn2\000"
 1057      00
 1058              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
