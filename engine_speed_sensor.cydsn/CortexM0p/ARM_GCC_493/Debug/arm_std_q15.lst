ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_std_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_ldivmod
  18              		.global	__aeabi_lmul
  19              		.section	.text.arm_std_q15,"ax",%progbits
  20              		.align	2
  21              		.global	arm_std_q15
  22              		.code	16
  23              		.thumb_func
  24              		.type	arm_std_q15, %function
  25              	arm_std_q15:
  26              	.LFB82:
  27              		.file 1 "Source\\StatisticsFunctions\\arm_std_q15.c"
   1:Source\StatisticsFunctions/arm_std_q15.c **** /* ----------------------------------------------------------------------
   2:Source\StatisticsFunctions/arm_std_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\StatisticsFunctions/arm_std_q15.c ****  * Title:        arm_std_q15.c
   4:Source\StatisticsFunctions/arm_std_q15.c ****  * Description:  Standard deviation of an array of Q15 vector
   5:Source\StatisticsFunctions/arm_std_q15.c ****  *
   6:Source\StatisticsFunctions/arm_std_q15.c ****  * $Date:        27. January 2017
   7:Source\StatisticsFunctions/arm_std_q15.c ****  * $Revision:    V.1.5.1
   8:Source\StatisticsFunctions/arm_std_q15.c ****  *
   9:Source\StatisticsFunctions/arm_std_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\StatisticsFunctions/arm_std_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\StatisticsFunctions/arm_std_q15.c **** /*
  12:Source\StatisticsFunctions/arm_std_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\StatisticsFunctions/arm_std_q15.c ****  *
  14:Source\StatisticsFunctions/arm_std_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\StatisticsFunctions/arm_std_q15.c ****  *
  16:Source\StatisticsFunctions/arm_std_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\StatisticsFunctions/arm_std_q15.c ****  * not use this file except in compliance with the License.
  18:Source\StatisticsFunctions/arm_std_q15.c ****  * You may obtain a copy of the License at
  19:Source\StatisticsFunctions/arm_std_q15.c ****  *
  20:Source\StatisticsFunctions/arm_std_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\StatisticsFunctions/arm_std_q15.c ****  *
  22:Source\StatisticsFunctions/arm_std_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\StatisticsFunctions/arm_std_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\StatisticsFunctions/arm_std_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\StatisticsFunctions/arm_std_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\StatisticsFunctions/arm_std_q15.c ****  * limitations under the License.
  27:Source\StatisticsFunctions/arm_std_q15.c ****  */
  28:Source\StatisticsFunctions/arm_std_q15.c **** 
  29:Source\StatisticsFunctions/arm_std_q15.c **** #include "arm_math.h"
  30:Source\StatisticsFunctions/arm_std_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 2


  31:Source\StatisticsFunctions/arm_std_q15.c **** /**
  32:Source\StatisticsFunctions/arm_std_q15.c ****  * @ingroup groupStats
  33:Source\StatisticsFunctions/arm_std_q15.c ****  */
  34:Source\StatisticsFunctions/arm_std_q15.c **** 
  35:Source\StatisticsFunctions/arm_std_q15.c **** /**
  36:Source\StatisticsFunctions/arm_std_q15.c ****  * @addtogroup STD
  37:Source\StatisticsFunctions/arm_std_q15.c ****  * @{
  38:Source\StatisticsFunctions/arm_std_q15.c ****  */
  39:Source\StatisticsFunctions/arm_std_q15.c **** 
  40:Source\StatisticsFunctions/arm_std_q15.c **** /**
  41:Source\StatisticsFunctions/arm_std_q15.c ****  * @brief Standard deviation of the elements of a Q15 vector.
  42:Source\StatisticsFunctions/arm_std_q15.c ****  * @param[in]       *pSrc points to the input vector
  43:Source\StatisticsFunctions/arm_std_q15.c ****  * @param[in]       blockSize length of the input vector
  44:Source\StatisticsFunctions/arm_std_q15.c ****  * @param[out]      *pResult standard deviation value returned here
  45:Source\StatisticsFunctions/arm_std_q15.c ****  * @return none.
  46:Source\StatisticsFunctions/arm_std_q15.c ****  * @details
  47:Source\StatisticsFunctions/arm_std_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  48:Source\StatisticsFunctions/arm_std_q15.c ****  *
  49:Source\StatisticsFunctions/arm_std_q15.c ****  * \par
  50:Source\StatisticsFunctions/arm_std_q15.c ****  * The function is implemented using a 64-bit internal accumulator.
  51:Source\StatisticsFunctions/arm_std_q15.c ****  * The input is represented in 1.15 format.
  52:Source\StatisticsFunctions/arm_std_q15.c ****  * Intermediate multiplication yields a 2.30 format, and this
  53:Source\StatisticsFunctions/arm_std_q15.c ****  * result is added without saturation to a 64-bit accumulator in 34.30 format.
  54:Source\StatisticsFunctions/arm_std_q15.c ****  * With 33 guard bits in the accumulator, there is no risk of overflow, and the
  55:Source\StatisticsFunctions/arm_std_q15.c ****  * full precision of the intermediate multiplication is preserved.
  56:Source\StatisticsFunctions/arm_std_q15.c ****  * Finally, the 34.30 result is truncated to 34.15 format by discarding the lower
  57:Source\StatisticsFunctions/arm_std_q15.c ****  * 15 bits, and then saturated to yield a result in 1.15 format.
  58:Source\StatisticsFunctions/arm_std_q15.c ****  */
  59:Source\StatisticsFunctions/arm_std_q15.c **** 
  60:Source\StatisticsFunctions/arm_std_q15.c **** void arm_std_q15(
  61:Source\StatisticsFunctions/arm_std_q15.c ****   q15_t * pSrc,
  62:Source\StatisticsFunctions/arm_std_q15.c ****   uint32_t blockSize,
  63:Source\StatisticsFunctions/arm_std_q15.c ****   q15_t * pResult)
  64:Source\StatisticsFunctions/arm_std_q15.c **** {
  28              		.loc 1 64 0
  29              		.cfi_startproc
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 99B0     		sub	sp, sp, #100
  38              		.cfi_def_cfa_offset 120
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 F862     		str	r0, [r7, #44]
  42 0008 B962     		str	r1, [r7, #40]
  43 000a 7A62     		str	r2, [r7, #36]
  65:Source\StatisticsFunctions/arm_std_q15.c ****   q31_t sum = 0;                                 /* Accumulator */
  44              		.loc 1 65 0
  45 000c 0023     		mov	r3, #0
  46 000e FB65     		str	r3, [r7, #92]
  66:Source\StatisticsFunctions/arm_std_q15.c ****   q31_t meanOfSquares, squareOfMean;             /* square of mean and mean of square */
  67:Source\StatisticsFunctions/arm_std_q15.c ****   uint32_t blkCnt;                               /* loop counter */
  68:Source\StatisticsFunctions/arm_std_q15.c ****   q63_t sumOfSquares = 0;                        /* Accumulator */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 3


  47              		.loc 1 68 0
  48 0010 0023     		mov	r3, #0
  49 0012 0024     		mov	r4, #0
  50 0014 3B65     		str	r3, [r7, #80]
  51 0016 7C65     		str	r4, [r7, #84]
  69:Source\StatisticsFunctions/arm_std_q15.c **** #if defined (ARM_MATH_DSP)
  70:Source\StatisticsFunctions/arm_std_q15.c ****   q31_t in;                                      /* input value */
  71:Source\StatisticsFunctions/arm_std_q15.c ****   q15_t in1;                                     /* input value */
  72:Source\StatisticsFunctions/arm_std_q15.c **** #else
  73:Source\StatisticsFunctions/arm_std_q15.c ****   q15_t in;                                      /* input value */
  74:Source\StatisticsFunctions/arm_std_q15.c **** #endif
  75:Source\StatisticsFunctions/arm_std_q15.c **** 
  76:Source\StatisticsFunctions/arm_std_q15.c ****   if (blockSize == 1u)
  52              		.loc 1 76 0
  53 0018 BB6A     		ldr	r3, [r7, #40]
  54 001a 012B     		cmp	r3, #1
  55 001c 03D1     		bne	.L2
  77:Source\StatisticsFunctions/arm_std_q15.c ****   {
  78:Source\StatisticsFunctions/arm_std_q15.c ****     *pResult = 0;
  56              		.loc 1 78 0
  57 001e 7B6A     		ldr	r3, [r7, #36]
  58 0020 0022     		mov	r2, #0
  59 0022 1A80     		strh	r2, [r3]
  79:Source\StatisticsFunctions/arm_std_q15.c ****     return;
  60              		.loc 1 79 0
  61 0024 99E0     		b	.L1
  62              	.L2:
  80:Source\StatisticsFunctions/arm_std_q15.c ****   }
  81:Source\StatisticsFunctions/arm_std_q15.c **** 
  82:Source\StatisticsFunctions/arm_std_q15.c **** #if defined (ARM_MATH_DSP)
  83:Source\StatisticsFunctions/arm_std_q15.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  84:Source\StatisticsFunctions/arm_std_q15.c **** 
  85:Source\StatisticsFunctions/arm_std_q15.c ****   /*loop Unrolling */
  86:Source\StatisticsFunctions/arm_std_q15.c ****   blkCnt = blockSize >> 2u;
  87:Source\StatisticsFunctions/arm_std_q15.c **** 
  88:Source\StatisticsFunctions/arm_std_q15.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  89:Source\StatisticsFunctions/arm_std_q15.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  90:Source\StatisticsFunctions/arm_std_q15.c ****   while (blkCnt > 0u)
  91:Source\StatisticsFunctions/arm_std_q15.c ****   {
  92:Source\StatisticsFunctions/arm_std_q15.c ****     /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
  93:Source\StatisticsFunctions/arm_std_q15.c ****     /* Compute Sum of squares of the input samples
  94:Source\StatisticsFunctions/arm_std_q15.c ****      * and then store the result in a temporary variable, sum. */
  95:Source\StatisticsFunctions/arm_std_q15.c ****     in = *__SIMD32(pSrc)++;
  96:Source\StatisticsFunctions/arm_std_q15.c ****     sum += ((in << 16u) >> 16u);
  97:Source\StatisticsFunctions/arm_std_q15.c ****     sum +=  (in >> 16u);
  98:Source\StatisticsFunctions/arm_std_q15.c ****     sumOfSquares = __SMLALD(in, in, sumOfSquares);
  99:Source\StatisticsFunctions/arm_std_q15.c ****     in = *__SIMD32(pSrc)++;
 100:Source\StatisticsFunctions/arm_std_q15.c ****     sum += ((in << 16u) >> 16u);
 101:Source\StatisticsFunctions/arm_std_q15.c ****     sum +=  (in >> 16u);
 102:Source\StatisticsFunctions/arm_std_q15.c ****     sumOfSquares = __SMLALD(in, in, sumOfSquares);
 103:Source\StatisticsFunctions/arm_std_q15.c **** 
 104:Source\StatisticsFunctions/arm_std_q15.c ****     /* Decrement the loop counter */
 105:Source\StatisticsFunctions/arm_std_q15.c ****     blkCnt--;
 106:Source\StatisticsFunctions/arm_std_q15.c ****   }
 107:Source\StatisticsFunctions/arm_std_q15.c **** 
 108:Source\StatisticsFunctions/arm_std_q15.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 109:Source\StatisticsFunctions/arm_std_q15.c ****    ** No loop unrolling is used. */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 4


 110:Source\StatisticsFunctions/arm_std_q15.c ****   blkCnt = blockSize % 0x4u;
 111:Source\StatisticsFunctions/arm_std_q15.c **** 
 112:Source\StatisticsFunctions/arm_std_q15.c ****   while (blkCnt > 0u)
 113:Source\StatisticsFunctions/arm_std_q15.c ****   {
 114:Source\StatisticsFunctions/arm_std_q15.c ****     /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
 115:Source\StatisticsFunctions/arm_std_q15.c ****     /* Compute Sum of squares of the input samples
 116:Source\StatisticsFunctions/arm_std_q15.c ****      * and then store the result in a temporary variable, sum. */
 117:Source\StatisticsFunctions/arm_std_q15.c ****     in1 = *pSrc++;
 118:Source\StatisticsFunctions/arm_std_q15.c ****     sumOfSquares = __SMLALD(in1, in1, sumOfSquares);
 119:Source\StatisticsFunctions/arm_std_q15.c ****     sum += in1;
 120:Source\StatisticsFunctions/arm_std_q15.c **** 
 121:Source\StatisticsFunctions/arm_std_q15.c ****     /* Decrement the loop counter */
 122:Source\StatisticsFunctions/arm_std_q15.c ****     blkCnt--;
 123:Source\StatisticsFunctions/arm_std_q15.c ****   }
 124:Source\StatisticsFunctions/arm_std_q15.c **** 
 125:Source\StatisticsFunctions/arm_std_q15.c ****   /* Compute Mean of squares of the input samples
 126:Source\StatisticsFunctions/arm_std_q15.c ****    * and then store the result in a temporary variable, meanOfSquares. */
 127:Source\StatisticsFunctions/arm_std_q15.c ****   meanOfSquares = (q31_t)(sumOfSquares / (q63_t)(blockSize - 1u));
 128:Source\StatisticsFunctions/arm_std_q15.c **** 
 129:Source\StatisticsFunctions/arm_std_q15.c ****   /* Compute square of mean */
 130:Source\StatisticsFunctions/arm_std_q15.c ****   squareOfMean = (q31_t)((q63_t)sum * sum / (q63_t)(blockSize * (blockSize - 1u)));
 131:Source\StatisticsFunctions/arm_std_q15.c **** 
 132:Source\StatisticsFunctions/arm_std_q15.c ****   /* mean of the squares minus the square of the mean. */
 133:Source\StatisticsFunctions/arm_std_q15.c ****   /* Compute standard deviation and store the result to the destination */
 134:Source\StatisticsFunctions/arm_std_q15.c ****   arm_sqrt_q15(__SSAT((meanOfSquares - squareOfMean) >> 15u, 16u), pResult);
 135:Source\StatisticsFunctions/arm_std_q15.c **** 
 136:Source\StatisticsFunctions/arm_std_q15.c **** #else
 137:Source\StatisticsFunctions/arm_std_q15.c ****   /* Run the below code for Cortex-M0 */
 138:Source\StatisticsFunctions/arm_std_q15.c **** 
 139:Source\StatisticsFunctions/arm_std_q15.c ****   /* Loop over blockSize number of values */
 140:Source\StatisticsFunctions/arm_std_q15.c ****   blkCnt = blockSize;
  63              		.loc 1 140 0
  64 0026 BB6A     		ldr	r3, [r7, #40]
  65 0028 BB65     		str	r3, [r7, #88]
 141:Source\StatisticsFunctions/arm_std_q15.c **** 
 142:Source\StatisticsFunctions/arm_std_q15.c ****   while (blkCnt > 0u)
  66              		.loc 1 142 0
  67 002a 2EE0     		b	.L4
  68              	.L5:
 143:Source\StatisticsFunctions/arm_std_q15.c ****   {
 144:Source\StatisticsFunctions/arm_std_q15.c ****     /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
 145:Source\StatisticsFunctions/arm_std_q15.c ****     /* Compute Sum of squares of the input samples
 146:Source\StatisticsFunctions/arm_std_q15.c ****      * and then store the result in a temporary variable, sumOfSquares. */
 147:Source\StatisticsFunctions/arm_std_q15.c ****     in = *pSrc++;
  69              		.loc 1 147 0
  70 002c FB6A     		ldr	r3, [r7, #44]
  71 002e 9A1C     		add	r2, r3, #2
  72 0030 FA62     		str	r2, [r7, #44]
  73 0032 2E22     		mov	r2, #46
  74 0034 2021     		mov	r1, #32
  75 0036 8C46     		mov	ip, r1
  76 0038 BC44     		add	ip, ip, r7
  77 003a 6244     		add	r2, r2, ip
  78 003c 1B88     		ldrh	r3, [r3]
  79 003e 1380     		strh	r3, [r2]
 148:Source\StatisticsFunctions/arm_std_q15.c ****     sumOfSquares += (in * in);
  80              		.loc 1 148 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 5


  81 0040 2E23     		mov	r3, #46
  82 0042 2022     		mov	r2, #32
  83 0044 9446     		mov	ip, r2
  84 0046 BC44     		add	ip, ip, r7
  85 0048 6344     		add	r3, r3, ip
  86 004a 0022     		mov	r2, #0
  87 004c 9B5E     		ldrsh	r3, [r3, r2]
  88 004e 2E22     		mov	r2, #46
  89 0050 2021     		mov	r1, #32
  90 0052 8C46     		mov	ip, r1
  91 0054 BC44     		add	ip, ip, r7
  92 0056 6244     		add	r2, r2, ip
  93 0058 0021     		mov	r1, #0
  94 005a 525E     		ldrsh	r2, [r2, r1]
  95 005c 5343     		mul	r3, r2
  96 005e 1D1C     		mov	r5, r3
  97 0060 DB17     		asr	r3, r3, #31
  98 0062 1E1C     		mov	r6, r3
  99 0064 3B6D     		ldr	r3, [r7, #80]
 100 0066 7C6D     		ldr	r4, [r7, #84]
 101 0068 5B19     		add	r3, r3, r5
 102 006a 7441     		adc	r4, r4, r6
 103 006c 3B65     		str	r3, [r7, #80]
 104 006e 7C65     		str	r4, [r7, #84]
 149:Source\StatisticsFunctions/arm_std_q15.c **** 
 150:Source\StatisticsFunctions/arm_std_q15.c ****     /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
 151:Source\StatisticsFunctions/arm_std_q15.c ****     /* Compute sum of all input values and then store the result in a temporary variable, sum. */
 152:Source\StatisticsFunctions/arm_std_q15.c ****     sum += in;
 105              		.loc 1 152 0
 106 0070 2E23     		mov	r3, #46
 107 0072 2022     		mov	r2, #32
 108 0074 9446     		mov	ip, r2
 109 0076 BC44     		add	ip, ip, r7
 110 0078 6344     		add	r3, r3, ip
 111 007a 0022     		mov	r2, #0
 112 007c 9B5E     		ldrsh	r3, [r3, r2]
 113 007e FA6D     		ldr	r2, [r7, #92]
 114 0080 D318     		add	r3, r2, r3
 115 0082 FB65     		str	r3, [r7, #92]
 153:Source\StatisticsFunctions/arm_std_q15.c **** 
 154:Source\StatisticsFunctions/arm_std_q15.c ****     /* Decrement the loop counter */
 155:Source\StatisticsFunctions/arm_std_q15.c ****     blkCnt--;
 116              		.loc 1 155 0
 117 0084 BB6D     		ldr	r3, [r7, #88]
 118 0086 013B     		sub	r3, r3, #1
 119 0088 BB65     		str	r3, [r7, #88]
 120              	.L4:
 142:Source\StatisticsFunctions/arm_std_q15.c ****   {
 121              		.loc 1 142 0
 122 008a BB6D     		ldr	r3, [r7, #88]
 123 008c 002B     		cmp	r3, #0
 124 008e CDD1     		bne	.L5
 156:Source\StatisticsFunctions/arm_std_q15.c ****   }
 157:Source\StatisticsFunctions/arm_std_q15.c **** 
 158:Source\StatisticsFunctions/arm_std_q15.c ****   /* Compute Mean of squares of the input samples
 159:Source\StatisticsFunctions/arm_std_q15.c ****    * and then store the result in a temporary variable, meanOfSquares. */
 160:Source\StatisticsFunctions/arm_std_q15.c ****   meanOfSquares = (q31_t)(sumOfSquares / (q63_t)(blockSize - 1u));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 6


 125              		.loc 1 160 0
 126 0090 BB6A     		ldr	r3, [r7, #40]
 127 0092 013B     		sub	r3, r3, #1
 128 0094 BB61     		str	r3, [r7, #24]
 129 0096 0023     		mov	r3, #0
 130 0098 FB61     		str	r3, [r7, #28]
 131 009a 386D     		ldr	r0, [r7, #80]
 132 009c 796D     		ldr	r1, [r7, #84]
 133 009e BA69     		ldr	r2, [r7, #24]
 134 00a0 FB69     		ldr	r3, [r7, #28]
 135 00a2 FFF7FEFF 		bl	__aeabi_ldivmod
 136 00a6 031C     		mov	r3, r0
 137 00a8 0C1C     		mov	r4, r1
 138 00aa BB64     		str	r3, [r7, #72]
 161:Source\StatisticsFunctions/arm_std_q15.c **** 
 162:Source\StatisticsFunctions/arm_std_q15.c ****   /* Compute square of mean */
 163:Source\StatisticsFunctions/arm_std_q15.c ****   squareOfMean = (q31_t)((q63_t)sum * sum / (q63_t)(blockSize * (blockSize - 1u)));
 139              		.loc 1 163 0
 140 00ac FB6D     		ldr	r3, [r7, #92]
 141 00ae 3B61     		str	r3, [r7, #16]
 142 00b0 DB17     		asr	r3, r3, #31
 143 00b2 7B61     		str	r3, [r7, #20]
 144 00b4 FB6D     		ldr	r3, [r7, #92]
 145 00b6 BB60     		str	r3, [r7, #8]
 146 00b8 DB17     		asr	r3, r3, #31
 147 00ba FB60     		str	r3, [r7, #12]
 148 00bc 3869     		ldr	r0, [r7, #16]
 149 00be 7969     		ldr	r1, [r7, #20]
 150 00c0 BA68     		ldr	r2, [r7, #8]
 151 00c2 FB68     		ldr	r3, [r7, #12]
 152 00c4 FFF7FEFF 		bl	__aeabi_lmul
 153 00c8 031C     		mov	r3, r0
 154 00ca 0C1C     		mov	r4, r1
 155 00cc 181C     		mov	r0, r3
 156 00ce 211C     		mov	r1, r4
 157 00d0 BB6A     		ldr	r3, [r7, #40]
 158 00d2 013B     		sub	r3, r3, #1
 159 00d4 BA6A     		ldr	r2, [r7, #40]
 160 00d6 5343     		mul	r3, r2
 161 00d8 3B60     		str	r3, [r7]
 162 00da 0023     		mov	r3, #0
 163 00dc 7B60     		str	r3, [r7, #4]
 164 00de 3A68     		ldr	r2, [r7]
 165 00e0 7B68     		ldr	r3, [r7, #4]
 166 00e2 FFF7FEFF 		bl	__aeabi_ldivmod
 167 00e6 031C     		mov	r3, r0
 168 00e8 0C1C     		mov	r4, r1
 169 00ea 7B64     		str	r3, [r7, #68]
 164:Source\StatisticsFunctions/arm_std_q15.c **** 
 165:Source\StatisticsFunctions/arm_std_q15.c ****   /* mean of the squares minus the square of the mean. */
 166:Source\StatisticsFunctions/arm_std_q15.c ****   /* Compute standard deviation and store the result to the destination */
 167:Source\StatisticsFunctions/arm_std_q15.c ****   arm_sqrt_q15(__SSAT((meanOfSquares - squareOfMean) >> 15u, 16u), pResult);
 170              		.loc 1 167 0
 171 00ec BA6C     		ldr	r2, [r7, #72]
 172 00ee 7B6C     		ldr	r3, [r7, #68]
 173 00f0 D31A     		sub	r3, r2, r3
 174 00f2 DB13     		asr	r3, r3, #15
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 7


 175 00f4 3B64     		str	r3, [r7, #64]
 176 00f6 1023     		mov	r3, #16
 177 00f8 FB63     		str	r3, [r7, #60]
 178              	.LBB4:
 179              	.LBB5:
 180              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 8


  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 9


 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 10


 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 11


 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 12


 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 13


 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 14


 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 15


 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 16


 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 17


 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 18


 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 19


 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
 181              		.loc 2 699 0
 182 00fa 0123     		mov	r3, #1
 183 00fc BB63     		str	r3, [r7, #56]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 184              		.loc 2 700 0
 185 00fe 0023     		mov	r3, #0
 186 0100 7B63     		str	r3, [r7, #52]
 187 0102 05E0     		b	.L6
 188              	.L7:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 189              		.loc 2 702 0
 190 0104 BB6B     		ldr	r3, [r7, #56]
 191 0106 5B00     		lsl	r3, r3, #1
 192 0108 BB63     		str	r3, [r7, #56]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 193              		.loc 2 700 0
 194 010a 7B6B     		ldr	r3, [r7, #52]
 195 010c 0133     		add	r3, r3, #1
 196 010e 7B63     		str	r3, [r7, #52]
 197              	.L6:
 198 0110 FB6B     		ldr	r3, [r7, #60]
 199 0112 013B     		sub	r3, r3, #1
 200 0114 7A6B     		ldr	r2, [r7, #52]
 201 0116 9A42     		cmp	r2, r3
 202 0118 F4D3     		bcc	.L7
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 203              		.loc 2 705 0
 204 011a 3B6C     		ldr	r3, [r7, #64]
 205 011c 002B     		cmp	r3, #0
 206 011e 09DD     		ble	.L8
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 207              		.loc 2 707 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 20


 208 0120 BB6B     		ldr	r3, [r7, #56]
 209 0122 013B     		sub	r3, r3, #1
 210 0124 BB63     		str	r3, [r7, #56]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 211              		.loc 2 709 0
 212 0126 3A6C     		ldr	r2, [r7, #64]
 213 0128 BB6B     		ldr	r3, [r7, #56]
 214 012a 9A42     		cmp	r2, r3
 215 012c 0CDD     		ble	.L12
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 216              		.loc 2 711 0
 217 012e BB6B     		ldr	r3, [r7, #56]
 218 0130 3B64     		str	r3, [r7, #64]
 219 0132 0AE0     		b	.L10
 220              	.L8:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 221              		.loc 2 716 0
 222 0134 BB6B     		ldr	r3, [r7, #56]
 223 0136 5B42     		neg	r3, r3
 224 0138 3B63     		str	r3, [r7, #48]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 225              		.loc 2 718 0
 226 013a 3A6C     		ldr	r2, [r7, #64]
 227 013c 3B6B     		ldr	r3, [r7, #48]
 228 013e 9A42     		cmp	r2, r3
 229 0140 03DA     		bge	.L10
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 230              		.loc 2 720 0
 231 0142 3B6B     		ldr	r3, [r7, #48]
 232 0144 3B64     		str	r3, [r7, #64]
 233 0146 00E0     		b	.L10
 234              	.L12:
 711:.\Include/arm_math.h ****       }
 235              		.loc 2 711 0
 236 0148 C046     		mov	r8, r8
 237              	.L10:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 238              		.loc 2 723 0
 239 014a 3B6C     		ldr	r3, [r7, #64]
 240              	.LBE5:
 241              	.LBE4:
 242              		.loc 1 167 0
 243 014c 9BB2     		uxth	r3, r3
 244 014e 1AB2     		sxth	r2, r3
 245 0150 7B6A     		ldr	r3, [r7, #36]
 246 0152 101C     		mov	r0, r2
 247 0154 191C     		mov	r1, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 21


 248 0156 FFF7FEFF 		bl	arm_sqrt_q15
 249              	.L1:
 168:Source\StatisticsFunctions/arm_std_q15.c **** 
 169:Source\StatisticsFunctions/arm_std_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 170:Source\StatisticsFunctions/arm_std_q15.c **** }
 250              		.loc 1 170 0
 251 015a BD46     		mov	sp, r7
 252 015c 19B0     		add	sp, sp, #100
 253              		@ sp needed
 254 015e F0BD     		pop	{r4, r5, r6, r7, pc}
 255              		.cfi_endproc
 256              	.LFE82:
 257              		.size	arm_std_q15, .-arm_std_q15
 258              		.text
 259              	.Letext0:
 260              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 261              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 262              		.section	.debug_info,"",%progbits
 263              	.Ldebug_info0:
 264 0000 2B020000 		.4byte	0x22b
 265 0004 0400     		.2byte	0x4
 266 0006 00000000 		.4byte	.Ldebug_abbrev0
 267 000a 04       		.byte	0x4
 268 000b 01       		.uleb128 0x1
 269 000c 5A010000 		.4byte	.LASF34
 270 0010 01       		.byte	0x1
 271 0011 08000000 		.4byte	.LASF35
 272 0015 45000000 		.4byte	.LASF36
 273 0019 00000000 		.4byte	.Ldebug_ranges0+0
 274 001d 00000000 		.4byte	0
 275 0021 00000000 		.4byte	.Ldebug_line0
 276 0025 02       		.uleb128 0x2
 277 0026 01       		.byte	0x1
 278 0027 06       		.byte	0x6
 279 0028 50020000 		.4byte	.LASF0
 280 002c 02       		.uleb128 0x2
 281 002d 01       		.byte	0x1
 282 002e 08       		.byte	0x8
 283 002f AA000000 		.4byte	.LASF1
 284 0033 03       		.uleb128 0x3
 285 0034 31000000 		.4byte	.LASF4
 286 0038 03       		.byte	0x3
 287 0039 29       		.byte	0x29
 288 003a 3E000000 		.4byte	0x3e
 289 003e 02       		.uleb128 0x2
 290 003f 02       		.byte	0x2
 291 0040 05       		.byte	0x5
 292 0041 21020000 		.4byte	.LASF2
 293 0045 02       		.uleb128 0x2
 294 0046 02       		.byte	0x2
 295 0047 07       		.byte	0x7
 296 0048 D1000000 		.4byte	.LASF3
 297 004c 03       		.uleb128 0x3
 298 004d 3B000000 		.4byte	.LASF5
 299 0051 03       		.byte	0x3
 300 0052 3F       		.byte	0x3f
 301 0053 57000000 		.4byte	0x57
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 22


 302 0057 02       		.uleb128 0x2
 303 0058 04       		.byte	0x4
 304 0059 05       		.byte	0x5
 305 005a 3B020000 		.4byte	.LASF6
 306 005e 03       		.uleb128 0x3
 307 005f 11010000 		.4byte	.LASF7
 308 0063 03       		.byte	0x3
 309 0064 41       		.byte	0x41
 310 0065 69000000 		.4byte	0x69
 311 0069 02       		.uleb128 0x2
 312 006a 04       		.byte	0x4
 313 006b 07       		.byte	0x7
 314 006c BF000000 		.4byte	.LASF8
 315 0070 03       		.uleb128 0x3
 316 0071 F8000000 		.4byte	.LASF9
 317 0075 03       		.byte	0x3
 318 0076 59       		.byte	0x59
 319 0077 7B000000 		.4byte	0x7b
 320 007b 02       		.uleb128 0x2
 321 007c 08       		.byte	0x8
 322 007d 05       		.byte	0x5
 323 007e 04020000 		.4byte	.LASF10
 324 0082 02       		.uleb128 0x2
 325 0083 08       		.byte	0x8
 326 0084 07       		.byte	0x7
 327 0085 29010000 		.4byte	.LASF11
 328 0089 04       		.uleb128 0x4
 329 008a 04       		.byte	0x4
 330 008b 05       		.byte	0x5
 331 008c 696E7400 		.ascii	"int\000"
 332 0090 02       		.uleb128 0x2
 333 0091 04       		.byte	0x4
 334 0092 07       		.byte	0x7
 335 0093 1C010000 		.4byte	.LASF12
 336 0097 03       		.uleb128 0x3
 337 0098 52010000 		.4byte	.LASF13
 338 009c 04       		.byte	0x4
 339 009d 20       		.byte	0x20
 340 009e 33000000 		.4byte	0x33
 341 00a2 03       		.uleb128 0x3
 342 00a3 F3010000 		.4byte	.LASF14
 343 00a7 04       		.byte	0x4
 344 00a8 2C       		.byte	0x2c
 345 00a9 4C000000 		.4byte	0x4c
 346 00ad 03       		.uleb128 0x3
 347 00ae 32020000 		.4byte	.LASF15
 348 00b2 04       		.byte	0x4
 349 00b3 2D       		.byte	0x2d
 350 00b4 5E000000 		.4byte	0x5e
 351 00b8 03       		.uleb128 0x3
 352 00b9 00000000 		.4byte	.LASF16
 353 00bd 04       		.byte	0x4
 354 00be 38       		.byte	0x38
 355 00bf 70000000 		.4byte	0x70
 356 00c3 02       		.uleb128 0x2
 357 00c4 04       		.byte	0x4
 358 00c5 07       		.byte	0x7
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 23


 359 00c6 FB010000 		.4byte	.LASF17
 360 00ca 02       		.uleb128 0x2
 361 00cb 01       		.byte	0x1
 362 00cc 08       		.byte	0x8
 363 00cd 1C020000 		.4byte	.LASF18
 364 00d1 02       		.uleb128 0x2
 365 00d2 08       		.byte	0x8
 366 00d3 04       		.byte	0x4
 367 00d4 0A010000 		.4byte	.LASF19
 368 00d8 02       		.uleb128 0x2
 369 00d9 04       		.byte	0x4
 370 00da 04       		.byte	0x4
 371 00db 9E000000 		.4byte	.LASF20
 372 00df 02       		.uleb128 0x2
 373 00e0 08       		.byte	0x8
 374 00e1 04       		.byte	0x4
 375 00e2 44020000 		.4byte	.LASF21
 376 00e6 05       		.uleb128 0x5
 377 00e7 98000000 		.4byte	.LASF22
 378 00eb 02       		.byte	0x2
 379 00ec 9601     		.2byte	0x196
 380 00ee 97000000 		.4byte	0x97
 381 00f2 05       		.uleb128 0x5
 382 00f3 A4000000 		.4byte	.LASF23
 383 00f7 02       		.byte	0x2
 384 00f8 9B01     		.2byte	0x19b
 385 00fa A2000000 		.4byte	0xa2
 386 00fe 05       		.uleb128 0x5
 387 00ff 4C010000 		.4byte	.LASF24
 388 0103 02       		.byte	0x2
 389 0104 A001     		.2byte	0x1a0
 390 0106 B8000000 		.4byte	0xb8
 391 010a 06       		.uleb128 0x6
 392 010b 04       		.byte	0x4
 393 010c E6000000 		.4byte	0xe6
 394 0110 07       		.uleb128 0x7
 395 0111 EC010000 		.4byte	.LASF37
 396 0115 02       		.byte	0x2
 397 0116 B402     		.2byte	0x2b4
 398 0118 F2000000 		.4byte	0xf2
 399 011c 03       		.byte	0x3
 400 011d 58010000 		.4byte	0x158
 401 0121 08       		.uleb128 0x8
 402 0122 7800     		.ascii	"x\000"
 403 0124 02       		.byte	0x2
 404 0125 B502     		.2byte	0x2b5
 405 0127 F2000000 		.4byte	0xf2
 406 012b 08       		.uleb128 0x8
 407 012c 7900     		.ascii	"y\000"
 408 012e 02       		.byte	0x2
 409 012f B602     		.2byte	0x2b6
 410 0131 AD000000 		.4byte	0xad
 411 0135 09       		.uleb128 0x9
 412 0136 2B020000 		.4byte	.LASF25
 413 013a 02       		.byte	0x2
 414 013b B802     		.2byte	0x2b8
 415 013d A2000000 		.4byte	0xa2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 24


 416 0141 09       		.uleb128 0x9
 417 0142 F1000000 		.4byte	.LASF26
 418 0146 02       		.byte	0x2
 419 0147 B802     		.2byte	0x2b8
 420 0149 A2000000 		.4byte	0xa2
 421 014d 0A       		.uleb128 0xa
 422 014e 6900     		.ascii	"i\000"
 423 0150 02       		.byte	0x2
 424 0151 B902     		.2byte	0x2b9
 425 0153 AD000000 		.4byte	0xad
 426 0157 00       		.byte	0
 427 0158 0B       		.uleb128 0xb
 428 0159 40010000 		.4byte	.LASF38
 429 015d 01       		.byte	0x1
 430 015e 3C       		.byte	0x3c
 431 015f 00000000 		.4byte	.LFB82
 432 0163 60010000 		.4byte	.LFE82-.LFB82
 433 0167 01       		.uleb128 0x1
 434 0168 9C       		.byte	0x9c
 435 0169 0C       		.uleb128 0xc
 436 016a 6A020000 		.4byte	.LASF27
 437 016e 01       		.byte	0x1
 438 016f 3D       		.byte	0x3d
 439 0170 0A010000 		.4byte	0x10a
 440 0174 03       		.uleb128 0x3
 441 0175 91       		.byte	0x91
 442 0176 B47F     		.sleb128 -76
 443 0178 0C       		.uleb128 0xc
 444 0179 12020000 		.4byte	.LASF28
 445 017d 01       		.byte	0x1
 446 017e 3E       		.byte	0x3e
 447 017f AD000000 		.4byte	0xad
 448 0183 03       		.uleb128 0x3
 449 0184 91       		.byte	0x91
 450 0185 B07F     		.sleb128 -80
 451 0187 0C       		.uleb128 0xc
 452 0188 02010000 		.4byte	.LASF29
 453 018c 01       		.byte	0x1
 454 018d 3F       		.byte	0x3f
 455 018e 0A010000 		.4byte	0x10a
 456 0192 03       		.uleb128 0x3
 457 0193 91       		.byte	0x91
 458 0194 AC7F     		.sleb128 -84
 459 0196 0D       		.uleb128 0xd
 460 0197 73756D00 		.ascii	"sum\000"
 461 019b 01       		.byte	0x1
 462 019c 41       		.byte	0x41
 463 019d F2000000 		.4byte	0xf2
 464 01a1 02       		.uleb128 0x2
 465 01a2 91       		.byte	0x91
 466 01a3 64       		.sleb128 -28
 467 01a4 0E       		.uleb128 0xe
 468 01a5 5C020000 		.4byte	.LASF30
 469 01a9 01       		.byte	0x1
 470 01aa 42       		.byte	0x42
 471 01ab F2000000 		.4byte	0xf2
 472 01af 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 25


 473 01b0 91       		.byte	0x91
 474 01b1 50       		.sleb128 -48
 475 01b2 0E       		.uleb128 0xe
 476 01b3 E4000000 		.4byte	.LASF31
 477 01b7 01       		.byte	0x1
 478 01b8 42       		.byte	0x42
 479 01b9 F2000000 		.4byte	0xf2
 480 01bd 02       		.uleb128 0x2
 481 01be 91       		.byte	0x91
 482 01bf 4C       		.sleb128 -52
 483 01c0 0E       		.uleb128 0xe
 484 01c1 B8000000 		.4byte	.LASF32
 485 01c5 01       		.byte	0x1
 486 01c6 43       		.byte	0x43
 487 01c7 AD000000 		.4byte	0xad
 488 01cb 02       		.uleb128 0x2
 489 01cc 91       		.byte	0x91
 490 01cd 60       		.sleb128 -32
 491 01ce 0E       		.uleb128 0xe
 492 01cf 8B000000 		.4byte	.LASF33
 493 01d3 01       		.byte	0x1
 494 01d4 44       		.byte	0x44
 495 01d5 FE000000 		.4byte	0xfe
 496 01d9 02       		.uleb128 0x2
 497 01da 91       		.byte	0x91
 498 01db 58       		.sleb128 -40
 499 01dc 0D       		.uleb128 0xd
 500 01dd 696E00   		.ascii	"in\000"
 501 01e0 01       		.byte	0x1
 502 01e1 49       		.byte	0x49
 503 01e2 E6000000 		.4byte	0xe6
 504 01e6 02       		.uleb128 0x2
 505 01e7 91       		.byte	0x91
 506 01e8 56       		.sleb128 -42
 507 01e9 0F       		.uleb128 0xf
 508 01ea 10010000 		.4byte	0x110
 509 01ee FA000000 		.4byte	.LBB4
 510 01f2 52000000 		.4byte	.LBE4-.LBB4
 511 01f6 01       		.byte	0x1
 512 01f7 A7       		.byte	0xa7
 513 01f8 10       		.uleb128 0x10
 514 01f9 2B010000 		.4byte	0x12b
 515 01fd 02       		.uleb128 0x2
 516 01fe 91       		.byte	0x91
 517 01ff 44       		.sleb128 -60
 518 0200 10       		.uleb128 0x10
 519 0201 21010000 		.4byte	0x121
 520 0205 02       		.uleb128 0x2
 521 0206 91       		.byte	0x91
 522 0207 48       		.sleb128 -56
 523 0208 11       		.uleb128 0x11
 524 0209 FA000000 		.4byte	.LBB5
 525 020d 52000000 		.4byte	.LBE5-.LBB5
 526 0211 12       		.uleb128 0x12
 527 0212 35010000 		.4byte	0x135
 528 0216 02       		.uleb128 0x2
 529 0217 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 26


 530 0218 40       		.sleb128 -64
 531 0219 12       		.uleb128 0x12
 532 021a 41010000 		.4byte	0x141
 533 021e 03       		.uleb128 0x3
 534 021f 91       		.byte	0x91
 535 0220 B87F     		.sleb128 -72
 536 0222 12       		.uleb128 0x12
 537 0223 4D010000 		.4byte	0x14d
 538 0227 03       		.uleb128 0x3
 539 0228 91       		.byte	0x91
 540 0229 BC7F     		.sleb128 -68
 541 022b 00       		.byte	0
 542 022c 00       		.byte	0
 543 022d 00       		.byte	0
 544 022e 00       		.byte	0
 545              		.section	.debug_abbrev,"",%progbits
 546              	.Ldebug_abbrev0:
 547 0000 01       		.uleb128 0x1
 548 0001 11       		.uleb128 0x11
 549 0002 01       		.byte	0x1
 550 0003 25       		.uleb128 0x25
 551 0004 0E       		.uleb128 0xe
 552 0005 13       		.uleb128 0x13
 553 0006 0B       		.uleb128 0xb
 554 0007 03       		.uleb128 0x3
 555 0008 0E       		.uleb128 0xe
 556 0009 1B       		.uleb128 0x1b
 557 000a 0E       		.uleb128 0xe
 558 000b 55       		.uleb128 0x55
 559 000c 17       		.uleb128 0x17
 560 000d 11       		.uleb128 0x11
 561 000e 01       		.uleb128 0x1
 562 000f 10       		.uleb128 0x10
 563 0010 17       		.uleb128 0x17
 564 0011 00       		.byte	0
 565 0012 00       		.byte	0
 566 0013 02       		.uleb128 0x2
 567 0014 24       		.uleb128 0x24
 568 0015 00       		.byte	0
 569 0016 0B       		.uleb128 0xb
 570 0017 0B       		.uleb128 0xb
 571 0018 3E       		.uleb128 0x3e
 572 0019 0B       		.uleb128 0xb
 573 001a 03       		.uleb128 0x3
 574 001b 0E       		.uleb128 0xe
 575 001c 00       		.byte	0
 576 001d 00       		.byte	0
 577 001e 03       		.uleb128 0x3
 578 001f 16       		.uleb128 0x16
 579 0020 00       		.byte	0
 580 0021 03       		.uleb128 0x3
 581 0022 0E       		.uleb128 0xe
 582 0023 3A       		.uleb128 0x3a
 583 0024 0B       		.uleb128 0xb
 584 0025 3B       		.uleb128 0x3b
 585 0026 0B       		.uleb128 0xb
 586 0027 49       		.uleb128 0x49
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 27


 587 0028 13       		.uleb128 0x13
 588 0029 00       		.byte	0
 589 002a 00       		.byte	0
 590 002b 04       		.uleb128 0x4
 591 002c 24       		.uleb128 0x24
 592 002d 00       		.byte	0
 593 002e 0B       		.uleb128 0xb
 594 002f 0B       		.uleb128 0xb
 595 0030 3E       		.uleb128 0x3e
 596 0031 0B       		.uleb128 0xb
 597 0032 03       		.uleb128 0x3
 598 0033 08       		.uleb128 0x8
 599 0034 00       		.byte	0
 600 0035 00       		.byte	0
 601 0036 05       		.uleb128 0x5
 602 0037 16       		.uleb128 0x16
 603 0038 00       		.byte	0
 604 0039 03       		.uleb128 0x3
 605 003a 0E       		.uleb128 0xe
 606 003b 3A       		.uleb128 0x3a
 607 003c 0B       		.uleb128 0xb
 608 003d 3B       		.uleb128 0x3b
 609 003e 05       		.uleb128 0x5
 610 003f 49       		.uleb128 0x49
 611 0040 13       		.uleb128 0x13
 612 0041 00       		.byte	0
 613 0042 00       		.byte	0
 614 0043 06       		.uleb128 0x6
 615 0044 0F       		.uleb128 0xf
 616 0045 00       		.byte	0
 617 0046 0B       		.uleb128 0xb
 618 0047 0B       		.uleb128 0xb
 619 0048 49       		.uleb128 0x49
 620 0049 13       		.uleb128 0x13
 621 004a 00       		.byte	0
 622 004b 00       		.byte	0
 623 004c 07       		.uleb128 0x7
 624 004d 2E       		.uleb128 0x2e
 625 004e 01       		.byte	0x1
 626 004f 03       		.uleb128 0x3
 627 0050 0E       		.uleb128 0xe
 628 0051 3A       		.uleb128 0x3a
 629 0052 0B       		.uleb128 0xb
 630 0053 3B       		.uleb128 0x3b
 631 0054 05       		.uleb128 0x5
 632 0055 27       		.uleb128 0x27
 633 0056 19       		.uleb128 0x19
 634 0057 49       		.uleb128 0x49
 635 0058 13       		.uleb128 0x13
 636 0059 20       		.uleb128 0x20
 637 005a 0B       		.uleb128 0xb
 638 005b 01       		.uleb128 0x1
 639 005c 13       		.uleb128 0x13
 640 005d 00       		.byte	0
 641 005e 00       		.byte	0
 642 005f 08       		.uleb128 0x8
 643 0060 05       		.uleb128 0x5
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 28


 644 0061 00       		.byte	0
 645 0062 03       		.uleb128 0x3
 646 0063 08       		.uleb128 0x8
 647 0064 3A       		.uleb128 0x3a
 648 0065 0B       		.uleb128 0xb
 649 0066 3B       		.uleb128 0x3b
 650 0067 05       		.uleb128 0x5
 651 0068 49       		.uleb128 0x49
 652 0069 13       		.uleb128 0x13
 653 006a 00       		.byte	0
 654 006b 00       		.byte	0
 655 006c 09       		.uleb128 0x9
 656 006d 34       		.uleb128 0x34
 657 006e 00       		.byte	0
 658 006f 03       		.uleb128 0x3
 659 0070 0E       		.uleb128 0xe
 660 0071 3A       		.uleb128 0x3a
 661 0072 0B       		.uleb128 0xb
 662 0073 3B       		.uleb128 0x3b
 663 0074 05       		.uleb128 0x5
 664 0075 49       		.uleb128 0x49
 665 0076 13       		.uleb128 0x13
 666 0077 00       		.byte	0
 667 0078 00       		.byte	0
 668 0079 0A       		.uleb128 0xa
 669 007a 34       		.uleb128 0x34
 670 007b 00       		.byte	0
 671 007c 03       		.uleb128 0x3
 672 007d 08       		.uleb128 0x8
 673 007e 3A       		.uleb128 0x3a
 674 007f 0B       		.uleb128 0xb
 675 0080 3B       		.uleb128 0x3b
 676 0081 05       		.uleb128 0x5
 677 0082 49       		.uleb128 0x49
 678 0083 13       		.uleb128 0x13
 679 0084 00       		.byte	0
 680 0085 00       		.byte	0
 681 0086 0B       		.uleb128 0xb
 682 0087 2E       		.uleb128 0x2e
 683 0088 01       		.byte	0x1
 684 0089 3F       		.uleb128 0x3f
 685 008a 19       		.uleb128 0x19
 686 008b 03       		.uleb128 0x3
 687 008c 0E       		.uleb128 0xe
 688 008d 3A       		.uleb128 0x3a
 689 008e 0B       		.uleb128 0xb
 690 008f 3B       		.uleb128 0x3b
 691 0090 0B       		.uleb128 0xb
 692 0091 27       		.uleb128 0x27
 693 0092 19       		.uleb128 0x19
 694 0093 11       		.uleb128 0x11
 695 0094 01       		.uleb128 0x1
 696 0095 12       		.uleb128 0x12
 697 0096 06       		.uleb128 0x6
 698 0097 40       		.uleb128 0x40
 699 0098 18       		.uleb128 0x18
 700 0099 9642     		.uleb128 0x2116
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 29


 701 009b 19       		.uleb128 0x19
 702 009c 00       		.byte	0
 703 009d 00       		.byte	0
 704 009e 0C       		.uleb128 0xc
 705 009f 05       		.uleb128 0x5
 706 00a0 00       		.byte	0
 707 00a1 03       		.uleb128 0x3
 708 00a2 0E       		.uleb128 0xe
 709 00a3 3A       		.uleb128 0x3a
 710 00a4 0B       		.uleb128 0xb
 711 00a5 3B       		.uleb128 0x3b
 712 00a6 0B       		.uleb128 0xb
 713 00a7 49       		.uleb128 0x49
 714 00a8 13       		.uleb128 0x13
 715 00a9 02       		.uleb128 0x2
 716 00aa 18       		.uleb128 0x18
 717 00ab 00       		.byte	0
 718 00ac 00       		.byte	0
 719 00ad 0D       		.uleb128 0xd
 720 00ae 34       		.uleb128 0x34
 721 00af 00       		.byte	0
 722 00b0 03       		.uleb128 0x3
 723 00b1 08       		.uleb128 0x8
 724 00b2 3A       		.uleb128 0x3a
 725 00b3 0B       		.uleb128 0xb
 726 00b4 3B       		.uleb128 0x3b
 727 00b5 0B       		.uleb128 0xb
 728 00b6 49       		.uleb128 0x49
 729 00b7 13       		.uleb128 0x13
 730 00b8 02       		.uleb128 0x2
 731 00b9 18       		.uleb128 0x18
 732 00ba 00       		.byte	0
 733 00bb 00       		.byte	0
 734 00bc 0E       		.uleb128 0xe
 735 00bd 34       		.uleb128 0x34
 736 00be 00       		.byte	0
 737 00bf 03       		.uleb128 0x3
 738 00c0 0E       		.uleb128 0xe
 739 00c1 3A       		.uleb128 0x3a
 740 00c2 0B       		.uleb128 0xb
 741 00c3 3B       		.uleb128 0x3b
 742 00c4 0B       		.uleb128 0xb
 743 00c5 49       		.uleb128 0x49
 744 00c6 13       		.uleb128 0x13
 745 00c7 02       		.uleb128 0x2
 746 00c8 18       		.uleb128 0x18
 747 00c9 00       		.byte	0
 748 00ca 00       		.byte	0
 749 00cb 0F       		.uleb128 0xf
 750 00cc 1D       		.uleb128 0x1d
 751 00cd 01       		.byte	0x1
 752 00ce 31       		.uleb128 0x31
 753 00cf 13       		.uleb128 0x13
 754 00d0 11       		.uleb128 0x11
 755 00d1 01       		.uleb128 0x1
 756 00d2 12       		.uleb128 0x12
 757 00d3 06       		.uleb128 0x6
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 30


 758 00d4 58       		.uleb128 0x58
 759 00d5 0B       		.uleb128 0xb
 760 00d6 59       		.uleb128 0x59
 761 00d7 0B       		.uleb128 0xb
 762 00d8 00       		.byte	0
 763 00d9 00       		.byte	0
 764 00da 10       		.uleb128 0x10
 765 00db 05       		.uleb128 0x5
 766 00dc 00       		.byte	0
 767 00dd 31       		.uleb128 0x31
 768 00de 13       		.uleb128 0x13
 769 00df 02       		.uleb128 0x2
 770 00e0 18       		.uleb128 0x18
 771 00e1 00       		.byte	0
 772 00e2 00       		.byte	0
 773 00e3 11       		.uleb128 0x11
 774 00e4 0B       		.uleb128 0xb
 775 00e5 01       		.byte	0x1
 776 00e6 11       		.uleb128 0x11
 777 00e7 01       		.uleb128 0x1
 778 00e8 12       		.uleb128 0x12
 779 00e9 06       		.uleb128 0x6
 780 00ea 00       		.byte	0
 781 00eb 00       		.byte	0
 782 00ec 12       		.uleb128 0x12
 783 00ed 34       		.uleb128 0x34
 784 00ee 00       		.byte	0
 785 00ef 31       		.uleb128 0x31
 786 00f0 13       		.uleb128 0x13
 787 00f1 02       		.uleb128 0x2
 788 00f2 18       		.uleb128 0x18
 789 00f3 00       		.byte	0
 790 00f4 00       		.byte	0
 791 00f5 00       		.byte	0
 792              		.section	.debug_aranges,"",%progbits
 793 0000 1C000000 		.4byte	0x1c
 794 0004 0200     		.2byte	0x2
 795 0006 00000000 		.4byte	.Ldebug_info0
 796 000a 04       		.byte	0x4
 797 000b 00       		.byte	0
 798 000c 0000     		.2byte	0
 799 000e 0000     		.2byte	0
 800 0010 00000000 		.4byte	.LFB82
 801 0014 60010000 		.4byte	.LFE82-.LFB82
 802 0018 00000000 		.4byte	0
 803 001c 00000000 		.4byte	0
 804              		.section	.debug_ranges,"",%progbits
 805              	.Ldebug_ranges0:
 806 0000 00000000 		.4byte	.LFB82
 807 0004 60010000 		.4byte	.LFE82
 808 0008 00000000 		.4byte	0
 809 000c 00000000 		.4byte	0
 810              		.section	.debug_line,"",%progbits
 811              	.Ldebug_line0:
 812 0000 98010000 		.section	.debug_str,"MS",%progbits,1
 812      02004F01 
 812      00000201 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 31


 812      FB0E0D00 
 812      01010101 
 813              	.LASF16:
 814 0000 696E7436 		.ascii	"int64_t\000"
 814      345F7400 
 815              	.LASF35:
 816 0008 536F7572 		.ascii	"Source\\StatisticsFunctions\\arm_std_q15.c\000"
 816      63655C53 
 816      74617469 
 816      73746963 
 816      7346756E 
 817              	.LASF4:
 818 0031 5F5F696E 		.ascii	"__int16_t\000"
 818      7431365F 
 818      7400
 819              	.LASF5:
 820 003b 5F5F696E 		.ascii	"__int32_t\000"
 820      7433325F 
 820      7400
 821              	.LASF36:
 822 0045 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 822      73657273 
 822      5C666E65 
 822      7665735C 
 822      446F6375 
 823 0072 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 823      655F7370 
 823      6565645F 
 823      73656E73 
 823      6F722E63 
 824              	.LASF33:
 825 008b 73756D4F 		.ascii	"sumOfSquares\000"
 825      66537175 
 825      61726573 
 825      00
 826              	.LASF22:
 827 0098 7131355F 		.ascii	"q15_t\000"
 827      7400
 828              	.LASF20:
 829 009e 666C6F61 		.ascii	"float\000"
 829      7400
 830              	.LASF23:
 831 00a4 7133315F 		.ascii	"q31_t\000"
 831      7400
 832              	.LASF1:
 833 00aa 756E7369 		.ascii	"unsigned char\000"
 833      676E6564 
 833      20636861 
 833      7200
 834              	.LASF32:
 835 00b8 626C6B43 		.ascii	"blkCnt\000"
 835      6E7400
 836              	.LASF8:
 837 00bf 6C6F6E67 		.ascii	"long unsigned int\000"
 837      20756E73 
 837      69676E65 
 837      6420696E 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 32


 837      7400
 838              	.LASF3:
 839 00d1 73686F72 		.ascii	"short unsigned int\000"
 839      7420756E 
 839      7369676E 
 839      65642069 
 839      6E7400
 840              	.LASF31:
 841 00e4 73717561 		.ascii	"squareOfMean\000"
 841      72654F66 
 841      4D65616E 
 841      00
 842              	.LASF26:
 843 00f1 6E65674D 		.ascii	"negMin\000"
 843      696E00
 844              	.LASF9:
 845 00f8 5F5F696E 		.ascii	"__int64_t\000"
 845      7436345F 
 845      7400
 846              	.LASF29:
 847 0102 70526573 		.ascii	"pResult\000"
 847      756C7400 
 848              	.LASF19:
 849 010a 646F7562 		.ascii	"double\000"
 849      6C6500
 850              	.LASF7:
 851 0111 5F5F7569 		.ascii	"__uint32_t\000"
 851      6E743332 
 851      5F7400
 852              	.LASF12:
 853 011c 756E7369 		.ascii	"unsigned int\000"
 853      676E6564 
 853      20696E74 
 853      00
 854              	.LASF11:
 855 0129 6C6F6E67 		.ascii	"long long unsigned int\000"
 855      206C6F6E 
 855      6720756E 
 855      7369676E 
 855      65642069 
 856              	.LASF38:
 857 0140 61726D5F 		.ascii	"arm_std_q15\000"
 857      7374645F 
 857      71313500 
 858              	.LASF24:
 859 014c 7136335F 		.ascii	"q63_t\000"
 859      7400
 860              	.LASF13:
 861 0152 696E7431 		.ascii	"int16_t\000"
 861      365F7400 
 862              	.LASF34:
 863 015a 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 863      4320342E 
 863      392E3320 
 863      32303135 
 863      30333033 
 864 018d 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 33


 864      20726576 
 864      6973696F 
 864      6E203232 
 864      31323230 
 865 01c0 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 865      30202D66 
 865      66756E63 
 865      74696F6E 
 865      2D736563 
 866              	.LASF37:
 867 01ec 5F5F5353 		.ascii	"__SSAT\000"
 867      415400
 868              	.LASF14:
 869 01f3 696E7433 		.ascii	"int32_t\000"
 869      325F7400 
 870              	.LASF17:
 871 01fb 73697A65 		.ascii	"sizetype\000"
 871      74797065 
 871      00
 872              	.LASF10:
 873 0204 6C6F6E67 		.ascii	"long long int\000"
 873      206C6F6E 
 873      6720696E 
 873      7400
 874              	.LASF28:
 875 0212 626C6F63 		.ascii	"blockSize\000"
 875      6B53697A 
 875      6500
 876              	.LASF18:
 877 021c 63686172 		.ascii	"char\000"
 877      00
 878              	.LASF2:
 879 0221 73686F72 		.ascii	"short int\000"
 879      7420696E 
 879      7400
 880              	.LASF25:
 881 022b 706F734D 		.ascii	"posMax\000"
 881      617800
 882              	.LASF15:
 883 0232 75696E74 		.ascii	"uint32_t\000"
 883      33325F74 
 883      00
 884              	.LASF6:
 885 023b 6C6F6E67 		.ascii	"long int\000"
 885      20696E74 
 885      00
 886              	.LASF21:
 887 0244 6C6F6E67 		.ascii	"long double\000"
 887      20646F75 
 887      626C6500 
 888              	.LASF0:
 889 0250 7369676E 		.ascii	"signed char\000"
 889      65642063 
 889      68617200 
 890              	.LASF30:
 891 025c 6D65616E 		.ascii	"meanOfSquares\000"
 891      4F665371 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccBTt0gi.s 			page 34


 891      75617265 
 891      7300
 892              	.LASF27:
 893 026a 70537263 		.ascii	"pSrc\000"
 893      00
 894              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
