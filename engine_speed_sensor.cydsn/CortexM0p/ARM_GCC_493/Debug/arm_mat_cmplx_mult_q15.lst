ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_mat_cmplx_mult_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_mat_cmplx_mult_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_mat_cmplx_mult_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_mat_cmplx_mult_q15, %function
  23              	arm_mat_cmplx_mult_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\MatrixFunctions\\arm_mat_cmplx_mult_q15.c"
   1:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** /* ----------------------------------------------------------------------
   2:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * Title:        arm_cmplx_mat_mult_q15.c
   4:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * Description:  Q15 complex matrix multiplication
   5:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *
   6:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * $Date:        27. January 2017
   7:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * $Revision:    V.1.5.1
   8:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *
   9:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** /*
  12:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *
  14:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *
  16:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * not use this file except in compliance with the License.
  18:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * You may obtain a copy of the License at
  19:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *
  20:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *
  22:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * limitations under the License.
  27:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  */
  28:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
  29:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #include "arm_math.h"
  30:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
  31:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** /**
  32:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * @ingroup groupMatrix
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 2


  33:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  */
  34:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
  35:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** /**
  36:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * @addtogroup CmplxMatrixMult
  37:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * @{
  38:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  */
  39:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
  40:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
  41:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** /**
  42:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * @brief Q15 Complex matrix multiplication
  43:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * @param[in]       *pSrcA points to the first input complex matrix structure
  44:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * @param[in]       *pSrcB points to the second input complex matrix structure
  45:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * @param[out]      *pDst points to output complex matrix structure
  46:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * @param[in]		*pScratch points to the array for storing intermediate results
  47:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * @return     		The function returns either
  48:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  49:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *
  50:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * \par Conditions for optimum performance
  51:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *  Input, output and state buffers should be aligned by 32-bit
  52:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *
  53:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * \par Restrictions
  54:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *  If the silicon does not support unaligned memory access enable the macro UNALIGNED_SUPPORT_DISA
  55:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *	In this case input, output, scratch buffers should be aligned by 32-bit
  56:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *
  57:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * @details
  58:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  59:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *
  60:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * \par
  61:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * The function is implemented using a 64-bit internal accumulator. The inputs to the
  62:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * multiplications are in 1.15 format and multiplications yield a 2.30 result.
  63:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * The 2.30 intermediate
  64:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * results are accumulated in a 64-bit accumulator in 34.30 format. This approach
  65:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * provides 33 guard bits and there is no risk of overflow. The 34.30 result is then
  66:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * truncated to 34.15 format by discarding the low 15 bits and then saturated to
  67:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * 1.15 format.
  68:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *
  69:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * \par
  70:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  * Refer to <code>arm_mat_mult_fast_q15()</code> for a faster but less precise version of this func
  71:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  *
  72:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****  */
  73:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
  74:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
  75:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
  76:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
  77:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** arm_status arm_mat_cmplx_mult_q15(
  78:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   const arm_matrix_instance_q15 * pSrcA,
  79:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   const arm_matrix_instance_q15 * pSrcB,
  80:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   arm_matrix_instance_q15 * pDst,
  81:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   q15_t * pScratch)
  82:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** {
  26              		.loc 1 82 0
  27              		.cfi_startproc
  28 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  29              		.cfi_def_cfa_offset 20
  30              		.cfi_offset 4, -20
  31              		.cfi_offset 5, -16
  32              		.cfi_offset 6, -12
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 3


  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 BBB0     		sub	sp, sp, #236
  36              		.cfi_def_cfa_offset 256
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7864     		str	r0, [r7, #68]
  40 0008 3964     		str	r1, [r7, #64]
  41 000a FA63     		str	r2, [r7, #60]
  42 000c BB63     		str	r3, [r7, #56]
  83:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   /* accumulator */
  84:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   q15_t *pSrcBT = pScratch;                      /* input data matrix pointer for transpose */
  43              		.loc 1 84 0
  44 000e BB6B     		ldr	r3, [r7, #56]
  45 0010 9422     		mov	r2, #148
  46 0012 3821     		mov	r1, #56
  47 0014 8C46     		mov	ip, r1
  48 0016 BC44     		add	ip, ip, r7
  49 0018 6244     		add	r2, r2, ip
  50 001a 1360     		str	r3, [r2]
  85:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   q15_t *pInA = pSrcA->pData;                    /* input data matrix pointer A of Q15 type */
  51              		.loc 1 85 0
  52 001c 7B6C     		ldr	r3, [r7, #68]
  53 001e 5B68     		ldr	r3, [r3, #4]
  54 0020 3B65     		str	r3, [r7, #80]
  86:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   q15_t *pInB = pSrcB->pData;                    /* input data matrix pointer B of Q15 type */
  55              		.loc 1 86 0
  56 0022 3B6C     		ldr	r3, [r7, #64]
  57 0024 5B68     		ldr	r3, [r3, #4]
  58 0026 FB64     		str	r3, [r7, #76]
  87:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   q15_t *px;                                     /* Temporary output data matrix pointer */
  88:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
  59              		.loc 1 88 0
  60 0028 9223     		mov	r3, #146
  61 002a 3822     		mov	r2, #56
  62 002c BA18     		add	r2, r7, r2
  63 002e D218     		add	r2, r2, r3
  64 0030 7B6C     		ldr	r3, [r7, #68]
  65 0032 1B88     		ldrh	r3, [r3]
  66 0034 1380     		strh	r3, [r2]
  89:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  67              		.loc 1 89 0
  68 0036 9023     		mov	r3, #144
  69 0038 3822     		mov	r2, #56
  70 003a BA18     		add	r2, r7, r2
  71 003c D218     		add	r2, r2, r3
  72 003e 3B6C     		ldr	r3, [r7, #64]
  73 0040 5B88     		ldrh	r3, [r3, #2]
  74 0042 1380     		strh	r3, [r2]
  90:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
  75              		.loc 1 90 0
  76 0044 8E23     		mov	r3, #142
  77 0046 3822     		mov	r2, #56
  78 0048 BA18     		add	r2, r7, r2
  79 004a D218     		add	r2, r2, r3
  80 004c 7B6C     		ldr	r3, [r7, #68]
  81 004e 5B88     		ldrh	r3, [r3, #2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 4


  82 0050 1380     		strh	r3, [r2]
  91:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   uint16_t numRowsB = pSrcB->numRows;            /* number of rows of input matrix A    */
  83              		.loc 1 91 0
  84 0052 8C23     		mov	r3, #140
  85 0054 3822     		mov	r2, #56
  86 0056 BA18     		add	r2, r7, r2
  87 0058 D218     		add	r2, r2, r3
  88 005a 3B6C     		ldr	r3, [r7, #64]
  89 005c 1B88     		ldrh	r3, [r3]
  90 005e 1380     		strh	r3, [r2]
  92:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   uint16_t col, i = 0u, row = numRowsB, colCnt;  /* loop counters */
  91              		.loc 1 92 0
  92 0060 AC23     		mov	r3, #172
  93 0062 3822     		mov	r2, #56
  94 0064 BA18     		add	r2, r7, r2
  95 0066 D218     		add	r2, r2, r3
  96 0068 0023     		mov	r3, #0
  97 006a 1380     		strh	r3, [r2]
  98 006c AA23     		mov	r3, #170
  99 006e 3822     		mov	r2, #56
 100 0070 BA18     		add	r2, r7, r2
 101 0072 D218     		add	r2, r2, r3
 102 0074 8C23     		mov	r3, #140
 103 0076 3821     		mov	r1, #56
 104 0078 8C46     		mov	ip, r1
 105 007a BC44     		add	ip, ip, r7
 106 007c 6344     		add	r3, r3, ip
 107 007e 1B88     		ldrh	r3, [r3]
 108 0080 1380     		strh	r3, [r2]
 109              	.L6:
  93:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   arm_status status;                             /* status of matrix multiplication */
  94:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   q63_t sumReal, sumImag;
  95:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
  96:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #ifdef UNALIGNED_SUPPORT_DISABLE
  97:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   q15_t in;                                      /* Temporary variable to hold the input value */
  98:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   q15_t a, b, c, d;
  99:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #else
 100:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   q31_t in;                                      /* Temporary variable to hold the input value */
 101:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   q31_t prod1, prod2;
 102:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   q31_t pSourceA, pSourceB;
 103:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #endif
 104:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 105:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #ifdef ARM_MATH_MATRIX_CHECK
 106:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   /* Check for matrix mismatch condition */
 107:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
 108:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
 109:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   {
 110:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 111:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     status = ARM_MATH_SIZE_MISMATCH;
 112:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   }
 113:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   else
 114:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #endif
 115:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   {
 116:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     /* Matrix transpose */
 117:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     do
 118:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     {
 119:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       /* Apply loop unrolling and exchange the columns with row elements */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 5


 120:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       col = numColsB >> 2;
 110              		.loc 1 120 0
 111 0082 AE23     		mov	r3, #174
 112 0084 3822     		mov	r2, #56
 113 0086 BA18     		add	r2, r7, r2
 114 0088 D218     		add	r2, r2, r3
 115 008a 9023     		mov	r3, #144
 116 008c 3821     		mov	r1, #56
 117 008e 8C46     		mov	ip, r1
 118 0090 BC44     		add	ip, ip, r7
 119 0092 6344     		add	r3, r3, ip
 120 0094 1B88     		ldrh	r3, [r3]
 121 0096 9B08     		lsr	r3, r3, #2
 122 0098 1380     		strh	r3, [r2]
 121:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 122:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       /* The pointer px is set to starting address of the column being processed */
 123:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       px = pSrcBT + i;
 123              		.loc 1 123 0
 124 009a AC23     		mov	r3, #172
 125 009c 3822     		mov	r2, #56
 126 009e 9446     		mov	ip, r2
 127 00a0 BC44     		add	ip, ip, r7
 128 00a2 6344     		add	r3, r3, ip
 129 00a4 1B88     		ldrh	r3, [r3]
 130 00a6 5A00     		lsl	r2, r3, #1
 131 00a8 9423     		mov	r3, #148
 132 00aa 3821     		mov	r1, #56
 133 00ac 8C46     		mov	ip, r1
 134 00ae BC44     		add	ip, ip, r7
 135 00b0 6344     		add	r3, r3, ip
 136 00b2 1B68     		ldr	r3, [r3]
 137 00b4 9B18     		add	r3, r3, r2
 138 00b6 BB64     		str	r3, [r7, #72]
 124:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 125:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 126:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****        ** a second loop below computes the remaining 1 to 3 samples. */
 127:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       while (col > 0u)
 139              		.loc 1 127 0
 140 00b8 A0E0     		b	.L2
 141              	.L3:
 128:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       {
 129:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #ifdef UNALIGNED_SUPPORT_DISABLE
 130:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Read two elements from the row */
 131:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *pInB++;
 132:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         *px = in;
 133:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *pInB++;
 134:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px[1] = in;
 135:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 136:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 137:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px += numRowsB * 2;
 138:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 139:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Read two elements from the row */
 140:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *pInB++;
 141:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         *px = in;
 142:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *pInB++;
 143:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px[1] = in;
 144:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 6


 145:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 146:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px += numRowsB * 2;
 147:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 148:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Read two elements from the row */
 149:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *pInB++;
 150:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         *px = in;
 151:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *pInB++;
 152:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px[1] = in;
 153:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 154:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 155:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px += numRowsB * 2;
 156:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 157:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Read two elements from the row */
 158:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *pInB++;
 159:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         *px = in;
 160:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *pInB++;
 161:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px[1] = in;
 162:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 163:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 164:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px += numRowsB * 2;
 165:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 166:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Decrement the column loop counter */
 167:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         col--;
 168:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       }
 169:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 170:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       /* If the columns of pSrcB is not a multiple of 4, compute any remaining output samples here.
 171:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****        ** No loop unrolling is used. */
 172:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       col = numColsB % 0x4u;
 173:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 174:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       while (col > 0u)
 175:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       {
 176:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Read two elements from the row */
 177:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *pInB++;
 178:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         *px = in;
 179:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *pInB++;
 180:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px[1] = in;
 181:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #else
 182:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 183:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Read two elements from the row */
 184:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *__SIMD32(pInB)++;
 142              		.loc 1 184 0
 143 00ba 1423     		mov	r3, #20
 144 00bc 3822     		mov	r2, #56
 145 00be BA18     		add	r2, r7, r2
 146 00c0 D218     		add	r2, r2, r3
 147 00c2 1168     		ldr	r1, [r2]
 148 00c4 0B1D     		add	r3, r1, #4
 149 00c6 1360     		str	r3, [r2]
 150 00c8 0B68     		ldr	r3, [r1]
 151 00ca 8822     		mov	r2, #136
 152 00cc 3821     		mov	r1, #56
 153 00ce 8C46     		mov	ip, r1
 154 00d0 BC44     		add	ip, ip, r7
 155 00d2 6244     		add	r2, r2, ip
 156 00d4 1360     		str	r3, [r2]
 185:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 186:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         *__SIMD32(px) = in;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 7


 157              		.loc 1 186 0
 158 00d6 1023     		mov	r3, #16
 159 00d8 3822     		mov	r2, #56
 160 00da 9446     		mov	ip, r2
 161 00dc BC44     		add	ip, ip, r7
 162 00de 6344     		add	r3, r3, ip
 163 00e0 1A68     		ldr	r2, [r3]
 164 00e2 8823     		mov	r3, #136
 165 00e4 3821     		mov	r1, #56
 166 00e6 8C46     		mov	ip, r1
 167 00e8 BC44     		add	ip, ip, r7
 168 00ea 6344     		add	r3, r3, ip
 169 00ec 1B68     		ldr	r3, [r3]
 170 00ee 1360     		str	r3, [r2]
 187:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 188:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 189:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px += numRowsB * 2;
 171              		.loc 1 189 0
 172 00f0 BA6C     		ldr	r2, [r7, #72]
 173 00f2 8C23     		mov	r3, #140
 174 00f4 3821     		mov	r1, #56
 175 00f6 8C46     		mov	ip, r1
 176 00f8 BC44     		add	ip, ip, r7
 177 00fa 6344     		add	r3, r3, ip
 178 00fc 1B88     		ldrh	r3, [r3]
 179 00fe 9B00     		lsl	r3, r3, #2
 180 0100 D318     		add	r3, r2, r3
 181 0102 BB64     		str	r3, [r7, #72]
 190:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 191:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 192:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Read two elements from the row */
 193:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *__SIMD32(pInB)++;
 182              		.loc 1 193 0
 183 0104 1423     		mov	r3, #20
 184 0106 3822     		mov	r2, #56
 185 0108 BA18     		add	r2, r7, r2
 186 010a D218     		add	r2, r2, r3
 187 010c 1168     		ldr	r1, [r2]
 188 010e 0B1D     		add	r3, r1, #4
 189 0110 1360     		str	r3, [r2]
 190 0112 0B68     		ldr	r3, [r1]
 191 0114 8822     		mov	r2, #136
 192 0116 3821     		mov	r1, #56
 193 0118 8C46     		mov	ip, r1
 194 011a BC44     		add	ip, ip, r7
 195 011c 6244     		add	r2, r2, ip
 196 011e 1360     		str	r3, [r2]
 194:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 195:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         *__SIMD32(px) = in;
 197              		.loc 1 195 0
 198 0120 1023     		mov	r3, #16
 199 0122 3822     		mov	r2, #56
 200 0124 9446     		mov	ip, r2
 201 0126 BC44     		add	ip, ip, r7
 202 0128 6344     		add	r3, r3, ip
 203 012a 1A68     		ldr	r2, [r3]
 204 012c 8823     		mov	r3, #136
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 8


 205 012e 3821     		mov	r1, #56
 206 0130 8C46     		mov	ip, r1
 207 0132 BC44     		add	ip, ip, r7
 208 0134 6344     		add	r3, r3, ip
 209 0136 1B68     		ldr	r3, [r3]
 210 0138 1360     		str	r3, [r2]
 196:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 197:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 198:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px += numRowsB * 2;
 211              		.loc 1 198 0
 212 013a BA6C     		ldr	r2, [r7, #72]
 213 013c 8C23     		mov	r3, #140
 214 013e 3821     		mov	r1, #56
 215 0140 8C46     		mov	ip, r1
 216 0142 BC44     		add	ip, ip, r7
 217 0144 6344     		add	r3, r3, ip
 218 0146 1B88     		ldrh	r3, [r3]
 219 0148 9B00     		lsl	r3, r3, #2
 220 014a D318     		add	r3, r2, r3
 221 014c BB64     		str	r3, [r7, #72]
 199:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 200:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Read two elements from the row */
 201:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *__SIMD32(pInB)++;
 222              		.loc 1 201 0
 223 014e 1423     		mov	r3, #20
 224 0150 3822     		mov	r2, #56
 225 0152 BA18     		add	r2, r7, r2
 226 0154 D218     		add	r2, r2, r3
 227 0156 1168     		ldr	r1, [r2]
 228 0158 0B1D     		add	r3, r1, #4
 229 015a 1360     		str	r3, [r2]
 230 015c 0B68     		ldr	r3, [r1]
 231 015e 8822     		mov	r2, #136
 232 0160 3821     		mov	r1, #56
 233 0162 8C46     		mov	ip, r1
 234 0164 BC44     		add	ip, ip, r7
 235 0166 6244     		add	r2, r2, ip
 236 0168 1360     		str	r3, [r2]
 202:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 203:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         *__SIMD32(px) = in;
 237              		.loc 1 203 0
 238 016a 1023     		mov	r3, #16
 239 016c 3822     		mov	r2, #56
 240 016e 9446     		mov	ip, r2
 241 0170 BC44     		add	ip, ip, r7
 242 0172 6344     		add	r3, r3, ip
 243 0174 1A68     		ldr	r2, [r3]
 244 0176 8823     		mov	r3, #136
 245 0178 3821     		mov	r1, #56
 246 017a 8C46     		mov	ip, r1
 247 017c BC44     		add	ip, ip, r7
 248 017e 6344     		add	r3, r3, ip
 249 0180 1B68     		ldr	r3, [r3]
 250 0182 1360     		str	r3, [r2]
 204:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 205:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 206:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px += numRowsB * 2;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 9


 251              		.loc 1 206 0
 252 0184 BA6C     		ldr	r2, [r7, #72]
 253 0186 8C23     		mov	r3, #140
 254 0188 3821     		mov	r1, #56
 255 018a 8C46     		mov	ip, r1
 256 018c BC44     		add	ip, ip, r7
 257 018e 6344     		add	r3, r3, ip
 258 0190 1B88     		ldrh	r3, [r3]
 259 0192 9B00     		lsl	r3, r3, #2
 260 0194 D318     		add	r3, r2, r3
 261 0196 BB64     		str	r3, [r7, #72]
 207:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 208:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Read two elements from the row */
 209:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *__SIMD32(pInB)++;
 262              		.loc 1 209 0
 263 0198 1423     		mov	r3, #20
 264 019a 3822     		mov	r2, #56
 265 019c BA18     		add	r2, r7, r2
 266 019e D218     		add	r2, r2, r3
 267 01a0 1168     		ldr	r1, [r2]
 268 01a2 0B1D     		add	r3, r1, #4
 269 01a4 1360     		str	r3, [r2]
 270 01a6 0B68     		ldr	r3, [r1]
 271 01a8 8822     		mov	r2, #136
 272 01aa 3821     		mov	r1, #56
 273 01ac 8C46     		mov	ip, r1
 274 01ae BC44     		add	ip, ip, r7
 275 01b0 6244     		add	r2, r2, ip
 276 01b2 1360     		str	r3, [r2]
 210:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 211:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         *__SIMD32(px) = in;
 277              		.loc 1 211 0
 278 01b4 1023     		mov	r3, #16
 279 01b6 3822     		mov	r2, #56
 280 01b8 9446     		mov	ip, r2
 281 01ba BC44     		add	ip, ip, r7
 282 01bc 6344     		add	r3, r3, ip
 283 01be 1A68     		ldr	r2, [r3]
 284 01c0 8823     		mov	r3, #136
 285 01c2 3821     		mov	r1, #56
 286 01c4 8C46     		mov	ip, r1
 287 01c6 BC44     		add	ip, ip, r7
 288 01c8 6344     		add	r3, r3, ip
 289 01ca 1B68     		ldr	r3, [r3]
 290 01cc 1360     		str	r3, [r2]
 212:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 213:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 214:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px += numRowsB * 2;
 291              		.loc 1 214 0
 292 01ce BA6C     		ldr	r2, [r7, #72]
 293 01d0 8C23     		mov	r3, #140
 294 01d2 3821     		mov	r1, #56
 295 01d4 8C46     		mov	ip, r1
 296 01d6 BC44     		add	ip, ip, r7
 297 01d8 6344     		add	r3, r3, ip
 298 01da 1B88     		ldrh	r3, [r3]
 299 01dc 9B00     		lsl	r3, r3, #2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 10


 300 01de D318     		add	r3, r2, r3
 301 01e0 BB64     		str	r3, [r7, #72]
 215:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 216:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Decrement the column loop counter */
 217:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         col--;
 302              		.loc 1 217 0
 303 01e2 AE23     		mov	r3, #174
 304 01e4 3822     		mov	r2, #56
 305 01e6 9446     		mov	ip, r2
 306 01e8 BC44     		add	ip, ip, r7
 307 01ea 6344     		add	r3, r3, ip
 308 01ec 1B88     		ldrh	r3, [r3]
 309 01ee AE22     		mov	r2, #174
 310 01f0 3821     		mov	r1, #56
 311 01f2 8C46     		mov	ip, r1
 312 01f4 BC44     		add	ip, ip, r7
 313 01f6 6244     		add	r2, r2, ip
 314 01f8 013B     		sub	r3, r3, #1
 315 01fa 1380     		strh	r3, [r2]
 316              	.L2:
 127:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       {
 317              		.loc 1 127 0
 318 01fc AE23     		mov	r3, #174
 319 01fe 3822     		mov	r2, #56
 320 0200 9446     		mov	ip, r2
 321 0202 BC44     		add	ip, ip, r7
 322 0204 6344     		add	r3, r3, ip
 323 0206 1B88     		ldrh	r3, [r3]
 324 0208 002B     		cmp	r3, #0
 325 020a 00D0     		beq	.LCB280
 326 020c 55E7     		b	.L3	@long jump
 327              	.LCB280:
 218:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       }
 219:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 220:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       /* If the columns of pSrcB is not a multiple of 4, compute any remaining output samples here.
 221:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****        ** No loop unrolling is used. */
 222:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       col = numColsB % 0x4u;
 328              		.loc 1 222 0
 329 020e AE23     		mov	r3, #174
 330 0210 3822     		mov	r2, #56
 331 0212 BA18     		add	r2, r7, r2
 332 0214 D118     		add	r1, r2, r3
 333 0216 9023     		mov	r3, #144
 334 0218 3822     		mov	r2, #56
 335 021a 9446     		mov	ip, r2
 336 021c BC44     		add	ip, ip, r7
 337 021e 6344     		add	r3, r3, ip
 338 0220 1A88     		ldrh	r2, [r3]
 339 0222 0323     		mov	r3, #3
 340 0224 1340     		and	r3, r2
 341 0226 0B80     		strh	r3, [r1]
 223:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 224:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       while (col > 0u)
 342              		.loc 1 224 0
 343 0228 31E0     		b	.L4
 344              	.L5:
 225:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 11


 226:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Read two elements from the row */
 227:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         in = *__SIMD32(pInB)++;
 345              		.loc 1 227 0
 346 022a 1423     		mov	r3, #20
 347 022c 3822     		mov	r2, #56
 348 022e BA18     		add	r2, r7, r2
 349 0230 D218     		add	r2, r2, r3
 350 0232 1168     		ldr	r1, [r2]
 351 0234 0B1D     		add	r3, r1, #4
 352 0236 1360     		str	r3, [r2]
 353 0238 0B68     		ldr	r3, [r1]
 354 023a 8822     		mov	r2, #136
 355 023c 3821     		mov	r1, #56
 356 023e 8C46     		mov	ip, r1
 357 0240 BC44     		add	ip, ip, r7
 358 0242 6244     		add	r2, r2, ip
 359 0244 1360     		str	r3, [r2]
 228:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 229:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         *__SIMD32(px) = in;
 360              		.loc 1 229 0
 361 0246 1023     		mov	r3, #16
 362 0248 3822     		mov	r2, #56
 363 024a 9446     		mov	ip, r2
 364 024c BC44     		add	ip, ip, r7
 365 024e 6344     		add	r3, r3, ip
 366 0250 1A68     		ldr	r2, [r3]
 367 0252 8823     		mov	r3, #136
 368 0254 3821     		mov	r1, #56
 369 0256 8C46     		mov	ip, r1
 370 0258 BC44     		add	ip, ip, r7
 371 025a 6344     		add	r3, r3, ip
 372 025c 1B68     		ldr	r3, [r3]
 373 025e 1360     		str	r3, [r2]
 230:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #endif
 231:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 232:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 233:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         px += numRowsB * 2;
 374              		.loc 1 233 0
 375 0260 BA6C     		ldr	r2, [r7, #72]
 376 0262 8C23     		mov	r3, #140
 377 0264 3821     		mov	r1, #56
 378 0266 8C46     		mov	ip, r1
 379 0268 BC44     		add	ip, ip, r7
 380 026a 6344     		add	r3, r3, ip
 381 026c 1B88     		ldrh	r3, [r3]
 382 026e 9B00     		lsl	r3, r3, #2
 383 0270 D318     		add	r3, r2, r3
 384 0272 BB64     		str	r3, [r7, #72]
 234:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 235:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Decrement the column loop counter */
 236:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         col--;
 385              		.loc 1 236 0
 386 0274 AE23     		mov	r3, #174
 387 0276 3822     		mov	r2, #56
 388 0278 9446     		mov	ip, r2
 389 027a BC44     		add	ip, ip, r7
 390 027c 6344     		add	r3, r3, ip
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 12


 391 027e 1B88     		ldrh	r3, [r3]
 392 0280 AE22     		mov	r2, #174
 393 0282 3821     		mov	r1, #56
 394 0284 8C46     		mov	ip, r1
 395 0286 BC44     		add	ip, ip, r7
 396 0288 6244     		add	r2, r2, ip
 397 028a 013B     		sub	r3, r3, #1
 398 028c 1380     		strh	r3, [r2]
 399              	.L4:
 224:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       {
 400              		.loc 1 224 0
 401 028e AE23     		mov	r3, #174
 402 0290 3822     		mov	r2, #56
 403 0292 9446     		mov	ip, r2
 404 0294 BC44     		add	ip, ip, r7
 405 0296 6344     		add	r3, r3, ip
 406 0298 1B88     		ldrh	r3, [r3]
 407 029a 002B     		cmp	r3, #0
 408 029c C5D1     		bne	.L5
 237:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       }
 238:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 239:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       i = i + 2u;
 409              		.loc 1 239 0
 410 029e AC23     		mov	r3, #172
 411 02a0 3822     		mov	r2, #56
 412 02a2 BA18     		add	r2, r7, r2
 413 02a4 D218     		add	r2, r2, r3
 414 02a6 AC23     		mov	r3, #172
 415 02a8 3821     		mov	r1, #56
 416 02aa 8C46     		mov	ip, r1
 417 02ac BC44     		add	ip, ip, r7
 418 02ae 6344     		add	r3, r3, ip
 419 02b0 1B88     		ldrh	r3, [r3]
 420 02b2 0233     		add	r3, r3, #2
 421 02b4 1380     		strh	r3, [r2]
 240:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 241:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       /* Decrement the row loop counter */
 242:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       row--;
 422              		.loc 1 242 0
 423 02b6 AA23     		mov	r3, #170
 424 02b8 3822     		mov	r2, #56
 425 02ba 9446     		mov	ip, r2
 426 02bc BC44     		add	ip, ip, r7
 427 02be 6344     		add	r3, r3, ip
 428 02c0 1B88     		ldrh	r3, [r3]
 429 02c2 AA22     		mov	r2, #170
 430 02c4 3821     		mov	r1, #56
 431 02c6 8C46     		mov	ip, r1
 432 02c8 BC44     		add	ip, ip, r7
 433 02ca 6244     		add	r2, r2, ip
 434 02cc 013B     		sub	r3, r3, #1
 435 02ce 1380     		strh	r3, [r2]
 243:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 244:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     } while (row > 0u);
 436              		.loc 1 244 0
 437 02d0 AA23     		mov	r3, #170
 438 02d2 3822     		mov	r2, #56
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 13


 439 02d4 9446     		mov	ip, r2
 440 02d6 BC44     		add	ip, ip, r7
 441 02d8 6344     		add	r3, r3, ip
 442 02da 1B88     		ldrh	r3, [r3]
 443 02dc 002B     		cmp	r3, #0
 444 02de 00D0     		beq	.LCB390
 445 02e0 CFE6     		b	.L6	@long jump
 446              	.LCB390:
 245:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 246:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     /* Reset the variables for the usage in the following multiplication process */
 247:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     row = numRowsA;
 447              		.loc 1 247 0
 448 02e2 AA23     		mov	r3, #170
 449 02e4 3822     		mov	r2, #56
 450 02e6 BA18     		add	r2, r7, r2
 451 02e8 D218     		add	r2, r2, r3
 452 02ea 9223     		mov	r3, #146
 453 02ec 3821     		mov	r1, #56
 454 02ee 8C46     		mov	ip, r1
 455 02f0 BC44     		add	ip, ip, r7
 456 02f2 6344     		add	r3, r3, ip
 457 02f4 1B88     		ldrh	r3, [r3]
 458 02f6 1380     		strh	r3, [r2]
 248:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     i = 0u;
 459              		.loc 1 248 0
 460 02f8 AC23     		mov	r3, #172
 461 02fa 3822     		mov	r2, #56
 462 02fc BA18     		add	r2, r7, r2
 463 02fe D218     		add	r2, r2, r3
 464 0300 0023     		mov	r3, #0
 465 0302 1380     		strh	r3, [r2]
 249:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     px = pDst->pData;
 466              		.loc 1 249 0
 467 0304 FB6B     		ldr	r3, [r7, #60]
 468 0306 5B68     		ldr	r3, [r3, #4]
 469 0308 BB64     		str	r3, [r7, #72]
 470              	.L29:
 250:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 251:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 252:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     /* row loop */
 253:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     do
 254:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     {
 255:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       /* For every row wise process, the column loop counter is to be initiated */
 256:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       col = numColsB;
 471              		.loc 1 256 0
 472 030a AE23     		mov	r3, #174
 473 030c 3822     		mov	r2, #56
 474 030e BA18     		add	r2, r7, r2
 475 0310 D218     		add	r2, r2, r3
 476 0312 9023     		mov	r3, #144
 477 0314 3821     		mov	r1, #56
 478 0316 8C46     		mov	ip, r1
 479 0318 BC44     		add	ip, ip, r7
 480 031a 6344     		add	r3, r3, ip
 481 031c 1B88     		ldrh	r3, [r3]
 482 031e 1380     		strh	r3, [r2]
 257:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 14


 258:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       /* For every row wise process, the pIn2 pointer is set
 259:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****        ** to the starting address of the transposed pSrcB data */
 260:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       pInB = pSrcBT;
 483              		.loc 1 260 0
 484 0320 9423     		mov	r3, #148
 485 0322 3822     		mov	r2, #56
 486 0324 9446     		mov	ip, r2
 487 0326 BC44     		add	ip, ip, r7
 488 0328 6344     		add	r3, r3, ip
 489 032a 1B68     		ldr	r3, [r3]
 490 032c FB64     		str	r3, [r7, #76]
 491              	.L28:
 261:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 262:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       /* column loop */
 263:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       do
 264:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       {
 265:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 266:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         sumReal = 0;
 492              		.loc 1 266 0
 493 032e 0023     		mov	r3, #0
 494 0330 0024     		mov	r4, #0
 495 0332 A022     		mov	r2, #160
 496 0334 3821     		mov	r1, #56
 497 0336 8C46     		mov	ip, r1
 498 0338 BC44     		add	ip, ip, r7
 499 033a 6244     		add	r2, r2, ip
 500 033c 1360     		str	r3, [r2]
 501 033e 5460     		str	r4, [r2, #4]
 267:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         sumImag = 0;
 502              		.loc 1 267 0
 503 0340 0023     		mov	r3, #0
 504 0342 0024     		mov	r4, #0
 505 0344 9822     		mov	r2, #152
 506 0346 3821     		mov	r1, #56
 507 0348 8C46     		mov	ip, r1
 508 034a BC44     		add	ip, ip, r7
 509 034c 6244     		add	r2, r2, ip
 510 034e 1360     		str	r3, [r2]
 511 0350 5460     		str	r4, [r2, #4]
 268:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 269:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Apply loop unrolling and compute 2 MACs simultaneously. */
 270:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         colCnt = numColsA >> 1;
 512              		.loc 1 270 0
 513 0352 A823     		mov	r3, #168
 514 0354 3822     		mov	r2, #56
 515 0356 BA18     		add	r2, r7, r2
 516 0358 D218     		add	r2, r2, r3
 517 035a 8E23     		mov	r3, #142
 518 035c 3821     		mov	r1, #56
 519 035e 8C46     		mov	ip, r1
 520 0360 BC44     		add	ip, ip, r7
 521 0362 6344     		add	r3, r3, ip
 522 0364 1B88     		ldrh	r3, [r3]
 523 0366 5B08     		lsr	r3, r3, #1
 524 0368 1380     		strh	r3, [r2]
 271:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 272:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Initiate the pointer pIn1 to point to the starting address of the column being processed
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 15


 273:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         pInA = pSrcA->pData + i * 2;
 525              		.loc 1 273 0
 526 036a 7B6C     		ldr	r3, [r7, #68]
 527 036c 5A68     		ldr	r2, [r3, #4]
 528 036e AC23     		mov	r3, #172
 529 0370 3821     		mov	r1, #56
 530 0372 8C46     		mov	ip, r1
 531 0374 BC44     		add	ip, ip, r7
 532 0376 6344     		add	r3, r3, ip
 533 0378 1B88     		ldrh	r3, [r3]
 534 037a 9B00     		lsl	r3, r3, #2
 535 037c D318     		add	r3, r2, r3
 536 037e 3B65     		str	r3, [r7, #80]
 274:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 275:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 276:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* matrix multiplication */
 277:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         while (colCnt > 0u)
 537              		.loc 1 277 0
 538 0380 50E1     		b	.L7
 539              	.L12:
 278:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         {
 279:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 280:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 281:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #ifdef UNALIGNED_SUPPORT_DISABLE
 282:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 283:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* read real and imag values from pSrcA buffer */
 284:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           a = *pInA;
 285:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           b = *(pInA + 1u);
 286:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* read real and imag values from pSrcB buffer */
 287:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           c = *pInB;
 288:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           d = *(pInB + 1u);
 289:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 290:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* Multiply and Accumlates */
 291:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumReal += (q31_t) a *c;
 292:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumImag += (q31_t) a *d;
 293:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumReal -= (q31_t) b *d;
 294:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumImag += (q31_t) b *c;
 295:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 296:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* read next real and imag values from pSrcA buffer */
 297:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           a = *(pInA + 2u);
 298:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           b = *(pInA + 3u);
 299:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* read next real and imag values from pSrcB buffer */
 300:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           c = *(pInB + 2u);
 301:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           d = *(pInB + 3u);
 302:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 303:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* update pointer */
 304:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           pInA += 4u;
 305:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 306:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* Multiply and Accumlates */
 307:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumReal += (q31_t) a *c;
 308:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumImag += (q31_t) a *d;
 309:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumReal -= (q31_t) b *d;
 310:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumImag += (q31_t) b *c;
 311:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* update pointer */
 312:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           pInB += 4u;
 313:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #else
 314:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* read real and imag values from pSrcA and pSrcB buffer */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 16


 315:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           pSourceA = *__SIMD32(pInA)++;
 540              		.loc 1 315 0
 541 0382 1823     		mov	r3, #24
 542 0384 3822     		mov	r2, #56
 543 0386 BA18     		add	r2, r7, r2
 544 0388 D218     		add	r2, r2, r3
 545 038a 1168     		ldr	r1, [r2]
 546 038c 0B1D     		add	r3, r1, #4
 547 038e 1360     		str	r3, [r2]
 548 0390 0B68     		ldr	r3, [r1]
 549 0392 8422     		mov	r2, #132
 550 0394 3821     		mov	r1, #56
 551 0396 8C46     		mov	ip, r1
 552 0398 BC44     		add	ip, ip, r7
 553 039a 6244     		add	r2, r2, ip
 554 039c 1360     		str	r3, [r2]
 316:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           pSourceB = *__SIMD32(pInB)++;
 555              		.loc 1 316 0
 556 039e 1423     		mov	r3, #20
 557 03a0 3822     		mov	r2, #56
 558 03a2 BA18     		add	r2, r7, r2
 559 03a4 D218     		add	r2, r2, r3
 560 03a6 1168     		ldr	r1, [r2]
 561 03a8 0B1D     		add	r3, r1, #4
 562 03aa 1360     		str	r3, [r2]
 563 03ac 0B68     		ldr	r3, [r1]
 564 03ae 8022     		mov	r2, #128
 565 03b0 3821     		mov	r1, #56
 566 03b2 8C46     		mov	ip, r1
 567 03b4 BC44     		add	ip, ip, r7
 568 03b6 6244     		add	r2, r2, ip
 569 03b8 1360     		str	r3, [r2]
 317:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 318:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* Multiply and Accumlates */
 319:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #ifdef ARM_MATH_BIG_ENDIAN
 320:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           prod1 = -__SMUSD(pSourceA, pSourceB);
 321:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #else
 322:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           prod1 = __SMUSD(pSourceA, pSourceB);
 570              		.loc 1 322 0
 571 03ba 8423     		mov	r3, #132
 572 03bc 3822     		mov	r2, #56
 573 03be 9446     		mov	ip, r2
 574 03c0 BC44     		add	ip, ip, r7
 575 03c2 6344     		add	r3, r3, ip
 576 03c4 1A68     		ldr	r2, [r3]
 577 03c6 8023     		mov	r3, #128
 578 03c8 3821     		mov	r1, #56
 579 03ca 8C46     		mov	ip, r1
 580 03cc BC44     		add	ip, ip, r7
 581 03ce 6344     		add	r3, r3, ip
 582 03d0 1B68     		ldr	r3, [r3]
 583 03d2 A821     		mov	r1, #168
 584 03d4 7918     		add	r1, r7, r1
 585 03d6 0A60     		str	r2, [r1]
 586 03d8 A422     		mov	r2, #164
 587 03da BA18     		add	r2, r7, r2
 588 03dc 1360     		str	r3, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 17


 589              	.LBB18:
 590              	.LBB19:
 591              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 18


  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 19


 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 20


 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 21


 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 22


 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 23


 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 24


 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 25


 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 26


 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 27


 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 28


 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 29


 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 724:.\Include/arm_math.h ****   }
 725:.\Include/arm_math.h **** #endif /* end of ARM_MATH_CM0_FAMILY */
 726:.\Include/arm_math.h **** 
 727:.\Include/arm_math.h **** 
 728:.\Include/arm_math.h ****   /*
 729:.\Include/arm_math.h ****    * @brief C custom defined intrinsic function for M3 and M0 processors
 730:.\Include/arm_math.h ****    */
 731:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 732:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 733:.\Include/arm_math.h **** 
 734:.\Include/arm_math.h ****   /*
 735:.\Include/arm_math.h ****    * @brief C custom defined QADD8 for M3 and M0 processors
 736:.\Include/arm_math.h ****    */
 737:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD8(
 738:.\Include/arm_math.h ****   uint32_t x,
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 30


 739:.\Include/arm_math.h ****   uint32_t y)
 740:.\Include/arm_math.h ****   {
 741:.\Include/arm_math.h ****     q31_t r, s, t, u;
 742:.\Include/arm_math.h **** 
 743:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) + (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 744:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) + (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 745:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) + (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 746:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) + (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 747:.\Include/arm_math.h **** 
 748:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 749:.\Include/arm_math.h ****   }
 750:.\Include/arm_math.h **** 
 751:.\Include/arm_math.h **** 
 752:.\Include/arm_math.h ****   /*
 753:.\Include/arm_math.h ****    * @brief C custom defined QSUB8 for M3 and M0 processors
 754:.\Include/arm_math.h ****    */
 755:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB8(
 756:.\Include/arm_math.h ****   uint32_t x,
 757:.\Include/arm_math.h ****   uint32_t y)
 758:.\Include/arm_math.h ****   {
 759:.\Include/arm_math.h ****     q31_t r, s, t, u;
 760:.\Include/arm_math.h **** 
 761:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) - (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 762:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) - (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 763:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) - (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 764:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) - (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 765:.\Include/arm_math.h **** 
 766:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 767:.\Include/arm_math.h ****   }
 768:.\Include/arm_math.h **** 
 769:.\Include/arm_math.h **** 
 770:.\Include/arm_math.h ****   /*
 771:.\Include/arm_math.h ****    * @brief C custom defined QADD16 for M3 and M0 processors
 772:.\Include/arm_math.h ****    */
 773:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD16(
 774:.\Include/arm_math.h ****   uint32_t x,
 775:.\Include/arm_math.h ****   uint32_t y)
 776:.\Include/arm_math.h ****   {
 777:.\Include/arm_math.h **** /*  q31_t r,     s;  without initialisation 'arm_offset_q15 test' fails  but 'intrinsic' tests pass
 778:.\Include/arm_math.h ****     q31_t r = 0, s = 0;
 779:.\Include/arm_math.h **** 
 780:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 781:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 782:.\Include/arm_math.h **** 
 783:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 784:.\Include/arm_math.h ****   }
 785:.\Include/arm_math.h **** 
 786:.\Include/arm_math.h **** 
 787:.\Include/arm_math.h ****   /*
 788:.\Include/arm_math.h ****    * @brief C custom defined SHADD16 for M3 and M0 processors
 789:.\Include/arm_math.h ****    */
 790:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHADD16(
 791:.\Include/arm_math.h ****   uint32_t x,
 792:.\Include/arm_math.h ****   uint32_t y)
 793:.\Include/arm_math.h ****   {
 794:.\Include/arm_math.h ****     q31_t r, s;
 795:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 31


 796:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 797:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 798:.\Include/arm_math.h **** 
 799:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 800:.\Include/arm_math.h ****   }
 801:.\Include/arm_math.h **** 
 802:.\Include/arm_math.h **** 
 803:.\Include/arm_math.h ****   /*
 804:.\Include/arm_math.h ****    * @brief C custom defined QSUB16 for M3 and M0 processors
 805:.\Include/arm_math.h ****    */
 806:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB16(
 807:.\Include/arm_math.h ****   uint32_t x,
 808:.\Include/arm_math.h ****   uint32_t y)
 809:.\Include/arm_math.h ****   {
 810:.\Include/arm_math.h ****     q31_t r, s;
 811:.\Include/arm_math.h **** 
 812:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 813:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 814:.\Include/arm_math.h **** 
 815:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 816:.\Include/arm_math.h ****   }
 817:.\Include/arm_math.h **** 
 818:.\Include/arm_math.h **** 
 819:.\Include/arm_math.h ****   /*
 820:.\Include/arm_math.h ****    * @brief C custom defined SHSUB16 for M3 and M0 processors
 821:.\Include/arm_math.h ****    */
 822:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSUB16(
 823:.\Include/arm_math.h ****   uint32_t x,
 824:.\Include/arm_math.h ****   uint32_t y)
 825:.\Include/arm_math.h ****   {
 826:.\Include/arm_math.h ****     q31_t r, s;
 827:.\Include/arm_math.h **** 
 828:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 829:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 830:.\Include/arm_math.h **** 
 831:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 832:.\Include/arm_math.h ****   }
 833:.\Include/arm_math.h **** 
 834:.\Include/arm_math.h **** 
 835:.\Include/arm_math.h ****   /*
 836:.\Include/arm_math.h ****    * @brief C custom defined QASX for M3 and M0 processors
 837:.\Include/arm_math.h ****    */
 838:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QASX(
 839:.\Include/arm_math.h ****   uint32_t x,
 840:.\Include/arm_math.h ****   uint32_t y)
 841:.\Include/arm_math.h ****   {
 842:.\Include/arm_math.h ****     q31_t r, s;
 843:.\Include/arm_math.h **** 
 844:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 845:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 846:.\Include/arm_math.h **** 
 847:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 848:.\Include/arm_math.h ****   }
 849:.\Include/arm_math.h **** 
 850:.\Include/arm_math.h **** 
 851:.\Include/arm_math.h ****   /*
 852:.\Include/arm_math.h ****    * @brief C custom defined SHASX for M3 and M0 processors
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 32


 853:.\Include/arm_math.h ****    */
 854:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHASX(
 855:.\Include/arm_math.h ****   uint32_t x,
 856:.\Include/arm_math.h ****   uint32_t y)
 857:.\Include/arm_math.h ****   {
 858:.\Include/arm_math.h ****     q31_t r, s;
 859:.\Include/arm_math.h **** 
 860:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 861:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 862:.\Include/arm_math.h **** 
 863:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 864:.\Include/arm_math.h ****   }
 865:.\Include/arm_math.h **** 
 866:.\Include/arm_math.h **** 
 867:.\Include/arm_math.h ****   /*
 868:.\Include/arm_math.h ****    * @brief C custom defined QSAX for M3 and M0 processors
 869:.\Include/arm_math.h ****    */
 870:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSAX(
 871:.\Include/arm_math.h ****   uint32_t x,
 872:.\Include/arm_math.h ****   uint32_t y)
 873:.\Include/arm_math.h ****   {
 874:.\Include/arm_math.h ****     q31_t r, s;
 875:.\Include/arm_math.h **** 
 876:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 877:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 878:.\Include/arm_math.h **** 
 879:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 880:.\Include/arm_math.h ****   }
 881:.\Include/arm_math.h **** 
 882:.\Include/arm_math.h **** 
 883:.\Include/arm_math.h ****   /*
 884:.\Include/arm_math.h ****    * @brief C custom defined SHSAX for M3 and M0 processors
 885:.\Include/arm_math.h ****    */
 886:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSAX(
 887:.\Include/arm_math.h ****   uint32_t x,
 888:.\Include/arm_math.h ****   uint32_t y)
 889:.\Include/arm_math.h ****   {
 890:.\Include/arm_math.h ****     q31_t r, s;
 891:.\Include/arm_math.h **** 
 892:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 893:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 894:.\Include/arm_math.h **** 
 895:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 896:.\Include/arm_math.h ****   }
 897:.\Include/arm_math.h **** 
 898:.\Include/arm_math.h **** 
 899:.\Include/arm_math.h ****   /*
 900:.\Include/arm_math.h ****    * @brief C custom defined SMUSDX for M3 and M0 processors
 901:.\Include/arm_math.h ****    */
 902:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUSDX(
 903:.\Include/arm_math.h ****   uint32_t x,
 904:.\Include/arm_math.h ****   uint32_t y)
 905:.\Include/arm_math.h ****   {
 906:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 907:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 908:.\Include/arm_math.h ****   }
 909:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 33


 910:.\Include/arm_math.h ****   /*
 911:.\Include/arm_math.h ****    * @brief C custom defined SMUADX for M3 and M0 processors
 912:.\Include/arm_math.h ****    */
 913:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUADX(
 914:.\Include/arm_math.h ****   uint32_t x,
 915:.\Include/arm_math.h ****   uint32_t y)
 916:.\Include/arm_math.h ****   {
 917:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 918:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 919:.\Include/arm_math.h ****   }
 920:.\Include/arm_math.h **** 
 921:.\Include/arm_math.h **** 
 922:.\Include/arm_math.h ****   /*
 923:.\Include/arm_math.h ****    * @brief C custom defined QADD for M3 and M0 processors
 924:.\Include/arm_math.h ****    */
 925:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QADD(
 926:.\Include/arm_math.h ****   int32_t x,
 927:.\Include/arm_math.h ****   int32_t y)
 928:.\Include/arm_math.h ****   {
 929:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x + (q31_t)y)));
 930:.\Include/arm_math.h ****   }
 931:.\Include/arm_math.h **** 
 932:.\Include/arm_math.h **** 
 933:.\Include/arm_math.h ****   /*
 934:.\Include/arm_math.h ****    * @brief C custom defined QSUB for M3 and M0 processors
 935:.\Include/arm_math.h ****    */
 936:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QSUB(
 937:.\Include/arm_math.h ****   int32_t x,
 938:.\Include/arm_math.h ****   int32_t y)
 939:.\Include/arm_math.h ****   {
 940:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x - (q31_t)y)));
 941:.\Include/arm_math.h ****   }
 942:.\Include/arm_math.h **** 
 943:.\Include/arm_math.h **** 
 944:.\Include/arm_math.h ****   /*
 945:.\Include/arm_math.h ****    * @brief C custom defined SMLAD for M3 and M0 processors
 946:.\Include/arm_math.h ****    */
 947:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLAD(
 948:.\Include/arm_math.h ****   uint32_t x,
 949:.\Include/arm_math.h ****   uint32_t y,
 950:.\Include/arm_math.h ****   uint32_t sum)
 951:.\Include/arm_math.h ****   {
 952:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 953:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 954:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 955:.\Include/arm_math.h ****   }
 956:.\Include/arm_math.h **** 
 957:.\Include/arm_math.h **** 
 958:.\Include/arm_math.h ****   /*
 959:.\Include/arm_math.h ****    * @brief C custom defined SMLADX for M3 and M0 processors
 960:.\Include/arm_math.h ****    */
 961:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLADX(
 962:.\Include/arm_math.h ****   uint32_t x,
 963:.\Include/arm_math.h ****   uint32_t y,
 964:.\Include/arm_math.h ****   uint32_t sum)
 965:.\Include/arm_math.h ****   {
 966:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 34


 967:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 968:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 969:.\Include/arm_math.h ****   }
 970:.\Include/arm_math.h **** 
 971:.\Include/arm_math.h **** 
 972:.\Include/arm_math.h ****   /*
 973:.\Include/arm_math.h ****    * @brief C custom defined SMLSDX for M3 and M0 processors
 974:.\Include/arm_math.h ****    */
 975:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLSDX(
 976:.\Include/arm_math.h ****   uint32_t x,
 977:.\Include/arm_math.h ****   uint32_t y,
 978:.\Include/arm_math.h ****   uint32_t sum)
 979:.\Include/arm_math.h ****   {
 980:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 981:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 982:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 983:.\Include/arm_math.h ****   }
 984:.\Include/arm_math.h **** 
 985:.\Include/arm_math.h **** 
 986:.\Include/arm_math.h ****   /*
 987:.\Include/arm_math.h ****    * @brief C custom defined SMLALD for M3 and M0 processors
 988:.\Include/arm_math.h ****    */
 989:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint64_t __SMLALD(
 990:.\Include/arm_math.h ****   uint32_t x,
 991:.\Include/arm_math.h ****   uint32_t y,
 992:.\Include/arm_math.h ****   uint64_t sum)
 993:.\Include/arm_math.h ****   {
 994:.\Include/arm_math.h **** /*  return (sum + ((q15_t) (x >> 16) * (q15_t) (y >> 16)) + ((q15_t) x * (q15_t) y)); */
 995:.\Include/arm_math.h ****     return ((uint64_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 996:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 997:.\Include/arm_math.h ****                        ( ((q63_t)sum    )                                  )   ));
 998:.\Include/arm_math.h ****   }
 999:.\Include/arm_math.h **** 
1000:.\Include/arm_math.h **** 
1001:.\Include/arm_math.h ****   /*
1002:.\Include/arm_math.h ****    * @brief C custom defined SMLALDX for M3 and M0 processors
1003:.\Include/arm_math.h ****    */
1004:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint64_t __SMLALDX(
1005:.\Include/arm_math.h ****   uint32_t x,
1006:.\Include/arm_math.h ****   uint32_t y,
1007:.\Include/arm_math.h ****   uint64_t sum)
1008:.\Include/arm_math.h ****   {
1009:.\Include/arm_math.h **** /*  return (sum + ((q15_t) (x >> 16) * (q15_t) y)) + ((q15_t) x * (q15_t) (y >> 16)); */
1010:.\Include/arm_math.h ****     return ((uint64_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
1011:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
1012:.\Include/arm_math.h ****                        ( ((q63_t)sum    )                                  )   ));
1013:.\Include/arm_math.h ****   }
1014:.\Include/arm_math.h **** 
1015:.\Include/arm_math.h **** 
1016:.\Include/arm_math.h ****   /*
1017:.\Include/arm_math.h ****    * @brief C custom defined SMUAD for M3 and M0 processors
1018:.\Include/arm_math.h ****    */
1019:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUAD(
1020:.\Include/arm_math.h ****   uint32_t x,
1021:.\Include/arm_math.h ****   uint32_t y)
1022:.\Include/arm_math.h ****   {
1023:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 35


1024:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16))   ));
1025:.\Include/arm_math.h ****   }
1026:.\Include/arm_math.h **** 
1027:.\Include/arm_math.h **** 
1028:.\Include/arm_math.h ****   /*
1029:.\Include/arm_math.h ****    * @brief C custom defined SMUSD for M3 and M0 processors
1030:.\Include/arm_math.h ****    */
1031:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUSD(
1032:.\Include/arm_math.h ****   uint32_t x,
1033:.\Include/arm_math.h ****   uint32_t y)
1034:.\Include/arm_math.h ****   {
1035:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) -
 592              		.loc 2 1035 0
 593 03de A823     		mov	r3, #168
 594 03e0 FB18     		add	r3, r7, r3
 595 03e2 1B68     		ldr	r3, [r3]
 596 03e4 1B04     		lsl	r3, r3, #16
 597 03e6 1A14     		asr	r2, r3, #16
 598 03e8 A423     		mov	r3, #164
 599 03ea FB18     		add	r3, r7, r3
 600 03ec 1B68     		ldr	r3, [r3]
 601 03ee 1B04     		lsl	r3, r3, #16
 602 03f0 1B14     		asr	r3, r3, #16
 603 03f2 5343     		mul	r3, r2
 604 03f4 191C     		mov	r1, r3
1036:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16))   ));
 605              		.loc 2 1036 0
 606 03f6 A823     		mov	r3, #168
 607 03f8 FB18     		add	r3, r7, r3
 608 03fa 1B68     		ldr	r3, [r3]
 609 03fc 1A14     		asr	r2, r3, #16
 610 03fe A423     		mov	r3, #164
 611 0400 FB18     		add	r3, r7, r3
 612 0402 1B68     		ldr	r3, [r3]
 613 0404 1B14     		asr	r3, r3, #16
 614 0406 5343     		mul	r3, r2
1035:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16))   ));
 615              		.loc 2 1035 0
 616 0408 CB1A     		sub	r3, r1, r3
 617              	.LBE19:
 618              	.LBE18:
 619              		.loc 1 322 0
 620 040a B422     		mov	r2, #180
 621 040c BA18     		add	r2, r7, r2
 622 040e 1360     		str	r3, [r2]
 323:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #endif
 324:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           prod2 = __SMUADX(pSourceA, pSourceB);
 623              		.loc 1 324 0
 624 0410 8423     		mov	r3, #132
 625 0412 3822     		mov	r2, #56
 626 0414 9446     		mov	ip, r2
 627 0416 BC44     		add	ip, ip, r7
 628 0418 6344     		add	r3, r3, ip
 629 041a 1A68     		ldr	r2, [r3]
 630 041c 8023     		mov	r3, #128
 631 041e 3821     		mov	r1, #56
 632 0420 8C46     		mov	ip, r1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 36


 633 0422 BC44     		add	ip, ip, r7
 634 0424 6344     		add	r3, r3, ip
 635 0426 1B68     		ldr	r3, [r3]
 636 0428 A021     		mov	r1, #160
 637 042a 7918     		add	r1, r7, r1
 638 042c 0A60     		str	r2, [r1]
 639 042e 9C22     		mov	r2, #156
 640 0430 BA18     		add	r2, r7, r2
 641 0432 1360     		str	r3, [r2]
 642              	.LBB20:
 643              	.LBB21:
 917:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 644              		.loc 2 917 0
 645 0434 A023     		mov	r3, #160
 646 0436 FB18     		add	r3, r7, r3
 647 0438 1B68     		ldr	r3, [r3]
 648 043a 1B04     		lsl	r3, r3, #16
 649 043c 1A14     		asr	r2, r3, #16
 650 043e 9C23     		mov	r3, #156
 651 0440 FB18     		add	r3, r7, r3
 652 0442 1B68     		ldr	r3, [r3]
 653 0444 1B14     		asr	r3, r3, #16
 654 0446 5343     		mul	r3, r2
 655 0448 191C     		mov	r1, r3
 918:.\Include/arm_math.h ****   }
 656              		.loc 2 918 0
 657 044a A023     		mov	r3, #160
 658 044c FB18     		add	r3, r7, r3
 659 044e 1B68     		ldr	r3, [r3]
 660 0450 1A14     		asr	r2, r3, #16
 661 0452 9C23     		mov	r3, #156
 662 0454 FB18     		add	r3, r7, r3
 663 0456 1B68     		ldr	r3, [r3]
 664 0458 1B04     		lsl	r3, r3, #16
 665 045a 1B14     		asr	r3, r3, #16
 666 045c 5343     		mul	r3, r2
 917:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 667              		.loc 2 917 0
 668 045e CB18     		add	r3, r1, r3
 669              	.LBE21:
 670              	.LBE20:
 671              		.loc 1 324 0
 672 0460 B022     		mov	r2, #176
 673 0462 BA18     		add	r2, r7, r2
 674 0464 1360     		str	r3, [r2]
 325:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumReal += (q63_t) prod1;
 675              		.loc 1 325 0
 676 0466 B423     		mov	r3, #180
 677 0468 FB18     		add	r3, r7, r3
 678 046a 1B68     		ldr	r3, [r3]
 679 046c BB62     		str	r3, [r7, #40]
 680 046e DB17     		asr	r3, r3, #31
 681 0470 FB62     		str	r3, [r7, #44]
 682 0472 A023     		mov	r3, #160
 683 0474 3822     		mov	r2, #56
 684 0476 9446     		mov	ip, r2
 685 0478 BC44     		add	ip, ip, r7
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 37


 686 047a 6344     		add	r3, r3, ip
 687 047c 5C68     		ldr	r4, [r3, #4]
 688 047e 1B68     		ldr	r3, [r3]
 689 0480 B96A     		ldr	r1, [r7, #40]
 690 0482 FA6A     		ldr	r2, [r7, #44]
 691 0484 5B18     		add	r3, r3, r1
 692 0486 5441     		adc	r4, r4, r2
 693 0488 A022     		mov	r2, #160
 694 048a 3821     		mov	r1, #56
 695 048c 8C46     		mov	ip, r1
 696 048e BC44     		add	ip, ip, r7
 697 0490 6244     		add	r2, r2, ip
 698 0492 1360     		str	r3, [r2]
 699 0494 5460     		str	r4, [r2, #4]
 326:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumImag += (q63_t) prod2;
 700              		.loc 1 326 0
 701 0496 B023     		mov	r3, #176
 702 0498 FB18     		add	r3, r7, r3
 703 049a 1B68     		ldr	r3, [r3]
 704 049c 3B62     		str	r3, [r7, #32]
 705 049e DB17     		asr	r3, r3, #31
 706 04a0 7B62     		str	r3, [r7, #36]
 707 04a2 9823     		mov	r3, #152
 708 04a4 3822     		mov	r2, #56
 709 04a6 9446     		mov	ip, r2
 710 04a8 BC44     		add	ip, ip, r7
 711 04aa 6344     		add	r3, r3, ip
 712 04ac 5C68     		ldr	r4, [r3, #4]
 713 04ae 1B68     		ldr	r3, [r3]
 714 04b0 396A     		ldr	r1, [r7, #32]
 715 04b2 7A6A     		ldr	r2, [r7, #36]
 716 04b4 5B18     		add	r3, r3, r1
 717 04b6 5441     		adc	r4, r4, r2
 718 04b8 9822     		mov	r2, #152
 719 04ba 3821     		mov	r1, #56
 720 04bc 8C46     		mov	ip, r1
 721 04be BC44     		add	ip, ip, r7
 722 04c0 6244     		add	r2, r2, ip
 723 04c2 1360     		str	r3, [r2]
 724 04c4 5460     		str	r4, [r2, #4]
 327:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 328:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* read real and imag values from pSrcA and pSrcB buffer */
 329:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           pSourceA = *__SIMD32(pInA)++;
 725              		.loc 1 329 0
 726 04c6 1823     		mov	r3, #24
 727 04c8 3822     		mov	r2, #56
 728 04ca BA18     		add	r2, r7, r2
 729 04cc D218     		add	r2, r2, r3
 730 04ce 1168     		ldr	r1, [r2]
 731 04d0 0B1D     		add	r3, r1, #4
 732 04d2 1360     		str	r3, [r2]
 733 04d4 0B68     		ldr	r3, [r1]
 734 04d6 8422     		mov	r2, #132
 735 04d8 3821     		mov	r1, #56
 736 04da 8C46     		mov	ip, r1
 737 04dc BC44     		add	ip, ip, r7
 738 04de 6244     		add	r2, r2, ip
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 38


 739 04e0 1360     		str	r3, [r2]
 330:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           pSourceB = *__SIMD32(pInB)++;
 740              		.loc 1 330 0
 741 04e2 1423     		mov	r3, #20
 742 04e4 3822     		mov	r2, #56
 743 04e6 BA18     		add	r2, r7, r2
 744 04e8 D218     		add	r2, r2, r3
 745 04ea 1168     		ldr	r1, [r2]
 746 04ec 0B1D     		add	r3, r1, #4
 747 04ee 1360     		str	r3, [r2]
 748 04f0 0B68     		ldr	r3, [r1]
 749 04f2 8022     		mov	r2, #128
 750 04f4 3821     		mov	r1, #56
 751 04f6 8C46     		mov	ip, r1
 752 04f8 BC44     		add	ip, ip, r7
 753 04fa 6244     		add	r2, r2, ip
 754 04fc 1360     		str	r3, [r2]
 331:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 332:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* Multiply and Accumlates */
 333:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #ifdef ARM_MATH_BIG_ENDIAN
 334:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           prod1 = -__SMUSD(pSourceA, pSourceB);
 335:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #else
 336:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           prod1 = __SMUSD(pSourceA, pSourceB);
 755              		.loc 1 336 0
 756 04fe 8423     		mov	r3, #132
 757 0500 3822     		mov	r2, #56
 758 0502 9446     		mov	ip, r2
 759 0504 BC44     		add	ip, ip, r7
 760 0506 6344     		add	r3, r3, ip
 761 0508 1A68     		ldr	r2, [r3]
 762 050a 8023     		mov	r3, #128
 763 050c 3821     		mov	r1, #56
 764 050e 8C46     		mov	ip, r1
 765 0510 BC44     		add	ip, ip, r7
 766 0512 6344     		add	r3, r3, ip
 767 0514 1B68     		ldr	r3, [r3]
 768 0516 9821     		mov	r1, #152
 769 0518 7918     		add	r1, r7, r1
 770 051a 0A60     		str	r2, [r1]
 771 051c 9422     		mov	r2, #148
 772 051e BA18     		add	r2, r7, r2
 773 0520 1360     		str	r3, [r2]
 774              	.LBB22:
 775              	.LBB23:
1035:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16))   ));
 776              		.loc 2 1035 0
 777 0522 9823     		mov	r3, #152
 778 0524 FB18     		add	r3, r7, r3
 779 0526 1B68     		ldr	r3, [r3]
 780 0528 1B04     		lsl	r3, r3, #16
 781 052a 1A14     		asr	r2, r3, #16
 782 052c 9423     		mov	r3, #148
 783 052e FB18     		add	r3, r7, r3
 784 0530 1B68     		ldr	r3, [r3]
 785 0532 1B04     		lsl	r3, r3, #16
 786 0534 1B14     		asr	r3, r3, #16
 787 0536 5343     		mul	r3, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 39


 788 0538 191C     		mov	r1, r3
 789              		.loc 2 1036 0
 790 053a 9823     		mov	r3, #152
 791 053c FB18     		add	r3, r7, r3
 792 053e 1B68     		ldr	r3, [r3]
 793 0540 1A14     		asr	r2, r3, #16
 794 0542 9423     		mov	r3, #148
 795 0544 FB18     		add	r3, r7, r3
 796 0546 1B68     		ldr	r3, [r3]
 797 0548 1B14     		asr	r3, r3, #16
 798 054a 5343     		mul	r3, r2
1035:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16))   ));
 799              		.loc 2 1035 0
 800 054c CB1A     		sub	r3, r1, r3
 801              	.LBE23:
 802              	.LBE22:
 803              		.loc 1 336 0
 804 054e B422     		mov	r2, #180
 805 0550 BA18     		add	r2, r7, r2
 806 0552 1360     		str	r3, [r2]
 337:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #endif
 338:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           prod2 = __SMUADX(pSourceA, pSourceB);
 807              		.loc 1 338 0
 808 0554 8423     		mov	r3, #132
 809 0556 3822     		mov	r2, #56
 810 0558 9446     		mov	ip, r2
 811 055a BC44     		add	ip, ip, r7
 812 055c 6344     		add	r3, r3, ip
 813 055e 1A68     		ldr	r2, [r3]
 814 0560 8023     		mov	r3, #128
 815 0562 3821     		mov	r1, #56
 816 0564 8C46     		mov	ip, r1
 817 0566 BC44     		add	ip, ip, r7
 818 0568 6344     		add	r3, r3, ip
 819 056a 1B68     		ldr	r3, [r3]
 820 056c 9021     		mov	r1, #144
 821 056e 7918     		add	r1, r7, r1
 822 0570 0A60     		str	r2, [r1]
 823 0572 8C22     		mov	r2, #140
 824 0574 BA18     		add	r2, r7, r2
 825 0576 1360     		str	r3, [r2]
 826              	.LBB24:
 827              	.LBB25:
 917:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 828              		.loc 2 917 0
 829 0578 9023     		mov	r3, #144
 830 057a FB18     		add	r3, r7, r3
 831 057c 1B68     		ldr	r3, [r3]
 832 057e 1B04     		lsl	r3, r3, #16
 833 0580 1A14     		asr	r2, r3, #16
 834 0582 8C23     		mov	r3, #140
 835 0584 FB18     		add	r3, r7, r3
 836 0586 1B68     		ldr	r3, [r3]
 837 0588 1B14     		asr	r3, r3, #16
 838 058a 5343     		mul	r3, r2
 839 058c 191C     		mov	r1, r3
 918:.\Include/arm_math.h ****   }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 40


 840              		.loc 2 918 0
 841 058e 9023     		mov	r3, #144
 842 0590 FB18     		add	r3, r7, r3
 843 0592 1B68     		ldr	r3, [r3]
 844 0594 1A14     		asr	r2, r3, #16
 845 0596 8C23     		mov	r3, #140
 846 0598 FB18     		add	r3, r7, r3
 847 059a 1B68     		ldr	r3, [r3]
 848 059c 1B04     		lsl	r3, r3, #16
 849 059e 1B14     		asr	r3, r3, #16
 850 05a0 5343     		mul	r3, r2
 917:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 851              		.loc 2 917 0
 852 05a2 CB18     		add	r3, r1, r3
 853              	.LBE25:
 854              	.LBE24:
 855              		.loc 1 338 0
 856 05a4 B022     		mov	r2, #176
 857 05a6 BA18     		add	r2, r7, r2
 858 05a8 1360     		str	r3, [r2]
 339:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumReal += (q63_t) prod1;
 859              		.loc 1 339 0
 860 05aa B423     		mov	r3, #180
 861 05ac FB18     		add	r3, r7, r3
 862 05ae 1B68     		ldr	r3, [r3]
 863 05b0 BB61     		str	r3, [r7, #24]
 864 05b2 DB17     		asr	r3, r3, #31
 865 05b4 FB61     		str	r3, [r7, #28]
 866 05b6 A023     		mov	r3, #160
 867 05b8 3822     		mov	r2, #56
 868 05ba 9446     		mov	ip, r2
 869 05bc BC44     		add	ip, ip, r7
 870 05be 6344     		add	r3, r3, ip
 871 05c0 5C68     		ldr	r4, [r3, #4]
 872 05c2 1B68     		ldr	r3, [r3]
 873 05c4 B969     		ldr	r1, [r7, #24]
 874 05c6 FA69     		ldr	r2, [r7, #28]
 875 05c8 5B18     		add	r3, r3, r1
 876 05ca 5441     		adc	r4, r4, r2
 877 05cc A022     		mov	r2, #160
 878 05ce 3821     		mov	r1, #56
 879 05d0 8C46     		mov	ip, r1
 880 05d2 BC44     		add	ip, ip, r7
 881 05d4 6244     		add	r2, r2, ip
 882 05d6 1360     		str	r3, [r2]
 883 05d8 5460     		str	r4, [r2, #4]
 340:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumImag += (q63_t) prod2;
 884              		.loc 1 340 0
 885 05da B023     		mov	r3, #176
 886 05dc FB18     		add	r3, r7, r3
 887 05de 1B68     		ldr	r3, [r3]
 888 05e0 3B61     		str	r3, [r7, #16]
 889 05e2 DB17     		asr	r3, r3, #31
 890 05e4 7B61     		str	r3, [r7, #20]
 891 05e6 9823     		mov	r3, #152
 892 05e8 3822     		mov	r2, #56
 893 05ea 9446     		mov	ip, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 41


 894 05ec BC44     		add	ip, ip, r7
 895 05ee 6344     		add	r3, r3, ip
 896 05f0 5C68     		ldr	r4, [r3, #4]
 897 05f2 1B68     		ldr	r3, [r3]
 898 05f4 3969     		ldr	r1, [r7, #16]
 899 05f6 7A69     		ldr	r2, [r7, #20]
 900 05f8 5B18     		add	r3, r3, r1
 901 05fa 5441     		adc	r4, r4, r2
 902 05fc 9822     		mov	r2, #152
 903 05fe 3821     		mov	r1, #56
 904 0600 8C46     		mov	ip, r1
 905 0602 BC44     		add	ip, ip, r7
 906 0604 6244     		add	r2, r2, ip
 907 0606 1360     		str	r3, [r2]
 908 0608 5460     		str	r4, [r2, #4]
 341:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 342:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #endif /*      #ifdef UNALIGNED_SUPPORT_DISABLE */
 343:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 344:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* Decrement the loop counter */
 345:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           colCnt--;
 909              		.loc 1 345 0
 910 060a A823     		mov	r3, #168
 911 060c 3822     		mov	r2, #56
 912 060e 9446     		mov	ip, r2
 913 0610 BC44     		add	ip, ip, r7
 914 0612 6344     		add	r3, r3, ip
 915 0614 1B88     		ldrh	r3, [r3]
 916 0616 A822     		mov	r2, #168
 917 0618 3821     		mov	r1, #56
 918 061a 8C46     		mov	ip, r1
 919 061c BC44     		add	ip, ip, r7
 920 061e 6244     		add	r2, r2, ip
 921 0620 013B     		sub	r3, r3, #1
 922 0622 1380     		strh	r3, [r2]
 923              	.L7:
 277:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         {
 924              		.loc 1 277 0
 925 0624 A823     		mov	r3, #168
 926 0626 3822     		mov	r2, #56
 927 0628 9446     		mov	ip, r2
 928 062a BC44     		add	ip, ip, r7
 929 062c 6344     		add	r3, r3, ip
 930 062e 1B88     		ldrh	r3, [r3]
 931 0630 002B     		cmp	r3, #0
 932 0632 00D0     		beq	.LCB822
 933 0634 A5E6     		b	.L12	@long jump
 934              	.LCB822:
 346:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         }
 347:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 348:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* process odd column samples */
 349:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         if ((numColsA & 0x1u) > 0u)
 935              		.loc 1 349 0
 936 0636 8E23     		mov	r3, #142
 937 0638 3822     		mov	r2, #56
 938 063a 9446     		mov	ip, r2
 939 063c BC44     		add	ip, ip, r7
 940 063e 6344     		add	r3, r3, ip
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 42


 941 0640 1A88     		ldrh	r2, [r3]
 942 0642 0123     		mov	r3, #1
 943 0644 1340     		and	r3, r2
 944 0646 00D1     		bne	.LCB832
 945 0648 9BE0     		b	.L13	@long jump
 946              	.LCB832:
 350:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         {
 351:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 352:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 353:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #ifdef UNALIGNED_SUPPORT_DISABLE
 354:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 355:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* read real and imag values from pSrcA and pSrcB buffer */
 356:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           a = *pInA++;
 357:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           b = *pInA++;
 358:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           c = *pInB++;
 359:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           d = *pInB++;
 360:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 361:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* Multiply and Accumlates */
 362:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumReal += (q31_t) a *c;
 363:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumImag += (q31_t) a *d;
 364:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumReal -= (q31_t) b *d;
 365:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumImag += (q31_t) b *c;
 366:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 367:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #else
 368:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* read real and imag values from pSrcA and pSrcB buffer */
 369:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           pSourceA = *__SIMD32(pInA)++;
 947              		.loc 1 369 0
 948 064a 1823     		mov	r3, #24
 949 064c 3822     		mov	r2, #56
 950 064e BA18     		add	r2, r7, r2
 951 0650 D218     		add	r2, r2, r3
 952 0652 1168     		ldr	r1, [r2]
 953 0654 0B1D     		add	r3, r1, #4
 954 0656 1360     		str	r3, [r2]
 955 0658 0B68     		ldr	r3, [r1]
 956 065a 8422     		mov	r2, #132
 957 065c 3821     		mov	r1, #56
 958 065e 8C46     		mov	ip, r1
 959 0660 BC44     		add	ip, ip, r7
 960 0662 6244     		add	r2, r2, ip
 961 0664 1360     		str	r3, [r2]
 370:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           pSourceB = *__SIMD32(pInB)++;
 962              		.loc 1 370 0
 963 0666 1423     		mov	r3, #20
 964 0668 3822     		mov	r2, #56
 965 066a BA18     		add	r2, r7, r2
 966 066c D218     		add	r2, r2, r3
 967 066e 1168     		ldr	r1, [r2]
 968 0670 0B1D     		add	r3, r1, #4
 969 0672 1360     		str	r3, [r2]
 970 0674 0B68     		ldr	r3, [r1]
 971 0676 8022     		mov	r2, #128
 972 0678 3821     		mov	r1, #56
 973 067a 8C46     		mov	ip, r1
 974 067c BC44     		add	ip, ip, r7
 975 067e 6244     		add	r2, r2, ip
 976 0680 1360     		str	r3, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 43


 371:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 372:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           /* Multiply and Accumlates */
 373:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #ifdef ARM_MATH_BIG_ENDIAN
 374:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           prod1 = -__SMUSD(pSourceA, pSourceB);
 375:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #else
 376:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           prod1 = __SMUSD(pSourceA, pSourceB);
 977              		.loc 1 376 0
 978 0682 8423     		mov	r3, #132
 979 0684 3822     		mov	r2, #56
 980 0686 9446     		mov	ip, r2
 981 0688 BC44     		add	ip, ip, r7
 982 068a 6344     		add	r3, r3, ip
 983 068c 1A68     		ldr	r2, [r3]
 984 068e 8023     		mov	r3, #128
 985 0690 3821     		mov	r1, #56
 986 0692 8C46     		mov	ip, r1
 987 0694 BC44     		add	ip, ip, r7
 988 0696 6344     		add	r3, r3, ip
 989 0698 1B68     		ldr	r3, [r3]
 990 069a 8821     		mov	r1, #136
 991 069c 7918     		add	r1, r7, r1
 992 069e 0A60     		str	r2, [r1]
 993 06a0 8422     		mov	r2, #132
 994 06a2 BA18     		add	r2, r7, r2
 995 06a4 1360     		str	r3, [r2]
 996              	.LBB26:
 997              	.LBB27:
1035:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16))   ));
 998              		.loc 2 1035 0
 999 06a6 8823     		mov	r3, #136
 1000 06a8 FB18     		add	r3, r7, r3
 1001 06aa 1B68     		ldr	r3, [r3]
 1002 06ac 1B04     		lsl	r3, r3, #16
 1003 06ae 1A14     		asr	r2, r3, #16
 1004 06b0 8423     		mov	r3, #132
 1005 06b2 FB18     		add	r3, r7, r3
 1006 06b4 1B68     		ldr	r3, [r3]
 1007 06b6 1B04     		lsl	r3, r3, #16
 1008 06b8 1B14     		asr	r3, r3, #16
 1009 06ba 5343     		mul	r3, r2
 1010 06bc 191C     		mov	r1, r3
 1011              		.loc 2 1036 0
 1012 06be 8823     		mov	r3, #136
 1013 06c0 FB18     		add	r3, r7, r3
 1014 06c2 1B68     		ldr	r3, [r3]
 1015 06c4 1A14     		asr	r2, r3, #16
 1016 06c6 8423     		mov	r3, #132
 1017 06c8 FB18     		add	r3, r7, r3
 1018 06ca 1B68     		ldr	r3, [r3]
 1019 06cc 1B14     		asr	r3, r3, #16
 1020 06ce 5343     		mul	r3, r2
1035:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16))   ));
 1021              		.loc 2 1035 0
 1022 06d0 CB1A     		sub	r3, r1, r3
 1023              	.LBE27:
 1024              	.LBE26:
 1025              		.loc 1 376 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 44


 1026 06d2 B422     		mov	r2, #180
 1027 06d4 BA18     		add	r2, r7, r2
 1028 06d6 1360     		str	r3, [r2]
 377:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #endif
 378:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           prod2 = __SMUADX(pSourceA, pSourceB);
 1029              		.loc 1 378 0
 1030 06d8 8423     		mov	r3, #132
 1031 06da 3822     		mov	r2, #56
 1032 06dc 9446     		mov	ip, r2
 1033 06de BC44     		add	ip, ip, r7
 1034 06e0 6344     		add	r3, r3, ip
 1035 06e2 1A68     		ldr	r2, [r3]
 1036 06e4 8023     		mov	r3, #128
 1037 06e6 3821     		mov	r1, #56
 1038 06e8 8C46     		mov	ip, r1
 1039 06ea BC44     		add	ip, ip, r7
 1040 06ec 6344     		add	r3, r3, ip
 1041 06ee 1B68     		ldr	r3, [r3]
 1042 06f0 8021     		mov	r1, #128
 1043 06f2 7918     		add	r1, r7, r1
 1044 06f4 0A60     		str	r2, [r1]
 1045 06f6 FB67     		str	r3, [r7, #124]
 1046              	.LBB28:
 1047              	.LBB29:
 917:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 1048              		.loc 2 917 0
 1049 06f8 8023     		mov	r3, #128
 1050 06fa FB18     		add	r3, r7, r3
 1051 06fc 1B68     		ldr	r3, [r3]
 1052 06fe 1B04     		lsl	r3, r3, #16
 1053 0700 1A14     		asr	r2, r3, #16
 1054 0702 FB6F     		ldr	r3, [r7, #124]
 1055 0704 1B14     		asr	r3, r3, #16
 1056 0706 5343     		mul	r3, r2
 1057 0708 191C     		mov	r1, r3
 918:.\Include/arm_math.h ****   }
 1058              		.loc 2 918 0
 1059 070a 8023     		mov	r3, #128
 1060 070c FB18     		add	r3, r7, r3
 1061 070e 1B68     		ldr	r3, [r3]
 1062 0710 1A14     		asr	r2, r3, #16
 1063 0712 FB6F     		ldr	r3, [r7, #124]
 1064 0714 1B04     		lsl	r3, r3, #16
 1065 0716 1B14     		asr	r3, r3, #16
 1066 0718 5343     		mul	r3, r2
 917:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 1067              		.loc 2 917 0
 1068 071a CB18     		add	r3, r1, r3
 1069              	.LBE29:
 1070              	.LBE28:
 1071              		.loc 1 378 0
 1072 071c B022     		mov	r2, #176
 1073 071e BA18     		add	r2, r7, r2
 1074 0720 1360     		str	r3, [r2]
 379:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumReal += (q63_t) prod1;
 1075              		.loc 1 379 0
 1076 0722 B423     		mov	r3, #180
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 45


 1077 0724 FB18     		add	r3, r7, r3
 1078 0726 1B68     		ldr	r3, [r3]
 1079 0728 BB60     		str	r3, [r7, #8]
 1080 072a DB17     		asr	r3, r3, #31
 1081 072c FB60     		str	r3, [r7, #12]
 1082 072e A023     		mov	r3, #160
 1083 0730 3822     		mov	r2, #56
 1084 0732 9446     		mov	ip, r2
 1085 0734 BC44     		add	ip, ip, r7
 1086 0736 6344     		add	r3, r3, ip
 1087 0738 5C68     		ldr	r4, [r3, #4]
 1088 073a 1B68     		ldr	r3, [r3]
 1089 073c B968     		ldr	r1, [r7, #8]
 1090 073e FA68     		ldr	r2, [r7, #12]
 1091 0740 5B18     		add	r3, r3, r1
 1092 0742 5441     		adc	r4, r4, r2
 1093 0744 A022     		mov	r2, #160
 1094 0746 3821     		mov	r1, #56
 1095 0748 8C46     		mov	ip, r1
 1096 074a BC44     		add	ip, ip, r7
 1097 074c 6244     		add	r2, r2, ip
 1098 074e 1360     		str	r3, [r2]
 1099 0750 5460     		str	r4, [r2, #4]
 380:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****           sumImag += (q63_t) prod2;
 1100              		.loc 1 380 0
 1101 0752 B023     		mov	r3, #176
 1102 0754 FB18     		add	r3, r7, r3
 1103 0756 1B68     		ldr	r3, [r3]
 1104 0758 3B60     		str	r3, [r7]
 1105 075a DB17     		asr	r3, r3, #31
 1106 075c 7B60     		str	r3, [r7, #4]
 1107 075e 9823     		mov	r3, #152
 1108 0760 3822     		mov	r2, #56
 1109 0762 9446     		mov	ip, r2
 1110 0764 BC44     		add	ip, ip, r7
 1111 0766 6344     		add	r3, r3, ip
 1112 0768 5C68     		ldr	r4, [r3, #4]
 1113 076a 1B68     		ldr	r3, [r3]
 1114 076c 3968     		ldr	r1, [r7]
 1115 076e 7A68     		ldr	r2, [r7, #4]
 1116 0770 5B18     		add	r3, r3, r1
 1117 0772 5441     		adc	r4, r4, r2
 1118 0774 9822     		mov	r2, #152
 1119 0776 3821     		mov	r1, #56
 1120 0778 8C46     		mov	ip, r1
 1121 077a BC44     		add	ip, ip, r7
 1122 077c 6244     		add	r2, r2, ip
 1123 077e 1360     		str	r3, [r2]
 1124 0780 5460     		str	r4, [r2, #4]
 1125              	.L13:
 381:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 382:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** #endif /*      #ifdef UNALIGNED_SUPPORT_DISABLE */
 383:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 384:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         }
 385:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 386:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Saturate and store the result in the destination buffer */
 387:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 46


 388:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         *px++ = (q15_t) (__SSAT(sumReal >> 15, 16));
 1126              		.loc 1 388 0
 1127 0782 B96C     		ldr	r1, [r7, #72]
 1128 0784 8B1C     		add	r3, r1, #2
 1129 0786 BB64     		str	r3, [r7, #72]
 1130 0788 A423     		mov	r3, #164
 1131 078a 3822     		mov	r2, #56
 1132 078c 9446     		mov	ip, r2
 1133 078e BC44     		add	ip, ip, r7
 1134 0790 6344     		add	r3, r3, ip
 1135 0792 1B68     		ldr	r3, [r3]
 1136 0794 5A04     		lsl	r2, r3, #17
 1137 0796 A023     		mov	r3, #160
 1138 0798 3820     		mov	r0, #56
 1139 079a 8446     		mov	ip, r0
 1140 079c BC44     		add	ip, ip, r7
 1141 079e 6344     		add	r3, r3, ip
 1142 07a0 1B68     		ldr	r3, [r3]
 1143 07a2 DD0B     		lsr	r5, r3, #15
 1144 07a4 1543     		orr	r5, r2
 1145 07a6 A423     		mov	r3, #164
 1146 07a8 3822     		mov	r2, #56
 1147 07aa 9446     		mov	ip, r2
 1148 07ac BC44     		add	ip, ip, r7
 1149 07ae 6344     		add	r3, r3, ip
 1150 07b0 1B68     		ldr	r3, [r3]
 1151 07b2 DE13     		asr	r6, r3, #15
 1152 07b4 2B1C     		mov	r3, r5
 1153 07b6 BB67     		str	r3, [r7, #120]
 1154 07b8 1023     		mov	r3, #16
 1155 07ba 7B67     		str	r3, [r7, #116]
 1156              	.LBB30:
 1157              	.LBB31:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 1158              		.loc 2 699 0
 1159 07bc 0123     		mov	r3, #1
 1160 07be 3B67     		str	r3, [r7, #112]
 700:.\Include/arm_math.h ****     {
 1161              		.loc 2 700 0
 1162 07c0 0023     		mov	r3, #0
 1163 07c2 FB66     		str	r3, [r7, #108]
 1164 07c4 05E0     		b	.L16
 1165              	.L17:
 702:.\Include/arm_math.h ****     }
 1166              		.loc 2 702 0
 1167 07c6 3B6F     		ldr	r3, [r7, #112]
 1168 07c8 5B00     		lsl	r3, r3, #1
 1169 07ca 3B67     		str	r3, [r7, #112]
 700:.\Include/arm_math.h ****     {
 1170              		.loc 2 700 0
 1171 07cc FB6E     		ldr	r3, [r7, #108]
 1172 07ce 0133     		add	r3, r3, #1
 1173 07d0 FB66     		str	r3, [r7, #108]
 1174              	.L16:
 1175 07d2 7B6F     		ldr	r3, [r7, #116]
 1176 07d4 5A1E     		sub	r2, r3, #1
 1177 07d6 FB6E     		ldr	r3, [r7, #108]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 47


 1178 07d8 9342     		cmp	r3, r2
 1179 07da F4D3     		bcc	.L17
 705:.\Include/arm_math.h ****     {
 1180              		.loc 2 705 0
 1181 07dc BB6F     		ldr	r3, [r7, #120]
 1182 07de 002B     		cmp	r3, #0
 1183 07e0 09DD     		ble	.L18
 707:.\Include/arm_math.h **** 
 1184              		.loc 2 707 0
 1185 07e2 3B6F     		ldr	r3, [r7, #112]
 1186 07e4 013B     		sub	r3, r3, #1
 1187 07e6 3B67     		str	r3, [r7, #112]
 709:.\Include/arm_math.h ****       {
 1188              		.loc 2 709 0
 1189 07e8 BA6F     		ldr	r2, [r7, #120]
 1190 07ea 3B6F     		ldr	r3, [r7, #112]
 1191 07ec 9A42     		cmp	r2, r3
 1192 07ee 0CDD     		ble	.L31
 711:.\Include/arm_math.h ****       }
 1193              		.loc 2 711 0
 1194 07f0 3B6F     		ldr	r3, [r7, #112]
 1195 07f2 BB67     		str	r3, [r7, #120]
 1196 07f4 0AE0     		b	.L20
 1197              	.L18:
 716:.\Include/arm_math.h **** 
 1198              		.loc 2 716 0
 1199 07f6 3B6F     		ldr	r3, [r7, #112]
 1200 07f8 5B42     		neg	r3, r3
 1201 07fa BB66     		str	r3, [r7, #104]
 718:.\Include/arm_math.h ****       {
 1202              		.loc 2 718 0
 1203 07fc BA6F     		ldr	r2, [r7, #120]
 1204 07fe BB6E     		ldr	r3, [r7, #104]
 1205 0800 9A42     		cmp	r2, r3
 1206 0802 03DA     		bge	.L20
 720:.\Include/arm_math.h ****       }
 1207              		.loc 2 720 0
 1208 0804 BB6E     		ldr	r3, [r7, #104]
 1209 0806 BB67     		str	r3, [r7, #120]
 1210 0808 00E0     		b	.L20
 1211              	.L31:
 711:.\Include/arm_math.h ****       }
 1212              		.loc 2 711 0
 1213 080a C046     		mov	r8, r8
 1214              	.L20:
 723:.\Include/arm_math.h ****   }
 1215              		.loc 2 723 0
 1216 080c BB6F     		ldr	r3, [r7, #120]
 1217              	.LBE31:
 1218              	.LBE30:
 1219              		.loc 1 388 0
 1220 080e 9BB2     		uxth	r3, r3
 1221 0810 0B80     		strh	r3, [r1]
 389:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         *px++ = (q15_t) (__SSAT(sumImag >> 15, 16));
 1222              		.loc 1 389 0
 1223 0812 B96C     		ldr	r1, [r7, #72]
 1224 0814 8B1C     		add	r3, r1, #2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 48


 1225 0816 BB64     		str	r3, [r7, #72]
 1226 0818 9C23     		mov	r3, #156
 1227 081a 3822     		mov	r2, #56
 1228 081c 9446     		mov	ip, r2
 1229 081e BC44     		add	ip, ip, r7
 1230 0820 6344     		add	r3, r3, ip
 1231 0822 1B68     		ldr	r3, [r3]
 1232 0824 5A04     		lsl	r2, r3, #17
 1233 0826 9823     		mov	r3, #152
 1234 0828 3820     		mov	r0, #56
 1235 082a 8446     		mov	ip, r0
 1236 082c BC44     		add	ip, ip, r7
 1237 082e 6344     		add	r3, r3, ip
 1238 0830 1B68     		ldr	r3, [r3]
 1239 0832 DB0B     		lsr	r3, r3, #15
 1240 0834 3B63     		str	r3, [r7, #48]
 1241 0836 3B6B     		ldr	r3, [r7, #48]
 1242 0838 1343     		orr	r3, r2
 1243 083a 3B63     		str	r3, [r7, #48]
 1244 083c 9C23     		mov	r3, #156
 1245 083e 3822     		mov	r2, #56
 1246 0840 9446     		mov	ip, r2
 1247 0842 BC44     		add	ip, ip, r7
 1248 0844 6344     		add	r3, r3, ip
 1249 0846 1B68     		ldr	r3, [r3]
 1250 0848 DB13     		asr	r3, r3, #15
 1251 084a 7B63     		str	r3, [r7, #52]
 1252 084c 3B6B     		ldr	r3, [r7, #48]
 1253 084e 7B66     		str	r3, [r7, #100]
 1254 0850 1023     		mov	r3, #16
 1255 0852 3B66     		str	r3, [r7, #96]
 1256              	.LBB32:
 1257              	.LBB33:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 1258              		.loc 2 699 0
 1259 0854 0123     		mov	r3, #1
 1260 0856 FB65     		str	r3, [r7, #92]
 700:.\Include/arm_math.h ****     {
 1261              		.loc 2 700 0
 1262 0858 0023     		mov	r3, #0
 1263 085a BB65     		str	r3, [r7, #88]
 1264 085c 05E0     		b	.L22
 1265              	.L23:
 702:.\Include/arm_math.h ****     }
 1266              		.loc 2 702 0
 1267 085e FB6D     		ldr	r3, [r7, #92]
 1268 0860 5B00     		lsl	r3, r3, #1
 1269 0862 FB65     		str	r3, [r7, #92]
 700:.\Include/arm_math.h ****     {
 1270              		.loc 2 700 0
 1271 0864 BB6D     		ldr	r3, [r7, #88]
 1272 0866 0133     		add	r3, r3, #1
 1273 0868 BB65     		str	r3, [r7, #88]
 1274              	.L22:
 1275 086a 3B6E     		ldr	r3, [r7, #96]
 1276 086c 5A1E     		sub	r2, r3, #1
 1277 086e BB6D     		ldr	r3, [r7, #88]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 49


 1278 0870 9342     		cmp	r3, r2
 1279 0872 F4D3     		bcc	.L23
 705:.\Include/arm_math.h ****     {
 1280              		.loc 2 705 0
 1281 0874 7B6E     		ldr	r3, [r7, #100]
 1282 0876 002B     		cmp	r3, #0
 1283 0878 09DD     		ble	.L24
 707:.\Include/arm_math.h **** 
 1284              		.loc 2 707 0
 1285 087a FB6D     		ldr	r3, [r7, #92]
 1286 087c 013B     		sub	r3, r3, #1
 1287 087e FB65     		str	r3, [r7, #92]
 709:.\Include/arm_math.h ****       {
 1288              		.loc 2 709 0
 1289 0880 7A6E     		ldr	r2, [r7, #100]
 1290 0882 FB6D     		ldr	r3, [r7, #92]
 1291 0884 9A42     		cmp	r2, r3
 1292 0886 0CDD     		ble	.L32
 711:.\Include/arm_math.h ****       }
 1293              		.loc 2 711 0
 1294 0888 FB6D     		ldr	r3, [r7, #92]
 1295 088a 7B66     		str	r3, [r7, #100]
 1296 088c 0AE0     		b	.L26
 1297              	.L24:
 716:.\Include/arm_math.h **** 
 1298              		.loc 2 716 0
 1299 088e FB6D     		ldr	r3, [r7, #92]
 1300 0890 5B42     		neg	r3, r3
 1301 0892 7B65     		str	r3, [r7, #84]
 718:.\Include/arm_math.h ****       {
 1302              		.loc 2 718 0
 1303 0894 7A6E     		ldr	r2, [r7, #100]
 1304 0896 7B6D     		ldr	r3, [r7, #84]
 1305 0898 9A42     		cmp	r2, r3
 1306 089a 03DA     		bge	.L26
 720:.\Include/arm_math.h ****       }
 1307              		.loc 2 720 0
 1308 089c 7B6D     		ldr	r3, [r7, #84]
 1309 089e 7B66     		str	r3, [r7, #100]
 1310 08a0 00E0     		b	.L26
 1311              	.L32:
 711:.\Include/arm_math.h ****       }
 1312              		.loc 2 711 0
 1313 08a2 C046     		mov	r8, r8
 1314              	.L26:
 723:.\Include/arm_math.h ****   }
 1315              		.loc 2 723 0
 1316 08a4 7B6E     		ldr	r3, [r7, #100]
 1317              	.LBE33:
 1318              	.LBE32:
 1319              		.loc 1 389 0
 1320 08a6 9BB2     		uxth	r3, r3
 1321 08a8 0B80     		strh	r3, [r1]
 390:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 391:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         /* Decrement the column loop counter */
 392:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****         col--;
 1322              		.loc 1 392 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 50


 1323 08aa AE23     		mov	r3, #174
 1324 08ac 3822     		mov	r2, #56
 1325 08ae 9446     		mov	ip, r2
 1326 08b0 BC44     		add	ip, ip, r7
 1327 08b2 6344     		add	r3, r3, ip
 1328 08b4 1B88     		ldrh	r3, [r3]
 1329 08b6 AE22     		mov	r2, #174
 1330 08b8 3821     		mov	r1, #56
 1331 08ba 8C46     		mov	ip, r1
 1332 08bc BC44     		add	ip, ip, r7
 1333 08be 6244     		add	r2, r2, ip
 1334 08c0 013B     		sub	r3, r3, #1
 1335 08c2 1380     		strh	r3, [r2]
 393:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 394:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       } while (col > 0u);
 1336              		.loc 1 394 0
 1337 08c4 AE23     		mov	r3, #174
 1338 08c6 3822     		mov	r2, #56
 1339 08c8 9446     		mov	ip, r2
 1340 08ca BC44     		add	ip, ip, r7
 1341 08cc 6344     		add	r3, r3, ip
 1342 08ce 1B88     		ldrh	r3, [r3]
 1343 08d0 002B     		cmp	r3, #0
 1344 08d2 00D0     		beq	.LCB1193
 1345 08d4 2BE5     		b	.L28	@long jump
 1346              	.LCB1193:
 395:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 396:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       i = i + numColsA;
 1347              		.loc 1 396 0
 1348 08d6 AC23     		mov	r3, #172
 1349 08d8 3822     		mov	r2, #56
 1350 08da BA18     		add	r2, r7, r2
 1351 08dc D118     		add	r1, r2, r3
 1352 08de AC23     		mov	r3, #172
 1353 08e0 3822     		mov	r2, #56
 1354 08e2 BA18     		add	r2, r7, r2
 1355 08e4 D218     		add	r2, r2, r3
 1356 08e6 8E23     		mov	r3, #142
 1357 08e8 3820     		mov	r0, #56
 1358 08ea 8446     		mov	ip, r0
 1359 08ec BC44     		add	ip, ip, r7
 1360 08ee 6344     		add	r3, r3, ip
 1361 08f0 1288     		ldrh	r2, [r2]
 1362 08f2 1B88     		ldrh	r3, [r3]
 1363 08f4 D318     		add	r3, r2, r3
 1364 08f6 0B80     		strh	r3, [r1]
 397:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 398:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       /* Decrement the row loop counter */
 399:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****       row--;
 1365              		.loc 1 399 0
 1366 08f8 AA23     		mov	r3, #170
 1367 08fa 3822     		mov	r2, #56
 1368 08fc 9446     		mov	ip, r2
 1369 08fe BC44     		add	ip, ip, r7
 1370 0900 6344     		add	r3, r3, ip
 1371 0902 1B88     		ldrh	r3, [r3]
 1372 0904 AA22     		mov	r2, #170
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 51


 1373 0906 3821     		mov	r1, #56
 1374 0908 8C46     		mov	ip, r1
 1375 090a BC44     		add	ip, ip, r7
 1376 090c 6244     		add	r2, r2, ip
 1377 090e 013B     		sub	r3, r3, #1
 1378 0910 1380     		strh	r3, [r2]
 400:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 401:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     } while (row > 0u);
 1379              		.loc 1 401 0
 1380 0912 AA23     		mov	r3, #170
 1381 0914 3822     		mov	r2, #56
 1382 0916 9446     		mov	ip, r2
 1383 0918 BC44     		add	ip, ip, r7
 1384 091a 6344     		add	r3, r3, ip
 1385 091c 1B88     		ldrh	r3, [r3]
 1386 091e 002B     		cmp	r3, #0
 1387 0920 00D0     		beq	.LCB1231
 1388 0922 F2E4     		b	.L29	@long jump
 1389              	.LCB1231:
 402:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 403:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     /* set status as ARM_MATH_SUCCESS */
 404:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****     status = ARM_MATH_SUCCESS;
 1390              		.loc 1 404 0
 1391 0924 7723     		mov	r3, #119
 1392 0926 3822     		mov	r2, #56
 1393 0928 9446     		mov	ip, r2
 1394 092a BC44     		add	ip, ip, r7
 1395 092c 6344     		add	r3, r3, ip
 1396 092e 0022     		mov	r2, #0
 1397 0930 1A70     		strb	r2, [r3]
 405:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   }
 406:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** 
 407:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   /* Return to application */
 408:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c ****   return (status);
 1398              		.loc 1 408 0
 1399 0932 7723     		mov	r3, #119
 1400 0934 3822     		mov	r2, #56
 1401 0936 9446     		mov	ip, r2
 1402 0938 BC44     		add	ip, ip, r7
 1403 093a 6344     		add	r3, r3, ip
 1404 093c 1B78     		ldrb	r3, [r3]
 1405 093e 5BB2     		sxtb	r3, r3
 409:Source\MatrixFunctions/arm_mat_cmplx_mult_q15.c **** }
 1406              		.loc 1 409 0
 1407 0940 181C     		mov	r0, r3
 1408 0942 BD46     		mov	sp, r7
 1409 0944 3BB0     		add	sp, sp, #236
 1410              		@ sp needed
 1411 0946 F0BD     		pop	{r4, r5, r6, r7, pc}
 1412              		.cfi_endproc
 1413              	.LFE82:
 1414              		.size	arm_mat_cmplx_mult_q15, .-arm_mat_cmplx_mult_q15
 1415              		.text
 1416              	.Letext0:
 1417              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1418              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1419              		.section	.debug_info,"",%progbits
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 52


 1420              	.Ldebug_info0:
 1421 0000 35050000 		.4byte	0x535
 1422 0004 0400     		.2byte	0x4
 1423 0006 00000000 		.4byte	.Ldebug_abbrev0
 1424 000a 04       		.byte	0x4
 1425 000b 01       		.uleb128 0x1
 1426 000c 06010000 		.4byte	.LASF63
 1427 0010 01       		.byte	0x1
 1428 0011 0F030000 		.4byte	.LASF64
 1429 0015 89020000 		.4byte	.LASF65
 1430 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1431 001d 00000000 		.4byte	0
 1432 0021 00000000 		.4byte	.Ldebug_line0
 1433 0025 02       		.uleb128 0x2
 1434 0026 01       		.byte	0x1
 1435 0027 06       		.byte	0x6
 1436 0028 63000000 		.4byte	.LASF0
 1437 002c 02       		.uleb128 0x2
 1438 002d 01       		.byte	0x1
 1439 002e 08       		.byte	0x8
 1440 002f 59020000 		.4byte	.LASF1
 1441 0033 03       		.uleb128 0x3
 1442 0034 CD000000 		.4byte	.LASF3
 1443 0038 03       		.byte	0x3
 1444 0039 29       		.byte	0x29
 1445 003a 3E000000 		.4byte	0x3e
 1446 003e 02       		.uleb128 0x2
 1447 003f 02       		.byte	0x2
 1448 0040 05       		.byte	0x5
 1449 0041 67020000 		.4byte	.LASF2
 1450 0045 03       		.uleb128 0x3
 1451 0046 B1000000 		.4byte	.LASF4
 1452 004a 03       		.byte	0x3
 1453 004b 2B       		.byte	0x2b
 1454 004c 50000000 		.4byte	0x50
 1455 0050 02       		.uleb128 0x2
 1456 0051 02       		.byte	0x2
 1457 0052 07       		.byte	0x7
 1458 0053 98010000 		.4byte	.LASF5
 1459 0057 03       		.uleb128 0x3
 1460 0058 56030000 		.4byte	.LASF6
 1461 005c 03       		.byte	0x3
 1462 005d 3F       		.byte	0x3f
 1463 005e 62000000 		.4byte	0x62
 1464 0062 02       		.uleb128 0x2
 1465 0063 04       		.byte	0x4
 1466 0064 05       		.byte	0x5
 1467 0065 6F000000 		.4byte	.LASF7
 1468 0069 03       		.uleb128 0x3
 1469 006a C2000000 		.4byte	.LASF8
 1470 006e 03       		.byte	0x3
 1471 006f 41       		.byte	0x41
 1472 0070 74000000 		.4byte	0x74
 1473 0074 02       		.uleb128 0x2
 1474 0075 04       		.byte	0x4
 1475 0076 07       		.byte	0x7
 1476 0077 F4000000 		.4byte	.LASF9
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 53


 1477 007b 03       		.uleb128 0x3
 1478 007c 43000000 		.4byte	.LASF10
 1479 0080 03       		.byte	0x3
 1480 0081 59       		.byte	0x59
 1481 0082 86000000 		.4byte	0x86
 1482 0086 02       		.uleb128 0x2
 1483 0087 08       		.byte	0x8
 1484 0088 05       		.byte	0x5
 1485 0089 55000000 		.4byte	.LASF11
 1486 008d 02       		.uleb128 0x2
 1487 008e 08       		.byte	0x8
 1488 008f 07       		.byte	0x7
 1489 0090 2C000000 		.4byte	.LASF12
 1490 0094 04       		.uleb128 0x4
 1491 0095 04       		.byte	0x4
 1492 0096 05       		.byte	0x5
 1493 0097 696E7400 		.ascii	"int\000"
 1494 009b 02       		.uleb128 0x2
 1495 009c 04       		.byte	0x4
 1496 009d 07       		.byte	0x7
 1497 009e E7000000 		.4byte	.LASF13
 1498 00a2 03       		.uleb128 0x3
 1499 00a3 4D000000 		.4byte	.LASF14
 1500 00a7 04       		.byte	0x4
 1501 00a8 20       		.byte	0x20
 1502 00a9 33000000 		.4byte	0x33
 1503 00ad 03       		.uleb128 0x3
 1504 00ae 83000000 		.4byte	.LASF15
 1505 00b2 04       		.byte	0x4
 1506 00b3 21       		.byte	0x21
 1507 00b4 45000000 		.4byte	0x45
 1508 00b8 03       		.uleb128 0x3
 1509 00b9 51020000 		.4byte	.LASF16
 1510 00bd 04       		.byte	0x4
 1511 00be 2C       		.byte	0x2c
 1512 00bf 57000000 		.4byte	0x57
 1513 00c3 03       		.uleb128 0x3
 1514 00c4 F0020000 		.4byte	.LASF17
 1515 00c8 04       		.byte	0x4
 1516 00c9 2D       		.byte	0x2d
 1517 00ca 69000000 		.4byte	0x69
 1518 00ce 03       		.uleb128 0x3
 1519 00cf 91030000 		.4byte	.LASF18
 1520 00d3 04       		.byte	0x4
 1521 00d4 38       		.byte	0x38
 1522 00d5 7B000000 		.4byte	0x7b
 1523 00d9 02       		.uleb128 0x2
 1524 00da 04       		.byte	0x4
 1525 00db 07       		.byte	0x7
 1526 00dc EC010000 		.4byte	.LASF19
 1527 00e0 02       		.uleb128 0x2
 1528 00e1 01       		.byte	0x1
 1529 00e2 08       		.byte	0x8
 1530 00e3 02030000 		.4byte	.LASF20
 1531 00e7 02       		.uleb128 0x2
 1532 00e8 08       		.byte	0x8
 1533 00e9 04       		.byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 54


 1534 00ea 8C000000 		.4byte	.LASF21
 1535 00ee 02       		.uleb128 0x2
 1536 00ef 04       		.byte	0x4
 1537 00f0 04       		.byte	0x4
 1538 00f1 29020000 		.4byte	.LASF22
 1539 00f5 02       		.uleb128 0x2
 1540 00f6 08       		.byte	0x8
 1541 00f7 04       		.byte	0x4
 1542 00f8 F5010000 		.4byte	.LASF23
 1543 00fc 05       		.uleb128 0x5
 1544 00fd 01       		.byte	0x1
 1545 00fe 02       		.byte	0x2
 1546 00ff 8401     		.2byte	0x184
 1547 0101 30010000 		.4byte	0x130
 1548 0105 06       		.uleb128 0x6
 1549 0106 1B000000 		.4byte	.LASF24
 1550 010a 00       		.sleb128 0
 1551 010b 06       		.uleb128 0x6
 1552 010c 71020000 		.4byte	.LASF25
 1553 0110 7F       		.sleb128 -1
 1554 0111 06       		.uleb128 0x6
 1555 0112 13020000 		.4byte	.LASF26
 1556 0116 7E       		.sleb128 -2
 1557 0117 06       		.uleb128 0x6
 1558 0118 3F030000 		.4byte	.LASF27
 1559 011c 7D       		.sleb128 -3
 1560 011d 06       		.uleb128 0x6
 1561 011e 41020000 		.4byte	.LASF28
 1562 0122 7C       		.sleb128 -4
 1563 0123 06       		.uleb128 0x6
 1564 0124 2F020000 		.4byte	.LASF29
 1565 0128 7B       		.sleb128 -5
 1566 0129 06       		.uleb128 0x6
 1567 012a AB010000 		.4byte	.LASF30
 1568 012e 7A       		.sleb128 -6
 1569 012f 00       		.byte	0
 1570 0130 07       		.uleb128 0x7
 1571 0131 86030000 		.4byte	.LASF31
 1572 0135 02       		.byte	0x2
 1573 0136 8C01     		.2byte	0x18c
 1574 0138 FC000000 		.4byte	0xfc
 1575 013c 07       		.uleb128 0x7
 1576 013d 7D000000 		.4byte	.LASF32
 1577 0141 02       		.byte	0x2
 1578 0142 9601     		.2byte	0x196
 1579 0144 A2000000 		.4byte	0xa2
 1580 0148 07       		.uleb128 0x7
 1581 0149 EA020000 		.4byte	.LASF33
 1582 014d 02       		.byte	0x2
 1583 014e 9B01     		.2byte	0x19b
 1584 0150 B8000000 		.4byte	0xb8
 1585 0154 07       		.uleb128 0x7
 1586 0155 0E000000 		.4byte	.LASF34
 1587 0159 02       		.byte	0x2
 1588 015a A001     		.2byte	0x1a0
 1589 015c CE000000 		.4byte	0xce
 1590 0160 08       		.uleb128 0x8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 55


 1591 0161 04       		.byte	0x4
 1592 0162 3C010000 		.4byte	0x13c
 1593 0166 09       		.uleb128 0x9
 1594 0167 08       		.byte	0x8
 1595 0168 02       		.byte	0x2
 1596 0169 AF05     		.2byte	0x5af
 1597 016b 97010000 		.4byte	0x197
 1598 016f 0A       		.uleb128 0xa
 1599 0170 D7000000 		.4byte	.LASF35
 1600 0174 02       		.byte	0x2
 1601 0175 B105     		.2byte	0x5b1
 1602 0177 AD000000 		.4byte	0xad
 1603 017b 00       		.byte	0
 1604 017c 0A       		.uleb128 0xa
 1605 017d E4010000 		.4byte	.LASF36
 1606 0181 02       		.byte	0x2
 1607 0182 B205     		.2byte	0x5b2
 1608 0184 AD000000 		.4byte	0xad
 1609 0188 02       		.byte	0x2
 1610 0189 0A       		.uleb128 0xa
 1611 018a BC000000 		.4byte	.LASF37
 1612 018e 02       		.byte	0x2
 1613 018f B305     		.2byte	0x5b3
 1614 0191 60010000 		.4byte	0x160
 1615 0195 04       		.byte	0x4
 1616 0196 00       		.byte	0
 1617 0197 07       		.uleb128 0x7
 1618 0198 60030000 		.4byte	.LASF38
 1619 019c 02       		.byte	0x2
 1620 019d B405     		.2byte	0x5b4
 1621 019f 66010000 		.4byte	0x166
 1622 01a3 0B       		.uleb128 0xb
 1623 01a4 01020000 		.4byte	.LASF39
 1624 01a8 02       		.byte	0x2
 1625 01a9 0704     		.2byte	0x407
 1626 01ab C3000000 		.4byte	0xc3
 1627 01af 03       		.byte	0x3
 1628 01b0 C9010000 		.4byte	0x1c9
 1629 01b4 0C       		.uleb128 0xc
 1630 01b5 7800     		.ascii	"x\000"
 1631 01b7 02       		.byte	0x2
 1632 01b8 0804     		.2byte	0x408
 1633 01ba C3000000 		.4byte	0xc3
 1634 01be 0C       		.uleb128 0xc
 1635 01bf 7900     		.ascii	"y\000"
 1636 01c1 02       		.byte	0x2
 1637 01c2 0904     		.2byte	0x409
 1638 01c4 C3000000 		.4byte	0xc3
 1639 01c8 00       		.byte	0
 1640 01c9 0B       		.uleb128 0xb
 1641 01ca F9020000 		.4byte	.LASF40
 1642 01ce 02       		.byte	0x2
 1643 01cf 9103     		.2byte	0x391
 1644 01d1 C3000000 		.4byte	0xc3
 1645 01d5 03       		.byte	0x3
 1646 01d6 EF010000 		.4byte	0x1ef
 1647 01da 0C       		.uleb128 0xc
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 56


 1648 01db 7800     		.ascii	"x\000"
 1649 01dd 02       		.byte	0x2
 1650 01de 9203     		.2byte	0x392
 1651 01e0 C3000000 		.4byte	0xc3
 1652 01e4 0C       		.uleb128 0xc
 1653 01e5 7900     		.ascii	"y\000"
 1654 01e7 02       		.byte	0x2
 1655 01e8 9303     		.2byte	0x393
 1656 01ea C3000000 		.4byte	0xc3
 1657 01ee 00       		.byte	0
 1658 01ef 0B       		.uleb128 0xb
 1659 01f0 07000000 		.4byte	.LASF41
 1660 01f4 02       		.byte	0x2
 1661 01f5 B402     		.2byte	0x2b4
 1662 01f7 48010000 		.4byte	0x148
 1663 01fb 03       		.byte	0x3
 1664 01fc 37020000 		.4byte	0x237
 1665 0200 0C       		.uleb128 0xc
 1666 0201 7800     		.ascii	"x\000"
 1667 0203 02       		.byte	0x2
 1668 0204 B502     		.2byte	0x2b5
 1669 0206 48010000 		.4byte	0x148
 1670 020a 0C       		.uleb128 0xc
 1671 020b 7900     		.ascii	"y\000"
 1672 020d 02       		.byte	0x2
 1673 020e B602     		.2byte	0x2b6
 1674 0210 C3000000 		.4byte	0xc3
 1675 0214 0D       		.uleb128 0xd
 1676 0215 AB030000 		.4byte	.LASF42
 1677 0219 02       		.byte	0x2
 1678 021a B802     		.2byte	0x2b8
 1679 021c B8000000 		.4byte	0xb8
 1680 0220 0D       		.uleb128 0xd
 1681 0221 14000000 		.4byte	.LASF43
 1682 0225 02       		.byte	0x2
 1683 0226 B802     		.2byte	0x2b8
 1684 0228 B8000000 		.4byte	0xb8
 1685 022c 0E       		.uleb128 0xe
 1686 022d 6900     		.ascii	"i\000"
 1687 022f 02       		.byte	0x2
 1688 0230 B902     		.2byte	0x2b9
 1689 0232 C3000000 		.4byte	0xc3
 1690 0236 00       		.byte	0
 1691 0237 0F       		.uleb128 0xf
 1692 0238 CD010000 		.4byte	.LASF66
 1693 023c 01       		.byte	0x1
 1694 023d 4D       		.byte	0x4d
 1695 023e 30010000 		.4byte	0x130
 1696 0242 00000000 		.4byte	.LFB82
 1697 0246 48090000 		.4byte	.LFE82-.LFB82
 1698 024a 01       		.uleb128 0x1
 1699 024b 9C       		.byte	0x9c
 1700 024c 27050000 		.4byte	0x527
 1701 0250 10       		.uleb128 0x10
 1702 0251 A5000000 		.4byte	.LASF44
 1703 0255 01       		.byte	0x1
 1704 0256 4E       		.byte	0x4e
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 57


 1705 0257 27050000 		.4byte	0x527
 1706 025b 03       		.uleb128 0x3
 1707 025c 91       		.byte	0x91
 1708 025d C47E     		.sleb128 -188
 1709 025f 10       		.uleb128 0x10
 1710 0260 AB000000 		.4byte	.LASF45
 1711 0264 01       		.byte	0x1
 1712 0265 4F       		.byte	0x4f
 1713 0266 27050000 		.4byte	0x527
 1714 026a 03       		.uleb128 0x3
 1715 026b 91       		.byte	0x91
 1716 026c C07E     		.sleb128 -192
 1717 026e 10       		.uleb128 0x10
 1718 026f 78000000 		.4byte	.LASF46
 1719 0273 01       		.byte	0x1
 1720 0274 50       		.byte	0x50
 1721 0275 32050000 		.4byte	0x532
 1722 0279 03       		.uleb128 0x3
 1723 027a 91       		.byte	0x91
 1724 027b BC7E     		.sleb128 -196
 1725 027d 10       		.uleb128 0x10
 1726 027e E1020000 		.4byte	.LASF47
 1727 0282 01       		.byte	0x1
 1728 0283 51       		.byte	0x51
 1729 0284 60010000 		.4byte	0x160
 1730 0288 03       		.uleb128 0x3
 1731 0289 91       		.byte	0x91
 1732 028a B87E     		.sleb128 -200
 1733 028c 11       		.uleb128 0x11
 1734 028d 7F030000 		.4byte	.LASF48
 1735 0291 01       		.byte	0x1
 1736 0292 54       		.byte	0x54
 1737 0293 60010000 		.4byte	0x160
 1738 0297 02       		.uleb128 0x2
 1739 0298 91       		.byte	0x91
 1740 0299 4C       		.sleb128 -52
 1741 029a 11       		.uleb128 0x11
 1742 029b 0E020000 		.4byte	.LASF49
 1743 029f 01       		.byte	0x1
 1744 02a0 55       		.byte	0x55
 1745 02a1 60010000 		.4byte	0x160
 1746 02a5 03       		.uleb128 0x3
 1747 02a6 91       		.byte	0x91
 1748 02a7 D07E     		.sleb128 -176
 1749 02a9 11       		.uleb128 0x11
 1750 02aa 09020000 		.4byte	.LASF50
 1751 02ae 01       		.byte	0x1
 1752 02af 56       		.byte	0x56
 1753 02b0 60010000 		.4byte	0x160
 1754 02b4 03       		.uleb128 0x3
 1755 02b5 91       		.byte	0x91
 1756 02b6 CC7E     		.sleb128 -180
 1757 02b8 12       		.uleb128 0x12
 1758 02b9 707800   		.ascii	"px\000"
 1759 02bc 01       		.byte	0x1
 1760 02bd 57       		.byte	0x57
 1761 02be 60010000 		.4byte	0x160
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 58


 1762 02c2 03       		.uleb128 0x3
 1763 02c3 91       		.byte	0x91
 1764 02c4 C87E     		.sleb128 -184
 1765 02c6 11       		.uleb128 0x11
 1766 02c7 CF020000 		.4byte	.LASF51
 1767 02cb 01       		.byte	0x1
 1768 02cc 58       		.byte	0x58
 1769 02cd AD000000 		.4byte	0xad
 1770 02d1 02       		.uleb128 0x2
 1771 02d2 91       		.byte	0x91
 1772 02d3 4A       		.sleb128 -54
 1773 02d4 11       		.uleb128 0x11
 1774 02d5 9C000000 		.4byte	.LASF52
 1775 02d9 01       		.byte	0x1
 1776 02da 59       		.byte	0x59
 1777 02db AD000000 		.4byte	0xad
 1778 02df 02       		.uleb128 0x2
 1779 02e0 91       		.byte	0x91
 1780 02e1 48       		.sleb128 -56
 1781 02e2 11       		.uleb128 0x11
 1782 02e3 93000000 		.4byte	.LASF53
 1783 02e7 01       		.byte	0x1
 1784 02e8 5A       		.byte	0x5a
 1785 02e9 AD000000 		.4byte	0xad
 1786 02ed 02       		.uleb128 0x2
 1787 02ee 91       		.byte	0x91
 1788 02ef 46       		.sleb128 -58
 1789 02f0 11       		.uleb128 0x11
 1790 02f1 D8020000 		.4byte	.LASF54
 1791 02f5 01       		.byte	0x1
 1792 02f6 5B       		.byte	0x5b
 1793 02f7 AD000000 		.4byte	0xad
 1794 02fb 02       		.uleb128 0x2
 1795 02fc 91       		.byte	0x91
 1796 02fd 44       		.sleb128 -60
 1797 02fe 12       		.uleb128 0x12
 1798 02ff 636F6C00 		.ascii	"col\000"
 1799 0303 01       		.byte	0x1
 1800 0304 5C       		.byte	0x5c
 1801 0305 AD000000 		.4byte	0xad
 1802 0309 02       		.uleb128 0x2
 1803 030a 91       		.byte	0x91
 1804 030b 66       		.sleb128 -26
 1805 030c 12       		.uleb128 0x12
 1806 030d 6900     		.ascii	"i\000"
 1807 030f 01       		.byte	0x1
 1808 0310 5C       		.byte	0x5c
 1809 0311 AD000000 		.4byte	0xad
 1810 0315 02       		.uleb128 0x2
 1811 0316 91       		.byte	0x91
 1812 0317 64       		.sleb128 -28
 1813 0318 12       		.uleb128 0x12
 1814 0319 726F7700 		.ascii	"row\000"
 1815 031d 01       		.byte	0x1
 1816 031e 5C       		.byte	0x5c
 1817 031f AD000000 		.4byte	0xad
 1818 0323 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 59


 1819 0324 91       		.byte	0x91
 1820 0325 62       		.sleb128 -30
 1821 0326 11       		.uleb128 0x11
 1822 0327 00000000 		.4byte	.LASF55
 1823 032b 01       		.byte	0x1
 1824 032c 5C       		.byte	0x5c
 1825 032d AD000000 		.4byte	0xad
 1826 0331 02       		.uleb128 0x2
 1827 0332 91       		.byte	0x91
 1828 0333 60       		.sleb128 -32
 1829 0334 11       		.uleb128 0x11
 1830 0335 78030000 		.4byte	.LASF56
 1831 0339 01       		.byte	0x1
 1832 033a 5D       		.byte	0x5d
 1833 033b 30010000 		.4byte	0x130
 1834 033f 03       		.uleb128 0x3
 1835 0340 91       		.byte	0x91
 1836 0341 AF7F     		.sleb128 -81
 1837 0343 11       		.uleb128 0x11
 1838 0344 07030000 		.4byte	.LASF57
 1839 0348 01       		.byte	0x1
 1840 0349 5E       		.byte	0x5e
 1841 034a 54010000 		.4byte	0x154
 1842 034e 02       		.uleb128 0x2
 1843 034f 91       		.byte	0x91
 1844 0350 58       		.sleb128 -40
 1845 0351 11       		.uleb128 0x11
 1846 0352 DF000000 		.4byte	.LASF58
 1847 0356 01       		.byte	0x1
 1848 0357 5E       		.byte	0x5e
 1849 0358 54010000 		.4byte	0x154
 1850 035c 02       		.uleb128 0x2
 1851 035d 91       		.byte	0x91
 1852 035e 50       		.sleb128 -48
 1853 035f 12       		.uleb128 0x12
 1854 0360 696E00   		.ascii	"in\000"
 1855 0363 01       		.byte	0x1
 1856 0364 64       		.byte	0x64
 1857 0365 48010000 		.4byte	0x148
 1858 0369 02       		.uleb128 0x2
 1859 036a 91       		.byte	0x91
 1860 036b 40       		.sleb128 -64
 1861 036c 11       		.uleb128 0x11
 1862 036d C1010000 		.4byte	.LASF59
 1863 0371 01       		.byte	0x1
 1864 0372 65       		.byte	0x65
 1865 0373 48010000 		.4byte	0x148
 1866 0377 03       		.uleb128 0x3
 1867 0378 91       		.byte	0x91
 1868 0379 B47F     		.sleb128 -76
 1869 037b 11       		.uleb128 0x11
 1870 037c C7010000 		.4byte	.LASF60
 1871 0380 01       		.byte	0x1
 1872 0381 65       		.byte	0x65
 1873 0382 48010000 		.4byte	0x148
 1874 0386 03       		.uleb128 0x3
 1875 0387 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 60


 1876 0388 B07F     		.sleb128 -80
 1877 038a 11       		.uleb128 0x11
 1878 038b 99030000 		.4byte	.LASF61
 1879 038f 01       		.byte	0x1
 1880 0390 66       		.byte	0x66
 1881 0391 48010000 		.4byte	0x148
 1882 0395 03       		.uleb128 0x3
 1883 0396 91       		.byte	0x91
 1884 0397 BC7F     		.sleb128 -68
 1885 0399 11       		.uleb128 0x11
 1886 039a A2030000 		.4byte	.LASF62
 1887 039e 01       		.byte	0x1
 1888 039f 66       		.byte	0x66
 1889 03a0 48010000 		.4byte	0x148
 1890 03a4 03       		.uleb128 0x3
 1891 03a5 91       		.byte	0x91
 1892 03a6 B87F     		.sleb128 -72
 1893 03a8 13       		.uleb128 0x13
 1894 03a9 A3010000 		.4byte	0x1a3
 1895 03ad DE030000 		.4byte	.LBB18
 1896 03b1 2C000000 		.4byte	.LBE18-.LBB18
 1897 03b5 01       		.byte	0x1
 1898 03b6 4201     		.2byte	0x142
 1899 03b8 CF030000 		.4byte	0x3cf
 1900 03bc 14       		.uleb128 0x14
 1901 03bd BE010000 		.4byte	0x1be
 1902 03c1 03       		.uleb128 0x3
 1903 03c2 91       		.byte	0x91
 1904 03c3 A47F     		.sleb128 -92
 1905 03c5 14       		.uleb128 0x14
 1906 03c6 B4010000 		.4byte	0x1b4
 1907 03ca 03       		.uleb128 0x3
 1908 03cb 91       		.byte	0x91
 1909 03cc A87F     		.sleb128 -88
 1910 03ce 00       		.byte	0
 1911 03cf 13       		.uleb128 0x13
 1912 03d0 C9010000 		.4byte	0x1c9
 1913 03d4 34040000 		.4byte	.LBB20
 1914 03d8 2C000000 		.4byte	.LBE20-.LBB20
 1915 03dc 01       		.byte	0x1
 1916 03dd 4401     		.2byte	0x144
 1917 03df F6030000 		.4byte	0x3f6
 1918 03e3 14       		.uleb128 0x14
 1919 03e4 E4010000 		.4byte	0x1e4
 1920 03e8 03       		.uleb128 0x3
 1921 03e9 91       		.byte	0x91
 1922 03ea 9C7F     		.sleb128 -100
 1923 03ec 14       		.uleb128 0x14
 1924 03ed DA010000 		.4byte	0x1da
 1925 03f1 03       		.uleb128 0x3
 1926 03f2 91       		.byte	0x91
 1927 03f3 A07F     		.sleb128 -96
 1928 03f5 00       		.byte	0
 1929 03f6 13       		.uleb128 0x13
 1930 03f7 A3010000 		.4byte	0x1a3
 1931 03fb 22050000 		.4byte	.LBB22
 1932 03ff 2C000000 		.4byte	.LBE22-.LBB22
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 61


 1933 0403 01       		.byte	0x1
 1934 0404 5001     		.2byte	0x150
 1935 0406 1D040000 		.4byte	0x41d
 1936 040a 14       		.uleb128 0x14
 1937 040b BE010000 		.4byte	0x1be
 1938 040f 03       		.uleb128 0x3
 1939 0410 91       		.byte	0x91
 1940 0411 947F     		.sleb128 -108
 1941 0413 14       		.uleb128 0x14
 1942 0414 B4010000 		.4byte	0x1b4
 1943 0418 03       		.uleb128 0x3
 1944 0419 91       		.byte	0x91
 1945 041a 987F     		.sleb128 -104
 1946 041c 00       		.byte	0
 1947 041d 13       		.uleb128 0x13
 1948 041e C9010000 		.4byte	0x1c9
 1949 0422 78050000 		.4byte	.LBB24
 1950 0426 2C000000 		.4byte	.LBE24-.LBB24
 1951 042a 01       		.byte	0x1
 1952 042b 5201     		.2byte	0x152
 1953 042d 44040000 		.4byte	0x444
 1954 0431 14       		.uleb128 0x14
 1955 0432 E4010000 		.4byte	0x1e4
 1956 0436 03       		.uleb128 0x3
 1957 0437 91       		.byte	0x91
 1958 0438 8C7F     		.sleb128 -116
 1959 043a 14       		.uleb128 0x14
 1960 043b DA010000 		.4byte	0x1da
 1961 043f 03       		.uleb128 0x3
 1962 0440 91       		.byte	0x91
 1963 0441 907F     		.sleb128 -112
 1964 0443 00       		.byte	0
 1965 0444 13       		.uleb128 0x13
 1966 0445 A3010000 		.4byte	0x1a3
 1967 0449 A6060000 		.4byte	.LBB26
 1968 044d 2C000000 		.4byte	.LBE26-.LBB26
 1969 0451 01       		.byte	0x1
 1970 0452 7801     		.2byte	0x178
 1971 0454 6B040000 		.4byte	0x46b
 1972 0458 14       		.uleb128 0x14
 1973 0459 BE010000 		.4byte	0x1be
 1974 045d 03       		.uleb128 0x3
 1975 045e 91       		.byte	0x91
 1976 045f 847F     		.sleb128 -124
 1977 0461 14       		.uleb128 0x14
 1978 0462 B4010000 		.4byte	0x1b4
 1979 0466 03       		.uleb128 0x3
 1980 0467 91       		.byte	0x91
 1981 0468 887F     		.sleb128 -120
 1982 046a 00       		.byte	0
 1983 046b 13       		.uleb128 0x13
 1984 046c C9010000 		.4byte	0x1c9
 1985 0470 F8060000 		.4byte	.LBB28
 1986 0474 24000000 		.4byte	.LBE28-.LBB28
 1987 0478 01       		.byte	0x1
 1988 0479 7A01     		.2byte	0x17a
 1989 047b 92040000 		.4byte	0x492
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 62


 1990 047f 14       		.uleb128 0x14
 1991 0480 E4010000 		.4byte	0x1e4
 1992 0484 03       		.uleb128 0x3
 1993 0485 91       		.byte	0x91
 1994 0486 FC7E     		.sleb128 -132
 1995 0488 14       		.uleb128 0x14
 1996 0489 DA010000 		.4byte	0x1da
 1997 048d 03       		.uleb128 0x3
 1998 048e 91       		.byte	0x91
 1999 048f 807F     		.sleb128 -128
 2000 0491 00       		.byte	0
 2001 0492 13       		.uleb128 0x13
 2002 0493 EF010000 		.4byte	0x1ef
 2003 0497 BC070000 		.4byte	.LBB30
 2004 049b 52000000 		.4byte	.LBE30-.LBB30
 2005 049f 01       		.byte	0x1
 2006 04a0 8401     		.2byte	0x184
 2007 04a2 DE040000 		.4byte	0x4de
 2008 04a6 14       		.uleb128 0x14
 2009 04a7 0A020000 		.4byte	0x20a
 2010 04ab 03       		.uleb128 0x3
 2011 04ac 91       		.byte	0x91
 2012 04ad F47E     		.sleb128 -140
 2013 04af 14       		.uleb128 0x14
 2014 04b0 00020000 		.4byte	0x200
 2015 04b4 03       		.uleb128 0x3
 2016 04b5 91       		.byte	0x91
 2017 04b6 F87E     		.sleb128 -136
 2018 04b8 15       		.uleb128 0x15
 2019 04b9 BC070000 		.4byte	.LBB31
 2020 04bd 52000000 		.4byte	.LBE31-.LBB31
 2021 04c1 16       		.uleb128 0x16
 2022 04c2 14020000 		.4byte	0x214
 2023 04c6 03       		.uleb128 0x3
 2024 04c7 91       		.byte	0x91
 2025 04c8 F07E     		.sleb128 -144
 2026 04ca 16       		.uleb128 0x16
 2027 04cb 20020000 		.4byte	0x220
 2028 04cf 03       		.uleb128 0x3
 2029 04d0 91       		.byte	0x91
 2030 04d1 E87E     		.sleb128 -152
 2031 04d3 16       		.uleb128 0x16
 2032 04d4 2C020000 		.4byte	0x22c
 2033 04d8 03       		.uleb128 0x3
 2034 04d9 91       		.byte	0x91
 2035 04da EC7E     		.sleb128 -148
 2036 04dc 00       		.byte	0
 2037 04dd 00       		.byte	0
 2038 04de 17       		.uleb128 0x17
 2039 04df EF010000 		.4byte	0x1ef
 2040 04e3 54080000 		.4byte	.LBB32
 2041 04e7 52000000 		.4byte	.LBE32-.LBB32
 2042 04eb 01       		.byte	0x1
 2043 04ec 8501     		.2byte	0x185
 2044 04ee 14       		.uleb128 0x14
 2045 04ef 0A020000 		.4byte	0x20a
 2046 04f3 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 63


 2047 04f4 91       		.byte	0x91
 2048 04f5 E07E     		.sleb128 -160
 2049 04f7 14       		.uleb128 0x14
 2050 04f8 00020000 		.4byte	0x200
 2051 04fc 03       		.uleb128 0x3
 2052 04fd 91       		.byte	0x91
 2053 04fe E47E     		.sleb128 -156
 2054 0500 15       		.uleb128 0x15
 2055 0501 54080000 		.4byte	.LBB33
 2056 0505 52000000 		.4byte	.LBE33-.LBB33
 2057 0509 16       		.uleb128 0x16
 2058 050a 14020000 		.4byte	0x214
 2059 050e 03       		.uleb128 0x3
 2060 050f 91       		.byte	0x91
 2061 0510 DC7E     		.sleb128 -164
 2062 0512 16       		.uleb128 0x16
 2063 0513 20020000 		.4byte	0x220
 2064 0517 03       		.uleb128 0x3
 2065 0518 91       		.byte	0x91
 2066 0519 D47E     		.sleb128 -172
 2067 051b 16       		.uleb128 0x16
 2068 051c 2C020000 		.4byte	0x22c
 2069 0520 03       		.uleb128 0x3
 2070 0521 91       		.byte	0x91
 2071 0522 D87E     		.sleb128 -168
 2072 0524 00       		.byte	0
 2073 0525 00       		.byte	0
 2074 0526 00       		.byte	0
 2075 0527 08       		.uleb128 0x8
 2076 0528 04       		.byte	0x4
 2077 0529 2D050000 		.4byte	0x52d
 2078 052d 18       		.uleb128 0x18
 2079 052e 97010000 		.4byte	0x197
 2080 0532 08       		.uleb128 0x8
 2081 0533 04       		.byte	0x4
 2082 0534 97010000 		.4byte	0x197
 2083 0538 00       		.byte	0
 2084              		.section	.debug_abbrev,"",%progbits
 2085              	.Ldebug_abbrev0:
 2086 0000 01       		.uleb128 0x1
 2087 0001 11       		.uleb128 0x11
 2088 0002 01       		.byte	0x1
 2089 0003 25       		.uleb128 0x25
 2090 0004 0E       		.uleb128 0xe
 2091 0005 13       		.uleb128 0x13
 2092 0006 0B       		.uleb128 0xb
 2093 0007 03       		.uleb128 0x3
 2094 0008 0E       		.uleb128 0xe
 2095 0009 1B       		.uleb128 0x1b
 2096 000a 0E       		.uleb128 0xe
 2097 000b 55       		.uleb128 0x55
 2098 000c 17       		.uleb128 0x17
 2099 000d 11       		.uleb128 0x11
 2100 000e 01       		.uleb128 0x1
 2101 000f 10       		.uleb128 0x10
 2102 0010 17       		.uleb128 0x17
 2103 0011 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 64


 2104 0012 00       		.byte	0
 2105 0013 02       		.uleb128 0x2
 2106 0014 24       		.uleb128 0x24
 2107 0015 00       		.byte	0
 2108 0016 0B       		.uleb128 0xb
 2109 0017 0B       		.uleb128 0xb
 2110 0018 3E       		.uleb128 0x3e
 2111 0019 0B       		.uleb128 0xb
 2112 001a 03       		.uleb128 0x3
 2113 001b 0E       		.uleb128 0xe
 2114 001c 00       		.byte	0
 2115 001d 00       		.byte	0
 2116 001e 03       		.uleb128 0x3
 2117 001f 16       		.uleb128 0x16
 2118 0020 00       		.byte	0
 2119 0021 03       		.uleb128 0x3
 2120 0022 0E       		.uleb128 0xe
 2121 0023 3A       		.uleb128 0x3a
 2122 0024 0B       		.uleb128 0xb
 2123 0025 3B       		.uleb128 0x3b
 2124 0026 0B       		.uleb128 0xb
 2125 0027 49       		.uleb128 0x49
 2126 0028 13       		.uleb128 0x13
 2127 0029 00       		.byte	0
 2128 002a 00       		.byte	0
 2129 002b 04       		.uleb128 0x4
 2130 002c 24       		.uleb128 0x24
 2131 002d 00       		.byte	0
 2132 002e 0B       		.uleb128 0xb
 2133 002f 0B       		.uleb128 0xb
 2134 0030 3E       		.uleb128 0x3e
 2135 0031 0B       		.uleb128 0xb
 2136 0032 03       		.uleb128 0x3
 2137 0033 08       		.uleb128 0x8
 2138 0034 00       		.byte	0
 2139 0035 00       		.byte	0
 2140 0036 05       		.uleb128 0x5
 2141 0037 04       		.uleb128 0x4
 2142 0038 01       		.byte	0x1
 2143 0039 0B       		.uleb128 0xb
 2144 003a 0B       		.uleb128 0xb
 2145 003b 3A       		.uleb128 0x3a
 2146 003c 0B       		.uleb128 0xb
 2147 003d 3B       		.uleb128 0x3b
 2148 003e 05       		.uleb128 0x5
 2149 003f 01       		.uleb128 0x1
 2150 0040 13       		.uleb128 0x13
 2151 0041 00       		.byte	0
 2152 0042 00       		.byte	0
 2153 0043 06       		.uleb128 0x6
 2154 0044 28       		.uleb128 0x28
 2155 0045 00       		.byte	0
 2156 0046 03       		.uleb128 0x3
 2157 0047 0E       		.uleb128 0xe
 2158 0048 1C       		.uleb128 0x1c
 2159 0049 0D       		.uleb128 0xd
 2160 004a 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 65


 2161 004b 00       		.byte	0
 2162 004c 07       		.uleb128 0x7
 2163 004d 16       		.uleb128 0x16
 2164 004e 00       		.byte	0
 2165 004f 03       		.uleb128 0x3
 2166 0050 0E       		.uleb128 0xe
 2167 0051 3A       		.uleb128 0x3a
 2168 0052 0B       		.uleb128 0xb
 2169 0053 3B       		.uleb128 0x3b
 2170 0054 05       		.uleb128 0x5
 2171 0055 49       		.uleb128 0x49
 2172 0056 13       		.uleb128 0x13
 2173 0057 00       		.byte	0
 2174 0058 00       		.byte	0
 2175 0059 08       		.uleb128 0x8
 2176 005a 0F       		.uleb128 0xf
 2177 005b 00       		.byte	0
 2178 005c 0B       		.uleb128 0xb
 2179 005d 0B       		.uleb128 0xb
 2180 005e 49       		.uleb128 0x49
 2181 005f 13       		.uleb128 0x13
 2182 0060 00       		.byte	0
 2183 0061 00       		.byte	0
 2184 0062 09       		.uleb128 0x9
 2185 0063 13       		.uleb128 0x13
 2186 0064 01       		.byte	0x1
 2187 0065 0B       		.uleb128 0xb
 2188 0066 0B       		.uleb128 0xb
 2189 0067 3A       		.uleb128 0x3a
 2190 0068 0B       		.uleb128 0xb
 2191 0069 3B       		.uleb128 0x3b
 2192 006a 05       		.uleb128 0x5
 2193 006b 01       		.uleb128 0x1
 2194 006c 13       		.uleb128 0x13
 2195 006d 00       		.byte	0
 2196 006e 00       		.byte	0
 2197 006f 0A       		.uleb128 0xa
 2198 0070 0D       		.uleb128 0xd
 2199 0071 00       		.byte	0
 2200 0072 03       		.uleb128 0x3
 2201 0073 0E       		.uleb128 0xe
 2202 0074 3A       		.uleb128 0x3a
 2203 0075 0B       		.uleb128 0xb
 2204 0076 3B       		.uleb128 0x3b
 2205 0077 05       		.uleb128 0x5
 2206 0078 49       		.uleb128 0x49
 2207 0079 13       		.uleb128 0x13
 2208 007a 38       		.uleb128 0x38
 2209 007b 0B       		.uleb128 0xb
 2210 007c 00       		.byte	0
 2211 007d 00       		.byte	0
 2212 007e 0B       		.uleb128 0xb
 2213 007f 2E       		.uleb128 0x2e
 2214 0080 01       		.byte	0x1
 2215 0081 03       		.uleb128 0x3
 2216 0082 0E       		.uleb128 0xe
 2217 0083 3A       		.uleb128 0x3a
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 66


 2218 0084 0B       		.uleb128 0xb
 2219 0085 3B       		.uleb128 0x3b
 2220 0086 05       		.uleb128 0x5
 2221 0087 27       		.uleb128 0x27
 2222 0088 19       		.uleb128 0x19
 2223 0089 49       		.uleb128 0x49
 2224 008a 13       		.uleb128 0x13
 2225 008b 20       		.uleb128 0x20
 2226 008c 0B       		.uleb128 0xb
 2227 008d 01       		.uleb128 0x1
 2228 008e 13       		.uleb128 0x13
 2229 008f 00       		.byte	0
 2230 0090 00       		.byte	0
 2231 0091 0C       		.uleb128 0xc
 2232 0092 05       		.uleb128 0x5
 2233 0093 00       		.byte	0
 2234 0094 03       		.uleb128 0x3
 2235 0095 08       		.uleb128 0x8
 2236 0096 3A       		.uleb128 0x3a
 2237 0097 0B       		.uleb128 0xb
 2238 0098 3B       		.uleb128 0x3b
 2239 0099 05       		.uleb128 0x5
 2240 009a 49       		.uleb128 0x49
 2241 009b 13       		.uleb128 0x13
 2242 009c 00       		.byte	0
 2243 009d 00       		.byte	0
 2244 009e 0D       		.uleb128 0xd
 2245 009f 34       		.uleb128 0x34
 2246 00a0 00       		.byte	0
 2247 00a1 03       		.uleb128 0x3
 2248 00a2 0E       		.uleb128 0xe
 2249 00a3 3A       		.uleb128 0x3a
 2250 00a4 0B       		.uleb128 0xb
 2251 00a5 3B       		.uleb128 0x3b
 2252 00a6 05       		.uleb128 0x5
 2253 00a7 49       		.uleb128 0x49
 2254 00a8 13       		.uleb128 0x13
 2255 00a9 00       		.byte	0
 2256 00aa 00       		.byte	0
 2257 00ab 0E       		.uleb128 0xe
 2258 00ac 34       		.uleb128 0x34
 2259 00ad 00       		.byte	0
 2260 00ae 03       		.uleb128 0x3
 2261 00af 08       		.uleb128 0x8
 2262 00b0 3A       		.uleb128 0x3a
 2263 00b1 0B       		.uleb128 0xb
 2264 00b2 3B       		.uleb128 0x3b
 2265 00b3 05       		.uleb128 0x5
 2266 00b4 49       		.uleb128 0x49
 2267 00b5 13       		.uleb128 0x13
 2268 00b6 00       		.byte	0
 2269 00b7 00       		.byte	0
 2270 00b8 0F       		.uleb128 0xf
 2271 00b9 2E       		.uleb128 0x2e
 2272 00ba 01       		.byte	0x1
 2273 00bb 3F       		.uleb128 0x3f
 2274 00bc 19       		.uleb128 0x19
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 67


 2275 00bd 03       		.uleb128 0x3
 2276 00be 0E       		.uleb128 0xe
 2277 00bf 3A       		.uleb128 0x3a
 2278 00c0 0B       		.uleb128 0xb
 2279 00c1 3B       		.uleb128 0x3b
 2280 00c2 0B       		.uleb128 0xb
 2281 00c3 27       		.uleb128 0x27
 2282 00c4 19       		.uleb128 0x19
 2283 00c5 49       		.uleb128 0x49
 2284 00c6 13       		.uleb128 0x13
 2285 00c7 11       		.uleb128 0x11
 2286 00c8 01       		.uleb128 0x1
 2287 00c9 12       		.uleb128 0x12
 2288 00ca 06       		.uleb128 0x6
 2289 00cb 40       		.uleb128 0x40
 2290 00cc 18       		.uleb128 0x18
 2291 00cd 9742     		.uleb128 0x2117
 2292 00cf 19       		.uleb128 0x19
 2293 00d0 01       		.uleb128 0x1
 2294 00d1 13       		.uleb128 0x13
 2295 00d2 00       		.byte	0
 2296 00d3 00       		.byte	0
 2297 00d4 10       		.uleb128 0x10
 2298 00d5 05       		.uleb128 0x5
 2299 00d6 00       		.byte	0
 2300 00d7 03       		.uleb128 0x3
 2301 00d8 0E       		.uleb128 0xe
 2302 00d9 3A       		.uleb128 0x3a
 2303 00da 0B       		.uleb128 0xb
 2304 00db 3B       		.uleb128 0x3b
 2305 00dc 0B       		.uleb128 0xb
 2306 00dd 49       		.uleb128 0x49
 2307 00de 13       		.uleb128 0x13
 2308 00df 02       		.uleb128 0x2
 2309 00e0 18       		.uleb128 0x18
 2310 00e1 00       		.byte	0
 2311 00e2 00       		.byte	0
 2312 00e3 11       		.uleb128 0x11
 2313 00e4 34       		.uleb128 0x34
 2314 00e5 00       		.byte	0
 2315 00e6 03       		.uleb128 0x3
 2316 00e7 0E       		.uleb128 0xe
 2317 00e8 3A       		.uleb128 0x3a
 2318 00e9 0B       		.uleb128 0xb
 2319 00ea 3B       		.uleb128 0x3b
 2320 00eb 0B       		.uleb128 0xb
 2321 00ec 49       		.uleb128 0x49
 2322 00ed 13       		.uleb128 0x13
 2323 00ee 02       		.uleb128 0x2
 2324 00ef 18       		.uleb128 0x18
 2325 00f0 00       		.byte	0
 2326 00f1 00       		.byte	0
 2327 00f2 12       		.uleb128 0x12
 2328 00f3 34       		.uleb128 0x34
 2329 00f4 00       		.byte	0
 2330 00f5 03       		.uleb128 0x3
 2331 00f6 08       		.uleb128 0x8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 68


 2332 00f7 3A       		.uleb128 0x3a
 2333 00f8 0B       		.uleb128 0xb
 2334 00f9 3B       		.uleb128 0x3b
 2335 00fa 0B       		.uleb128 0xb
 2336 00fb 49       		.uleb128 0x49
 2337 00fc 13       		.uleb128 0x13
 2338 00fd 02       		.uleb128 0x2
 2339 00fe 18       		.uleb128 0x18
 2340 00ff 00       		.byte	0
 2341 0100 00       		.byte	0
 2342 0101 13       		.uleb128 0x13
 2343 0102 1D       		.uleb128 0x1d
 2344 0103 01       		.byte	0x1
 2345 0104 31       		.uleb128 0x31
 2346 0105 13       		.uleb128 0x13
 2347 0106 11       		.uleb128 0x11
 2348 0107 01       		.uleb128 0x1
 2349 0108 12       		.uleb128 0x12
 2350 0109 06       		.uleb128 0x6
 2351 010a 58       		.uleb128 0x58
 2352 010b 0B       		.uleb128 0xb
 2353 010c 59       		.uleb128 0x59
 2354 010d 05       		.uleb128 0x5
 2355 010e 01       		.uleb128 0x1
 2356 010f 13       		.uleb128 0x13
 2357 0110 00       		.byte	0
 2358 0111 00       		.byte	0
 2359 0112 14       		.uleb128 0x14
 2360 0113 05       		.uleb128 0x5
 2361 0114 00       		.byte	0
 2362 0115 31       		.uleb128 0x31
 2363 0116 13       		.uleb128 0x13
 2364 0117 02       		.uleb128 0x2
 2365 0118 18       		.uleb128 0x18
 2366 0119 00       		.byte	0
 2367 011a 00       		.byte	0
 2368 011b 15       		.uleb128 0x15
 2369 011c 0B       		.uleb128 0xb
 2370 011d 01       		.byte	0x1
 2371 011e 11       		.uleb128 0x11
 2372 011f 01       		.uleb128 0x1
 2373 0120 12       		.uleb128 0x12
 2374 0121 06       		.uleb128 0x6
 2375 0122 00       		.byte	0
 2376 0123 00       		.byte	0
 2377 0124 16       		.uleb128 0x16
 2378 0125 34       		.uleb128 0x34
 2379 0126 00       		.byte	0
 2380 0127 31       		.uleb128 0x31
 2381 0128 13       		.uleb128 0x13
 2382 0129 02       		.uleb128 0x2
 2383 012a 18       		.uleb128 0x18
 2384 012b 00       		.byte	0
 2385 012c 00       		.byte	0
 2386 012d 17       		.uleb128 0x17
 2387 012e 1D       		.uleb128 0x1d
 2388 012f 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 69


 2389 0130 31       		.uleb128 0x31
 2390 0131 13       		.uleb128 0x13
 2391 0132 11       		.uleb128 0x11
 2392 0133 01       		.uleb128 0x1
 2393 0134 12       		.uleb128 0x12
 2394 0135 06       		.uleb128 0x6
 2395 0136 58       		.uleb128 0x58
 2396 0137 0B       		.uleb128 0xb
 2397 0138 59       		.uleb128 0x59
 2398 0139 05       		.uleb128 0x5
 2399 013a 00       		.byte	0
 2400 013b 00       		.byte	0
 2401 013c 18       		.uleb128 0x18
 2402 013d 26       		.uleb128 0x26
 2403 013e 00       		.byte	0
 2404 013f 49       		.uleb128 0x49
 2405 0140 13       		.uleb128 0x13
 2406 0141 00       		.byte	0
 2407 0142 00       		.byte	0
 2408 0143 00       		.byte	0
 2409              		.section	.debug_aranges,"",%progbits
 2410 0000 1C000000 		.4byte	0x1c
 2411 0004 0200     		.2byte	0x2
 2412 0006 00000000 		.4byte	.Ldebug_info0
 2413 000a 04       		.byte	0x4
 2414 000b 00       		.byte	0
 2415 000c 0000     		.2byte	0
 2416 000e 0000     		.2byte	0
 2417 0010 00000000 		.4byte	.LFB82
 2418 0014 48090000 		.4byte	.LFE82-.LFB82
 2419 0018 00000000 		.4byte	0
 2420 001c 00000000 		.4byte	0
 2421              		.section	.debug_ranges,"",%progbits
 2422              	.Ldebug_ranges0:
 2423 0000 00000000 		.4byte	.LFB82
 2424 0004 48090000 		.4byte	.LFE82
 2425 0008 00000000 		.4byte	0
 2426 000c 00000000 		.4byte	0
 2427              		.section	.debug_line,"",%progbits
 2428              	.Ldebug_line0:
 2429 0000 6B020000 		.section	.debug_str,"MS",%progbits,1
 2429      02005601 
 2429      00000201 
 2429      FB0E0D00 
 2429      01010101 
 2430              	.LASF55:
 2431 0000 636F6C43 		.ascii	"colCnt\000"
 2431      6E7400
 2432              	.LASF41:
 2433 0007 5F5F5353 		.ascii	"__SSAT\000"
 2433      415400
 2434              	.LASF34:
 2435 000e 7136335F 		.ascii	"q63_t\000"
 2435      7400
 2436              	.LASF43:
 2437 0014 6E65674D 		.ascii	"negMin\000"
 2437      696E00
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 70


 2438              	.LASF24:
 2439 001b 41524D5F 		.ascii	"ARM_MATH_SUCCESS\000"
 2439      4D415448 
 2439      5F535543 
 2439      43455353 
 2439      00
 2440              	.LASF12:
 2441 002c 6C6F6E67 		.ascii	"long long unsigned int\000"
 2441      206C6F6E 
 2441      6720756E 
 2441      7369676E 
 2441      65642069 
 2442              	.LASF10:
 2443 0043 5F5F696E 		.ascii	"__int64_t\000"
 2443      7436345F 
 2443      7400
 2444              	.LASF14:
 2445 004d 696E7431 		.ascii	"int16_t\000"
 2445      365F7400 
 2446              	.LASF11:
 2447 0055 6C6F6E67 		.ascii	"long long int\000"
 2447      206C6F6E 
 2447      6720696E 
 2447      7400
 2448              	.LASF0:
 2449 0063 7369676E 		.ascii	"signed char\000"
 2449      65642063 
 2449      68617200 
 2450              	.LASF7:
 2451 006f 6C6F6E67 		.ascii	"long int\000"
 2451      20696E74 
 2451      00
 2452              	.LASF46:
 2453 0078 70447374 		.ascii	"pDst\000"
 2453      00
 2454              	.LASF32:
 2455 007d 7131355F 		.ascii	"q15_t\000"
 2455      7400
 2456              	.LASF15:
 2457 0083 75696E74 		.ascii	"uint16_t\000"
 2457      31365F74 
 2457      00
 2458              	.LASF21:
 2459 008c 646F7562 		.ascii	"double\000"
 2459      6C6500
 2460              	.LASF53:
 2461 0093 6E756D43 		.ascii	"numColsA\000"
 2461      6F6C7341 
 2461      00
 2462              	.LASF52:
 2463 009c 6E756D43 		.ascii	"numColsB\000"
 2463      6F6C7342 
 2463      00
 2464              	.LASF44:
 2465 00a5 70537263 		.ascii	"pSrcA\000"
 2465      4100
 2466              	.LASF45:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 71


 2467 00ab 70537263 		.ascii	"pSrcB\000"
 2467      4200
 2468              	.LASF4:
 2469 00b1 5F5F7569 		.ascii	"__uint16_t\000"
 2469      6E743136 
 2469      5F7400
 2470              	.LASF37:
 2471 00bc 70446174 		.ascii	"pData\000"
 2471      6100
 2472              	.LASF8:
 2473 00c2 5F5F7569 		.ascii	"__uint32_t\000"
 2473      6E743332 
 2473      5F7400
 2474              	.LASF3:
 2475 00cd 5F5F696E 		.ascii	"__int16_t\000"
 2475      7431365F 
 2475      7400
 2476              	.LASF35:
 2477 00d7 6E756D52 		.ascii	"numRows\000"
 2477      6F777300 
 2478              	.LASF58:
 2479 00df 73756D49 		.ascii	"sumImag\000"
 2479      6D616700 
 2480              	.LASF13:
 2481 00e7 756E7369 		.ascii	"unsigned int\000"
 2481      676E6564 
 2481      20696E74 
 2481      00
 2482              	.LASF9:
 2483 00f4 6C6F6E67 		.ascii	"long unsigned int\000"
 2483      20756E73 
 2483      69676E65 
 2483      6420696E 
 2483      7400
 2484              	.LASF63:
 2485 0106 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2485      4320342E 
 2485      392E3320 
 2485      32303135 
 2485      30333033 
 2486 0139 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 2486      20726576 
 2486      6973696F 
 2486      6E203232 
 2486      31323230 
 2487 016c 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 2487      30202D66 
 2487      66756E63 
 2487      74696F6E 
 2487      2D736563 
 2488              	.LASF5:
 2489 0198 73686F72 		.ascii	"short unsigned int\000"
 2489      7420756E 
 2489      7369676E 
 2489      65642069 
 2489      6E7400
 2490              	.LASF30:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 72


 2491 01ab 41524D5F 		.ascii	"ARM_MATH_TEST_FAILURE\000"
 2491      4D415448 
 2491      5F544553 
 2491      545F4641 
 2491      494C5552 
 2492              	.LASF59:
 2493 01c1 70726F64 		.ascii	"prod1\000"
 2493      3100
 2494              	.LASF60:
 2495 01c7 70726F64 		.ascii	"prod2\000"
 2495      3200
 2496              	.LASF66:
 2497 01cd 61726D5F 		.ascii	"arm_mat_cmplx_mult_q15\000"
 2497      6D61745F 
 2497      636D706C 
 2497      785F6D75 
 2497      6C745F71 
 2498              	.LASF36:
 2499 01e4 6E756D43 		.ascii	"numCols\000"
 2499      6F6C7300 
 2500              	.LASF19:
 2501 01ec 73697A65 		.ascii	"sizetype\000"
 2501      74797065 
 2501      00
 2502              	.LASF23:
 2503 01f5 6C6F6E67 		.ascii	"long double\000"
 2503      20646F75 
 2503      626C6500 
 2504              	.LASF39:
 2505 0201 5F5F534D 		.ascii	"__SMUSD\000"
 2505      55534400 
 2506              	.LASF50:
 2507 0209 70496E42 		.ascii	"pInB\000"
 2507      00
 2508              	.LASF49:
 2509 020e 70496E41 		.ascii	"pInA\000"
 2509      00
 2510              	.LASF26:
 2511 0213 41524D5F 		.ascii	"ARM_MATH_LENGTH_ERROR\000"
 2511      4D415448 
 2511      5F4C454E 
 2511      4754485F 
 2511      4552524F 
 2512              	.LASF22:
 2513 0229 666C6F61 		.ascii	"float\000"
 2513      7400
 2514              	.LASF29:
 2515 022f 41524D5F 		.ascii	"ARM_MATH_SINGULAR\000"
 2515      4D415448 
 2515      5F53494E 
 2515      47554C41 
 2515      5200
 2516              	.LASF28:
 2517 0241 41524D5F 		.ascii	"ARM_MATH_NANINF\000"
 2517      4D415448 
 2517      5F4E414E 
 2517      494E4600 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 73


 2518              	.LASF16:
 2519 0251 696E7433 		.ascii	"int32_t\000"
 2519      325F7400 
 2520              	.LASF1:
 2521 0259 756E7369 		.ascii	"unsigned char\000"
 2521      676E6564 
 2521      20636861 
 2521      7200
 2522              	.LASF2:
 2523 0267 73686F72 		.ascii	"short int\000"
 2523      7420696E 
 2523      7400
 2524              	.LASF25:
 2525 0271 41524D5F 		.ascii	"ARM_MATH_ARGUMENT_ERROR\000"
 2525      4D415448 
 2525      5F415247 
 2525      554D454E 
 2525      545F4552 
 2526              	.LASF65:
 2527 0289 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 2527      73657273 
 2527      5C666E65 
 2527      7665735C 
 2527      446F6375 
 2528 02b6 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 2528      655F7370 
 2528      6565645F 
 2528      73656E73 
 2528      6F722E63 
 2529              	.LASF51:
 2530 02cf 6E756D52 		.ascii	"numRowsA\000"
 2530      6F777341 
 2530      00
 2531              	.LASF54:
 2532 02d8 6E756D52 		.ascii	"numRowsB\000"
 2532      6F777342 
 2532      00
 2533              	.LASF47:
 2534 02e1 70536372 		.ascii	"pScratch\000"
 2534      61746368 
 2534      00
 2535              	.LASF33:
 2536 02ea 7133315F 		.ascii	"q31_t\000"
 2536      7400
 2537              	.LASF17:
 2538 02f0 75696E74 		.ascii	"uint32_t\000"
 2538      33325F74 
 2538      00
 2539              	.LASF40:
 2540 02f9 5F5F534D 		.ascii	"__SMUADX\000"
 2540      55414458 
 2540      00
 2541              	.LASF20:
 2542 0302 63686172 		.ascii	"char\000"
 2542      00
 2543              	.LASF57:
 2544 0307 73756D52 		.ascii	"sumReal\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccytUlN7.s 			page 74


 2544      65616C00 
 2545              	.LASF64:
 2546 030f 536F7572 		.ascii	"Source\\MatrixFunctions\\arm_mat_cmplx_mult_q15.c\000"
 2546      63655C4D 
 2546      61747269 
 2546      7846756E 
 2546      6374696F 
 2547              	.LASF27:
 2548 033f 41524D5F 		.ascii	"ARM_MATH_SIZE_MISMATCH\000"
 2548      4D415448 
 2548      5F53495A 
 2548      455F4D49 
 2548      534D4154 
 2549              	.LASF6:
 2550 0356 5F5F696E 		.ascii	"__int32_t\000"
 2550      7433325F 
 2550      7400
 2551              	.LASF38:
 2552 0360 61726D5F 		.ascii	"arm_matrix_instance_q15\000"
 2552      6D617472 
 2552      69785F69 
 2552      6E737461 
 2552      6E63655F 
 2553              	.LASF56:
 2554 0378 73746174 		.ascii	"status\000"
 2554      757300
 2555              	.LASF48:
 2556 037f 70537263 		.ascii	"pSrcBT\000"
 2556      425400
 2557              	.LASF31:
 2558 0386 61726D5F 		.ascii	"arm_status\000"
 2558      73746174 
 2558      757300
 2559              	.LASF18:
 2560 0391 696E7436 		.ascii	"int64_t\000"
 2560      345F7400 
 2561              	.LASF61:
 2562 0399 70536F75 		.ascii	"pSourceA\000"
 2562      72636541 
 2562      00
 2563              	.LASF62:
 2564 03a2 70536F75 		.ascii	"pSourceB\000"
 2564      72636542 
 2564      00
 2565              	.LASF42:
 2566 03ab 706F734D 		.ascii	"posMax\000"
 2566      617800
 2567              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
