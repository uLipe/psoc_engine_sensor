ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_conv_partial_fast_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_conv_partial_fast_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_conv_partial_fast_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_conv_partial_fast_q15, %function
  23              	arm_conv_partial_fast_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\FilteringFunctions\\arm_conv_partial_fast_q15.c"
   1:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** /* ----------------------------------------------------------------------
   2:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * Title:        arm_conv_partial_fast_q15.c
   4:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * Description:  Fast Q15 Partial convolution
   5:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  *
   6:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * $Date:        27. January 2017
   7:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * $Revision:    V.1.5.1
   8:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  *
   9:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** /*
  12:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  *
  14:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  *
  16:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * not use this file except in compliance with the License.
  18:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * You may obtain a copy of the License at
  19:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  *
  20:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  *
  22:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * limitations under the License.
  27:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  */
  28:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
  29:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #include "arm_math.h"
  30:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
  31:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** /**
  32:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * @ingroup groupFilters
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 2


  33:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  */
  34:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
  35:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** /**
  36:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * @addtogroup PartialConv
  37:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * @{
  38:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  */
  39:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
  40:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** /**
  41:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * @brief Partial convolution of Q15 sequences (fast version) for Cortex-M3 and Cortex-M4.
  42:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * @param[in]       *pSrcA points to the first input sequence.
  43:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * @param[in]       srcALen length of the first input sequence.
  44:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * @param[in]       *pSrcB points to the second input sequence.
  45:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * @param[in]       srcBLen length of the second input sequence.
  46:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * @param[out]      *pDst points to the location where the output result is written.
  47:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * @param[in]       firstIndex is the first output sample to start with.
  48:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * @param[in]       numPoints is the number of output points to be computed.
  49:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * @return Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMENT
  50:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  *
  51:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  * See <code>arm_conv_partial_q15()</code> for a slower implementation of this function which uses 
  52:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  */
  53:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
  54:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
  55:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** arm_status arm_conv_partial_fast_q15(
  56:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t * pSrcA,
  57:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   uint32_t srcALen,
  58:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t * pSrcB,
  59:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   uint32_t srcBLen,
  60:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t * pDst,
  61:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   uint32_t firstIndex,
  62:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   uint32_t numPoints)
  63:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** {
  26              		.loc 1 63 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 FEB0     		sub	sp, sp, #504
  33              		.cfi_def_cfa_offset 512
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 B960     		str	r1, [r7, #8]
  38 000a 7A60     		str	r2, [r7, #4]
  39 000c 3B60     		str	r3, [r7]
  64:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifndef UNALIGNED_SUPPORT_DISABLE
  65:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
  66:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t *pIn1;                                   /* inputA pointer               */
  67:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t *pIn2;                                   /* inputB pointer               */
  68:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t *pOut = pDst;                            /* output pointer               */
  40              		.loc 1 68 0
  41 000e 8023     		mov	r3, #128
  42 0010 9B00     		lsl	r3, r3, #2
  43 0012 FB18     		add	r3, r7, r3
  44 0014 1B68     		ldr	r3, [r3]
  45 0016 BB61     		str	r3, [r7, #24]
  69:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q31_t sum, acc0, acc1, acc2, acc3;             /* Accumulator                  */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 3


  70:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t *px;                                     /* Intermediate inputA pointer  */
  71:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t *py;                                     /* Intermediate inputB pointer  */
  72:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t *pSrc1, *pSrc2;                          /* Intermediate pointers        */
  73:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q31_t x0, x1, x2, x3, c0;
  74:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   uint32_t j, k, count, check, blkCnt;
  75:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   int32_t blockSize1, blockSize2, blockSize3;    /* loop counters                 */
  76:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   arm_status status;                             /* status of Partial convolution */
  77:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
  78:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   /* Check for range of output samples to be calculated */
  79:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   if ((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
  46              		.loc 1 79 0
  47 0018 8123     		mov	r3, #129
  48 001a 9B00     		lsl	r3, r3, #2
  49 001c FB18     		add	r3, r7, r3
  50 001e 1A68     		ldr	r2, [r3]
  51 0020 8223     		mov	r3, #130
  52 0022 9B00     		lsl	r3, r3, #2
  53 0024 FB18     		add	r3, r7, r3
  54 0026 1B68     		ldr	r3, [r3]
  55 0028 D218     		add	r2, r2, r3
  56 002a 3968     		ldr	r1, [r7]
  57 002c BB68     		ldr	r3, [r7, #8]
  58 002e CB18     		add	r3, r1, r3
  59 0030 013B     		sub	r3, r3, #1
  60 0032 9A42     		cmp	r2, r3
  61 0034 06D9     		bls	.L2
  80:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   {
  81:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Set status as ARM_MATH_ARGUMENT_ERROR */
  82:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     status = ARM_MATH_ARGUMENT_ERROR;
  62              		.loc 1 82 0
  63 0036 B423     		mov	r3, #180
  64 0038 FF33     		add	r3, r3, #255
  65 003a FB18     		add	r3, r7, r3
  66 003c FF22     		mov	r2, #255
  67 003e 1A70     		strb	r2, [r3]
  68 0040 01F0CCFB 		bl	.L3	@ far jump
  69              	.L2:
  83:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   }
  84:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   else
  85:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   {
  86:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
  87:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The algorithm implementation is based on the lengths of the inputs. */
  88:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* srcB is always made to slide across srcA. */
  89:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* So srcBLen is always considered as shorter or equal to srcALen */
  90:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     if (srcALen >=srcBLen)
  70              		.loc 1 90 0
  71 0044 BA68     		ldr	r2, [r7, #8]
  72 0046 3B68     		ldr	r3, [r7]
  73 0048 9A42     		cmp	r2, r3
  74 004a 0AD3     		bcc	.L4
  91:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
  92:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Initialization of inputA pointer */
  93:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       pIn1 = pSrcA;
  75              		.loc 1 93 0
  76 004c FB68     		ldr	r3, [r7, #12]
  77 004e FA22     		mov	r2, #250
  78 0050 5200     		lsl	r2, r2, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 4


  79 0052 BA18     		add	r2, r7, r2
  80 0054 1360     		str	r3, [r2]
  94:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
  95:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Initialization of inputB pointer */
  96:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       pIn2 = pSrcB;
  81              		.loc 1 96 0
  82 0056 7B68     		ldr	r3, [r7, #4]
  83 0058 F822     		mov	r2, #248
  84 005a 5200     		lsl	r2, r2, #1
  85 005c BA18     		add	r2, r7, r2
  86 005e 1360     		str	r3, [r2]
  87 0060 15E0     		b	.L5
  88              	.L4:
  97:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
  98:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     else
  99:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 100:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Initialization of inputA pointer */
 101:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       pIn1 = pSrcB;
  89              		.loc 1 101 0
  90 0062 7B68     		ldr	r3, [r7, #4]
  91 0064 FA22     		mov	r2, #250
  92 0066 5200     		lsl	r2, r2, #1
  93 0068 BA18     		add	r2, r7, r2
  94 006a 1360     		str	r3, [r2]
 102:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 103:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Initialization of inputB pointer */
 104:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       pIn2 = pSrcA;
  95              		.loc 1 104 0
  96 006c FB68     		ldr	r3, [r7, #12]
  97 006e F822     		mov	r2, #248
  98 0070 5200     		lsl	r2, r2, #1
  99 0072 BA18     		add	r2, r7, r2
 100 0074 1360     		str	r3, [r2]
 105:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 106:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* srcBLen is always considered as shorter or equal to srcALen */
 107:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       j = srcBLen;
 101              		.loc 1 107 0
 102 0076 3B68     		ldr	r3, [r7]
 103 0078 E422     		mov	r2, #228
 104 007a 5200     		lsl	r2, r2, #1
 105 007c BA18     		add	r2, r7, r2
 106 007e 1360     		str	r3, [r2]
 108:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       srcBLen = srcALen;
 107              		.loc 1 108 0
 108 0080 BB68     		ldr	r3, [r7, #8]
 109 0082 3B60     		str	r3, [r7]
 109:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       srcALen = j;
 110              		.loc 1 109 0
 111 0084 E423     		mov	r3, #228
 112 0086 5B00     		lsl	r3, r3, #1
 113 0088 FB18     		add	r3, r7, r3
 114 008a 1B68     		ldr	r3, [r3]
 115 008c BB60     		str	r3, [r7, #8]
 116              	.L5:
 110:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 111:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 112:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Conditions to check which loopCounter holds
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 5


 113:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * the first and last indices of the output samples to be calculated. */
 114:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     check = firstIndex + numPoints;
 117              		.loc 1 114 0
 118 008e 8123     		mov	r3, #129
 119 0090 9B00     		lsl	r3, r3, #2
 120 0092 FB18     		add	r3, r7, r3
 121 0094 1A68     		ldr	r2, [r3]
 122 0096 8223     		mov	r3, #130
 123 0098 9B00     		lsl	r3, r3, #2
 124 009a FB18     		add	r3, r7, r3
 125 009c 1B68     		ldr	r3, [r3]
 126 009e D318     		add	r3, r2, r3
 127 00a0 D622     		mov	r2, #214
 128 00a2 5200     		lsl	r2, r2, #1
 129 00a4 BA18     		add	r2, r7, r2
 130 00a6 1360     		str	r3, [r2]
 115:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize3 = ((int32_t)check > (int32_t)srcALen) ? (int32_t)check - (int32_t)srcALen : 0;
 131              		.loc 1 115 0
 132 00a8 D623     		mov	r3, #214
 133 00aa 5B00     		lsl	r3, r3, #1
 134 00ac FB18     		add	r3, r7, r3
 135 00ae 1A68     		ldr	r2, [r3]
 136 00b0 BB68     		ldr	r3, [r7, #8]
 137 00b2 9A42     		cmp	r2, r3
 138 00b4 06DD     		ble	.L6
 139              		.loc 1 115 0 is_stmt 0 discriminator 1
 140 00b6 D623     		mov	r3, #214
 141 00b8 5B00     		lsl	r3, r3, #1
 142 00ba FB18     		add	r3, r7, r3
 143 00bc 1A68     		ldr	r2, [r3]
 144 00be BB68     		ldr	r3, [r7, #8]
 145 00c0 D31A     		sub	r3, r2, r3
 146 00c2 00E0     		b	.L7
 147              	.L6:
 148              		.loc 1 115 0 discriminator 2
 149 00c4 0023     		mov	r3, #0
 150              	.L7:
 151              		.loc 1 115 0 discriminator 4
 152 00c6 DA22     		mov	r2, #218
 153 00c8 5200     		lsl	r2, r2, #1
 154 00ca BA18     		add	r2, r7, r2
 155 00cc 1360     		str	r3, [r2]
 116:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize3 = ((int32_t)firstIndex > (int32_t)srcALen - 1) ? blockSize3 - (int32_t)firstIndex + 
 156              		.loc 1 116 0 is_stmt 1 discriminator 4
 157 00ce 8123     		mov	r3, #129
 158 00d0 9B00     		lsl	r3, r3, #2
 159 00d2 FB18     		add	r3, r7, r3
 160 00d4 1A68     		ldr	r2, [r3]
 161 00d6 BB68     		ldr	r3, [r7, #8]
 162 00d8 013B     		sub	r3, r3, #1
 163 00da 9A42     		cmp	r2, r3
 164 00dc 0BDD     		ble	.L8
 165              		.loc 1 116 0 is_stmt 0 discriminator 1
 166 00de 8123     		mov	r3, #129
 167 00e0 9B00     		lsl	r3, r3, #2
 168 00e2 FB18     		add	r3, r7, r3
 169 00e4 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 6


 170 00e6 DA22     		mov	r2, #218
 171 00e8 5200     		lsl	r2, r2, #1
 172 00ea BA18     		add	r2, r7, r2
 173 00ec 1268     		ldr	r2, [r2]
 174 00ee D21A     		sub	r2, r2, r3
 175 00f0 BB68     		ldr	r3, [r7, #8]
 176 00f2 D318     		add	r3, r2, r3
 177 00f4 03E0     		b	.L9
 178              	.L8:
 179              		.loc 1 116 0 discriminator 2
 180 00f6 DA23     		mov	r3, #218
 181 00f8 5B00     		lsl	r3, r3, #1
 182 00fa FB18     		add	r3, r7, r3
 183 00fc 1B68     		ldr	r3, [r3]
 184              	.L9:
 185              		.loc 1 116 0 discriminator 4
 186 00fe DA22     		mov	r2, #218
 187 0100 5200     		lsl	r2, r2, #1
 188 0102 BA18     		add	r2, r7, r2
 189 0104 1360     		str	r3, [r2]
 117:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize1 = (((int32_t) srcBLen - 1) - (int32_t) firstIndex);
 190              		.loc 1 117 0 is_stmt 1 discriminator 4
 191 0106 3A68     		ldr	r2, [r7]
 192 0108 8123     		mov	r3, #129
 193 010a 9B00     		lsl	r3, r3, #2
 194 010c FB18     		add	r3, r7, r3
 195 010e 1B68     		ldr	r3, [r3]
 196 0110 D31A     		sub	r3, r2, r3
 197 0112 013B     		sub	r3, r3, #1
 198 0114 DC22     		mov	r2, #220
 199 0116 5200     		lsl	r2, r2, #1
 200 0118 BA18     		add	r2, r7, r2
 201 011a 1360     		str	r3, [r2]
 118:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
 119:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****                                      (int32_t) numPoints) : 0;
 202              		.loc 1 119 0 discriminator 4
 203 011c DC23     		mov	r3, #220
 204 011e 5B00     		lsl	r3, r3, #1
 205 0120 FB18     		add	r3, r7, r3
 206 0122 1B68     		ldr	r3, [r3]
 207 0124 002B     		cmp	r3, #0
 208 0126 11DD     		ble	.L10
 118:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
 209              		.loc 1 118 0
 210 0128 3B68     		ldr	r3, [r7]
 211 012a 5A1E     		sub	r2, r3, #1
 212 012c D623     		mov	r3, #214
 213 012e 5B00     		lsl	r3, r3, #1
 214 0130 FB18     		add	r3, r7, r3
 215 0132 1B68     		ldr	r3, [r3]
 216 0134 9A42     		cmp	r2, r3
 217 0136 04D3     		bcc	.L11
 118:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
 218              		.loc 1 118 0 is_stmt 0 discriminator 1
 219 0138 8223     		mov	r3, #130
 220 013a 9B00     		lsl	r3, r3, #2
 221 013c FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 7


 222 013e 1B68     		ldr	r3, [r3]
 223 0140 05E0     		b	.L13
 224              	.L11:
 118:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
 225              		.loc 1 118 0 discriminator 2
 226 0142 DC23     		mov	r3, #220
 227 0144 5B00     		lsl	r3, r3, #1
 228 0146 FB18     		add	r3, r7, r3
 229 0148 1B68     		ldr	r3, [r3]
 230 014a 00E0     		b	.L13
 231              	.L10:
 232              		.loc 1 119 0 is_stmt 1 discriminator 1
 233 014c 0023     		mov	r3, #0
 234              	.L13:
 118:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
 235              		.loc 1 118 0
 236 014e DC22     		mov	r2, #220
 237 0150 5200     		lsl	r2, r2, #1
 238 0152 BA18     		add	r2, r7, r2
 239 0154 1360     		str	r3, [r2]
 120:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize2 = (int32_t) check - ((blockSize3 + blockSize1) +
 240              		.loc 1 120 0
 241 0156 D623     		mov	r3, #214
 242 0158 5B00     		lsl	r3, r3, #1
 243 015a FB18     		add	r3, r7, r3
 244 015c 1A68     		ldr	r2, [r3]
 245 015e DA23     		mov	r3, #218
 246 0160 5B00     		lsl	r3, r3, #1
 247 0162 FB18     		add	r3, r7, r3
 248 0164 1968     		ldr	r1, [r3]
 249 0166 DC23     		mov	r3, #220
 250 0168 5B00     		lsl	r3, r3, #1
 251 016a FB18     		add	r3, r7, r3
 252 016c 1B68     		ldr	r3, [r3]
 253 016e C918     		add	r1, r1, r3
 121:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****                                     (int32_t) firstIndex);
 254              		.loc 1 121 0
 255 0170 8123     		mov	r3, #129
 256 0172 9B00     		lsl	r3, r3, #2
 257 0174 FB18     		add	r3, r7, r3
 258 0176 1B68     		ldr	r3, [r3]
 120:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize2 = (int32_t) check - ((blockSize3 + blockSize1) +
 259              		.loc 1 120 0
 260 0178 CB18     		add	r3, r1, r3
 261 017a D31A     		sub	r3, r2, r3
 262 017c D422     		mov	r2, #212
 263 017e 5200     		lsl	r2, r2, #1
 264 0180 BA18     		add	r2, r7, r2
 265 0182 1360     		str	r3, [r2]
 122:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize2 = (blockSize2 > 0) ? blockSize2 : 0;
 266              		.loc 1 122 0
 267 0184 D423     		mov	r3, #212
 268 0186 5B00     		lsl	r3, r3, #1
 269 0188 FB18     		add	r3, r7, r3
 270 018a 1B68     		ldr	r3, [r3]
 271 018c 002B     		cmp	r3, #0
 272 018e 00DA     		bge	.L14
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 8


 273 0190 0023     		mov	r3, #0
 274              	.L14:
 275 0192 D422     		mov	r2, #212
 276 0194 5200     		lsl	r2, r2, #1
 277 0196 BA18     		add	r2, r7, r2
 278 0198 1360     		str	r3, [r2]
 123:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 124:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
 125:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The function is internally
 126:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * divided into three stages according to the number of multiplications that has to be
 127:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * taken place between inputA samples and inputB samples. In the first stage of the
 128:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * algorithm, the multiplications increase by one for every iteration.
 129:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * In the second stage of the algorithm, srcBLen number of multiplications are done.
 130:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * In the third stage of the algorithm, the multiplications decrease by one
 131:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * for every iteration. */
 132:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 133:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Set the output pointer to point to the firstIndex
 134:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * of the output sample to be calculated. */
 135:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     pOut = pDst + firstIndex;
 279              		.loc 1 135 0
 280 019a 8123     		mov	r3, #129
 281 019c 9B00     		lsl	r3, r3, #2
 282 019e FB18     		add	r3, r7, r3
 283 01a0 1B68     		ldr	r3, [r3]
 284 01a2 5B00     		lsl	r3, r3, #1
 285 01a4 8022     		mov	r2, #128
 286 01a6 9200     		lsl	r2, r2, #2
 287 01a8 BA18     		add	r2, r7, r2
 288 01aa 1268     		ldr	r2, [r2]
 289 01ac D318     		add	r3, r2, r3
 290 01ae BB61     		str	r3, [r7, #24]
 136:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 137:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* --------------------------
 138:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * Initializations of stage1
 139:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * -------------------------*/
 140:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 141:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* sum = x[0] * y[0]
 142:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum = x[0] * y[1] + x[1] * y[0]
 143:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * ....
 144:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]
 145:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      */
 146:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 147:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* In this stage the MAC operations are increased by 1 for every iteration.
 148:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        The count variable holds the number of MAC operations performed.
 149:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        Since the partial convolution starts from firstIndex
 150:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        Number of Macs to be performed is firstIndex + 1 */
 151:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     count = 1u + firstIndex;
 291              		.loc 1 151 0
 292 01b0 8123     		mov	r3, #129
 293 01b2 9B00     		lsl	r3, r3, #2
 294 01b4 FB18     		add	r3, r7, r3
 295 01b6 1B68     		ldr	r3, [r3]
 296 01b8 0133     		add	r3, r3, #1
 297 01ba E022     		mov	r2, #224
 298 01bc 5200     		lsl	r2, r2, #1
 299 01be BA18     		add	r2, r7, r2
 300 01c0 1360     		str	r3, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 9


 152:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 153:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Working pointer of inputA */
 154:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     px = pIn1;
 301              		.loc 1 154 0
 302 01c2 FA23     		mov	r3, #250
 303 01c4 5B00     		lsl	r3, r3, #1
 304 01c6 FB18     		add	r3, r7, r3
 305 01c8 1B68     		ldr	r3, [r3]
 306 01ca 7B61     		str	r3, [r7, #20]
 155:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 156:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Working pointer of inputB */
 157:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     pSrc2 = pIn2 + firstIndex;
 307              		.loc 1 157 0
 308 01cc 8123     		mov	r3, #129
 309 01ce 9B00     		lsl	r3, r3, #2
 310 01d0 FB18     		add	r3, r7, r3
 311 01d2 1B68     		ldr	r3, [r3]
 312 01d4 5B00     		lsl	r3, r3, #1
 313 01d6 F822     		mov	r2, #248
 314 01d8 5200     		lsl	r2, r2, #1
 315 01da BA18     		add	r2, r7, r2
 316 01dc 1268     		ldr	r2, [r2]
 317 01de D318     		add	r3, r2, r3
 318 01e0 EA22     		mov	r2, #234
 319 01e2 5200     		lsl	r2, r2, #1
 320 01e4 BA18     		add	r2, r7, r2
 321 01e6 1360     		str	r3, [r2]
 158:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     py = pSrc2;
 322              		.loc 1 158 0
 323 01e8 EA23     		mov	r3, #234
 324 01ea 5B00     		lsl	r3, r3, #1
 325 01ec FB18     		add	r3, r7, r3
 326 01ee 1B68     		ldr	r3, [r3]
 327 01f0 3B61     		str	r3, [r7, #16]
 159:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 160:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* ------------------------
 161:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * Stage1 process
 162:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * ----------------------*/
 163:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 164:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* For loop unrolling by 4, this stage is divided into two. */
 165:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* First part of this stage computes the MAC operations less than 4 */
 166:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Second part of this stage computes the MAC operations greater than or equal to 4 */
 167:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 168:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The first part of the stage starts here */
 169:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     while ((count < 4u) && (blockSize1 > 0))
 328              		.loc 1 169 0
 329 01f2 87E0     		b	.L15
 330              	.L20:
 170:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 171:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Accumulator is made zero for every iteration */
 172:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       sum = 0;
 331              		.loc 1 172 0
 332 01f4 0023     		mov	r3, #0
 333 01f6 F622     		mov	r2, #246
 334 01f8 5200     		lsl	r2, r2, #1
 335 01fa BA18     		add	r2, r7, r2
 336 01fc 1360     		str	r3, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 10


 173:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 174:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Loop over number of MAC operations between
 175:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        * inputA samples and inputB samples */
 176:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = count;
 337              		.loc 1 176 0
 338 01fe E023     		mov	r3, #224
 339 0200 5B00     		lsl	r3, r3, #1
 340 0202 FB18     		add	r3, r7, r3
 341 0204 1B68     		ldr	r3, [r3]
 342 0206 E222     		mov	r2, #226
 343 0208 5200     		lsl	r2, r2, #1
 344 020a BA18     		add	r2, r7, r2
 345 020c 1360     		str	r3, [r2]
 177:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 178:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (k > 0u)
 346              		.loc 1 178 0
 347 020e 44E0     		b	.L16
 348              	.L18:
 179:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 180:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Perform the multiply-accumulates */
 181:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum = __SMLAD(*px++, *py--, sum);
 349              		.loc 1 181 0
 350 0210 7B69     		ldr	r3, [r7, #20]
 351 0212 9A1C     		add	r2, r3, #2
 352 0214 7A61     		str	r2, [r7, #20]
 353 0216 1B88     		ldrh	r3, [r3]
 354 0218 19B2     		sxth	r1, r3
 355 021a 3B69     		ldr	r3, [r7, #16]
 356 021c 9A1E     		sub	r2, r3, #2
 357 021e 3A61     		str	r2, [r7, #16]
 358 0220 1B88     		ldrh	r3, [r3]
 359 0222 1AB2     		sxth	r2, r3
 360 0224 F623     		mov	r3, #246
 361 0226 5B00     		lsl	r3, r3, #1
 362 0228 FB18     		add	r3, r7, r3
 363 022a 1B68     		ldr	r3, [r3]
 364 022c CC20     		mov	r0, #204
 365 022e 4000     		lsl	r0, r0, #1
 366 0230 3818     		add	r0, r7, r0
 367 0232 0160     		str	r1, [r0]
 368 0234 CA21     		mov	r1, #202
 369 0236 4900     		lsl	r1, r1, #1
 370 0238 7918     		add	r1, r7, r1
 371 023a 0A60     		str	r2, [r1]
 372 023c C822     		mov	r2, #200
 373 023e 5200     		lsl	r2, r2, #1
 374 0240 BA18     		add	r2, r7, r2
 375 0242 1360     		str	r3, [r2]
 376              	.LBB66:
 377              	.LBB67:
 378              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 11


   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 12


  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 13


 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 14


 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 15


 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 16


 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 17


 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 18


 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 19


 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 20


 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 21


 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 22


 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 23


 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 724:.\Include/arm_math.h ****   }
 725:.\Include/arm_math.h **** #endif /* end of ARM_MATH_CM0_FAMILY */
 726:.\Include/arm_math.h **** 
 727:.\Include/arm_math.h **** 
 728:.\Include/arm_math.h ****   /*
 729:.\Include/arm_math.h ****    * @brief C custom defined intrinsic function for M3 and M0 processors
 730:.\Include/arm_math.h ****    */
 731:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 732:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 733:.\Include/arm_math.h **** 
 734:.\Include/arm_math.h ****   /*
 735:.\Include/arm_math.h ****    * @brief C custom defined QADD8 for M3 and M0 processors
 736:.\Include/arm_math.h ****    */
 737:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD8(
 738:.\Include/arm_math.h ****   uint32_t x,
 739:.\Include/arm_math.h ****   uint32_t y)
 740:.\Include/arm_math.h ****   {
 741:.\Include/arm_math.h ****     q31_t r, s, t, u;
 742:.\Include/arm_math.h **** 
 743:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) + (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 744:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) + (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 745:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) + (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 746:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) + (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 747:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 24


 748:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 749:.\Include/arm_math.h ****   }
 750:.\Include/arm_math.h **** 
 751:.\Include/arm_math.h **** 
 752:.\Include/arm_math.h ****   /*
 753:.\Include/arm_math.h ****    * @brief C custom defined QSUB8 for M3 and M0 processors
 754:.\Include/arm_math.h ****    */
 755:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB8(
 756:.\Include/arm_math.h ****   uint32_t x,
 757:.\Include/arm_math.h ****   uint32_t y)
 758:.\Include/arm_math.h ****   {
 759:.\Include/arm_math.h ****     q31_t r, s, t, u;
 760:.\Include/arm_math.h **** 
 761:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) - (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 762:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) - (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 763:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) - (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 764:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) - (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 765:.\Include/arm_math.h **** 
 766:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 767:.\Include/arm_math.h ****   }
 768:.\Include/arm_math.h **** 
 769:.\Include/arm_math.h **** 
 770:.\Include/arm_math.h ****   /*
 771:.\Include/arm_math.h ****    * @brief C custom defined QADD16 for M3 and M0 processors
 772:.\Include/arm_math.h ****    */
 773:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD16(
 774:.\Include/arm_math.h ****   uint32_t x,
 775:.\Include/arm_math.h ****   uint32_t y)
 776:.\Include/arm_math.h ****   {
 777:.\Include/arm_math.h **** /*  q31_t r,     s;  without initialisation 'arm_offset_q15 test' fails  but 'intrinsic' tests pass
 778:.\Include/arm_math.h ****     q31_t r = 0, s = 0;
 779:.\Include/arm_math.h **** 
 780:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 781:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 782:.\Include/arm_math.h **** 
 783:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 784:.\Include/arm_math.h ****   }
 785:.\Include/arm_math.h **** 
 786:.\Include/arm_math.h **** 
 787:.\Include/arm_math.h ****   /*
 788:.\Include/arm_math.h ****    * @brief C custom defined SHADD16 for M3 and M0 processors
 789:.\Include/arm_math.h ****    */
 790:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHADD16(
 791:.\Include/arm_math.h ****   uint32_t x,
 792:.\Include/arm_math.h ****   uint32_t y)
 793:.\Include/arm_math.h ****   {
 794:.\Include/arm_math.h ****     q31_t r, s;
 795:.\Include/arm_math.h **** 
 796:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 797:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 798:.\Include/arm_math.h **** 
 799:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 800:.\Include/arm_math.h ****   }
 801:.\Include/arm_math.h **** 
 802:.\Include/arm_math.h **** 
 803:.\Include/arm_math.h ****   /*
 804:.\Include/arm_math.h ****    * @brief C custom defined QSUB16 for M3 and M0 processors
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 25


 805:.\Include/arm_math.h ****    */
 806:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB16(
 807:.\Include/arm_math.h ****   uint32_t x,
 808:.\Include/arm_math.h ****   uint32_t y)
 809:.\Include/arm_math.h ****   {
 810:.\Include/arm_math.h ****     q31_t r, s;
 811:.\Include/arm_math.h **** 
 812:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 813:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 814:.\Include/arm_math.h **** 
 815:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 816:.\Include/arm_math.h ****   }
 817:.\Include/arm_math.h **** 
 818:.\Include/arm_math.h **** 
 819:.\Include/arm_math.h ****   /*
 820:.\Include/arm_math.h ****    * @brief C custom defined SHSUB16 for M3 and M0 processors
 821:.\Include/arm_math.h ****    */
 822:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSUB16(
 823:.\Include/arm_math.h ****   uint32_t x,
 824:.\Include/arm_math.h ****   uint32_t y)
 825:.\Include/arm_math.h ****   {
 826:.\Include/arm_math.h ****     q31_t r, s;
 827:.\Include/arm_math.h **** 
 828:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 829:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 830:.\Include/arm_math.h **** 
 831:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 832:.\Include/arm_math.h ****   }
 833:.\Include/arm_math.h **** 
 834:.\Include/arm_math.h **** 
 835:.\Include/arm_math.h ****   /*
 836:.\Include/arm_math.h ****    * @brief C custom defined QASX for M3 and M0 processors
 837:.\Include/arm_math.h ****    */
 838:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QASX(
 839:.\Include/arm_math.h ****   uint32_t x,
 840:.\Include/arm_math.h ****   uint32_t y)
 841:.\Include/arm_math.h ****   {
 842:.\Include/arm_math.h ****     q31_t r, s;
 843:.\Include/arm_math.h **** 
 844:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 845:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 846:.\Include/arm_math.h **** 
 847:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 848:.\Include/arm_math.h ****   }
 849:.\Include/arm_math.h **** 
 850:.\Include/arm_math.h **** 
 851:.\Include/arm_math.h ****   /*
 852:.\Include/arm_math.h ****    * @brief C custom defined SHASX for M3 and M0 processors
 853:.\Include/arm_math.h ****    */
 854:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHASX(
 855:.\Include/arm_math.h ****   uint32_t x,
 856:.\Include/arm_math.h ****   uint32_t y)
 857:.\Include/arm_math.h ****   {
 858:.\Include/arm_math.h ****     q31_t r, s;
 859:.\Include/arm_math.h **** 
 860:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 861:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 26


 862:.\Include/arm_math.h **** 
 863:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 864:.\Include/arm_math.h ****   }
 865:.\Include/arm_math.h **** 
 866:.\Include/arm_math.h **** 
 867:.\Include/arm_math.h ****   /*
 868:.\Include/arm_math.h ****    * @brief C custom defined QSAX for M3 and M0 processors
 869:.\Include/arm_math.h ****    */
 870:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSAX(
 871:.\Include/arm_math.h ****   uint32_t x,
 872:.\Include/arm_math.h ****   uint32_t y)
 873:.\Include/arm_math.h ****   {
 874:.\Include/arm_math.h ****     q31_t r, s;
 875:.\Include/arm_math.h **** 
 876:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 877:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 878:.\Include/arm_math.h **** 
 879:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 880:.\Include/arm_math.h ****   }
 881:.\Include/arm_math.h **** 
 882:.\Include/arm_math.h **** 
 883:.\Include/arm_math.h ****   /*
 884:.\Include/arm_math.h ****    * @brief C custom defined SHSAX for M3 and M0 processors
 885:.\Include/arm_math.h ****    */
 886:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSAX(
 887:.\Include/arm_math.h ****   uint32_t x,
 888:.\Include/arm_math.h ****   uint32_t y)
 889:.\Include/arm_math.h ****   {
 890:.\Include/arm_math.h ****     q31_t r, s;
 891:.\Include/arm_math.h **** 
 892:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 893:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 894:.\Include/arm_math.h **** 
 895:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 896:.\Include/arm_math.h ****   }
 897:.\Include/arm_math.h **** 
 898:.\Include/arm_math.h **** 
 899:.\Include/arm_math.h ****   /*
 900:.\Include/arm_math.h ****    * @brief C custom defined SMUSDX for M3 and M0 processors
 901:.\Include/arm_math.h ****    */
 902:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUSDX(
 903:.\Include/arm_math.h ****   uint32_t x,
 904:.\Include/arm_math.h ****   uint32_t y)
 905:.\Include/arm_math.h ****   {
 906:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 907:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 908:.\Include/arm_math.h ****   }
 909:.\Include/arm_math.h **** 
 910:.\Include/arm_math.h ****   /*
 911:.\Include/arm_math.h ****    * @brief C custom defined SMUADX for M3 and M0 processors
 912:.\Include/arm_math.h ****    */
 913:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUADX(
 914:.\Include/arm_math.h ****   uint32_t x,
 915:.\Include/arm_math.h ****   uint32_t y)
 916:.\Include/arm_math.h ****   {
 917:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 918:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 27


 919:.\Include/arm_math.h ****   }
 920:.\Include/arm_math.h **** 
 921:.\Include/arm_math.h **** 
 922:.\Include/arm_math.h ****   /*
 923:.\Include/arm_math.h ****    * @brief C custom defined QADD for M3 and M0 processors
 924:.\Include/arm_math.h ****    */
 925:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QADD(
 926:.\Include/arm_math.h ****   int32_t x,
 927:.\Include/arm_math.h ****   int32_t y)
 928:.\Include/arm_math.h ****   {
 929:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x + (q31_t)y)));
 930:.\Include/arm_math.h ****   }
 931:.\Include/arm_math.h **** 
 932:.\Include/arm_math.h **** 
 933:.\Include/arm_math.h ****   /*
 934:.\Include/arm_math.h ****    * @brief C custom defined QSUB for M3 and M0 processors
 935:.\Include/arm_math.h ****    */
 936:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QSUB(
 937:.\Include/arm_math.h ****   int32_t x,
 938:.\Include/arm_math.h ****   int32_t y)
 939:.\Include/arm_math.h ****   {
 940:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x - (q31_t)y)));
 941:.\Include/arm_math.h ****   }
 942:.\Include/arm_math.h **** 
 943:.\Include/arm_math.h **** 
 944:.\Include/arm_math.h ****   /*
 945:.\Include/arm_math.h ****    * @brief C custom defined SMLAD for M3 and M0 processors
 946:.\Include/arm_math.h ****    */
 947:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLAD(
 948:.\Include/arm_math.h ****   uint32_t x,
 949:.\Include/arm_math.h ****   uint32_t y,
 950:.\Include/arm_math.h ****   uint32_t sum)
 951:.\Include/arm_math.h ****   {
 952:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 379              		.loc 2 952 0
 380 0244 CC23     		mov	r3, #204
 381 0246 5B00     		lsl	r3, r3, #1
 382 0248 FB18     		add	r3, r7, r3
 383 024a 1B68     		ldr	r3, [r3]
 384 024c 1B04     		lsl	r3, r3, #16
 385 024e 1B14     		asr	r3, r3, #16
 386 0250 CA22     		mov	r2, #202
 387 0252 5200     		lsl	r2, r2, #1
 388 0254 BA18     		add	r2, r7, r2
 389 0256 1268     		ldr	r2, [r2]
 390 0258 1204     		lsl	r2, r2, #16
 391 025a 1214     		asr	r2, r2, #16
 392 025c 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 393              		.loc 2 953 0
 394 025e CC23     		mov	r3, #204
 395 0260 5B00     		lsl	r3, r3, #1
 396 0262 FB18     		add	r3, r7, r3
 397 0264 1B68     		ldr	r3, [r3]
 398 0266 1B14     		asr	r3, r3, #16
 399 0268 CA21     		mov	r1, #202
 400 026a 4900     		lsl	r1, r1, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 28


 401 026c 7918     		add	r1, r7, r1
 402 026e 0968     		ldr	r1, [r1]
 403 0270 0914     		asr	r1, r1, #16
 404 0272 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 405              		.loc 2 952 0
 406 0274 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 407              		.loc 2 954 0
 408 0276 C823     		mov	r3, #200
 409 0278 5B00     		lsl	r3, r3, #1
 410 027a FB18     		add	r3, r7, r3
 411 027c 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 412              		.loc 2 953 0
 413 027e D318     		add	r3, r2, r3
 414              	.LBE67:
 415              	.LBE66:
 416              		.loc 1 181 0
 417 0280 F622     		mov	r2, #246
 418 0282 5200     		lsl	r2, r2, #1
 419 0284 BA18     		add	r2, r7, r2
 420 0286 1360     		str	r3, [r2]
 182:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 183:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
 184:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k--;
 421              		.loc 1 184 0
 422 0288 E223     		mov	r3, #226
 423 028a 5B00     		lsl	r3, r3, #1
 424 028c FB18     		add	r3, r7, r3
 425 028e 1B68     		ldr	r3, [r3]
 426 0290 013B     		sub	r3, r3, #1
 427 0292 E222     		mov	r2, #226
 428 0294 5200     		lsl	r2, r2, #1
 429 0296 BA18     		add	r2, r7, r2
 430 0298 1360     		str	r3, [r2]
 431              	.L16:
 178:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 432              		.loc 1 178 0
 433 029a E223     		mov	r3, #226
 434 029c 5B00     		lsl	r3, r3, #1
 435 029e FB18     		add	r3, r7, r3
 436 02a0 1B68     		ldr	r3, [r3]
 437 02a2 002B     		cmp	r3, #0
 438 02a4 B4D1     		bne	.L18
 185:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
 186:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 187:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Store the result in the accumulator in the destination buffer. */
 188:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       *pOut++ = (q15_t) (sum >> 15);
 439              		.loc 1 188 0
 440 02a6 BB69     		ldr	r3, [r7, #24]
 441 02a8 9A1C     		add	r2, r3, #2
 442 02aa BA61     		str	r2, [r7, #24]
 443 02ac F622     		mov	r2, #246
 444 02ae 5200     		lsl	r2, r2, #1
 445 02b0 BA18     		add	r2, r7, r2
 446 02b2 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 29


 447 02b4 D213     		asr	r2, r2, #15
 448 02b6 92B2     		uxth	r2, r2
 449 02b8 1A80     		strh	r2, [r3]
 189:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 190:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 191:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       py = ++pSrc2;
 450              		.loc 1 191 0
 451 02ba EA23     		mov	r3, #234
 452 02bc 5B00     		lsl	r3, r3, #1
 453 02be FB18     		add	r3, r7, r3
 454 02c0 1B68     		ldr	r3, [r3]
 455 02c2 0233     		add	r3, r3, #2
 456 02c4 EA22     		mov	r2, #234
 457 02c6 5200     		lsl	r2, r2, #1
 458 02c8 BA18     		add	r2, r7, r2
 459 02ca 1360     		str	r3, [r2]
 460 02cc EA23     		mov	r3, #234
 461 02ce 5B00     		lsl	r3, r3, #1
 462 02d0 FB18     		add	r3, r7, r3
 463 02d2 1B68     		ldr	r3, [r3]
 464 02d4 3B61     		str	r3, [r7, #16]
 192:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       px = pIn1;
 465              		.loc 1 192 0
 466 02d6 FA23     		mov	r3, #250
 467 02d8 5B00     		lsl	r3, r3, #1
 468 02da FB18     		add	r3, r7, r3
 469 02dc 1B68     		ldr	r3, [r3]
 470 02de 7B61     		str	r3, [r7, #20]
 193:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 194:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Increment the MAC count */
 195:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       count++;
 471              		.loc 1 195 0
 472 02e0 E023     		mov	r3, #224
 473 02e2 5B00     		lsl	r3, r3, #1
 474 02e4 FB18     		add	r3, r7, r3
 475 02e6 1B68     		ldr	r3, [r3]
 476 02e8 0133     		add	r3, r3, #1
 477 02ea E022     		mov	r2, #224
 478 02ec 5200     		lsl	r2, r2, #1
 479 02ee BA18     		add	r2, r7, r2
 480 02f0 1360     		str	r3, [r2]
 196:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 197:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the loop counter */
 198:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blockSize1--;
 481              		.loc 1 198 0
 482 02f2 DC23     		mov	r3, #220
 483 02f4 5B00     		lsl	r3, r3, #1
 484 02f6 FB18     		add	r3, r7, r3
 485 02f8 1B68     		ldr	r3, [r3]
 486 02fa 013B     		sub	r3, r3, #1
 487 02fc DC22     		mov	r2, #220
 488 02fe 5200     		lsl	r2, r2, #1
 489 0300 BA18     		add	r2, r7, r2
 490 0302 1360     		str	r3, [r2]
 491              	.L15:
 169:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 492              		.loc 1 169 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 30


 493 0304 E023     		mov	r3, #224
 494 0306 5B00     		lsl	r3, r3, #1
 495 0308 FB18     		add	r3, r7, r3
 496 030a 1B68     		ldr	r3, [r3]
 497 030c 032B     		cmp	r3, #3
 498 030e 06D8     		bhi	.L19
 169:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 499              		.loc 1 169 0 is_stmt 0 discriminator 1
 500 0310 DC23     		mov	r3, #220
 501 0312 5B00     		lsl	r3, r3, #1
 502 0314 FB18     		add	r3, r7, r3
 503 0316 1B68     		ldr	r3, [r3]
 504 0318 002B     		cmp	r3, #0
 505 031a 00DD     		ble	.LCB447
 506 031c 6AE7     		b	.L20	@long jump
 507              	.LCB447:
 508              	.L19:
 199:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 200:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 201:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The second part of the stage starts here */
 202:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The internal loop, over count, is unrolled by 4 */
 203:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* To, read the last two inputB samples using SIMD:
 204:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * y[srcBLen] and y[srcBLen-1] coefficients, py is decremented by 1 */
 205:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     py = py - 1;
 509              		.loc 1 205 0 is_stmt 1
 510 031e 3B69     		ldr	r3, [r7, #16]
 511 0320 023B     		sub	r3, r3, #2
 512 0322 3B61     		str	r3, [r7, #16]
 206:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 207:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     while (blockSize1 > 0)
 513              		.loc 1 207 0
 514 0324 27E1     		b	.L21
 515              	.L29:
 208:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 209:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Accumulator is made zero for every iteration */
 210:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       sum = 0;
 516              		.loc 1 210 0
 517 0326 0023     		mov	r3, #0
 518 0328 F622     		mov	r2, #246
 519 032a 5200     		lsl	r2, r2, #1
 520 032c BA18     		add	r2, r7, r2
 521 032e 1360     		str	r3, [r2]
 211:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 212:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 213:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = count >> 2u;
 522              		.loc 1 213 0
 523 0330 E023     		mov	r3, #224
 524 0332 5B00     		lsl	r3, r3, #1
 525 0334 FB18     		add	r3, r7, r3
 526 0336 1B68     		ldr	r3, [r3]
 527 0338 9B08     		lsr	r3, r3, #2
 528 033a E222     		mov	r2, #226
 529 033c 5200     		lsl	r2, r2, #1
 530 033e BA18     		add	r2, r7, r2
 531 0340 1360     		str	r3, [r2]
 214:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 215:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 31


 216:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 217:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (k > 0u)
 532              		.loc 1 217 0
 533 0342 88E0     		b	.L22
 534              	.L25:
 218:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 219:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Perform the multiply-accumulates */
 220:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* x[0], x[1] are multiplied with y[srcBLen - 1], y[srcBLen - 2] respectively */
 221:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum = __SMLADX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 535              		.loc 1 221 0
 536 0344 1423     		mov	r3, #20
 537 0346 FB18     		add	r3, r7, r3
 538 0348 1A68     		ldr	r2, [r3]
 539 034a 111D     		add	r1, r2, #4
 540 034c 1960     		str	r1, [r3]
 541 034e 1368     		ldr	r3, [r2]
 542 0350 181C     		mov	r0, r3
 543 0352 1023     		mov	r3, #16
 544 0354 FB18     		add	r3, r7, r3
 545 0356 1A68     		ldr	r2, [r3]
 546 0358 111F     		sub	r1, r2, #4
 547 035a 1960     		str	r1, [r3]
 548 035c 1368     		ldr	r3, [r2]
 549 035e 1A1C     		mov	r2, r3
 550 0360 F623     		mov	r3, #246
 551 0362 5B00     		lsl	r3, r3, #1
 552 0364 FB18     		add	r3, r7, r3
 553 0366 1B68     		ldr	r3, [r3]
 554 0368 C621     		mov	r1, #198
 555 036a 4900     		lsl	r1, r1, #1
 556 036c 7918     		add	r1, r7, r1
 557 036e 0860     		str	r0, [r1]
 558 0370 C421     		mov	r1, #196
 559 0372 4900     		lsl	r1, r1, #1
 560 0374 7918     		add	r1, r7, r1
 561 0376 0A60     		str	r2, [r1]
 562 0378 C222     		mov	r2, #194
 563 037a 5200     		lsl	r2, r2, #1
 564 037c BA18     		add	r2, r7, r2
 565 037e 1360     		str	r3, [r2]
 566              	.LBB68:
 567              	.LBB69:
 955:.\Include/arm_math.h ****   }
 956:.\Include/arm_math.h **** 
 957:.\Include/arm_math.h **** 
 958:.\Include/arm_math.h ****   /*
 959:.\Include/arm_math.h ****    * @brief C custom defined SMLADX for M3 and M0 processors
 960:.\Include/arm_math.h ****    */
 961:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLADX(
 962:.\Include/arm_math.h ****   uint32_t x,
 963:.\Include/arm_math.h ****   uint32_t y,
 964:.\Include/arm_math.h ****   uint32_t sum)
 965:.\Include/arm_math.h ****   {
 966:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 568              		.loc 2 966 0
 569 0380 C623     		mov	r3, #198
 570 0382 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 32


 571 0384 FB18     		add	r3, r7, r3
 572 0386 1B68     		ldr	r3, [r3]
 573 0388 1B04     		lsl	r3, r3, #16
 574 038a 1B14     		asr	r3, r3, #16
 575 038c C422     		mov	r2, #196
 576 038e 5200     		lsl	r2, r2, #1
 577 0390 BA18     		add	r2, r7, r2
 578 0392 1268     		ldr	r2, [r2]
 579 0394 1214     		asr	r2, r2, #16
 580 0396 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 581              		.loc 2 967 0
 582 0398 C623     		mov	r3, #198
 583 039a 5B00     		lsl	r3, r3, #1
 584 039c FB18     		add	r3, r7, r3
 585 039e 1B68     		ldr	r3, [r3]
 586 03a0 1B14     		asr	r3, r3, #16
 587 03a2 C421     		mov	r1, #196
 588 03a4 4900     		lsl	r1, r1, #1
 589 03a6 7918     		add	r1, r7, r1
 590 03a8 0968     		ldr	r1, [r1]
 591 03aa 0904     		lsl	r1, r1, #16
 592 03ac 0914     		asr	r1, r1, #16
 593 03ae 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 594              		.loc 2 966 0
 595 03b0 D218     		add	r2, r2, r3
 968:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 596              		.loc 2 968 0
 597 03b2 C223     		mov	r3, #194
 598 03b4 5B00     		lsl	r3, r3, #1
 599 03b6 FB18     		add	r3, r7, r3
 600 03b8 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 601              		.loc 2 967 0
 602 03ba D318     		add	r3, r2, r3
 603              	.LBE69:
 604              	.LBE68:
 605              		.loc 1 221 0
 606 03bc F622     		mov	r2, #246
 607 03be 5200     		lsl	r2, r2, #1
 608 03c0 BA18     		add	r2, r7, r2
 609 03c2 1360     		str	r3, [r2]
 222:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* x[2], x[3] are multiplied with y[srcBLen - 3], y[srcBLen - 4] respectively */
 223:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum = __SMLADX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 610              		.loc 1 223 0
 611 03c4 1423     		mov	r3, #20
 612 03c6 FB18     		add	r3, r7, r3
 613 03c8 1A68     		ldr	r2, [r3]
 614 03ca 111D     		add	r1, r2, #4
 615 03cc 1960     		str	r1, [r3]
 616 03ce 1368     		ldr	r3, [r2]
 617 03d0 181C     		mov	r0, r3
 618 03d2 1023     		mov	r3, #16
 619 03d4 FB18     		add	r3, r7, r3
 620 03d6 1A68     		ldr	r2, [r3]
 621 03d8 111F     		sub	r1, r2, #4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 33


 622 03da 1960     		str	r1, [r3]
 623 03dc 1368     		ldr	r3, [r2]
 624 03de 1A1C     		mov	r2, r3
 625 03e0 F623     		mov	r3, #246
 626 03e2 5B00     		lsl	r3, r3, #1
 627 03e4 FB18     		add	r3, r7, r3
 628 03e6 1B68     		ldr	r3, [r3]
 629 03e8 C021     		mov	r1, #192
 630 03ea 4900     		lsl	r1, r1, #1
 631 03ec 7918     		add	r1, r7, r1
 632 03ee 0860     		str	r0, [r1]
 633 03f0 BE21     		mov	r1, #190
 634 03f2 4900     		lsl	r1, r1, #1
 635 03f4 7918     		add	r1, r7, r1
 636 03f6 0A60     		str	r2, [r1]
 637 03f8 BC22     		mov	r2, #188
 638 03fa 5200     		lsl	r2, r2, #1
 639 03fc BA18     		add	r2, r7, r2
 640 03fe 1360     		str	r3, [r2]
 641              	.LBB70:
 642              	.LBB71:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 643              		.loc 2 966 0
 644 0400 C023     		mov	r3, #192
 645 0402 5B00     		lsl	r3, r3, #1
 646 0404 FB18     		add	r3, r7, r3
 647 0406 1B68     		ldr	r3, [r3]
 648 0408 1B04     		lsl	r3, r3, #16
 649 040a 1B14     		asr	r3, r3, #16
 650 040c BE22     		mov	r2, #190
 651 040e 5200     		lsl	r2, r2, #1
 652 0410 BA18     		add	r2, r7, r2
 653 0412 1268     		ldr	r2, [r2]
 654 0414 1214     		asr	r2, r2, #16
 655 0416 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 656              		.loc 2 967 0
 657 0418 C023     		mov	r3, #192
 658 041a 5B00     		lsl	r3, r3, #1
 659 041c FB18     		add	r3, r7, r3
 660 041e 1B68     		ldr	r3, [r3]
 661 0420 1B14     		asr	r3, r3, #16
 662 0422 BE21     		mov	r1, #190
 663 0424 4900     		lsl	r1, r1, #1
 664 0426 7918     		add	r1, r7, r1
 665 0428 0968     		ldr	r1, [r1]
 666 042a 0904     		lsl	r1, r1, #16
 667 042c 0914     		asr	r1, r1, #16
 668 042e 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 669              		.loc 2 966 0
 670 0430 D218     		add	r2, r2, r3
 671              		.loc 2 968 0
 672 0432 BC23     		mov	r3, #188
 673 0434 5B00     		lsl	r3, r3, #1
 674 0436 FB18     		add	r3, r7, r3
 675 0438 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 34


 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 676              		.loc 2 967 0
 677 043a D318     		add	r3, r2, r3
 678              	.LBE71:
 679              	.LBE70:
 680              		.loc 1 223 0
 681 043c F622     		mov	r2, #246
 682 043e 5200     		lsl	r2, r2, #1
 683 0440 BA18     		add	r2, r7, r2
 684 0442 1360     		str	r3, [r2]
 224:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 225:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
 226:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k--;
 685              		.loc 1 226 0
 686 0444 E223     		mov	r3, #226
 687 0446 5B00     		lsl	r3, r3, #1
 688 0448 FB18     		add	r3, r7, r3
 689 044a 1B68     		ldr	r3, [r3]
 690 044c 013B     		sub	r3, r3, #1
 691 044e E222     		mov	r2, #226
 692 0450 5200     		lsl	r2, r2, #1
 693 0452 BA18     		add	r2, r7, r2
 694 0454 1360     		str	r3, [r2]
 695              	.L22:
 217:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 696              		.loc 1 217 0
 697 0456 E223     		mov	r3, #226
 698 0458 5B00     		lsl	r3, r3, #1
 699 045a FB18     		add	r3, r7, r3
 700 045c 1B68     		ldr	r3, [r3]
 701 045e 002B     		cmp	r3, #0
 702 0460 00D0     		beq	.LCB626
 703 0462 6FE7     		b	.L25	@long jump
 704              	.LCB626:
 227:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
 228:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 229:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* For the next MAC operations, the pointer py is used without SIMD
 230:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        * So, py is incremented by 1 */
 231:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       py = py + 1u;
 705              		.loc 1 231 0
 706 0464 3B69     		ldr	r3, [r7, #16]
 707 0466 0233     		add	r3, r3, #2
 708 0468 3B61     		str	r3, [r7, #16]
 232:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 233:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* If the count is not a multiple of 4, compute any remaining MACs here.
 234:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        ** No loop unrolling is used. */
 235:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = count % 0x4u;
 709              		.loc 1 235 0
 710 046a E023     		mov	r3, #224
 711 046c 5B00     		lsl	r3, r3, #1
 712 046e FB18     		add	r3, r7, r3
 713 0470 1B68     		ldr	r3, [r3]
 714 0472 0322     		mov	r2, #3
 715 0474 1340     		and	r3, r2
 716 0476 E222     		mov	r2, #226
 717 0478 5200     		lsl	r2, r2, #1
 718 047a BA18     		add	r2, r7, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 35


 719 047c 1360     		str	r3, [r2]
 236:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 237:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (k > 0u)
 720              		.loc 1 237 0
 721 047e 44E0     		b	.L26
 722              	.L28:
 238:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 239:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Perform the multiply-accumulates */
 240:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum = __SMLAD(*px++, *py--, sum);
 723              		.loc 1 240 0
 724 0480 7B69     		ldr	r3, [r7, #20]
 725 0482 9A1C     		add	r2, r3, #2
 726 0484 7A61     		str	r2, [r7, #20]
 727 0486 1B88     		ldrh	r3, [r3]
 728 0488 19B2     		sxth	r1, r3
 729 048a 3B69     		ldr	r3, [r7, #16]
 730 048c 9A1E     		sub	r2, r3, #2
 731 048e 3A61     		str	r2, [r7, #16]
 732 0490 1B88     		ldrh	r3, [r3]
 733 0492 1AB2     		sxth	r2, r3
 734 0494 F623     		mov	r3, #246
 735 0496 5B00     		lsl	r3, r3, #1
 736 0498 FB18     		add	r3, r7, r3
 737 049a 1B68     		ldr	r3, [r3]
 738 049c BA20     		mov	r0, #186
 739 049e 4000     		lsl	r0, r0, #1
 740 04a0 3818     		add	r0, r7, r0
 741 04a2 0160     		str	r1, [r0]
 742 04a4 B821     		mov	r1, #184
 743 04a6 4900     		lsl	r1, r1, #1
 744 04a8 7918     		add	r1, r7, r1
 745 04aa 0A60     		str	r2, [r1]
 746 04ac B622     		mov	r2, #182
 747 04ae 5200     		lsl	r2, r2, #1
 748 04b0 BA18     		add	r2, r7, r2
 749 04b2 1360     		str	r3, [r2]
 750              	.LBB72:
 751              	.LBB73:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 752              		.loc 2 952 0
 753 04b4 BA23     		mov	r3, #186
 754 04b6 5B00     		lsl	r3, r3, #1
 755 04b8 FB18     		add	r3, r7, r3
 756 04ba 1B68     		ldr	r3, [r3]
 757 04bc 1B04     		lsl	r3, r3, #16
 758 04be 1B14     		asr	r3, r3, #16
 759 04c0 B822     		mov	r2, #184
 760 04c2 5200     		lsl	r2, r2, #1
 761 04c4 BA18     		add	r2, r7, r2
 762 04c6 1268     		ldr	r2, [r2]
 763 04c8 1204     		lsl	r2, r2, #16
 764 04ca 1214     		asr	r2, r2, #16
 765 04cc 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 766              		.loc 2 953 0
 767 04ce BA23     		mov	r3, #186
 768 04d0 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 36


 769 04d2 FB18     		add	r3, r7, r3
 770 04d4 1B68     		ldr	r3, [r3]
 771 04d6 1B14     		asr	r3, r3, #16
 772 04d8 B821     		mov	r1, #184
 773 04da 4900     		lsl	r1, r1, #1
 774 04dc 7918     		add	r1, r7, r1
 775 04de 0968     		ldr	r1, [r1]
 776 04e0 0914     		asr	r1, r1, #16
 777 04e2 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 778              		.loc 2 952 0
 779 04e4 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 780              		.loc 2 954 0
 781 04e6 B623     		mov	r3, #182
 782 04e8 5B00     		lsl	r3, r3, #1
 783 04ea FB18     		add	r3, r7, r3
 784 04ec 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 785              		.loc 2 953 0
 786 04ee D318     		add	r3, r2, r3
 787              	.LBE73:
 788              	.LBE72:
 789              		.loc 1 240 0
 790 04f0 F622     		mov	r2, #246
 791 04f2 5200     		lsl	r2, r2, #1
 792 04f4 BA18     		add	r2, r7, r2
 793 04f6 1360     		str	r3, [r2]
 241:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 242:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
 243:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k--;
 794              		.loc 1 243 0
 795 04f8 E223     		mov	r3, #226
 796 04fa 5B00     		lsl	r3, r3, #1
 797 04fc FB18     		add	r3, r7, r3
 798 04fe 1B68     		ldr	r3, [r3]
 799 0500 013B     		sub	r3, r3, #1
 800 0502 E222     		mov	r2, #226
 801 0504 5200     		lsl	r2, r2, #1
 802 0506 BA18     		add	r2, r7, r2
 803 0508 1360     		str	r3, [r2]
 804              	.L26:
 237:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 805              		.loc 1 237 0
 806 050a E223     		mov	r3, #226
 807 050c 5B00     		lsl	r3, r3, #1
 808 050e FB18     		add	r3, r7, r3
 809 0510 1B68     		ldr	r3, [r3]
 810 0512 002B     		cmp	r3, #0
 811 0514 B4D1     		bne	.L28
 244:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
 245:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 246:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Store the result in the accumulator in the destination buffer. */
 247:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       *pOut++ = (q15_t) (sum >> 15);
 812              		.loc 1 247 0
 813 0516 BB69     		ldr	r3, [r7, #24]
 814 0518 9A1C     		add	r2, r3, #2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 37


 815 051a BA61     		str	r2, [r7, #24]
 816 051c F622     		mov	r2, #246
 817 051e 5200     		lsl	r2, r2, #1
 818 0520 BA18     		add	r2, r7, r2
 819 0522 1268     		ldr	r2, [r2]
 820 0524 D213     		asr	r2, r2, #15
 821 0526 92B2     		uxth	r2, r2
 822 0528 1A80     		strh	r2, [r3]
 248:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 249:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 250:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       py = ++pSrc2 - 1u;
 823              		.loc 1 250 0
 824 052a EA23     		mov	r3, #234
 825 052c 5B00     		lsl	r3, r3, #1
 826 052e FB18     		add	r3, r7, r3
 827 0530 1B68     		ldr	r3, [r3]
 828 0532 0233     		add	r3, r3, #2
 829 0534 EA22     		mov	r2, #234
 830 0536 5200     		lsl	r2, r2, #1
 831 0538 BA18     		add	r2, r7, r2
 832 053a 1360     		str	r3, [r2]
 833 053c EA23     		mov	r3, #234
 834 053e 5B00     		lsl	r3, r3, #1
 835 0540 FB18     		add	r3, r7, r3
 836 0542 1B68     		ldr	r3, [r3]
 837 0544 023B     		sub	r3, r3, #2
 838 0546 3B61     		str	r3, [r7, #16]
 251:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       px = pIn1;
 839              		.loc 1 251 0
 840 0548 FA23     		mov	r3, #250
 841 054a 5B00     		lsl	r3, r3, #1
 842 054c FB18     		add	r3, r7, r3
 843 054e 1B68     		ldr	r3, [r3]
 844 0550 7B61     		str	r3, [r7, #20]
 252:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 253:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Increment the MAC count */
 254:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       count++;
 845              		.loc 1 254 0
 846 0552 E023     		mov	r3, #224
 847 0554 5B00     		lsl	r3, r3, #1
 848 0556 FB18     		add	r3, r7, r3
 849 0558 1B68     		ldr	r3, [r3]
 850 055a 0133     		add	r3, r3, #1
 851 055c E022     		mov	r2, #224
 852 055e 5200     		lsl	r2, r2, #1
 853 0560 BA18     		add	r2, r7, r2
 854 0562 1360     		str	r3, [r2]
 255:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 256:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the loop counter */
 257:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blockSize1--;
 855              		.loc 1 257 0
 856 0564 DC23     		mov	r3, #220
 857 0566 5B00     		lsl	r3, r3, #1
 858 0568 FB18     		add	r3, r7, r3
 859 056a 1B68     		ldr	r3, [r3]
 860 056c 013B     		sub	r3, r3, #1
 861 056e DC22     		mov	r2, #220
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 38


 862 0570 5200     		lsl	r2, r2, #1
 863 0572 BA18     		add	r2, r7, r2
 864 0574 1360     		str	r3, [r2]
 865              	.L21:
 207:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 866              		.loc 1 207 0
 867 0576 DC23     		mov	r3, #220
 868 0578 5B00     		lsl	r3, r3, #1
 869 057a FB18     		add	r3, r7, r3
 870 057c 1B68     		ldr	r3, [r3]
 871 057e 002B     		cmp	r3, #0
 872 0580 00DD     		ble	.LCB780
 873 0582 D0E6     		b	.L29	@long jump
 874              	.LCB780:
 258:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 259:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 260:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* --------------------------
 261:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * Initializations of stage2
 262:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * ------------------------*/
 263:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 264:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]
 265:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]
 266:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * ....
 267:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y
 268:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      */
 269:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 270:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Working pointer of inputA */
 271:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     if ((int32_t)firstIndex - (int32_t)srcBLen + 1 > 0)
 875              		.loc 1 271 0
 876 0584 8123     		mov	r3, #129
 877 0586 9B00     		lsl	r3, r3, #2
 878 0588 FB18     		add	r3, r7, r3
 879 058a 1A68     		ldr	r2, [r3]
 880 058c 3B68     		ldr	r3, [r7]
 881 058e D31A     		sub	r3, r2, r3
 882 0590 0133     		add	r3, r3, #1
 883 0592 002B     		cmp	r3, #0
 884 0594 0EDD     		ble	.L30
 272:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 273:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       px = pIn1 + firstIndex - srcBLen + 1;
 885              		.loc 1 273 0
 886 0596 8123     		mov	r3, #129
 887 0598 9B00     		lsl	r3, r3, #2
 888 059a FB18     		add	r3, r7, r3
 889 059c 1A68     		ldr	r2, [r3]
 890 059e 3B68     		ldr	r3, [r7]
 891 05a0 D31A     		sub	r3, r2, r3
 892 05a2 0133     		add	r3, r3, #1
 893 05a4 5B00     		lsl	r3, r3, #1
 894 05a6 FA22     		mov	r2, #250
 895 05a8 5200     		lsl	r2, r2, #1
 896 05aa BA18     		add	r2, r7, r2
 897 05ac 1268     		ldr	r2, [r2]
 898 05ae D318     		add	r3, r2, r3
 899 05b0 7B61     		str	r3, [r7, #20]
 900 05b2 04E0     		b	.L31
 901              	.L30:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 39


 274:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 275:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     else
 276:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 277:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       px = pIn1;
 902              		.loc 1 277 0
 903 05b4 FA23     		mov	r3, #250
 904 05b6 5B00     		lsl	r3, r3, #1
 905 05b8 FB18     		add	r3, r7, r3
 906 05ba 1B68     		ldr	r3, [r3]
 907 05bc 7B61     		str	r3, [r7, #20]
 908              	.L31:
 278:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 279:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 280:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Working pointer of inputB */
 281:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     pSrc2 = pIn2 + (srcBLen - 1u);
 909              		.loc 1 281 0
 910 05be 3B68     		ldr	r3, [r7]
 911 05c0 134A     		ldr	r2, .L90
 912 05c2 9446     		mov	ip, r2
 913 05c4 6344     		add	r3, r3, ip
 914 05c6 5B00     		lsl	r3, r3, #1
 915 05c8 F822     		mov	r2, #248
 916 05ca 5200     		lsl	r2, r2, #1
 917 05cc BA18     		add	r2, r7, r2
 918 05ce 1268     		ldr	r2, [r2]
 919 05d0 D318     		add	r3, r2, r3
 920 05d2 EA22     		mov	r2, #234
 921 05d4 5200     		lsl	r2, r2, #1
 922 05d6 BA18     		add	r2, r7, r2
 923 05d8 1360     		str	r3, [r2]
 282:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     py = pSrc2;
 924              		.loc 1 282 0
 925 05da EA23     		mov	r3, #234
 926 05dc 5B00     		lsl	r3, r3, #1
 927 05de FB18     		add	r3, r7, r3
 928 05e0 1B68     		ldr	r3, [r3]
 929 05e2 3B61     		str	r3, [r7, #16]
 283:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 284:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* count is the index by which the pointer pIn1 to be incremented */
 285:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     count = 0u;
 930              		.loc 1 285 0
 931 05e4 0023     		mov	r3, #0
 932 05e6 E022     		mov	r2, #224
 933 05e8 5200     		lsl	r2, r2, #1
 934 05ea BA18     		add	r2, r7, r2
 935 05ec 1360     		str	r3, [r2]
 286:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 287:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 288:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* --------------------
 289:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * Stage2 process
 290:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * -------------------*/
 291:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 292:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
 293:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * So, to loop unroll over blockSize2,
 294:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * srcBLen should be greater than or equal to 4 */
 295:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     if (srcBLen >= 4u)
 936              		.loc 1 295 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 40


 937 05ee 3B68     		ldr	r3, [r7]
 938 05f0 032B     		cmp	r3, #3
 939 05f2 01D8     		bhi	.LCB841
 940 05f4 00F0D7FE 		bl	.L32	@far jump
 941              	.LCB841:
 296:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 297:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Loop unroll over blockSize2, by 4 */
 298:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blkCnt = ((uint32_t) blockSize2 >> 2u);
 942              		.loc 1 298 0
 943 05f8 D423     		mov	r3, #212
 944 05fa 5B00     		lsl	r3, r3, #1
 945 05fc FB18     		add	r3, r7, r3
 946 05fe 1B68     		ldr	r3, [r3]
 947 0600 9B08     		lsr	r3, r3, #2
 948 0602 DE22     		mov	r2, #222
 949 0604 5200     		lsl	r2, r2, #1
 950 0606 BA18     		add	r2, r7, r2
 951 0608 1360     		str	r3, [r2]
 299:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 300:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (blkCnt > 0u)
 952              		.loc 1 300 0
 953 060a 00F0EFFD 		bl	.L33	@ far jump
 954              	.L91:
 955 060e C046     		.align	2
 956              	.L90:
 957 0610 FFFFFF7F 		.word	2147483647
 958              	.L62:
 301:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 302:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       py = py - 1u;
 959              		.loc 1 302 0
 960 0614 3B69     		ldr	r3, [r7, #16]
 961 0616 023B     		sub	r3, r3, #2
 962 0618 3B61     		str	r3, [r7, #16]
 303:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 304:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Set all accumulators to zero */
 305:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc0 = 0;
 963              		.loc 1 305 0
 964 061a 0023     		mov	r3, #0
 965 061c F422     		mov	r2, #244
 966 061e 5200     		lsl	r2, r2, #1
 967 0620 BA18     		add	r2, r7, r2
 968 0622 1360     		str	r3, [r2]
 306:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc1 = 0;
 969              		.loc 1 306 0
 970 0624 0023     		mov	r3, #0
 971 0626 F222     		mov	r2, #242
 972 0628 5200     		lsl	r2, r2, #1
 973 062a BA18     		add	r2, r7, r2
 974 062c 1360     		str	r3, [r2]
 307:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc2 = 0;
 975              		.loc 1 307 0
 976 062e 0023     		mov	r3, #0
 977 0630 F022     		mov	r2, #240
 978 0632 5200     		lsl	r2, r2, #1
 979 0634 BA18     		add	r2, r7, r2
 980 0636 1360     		str	r3, [r2]
 308:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc3 = 0;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 41


 981              		.loc 1 308 0
 982 0638 0023     		mov	r3, #0
 983 063a EE22     		mov	r2, #238
 984 063c 5200     		lsl	r2, r2, #1
 985 063e BA18     		add	r2, r7, r2
 986 0640 1360     		str	r3, [r2]
 309:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 310:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 311:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* read x[0], x[1] samples */
 312:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       x0 = *__SIMD32(px);
 987              		.loc 1 312 0
 988 0642 1423     		mov	r3, #20
 989 0644 FB18     		add	r3, r7, r3
 990 0646 1B68     		ldr	r3, [r3]
 991 0648 1B68     		ldr	r3, [r3]
 992 064a E822     		mov	r2, #232
 993 064c 5200     		lsl	r2, r2, #1
 994 064e BA18     		add	r2, r7, r2
 995 0650 1360     		str	r3, [r2]
 313:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* read x[1], x[2] samples */
 314:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       x1 = _SIMD32_OFFSET(px+1);
 996              		.loc 1 314 0
 997 0652 7B69     		ldr	r3, [r7, #20]
 998 0654 0233     		add	r3, r3, #2
 999 0656 1B68     		ldr	r3, [r3]
 1000 0658 E622     		mov	r2, #230
 1001 065a 5200     		lsl	r2, r2, #1
 1002 065c BA18     		add	r2, r7, r2
 1003 065e 1360     		str	r3, [r2]
 315:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  px+= 2u;
 1004              		.loc 1 315 0
 1005 0660 7B69     		ldr	r3, [r7, #20]
 1006 0662 0433     		add	r3, r3, #4
 1007 0664 7B61     		str	r3, [r7, #20]
 316:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 317:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 318:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 319:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k = srcBLen >> 2u;
 1008              		.loc 1 319 0
 1009 0666 3B68     		ldr	r3, [r7]
 1010 0668 9B08     		lsr	r3, r3, #2
 1011 066a E222     		mov	r2, #226
 1012 066c 5200     		lsl	r2, r2, #1
 1013 066e BA18     		add	r2, r7, r2
 1014 0670 1360     		str	r3, [r2]
 1015              	.L42:
 320:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 321:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 322:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****          ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 323:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         do
 324:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         {
 325:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read the last two inputB samples using SIMD:
 326:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****            * y[srcBLen - 1] and y[srcBLen - 2] */
 327:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = *__SIMD32(py)--;
 1016              		.loc 1 327 0 discriminator 1
 1017 0672 1023     		mov	r3, #16
 1018 0674 FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 42


 1019 0676 1A68     		ldr	r2, [r3]
 1020 0678 111F     		sub	r1, r2, #4
 1021 067a 1960     		str	r1, [r3]
 1022 067c 1368     		ldr	r3, [r2]
 1023 067e D222     		mov	r2, #210
 1024 0680 5200     		lsl	r2, r2, #1
 1025 0682 BA18     		add	r2, r7, r2
 1026 0684 1360     		str	r3, [r2]
 328:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 329:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* acc0 +=  x[0] * y[srcBLen - 1] + x[1] * y[srcBLen - 2] */
 330:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc0 = __SMLADX(x0, c0, acc0);
 1027              		.loc 1 330 0 discriminator 1
 1028 0686 E823     		mov	r3, #232
 1029 0688 5B00     		lsl	r3, r3, #1
 1030 068a FB18     		add	r3, r7, r3
 1031 068c 1968     		ldr	r1, [r3]
 1032 068e D223     		mov	r3, #210
 1033 0690 5B00     		lsl	r3, r3, #1
 1034 0692 FB18     		add	r3, r7, r3
 1035 0694 1A68     		ldr	r2, [r3]
 1036 0696 F423     		mov	r3, #244
 1037 0698 5B00     		lsl	r3, r3, #1
 1038 069a FB18     		add	r3, r7, r3
 1039 069c 1B68     		ldr	r3, [r3]
 1040 069e B420     		mov	r0, #180
 1041 06a0 4000     		lsl	r0, r0, #1
 1042 06a2 3818     		add	r0, r7, r0
 1043 06a4 0160     		str	r1, [r0]
 1044 06a6 B221     		mov	r1, #178
 1045 06a8 4900     		lsl	r1, r1, #1
 1046 06aa 7918     		add	r1, r7, r1
 1047 06ac 0A60     		str	r2, [r1]
 1048 06ae B022     		mov	r2, #176
 1049 06b0 5200     		lsl	r2, r2, #1
 1050 06b2 BA18     		add	r2, r7, r2
 1051 06b4 1360     		str	r3, [r2]
 1052              	.LBB74:
 1053              	.LBB75:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1054              		.loc 2 966 0 discriminator 1
 1055 06b6 B423     		mov	r3, #180
 1056 06b8 5B00     		lsl	r3, r3, #1
 1057 06ba FB18     		add	r3, r7, r3
 1058 06bc 1B68     		ldr	r3, [r3]
 1059 06be 1B04     		lsl	r3, r3, #16
 1060 06c0 1B14     		asr	r3, r3, #16
 1061 06c2 B222     		mov	r2, #178
 1062 06c4 5200     		lsl	r2, r2, #1
 1063 06c6 BA18     		add	r2, r7, r2
 1064 06c8 1268     		ldr	r2, [r2]
 1065 06ca 1214     		asr	r2, r2, #16
 1066 06cc 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1067              		.loc 2 967 0 discriminator 1
 1068 06ce B423     		mov	r3, #180
 1069 06d0 5B00     		lsl	r3, r3, #1
 1070 06d2 FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 43


 1071 06d4 1B68     		ldr	r3, [r3]
 1072 06d6 1B14     		asr	r3, r3, #16
 1073 06d8 B221     		mov	r1, #178
 1074 06da 4900     		lsl	r1, r1, #1
 1075 06dc 7918     		add	r1, r7, r1
 1076 06de 0968     		ldr	r1, [r1]
 1077 06e0 0904     		lsl	r1, r1, #16
 1078 06e2 0914     		asr	r1, r1, #16
 1079 06e4 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1080              		.loc 2 966 0 discriminator 1
 1081 06e6 D218     		add	r2, r2, r3
 1082              		.loc 2 968 0 discriminator 1
 1083 06e8 B023     		mov	r3, #176
 1084 06ea 5B00     		lsl	r3, r3, #1
 1085 06ec FB18     		add	r3, r7, r3
 1086 06ee 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1087              		.loc 2 967 0 discriminator 1
 1088 06f0 D318     		add	r3, r2, r3
 1089              	.LBE75:
 1090              	.LBE74:
 1091              		.loc 1 330 0 discriminator 1
 1092 06f2 F422     		mov	r2, #244
 1093 06f4 5200     		lsl	r2, r2, #1
 1094 06f6 BA18     		add	r2, r7, r2
 1095 06f8 1360     		str	r3, [r2]
 331:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 332:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* acc1 +=  x[1] * y[srcBLen - 1] + x[2] * y[srcBLen - 2] */
 333:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc1 = __SMLADX(x1, c0, acc1);
 1096              		.loc 1 333 0 discriminator 1
 1097 06fa E623     		mov	r3, #230
 1098 06fc 5B00     		lsl	r3, r3, #1
 1099 06fe FB18     		add	r3, r7, r3
 1100 0700 1968     		ldr	r1, [r3]
 1101 0702 D223     		mov	r3, #210
 1102 0704 5B00     		lsl	r3, r3, #1
 1103 0706 FB18     		add	r3, r7, r3
 1104 0708 1A68     		ldr	r2, [r3]
 1105 070a F223     		mov	r3, #242
 1106 070c 5B00     		lsl	r3, r3, #1
 1107 070e FB18     		add	r3, r7, r3
 1108 0710 1B68     		ldr	r3, [r3]
 1109 0712 AE20     		mov	r0, #174
 1110 0714 4000     		lsl	r0, r0, #1
 1111 0716 3818     		add	r0, r7, r0
 1112 0718 0160     		str	r1, [r0]
 1113 071a AC21     		mov	r1, #172
 1114 071c 4900     		lsl	r1, r1, #1
 1115 071e 7918     		add	r1, r7, r1
 1116 0720 0A60     		str	r2, [r1]
 1117 0722 AA22     		mov	r2, #170
 1118 0724 5200     		lsl	r2, r2, #1
 1119 0726 BA18     		add	r2, r7, r2
 1120 0728 1360     		str	r3, [r2]
 1121              	.LBB76:
 1122              	.LBB77:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 44


 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1123              		.loc 2 966 0 discriminator 1
 1124 072a AE23     		mov	r3, #174
 1125 072c 5B00     		lsl	r3, r3, #1
 1126 072e FB18     		add	r3, r7, r3
 1127 0730 1B68     		ldr	r3, [r3]
 1128 0732 1B04     		lsl	r3, r3, #16
 1129 0734 1B14     		asr	r3, r3, #16
 1130 0736 AC22     		mov	r2, #172
 1131 0738 5200     		lsl	r2, r2, #1
 1132 073a BA18     		add	r2, r7, r2
 1133 073c 1268     		ldr	r2, [r2]
 1134 073e 1214     		asr	r2, r2, #16
 1135 0740 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1136              		.loc 2 967 0 discriminator 1
 1137 0742 AE23     		mov	r3, #174
 1138 0744 5B00     		lsl	r3, r3, #1
 1139 0746 FB18     		add	r3, r7, r3
 1140 0748 1B68     		ldr	r3, [r3]
 1141 074a 1B14     		asr	r3, r3, #16
 1142 074c AC21     		mov	r1, #172
 1143 074e 4900     		lsl	r1, r1, #1
 1144 0750 7918     		add	r1, r7, r1
 1145 0752 0968     		ldr	r1, [r1]
 1146 0754 0904     		lsl	r1, r1, #16
 1147 0756 0914     		asr	r1, r1, #16
 1148 0758 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1149              		.loc 2 966 0 discriminator 1
 1150 075a D218     		add	r2, r2, r3
 1151              		.loc 2 968 0 discriminator 1
 1152 075c AA23     		mov	r3, #170
 1153 075e 5B00     		lsl	r3, r3, #1
 1154 0760 FB18     		add	r3, r7, r3
 1155 0762 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1156              		.loc 2 967 0 discriminator 1
 1157 0764 D318     		add	r3, r2, r3
 1158              	.LBE77:
 1159              	.LBE76:
 1160              		.loc 1 333 0 discriminator 1
 1161 0766 F222     		mov	r2, #242
 1162 0768 5200     		lsl	r2, r2, #1
 1163 076a BA18     		add	r2, r7, r2
 1164 076c 1360     		str	r3, [r2]
 334:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 335:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read x[2], x[3] */
 336:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         x2 = *__SIMD32(px);
 1165              		.loc 1 336 0 discriminator 1
 1166 076e 1423     		mov	r3, #20
 1167 0770 FB18     		add	r3, r7, r3
 1168 0772 1B68     		ldr	r3, [r3]
 1169 0774 1B68     		ldr	r3, [r3]
 1170 0776 D022     		mov	r2, #208
 1171 0778 5200     		lsl	r2, r2, #1
 1172 077a BA18     		add	r2, r7, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 45


 1173 077c 1360     		str	r3, [r2]
 337:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 338:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read x[3], x[4] */
 339:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         x3 = _SIMD32_OFFSET(px+1);
 1174              		.loc 1 339 0 discriminator 1
 1175 077e 7B69     		ldr	r3, [r7, #20]
 1176 0780 0233     		add	r3, r3, #2
 1177 0782 1B68     		ldr	r3, [r3]
 1178 0784 CE22     		mov	r2, #206
 1179 0786 5200     		lsl	r2, r2, #1
 1180 0788 BA18     		add	r2, r7, r2
 1181 078a 1360     		str	r3, [r2]
 340:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 341:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* acc2 +=  x[2] * y[srcBLen - 1] + x[3] * y[srcBLen - 2] */
 342:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc2 = __SMLADX(x2, c0, acc2);
 1182              		.loc 1 342 0 discriminator 1
 1183 078c D023     		mov	r3, #208
 1184 078e 5B00     		lsl	r3, r3, #1
 1185 0790 FB18     		add	r3, r7, r3
 1186 0792 1968     		ldr	r1, [r3]
 1187 0794 D223     		mov	r3, #210
 1188 0796 5B00     		lsl	r3, r3, #1
 1189 0798 FB18     		add	r3, r7, r3
 1190 079a 1A68     		ldr	r2, [r3]
 1191 079c F023     		mov	r3, #240
 1192 079e 5B00     		lsl	r3, r3, #1
 1193 07a0 FB18     		add	r3, r7, r3
 1194 07a2 1B68     		ldr	r3, [r3]
 1195 07a4 A820     		mov	r0, #168
 1196 07a6 4000     		lsl	r0, r0, #1
 1197 07a8 3818     		add	r0, r7, r0
 1198 07aa 0160     		str	r1, [r0]
 1199 07ac A621     		mov	r1, #166
 1200 07ae 4900     		lsl	r1, r1, #1
 1201 07b0 7918     		add	r1, r7, r1
 1202 07b2 0A60     		str	r2, [r1]
 1203 07b4 A422     		mov	r2, #164
 1204 07b6 5200     		lsl	r2, r2, #1
 1205 07b8 BA18     		add	r2, r7, r2
 1206 07ba 1360     		str	r3, [r2]
 1207              	.LBB78:
 1208              	.LBB79:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1209              		.loc 2 966 0 discriminator 1
 1210 07bc A823     		mov	r3, #168
 1211 07be 5B00     		lsl	r3, r3, #1
 1212 07c0 FB18     		add	r3, r7, r3
 1213 07c2 1B68     		ldr	r3, [r3]
 1214 07c4 1B04     		lsl	r3, r3, #16
 1215 07c6 1B14     		asr	r3, r3, #16
 1216 07c8 A622     		mov	r2, #166
 1217 07ca 5200     		lsl	r2, r2, #1
 1218 07cc BA18     		add	r2, r7, r2
 1219 07ce 1268     		ldr	r2, [r2]
 1220 07d0 1214     		asr	r2, r2, #16
 1221 07d2 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 46


 1222              		.loc 2 967 0 discriminator 1
 1223 07d4 A823     		mov	r3, #168
 1224 07d6 5B00     		lsl	r3, r3, #1
 1225 07d8 FB18     		add	r3, r7, r3
 1226 07da 1B68     		ldr	r3, [r3]
 1227 07dc 1B14     		asr	r3, r3, #16
 1228 07de A621     		mov	r1, #166
 1229 07e0 4900     		lsl	r1, r1, #1
 1230 07e2 7918     		add	r1, r7, r1
 1231 07e4 0968     		ldr	r1, [r1]
 1232 07e6 0904     		lsl	r1, r1, #16
 1233 07e8 0914     		asr	r1, r1, #16
 1234 07ea 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1235              		.loc 2 966 0 discriminator 1
 1236 07ec D218     		add	r2, r2, r3
 1237              		.loc 2 968 0 discriminator 1
 1238 07ee A423     		mov	r3, #164
 1239 07f0 5B00     		lsl	r3, r3, #1
 1240 07f2 FB18     		add	r3, r7, r3
 1241 07f4 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1242              		.loc 2 967 0 discriminator 1
 1243 07f6 D318     		add	r3, r2, r3
 1244              	.LBE79:
 1245              	.LBE78:
 1246              		.loc 1 342 0 discriminator 1
 1247 07f8 F022     		mov	r2, #240
 1248 07fa 5200     		lsl	r2, r2, #1
 1249 07fc BA18     		add	r2, r7, r2
 1250 07fe 1360     		str	r3, [r2]
 343:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 344:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* acc3 +=  x[3] * y[srcBLen - 1] + x[4] * y[srcBLen - 2] */
 345:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc3 = __SMLADX(x3, c0, acc3);
 1251              		.loc 1 345 0 discriminator 1
 1252 0800 CE23     		mov	r3, #206
 1253 0802 5B00     		lsl	r3, r3, #1
 1254 0804 FB18     		add	r3, r7, r3
 1255 0806 1968     		ldr	r1, [r3]
 1256 0808 D223     		mov	r3, #210
 1257 080a 5B00     		lsl	r3, r3, #1
 1258 080c FB18     		add	r3, r7, r3
 1259 080e 1A68     		ldr	r2, [r3]
 1260 0810 EE23     		mov	r3, #238
 1261 0812 5B00     		lsl	r3, r3, #1
 1262 0814 FB18     		add	r3, r7, r3
 1263 0816 1B68     		ldr	r3, [r3]
 1264 0818 A220     		mov	r0, #162
 1265 081a 4000     		lsl	r0, r0, #1
 1266 081c 3818     		add	r0, r7, r0
 1267 081e 0160     		str	r1, [r0]
 1268 0820 A021     		mov	r1, #160
 1269 0822 4900     		lsl	r1, r1, #1
 1270 0824 7918     		add	r1, r7, r1
 1271 0826 0A60     		str	r2, [r1]
 1272 0828 9E22     		mov	r2, #158
 1273 082a 5200     		lsl	r2, r2, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 47


 1274 082c BA18     		add	r2, r7, r2
 1275 082e 1360     		str	r3, [r2]
 1276              	.LBB80:
 1277              	.LBB81:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1278              		.loc 2 966 0 discriminator 1
 1279 0830 A223     		mov	r3, #162
 1280 0832 5B00     		lsl	r3, r3, #1
 1281 0834 FB18     		add	r3, r7, r3
 1282 0836 1B68     		ldr	r3, [r3]
 1283 0838 1B04     		lsl	r3, r3, #16
 1284 083a 1B14     		asr	r3, r3, #16
 1285 083c A022     		mov	r2, #160
 1286 083e 5200     		lsl	r2, r2, #1
 1287 0840 BA18     		add	r2, r7, r2
 1288 0842 1268     		ldr	r2, [r2]
 1289 0844 1214     		asr	r2, r2, #16
 1290 0846 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1291              		.loc 2 967 0 discriminator 1
 1292 0848 A223     		mov	r3, #162
 1293 084a 5B00     		lsl	r3, r3, #1
 1294 084c FB18     		add	r3, r7, r3
 1295 084e 1B68     		ldr	r3, [r3]
 1296 0850 1B14     		asr	r3, r3, #16
 1297 0852 A021     		mov	r1, #160
 1298 0854 4900     		lsl	r1, r1, #1
 1299 0856 7918     		add	r1, r7, r1
 1300 0858 0968     		ldr	r1, [r1]
 1301 085a 0904     		lsl	r1, r1, #16
 1302 085c 0914     		asr	r1, r1, #16
 1303 085e 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1304              		.loc 2 966 0 discriminator 1
 1305 0860 D218     		add	r2, r2, r3
 1306              		.loc 2 968 0 discriminator 1
 1307 0862 9E23     		mov	r3, #158
 1308 0864 5B00     		lsl	r3, r3, #1
 1309 0866 FB18     		add	r3, r7, r3
 1310 0868 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1311              		.loc 2 967 0 discriminator 1
 1312 086a D318     		add	r3, r2, r3
 1313              	.LBE81:
 1314              	.LBE80:
 1315              		.loc 1 345 0 discriminator 1
 1316 086c EE22     		mov	r2, #238
 1317 086e 5200     		lsl	r2, r2, #1
 1318 0870 BA18     		add	r2, r7, r2
 1319 0872 1360     		str	r3, [r2]
 346:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 347:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read y[srcBLen - 3] and y[srcBLen - 4] */
 348:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = *__SIMD32(py)--;
 1320              		.loc 1 348 0 discriminator 1
 1321 0874 1023     		mov	r3, #16
 1322 0876 FB18     		add	r3, r7, r3
 1323 0878 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 48


 1324 087a 111F     		sub	r1, r2, #4
 1325 087c 1960     		str	r1, [r3]
 1326 087e 1368     		ldr	r3, [r2]
 1327 0880 D222     		mov	r2, #210
 1328 0882 5200     		lsl	r2, r2, #1
 1329 0884 BA18     		add	r2, r7, r2
 1330 0886 1360     		str	r3, [r2]
 349:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 350:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* acc0 +=  x[2] * y[srcBLen - 3] + x[3] * y[srcBLen - 4] */
 351:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc0 = __SMLADX(x2, c0, acc0);
 1331              		.loc 1 351 0 discriminator 1
 1332 0888 D023     		mov	r3, #208
 1333 088a 5B00     		lsl	r3, r3, #1
 1334 088c FB18     		add	r3, r7, r3
 1335 088e 1968     		ldr	r1, [r3]
 1336 0890 D223     		mov	r3, #210
 1337 0892 5B00     		lsl	r3, r3, #1
 1338 0894 FB18     		add	r3, r7, r3
 1339 0896 1A68     		ldr	r2, [r3]
 1340 0898 F423     		mov	r3, #244
 1341 089a 5B00     		lsl	r3, r3, #1
 1342 089c FB18     		add	r3, r7, r3
 1343 089e 1B68     		ldr	r3, [r3]
 1344 08a0 9C20     		mov	r0, #156
 1345 08a2 4000     		lsl	r0, r0, #1
 1346 08a4 3818     		add	r0, r7, r0
 1347 08a6 0160     		str	r1, [r0]
 1348 08a8 9A21     		mov	r1, #154
 1349 08aa 4900     		lsl	r1, r1, #1
 1350 08ac 7918     		add	r1, r7, r1
 1351 08ae 0A60     		str	r2, [r1]
 1352 08b0 9822     		mov	r2, #152
 1353 08b2 5200     		lsl	r2, r2, #1
 1354 08b4 BA18     		add	r2, r7, r2
 1355 08b6 1360     		str	r3, [r2]
 1356              	.LBB82:
 1357              	.LBB83:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1358              		.loc 2 966 0 discriminator 1
 1359 08b8 9C23     		mov	r3, #156
 1360 08ba 5B00     		lsl	r3, r3, #1
 1361 08bc FB18     		add	r3, r7, r3
 1362 08be 1B68     		ldr	r3, [r3]
 1363 08c0 1B04     		lsl	r3, r3, #16
 1364 08c2 1B14     		asr	r3, r3, #16
 1365 08c4 9A22     		mov	r2, #154
 1366 08c6 5200     		lsl	r2, r2, #1
 1367 08c8 BA18     		add	r2, r7, r2
 1368 08ca 1268     		ldr	r2, [r2]
 1369 08cc 1214     		asr	r2, r2, #16
 1370 08ce 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1371              		.loc 2 967 0 discriminator 1
 1372 08d0 9C23     		mov	r3, #156
 1373 08d2 5B00     		lsl	r3, r3, #1
 1374 08d4 FB18     		add	r3, r7, r3
 1375 08d6 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 49


 1376 08d8 1B14     		asr	r3, r3, #16
 1377 08da 9A21     		mov	r1, #154
 1378 08dc 4900     		lsl	r1, r1, #1
 1379 08de 7918     		add	r1, r7, r1
 1380 08e0 0968     		ldr	r1, [r1]
 1381 08e2 0904     		lsl	r1, r1, #16
 1382 08e4 0914     		asr	r1, r1, #16
 1383 08e6 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1384              		.loc 2 966 0 discriminator 1
 1385 08e8 D218     		add	r2, r2, r3
 1386              		.loc 2 968 0 discriminator 1
 1387 08ea 9823     		mov	r3, #152
 1388 08ec 5B00     		lsl	r3, r3, #1
 1389 08ee FB18     		add	r3, r7, r3
 1390 08f0 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1391              		.loc 2 967 0 discriminator 1
 1392 08f2 D318     		add	r3, r2, r3
 1393              	.LBE83:
 1394              	.LBE82:
 1395              		.loc 1 351 0 discriminator 1
 1396 08f4 F422     		mov	r2, #244
 1397 08f6 5200     		lsl	r2, r2, #1
 1398 08f8 BA18     		add	r2, r7, r2
 1399 08fa 1360     		str	r3, [r2]
 352:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 353:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* acc1 +=  x[3] * y[srcBLen - 3] + x[4] * y[srcBLen - 4] */
 354:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc1 = __SMLADX(x3, c0, acc1);
 1400              		.loc 1 354 0 discriminator 1
 1401 08fc CE23     		mov	r3, #206
 1402 08fe 5B00     		lsl	r3, r3, #1
 1403 0900 FB18     		add	r3, r7, r3
 1404 0902 1968     		ldr	r1, [r3]
 1405 0904 D223     		mov	r3, #210
 1406 0906 5B00     		lsl	r3, r3, #1
 1407 0908 FB18     		add	r3, r7, r3
 1408 090a 1A68     		ldr	r2, [r3]
 1409 090c F223     		mov	r3, #242
 1410 090e 5B00     		lsl	r3, r3, #1
 1411 0910 FB18     		add	r3, r7, r3
 1412 0912 1B68     		ldr	r3, [r3]
 1413 0914 9620     		mov	r0, #150
 1414 0916 4000     		lsl	r0, r0, #1
 1415 0918 3818     		add	r0, r7, r0
 1416 091a 0160     		str	r1, [r0]
 1417 091c 9421     		mov	r1, #148
 1418 091e 4900     		lsl	r1, r1, #1
 1419 0920 7918     		add	r1, r7, r1
 1420 0922 0A60     		str	r2, [r1]
 1421 0924 9222     		mov	r2, #146
 1422 0926 5200     		lsl	r2, r2, #1
 1423 0928 BA18     		add	r2, r7, r2
 1424 092a 1360     		str	r3, [r2]
 1425              	.LBB84:
 1426              	.LBB85:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 50


 1427              		.loc 2 966 0 discriminator 1
 1428 092c 9623     		mov	r3, #150
 1429 092e 5B00     		lsl	r3, r3, #1
 1430 0930 FB18     		add	r3, r7, r3
 1431 0932 1B68     		ldr	r3, [r3]
 1432 0934 1B04     		lsl	r3, r3, #16
 1433 0936 1B14     		asr	r3, r3, #16
 1434 0938 9422     		mov	r2, #148
 1435 093a 5200     		lsl	r2, r2, #1
 1436 093c BA18     		add	r2, r7, r2
 1437 093e 1268     		ldr	r2, [r2]
 1438 0940 1214     		asr	r2, r2, #16
 1439 0942 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1440              		.loc 2 967 0 discriminator 1
 1441 0944 9623     		mov	r3, #150
 1442 0946 5B00     		lsl	r3, r3, #1
 1443 0948 FB18     		add	r3, r7, r3
 1444 094a 1B68     		ldr	r3, [r3]
 1445 094c 1B14     		asr	r3, r3, #16
 1446 094e 9421     		mov	r1, #148
 1447 0950 4900     		lsl	r1, r1, #1
 1448 0952 7918     		add	r1, r7, r1
 1449 0954 0968     		ldr	r1, [r1]
 1450 0956 0904     		lsl	r1, r1, #16
 1451 0958 0914     		asr	r1, r1, #16
 1452 095a 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1453              		.loc 2 966 0 discriminator 1
 1454 095c D218     		add	r2, r2, r3
 1455              		.loc 2 968 0 discriminator 1
 1456 095e 9223     		mov	r3, #146
 1457 0960 5B00     		lsl	r3, r3, #1
 1458 0962 FB18     		add	r3, r7, r3
 1459 0964 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1460              		.loc 2 967 0 discriminator 1
 1461 0966 D318     		add	r3, r2, r3
 1462              	.LBE85:
 1463              	.LBE84:
 1464              		.loc 1 354 0 discriminator 1
 1465 0968 F222     		mov	r2, #242
 1466 096a 5200     		lsl	r2, r2, #1
 1467 096c BA18     		add	r2, r7, r2
 1468 096e 1360     		str	r3, [r2]
 355:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 356:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read x[4], x[5] */
 357:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         x0 = _SIMD32_OFFSET(px+2);
 1469              		.loc 1 357 0 discriminator 1
 1470 0970 7B69     		ldr	r3, [r7, #20]
 1471 0972 5B68     		ldr	r3, [r3, #4]
 1472 0974 E822     		mov	r2, #232
 1473 0976 5200     		lsl	r2, r2, #1
 1474 0978 BA18     		add	r2, r7, r2
 1475 097a 1360     		str	r3, [r2]
 358:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 359:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read x[5], x[6] */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 51


 360:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         x1 = _SIMD32_OFFSET(px+3);
 1476              		.loc 1 360 0 discriminator 1
 1477 097c 7B69     		ldr	r3, [r7, #20]
 1478 097e 0633     		add	r3, r3, #6
 1479 0980 1B68     		ldr	r3, [r3]
 1480 0982 E622     		mov	r2, #230
 1481 0984 5200     		lsl	r2, r2, #1
 1482 0986 BA18     		add	r2, r7, r2
 1483 0988 1360     		str	r3, [r2]
 361:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		px += 4u;
 1484              		.loc 1 361 0 discriminator 1
 1485 098a 7B69     		ldr	r3, [r7, #20]
 1486 098c 0833     		add	r3, r3, #8
 1487 098e 7B61     		str	r3, [r7, #20]
 362:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 363:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* acc2 +=  x[4] * y[srcBLen - 3] + x[5] * y[srcBLen - 4] */
 364:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc2 = __SMLADX(x0, c0, acc2);
 1488              		.loc 1 364 0 discriminator 1
 1489 0990 E823     		mov	r3, #232
 1490 0992 5B00     		lsl	r3, r3, #1
 1491 0994 FB18     		add	r3, r7, r3
 1492 0996 1968     		ldr	r1, [r3]
 1493 0998 D223     		mov	r3, #210
 1494 099a 5B00     		lsl	r3, r3, #1
 1495 099c FB18     		add	r3, r7, r3
 1496 099e 1A68     		ldr	r2, [r3]
 1497 09a0 F023     		mov	r3, #240
 1498 09a2 5B00     		lsl	r3, r3, #1
 1499 09a4 FB18     		add	r3, r7, r3
 1500 09a6 1B68     		ldr	r3, [r3]
 1501 09a8 9020     		mov	r0, #144
 1502 09aa 4000     		lsl	r0, r0, #1
 1503 09ac 3818     		add	r0, r7, r0
 1504 09ae 0160     		str	r1, [r0]
 1505 09b0 8E21     		mov	r1, #142
 1506 09b2 4900     		lsl	r1, r1, #1
 1507 09b4 7918     		add	r1, r7, r1
 1508 09b6 0A60     		str	r2, [r1]
 1509 09b8 8C22     		mov	r2, #140
 1510 09ba 5200     		lsl	r2, r2, #1
 1511 09bc BA18     		add	r2, r7, r2
 1512 09be 1360     		str	r3, [r2]
 1513              	.LBB86:
 1514              	.LBB87:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1515              		.loc 2 966 0 discriminator 1
 1516 09c0 9023     		mov	r3, #144
 1517 09c2 5B00     		lsl	r3, r3, #1
 1518 09c4 FB18     		add	r3, r7, r3
 1519 09c6 1B68     		ldr	r3, [r3]
 1520 09c8 1B04     		lsl	r3, r3, #16
 1521 09ca 1B14     		asr	r3, r3, #16
 1522 09cc 8E22     		mov	r2, #142
 1523 09ce 5200     		lsl	r2, r2, #1
 1524 09d0 BA18     		add	r2, r7, r2
 1525 09d2 1268     		ldr	r2, [r2]
 1526 09d4 1214     		asr	r2, r2, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 52


 1527 09d6 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1528              		.loc 2 967 0 discriminator 1
 1529 09d8 9023     		mov	r3, #144
 1530 09da 5B00     		lsl	r3, r3, #1
 1531 09dc FB18     		add	r3, r7, r3
 1532 09de 1B68     		ldr	r3, [r3]
 1533 09e0 1B14     		asr	r3, r3, #16
 1534 09e2 8E21     		mov	r1, #142
 1535 09e4 4900     		lsl	r1, r1, #1
 1536 09e6 7918     		add	r1, r7, r1
 1537 09e8 0968     		ldr	r1, [r1]
 1538 09ea 0904     		lsl	r1, r1, #16
 1539 09ec 0914     		asr	r1, r1, #16
 1540 09ee 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1541              		.loc 2 966 0 discriminator 1
 1542 09f0 D218     		add	r2, r2, r3
 1543              		.loc 2 968 0 discriminator 1
 1544 09f2 8C23     		mov	r3, #140
 1545 09f4 5B00     		lsl	r3, r3, #1
 1546 09f6 FB18     		add	r3, r7, r3
 1547 09f8 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1548              		.loc 2 967 0 discriminator 1
 1549 09fa D318     		add	r3, r2, r3
 1550              	.LBE87:
 1551              	.LBE86:
 1552              		.loc 1 364 0 discriminator 1
 1553 09fc F022     		mov	r2, #240
 1554 09fe 5200     		lsl	r2, r2, #1
 1555 0a00 BA18     		add	r2, r7, r2
 1556 0a02 1360     		str	r3, [r2]
 365:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 366:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* acc3 +=  x[5] * y[srcBLen - 3] + x[6] * y[srcBLen - 4] */
 367:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc3 = __SMLADX(x1, c0, acc3);
 1557              		.loc 1 367 0 discriminator 1
 1558 0a04 E623     		mov	r3, #230
 1559 0a06 5B00     		lsl	r3, r3, #1
 1560 0a08 FB18     		add	r3, r7, r3
 1561 0a0a 1968     		ldr	r1, [r3]
 1562 0a0c D223     		mov	r3, #210
 1563 0a0e 5B00     		lsl	r3, r3, #1
 1564 0a10 FB18     		add	r3, r7, r3
 1565 0a12 1A68     		ldr	r2, [r3]
 1566 0a14 EE23     		mov	r3, #238
 1567 0a16 5B00     		lsl	r3, r3, #1
 1568 0a18 FB18     		add	r3, r7, r3
 1569 0a1a 1B68     		ldr	r3, [r3]
 1570 0a1c 8A20     		mov	r0, #138
 1571 0a1e 4000     		lsl	r0, r0, #1
 1572 0a20 3818     		add	r0, r7, r0
 1573 0a22 0160     		str	r1, [r0]
 1574 0a24 8821     		mov	r1, #136
 1575 0a26 4900     		lsl	r1, r1, #1
 1576 0a28 7918     		add	r1, r7, r1
 1577 0a2a 0A60     		str	r2, [r1]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 53


 1578 0a2c 8622     		mov	r2, #134
 1579 0a2e 5200     		lsl	r2, r2, #1
 1580 0a30 BA18     		add	r2, r7, r2
 1581 0a32 1360     		str	r3, [r2]
 1582              	.LBB88:
 1583              	.LBB89:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1584              		.loc 2 966 0 discriminator 1
 1585 0a34 8A23     		mov	r3, #138
 1586 0a36 5B00     		lsl	r3, r3, #1
 1587 0a38 FB18     		add	r3, r7, r3
 1588 0a3a 1B68     		ldr	r3, [r3]
 1589 0a3c 1B04     		lsl	r3, r3, #16
 1590 0a3e 1B14     		asr	r3, r3, #16
 1591 0a40 8822     		mov	r2, #136
 1592 0a42 5200     		lsl	r2, r2, #1
 1593 0a44 BA18     		add	r2, r7, r2
 1594 0a46 1268     		ldr	r2, [r2]
 1595 0a48 1214     		asr	r2, r2, #16
 1596 0a4a 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1597              		.loc 2 967 0 discriminator 1
 1598 0a4c 8A23     		mov	r3, #138
 1599 0a4e 5B00     		lsl	r3, r3, #1
 1600 0a50 FB18     		add	r3, r7, r3
 1601 0a52 1B68     		ldr	r3, [r3]
 1602 0a54 1B14     		asr	r3, r3, #16
 1603 0a56 8821     		mov	r1, #136
 1604 0a58 4900     		lsl	r1, r1, #1
 1605 0a5a 7918     		add	r1, r7, r1
 1606 0a5c 0968     		ldr	r1, [r1]
 1607 0a5e 0904     		lsl	r1, r1, #16
 1608 0a60 0914     		asr	r1, r1, #16
 1609 0a62 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1610              		.loc 2 966 0 discriminator 1
 1611 0a64 D218     		add	r2, r2, r3
 1612              		.loc 2 968 0 discriminator 1
 1613 0a66 8623     		mov	r3, #134
 1614 0a68 5B00     		lsl	r3, r3, #1
 1615 0a6a FB18     		add	r3, r7, r3
 1616 0a6c 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1617              		.loc 2 967 0 discriminator 1
 1618 0a6e D318     		add	r3, r2, r3
 1619              	.LBE89:
 1620              	.LBE88:
 1621              		.loc 1 367 0 discriminator 1
 1622 0a70 EE22     		mov	r2, #238
 1623 0a72 5200     		lsl	r2, r2, #1
 1624 0a74 BA18     		add	r2, r7, r2
 1625 0a76 1360     		str	r3, [r2]
 368:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 369:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         } while (--k);
 1626              		.loc 1 369 0 discriminator 1
 1627 0a78 E223     		mov	r3, #226
 1628 0a7a 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 54


 1629 0a7c FB18     		add	r3, r7, r3
 1630 0a7e 1B68     		ldr	r3, [r3]
 1631 0a80 013B     		sub	r3, r3, #1
 1632 0a82 E222     		mov	r2, #226
 1633 0a84 5200     		lsl	r2, r2, #1
 1634 0a86 BA18     		add	r2, r7, r2
 1635 0a88 1360     		str	r3, [r2]
 1636 0a8a E223     		mov	r3, #226
 1637 0a8c 5B00     		lsl	r3, r3, #1
 1638 0a8e FB18     		add	r3, r7, r3
 1639 0a90 1B68     		ldr	r3, [r3]
 1640 0a92 002B     		cmp	r3, #0
 1641 0a94 00D0     		beq	.LCB1471
 1642 0a96 ECE5     		b	.L42	@long jump
 1643              	.LCB1471:
 370:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 371:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* For the next MAC operations, SIMD is not used
 372:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****          * So, the 16 bit pointer if inputB, py is updated */
 373:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 374:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
 375:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****          ** No loop unrolling is used. */
 376:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k = srcBLen % 0x4u;
 1644              		.loc 1 376 0
 1645 0a98 3B68     		ldr	r3, [r7]
 1646 0a9a 0322     		mov	r2, #3
 1647 0a9c 1340     		and	r3, r2
 1648 0a9e E222     		mov	r2, #226
 1649 0aa0 5200     		lsl	r2, r2, #1
 1650 0aa2 BA18     		add	r2, r7, r2
 1651 0aa4 1360     		str	r3, [r2]
 377:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 378:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         if (k == 1u)
 1652              		.loc 1 378 0
 1653 0aa6 E223     		mov	r3, #226
 1654 0aa8 5B00     		lsl	r3, r3, #1
 1655 0aaa FB18     		add	r3, r7, r3
 1656 0aac 1B68     		ldr	r3, [r3]
 1657 0aae 012B     		cmp	r3, #1
 1658 0ab0 00D0     		beq	.LCB1484
 1659 0ab2 E7E0     		b	.L43	@long jump
 1660              	.LCB1484:
 379:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         {
 380:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read y[srcBLen - 5] */
 381:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = *(py+1);
 1661              		.loc 1 381 0
 1662 0ab4 3B69     		ldr	r3, [r7, #16]
 1663 0ab6 0233     		add	r3, r3, #2
 1664 0ab8 1B88     		ldrh	r3, [r3]
 1665 0aba 1BB2     		sxth	r3, r3
 1666 0abc D222     		mov	r2, #210
 1667 0abe 5200     		lsl	r2, r2, #1
 1668 0ac0 BA18     		add	r2, r7, r2
 1669 0ac2 1360     		str	r3, [r2]
 382:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifdef  ARM_MATH_BIG_ENDIAN
 383:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 384:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = c0 << 16u;
 385:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 55


 386:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
 387:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 388:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = c0 & 0x0000FFFF;
 1670              		.loc 1 388 0
 1671 0ac4 D223     		mov	r3, #210
 1672 0ac6 5B00     		lsl	r3, r3, #1
 1673 0ac8 FB18     		add	r3, r7, r3
 1674 0aca 1B68     		ldr	r3, [r3]
 1675 0acc 1B04     		lsl	r3, r3, #16
 1676 0ace 1B0C     		lsr	r3, r3, #16
 1677 0ad0 D222     		mov	r2, #210
 1678 0ad2 5200     		lsl	r2, r2, #1
 1679 0ad4 BA18     		add	r2, r7, r2
 1680 0ad6 1360     		str	r3, [r2]
 389:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 390:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
 391:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 392:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read x[7] */
 393:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         x3 = *__SIMD32(px);
 1681              		.loc 1 393 0
 1682 0ad8 1423     		mov	r3, #20
 1683 0ada FB18     		add	r3, r7, r3
 1684 0adc 1B68     		ldr	r3, [r3]
 1685 0ade 1B68     		ldr	r3, [r3]
 1686 0ae0 CE22     		mov	r2, #206
 1687 0ae2 5200     		lsl	r2, r2, #1
 1688 0ae4 BA18     		add	r2, r7, r2
 1689 0ae6 1360     		str	r3, [r2]
 394:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		px++;
 1690              		.loc 1 394 0
 1691 0ae8 7B69     		ldr	r3, [r7, #20]
 1692 0aea 0233     		add	r3, r3, #2
 1693 0aec 7B61     		str	r3, [r7, #20]
 395:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 396:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Perform the multiply-accumulates */
 397:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc0 = __SMLAD(x0, c0, acc0);
 1694              		.loc 1 397 0
 1695 0aee E823     		mov	r3, #232
 1696 0af0 5B00     		lsl	r3, r3, #1
 1697 0af2 FB18     		add	r3, r7, r3
 1698 0af4 1968     		ldr	r1, [r3]
 1699 0af6 D223     		mov	r3, #210
 1700 0af8 5B00     		lsl	r3, r3, #1
 1701 0afa FB18     		add	r3, r7, r3
 1702 0afc 1A68     		ldr	r2, [r3]
 1703 0afe F423     		mov	r3, #244
 1704 0b00 5B00     		lsl	r3, r3, #1
 1705 0b02 FB18     		add	r3, r7, r3
 1706 0b04 1B68     		ldr	r3, [r3]
 1707 0b06 8420     		mov	r0, #132
 1708 0b08 4000     		lsl	r0, r0, #1
 1709 0b0a 3818     		add	r0, r7, r0
 1710 0b0c 0160     		str	r1, [r0]
 1711 0b0e 791D     		add	r1, r7, #5
 1712 0b10 FF31     		add	r1, r1, #255
 1713 0b12 0A60     		str	r2, [r1]
 1714 0b14 7A1C     		add	r2, r7, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 56


 1715 0b16 FF32     		add	r2, r2, #255
 1716 0b18 1360     		str	r3, [r2]
 1717              	.LBB90:
 1718              	.LBB91:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1719              		.loc 2 952 0
 1720 0b1a 8423     		mov	r3, #132
 1721 0b1c 5B00     		lsl	r3, r3, #1
 1722 0b1e FB18     		add	r3, r7, r3
 1723 0b20 1B68     		ldr	r3, [r3]
 1724 0b22 1B04     		lsl	r3, r3, #16
 1725 0b24 1B14     		asr	r3, r3, #16
 1726 0b26 7A1D     		add	r2, r7, #5
 1727 0b28 FF32     		add	r2, r2, #255
 1728 0b2a 1268     		ldr	r2, [r2]
 1729 0b2c 1204     		lsl	r2, r2, #16
 1730 0b2e 1214     		asr	r2, r2, #16
 1731 0b30 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1732              		.loc 2 953 0
 1733 0b32 8423     		mov	r3, #132
 1734 0b34 5B00     		lsl	r3, r3, #1
 1735 0b36 FB18     		add	r3, r7, r3
 1736 0b38 1B68     		ldr	r3, [r3]
 1737 0b3a 1B14     		asr	r3, r3, #16
 1738 0b3c 791D     		add	r1, r7, #5
 1739 0b3e FF31     		add	r1, r1, #255
 1740 0b40 0968     		ldr	r1, [r1]
 1741 0b42 0914     		asr	r1, r1, #16
 1742 0b44 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1743              		.loc 2 952 0
 1744 0b46 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 1745              		.loc 2 954 0
 1746 0b48 7B1C     		add	r3, r7, #1
 1747 0b4a FF33     		add	r3, r3, #255
 1748 0b4c 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1749              		.loc 2 953 0
 1750 0b4e D318     		add	r3, r2, r3
 1751              	.LBE91:
 1752              	.LBE90:
 1753              		.loc 1 397 0
 1754 0b50 F422     		mov	r2, #244
 1755 0b52 5200     		lsl	r2, r2, #1
 1756 0b54 BA18     		add	r2, r7, r2
 1757 0b56 1360     		str	r3, [r2]
 398:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc1 = __SMLAD(x1, c0, acc1);
 1758              		.loc 1 398 0
 1759 0b58 E623     		mov	r3, #230
 1760 0b5a 5B00     		lsl	r3, r3, #1
 1761 0b5c FB18     		add	r3, r7, r3
 1762 0b5e 1968     		ldr	r1, [r3]
 1763 0b60 D223     		mov	r3, #210
 1764 0b62 5B00     		lsl	r3, r3, #1
 1765 0b64 FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 57


 1766 0b66 1A68     		ldr	r2, [r3]
 1767 0b68 F223     		mov	r3, #242
 1768 0b6a 5B00     		lsl	r3, r3, #1
 1769 0b6c FB18     		add	r3, r7, r3
 1770 0b6e 1B68     		ldr	r3, [r3]
 1771 0b70 FC20     		mov	r0, #252
 1772 0b72 3818     		add	r0, r7, r0
 1773 0b74 0160     		str	r1, [r0]
 1774 0b76 F821     		mov	r1, #248
 1775 0b78 7918     		add	r1, r7, r1
 1776 0b7a 0A60     		str	r2, [r1]
 1777 0b7c F422     		mov	r2, #244
 1778 0b7e BA18     		add	r2, r7, r2
 1779 0b80 1360     		str	r3, [r2]
 1780              	.LBB92:
 1781              	.LBB93:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1782              		.loc 2 952 0
 1783 0b82 FC23     		mov	r3, #252
 1784 0b84 FB18     		add	r3, r7, r3
 1785 0b86 1B68     		ldr	r3, [r3]
 1786 0b88 1B04     		lsl	r3, r3, #16
 1787 0b8a 1B14     		asr	r3, r3, #16
 1788 0b8c F822     		mov	r2, #248
 1789 0b8e BA18     		add	r2, r7, r2
 1790 0b90 1268     		ldr	r2, [r2]
 1791 0b92 1204     		lsl	r2, r2, #16
 1792 0b94 1214     		asr	r2, r2, #16
 1793 0b96 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1794              		.loc 2 953 0
 1795 0b98 FC23     		mov	r3, #252
 1796 0b9a FB18     		add	r3, r7, r3
 1797 0b9c 1B68     		ldr	r3, [r3]
 1798 0b9e 1B14     		asr	r3, r3, #16
 1799 0ba0 F821     		mov	r1, #248
 1800 0ba2 7918     		add	r1, r7, r1
 1801 0ba4 0968     		ldr	r1, [r1]
 1802 0ba6 0914     		asr	r1, r1, #16
 1803 0ba8 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1804              		.loc 2 952 0
 1805 0baa D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 1806              		.loc 2 954 0
 1807 0bac F423     		mov	r3, #244
 1808 0bae FB18     		add	r3, r7, r3
 1809 0bb0 1B68     		ldr	r3, [r3]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1810              		.loc 2 953 0
 1811 0bb2 D318     		add	r3, r2, r3
 1812              	.LBE93:
 1813              	.LBE92:
 1814              		.loc 1 398 0
 1815 0bb4 F222     		mov	r2, #242
 1816 0bb6 5200     		lsl	r2, r2, #1
 1817 0bb8 BA18     		add	r2, r7, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 58


 1818 0bba 1360     		str	r3, [r2]
 399:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc2 = __SMLADX(x1, c0, acc2);
 1819              		.loc 1 399 0
 1820 0bbc E623     		mov	r3, #230
 1821 0bbe 5B00     		lsl	r3, r3, #1
 1822 0bc0 FB18     		add	r3, r7, r3
 1823 0bc2 1968     		ldr	r1, [r3]
 1824 0bc4 D223     		mov	r3, #210
 1825 0bc6 5B00     		lsl	r3, r3, #1
 1826 0bc8 FB18     		add	r3, r7, r3
 1827 0bca 1A68     		ldr	r2, [r3]
 1828 0bcc F023     		mov	r3, #240
 1829 0bce 5B00     		lsl	r3, r3, #1
 1830 0bd0 FB18     		add	r3, r7, r3
 1831 0bd2 1B68     		ldr	r3, [r3]
 1832 0bd4 F020     		mov	r0, #240
 1833 0bd6 3818     		add	r0, r7, r0
 1834 0bd8 0160     		str	r1, [r0]
 1835 0bda EC21     		mov	r1, #236
 1836 0bdc 7918     		add	r1, r7, r1
 1837 0bde 0A60     		str	r2, [r1]
 1838 0be0 E822     		mov	r2, #232
 1839 0be2 BA18     		add	r2, r7, r2
 1840 0be4 1360     		str	r3, [r2]
 1841              	.LBB94:
 1842              	.LBB95:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1843              		.loc 2 966 0
 1844 0be6 F023     		mov	r3, #240
 1845 0be8 FB18     		add	r3, r7, r3
 1846 0bea 1B68     		ldr	r3, [r3]
 1847 0bec 1B04     		lsl	r3, r3, #16
 1848 0bee 1B14     		asr	r3, r3, #16
 1849 0bf0 EC22     		mov	r2, #236
 1850 0bf2 BA18     		add	r2, r7, r2
 1851 0bf4 1268     		ldr	r2, [r2]
 1852 0bf6 1214     		asr	r2, r2, #16
 1853 0bf8 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1854              		.loc 2 967 0
 1855 0bfa F023     		mov	r3, #240
 1856 0bfc FB18     		add	r3, r7, r3
 1857 0bfe 1B68     		ldr	r3, [r3]
 1858 0c00 1B14     		asr	r3, r3, #16
 1859 0c02 EC21     		mov	r1, #236
 1860 0c04 7918     		add	r1, r7, r1
 1861 0c06 0968     		ldr	r1, [r1]
 1862 0c08 0904     		lsl	r1, r1, #16
 1863 0c0a 0914     		asr	r1, r1, #16
 1864 0c0c 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1865              		.loc 2 966 0
 1866 0c0e D218     		add	r2, r2, r3
 1867              		.loc 2 968 0
 1868 0c10 E823     		mov	r3, #232
 1869 0c12 FB18     		add	r3, r7, r3
 1870 0c14 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 59


 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1871              		.loc 2 967 0
 1872 0c16 D318     		add	r3, r2, r3
 1873              	.LBE95:
 1874              	.LBE94:
 1875              		.loc 1 399 0
 1876 0c18 F022     		mov	r2, #240
 1877 0c1a 5200     		lsl	r2, r2, #1
 1878 0c1c BA18     		add	r2, r7, r2
 1879 0c1e 1360     		str	r3, [r2]
 400:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc3 = __SMLADX(x3, c0, acc3);
 1880              		.loc 1 400 0
 1881 0c20 CE23     		mov	r3, #206
 1882 0c22 5B00     		lsl	r3, r3, #1
 1883 0c24 FB18     		add	r3, r7, r3
 1884 0c26 1968     		ldr	r1, [r3]
 1885 0c28 D223     		mov	r3, #210
 1886 0c2a 5B00     		lsl	r3, r3, #1
 1887 0c2c FB18     		add	r3, r7, r3
 1888 0c2e 1A68     		ldr	r2, [r3]
 1889 0c30 EE23     		mov	r3, #238
 1890 0c32 5B00     		lsl	r3, r3, #1
 1891 0c34 FB18     		add	r3, r7, r3
 1892 0c36 1B68     		ldr	r3, [r3]
 1893 0c38 E420     		mov	r0, #228
 1894 0c3a 3818     		add	r0, r7, r0
 1895 0c3c 0160     		str	r1, [r0]
 1896 0c3e E021     		mov	r1, #224
 1897 0c40 7918     		add	r1, r7, r1
 1898 0c42 0A60     		str	r2, [r1]
 1899 0c44 DC22     		mov	r2, #220
 1900 0c46 BA18     		add	r2, r7, r2
 1901 0c48 1360     		str	r3, [r2]
 1902              	.LBB96:
 1903              	.LBB97:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1904              		.loc 2 966 0
 1905 0c4a E423     		mov	r3, #228
 1906 0c4c FB18     		add	r3, r7, r3
 1907 0c4e 1B68     		ldr	r3, [r3]
 1908 0c50 1B04     		lsl	r3, r3, #16
 1909 0c52 1B14     		asr	r3, r3, #16
 1910 0c54 E022     		mov	r2, #224
 1911 0c56 BA18     		add	r2, r7, r2
 1912 0c58 1268     		ldr	r2, [r2]
 1913 0c5a 1214     		asr	r2, r2, #16
 1914 0c5c 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1915              		.loc 2 967 0
 1916 0c5e E423     		mov	r3, #228
 1917 0c60 FB18     		add	r3, r7, r3
 1918 0c62 1B68     		ldr	r3, [r3]
 1919 0c64 1B14     		asr	r3, r3, #16
 1920 0c66 E021     		mov	r1, #224
 1921 0c68 7918     		add	r1, r7, r1
 1922 0c6a 0968     		ldr	r1, [r1]
 1923 0c6c 0904     		lsl	r1, r1, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 60


 1924 0c6e 0914     		asr	r1, r1, #16
 1925 0c70 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 1926              		.loc 2 966 0
 1927 0c72 D218     		add	r2, r2, r3
 1928              		.loc 2 968 0
 1929 0c74 DC23     		mov	r3, #220
 1930 0c76 FB18     		add	r3, r7, r3
 1931 0c78 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1932              		.loc 2 967 0
 1933 0c7a D318     		add	r3, r2, r3
 1934              	.LBE97:
 1935              	.LBE96:
 1936              		.loc 1 400 0
 1937 0c7c EE22     		mov	r2, #238
 1938 0c7e 5200     		lsl	r2, r2, #1
 1939 0c80 BA18     		add	r2, r7, r2
 1940 0c82 1360     		str	r3, [r2]
 1941              	.L43:
 401:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         }
 402:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 403:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         if (k == 2u)
 1942              		.loc 1 403 0
 1943 0c84 E223     		mov	r3, #226
 1944 0c86 5B00     		lsl	r3, r3, #1
 1945 0c88 FB18     		add	r3, r7, r3
 1946 0c8a 1B68     		ldr	r3, [r3]
 1947 0c8c 022B     		cmp	r3, #2
 1948 0c8e 00D0     		beq	.LCB1740
 1949 0c90 DFE0     		b	.L48	@long jump
 1950              	.LCB1740:
 404:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         {
 405:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read y[srcBLen - 5], y[srcBLen - 6] */
 406:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = _SIMD32_OFFSET(py);
 1951              		.loc 1 406 0
 1952 0c92 3B69     		ldr	r3, [r7, #16]
 1953 0c94 1B68     		ldr	r3, [r3]
 1954 0c96 D222     		mov	r2, #210
 1955 0c98 5200     		lsl	r2, r2, #1
 1956 0c9a BA18     		add	r2, r7, r2
 1957 0c9c 1360     		str	r3, [r2]
 407:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 408:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read x[7], x[8] */
 409:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         x3 = *__SIMD32(px);
 1958              		.loc 1 409 0
 1959 0c9e 1423     		mov	r3, #20
 1960 0ca0 FB18     		add	r3, r7, r3
 1961 0ca2 1B68     		ldr	r3, [r3]
 1962 0ca4 1B68     		ldr	r3, [r3]
 1963 0ca6 CE22     		mov	r2, #206
 1964 0ca8 5200     		lsl	r2, r2, #1
 1965 0caa BA18     		add	r2, r7, r2
 1966 0cac 1360     		str	r3, [r2]
 410:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 411:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Read x[9] */
 412:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         x2 = _SIMD32_OFFSET(px+1);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 61


 1967              		.loc 1 412 0
 1968 0cae 7B69     		ldr	r3, [r7, #20]
 1969 0cb0 0233     		add	r3, r3, #2
 1970 0cb2 1B68     		ldr	r3, [r3]
 1971 0cb4 D022     		mov	r2, #208
 1972 0cb6 5200     		lsl	r2, r2, #1
 1973 0cb8 BA18     		add	r2, r7, r2
 1974 0cba 1360     		str	r3, [r2]
 413:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		px += 2u;
 1975              		.loc 1 413 0
 1976 0cbc 7B69     		ldr	r3, [r7, #20]
 1977 0cbe 0433     		add	r3, r3, #4
 1978 0cc0 7B61     		str	r3, [r7, #20]
 414:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 415:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Perform the multiply-accumulates */
 416:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc0 = __SMLADX(x0, c0, acc0);
 1979              		.loc 1 416 0
 1980 0cc2 E823     		mov	r3, #232
 1981 0cc4 5B00     		lsl	r3, r3, #1
 1982 0cc6 FB18     		add	r3, r7, r3
 1983 0cc8 1968     		ldr	r1, [r3]
 1984 0cca D223     		mov	r3, #210
 1985 0ccc 5B00     		lsl	r3, r3, #1
 1986 0cce FB18     		add	r3, r7, r3
 1987 0cd0 1A68     		ldr	r2, [r3]
 1988 0cd2 F423     		mov	r3, #244
 1989 0cd4 5B00     		lsl	r3, r3, #1
 1990 0cd6 FB18     		add	r3, r7, r3
 1991 0cd8 1B68     		ldr	r3, [r3]
 1992 0cda D820     		mov	r0, #216
 1993 0cdc 3818     		add	r0, r7, r0
 1994 0cde 0160     		str	r1, [r0]
 1995 0ce0 D421     		mov	r1, #212
 1996 0ce2 7918     		add	r1, r7, r1
 1997 0ce4 0A60     		str	r2, [r1]
 1998 0ce6 D022     		mov	r2, #208
 1999 0ce8 BA18     		add	r2, r7, r2
 2000 0cea 1360     		str	r3, [r2]
 2001              	.LBB98:
 2002              	.LBB99:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2003              		.loc 2 966 0
 2004 0cec D823     		mov	r3, #216
 2005 0cee FB18     		add	r3, r7, r3
 2006 0cf0 1B68     		ldr	r3, [r3]
 2007 0cf2 1B04     		lsl	r3, r3, #16
 2008 0cf4 1B14     		asr	r3, r3, #16
 2009 0cf6 D422     		mov	r2, #212
 2010 0cf8 BA18     		add	r2, r7, r2
 2011 0cfa 1268     		ldr	r2, [r2]
 2012 0cfc 1214     		asr	r2, r2, #16
 2013 0cfe 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2014              		.loc 2 967 0
 2015 0d00 D823     		mov	r3, #216
 2016 0d02 FB18     		add	r3, r7, r3
 2017 0d04 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 62


 2018 0d06 1B14     		asr	r3, r3, #16
 2019 0d08 D421     		mov	r1, #212
 2020 0d0a 7918     		add	r1, r7, r1
 2021 0d0c 0968     		ldr	r1, [r1]
 2022 0d0e 0904     		lsl	r1, r1, #16
 2023 0d10 0914     		asr	r1, r1, #16
 2024 0d12 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2025              		.loc 2 966 0
 2026 0d14 D218     		add	r2, r2, r3
 2027              		.loc 2 968 0
 2028 0d16 D023     		mov	r3, #208
 2029 0d18 FB18     		add	r3, r7, r3
 2030 0d1a 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2031              		.loc 2 967 0
 2032 0d1c D318     		add	r3, r2, r3
 2033              	.LBE99:
 2034              	.LBE98:
 2035              		.loc 1 416 0
 2036 0d1e F422     		mov	r2, #244
 2037 0d20 5200     		lsl	r2, r2, #1
 2038 0d22 BA18     		add	r2, r7, r2
 2039 0d24 1360     		str	r3, [r2]
 417:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc1 = __SMLADX(x1, c0, acc1);
 2040              		.loc 1 417 0
 2041 0d26 E623     		mov	r3, #230
 2042 0d28 5B00     		lsl	r3, r3, #1
 2043 0d2a FB18     		add	r3, r7, r3
 2044 0d2c 1968     		ldr	r1, [r3]
 2045 0d2e D223     		mov	r3, #210
 2046 0d30 5B00     		lsl	r3, r3, #1
 2047 0d32 FB18     		add	r3, r7, r3
 2048 0d34 1A68     		ldr	r2, [r3]
 2049 0d36 F223     		mov	r3, #242
 2050 0d38 5B00     		lsl	r3, r3, #1
 2051 0d3a FB18     		add	r3, r7, r3
 2052 0d3c 1B68     		ldr	r3, [r3]
 2053 0d3e CC20     		mov	r0, #204
 2054 0d40 3818     		add	r0, r7, r0
 2055 0d42 0160     		str	r1, [r0]
 2056 0d44 C821     		mov	r1, #200
 2057 0d46 7918     		add	r1, r7, r1
 2058 0d48 0A60     		str	r2, [r1]
 2059 0d4a C422     		mov	r2, #196
 2060 0d4c BA18     		add	r2, r7, r2
 2061 0d4e 1360     		str	r3, [r2]
 2062              	.LBB100:
 2063              	.LBB101:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2064              		.loc 2 966 0
 2065 0d50 CC23     		mov	r3, #204
 2066 0d52 FB18     		add	r3, r7, r3
 2067 0d54 1B68     		ldr	r3, [r3]
 2068 0d56 1B04     		lsl	r3, r3, #16
 2069 0d58 1B14     		asr	r3, r3, #16
 2070 0d5a C822     		mov	r2, #200
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 63


 2071 0d5c BA18     		add	r2, r7, r2
 2072 0d5e 1268     		ldr	r2, [r2]
 2073 0d60 1214     		asr	r2, r2, #16
 2074 0d62 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2075              		.loc 2 967 0
 2076 0d64 CC23     		mov	r3, #204
 2077 0d66 FB18     		add	r3, r7, r3
 2078 0d68 1B68     		ldr	r3, [r3]
 2079 0d6a 1B14     		asr	r3, r3, #16
 2080 0d6c C821     		mov	r1, #200
 2081 0d6e 7918     		add	r1, r7, r1
 2082 0d70 0968     		ldr	r1, [r1]
 2083 0d72 0904     		lsl	r1, r1, #16
 2084 0d74 0914     		asr	r1, r1, #16
 2085 0d76 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2086              		.loc 2 966 0
 2087 0d78 D218     		add	r2, r2, r3
 2088              		.loc 2 968 0
 2089 0d7a C423     		mov	r3, #196
 2090 0d7c FB18     		add	r3, r7, r3
 2091 0d7e 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2092              		.loc 2 967 0
 2093 0d80 D318     		add	r3, r2, r3
 2094              	.LBE101:
 2095              	.LBE100:
 2096              		.loc 1 417 0
 2097 0d82 F222     		mov	r2, #242
 2098 0d84 5200     		lsl	r2, r2, #1
 2099 0d86 BA18     		add	r2, r7, r2
 2100 0d88 1360     		str	r3, [r2]
 418:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc2 = __SMLADX(x3, c0, acc2);
 2101              		.loc 1 418 0
 2102 0d8a CE23     		mov	r3, #206
 2103 0d8c 5B00     		lsl	r3, r3, #1
 2104 0d8e FB18     		add	r3, r7, r3
 2105 0d90 1968     		ldr	r1, [r3]
 2106 0d92 D223     		mov	r3, #210
 2107 0d94 5B00     		lsl	r3, r3, #1
 2108 0d96 FB18     		add	r3, r7, r3
 2109 0d98 1A68     		ldr	r2, [r3]
 2110 0d9a F023     		mov	r3, #240
 2111 0d9c 5B00     		lsl	r3, r3, #1
 2112 0d9e FB18     		add	r3, r7, r3
 2113 0da0 1B68     		ldr	r3, [r3]
 2114 0da2 C020     		mov	r0, #192
 2115 0da4 3818     		add	r0, r7, r0
 2116 0da6 0160     		str	r1, [r0]
 2117 0da8 BC21     		mov	r1, #188
 2118 0daa 7918     		add	r1, r7, r1
 2119 0dac 0A60     		str	r2, [r1]
 2120 0dae B822     		mov	r2, #184
 2121 0db0 BA18     		add	r2, r7, r2
 2122 0db2 1360     		str	r3, [r2]
 2123              	.LBB102:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 64


 2124              	.LBB103:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2125              		.loc 2 966 0
 2126 0db4 C023     		mov	r3, #192
 2127 0db6 FB18     		add	r3, r7, r3
 2128 0db8 1B68     		ldr	r3, [r3]
 2129 0dba 1B04     		lsl	r3, r3, #16
 2130 0dbc 1B14     		asr	r3, r3, #16
 2131 0dbe BC22     		mov	r2, #188
 2132 0dc0 BA18     		add	r2, r7, r2
 2133 0dc2 1268     		ldr	r2, [r2]
 2134 0dc4 1214     		asr	r2, r2, #16
 2135 0dc6 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2136              		.loc 2 967 0
 2137 0dc8 C023     		mov	r3, #192
 2138 0dca FB18     		add	r3, r7, r3
 2139 0dcc 1B68     		ldr	r3, [r3]
 2140 0dce 1B14     		asr	r3, r3, #16
 2141 0dd0 BC21     		mov	r1, #188
 2142 0dd2 7918     		add	r1, r7, r1
 2143 0dd4 0968     		ldr	r1, [r1]
 2144 0dd6 0904     		lsl	r1, r1, #16
 2145 0dd8 0914     		asr	r1, r1, #16
 2146 0dda 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2147              		.loc 2 966 0
 2148 0ddc D218     		add	r2, r2, r3
 2149              		.loc 2 968 0
 2150 0dde B823     		mov	r3, #184
 2151 0de0 FB18     		add	r3, r7, r3
 2152 0de2 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2153              		.loc 2 967 0
 2154 0de4 D318     		add	r3, r2, r3
 2155              	.LBE103:
 2156              	.LBE102:
 2157              		.loc 1 418 0
 2158 0de6 F022     		mov	r2, #240
 2159 0de8 5200     		lsl	r2, r2, #1
 2160 0dea BA18     		add	r2, r7, r2
 2161 0dec 1360     		str	r3, [r2]
 419:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc3 = __SMLADX(x2, c0, acc3);
 2162              		.loc 1 419 0
 2163 0dee D023     		mov	r3, #208
 2164 0df0 5B00     		lsl	r3, r3, #1
 2165 0df2 FB18     		add	r3, r7, r3
 2166 0df4 1968     		ldr	r1, [r3]
 2167 0df6 D223     		mov	r3, #210
 2168 0df8 5B00     		lsl	r3, r3, #1
 2169 0dfa FB18     		add	r3, r7, r3
 2170 0dfc 1A68     		ldr	r2, [r3]
 2171 0dfe EE23     		mov	r3, #238
 2172 0e00 5B00     		lsl	r3, r3, #1
 2173 0e02 FB18     		add	r3, r7, r3
 2174 0e04 1B68     		ldr	r3, [r3]
 2175 0e06 B420     		mov	r0, #180
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 65


 2176 0e08 3818     		add	r0, r7, r0
 2177 0e0a 0160     		str	r1, [r0]
 2178 0e0c B021     		mov	r1, #176
 2179 0e0e 7918     		add	r1, r7, r1
 2180 0e10 0A60     		str	r2, [r1]
 2181 0e12 AC22     		mov	r2, #172
 2182 0e14 BA18     		add	r2, r7, r2
 2183 0e16 1360     		str	r3, [r2]
 2184              	.LBB104:
 2185              	.LBB105:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2186              		.loc 2 966 0
 2187 0e18 B423     		mov	r3, #180
 2188 0e1a FB18     		add	r3, r7, r3
 2189 0e1c 1B68     		ldr	r3, [r3]
 2190 0e1e 1B04     		lsl	r3, r3, #16
 2191 0e20 1B14     		asr	r3, r3, #16
 2192 0e22 B022     		mov	r2, #176
 2193 0e24 BA18     		add	r2, r7, r2
 2194 0e26 1268     		ldr	r2, [r2]
 2195 0e28 1214     		asr	r2, r2, #16
 2196 0e2a 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2197              		.loc 2 967 0
 2198 0e2c B423     		mov	r3, #180
 2199 0e2e FB18     		add	r3, r7, r3
 2200 0e30 1B68     		ldr	r3, [r3]
 2201 0e32 1B14     		asr	r3, r3, #16
 2202 0e34 B021     		mov	r1, #176
 2203 0e36 7918     		add	r1, r7, r1
 2204 0e38 0968     		ldr	r1, [r1]
 2205 0e3a 0904     		lsl	r1, r1, #16
 2206 0e3c 0914     		asr	r1, r1, #16
 2207 0e3e 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2208              		.loc 2 966 0
 2209 0e40 D218     		add	r2, r2, r3
 2210              		.loc 2 968 0
 2211 0e42 AC23     		mov	r3, #172
 2212 0e44 FB18     		add	r3, r7, r3
 2213 0e46 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2214              		.loc 2 967 0
 2215 0e48 D318     		add	r3, r2, r3
 2216              	.LBE105:
 2217              	.LBE104:
 2218              		.loc 1 419 0
 2219 0e4a EE22     		mov	r2, #238
 2220 0e4c 5200     		lsl	r2, r2, #1
 2221 0e4e BA18     		add	r2, r7, r2
 2222 0e50 1360     		str	r3, [r2]
 2223              	.L48:
 420:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         }
 421:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 422:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         if (k == 3u)
 2224              		.loc 1 422 0
 2225 0e52 E223     		mov	r3, #226
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 66


 2226 0e54 5B00     		lsl	r3, r3, #1
 2227 0e56 FB18     		add	r3, r7, r3
 2228 0e58 1B68     		ldr	r3, [r3]
 2229 0e5a 032B     		cmp	r3, #3
 2230 0e5c 00D0     		beq	.LCB1988
 2231 0e5e 7BE1     		b	.L53	@long jump
 2232              	.LCB1988:
 423:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         {
 424:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read y[srcBLen - 5], y[srcBLen - 6] */
 425:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = _SIMD32_OFFSET(py);
 2233              		.loc 1 425 0
 2234 0e60 3B69     		ldr	r3, [r7, #16]
 2235 0e62 1B68     		ldr	r3, [r3]
 2236 0e64 D222     		mov	r2, #210
 2237 0e66 5200     		lsl	r2, r2, #1
 2238 0e68 BA18     		add	r2, r7, r2
 2239 0e6a 1360     		str	r3, [r2]
 426:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 427:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read x[7], x[8] */
 428:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         x3 = *__SIMD32(px);
 2240              		.loc 1 428 0
 2241 0e6c 1423     		mov	r3, #20
 2242 0e6e FB18     		add	r3, r7, r3
 2243 0e70 1B68     		ldr	r3, [r3]
 2244 0e72 1B68     		ldr	r3, [r3]
 2245 0e74 CE22     		mov	r2, #206
 2246 0e76 5200     		lsl	r2, r2, #1
 2247 0e78 BA18     		add	r2, r7, r2
 2248 0e7a 1360     		str	r3, [r2]
 429:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 430:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read x[9] */
 431:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         x2 = _SIMD32_OFFSET(px+1);
 2249              		.loc 1 431 0
 2250 0e7c 7B69     		ldr	r3, [r7, #20]
 2251 0e7e 0233     		add	r3, r3, #2
 2252 0e80 1B68     		ldr	r3, [r3]
 2253 0e82 D022     		mov	r2, #208
 2254 0e84 5200     		lsl	r2, r2, #1
 2255 0e86 BA18     		add	r2, r7, r2
 2256 0e88 1360     		str	r3, [r2]
 432:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 433:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Perform the multiply-accumulates */
 434:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc0 = __SMLADX(x0, c0, acc0);
 2257              		.loc 1 434 0
 2258 0e8a E823     		mov	r3, #232
 2259 0e8c 5B00     		lsl	r3, r3, #1
 2260 0e8e FB18     		add	r3, r7, r3
 2261 0e90 1968     		ldr	r1, [r3]
 2262 0e92 D223     		mov	r3, #210
 2263 0e94 5B00     		lsl	r3, r3, #1
 2264 0e96 FB18     		add	r3, r7, r3
 2265 0e98 1A68     		ldr	r2, [r3]
 2266 0e9a F423     		mov	r3, #244
 2267 0e9c 5B00     		lsl	r3, r3, #1
 2268 0e9e FB18     		add	r3, r7, r3
 2269 0ea0 1B68     		ldr	r3, [r3]
 2270 0ea2 A820     		mov	r0, #168
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 67


 2271 0ea4 3818     		add	r0, r7, r0
 2272 0ea6 0160     		str	r1, [r0]
 2273 0ea8 A421     		mov	r1, #164
 2274 0eaa 7918     		add	r1, r7, r1
 2275 0eac 0A60     		str	r2, [r1]
 2276 0eae A022     		mov	r2, #160
 2277 0eb0 BA18     		add	r2, r7, r2
 2278 0eb2 1360     		str	r3, [r2]
 2279              	.LBB106:
 2280              	.LBB107:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2281              		.loc 2 966 0
 2282 0eb4 A823     		mov	r3, #168
 2283 0eb6 FB18     		add	r3, r7, r3
 2284 0eb8 1B68     		ldr	r3, [r3]
 2285 0eba 1B04     		lsl	r3, r3, #16
 2286 0ebc 1B14     		asr	r3, r3, #16
 2287 0ebe A422     		mov	r2, #164
 2288 0ec0 BA18     		add	r2, r7, r2
 2289 0ec2 1268     		ldr	r2, [r2]
 2290 0ec4 1214     		asr	r2, r2, #16
 2291 0ec6 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2292              		.loc 2 967 0
 2293 0ec8 A823     		mov	r3, #168
 2294 0eca FB18     		add	r3, r7, r3
 2295 0ecc 1B68     		ldr	r3, [r3]
 2296 0ece 1B14     		asr	r3, r3, #16
 2297 0ed0 A421     		mov	r1, #164
 2298 0ed2 7918     		add	r1, r7, r1
 2299 0ed4 0968     		ldr	r1, [r1]
 2300 0ed6 0904     		lsl	r1, r1, #16
 2301 0ed8 0914     		asr	r1, r1, #16
 2302 0eda 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2303              		.loc 2 966 0
 2304 0edc D218     		add	r2, r2, r3
 2305              		.loc 2 968 0
 2306 0ede A023     		mov	r3, #160
 2307 0ee0 FB18     		add	r3, r7, r3
 2308 0ee2 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2309              		.loc 2 967 0
 2310 0ee4 D318     		add	r3, r2, r3
 2311              	.LBE107:
 2312              	.LBE106:
 2313              		.loc 1 434 0
 2314 0ee6 F422     		mov	r2, #244
 2315 0ee8 5200     		lsl	r2, r2, #1
 2316 0eea BA18     		add	r2, r7, r2
 2317 0eec 1360     		str	r3, [r2]
 435:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc1 = __SMLADX(x1, c0, acc1);
 2318              		.loc 1 435 0
 2319 0eee E623     		mov	r3, #230
 2320 0ef0 5B00     		lsl	r3, r3, #1
 2321 0ef2 FB18     		add	r3, r7, r3
 2322 0ef4 1968     		ldr	r1, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 68


 2323 0ef6 D223     		mov	r3, #210
 2324 0ef8 5B00     		lsl	r3, r3, #1
 2325 0efa FB18     		add	r3, r7, r3
 2326 0efc 1A68     		ldr	r2, [r3]
 2327 0efe F223     		mov	r3, #242
 2328 0f00 5B00     		lsl	r3, r3, #1
 2329 0f02 FB18     		add	r3, r7, r3
 2330 0f04 1B68     		ldr	r3, [r3]
 2331 0f06 9C20     		mov	r0, #156
 2332 0f08 3818     		add	r0, r7, r0
 2333 0f0a 0160     		str	r1, [r0]
 2334 0f0c 9821     		mov	r1, #152
 2335 0f0e 7918     		add	r1, r7, r1
 2336 0f10 0A60     		str	r2, [r1]
 2337 0f12 9422     		mov	r2, #148
 2338 0f14 BA18     		add	r2, r7, r2
 2339 0f16 1360     		str	r3, [r2]
 2340              	.LBB108:
 2341              	.LBB109:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2342              		.loc 2 966 0
 2343 0f18 9C23     		mov	r3, #156
 2344 0f1a FB18     		add	r3, r7, r3
 2345 0f1c 1B68     		ldr	r3, [r3]
 2346 0f1e 1B04     		lsl	r3, r3, #16
 2347 0f20 1B14     		asr	r3, r3, #16
 2348 0f22 9822     		mov	r2, #152
 2349 0f24 BA18     		add	r2, r7, r2
 2350 0f26 1268     		ldr	r2, [r2]
 2351 0f28 1214     		asr	r2, r2, #16
 2352 0f2a 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2353              		.loc 2 967 0
 2354 0f2c 9C23     		mov	r3, #156
 2355 0f2e FB18     		add	r3, r7, r3
 2356 0f30 1B68     		ldr	r3, [r3]
 2357 0f32 1B14     		asr	r3, r3, #16
 2358 0f34 9821     		mov	r1, #152
 2359 0f36 7918     		add	r1, r7, r1
 2360 0f38 0968     		ldr	r1, [r1]
 2361 0f3a 0904     		lsl	r1, r1, #16
 2362 0f3c 0914     		asr	r1, r1, #16
 2363 0f3e 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2364              		.loc 2 966 0
 2365 0f40 D218     		add	r2, r2, r3
 2366              		.loc 2 968 0
 2367 0f42 9423     		mov	r3, #148
 2368 0f44 FB18     		add	r3, r7, r3
 2369 0f46 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2370              		.loc 2 967 0
 2371 0f48 D318     		add	r3, r2, r3
 2372              	.LBE109:
 2373              	.LBE108:
 2374              		.loc 1 435 0
 2375 0f4a F222     		mov	r2, #242
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 69


 2376 0f4c 5200     		lsl	r2, r2, #1
 2377 0f4e BA18     		add	r2, r7, r2
 2378 0f50 1360     		str	r3, [r2]
 436:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc2 = __SMLADX(x3, c0, acc2);
 2379              		.loc 1 436 0
 2380 0f52 CE23     		mov	r3, #206
 2381 0f54 5B00     		lsl	r3, r3, #1
 2382 0f56 FB18     		add	r3, r7, r3
 2383 0f58 1968     		ldr	r1, [r3]
 2384 0f5a D223     		mov	r3, #210
 2385 0f5c 5B00     		lsl	r3, r3, #1
 2386 0f5e FB18     		add	r3, r7, r3
 2387 0f60 1A68     		ldr	r2, [r3]
 2388 0f62 F023     		mov	r3, #240
 2389 0f64 5B00     		lsl	r3, r3, #1
 2390 0f66 FB18     		add	r3, r7, r3
 2391 0f68 1B68     		ldr	r3, [r3]
 2392 0f6a 9020     		mov	r0, #144
 2393 0f6c 3818     		add	r0, r7, r0
 2394 0f6e 0160     		str	r1, [r0]
 2395 0f70 8C21     		mov	r1, #140
 2396 0f72 7918     		add	r1, r7, r1
 2397 0f74 0A60     		str	r2, [r1]
 2398 0f76 8822     		mov	r2, #136
 2399 0f78 BA18     		add	r2, r7, r2
 2400 0f7a 1360     		str	r3, [r2]
 2401              	.LBB110:
 2402              	.LBB111:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2403              		.loc 2 966 0
 2404 0f7c 9023     		mov	r3, #144
 2405 0f7e FB18     		add	r3, r7, r3
 2406 0f80 1B68     		ldr	r3, [r3]
 2407 0f82 1B04     		lsl	r3, r3, #16
 2408 0f84 1B14     		asr	r3, r3, #16
 2409 0f86 8C22     		mov	r2, #140
 2410 0f88 BA18     		add	r2, r7, r2
 2411 0f8a 1268     		ldr	r2, [r2]
 2412 0f8c 1214     		asr	r2, r2, #16
 2413 0f8e 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2414              		.loc 2 967 0
 2415 0f90 9023     		mov	r3, #144
 2416 0f92 FB18     		add	r3, r7, r3
 2417 0f94 1B68     		ldr	r3, [r3]
 2418 0f96 1B14     		asr	r3, r3, #16
 2419 0f98 8C21     		mov	r1, #140
 2420 0f9a 7918     		add	r1, r7, r1
 2421 0f9c 0968     		ldr	r1, [r1]
 2422 0f9e 0904     		lsl	r1, r1, #16
 2423 0fa0 0914     		asr	r1, r1, #16
 2424 0fa2 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2425              		.loc 2 966 0
 2426 0fa4 D218     		add	r2, r2, r3
 2427              		.loc 2 968 0
 2428 0fa6 8823     		mov	r3, #136
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 70


 2429 0fa8 FB18     		add	r3, r7, r3
 2430 0faa 1B68     		ldr	r3, [r3]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2431              		.loc 2 967 0
 2432 0fac D318     		add	r3, r2, r3
 2433              	.LBE111:
 2434              	.LBE110:
 2435              		.loc 1 436 0
 2436 0fae F022     		mov	r2, #240
 2437 0fb0 5200     		lsl	r2, r2, #1
 2438 0fb2 BA18     		add	r2, r7, r2
 2439 0fb4 1360     		str	r3, [r2]
 437:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc3 = __SMLADX(x2, c0, acc3);
 2440              		.loc 1 437 0
 2441 0fb6 D023     		mov	r3, #208
 2442 0fb8 5B00     		lsl	r3, r3, #1
 2443 0fba FB18     		add	r3, r7, r3
 2444 0fbc 1968     		ldr	r1, [r3]
 2445 0fbe D223     		mov	r3, #210
 2446 0fc0 5B00     		lsl	r3, r3, #1
 2447 0fc2 FB18     		add	r3, r7, r3
 2448 0fc4 1A68     		ldr	r2, [r3]
 2449 0fc6 EE23     		mov	r3, #238
 2450 0fc8 5B00     		lsl	r3, r3, #1
 2451 0fca FB18     		add	r3, r7, r3
 2452 0fcc 1B68     		ldr	r3, [r3]
 2453 0fce 8420     		mov	r0, #132
 2454 0fd0 3818     		add	r0, r7, r0
 2455 0fd2 0160     		str	r1, [r0]
 2456 0fd4 8021     		mov	r1, #128
 2457 0fd6 7918     		add	r1, r7, r1
 2458 0fd8 0A60     		str	r2, [r1]
 2459 0fda FB67     		str	r3, [r7, #124]
 2460              	.LBB112:
 2461              	.LBB113:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2462              		.loc 2 966 0
 2463 0fdc 8423     		mov	r3, #132
 2464 0fde FB18     		add	r3, r7, r3
 2465 0fe0 1B68     		ldr	r3, [r3]
 2466 0fe2 1B04     		lsl	r3, r3, #16
 2467 0fe4 1B14     		asr	r3, r3, #16
 2468 0fe6 8022     		mov	r2, #128
 2469 0fe8 BA18     		add	r2, r7, r2
 2470 0fea 1268     		ldr	r2, [r2]
 2471 0fec 1214     		asr	r2, r2, #16
 2472 0fee 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2473              		.loc 2 967 0
 2474 0ff0 8423     		mov	r3, #132
 2475 0ff2 FB18     		add	r3, r7, r3
 2476 0ff4 1B68     		ldr	r3, [r3]
 2477 0ff6 1B14     		asr	r3, r3, #16
 2478 0ff8 8021     		mov	r1, #128
 2479 0ffa 7918     		add	r1, r7, r1
 2480 0ffc 0968     		ldr	r1, [r1]
 2481 0ffe 0904     		lsl	r1, r1, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 71


 2482 1000 0914     		asr	r1, r1, #16
 2483 1002 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2484              		.loc 2 966 0
 2485 1004 D218     		add	r2, r2, r3
 2486              		.loc 2 968 0
 2487 1006 FB6F     		ldr	r3, [r7, #124]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2488              		.loc 2 967 0
 2489 1008 D318     		add	r3, r2, r3
 2490              	.LBE113:
 2491              	.LBE112:
 2492              		.loc 1 437 0
 2493 100a EE22     		mov	r2, #238
 2494 100c 5200     		lsl	r2, r2, #1
 2495 100e BA18     		add	r2, r7, r2
 2496 1010 1360     		str	r3, [r2]
 438:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 439:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		c0 = *(py-1);
 2497              		.loc 1 439 0
 2498 1012 3B69     		ldr	r3, [r7, #16]
 2499 1014 023B     		sub	r3, r3, #2
 2500 1016 1B88     		ldrh	r3, [r3]
 2501 1018 1BB2     		sxth	r3, r3
 2502 101a D222     		mov	r2, #210
 2503 101c 5200     		lsl	r2, r2, #1
 2504 101e BA18     		add	r2, r7, r2
 2505 1020 1360     		str	r3, [r2]
 440:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifdef  ARM_MATH_BIG_ENDIAN
 441:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 442:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = c0 << 16u;
 443:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
 444:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 445:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = c0 & 0x0000FFFF;
 2506              		.loc 1 445 0
 2507 1022 D223     		mov	r3, #210
 2508 1024 5B00     		lsl	r3, r3, #1
 2509 1026 FB18     		add	r3, r7, r3
 2510 1028 1B68     		ldr	r3, [r3]
 2511 102a 1B04     		lsl	r3, r3, #16
 2512 102c 1B0C     		lsr	r3, r3, #16
 2513 102e D222     		mov	r2, #210
 2514 1030 5200     		lsl	r2, r2, #1
 2515 1032 BA18     		add	r2, r7, r2
 2516 1034 1360     		str	r3, [r2]
 446:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
 447:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 448:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Read x[10] */
 449:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         x3 =  _SIMD32_OFFSET(px+2);
 2517              		.loc 1 449 0
 2518 1036 7B69     		ldr	r3, [r7, #20]
 2519 1038 5B68     		ldr	r3, [r3, #4]
 2520 103a CE22     		mov	r2, #206
 2521 103c 5200     		lsl	r2, r2, #1
 2522 103e BA18     		add	r2, r7, r2
 2523 1040 1360     		str	r3, [r2]
 450:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		px += 3u;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 72


 2524              		.loc 1 450 0
 2525 1042 7B69     		ldr	r3, [r7, #20]
 2526 1044 0633     		add	r3, r3, #6
 2527 1046 7B61     		str	r3, [r7, #20]
 451:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 452:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Perform the multiply-accumulates */
 453:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc0 = __SMLADX(x1, c0, acc0);
 2528              		.loc 1 453 0
 2529 1048 E623     		mov	r3, #230
 2530 104a 5B00     		lsl	r3, r3, #1
 2531 104c FB18     		add	r3, r7, r3
 2532 104e 1968     		ldr	r1, [r3]
 2533 1050 D223     		mov	r3, #210
 2534 1052 5B00     		lsl	r3, r3, #1
 2535 1054 FB18     		add	r3, r7, r3
 2536 1056 1A68     		ldr	r2, [r3]
 2537 1058 F423     		mov	r3, #244
 2538 105a 5B00     		lsl	r3, r3, #1
 2539 105c FB18     		add	r3, r7, r3
 2540 105e 1B68     		ldr	r3, [r3]
 2541 1060 B967     		str	r1, [r7, #120]
 2542 1062 7A67     		str	r2, [r7, #116]
 2543 1064 3B67     		str	r3, [r7, #112]
 2544              	.LBB114:
 2545              	.LBB115:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2546              		.loc 2 966 0
 2547 1066 BB6F     		ldr	r3, [r7, #120]
 2548 1068 1B04     		lsl	r3, r3, #16
 2549 106a 1B14     		asr	r3, r3, #16
 2550 106c 7A6F     		ldr	r2, [r7, #116]
 2551 106e 1214     		asr	r2, r2, #16
 2552 1070 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2553              		.loc 2 967 0
 2554 1072 BB6F     		ldr	r3, [r7, #120]
 2555 1074 1B14     		asr	r3, r3, #16
 2556 1076 796F     		ldr	r1, [r7, #116]
 2557 1078 0904     		lsl	r1, r1, #16
 2558 107a 0914     		asr	r1, r1, #16
 2559 107c 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2560              		.loc 2 966 0
 2561 107e D218     		add	r2, r2, r3
 2562              		.loc 2 968 0
 2563 1080 3B6F     		ldr	r3, [r7, #112]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2564              		.loc 2 967 0
 2565 1082 D318     		add	r3, r2, r3
 2566              	.LBE115:
 2567              	.LBE114:
 2568              		.loc 1 453 0
 2569 1084 F422     		mov	r2, #244
 2570 1086 5200     		lsl	r2, r2, #1
 2571 1088 BA18     		add	r2, r7, r2
 2572 108a 1360     		str	r3, [r2]
 454:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc1 = __SMLAD(x2, c0, acc1);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 73


 2573              		.loc 1 454 0
 2574 108c D023     		mov	r3, #208
 2575 108e 5B00     		lsl	r3, r3, #1
 2576 1090 FB18     		add	r3, r7, r3
 2577 1092 1968     		ldr	r1, [r3]
 2578 1094 D223     		mov	r3, #210
 2579 1096 5B00     		lsl	r3, r3, #1
 2580 1098 FB18     		add	r3, r7, r3
 2581 109a 1A68     		ldr	r2, [r3]
 2582 109c F223     		mov	r3, #242
 2583 109e 5B00     		lsl	r3, r3, #1
 2584 10a0 FB18     		add	r3, r7, r3
 2585 10a2 1B68     		ldr	r3, [r3]
 2586 10a4 F966     		str	r1, [r7, #108]
 2587 10a6 BA66     		str	r2, [r7, #104]
 2588 10a8 7B66     		str	r3, [r7, #100]
 2589              	.LBB116:
 2590              	.LBB117:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 2591              		.loc 2 952 0
 2592 10aa FB6E     		ldr	r3, [r7, #108]
 2593 10ac 1B04     		lsl	r3, r3, #16
 2594 10ae 1B14     		asr	r3, r3, #16
 2595 10b0 BA6E     		ldr	r2, [r7, #104]
 2596 10b2 1204     		lsl	r2, r2, #16
 2597 10b4 1214     		asr	r2, r2, #16
 2598 10b6 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2599              		.loc 2 953 0
 2600 10b8 FB6E     		ldr	r3, [r7, #108]
 2601 10ba 1B14     		asr	r3, r3, #16
 2602 10bc B96E     		ldr	r1, [r7, #104]
 2603 10be 0914     		asr	r1, r1, #16
 2604 10c0 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 2605              		.loc 2 952 0
 2606 10c2 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 2607              		.loc 2 954 0
 2608 10c4 7B6E     		ldr	r3, [r7, #100]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2609              		.loc 2 953 0
 2610 10c6 D318     		add	r3, r2, r3
 2611              	.LBE117:
 2612              	.LBE116:
 2613              		.loc 1 454 0
 2614 10c8 F222     		mov	r2, #242
 2615 10ca 5200     		lsl	r2, r2, #1
 2616 10cc BA18     		add	r2, r7, r2
 2617 10ce 1360     		str	r3, [r2]
 455:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc2 = __SMLADX(x2, c0, acc2);
 2618              		.loc 1 455 0
 2619 10d0 D023     		mov	r3, #208
 2620 10d2 5B00     		lsl	r3, r3, #1
 2621 10d4 FB18     		add	r3, r7, r3
 2622 10d6 1968     		ldr	r1, [r3]
 2623 10d8 D223     		mov	r3, #210
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 74


 2624 10da 5B00     		lsl	r3, r3, #1
 2625 10dc FB18     		add	r3, r7, r3
 2626 10de 1A68     		ldr	r2, [r3]
 2627 10e0 F023     		mov	r3, #240
 2628 10e2 5B00     		lsl	r3, r3, #1
 2629 10e4 FB18     		add	r3, r7, r3
 2630 10e6 1B68     		ldr	r3, [r3]
 2631 10e8 3966     		str	r1, [r7, #96]
 2632 10ea FA65     		str	r2, [r7, #92]
 2633 10ec BB65     		str	r3, [r7, #88]
 2634              	.LBB118:
 2635              	.LBB119:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2636              		.loc 2 966 0
 2637 10ee 3B6E     		ldr	r3, [r7, #96]
 2638 10f0 1B04     		lsl	r3, r3, #16
 2639 10f2 1B14     		asr	r3, r3, #16
 2640 10f4 FA6D     		ldr	r2, [r7, #92]
 2641 10f6 1214     		asr	r2, r2, #16
 2642 10f8 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2643              		.loc 2 967 0
 2644 10fa 3B6E     		ldr	r3, [r7, #96]
 2645 10fc 1B14     		asr	r3, r3, #16
 2646 10fe F96D     		ldr	r1, [r7, #92]
 2647 1100 0904     		lsl	r1, r1, #16
 2648 1102 0914     		asr	r1, r1, #16
 2649 1104 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2650              		.loc 2 966 0
 2651 1106 D218     		add	r2, r2, r3
 2652              		.loc 2 968 0
 2653 1108 BB6D     		ldr	r3, [r7, #88]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2654              		.loc 2 967 0
 2655 110a D318     		add	r3, r2, r3
 2656              	.LBE119:
 2657              	.LBE118:
 2658              		.loc 1 455 0
 2659 110c F022     		mov	r2, #240
 2660 110e 5200     		lsl	r2, r2, #1
 2661 1110 BA18     		add	r2, r7, r2
 2662 1112 1360     		str	r3, [r2]
 456:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           acc3 = __SMLADX(x3, c0, acc3);
 2663              		.loc 1 456 0
 2664 1114 CE23     		mov	r3, #206
 2665 1116 5B00     		lsl	r3, r3, #1
 2666 1118 FB18     		add	r3, r7, r3
 2667 111a 1968     		ldr	r1, [r3]
 2668 111c D223     		mov	r3, #210
 2669 111e 5B00     		lsl	r3, r3, #1
 2670 1120 FB18     		add	r3, r7, r3
 2671 1122 1A68     		ldr	r2, [r3]
 2672 1124 EE23     		mov	r3, #238
 2673 1126 5B00     		lsl	r3, r3, #1
 2674 1128 FB18     		add	r3, r7, r3
 2675 112a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 75


 2676 112c 7965     		str	r1, [r7, #84]
 2677 112e 3A65     		str	r2, [r7, #80]
 2678 1130 FB64     		str	r3, [r7, #76]
 2679              	.LBB120:
 2680              	.LBB121:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2681              		.loc 2 966 0
 2682 1132 7B6D     		ldr	r3, [r7, #84]
 2683 1134 1B04     		lsl	r3, r3, #16
 2684 1136 1B14     		asr	r3, r3, #16
 2685 1138 3A6D     		ldr	r2, [r7, #80]
 2686 113a 1214     		asr	r2, r2, #16
 2687 113c 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2688              		.loc 2 967 0
 2689 113e 7B6D     		ldr	r3, [r7, #84]
 2690 1140 1B14     		asr	r3, r3, #16
 2691 1142 396D     		ldr	r1, [r7, #80]
 2692 1144 0904     		lsl	r1, r1, #16
 2693 1146 0914     		asr	r1, r1, #16
 2694 1148 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 2695              		.loc 2 966 0
 2696 114a D218     		add	r2, r2, r3
 2697              		.loc 2 968 0
 2698 114c FB6C     		ldr	r3, [r7, #76]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 2699              		.loc 2 967 0
 2700 114e D318     		add	r3, r2, r3
 2701              	.LBE121:
 2702              	.LBE120:
 2703              		.loc 1 456 0
 2704 1150 EE22     		mov	r2, #238
 2705 1152 5200     		lsl	r2, r2, #1
 2706 1154 BA18     		add	r2, r7, r2
 2707 1156 1360     		str	r3, [r2]
 2708              	.L53:
 457:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         }
 458:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 459:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Store the results in the accumulators in the destination buffer. */
 460:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 461:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 462:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         *__SIMD32(pOut)++ = __PKHBT(acc0 >> 15, acc1 >> 15, 16);
 2709              		.loc 1 462 0
 2710 1158 1823     		mov	r3, #24
 2711 115a FB18     		add	r3, r7, r3
 2712 115c 1A68     		ldr	r2, [r3]
 2713 115e 111D     		add	r1, r2, #4
 2714 1160 1960     		str	r1, [r3]
 2715 1162 F423     		mov	r3, #244
 2716 1164 5B00     		lsl	r3, r3, #1
 2717 1166 FB18     		add	r3, r7, r3
 2718 1168 1B68     		ldr	r3, [r3]
 2719 116a DB13     		asr	r3, r3, #15
 2720 116c 1B04     		lsl	r3, r3, #16
 2721 116e 190C     		lsr	r1, r3, #16
 2722 1170 F223     		mov	r3, #242
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 76


 2723 1172 5B00     		lsl	r3, r3, #1
 2724 1174 FB18     		add	r3, r7, r3
 2725 1176 1B68     		ldr	r3, [r3]
 2726 1178 DB13     		asr	r3, r3, #15
 2727 117a 1B04     		lsl	r3, r3, #16
 2728 117c 0B43     		orr	r3, r1
 2729 117e 1360     		str	r3, [r2]
 463:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         *__SIMD32(pOut)++ = __PKHBT(acc2 >> 15, acc3 >> 15, 16);
 2730              		.loc 1 463 0
 2731 1180 1823     		mov	r3, #24
 2732 1182 FB18     		add	r3, r7, r3
 2733 1184 1A68     		ldr	r2, [r3]
 2734 1186 111D     		add	r1, r2, #4
 2735 1188 1960     		str	r1, [r3]
 2736 118a F023     		mov	r3, #240
 2737 118c 5B00     		lsl	r3, r3, #1
 2738 118e FB18     		add	r3, r7, r3
 2739 1190 1B68     		ldr	r3, [r3]
 2740 1192 DB13     		asr	r3, r3, #15
 2741 1194 1B04     		lsl	r3, r3, #16
 2742 1196 190C     		lsr	r1, r3, #16
 2743 1198 EE23     		mov	r3, #238
 2744 119a 5B00     		lsl	r3, r3, #1
 2745 119c FB18     		add	r3, r7, r3
 2746 119e 1B68     		ldr	r3, [r3]
 2747 11a0 DB13     		asr	r3, r3, #15
 2748 11a2 1B04     		lsl	r3, r3, #16
 2749 11a4 0B43     		orr	r3, r1
 2750 11a6 1360     		str	r3, [r2]
 464:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 465:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
 466:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 467:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         *__SIMD32(pOut)++ = __PKHBT(acc1 >> 15, acc0 >> 15, 16);
 468:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         *__SIMD32(pOut)++ = __PKHBT(acc3 >> 15, acc2 >> 15, 16);
 469:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 470:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif /*      #ifndef  ARM_MATH_BIG_ENDIAN    */
 471:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 472:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Increment the pointer pIn1 index, count by 4 */
 473:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         count += 4u;
 2751              		.loc 1 473 0
 2752 11a8 E023     		mov	r3, #224
 2753 11aa 5B00     		lsl	r3, r3, #1
 2754 11ac FB18     		add	r3, r7, r3
 2755 11ae 1B68     		ldr	r3, [r3]
 2756 11b0 0433     		add	r3, r3, #4
 2757 11b2 E022     		mov	r2, #224
 2758 11b4 5200     		lsl	r2, r2, #1
 2759 11b6 BA18     		add	r2, r7, r2
 2760 11b8 1360     		str	r3, [r2]
 474:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 475:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 476:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         px = pIn1 + count;
 2761              		.loc 1 476 0
 2762 11ba E023     		mov	r3, #224
 2763 11bc 5B00     		lsl	r3, r3, #1
 2764 11be FB18     		add	r3, r7, r3
 2765 11c0 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 77


 2766 11c2 5B00     		lsl	r3, r3, #1
 2767 11c4 FA22     		mov	r2, #250
 2768 11c6 5200     		lsl	r2, r2, #1
 2769 11c8 BA18     		add	r2, r7, r2
 2770 11ca 1268     		ldr	r2, [r2]
 2771 11cc D318     		add	r3, r2, r3
 2772 11ce 7B61     		str	r3, [r7, #20]
 477:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         py = pSrc2;
 2773              		.loc 1 477 0
 2774 11d0 EA23     		mov	r3, #234
 2775 11d2 5B00     		lsl	r3, r3, #1
 2776 11d4 FB18     		add	r3, r7, r3
 2777 11d6 1B68     		ldr	r3, [r3]
 2778 11d8 3B61     		str	r3, [r7, #16]
 478:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 479:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
 480:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         blkCnt--;
 2779              		.loc 1 480 0
 2780 11da DE23     		mov	r3, #222
 2781 11dc 5B00     		lsl	r3, r3, #1
 2782 11de FB18     		add	r3, r7, r3
 2783 11e0 1B68     		ldr	r3, [r3]
 2784 11e2 013B     		sub	r3, r3, #1
 2785 11e4 DE22     		mov	r2, #222
 2786 11e6 5200     		lsl	r2, r2, #1
 2787 11e8 BA18     		add	r2, r7, r2
 2788 11ea 1360     		str	r3, [r2]
 2789              	.L33:
 300:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 2790              		.loc 1 300 0
 2791 11ec DE23     		mov	r3, #222
 2792 11ee 5B00     		lsl	r3, r3, #1
 2793 11f0 FB18     		add	r3, r7, r3
 2794 11f2 1B68     		ldr	r3, [r3]
 2795 11f4 002B     		cmp	r3, #0
 2796 11f6 01D0     		beq	.LCB2484
 2797 11f8 FFF70CFA 		bl	.L62	@far jump
 2798              	.LCB2484:
 481:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
 482:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 483:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.
 484:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        ** No loop unrolling is used. */
 485:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blkCnt = (uint32_t) blockSize2 % 0x4u;
 2799              		.loc 1 485 0
 2800 11fc D423     		mov	r3, #212
 2801 11fe 5B00     		lsl	r3, r3, #1
 2802 1200 FB18     		add	r3, r7, r3
 2803 1202 1B68     		ldr	r3, [r3]
 2804 1204 0322     		mov	r2, #3
 2805 1206 1340     		and	r3, r2
 2806 1208 DE22     		mov	r2, #222
 2807 120a 5200     		lsl	r2, r2, #1
 2808 120c BA18     		add	r2, r7, r2
 2809 120e 1360     		str	r3, [r2]
 486:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 487:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (blkCnt > 0u)
 2810              		.loc 1 487 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 78


 2811 1210 C1E0     		b	.L63
 2812              	.L68:
 488:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 489:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Accumulator is made zero for every iteration */
 490:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum = 0;
 2813              		.loc 1 490 0
 2814 1212 0023     		mov	r3, #0
 2815 1214 F622     		mov	r2, #246
 2816 1216 5200     		lsl	r2, r2, #1
 2817 1218 BA18     		add	r2, r7, r2
 2818 121a 1360     		str	r3, [r2]
 491:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 492:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 493:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k = srcBLen >> 2u;
 2819              		.loc 1 493 0
 2820 121c 3B68     		ldr	r3, [r7]
 2821 121e 9B08     		lsr	r3, r3, #2
 2822 1220 E222     		mov	r2, #226
 2823 1222 5200     		lsl	r2, r2, #1
 2824 1224 BA18     		add	r2, r7, r2
 2825 1226 1360     		str	r3, [r2]
 494:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 495:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 496:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****          ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 497:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         while (k > 0u)
 2826              		.loc 1 497 0
 2827 1228 58E0     		b	.L64
 2828              	.L65:
 498:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         {
 499:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Perform the multiply-accumulates */
 500:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           sum += ((q31_t) * px++ * *py--);
 2829              		.loc 1 500 0
 2830 122a 7B69     		ldr	r3, [r7, #20]
 2831 122c 9A1C     		add	r2, r3, #2
 2832 122e 7A61     		str	r2, [r7, #20]
 2833 1230 1B88     		ldrh	r3, [r3]
 2834 1232 1AB2     		sxth	r2, r3
 2835 1234 3B69     		ldr	r3, [r7, #16]
 2836 1236 991E     		sub	r1, r3, #2
 2837 1238 3961     		str	r1, [r7, #16]
 2838 123a 1B88     		ldrh	r3, [r3]
 2839 123c 1BB2     		sxth	r3, r3
 2840 123e 5343     		mul	r3, r2
 2841 1240 F622     		mov	r2, #246
 2842 1242 5200     		lsl	r2, r2, #1
 2843 1244 BA18     		add	r2, r7, r2
 2844 1246 1268     		ldr	r2, [r2]
 2845 1248 D318     		add	r3, r2, r3
 2846 124a F622     		mov	r2, #246
 2847 124c 5200     		lsl	r2, r2, #1
 2848 124e BA18     		add	r2, r7, r2
 2849 1250 1360     		str	r3, [r2]
 501:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           sum += ((q31_t) * px++ * *py--);
 2850              		.loc 1 501 0
 2851 1252 7B69     		ldr	r3, [r7, #20]
 2852 1254 9A1C     		add	r2, r3, #2
 2853 1256 7A61     		str	r2, [r7, #20]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 79


 2854 1258 1B88     		ldrh	r3, [r3]
 2855 125a 1AB2     		sxth	r2, r3
 2856 125c 3B69     		ldr	r3, [r7, #16]
 2857 125e 991E     		sub	r1, r3, #2
 2858 1260 3961     		str	r1, [r7, #16]
 2859 1262 1B88     		ldrh	r3, [r3]
 2860 1264 1BB2     		sxth	r3, r3
 2861 1266 5343     		mul	r3, r2
 2862 1268 F622     		mov	r2, #246
 2863 126a 5200     		lsl	r2, r2, #1
 2864 126c BA18     		add	r2, r7, r2
 2865 126e 1268     		ldr	r2, [r2]
 2866 1270 D318     		add	r3, r2, r3
 2867 1272 F622     		mov	r2, #246
 2868 1274 5200     		lsl	r2, r2, #1
 2869 1276 BA18     		add	r2, r7, r2
 2870 1278 1360     		str	r3, [r2]
 502:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           sum += ((q31_t) * px++ * *py--);
 2871              		.loc 1 502 0
 2872 127a 7B69     		ldr	r3, [r7, #20]
 2873 127c 9A1C     		add	r2, r3, #2
 2874 127e 7A61     		str	r2, [r7, #20]
 2875 1280 1B88     		ldrh	r3, [r3]
 2876 1282 1AB2     		sxth	r2, r3
 2877 1284 3B69     		ldr	r3, [r7, #16]
 2878 1286 991E     		sub	r1, r3, #2
 2879 1288 3961     		str	r1, [r7, #16]
 2880 128a 1B88     		ldrh	r3, [r3]
 2881 128c 1BB2     		sxth	r3, r3
 2882 128e 5343     		mul	r3, r2
 2883 1290 F622     		mov	r2, #246
 2884 1292 5200     		lsl	r2, r2, #1
 2885 1294 BA18     		add	r2, r7, r2
 2886 1296 1268     		ldr	r2, [r2]
 2887 1298 D318     		add	r3, r2, r3
 2888 129a F622     		mov	r2, #246
 2889 129c 5200     		lsl	r2, r2, #1
 2890 129e BA18     		add	r2, r7, r2
 2891 12a0 1360     		str	r3, [r2]
 503:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           sum += ((q31_t) * px++ * *py--);
 2892              		.loc 1 503 0
 2893 12a2 7B69     		ldr	r3, [r7, #20]
 2894 12a4 9A1C     		add	r2, r3, #2
 2895 12a6 7A61     		str	r2, [r7, #20]
 2896 12a8 1B88     		ldrh	r3, [r3]
 2897 12aa 1AB2     		sxth	r2, r3
 2898 12ac 3B69     		ldr	r3, [r7, #16]
 2899 12ae 991E     		sub	r1, r3, #2
 2900 12b0 3961     		str	r1, [r7, #16]
 2901 12b2 1B88     		ldrh	r3, [r3]
 2902 12b4 1BB2     		sxth	r3, r3
 2903 12b6 5343     		mul	r3, r2
 2904 12b8 F622     		mov	r2, #246
 2905 12ba 5200     		lsl	r2, r2, #1
 2906 12bc BA18     		add	r2, r7, r2
 2907 12be 1268     		ldr	r2, [r2]
 2908 12c0 D318     		add	r3, r2, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 80


 2909 12c2 F622     		mov	r2, #246
 2910 12c4 5200     		lsl	r2, r2, #1
 2911 12c6 BA18     		add	r2, r7, r2
 2912 12c8 1360     		str	r3, [r2]
 504:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 505:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Decrement the loop counter */
 506:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           k--;
 2913              		.loc 1 506 0
 2914 12ca E223     		mov	r3, #226
 2915 12cc 5B00     		lsl	r3, r3, #1
 2916 12ce FB18     		add	r3, r7, r3
 2917 12d0 1B68     		ldr	r3, [r3]
 2918 12d2 013B     		sub	r3, r3, #1
 2919 12d4 E222     		mov	r2, #226
 2920 12d6 5200     		lsl	r2, r2, #1
 2921 12d8 BA18     		add	r2, r7, r2
 2922 12da 1360     		str	r3, [r2]
 2923              	.L64:
 497:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         {
 2924              		.loc 1 497 0
 2925 12dc E223     		mov	r3, #226
 2926 12de 5B00     		lsl	r3, r3, #1
 2927 12e0 FB18     		add	r3, r7, r3
 2928 12e2 1B68     		ldr	r3, [r3]
 2929 12e4 002B     		cmp	r3, #0
 2930 12e6 A0D1     		bne	.L65
 507:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         }
 508:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 509:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
 510:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****          ** No loop unrolling is used. */
 511:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k = srcBLen % 0x4u;
 2931              		.loc 1 511 0
 2932 12e8 3B68     		ldr	r3, [r7]
 2933 12ea 0322     		mov	r2, #3
 2934 12ec 1340     		and	r3, r2
 2935 12ee E222     		mov	r2, #226
 2936 12f0 5200     		lsl	r2, r2, #1
 2937 12f2 BA18     		add	r2, r7, r2
 2938 12f4 1360     		str	r3, [r2]
 512:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 513:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         while (k > 0u)
 2939              		.loc 1 513 0
 2940 12f6 1CE0     		b	.L66
 2941              	.L67:
 514:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         {
 515:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Perform the multiply-accumulates */
 516:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           sum += ((q31_t) * px++ * *py--);
 2942              		.loc 1 516 0
 2943 12f8 7B69     		ldr	r3, [r7, #20]
 2944 12fa 9A1C     		add	r2, r3, #2
 2945 12fc 7A61     		str	r2, [r7, #20]
 2946 12fe 1B88     		ldrh	r3, [r3]
 2947 1300 1AB2     		sxth	r2, r3
 2948 1302 3B69     		ldr	r3, [r7, #16]
 2949 1304 991E     		sub	r1, r3, #2
 2950 1306 3961     		str	r1, [r7, #16]
 2951 1308 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 81


 2952 130a 1BB2     		sxth	r3, r3
 2953 130c 5343     		mul	r3, r2
 2954 130e F622     		mov	r2, #246
 2955 1310 5200     		lsl	r2, r2, #1
 2956 1312 BA18     		add	r2, r7, r2
 2957 1314 1268     		ldr	r2, [r2]
 2958 1316 D318     		add	r3, r2, r3
 2959 1318 F622     		mov	r2, #246
 2960 131a 5200     		lsl	r2, r2, #1
 2961 131c BA18     		add	r2, r7, r2
 2962 131e 1360     		str	r3, [r2]
 517:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 518:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Decrement the loop counter */
 519:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           k--;
 2963              		.loc 1 519 0
 2964 1320 E223     		mov	r3, #226
 2965 1322 5B00     		lsl	r3, r3, #1
 2966 1324 FB18     		add	r3, r7, r3
 2967 1326 1B68     		ldr	r3, [r3]
 2968 1328 013B     		sub	r3, r3, #1
 2969 132a E222     		mov	r2, #226
 2970 132c 5200     		lsl	r2, r2, #1
 2971 132e BA18     		add	r2, r7, r2
 2972 1330 1360     		str	r3, [r2]
 2973              	.L66:
 513:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         {
 2974              		.loc 1 513 0
 2975 1332 E223     		mov	r3, #226
 2976 1334 5B00     		lsl	r3, r3, #1
 2977 1336 FB18     		add	r3, r7, r3
 2978 1338 1B68     		ldr	r3, [r3]
 2979 133a 002B     		cmp	r3, #0
 2980 133c DCD1     		bne	.L67
 520:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         }
 521:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 522:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Store the result in the accumulator in the destination buffer. */
 523:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         *pOut++ = (q15_t) (sum >> 15);
 2981              		.loc 1 523 0
 2982 133e BB69     		ldr	r3, [r7, #24]
 2983 1340 9A1C     		add	r2, r3, #2
 2984 1342 BA61     		str	r2, [r7, #24]
 2985 1344 F622     		mov	r2, #246
 2986 1346 5200     		lsl	r2, r2, #1
 2987 1348 BA18     		add	r2, r7, r2
 2988 134a 1268     		ldr	r2, [r2]
 2989 134c D213     		asr	r2, r2, #15
 2990 134e 92B2     		uxth	r2, r2
 2991 1350 1A80     		strh	r2, [r3]
 524:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 525:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Increment the pointer pIn1 index, count by 1 */
 526:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         count++;
 2992              		.loc 1 526 0
 2993 1352 E023     		mov	r3, #224
 2994 1354 5B00     		lsl	r3, r3, #1
 2995 1356 FB18     		add	r3, r7, r3
 2996 1358 1B68     		ldr	r3, [r3]
 2997 135a 0133     		add	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 82


 2998 135c E022     		mov	r2, #224
 2999 135e 5200     		lsl	r2, r2, #1
 3000 1360 BA18     		add	r2, r7, r2
 3001 1362 1360     		str	r3, [r2]
 527:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 528:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 529:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         px = pIn1 + count;
 3002              		.loc 1 529 0
 3003 1364 E023     		mov	r3, #224
 3004 1366 5B00     		lsl	r3, r3, #1
 3005 1368 FB18     		add	r3, r7, r3
 3006 136a 1B68     		ldr	r3, [r3]
 3007 136c 5B00     		lsl	r3, r3, #1
 3008 136e FA22     		mov	r2, #250
 3009 1370 5200     		lsl	r2, r2, #1
 3010 1372 BA18     		add	r2, r7, r2
 3011 1374 1268     		ldr	r2, [r2]
 3012 1376 D318     		add	r3, r2, r3
 3013 1378 7B61     		str	r3, [r7, #20]
 530:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         py = pSrc2;
 3014              		.loc 1 530 0
 3015 137a EA23     		mov	r3, #234
 3016 137c 5B00     		lsl	r3, r3, #1
 3017 137e FB18     		add	r3, r7, r3
 3018 1380 1B68     		ldr	r3, [r3]
 3019 1382 3B61     		str	r3, [r7, #16]
 531:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 532:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
 533:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         blkCnt--;
 3020              		.loc 1 533 0
 3021 1384 DE23     		mov	r3, #222
 3022 1386 5B00     		lsl	r3, r3, #1
 3023 1388 FB18     		add	r3, r7, r3
 3024 138a 1B68     		ldr	r3, [r3]
 3025 138c 013B     		sub	r3, r3, #1
 3026 138e DE22     		mov	r2, #222
 3027 1390 5200     		lsl	r2, r2, #1
 3028 1392 BA18     		add	r2, r7, r2
 3029 1394 1360     		str	r3, [r2]
 3030              	.L63:
 487:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 3031              		.loc 1 487 0
 3032 1396 DE23     		mov	r3, #222
 3033 1398 5B00     		lsl	r3, r3, #1
 3034 139a FB18     		add	r3, r7, r3
 3035 139c 1B68     		ldr	r3, [r3]
 3036 139e 002B     		cmp	r3, #0
 3037 13a0 00D0     		beq	.LCB2710
 3038 13a2 36E7     		b	.L68	@long jump
 3039              	.LCB2710:
 3040 13a4 68E0     		b	.L69
 3041              	.L32:
 534:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
 535:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 536:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     else
 537:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 538:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* If the srcBLen is not a multiple of 4,
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 83


 539:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        * the blockSize2 loop cannot be unrolled by 4 */
 540:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blkCnt = (uint32_t) blockSize2;
 3042              		.loc 1 540 0
 3043 13a6 D423     		mov	r3, #212
 3044 13a8 5B00     		lsl	r3, r3, #1
 3045 13aa FB18     		add	r3, r7, r3
 3046 13ac 1B68     		ldr	r3, [r3]
 3047 13ae DE22     		mov	r2, #222
 3048 13b0 5200     		lsl	r2, r2, #1
 3049 13b2 BA18     		add	r2, r7, r2
 3050 13b4 1360     		str	r3, [r2]
 541:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 542:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (blkCnt > 0u)
 3051              		.loc 1 542 0
 3052 13b6 59E0     		b	.L70
 3053              	.L73:
 543:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 544:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Accumulator is made zero for every iteration */
 545:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum = 0;
 3054              		.loc 1 545 0
 3055 13b8 0023     		mov	r3, #0
 3056 13ba F622     		mov	r2, #246
 3057 13bc 5200     		lsl	r2, r2, #1
 3058 13be BA18     		add	r2, r7, r2
 3059 13c0 1360     		str	r3, [r2]
 546:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 547:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* srcBLen number of MACS should be performed */
 548:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k = srcBLen;
 3060              		.loc 1 548 0
 3061 13c2 3B68     		ldr	r3, [r7]
 3062 13c4 E222     		mov	r2, #226
 3063 13c6 5200     		lsl	r2, r2, #1
 3064 13c8 BA18     		add	r2, r7, r2
 3065 13ca 1360     		str	r3, [r2]
 549:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 550:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         while (k > 0u)
 3066              		.loc 1 550 0
 3067 13cc 1CE0     		b	.L71
 3068              	.L72:
 551:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         {
 552:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Perform the multiply-accumulate */
 553:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           sum += ((q31_t) * px++ * *py--);
 3069              		.loc 1 553 0
 3070 13ce 7B69     		ldr	r3, [r7, #20]
 3071 13d0 9A1C     		add	r2, r3, #2
 3072 13d2 7A61     		str	r2, [r7, #20]
 3073 13d4 1B88     		ldrh	r3, [r3]
 3074 13d6 1AB2     		sxth	r2, r3
 3075 13d8 3B69     		ldr	r3, [r7, #16]
 3076 13da 991E     		sub	r1, r3, #2
 3077 13dc 3961     		str	r1, [r7, #16]
 3078 13de 1B88     		ldrh	r3, [r3]
 3079 13e0 1BB2     		sxth	r3, r3
 3080 13e2 5343     		mul	r3, r2
 3081 13e4 F622     		mov	r2, #246
 3082 13e6 5200     		lsl	r2, r2, #1
 3083 13e8 BA18     		add	r2, r7, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 84


 3084 13ea 1268     		ldr	r2, [r2]
 3085 13ec D318     		add	r3, r2, r3
 3086 13ee F622     		mov	r2, #246
 3087 13f0 5200     		lsl	r2, r2, #1
 3088 13f2 BA18     		add	r2, r7, r2
 3089 13f4 1360     		str	r3, [r2]
 554:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 555:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Decrement the loop counter */
 556:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           k--;
 3090              		.loc 1 556 0
 3091 13f6 E223     		mov	r3, #226
 3092 13f8 5B00     		lsl	r3, r3, #1
 3093 13fa FB18     		add	r3, r7, r3
 3094 13fc 1B68     		ldr	r3, [r3]
 3095 13fe 013B     		sub	r3, r3, #1
 3096 1400 E222     		mov	r2, #226
 3097 1402 5200     		lsl	r2, r2, #1
 3098 1404 BA18     		add	r2, r7, r2
 3099 1406 1360     		str	r3, [r2]
 3100              	.L71:
 550:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         {
 3101              		.loc 1 550 0
 3102 1408 E223     		mov	r3, #226
 3103 140a 5B00     		lsl	r3, r3, #1
 3104 140c FB18     		add	r3, r7, r3
 3105 140e 1B68     		ldr	r3, [r3]
 3106 1410 002B     		cmp	r3, #0
 3107 1412 DCD1     		bne	.L72
 557:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         }
 558:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 559:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Store the result in the accumulator in the destination buffer. */
 560:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         *pOut++ = (q15_t) (sum >> 15);
 3108              		.loc 1 560 0
 3109 1414 BB69     		ldr	r3, [r7, #24]
 3110 1416 9A1C     		add	r2, r3, #2
 3111 1418 BA61     		str	r2, [r7, #24]
 3112 141a F622     		mov	r2, #246
 3113 141c 5200     		lsl	r2, r2, #1
 3114 141e BA18     		add	r2, r7, r2
 3115 1420 1268     		ldr	r2, [r2]
 3116 1422 D213     		asr	r2, r2, #15
 3117 1424 92B2     		uxth	r2, r2
 3118 1426 1A80     		strh	r2, [r3]
 561:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 562:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Increment the MAC count */
 563:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         count++;
 3119              		.loc 1 563 0
 3120 1428 E023     		mov	r3, #224
 3121 142a 5B00     		lsl	r3, r3, #1
 3122 142c FB18     		add	r3, r7, r3
 3123 142e 1B68     		ldr	r3, [r3]
 3124 1430 0133     		add	r3, r3, #1
 3125 1432 E022     		mov	r2, #224
 3126 1434 5200     		lsl	r2, r2, #1
 3127 1436 BA18     		add	r2, r7, r2
 3128 1438 1360     		str	r3, [r2]
 564:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 85


 565:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 566:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         px = pIn1 + count;
 3129              		.loc 1 566 0
 3130 143a E023     		mov	r3, #224
 3131 143c 5B00     		lsl	r3, r3, #1
 3132 143e FB18     		add	r3, r7, r3
 3133 1440 1B68     		ldr	r3, [r3]
 3134 1442 5B00     		lsl	r3, r3, #1
 3135 1444 FA22     		mov	r2, #250
 3136 1446 5200     		lsl	r2, r2, #1
 3137 1448 BA18     		add	r2, r7, r2
 3138 144a 1268     		ldr	r2, [r2]
 3139 144c D318     		add	r3, r2, r3
 3140 144e 7B61     		str	r3, [r7, #20]
 567:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         py = pSrc2;
 3141              		.loc 1 567 0
 3142 1450 EA23     		mov	r3, #234
 3143 1452 5B00     		lsl	r3, r3, #1
 3144 1454 FB18     		add	r3, r7, r3
 3145 1456 1B68     		ldr	r3, [r3]
 3146 1458 3B61     		str	r3, [r7, #16]
 568:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 569:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
 570:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         blkCnt--;
 3147              		.loc 1 570 0
 3148 145a DE23     		mov	r3, #222
 3149 145c 5B00     		lsl	r3, r3, #1
 3150 145e FB18     		add	r3, r7, r3
 3151 1460 1B68     		ldr	r3, [r3]
 3152 1462 013B     		sub	r3, r3, #1
 3153 1464 DE22     		mov	r2, #222
 3154 1466 5200     		lsl	r2, r2, #1
 3155 1468 BA18     		add	r2, r7, r2
 3156 146a 1360     		str	r3, [r2]
 3157              	.L70:
 542:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 3158              		.loc 1 542 0
 3159 146c DE23     		mov	r3, #222
 3160 146e 5B00     		lsl	r3, r3, #1
 3161 1470 FB18     		add	r3, r7, r3
 3162 1472 1B68     		ldr	r3, [r3]
 3163 1474 002B     		cmp	r3, #0
 3164 1476 9FD1     		bne	.L73
 3165              	.L69:
 571:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
 572:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 573:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 574:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 575:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* --------------------------
 576:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * Initializations of stage3
 577:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * -------------------------*/
 578:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 579:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[src
 580:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[src
 581:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * ....
 582:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]
 583:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum +=  x[srcALen-1] * y[srcBLen-1]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 86


 584:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      */
 585:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 586:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* In this stage the MAC operations are decreased by 1 for every iteration.
 587:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        The count variable holds the number of MAC operations performed */
 588:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     count = srcBLen - 1u;
 3166              		.loc 1 588 0
 3167 1478 3B68     		ldr	r3, [r7]
 3168 147a 013B     		sub	r3, r3, #1
 3169 147c E022     		mov	r2, #224
 3170 147e 5200     		lsl	r2, r2, #1
 3171 1480 BA18     		add	r2, r7, r2
 3172 1482 1360     		str	r3, [r2]
 589:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 590:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Working pointer of inputA */
 591:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
 3173              		.loc 1 591 0
 3174 1484 BA68     		ldr	r2, [r7, #8]
 3175 1486 3B68     		ldr	r3, [r7]
 3176 1488 D31A     		sub	r3, r2, r3
 3177 148a 0133     		add	r3, r3, #1
 3178 148c 5B00     		lsl	r3, r3, #1
 3179 148e FA22     		mov	r2, #250
 3180 1490 5200     		lsl	r2, r2, #1
 3181 1492 BA18     		add	r2, r7, r2
 3182 1494 1268     		ldr	r2, [r2]
 3183 1496 D318     		add	r3, r2, r3
 3184 1498 EC22     		mov	r2, #236
 3185 149a 5200     		lsl	r2, r2, #1
 3186 149c BA18     		add	r2, r7, r2
 3187 149e 1360     		str	r3, [r2]
 592:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     px = pSrc1;
 3188              		.loc 1 592 0
 3189 14a0 EC23     		mov	r3, #236
 3190 14a2 5B00     		lsl	r3, r3, #1
 3191 14a4 FB18     		add	r3, r7, r3
 3192 14a6 1B68     		ldr	r3, [r3]
 3193 14a8 7B61     		str	r3, [r7, #20]
 593:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 594:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Working pointer of inputB */
 595:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     pSrc2 = pIn2 + (srcBLen - 1u);
 3194              		.loc 1 595 0
 3195 14aa 3B68     		ldr	r3, [r7]
 3196 14ac D04A     		ldr	r2, .L92
 3197 14ae 9446     		mov	ip, r2
 3198 14b0 6344     		add	r3, r3, ip
 3199 14b2 5B00     		lsl	r3, r3, #1
 3200 14b4 F822     		mov	r2, #248
 3201 14b6 5200     		lsl	r2, r2, #1
 3202 14b8 BA18     		add	r2, r7, r2
 3203 14ba 1268     		ldr	r2, [r2]
 3204 14bc D318     		add	r3, r2, r3
 3205 14be EA22     		mov	r2, #234
 3206 14c0 5200     		lsl	r2, r2, #1
 3207 14c2 BA18     		add	r2, r7, r2
 3208 14c4 1360     		str	r3, [r2]
 596:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     pIn2 = pSrc2 - 1u;
 3209              		.loc 1 596 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 87


 3210 14c6 EA23     		mov	r3, #234
 3211 14c8 5B00     		lsl	r3, r3, #1
 3212 14ca FB18     		add	r3, r7, r3
 3213 14cc 1B68     		ldr	r3, [r3]
 3214 14ce 023B     		sub	r3, r3, #2
 3215 14d0 F822     		mov	r2, #248
 3216 14d2 5200     		lsl	r2, r2, #1
 3217 14d4 BA18     		add	r2, r7, r2
 3218 14d6 1360     		str	r3, [r2]
 597:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     py = pIn2;
 3219              		.loc 1 597 0
 3220 14d8 F823     		mov	r3, #248
 3221 14da 5B00     		lsl	r3, r3, #1
 3222 14dc FB18     		add	r3, r7, r3
 3223 14de 1B68     		ldr	r3, [r3]
 3224 14e0 3B61     		str	r3, [r7, #16]
 598:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 599:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* -------------------
 600:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * Stage3 process
 601:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * ------------------*/
 602:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 603:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* For loop unrolling by 4, this stage is divided into two. */
 604:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* First part of this stage computes the MAC operations greater than 4 */
 605:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Second part of this stage computes the MAC operations less than or equal to 4 */
 606:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 607:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The first part of the stage starts here */
 608:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     j = count >> 2u;
 3225              		.loc 1 608 0
 3226 14e2 E023     		mov	r3, #224
 3227 14e4 5B00     		lsl	r3, r3, #1
 3228 14e6 FB18     		add	r3, r7, r3
 3229 14e8 1B68     		ldr	r3, [r3]
 3230 14ea 9B08     		lsr	r3, r3, #2
 3231 14ec E422     		mov	r2, #228
 3232 14ee 5200     		lsl	r2, r2, #1
 3233 14f0 BA18     		add	r2, r7, r2
 3234 14f2 1360     		str	r3, [r2]
 609:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 610:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     while ((j > 0u) && (blockSize3 > 0))
 3235              		.loc 1 610 0
 3236 14f4 E6E0     		b	.L74
 3237              	.L83:
 611:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 612:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Accumulator is made zero for every iteration */
 613:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       sum = 0;
 3238              		.loc 1 613 0
 3239 14f6 0023     		mov	r3, #0
 3240 14f8 F622     		mov	r2, #246
 3241 14fa 5200     		lsl	r2, r2, #1
 3242 14fc BA18     		add	r2, r7, r2
 3243 14fe 1360     		str	r3, [r2]
 614:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 615:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 616:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = count >> 2u;
 3244              		.loc 1 616 0
 3245 1500 E023     		mov	r3, #224
 3246 1502 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 88


 3247 1504 FB18     		add	r3, r7, r3
 3248 1506 1B68     		ldr	r3, [r3]
 3249 1508 9B08     		lsr	r3, r3, #2
 3250 150a E222     		mov	r2, #226
 3251 150c 5200     		lsl	r2, r2, #1
 3252 150e BA18     		add	r2, r7, r2
 3253 1510 1360     		str	r3, [r2]
 617:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 618:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 619:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 620:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (k > 0u)
 3254              		.loc 1 620 0
 3255 1512 58E0     		b	.L75
 3256              	.L78:
 621:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 622:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* x[srcALen - srcBLen + 1], x[srcALen - srcBLen + 2] are multiplied
 623:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****          * with y[srcBLen - 1], y[srcBLen - 2] respectively */
 624:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum = __SMLADX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 3257              		.loc 1 624 0
 3258 1514 1423     		mov	r3, #20
 3259 1516 FB18     		add	r3, r7, r3
 3260 1518 1A68     		ldr	r2, [r3]
 3261 151a 111D     		add	r1, r2, #4
 3262 151c 1960     		str	r1, [r3]
 3263 151e 1368     		ldr	r3, [r2]
 3264 1520 181C     		mov	r0, r3
 3265 1522 1023     		mov	r3, #16
 3266 1524 FB18     		add	r3, r7, r3
 3267 1526 1A68     		ldr	r2, [r3]
 3268 1528 111F     		sub	r1, r2, #4
 3269 152a 1960     		str	r1, [r3]
 3270 152c 1368     		ldr	r3, [r2]
 3271 152e 1A1C     		mov	r2, r3
 3272 1530 F623     		mov	r3, #246
 3273 1532 5B00     		lsl	r3, r3, #1
 3274 1534 FB18     		add	r3, r7, r3
 3275 1536 1B68     		ldr	r3, [r3]
 3276 1538 B864     		str	r0, [r7, #72]
 3277 153a 7A64     		str	r2, [r7, #68]
 3278 153c 3B64     		str	r3, [r7, #64]
 3279              	.LBB122:
 3280              	.LBB123:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 3281              		.loc 2 966 0
 3282 153e BB6C     		ldr	r3, [r7, #72]
 3283 1540 1B04     		lsl	r3, r3, #16
 3284 1542 1B14     		asr	r3, r3, #16
 3285 1544 7A6C     		ldr	r2, [r7, #68]
 3286 1546 1214     		asr	r2, r2, #16
 3287 1548 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3288              		.loc 2 967 0
 3289 154a BB6C     		ldr	r3, [r7, #72]
 3290 154c 1B14     		asr	r3, r3, #16
 3291 154e 796C     		ldr	r1, [r7, #68]
 3292 1550 0904     		lsl	r1, r1, #16
 3293 1552 0914     		asr	r1, r1, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 89


 3294 1554 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 3295              		.loc 2 966 0
 3296 1556 D218     		add	r2, r2, r3
 3297              		.loc 2 968 0
 3298 1558 3B6C     		ldr	r3, [r7, #64]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3299              		.loc 2 967 0
 3300 155a D318     		add	r3, r2, r3
 3301              	.LBE123:
 3302              	.LBE122:
 3303              		.loc 1 624 0
 3304 155c F622     		mov	r2, #246
 3305 155e 5200     		lsl	r2, r2, #1
 3306 1560 BA18     		add	r2, r7, r2
 3307 1562 1360     		str	r3, [r2]
 625:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* x[srcALen - srcBLen + 3], x[srcALen - srcBLen + 4] are multiplied
 626:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****          * with y[srcBLen - 3], y[srcBLen - 4] respectively */
 627:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum = __SMLADX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 3308              		.loc 1 627 0
 3309 1564 1423     		mov	r3, #20
 3310 1566 FB18     		add	r3, r7, r3
 3311 1568 1A68     		ldr	r2, [r3]
 3312 156a 111D     		add	r1, r2, #4
 3313 156c 1960     		str	r1, [r3]
 3314 156e 1368     		ldr	r3, [r2]
 3315 1570 181C     		mov	r0, r3
 3316 1572 1023     		mov	r3, #16
 3317 1574 FB18     		add	r3, r7, r3
 3318 1576 1A68     		ldr	r2, [r3]
 3319 1578 111F     		sub	r1, r2, #4
 3320 157a 1960     		str	r1, [r3]
 3321 157c 1368     		ldr	r3, [r2]
 3322 157e 1A1C     		mov	r2, r3
 3323 1580 F623     		mov	r3, #246
 3324 1582 5B00     		lsl	r3, r3, #1
 3325 1584 FB18     		add	r3, r7, r3
 3326 1586 1B68     		ldr	r3, [r3]
 3327 1588 F863     		str	r0, [r7, #60]
 3328 158a BA63     		str	r2, [r7, #56]
 3329 158c 7B63     		str	r3, [r7, #52]
 3330              	.LBB124:
 3331              	.LBB125:
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 3332              		.loc 2 966 0
 3333 158e FB6B     		ldr	r3, [r7, #60]
 3334 1590 1B04     		lsl	r3, r3, #16
 3335 1592 1B14     		asr	r3, r3, #16
 3336 1594 BA6B     		ldr	r2, [r7, #56]
 3337 1596 1214     		asr	r2, r2, #16
 3338 1598 5A43     		mul	r2, r3
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3339              		.loc 2 967 0
 3340 159a FB6B     		ldr	r3, [r7, #60]
 3341 159c 1B14     		asr	r3, r3, #16
 3342 159e B96B     		ldr	r1, [r7, #56]
 3343 15a0 0904     		lsl	r1, r1, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 90


 3344 15a2 0914     		asr	r1, r1, #16
 3345 15a4 4B43     		mul	r3, r1
 966:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16)) +
 3346              		.loc 2 966 0
 3347 15a6 D218     		add	r2, r2, r3
 3348              		.loc 2 968 0
 3349 15a8 7B6B     		ldr	r3, [r7, #52]
 967:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3350              		.loc 2 967 0
 3351 15aa D318     		add	r3, r2, r3
 3352              	.LBE125:
 3353              	.LBE124:
 3354              		.loc 1 627 0
 3355 15ac F622     		mov	r2, #246
 3356 15ae 5200     		lsl	r2, r2, #1
 3357 15b0 BA18     		add	r2, r7, r2
 3358 15b2 1360     		str	r3, [r2]
 628:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 629:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
 630:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k--;
 3359              		.loc 1 630 0
 3360 15b4 E223     		mov	r3, #226
 3361 15b6 5B00     		lsl	r3, r3, #1
 3362 15b8 FB18     		add	r3, r7, r3
 3363 15ba 1B68     		ldr	r3, [r3]
 3364 15bc 013B     		sub	r3, r3, #1
 3365 15be E222     		mov	r2, #226
 3366 15c0 5200     		lsl	r2, r2, #1
 3367 15c2 BA18     		add	r2, r7, r2
 3368 15c4 1360     		str	r3, [r2]
 3369              	.L75:
 620:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 3370              		.loc 1 620 0
 3371 15c6 E223     		mov	r3, #226
 3372 15c8 5B00     		lsl	r3, r3, #1
 3373 15ca FB18     		add	r3, r7, r3
 3374 15cc 1B68     		ldr	r3, [r3]
 3375 15ce 002B     		cmp	r3, #0
 3376 15d0 A0D1     		bne	.L78
 631:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
 632:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 633:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* For the next MAC operations, the pointer py is used without SIMD
 634:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        * So, py is incremented by 1 */
 635:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       py = py + 1u;
 3377              		.loc 1 635 0
 3378 15d2 3B69     		ldr	r3, [r7, #16]
 3379 15d4 0233     		add	r3, r3, #2
 3380 15d6 3B61     		str	r3, [r7, #16]
 636:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 637:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* If the count is not a multiple of 4, compute any remaining MACs here.
 638:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        ** No loop unrolling is used. */
 639:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = count % 0x4u;
 3381              		.loc 1 639 0
 3382 15d8 E023     		mov	r3, #224
 3383 15da 5B00     		lsl	r3, r3, #1
 3384 15dc FB18     		add	r3, r7, r3
 3385 15de 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 91


 3386 15e0 0322     		mov	r2, #3
 3387 15e2 1340     		and	r3, r2
 3388 15e4 E222     		mov	r2, #226
 3389 15e6 5200     		lsl	r2, r2, #1
 3390 15e8 BA18     		add	r2, r7, r2
 3391 15ea 1360     		str	r3, [r2]
 640:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 641:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (k > 0u)
 3392              		.loc 1 641 0
 3393 15ec 2CE0     		b	.L79
 3394              	.L81:
 642:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 643:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* sum += x[srcALen - srcBLen + 5] * y[srcBLen - 5] */
 644:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum = __SMLAD(*px++, *py--, sum);
 3395              		.loc 1 644 0
 3396 15ee 7B69     		ldr	r3, [r7, #20]
 3397 15f0 9A1C     		add	r2, r3, #2
 3398 15f2 7A61     		str	r2, [r7, #20]
 3399 15f4 1B88     		ldrh	r3, [r3]
 3400 15f6 19B2     		sxth	r1, r3
 3401 15f8 3B69     		ldr	r3, [r7, #16]
 3402 15fa 9A1E     		sub	r2, r3, #2
 3403 15fc 3A61     		str	r2, [r7, #16]
 3404 15fe 1B88     		ldrh	r3, [r3]
 3405 1600 1AB2     		sxth	r2, r3
 3406 1602 F623     		mov	r3, #246
 3407 1604 5B00     		lsl	r3, r3, #1
 3408 1606 FB18     		add	r3, r7, r3
 3409 1608 1B68     		ldr	r3, [r3]
 3410 160a 3963     		str	r1, [r7, #48]
 3411 160c FA62     		str	r2, [r7, #44]
 3412 160e BB62     		str	r3, [r7, #40]
 3413              	.LBB126:
 3414              	.LBB127:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 3415              		.loc 2 952 0
 3416 1610 3B6B     		ldr	r3, [r7, #48]
 3417 1612 1B04     		lsl	r3, r3, #16
 3418 1614 1B14     		asr	r3, r3, #16
 3419 1616 FA6A     		ldr	r2, [r7, #44]
 3420 1618 1204     		lsl	r2, r2, #16
 3421 161a 1214     		asr	r2, r2, #16
 3422 161c 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3423              		.loc 2 953 0
 3424 161e 3B6B     		ldr	r3, [r7, #48]
 3425 1620 1B14     		asr	r3, r3, #16
 3426 1622 F96A     		ldr	r1, [r7, #44]
 3427 1624 0914     		asr	r1, r1, #16
 3428 1626 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 3429              		.loc 2 952 0
 3430 1628 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 3431              		.loc 2 954 0
 3432 162a BB6A     		ldr	r3, [r7, #40]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 92


 3433              		.loc 2 953 0
 3434 162c D318     		add	r3, r2, r3
 3435              	.LBE127:
 3436              	.LBE126:
 3437              		.loc 1 644 0
 3438 162e F622     		mov	r2, #246
 3439 1630 5200     		lsl	r2, r2, #1
 3440 1632 BA18     		add	r2, r7, r2
 3441 1634 1360     		str	r3, [r2]
 645:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 646:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
 647:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k--;
 3442              		.loc 1 647 0
 3443 1636 E223     		mov	r3, #226
 3444 1638 5B00     		lsl	r3, r3, #1
 3445 163a FB18     		add	r3, r7, r3
 3446 163c 1B68     		ldr	r3, [r3]
 3447 163e 013B     		sub	r3, r3, #1
 3448 1640 E222     		mov	r2, #226
 3449 1642 5200     		lsl	r2, r2, #1
 3450 1644 BA18     		add	r2, r7, r2
 3451 1646 1360     		str	r3, [r2]
 3452              	.L79:
 641:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 3453              		.loc 1 641 0
 3454 1648 E223     		mov	r3, #226
 3455 164a 5B00     		lsl	r3, r3, #1
 3456 164c FB18     		add	r3, r7, r3
 3457 164e 1B68     		ldr	r3, [r3]
 3458 1650 002B     		cmp	r3, #0
 3459 1652 CCD1     		bne	.L81
 648:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
 649:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 650:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Store the result in the accumulator in the destination buffer. */
 651:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       *pOut++ = (q15_t) (sum >> 15);
 3460              		.loc 1 651 0
 3461 1654 BB69     		ldr	r3, [r7, #24]
 3462 1656 9A1C     		add	r2, r3, #2
 3463 1658 BA61     		str	r2, [r7, #24]
 3464 165a F622     		mov	r2, #246
 3465 165c 5200     		lsl	r2, r2, #1
 3466 165e BA18     		add	r2, r7, r2
 3467 1660 1268     		ldr	r2, [r2]
 3468 1662 D213     		asr	r2, r2, #15
 3469 1664 92B2     		uxth	r2, r2
 3470 1666 1A80     		strh	r2, [r3]
 652:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 653:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 654:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       px = ++pSrc1;
 3471              		.loc 1 654 0
 3472 1668 EC23     		mov	r3, #236
 3473 166a 5B00     		lsl	r3, r3, #1
 3474 166c FB18     		add	r3, r7, r3
 3475 166e 1B68     		ldr	r3, [r3]
 3476 1670 0233     		add	r3, r3, #2
 3477 1672 EC22     		mov	r2, #236
 3478 1674 5200     		lsl	r2, r2, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 93


 3479 1676 BA18     		add	r2, r7, r2
 3480 1678 1360     		str	r3, [r2]
 3481 167a EC23     		mov	r3, #236
 3482 167c 5B00     		lsl	r3, r3, #1
 3483 167e FB18     		add	r3, r7, r3
 3484 1680 1B68     		ldr	r3, [r3]
 3485 1682 7B61     		str	r3, [r7, #20]
 655:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       py = pIn2;
 3486              		.loc 1 655 0
 3487 1684 F823     		mov	r3, #248
 3488 1686 5B00     		lsl	r3, r3, #1
 3489 1688 FB18     		add	r3, r7, r3
 3490 168a 1B68     		ldr	r3, [r3]
 3491 168c 3B61     		str	r3, [r7, #16]
 656:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 657:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the MAC count */
 658:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       count--;
 3492              		.loc 1 658 0
 3493 168e E023     		mov	r3, #224
 3494 1690 5B00     		lsl	r3, r3, #1
 3495 1692 FB18     		add	r3, r7, r3
 3496 1694 1B68     		ldr	r3, [r3]
 3497 1696 013B     		sub	r3, r3, #1
 3498 1698 E022     		mov	r2, #224
 3499 169a 5200     		lsl	r2, r2, #1
 3500 169c BA18     		add	r2, r7, r2
 3501 169e 1360     		str	r3, [r2]
 659:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 660:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the loop counter */
 661:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blockSize3--;
 3502              		.loc 1 661 0
 3503 16a0 DA23     		mov	r3, #218
 3504 16a2 5B00     		lsl	r3, r3, #1
 3505 16a4 FB18     		add	r3, r7, r3
 3506 16a6 1B68     		ldr	r3, [r3]
 3507 16a8 013B     		sub	r3, r3, #1
 3508 16aa DA22     		mov	r2, #218
 3509 16ac 5200     		lsl	r2, r2, #1
 3510 16ae BA18     		add	r2, r7, r2
 3511 16b0 1360     		str	r3, [r2]
 662:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 663:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       j--;
 3512              		.loc 1 663 0
 3513 16b2 E423     		mov	r3, #228
 3514 16b4 5B00     		lsl	r3, r3, #1
 3515 16b6 FB18     		add	r3, r7, r3
 3516 16b8 1B68     		ldr	r3, [r3]
 3517 16ba 013B     		sub	r3, r3, #1
 3518 16bc E422     		mov	r2, #228
 3519 16be 5200     		lsl	r2, r2, #1
 3520 16c0 BA18     		add	r2, r7, r2
 3521 16c2 1360     		str	r3, [r2]
 3522              	.L74:
 610:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 3523              		.loc 1 610 0
 3524 16c4 E423     		mov	r3, #228
 3525 16c6 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 94


 3526 16c8 FB18     		add	r3, r7, r3
 3527 16ca 1B68     		ldr	r3, [r3]
 3528 16cc 002B     		cmp	r3, #0
 3529 16ce 06D0     		beq	.L82
 610:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 3530              		.loc 1 610 0 is_stmt 0 discriminator 1
 3531 16d0 DA23     		mov	r3, #218
 3532 16d2 5B00     		lsl	r3, r3, #1
 3533 16d4 FB18     		add	r3, r7, r3
 3534 16d6 1B68     		ldr	r3, [r3]
 3535 16d8 002B     		cmp	r3, #0
 3536 16da 00DD     		ble	.LCB3163
 3537 16dc 0BE7     		b	.L83	@long jump
 3538              	.LCB3163:
 3539              	.L82:
 664:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 665:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 666:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The second part of the stage starts here */
 667:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* SIMD is not used for the next MAC operations,
 668:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * so pointer py is updated to read only one sample at a time */
 669:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     py = py + 1u;
 3540              		.loc 1 669 0 is_stmt 1
 3541 16de 3B69     		ldr	r3, [r7, #16]
 3542 16e0 0233     		add	r3, r3, #2
 3543 16e2 3B61     		str	r3, [r7, #16]
 670:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 671:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     while (blockSize3 > 0)
 3544              		.loc 1 671 0
 3545 16e4 6FE0     		b	.L84
 3546              	.L88:
 672:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 673:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Accumulator is made zero for every iteration */
 674:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       sum = 0;
 3547              		.loc 1 674 0
 3548 16e6 0023     		mov	r3, #0
 3549 16e8 F622     		mov	r2, #246
 3550 16ea 5200     		lsl	r2, r2, #1
 3551 16ec BA18     		add	r2, r7, r2
 3552 16ee 1360     		str	r3, [r2]
 675:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 676:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 677:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = count;
 3553              		.loc 1 677 0
 3554 16f0 E023     		mov	r3, #224
 3555 16f2 5B00     		lsl	r3, r3, #1
 3556 16f4 FB18     		add	r3, r7, r3
 3557 16f6 1B68     		ldr	r3, [r3]
 3558 16f8 E222     		mov	r2, #226
 3559 16fa 5200     		lsl	r2, r2, #1
 3560 16fc BA18     		add	r2, r7, r2
 3561 16fe 1360     		str	r3, [r2]
 678:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 679:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (k > 0u)
 3562              		.loc 1 679 0
 3563 1700 2CE0     		b	.L85
 3564              	.L87:
 680:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 95


 681:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Perform the multiply-accumulates */
 682:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* sum +=  x[srcALen-1] * y[srcBLen-1] */
 683:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum = __SMLAD(*px++, *py--, sum);
 3565              		.loc 1 683 0
 3566 1702 7B69     		ldr	r3, [r7, #20]
 3567 1704 9A1C     		add	r2, r3, #2
 3568 1706 7A61     		str	r2, [r7, #20]
 3569 1708 1B88     		ldrh	r3, [r3]
 3570 170a 19B2     		sxth	r1, r3
 3571 170c 3B69     		ldr	r3, [r7, #16]
 3572 170e 9A1E     		sub	r2, r3, #2
 3573 1710 3A61     		str	r2, [r7, #16]
 3574 1712 1B88     		ldrh	r3, [r3]
 3575 1714 1AB2     		sxth	r2, r3
 3576 1716 F623     		mov	r3, #246
 3577 1718 5B00     		lsl	r3, r3, #1
 3578 171a FB18     		add	r3, r7, r3
 3579 171c 1B68     		ldr	r3, [r3]
 3580 171e 7962     		str	r1, [r7, #36]
 3581 1720 3A62     		str	r2, [r7, #32]
 3582 1722 FB61     		str	r3, [r7, #28]
 3583              	.LBB128:
 3584              	.LBB129:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 3585              		.loc 2 952 0
 3586 1724 7B6A     		ldr	r3, [r7, #36]
 3587 1726 1B04     		lsl	r3, r3, #16
 3588 1728 1B14     		asr	r3, r3, #16
 3589 172a 3A6A     		ldr	r2, [r7, #32]
 3590 172c 1204     		lsl	r2, r2, #16
 3591 172e 1214     		asr	r2, r2, #16
 3592 1730 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3593              		.loc 2 953 0
 3594 1732 7B6A     		ldr	r3, [r7, #36]
 3595 1734 1B14     		asr	r3, r3, #16
 3596 1736 396A     		ldr	r1, [r7, #32]
 3597 1738 0914     		asr	r1, r1, #16
 3598 173a 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 3599              		.loc 2 952 0
 3600 173c D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****   }
 3601              		.loc 2 954 0
 3602 173e FB69     		ldr	r3, [r7, #28]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 3603              		.loc 2 953 0
 3604 1740 D318     		add	r3, r2, r3
 3605              	.LBE129:
 3606              	.LBE128:
 3607              		.loc 1 683 0
 3608 1742 F622     		mov	r2, #246
 3609 1744 5200     		lsl	r2, r2, #1
 3610 1746 BA18     		add	r2, r7, r2
 3611 1748 1360     		str	r3, [r2]
 684:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 685:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 96


 686:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k--;
 3612              		.loc 1 686 0
 3613 174a E223     		mov	r3, #226
 3614 174c 5B00     		lsl	r3, r3, #1
 3615 174e FB18     		add	r3, r7, r3
 3616 1750 1B68     		ldr	r3, [r3]
 3617 1752 013B     		sub	r3, r3, #1
 3618 1754 E222     		mov	r2, #226
 3619 1756 5200     		lsl	r2, r2, #1
 3620 1758 BA18     		add	r2, r7, r2
 3621 175a 1360     		str	r3, [r2]
 3622              	.L85:
 679:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 3623              		.loc 1 679 0
 3624 175c E223     		mov	r3, #226
 3625 175e 5B00     		lsl	r3, r3, #1
 3626 1760 FB18     		add	r3, r7, r3
 3627 1762 1B68     		ldr	r3, [r3]
 3628 1764 002B     		cmp	r3, #0
 3629 1766 CCD1     		bne	.L87
 687:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
 688:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 689:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Store the result in the accumulator in the destination buffer. */
 690:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       *pOut++ = (q15_t) (sum >> 15);
 3630              		.loc 1 690 0
 3631 1768 BB69     		ldr	r3, [r7, #24]
 3632 176a 9A1C     		add	r2, r3, #2
 3633 176c BA61     		str	r2, [r7, #24]
 3634 176e F622     		mov	r2, #246
 3635 1770 5200     		lsl	r2, r2, #1
 3636 1772 BA18     		add	r2, r7, r2
 3637 1774 1268     		ldr	r2, [r2]
 3638 1776 D213     		asr	r2, r2, #15
 3639 1778 92B2     		uxth	r2, r2
 3640 177a 1A80     		strh	r2, [r3]
 691:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 692:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 693:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       px = ++pSrc1;
 3641              		.loc 1 693 0
 3642 177c EC23     		mov	r3, #236
 3643 177e 5B00     		lsl	r3, r3, #1
 3644 1780 FB18     		add	r3, r7, r3
 3645 1782 1B68     		ldr	r3, [r3]
 3646 1784 0233     		add	r3, r3, #2
 3647 1786 EC22     		mov	r2, #236
 3648 1788 5200     		lsl	r2, r2, #1
 3649 178a BA18     		add	r2, r7, r2
 3650 178c 1360     		str	r3, [r2]
 3651 178e EC23     		mov	r3, #236
 3652 1790 5B00     		lsl	r3, r3, #1
 3653 1792 FB18     		add	r3, r7, r3
 3654 1794 1B68     		ldr	r3, [r3]
 3655 1796 7B61     		str	r3, [r7, #20]
 694:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       py = pSrc2;
 3656              		.loc 1 694 0
 3657 1798 EA23     		mov	r3, #234
 3658 179a 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 97


 3659 179c FB18     		add	r3, r7, r3
 3660 179e 1B68     		ldr	r3, [r3]
 3661 17a0 3B61     		str	r3, [r7, #16]
 695:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 696:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the MAC count */
 697:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       count--;
 3662              		.loc 1 697 0
 3663 17a2 E023     		mov	r3, #224
 3664 17a4 5B00     		lsl	r3, r3, #1
 3665 17a6 FB18     		add	r3, r7, r3
 3666 17a8 1B68     		ldr	r3, [r3]
 3667 17aa 013B     		sub	r3, r3, #1
 3668 17ac E022     		mov	r2, #224
 3669 17ae 5200     		lsl	r2, r2, #1
 3670 17b0 BA18     		add	r2, r7, r2
 3671 17b2 1360     		str	r3, [r2]
 698:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 699:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the loop counter */
 700:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blockSize3--;
 3672              		.loc 1 700 0
 3673 17b4 DA23     		mov	r3, #218
 3674 17b6 5B00     		lsl	r3, r3, #1
 3675 17b8 FB18     		add	r3, r7, r3
 3676 17ba 1B68     		ldr	r3, [r3]
 3677 17bc 013B     		sub	r3, r3, #1
 3678 17be DA22     		mov	r2, #218
 3679 17c0 5200     		lsl	r2, r2, #1
 3680 17c2 BA18     		add	r2, r7, r2
 3681 17c4 1360     		str	r3, [r2]
 3682              	.L84:
 671:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 3683              		.loc 1 671 0
 3684 17c6 DA23     		mov	r3, #218
 3685 17c8 5B00     		lsl	r3, r3, #1
 3686 17ca FB18     		add	r3, r7, r3
 3687 17cc 1B68     		ldr	r3, [r3]
 3688 17ce 002B     		cmp	r3, #0
 3689 17d0 89DC     		bgt	.L88
 701:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 702:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 703:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* set status as ARM_MATH_SUCCESS */
 704:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     status = ARM_MATH_SUCCESS;
 3690              		.loc 1 704 0
 3691 17d2 B423     		mov	r3, #180
 3692 17d4 FF33     		add	r3, r3, #255
 3693 17d6 FB18     		add	r3, r7, r3
 3694 17d8 0022     		mov	r2, #0
 3695 17da 1A70     		strb	r2, [r3]
 3696              	.L3:
 705:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   }
 706:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 707:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   /* Return to application */
 708:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   return (status);
 3697              		.loc 1 708 0
 3698 17dc B423     		mov	r3, #180
 3699 17de FF33     		add	r3, r3, #255
 3700 17e0 FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 98


 3701 17e2 1B78     		ldrb	r3, [r3]
 3702 17e4 5BB2     		sxtb	r3, r3
 709:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 710:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
 711:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 712:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t *pIn1;                                   /* inputA pointer               */
 713:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t *pIn2;                                   /* inputB pointer               */
 714:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t *pOut = pDst;                            /* output pointer               */
 715:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q31_t sum, acc0, acc1, acc2, acc3;             /* Accumulator                  */
 716:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t *px;                                     /* Intermediate inputA pointer  */
 717:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t *py;                                     /* Intermediate inputB pointer  */
 718:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t *pSrc1, *pSrc2;                          /* Intermediate pointers        */
 719:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q31_t x0, x1, x2, x3, c0;
 720:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   uint32_t j, k, count, check, blkCnt;
 721:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   int32_t blockSize1, blockSize2, blockSize3;    /* loop counters                 */
 722:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   arm_status status;                             /* status of Partial convolution */
 723:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   q15_t a, b;
 724:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 725:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   /* Check for range of output samples to be calculated */
 726:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   if ((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
 727:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   {
 728:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Set status as ARM_MATH_ARGUMENT_ERROR */
 729:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     status = ARM_MATH_ARGUMENT_ERROR;
 730:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   }
 731:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   else
 732:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   {
 733:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 734:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The algorithm implementation is based on the lengths of the inputs. */
 735:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* srcB is always made to slide across srcA. */
 736:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* So srcBLen is always considered as shorter or equal to srcALen */
 737:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     if (srcALen >=srcBLen)
 738:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 739:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Initialization of inputA pointer */
 740:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       pIn1 = pSrcA;
 741:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 742:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Initialization of inputB pointer */
 743:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       pIn2 = pSrcB;
 744:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 745:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     else
 746:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 747:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Initialization of inputA pointer */
 748:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       pIn1 = pSrcB;
 749:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 750:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Initialization of inputB pointer */
 751:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       pIn2 = pSrcA;
 752:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 753:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* srcBLen is always considered as shorter or equal to srcALen */
 754:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       j = srcBLen;
 755:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       srcBLen = srcALen;
 756:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       srcALen = j;
 757:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 758:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 759:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Conditions to check which loopCounter holds
 760:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * the first and last indices of the output samples to be calculated. */
 761:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     check = firstIndex + numPoints;
 762:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize3 = ((int32_t)check > (int32_t)srcALen) ? (int32_t)check - (int32_t)srcALen : 0;
 763:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize3 = ((int32_t)firstIndex > (int32_t)srcALen - 1) ? blockSize3 - (int32_t)firstIndex + 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 99


 764:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize1 = ((int32_t) srcBLen - 1) - (int32_t) firstIndex;
 765:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
 766:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****                                      (int32_t) numPoints) : 0;
 767:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize2 = ((int32_t) check - blockSize3) -
 768:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       (blockSize1 + (int32_t) firstIndex);
 769:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     blockSize2 = (blockSize2 > 0) ? blockSize2 : 0;
 770:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 771:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
 772:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The function is internally
 773:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * divided into three stages according to the number of multiplications that has to be
 774:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * taken place between inputA samples and inputB samples. In the first stage of the
 775:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * algorithm, the multiplications increase by one for every iteration.
 776:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * In the second stage of the algorithm, srcBLen number of multiplications are done.
 777:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * In the third stage of the algorithm, the multiplications decrease by one
 778:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * for every iteration. */
 779:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 780:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Set the output pointer to point to the firstIndex
 781:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * of the output sample to be calculated. */
 782:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     pOut = pDst + firstIndex;
 783:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 784:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* --------------------------
 785:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * Initializations of stage1
 786:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * -------------------------*/
 787:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 788:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* sum = x[0] * y[0]
 789:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum = x[0] * y[1] + x[1] * y[0]
 790:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * ....
 791:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]
 792:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      */
 793:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 794:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* In this stage the MAC operations are increased by 1 for every iteration.
 795:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        The count variable holds the number of MAC operations performed.
 796:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        Since the partial convolution starts from firstIndex
 797:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        Number of Macs to be performed is firstIndex + 1 */
 798:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     count = 1u + firstIndex;
 799:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 800:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Working pointer of inputA */
 801:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     px = pIn1;
 802:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 803:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Working pointer of inputB */
 804:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     pSrc2 = pIn2 + firstIndex;
 805:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     py = pSrc2;
 806:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 807:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* ------------------------
 808:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * Stage1 process
 809:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * ----------------------*/
 810:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 811:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* For loop unrolling by 4, this stage is divided into two. */
 812:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* First part of this stage computes the MAC operations less than 4 */
 813:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Second part of this stage computes the MAC operations greater than or equal to 4 */
 814:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 815:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The first part of the stage starts here */
 816:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   while ((count < 4u) && (blockSize1 > 0))
 817:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 818:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Accumulator is made zero for every iteration */
 819:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       sum = 0;
 820:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 100


 821:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Loop over number of MAC operations between
 822:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        * inputA samples and inputB samples */
 823:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = count;
 824:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 825:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (k > 0u)
 826:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 827:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Perform the multiply-accumulates */
 828:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       sum += ((q31_t) * px++ * *py--);
 829:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 830:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
 831:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k--;
 832:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
 833:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 834:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Store the result in the accumulator in the destination buffer. */
 835:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       *pOut++ = (q15_t) (sum >> 15);
 836:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 837:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 838:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       py = ++pSrc2;
 839:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       px = pIn1;
 840:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 841:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Increment the MAC count */
 842:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       count++;
 843:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 844:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the loop counter */
 845:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blockSize1--;
 846:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 847:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 848:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The second part of the stage starts here */
 849:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The internal loop, over count, is unrolled by 4 */
 850:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* To, read the last two inputB samples using SIMD:
 851:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * y[srcBLen] and y[srcBLen-1] coefficients, py is decremented by 1 */
 852:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     py = py - 1;
 853:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 854:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   while (blockSize1 > 0)
 855:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 856:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Accumulator is made zero for every iteration */
 857:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       sum = 0;
 858:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 859:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 860:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = count >> 2u;
 861:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 862:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 863:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 864:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	py++;
 865:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 866:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     while (k > 0u)
 867:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 868:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Perform the multiply-accumulates */
 869:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 870:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 871:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 872:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
 873:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 874:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the loop counter */
 875:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k--;
 876:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 877:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 101


 878:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* If the count is not a multiple of 4, compute any remaining MACs here.
 879:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        ** No loop unrolling is used. */
 880:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = count % 0x4u;
 881:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 882:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (k > 0u)
 883:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 884:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Perform the multiply-accumulates */
 885:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       sum += ((q31_t) * px++ * *py--);
 886:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 887:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
 888:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k--;
 889:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
 890:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 891:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Store the result in the accumulator in the destination buffer. */
 892:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       *pOut++ = (q15_t) (sum >> 15);
 893:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 894:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 895:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       py = ++pSrc2 - 1u;
 896:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       px = pIn1;
 897:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 898:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Increment the MAC count */
 899:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       count++;
 900:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 901:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the loop counter */
 902:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blockSize1--;
 903:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 904:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 905:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* --------------------------
 906:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * Initializations of stage2
 907:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * ------------------------*/
 908:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 909:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]
 910:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]
 911:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * ....
 912:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y
 913:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      */
 914:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 915:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Working pointer of inputA */
 916:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     if ((int32_t)firstIndex - (int32_t)srcBLen + 1 > 0)
 917:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 918:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       px = pIn1 + firstIndex - srcBLen + 1;
 919:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 920:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     else
 921:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 922:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       px = pIn1;
 923:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
 924:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 925:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Working pointer of inputB */
 926:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     pSrc2 = pIn2 + (srcBLen - 1u);
 927:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     py = pSrc2;
 928:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 929:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* count is the index by which the pointer pIn1 to be incremented */
 930:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     count = 0u;
 931:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 932:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 933:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* --------------------
 934:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * Stage2 process
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 102


 935:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * -------------------*/
 936:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 937:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
 938:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * So, to loop unroll over blockSize2,
 939:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * srcBLen should be greater than or equal to 4 */
 940:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     if (srcBLen >= 4u)
 941:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
 942:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Loop unroll over blockSize2, by 4 */
 943:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blkCnt = ((uint32_t) blockSize2 >> 2u);
 944:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 945:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (blkCnt > 0u)
 946:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 947:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       py = py - 1u;
 948:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 949:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Set all accumulators to zero */
 950:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc0 = 0;
 951:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc1 = 0;
 952:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc2 = 0;
 953:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc3 = 0;
 954:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 955:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* read x[0], x[1] samples */
 956:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *px++;
 957:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  b = *px++;
 958:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 959:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 960:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 961:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x0 = __PKHBT(a, b, 16);
 962:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *px;
 963:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x1 = __PKHBT(b, a, 16);
 964:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 965:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
 966:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 967:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x0 = __PKHBT(b, a, 16);
 968:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *px;
 969:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x1 = __PKHBT(a, b, 16);
 970:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 971:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	   */
 972:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 973:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 974:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = srcBLen >> 2u;
 975:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 976:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 977:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 978:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       do
 979:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
 980:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Read the last two inputB samples using SIMD:
 981:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****          * y[srcBLen - 1] and y[srcBLen - 2] */
 982:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		a = *py;
 983:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		b = *(py+1);
 984:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		py -= 2;
 985:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 986:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 987:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 988:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		c0 = __PKHBT(a, b, 16);
 989:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 990:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
 991:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 103


 992:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  		c0 = __PKHBT(b, a, 16);;
 993:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 994:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	*/
 995:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 996:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* acc0 +=  x[0] * y[srcBLen - 1] + x[1] * y[srcBLen - 2] */
 997:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc0 = __SMLADX(x0, c0, acc0);
 998:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
 999:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* acc1 +=  x[1] * y[srcBLen - 1] + x[2] * y[srcBLen - 2] */
1000:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc1 = __SMLADX(x1, c0, acc1);
1001:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1002:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *px;
1003:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  b = *(px + 1);
1004:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1005:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1006:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1007:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x2 = __PKHBT(a, b, 16);
1008:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *(px + 2);
1009:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x3 = __PKHBT(b, a, 16);
1010:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1011:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
1012:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1013:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x2 = __PKHBT(b, a, 16);
1014:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *(px + 2);
1015:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x3 = __PKHBT(a, b, 16);
1016:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1017:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	   */
1018:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1019:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* acc2 +=  x[2] * y[srcBLen - 1] + x[3] * y[srcBLen - 2] */
1020:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc2 = __SMLADX(x2, c0, acc2);
1021:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1022:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* acc3 +=  x[3] * y[srcBLen - 1] + x[4] * y[srcBLen - 2] */
1023:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc3 = __SMLADX(x3, c0, acc3);
1024:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1025:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Read y[srcBLen - 3] and y[srcBLen - 4] */
1026:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		a = *py;
1027:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		b = *(py+1);
1028:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		py -= 2;
1029:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1030:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1031:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1032:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		c0 = __PKHBT(a, b, 16);
1033:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1034:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
1035:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1036:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  		c0 = __PKHBT(b, a, 16);;
1037:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1038:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	*/
1039:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1040:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* acc0 +=  x[2] * y[srcBLen - 3] + x[3] * y[srcBLen - 4] */
1041:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc0 = __SMLADX(x2, c0, acc0);
1042:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1043:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* acc1 +=  x[3] * y[srcBLen - 3] + x[4] * y[srcBLen - 4] */
1044:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc1 = __SMLADX(x3, c0, acc1);
1045:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1046:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Read x[4], x[5], x[6] */
1047:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *(px + 2);
1048:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  b = *(px + 3);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 104


1049:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1050:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1051:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1052:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x0 = __PKHBT(a, b, 16);
1053:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *(px + 4);
1054:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x1 = __PKHBT(b, a, 16);
1055:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1056:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
1057:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1058:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x0 = __PKHBT(b, a, 16);
1059:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *(px + 4);
1060:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x1 = __PKHBT(a, b, 16);
1061:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1062:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	   */
1063:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1064:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		px += 4u;
1065:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1066:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* acc2 +=  x[4] * y[srcBLen - 3] + x[5] * y[srcBLen - 4] */
1067:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc2 = __SMLADX(x0, c0, acc2);
1068:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1069:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* acc3 +=  x[5] * y[srcBLen - 3] + x[6] * y[srcBLen - 4] */
1070:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc3 = __SMLADX(x1, c0, acc3);
1071:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1072:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       } while (--k);
1073:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1074:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* For the next MAC operations, SIMD is not used
1075:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        * So, the 16 bit pointer if inputB, py is updated */
1076:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1077:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
1078:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        ** No loop unrolling is used. */
1079:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = srcBLen % 0x4u;
1080:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1081:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       if (k == 1u)
1082:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
1083:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Read y[srcBLen - 5] */
1084:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = *(py+1);
1085:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1086:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifdef  ARM_MATH_BIG_ENDIAN
1087:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1088:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = c0 << 16u;
1089:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1090:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
1091:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1092:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = c0 & 0x0000FFFF;
1093:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1094:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
1095:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1096:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Read x[7] */
1097:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		a = *px;
1098:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		b = *(px+1);
1099:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		px++;
1100:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1101:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1102:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1103:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		x3 = __PKHBT(a, b, 16);
1104:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1105:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 105


1106:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1107:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  		x3 = __PKHBT(b, a, 16);;
1108:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1109:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	*/
1110:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1111:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1112:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Perform the multiply-accumulates */
1113:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc0 = __SMLAD(x0, c0, acc0);
1114:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc1 = __SMLAD(x1, c0, acc1);
1115:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc2 = __SMLADX(x1, c0, acc2);
1116:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc3 = __SMLADX(x3, c0, acc3);
1117:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
1118:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1119:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       if (k == 2u)
1120:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
1121:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Read y[srcBLen - 5], y[srcBLen - 6] */
1122:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		a = *py;
1123:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		b = *(py+1);
1124:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1125:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1126:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1127:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		c0 = __PKHBT(a, b, 16);
1128:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1129:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
1130:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1131:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  		c0 = __PKHBT(b, a, 16);;
1132:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1133:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	*/
1134:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1135:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Read x[7], x[8], x[9] */
1136:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *px;
1137:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  b = *(px + 1);
1138:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1139:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1140:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1141:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x3 = __PKHBT(a, b, 16);
1142:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *(px + 2);
1143:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x2 = __PKHBT(b, a, 16);
1144:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1145:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
1146:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1147:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x3 = __PKHBT(b, a, 16);
1148:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *(px + 2);
1149:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x2 = __PKHBT(a, b, 16);
1150:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1151:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	   */
1152:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		px += 2u;
1153:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1154:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Perform the multiply-accumulates */
1155:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc0 = __SMLADX(x0, c0, acc0);
1156:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc1 = __SMLADX(x1, c0, acc1);
1157:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc2 = __SMLADX(x3, c0, acc2);
1158:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc3 = __SMLADX(x2, c0, acc3);
1159:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
1160:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1161:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       if (k == 3u)
1162:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 106


1163:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Read y[srcBLen - 5], y[srcBLen - 6] */
1164:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		a = *py;
1165:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		b = *(py+1);
1166:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1167:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1168:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1169:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		c0 = __PKHBT(a, b, 16);
1170:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1171:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
1172:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1173:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  		c0 = __PKHBT(b, a, 16);;
1174:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1175:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	*/
1176:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1177:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Read x[7], x[8], x[9] */
1178:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *px;
1179:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  b = *(px + 1);
1180:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1181:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1182:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1183:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x3 = __PKHBT(a, b, 16);
1184:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *(px + 2);
1185:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x2 = __PKHBT(b, a, 16);
1186:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1187:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
1188:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1189:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x3 = __PKHBT(b, a, 16);
1190:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  a = *(px + 2);
1191:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  x2 = __PKHBT(a, b, 16);
1192:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1193:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	   */
1194:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1195:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Perform the multiply-accumulates */
1196:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc0 = __SMLADX(x0, c0, acc0);
1197:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc1 = __SMLADX(x1, c0, acc1);
1198:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc2 = __SMLADX(x3, c0, acc2);
1199:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc3 = __SMLADX(x2, c0, acc3);
1200:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1201:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Read y[srcBLen - 7] */
1202:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		c0 = *(py-1);
1203:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifdef  ARM_MATH_BIG_ENDIAN
1204:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1205:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = c0 << 16u;
1206:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
1207:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1208:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         c0 = c0 & 0x0000FFFF;
1209:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
1210:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1211:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Read x[10] */
1212:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		a = *(px+2);
1213:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		b = *(px+3);
1214:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1215:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
1216:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1217:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		x3 = __PKHBT(a, b, 16);
1218:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1219:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #else
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 107


1220:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1221:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****  		x3 = __PKHBT(b, a, 16);;
1222:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1223:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif	/*	#ifndef ARM_MATH_BIG_ENDIAN	*/
1224:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1225:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 		px += 3u;
1226:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1227:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Perform the multiply-accumulates */
1228:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc0 = __SMLADX(x1, c0, acc0);
1229:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc1 = __SMLAD(x2, c0, acc1);
1230:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc2 = __SMLADX(x2, c0, acc2);
1231:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         acc3 = __SMLADX(x3, c0, acc3);
1232:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
1233:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1234:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Store the results in the accumulators in the destination buffer. */
1235:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  *pOut++ = (q15_t)(acc0 >> 15);
1236:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  *pOut++ = (q15_t)(acc1 >> 15);
1237:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  *pOut++ = (q15_t)(acc2 >> 15);
1238:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	  *pOut++ = (q15_t)(acc3 >> 15);
1239:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1240:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Increment the pointer pIn1 index, count by 4 */
1241:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         count += 4u;
1242:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1243:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
1244:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         px = pIn1 + count;
1245:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         py = pSrc2;
1246:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1247:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
1248:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         blkCnt--;
1249:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
1250:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1251:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.
1252:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        ** No loop unrolling is used. */
1253:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blkCnt = (uint32_t) blockSize2 % 0x4u;
1254:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1255:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (blkCnt > 0u)
1256:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
1257:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Accumulator is made zero for every iteration */
1258:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum = 0;
1259:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1260:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
1261:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k = srcBLen >> 2u;
1262:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1263:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
1264:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****          ** a second loop below computes MACs for the remaining 1 to 3 samples. */
1265:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         while (k > 0u)
1266:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         {
1267:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Perform the multiply-accumulates */
1268:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           sum += ((q31_t) * px++ * *py--);
1269:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           sum += ((q31_t) * px++ * *py--);
1270:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           sum += ((q31_t) * px++ * *py--);
1271:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           sum += ((q31_t) * px++ * *py--);
1272:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1273:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Decrement the loop counter */
1274:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           k--;
1275:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         }
1276:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 108


1277:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
1278:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****          ** No loop unrolling is used. */
1279:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k = srcBLen % 0x4u;
1280:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1281:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         while (k > 0u)
1282:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         {
1283:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Perform the multiply-accumulates */
1284:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           sum += ((q31_t) * px++ * *py--);
1285:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1286:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Decrement the loop counter */
1287:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           k--;
1288:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         }
1289:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1290:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Store the result in the accumulator in the destination buffer. */
1291:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         *pOut++ = (q15_t) (sum >> 15);
1292:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1293:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Increment the pointer pIn1 index, count by 1 */
1294:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         count++;
1295:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1296:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
1297:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         px = pIn1 + count;
1298:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         py = pSrc2;
1299:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1300:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
1301:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         blkCnt--;
1302:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
1303:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
1304:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     else
1305:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
1306:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* If the srcBLen is not a multiple of 4,
1307:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        * the blockSize2 loop cannot be unrolled by 4 */
1308:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blkCnt = (uint32_t) blockSize2;
1309:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1310:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (blkCnt > 0u)
1311:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
1312:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Accumulator is made zero for every iteration */
1313:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum = 0;
1314:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1315:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* srcBLen number of MACS should be performed */
1316:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k = srcBLen;
1317:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1318:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         while (k > 0u)
1319:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         {
1320:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Perform the multiply-accumulate */
1321:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           sum += ((q31_t) * px++ * *py--);
1322:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1323:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           /* Decrement the loop counter */
1324:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****           k--;
1325:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         }
1326:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1327:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Store the result in the accumulator in the destination buffer. */
1328:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         *pOut++ = (q15_t) (sum >> 15);
1329:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1330:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Increment the MAC count */
1331:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         count++;
1332:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1333:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 109


1334:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         px = pIn1 + count;
1335:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         py = pSrc2;
1336:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1337:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
1338:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         blkCnt--;
1339:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
1340:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
1341:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1342:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1343:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* --------------------------
1344:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * Initializations of stage3
1345:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * -------------------------*/
1346:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1347:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[src
1348:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[src
1349:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * ....
1350:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]
1351:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * sum +=  x[srcALen-1] * y[srcBLen-1]
1352:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      */
1353:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1354:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* In this stage the MAC operations are decreased by 1 for every iteration.
1355:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        The count variable holds the number of MAC operations performed */
1356:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     count = srcBLen - 1u;
1357:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1358:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Working pointer of inputA */
1359:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
1360:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     px = pSrc1;
1361:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1362:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Working pointer of inputB */
1363:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     pSrc2 = pIn2 + (srcBLen - 1u);
1364:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     pIn2 = pSrc2 - 1u;
1365:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     py = pIn2;
1366:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1367:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* -------------------
1368:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * Stage3 process
1369:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * ------------------*/
1370:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1371:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* For loop unrolling by 4, this stage is divided into two. */
1372:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* First part of this stage computes the MAC operations greater than 4 */
1373:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* Second part of this stage computes the MAC operations less than or equal to 4 */
1374:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1375:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The first part of the stage starts here */
1376:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     j = count >> 2u;
1377:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1378:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     while ((j > 0u) && (blockSize3 > 0))
1379:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
1380:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Accumulator is made zero for every iteration */
1381:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       sum = 0;
1382:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1383:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
1384:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = count >> 2u;
1385:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1386:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
1387:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
1388:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 	py++;
1389:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1390:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     while (k > 0u)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 110


1391:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
1392:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Perform the multiply-accumulates */
1393:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1394:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1395:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1396:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1397:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the loop counter */
1398:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k--;
1399:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
1400:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1401:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1402:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* If the count is not a multiple of 4, compute any remaining MACs here.
1403:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****        ** No loop unrolling is used. */
1404:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = count % 0x4u;
1405:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1406:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (k > 0u)
1407:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
1408:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Perform the multiply-accumulates */
1409:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1410:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1411:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
1412:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k--;
1413:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
1414:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1415:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Store the result in the accumulator in the destination buffer. */
1416:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       *pOut++ = (q15_t) (sum >> 15);
1417:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1418:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
1419:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       px = ++pSrc1;
1420:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       py = pIn2;
1421:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1422:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the MAC count */
1423:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       count--;
1424:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1425:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the loop counter */
1426:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blockSize3--;
1427:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1428:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       j--;
1429:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
1430:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1431:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* The second part of the stage starts here */
1432:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* SIMD is not used for the next MAC operations,
1433:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****      * so pointer py is updated to read only one sample at a time */
1434:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     py = py + 1u;
1435:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1436:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   while (blockSize3 > 0)
1437:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     {
1438:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Accumulator is made zero for every iteration */
1439:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       sum = 0;
1440:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1441:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
1442:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       k = count;
1443:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1444:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       while (k > 0u)
1445:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       {
1446:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Perform the multiply-accumulates */
1447:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* sum +=  x[srcALen-1] * y[srcBLen-1] */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 111


1448:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         sum += ((q31_t) * px++ * *py--);
1449:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1450:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         /* Decrement the loop counter */
1451:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****         k--;
1452:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       }
1453:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1454:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Store the result in the accumulator in the destination buffer. */
1455:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       *pOut++ = (q15_t) (sum >> 15);
1456:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1457:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
1458:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       px = ++pSrc1;
1459:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       py = pSrc2;
1460:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1461:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the MAC count */
1462:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       count--;
1463:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1464:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       /* Decrement the loop counter */
1465:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****       blockSize3--;
1466:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     }
1467:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1468:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     /* set status as ARM_MATH_SUCCESS */
1469:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****     status = ARM_MATH_SUCCESS;
1470:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   }
1471:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1472:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   /* Return to application */
1473:Source\FilteringFunctions/arm_conv_partial_fast_q15.c ****   return (status);
1474:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** 
1475:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** #endif /*     #ifndef UNALIGNED_SUPPORT_DISABLE      */
1476:Source\FilteringFunctions/arm_conv_partial_fast_q15.c **** }
 3703              		.loc 1 1476 0
 3704 17e6 181C     		mov	r0, r3
 3705 17e8 BD46     		mov	sp, r7
 3706 17ea 7EB0     		add	sp, sp, #504
 3707              		@ sp needed
 3708 17ec 80BD     		pop	{r7, pc}
 3709              	.L93:
 3710 17ee C046     		.align	2
 3711              	.L92:
 3712 17f0 FFFFFF7F 		.word	2147483647
 3713              		.cfi_endproc
 3714              	.LFE82:
 3715              		.size	arm_conv_partial_fast_q15, .-arm_conv_partial_fast_q15
 3716              		.text
 3717              	.Letext0:
 3718              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 3719              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 3720              		.section	.debug_info,"",%progbits
 3721              	.Ldebug_info0:
 3722 0000 70090000 		.4byte	0x970
 3723 0004 0400     		.2byte	0x4
 3724 0006 00000000 		.4byte	.Ldebug_abbrev0
 3725 000a 04       		.byte	0x4
 3726 000b 01       		.uleb128 0x1
 3727 000c 13010000 		.4byte	.LASF55
 3728 0010 01       		.byte	0x1
 3729 0011 54000000 		.4byte	.LASF56
 3730 0015 9A020000 		.4byte	.LASF57
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 112


 3731 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3732 001d 00000000 		.4byte	0
 3733 0021 00000000 		.4byte	.Ldebug_line0
 3734 0025 02       		.uleb128 0x2
 3735 0026 01       		.byte	0x1
 3736 0027 06       		.byte	0x6
 3737 0028 A0000000 		.4byte	.LASF0
 3738 002c 02       		.uleb128 0x2
 3739 002d 01       		.byte	0x1
 3740 002e 08       		.byte	0x8
 3741 002f 6A020000 		.4byte	.LASF1
 3742 0033 03       		.uleb128 0x3
 3743 0034 EA000000 		.4byte	.LASF4
 3744 0038 03       		.byte	0x3
 3745 0039 29       		.byte	0x29
 3746 003a 3E000000 		.4byte	0x3e
 3747 003e 02       		.uleb128 0x2
 3748 003f 02       		.byte	0x2
 3749 0040 05       		.byte	0x5
 3750 0041 78020000 		.4byte	.LASF2
 3751 0045 02       		.uleb128 0x2
 3752 0046 02       		.byte	0x2
 3753 0047 07       		.byte	0x7
 3754 0048 A5010000 		.4byte	.LASF3
 3755 004c 03       		.uleb128 0x3
 3756 004d 13030000 		.4byte	.LASF5
 3757 0051 03       		.byte	0x3
 3758 0052 3F       		.byte	0x3f
 3759 0053 57000000 		.4byte	0x57
 3760 0057 02       		.uleb128 0x2
 3761 0058 04       		.byte	0x4
 3762 0059 05       		.byte	0x5
 3763 005a AC000000 		.4byte	.LASF6
 3764 005e 03       		.uleb128 0x3
 3765 005f DF000000 		.4byte	.LASF7
 3766 0063 03       		.byte	0x3
 3767 0064 41       		.byte	0x41
 3768 0065 69000000 		.4byte	0x69
 3769 0069 02       		.uleb128 0x2
 3770 006a 04       		.byte	0x4
 3771 006b 07       		.byte	0x7
 3772 006c 01010000 		.4byte	.LASF8
 3773 0070 02       		.uleb128 0x2
 3774 0071 08       		.byte	0x8
 3775 0072 05       		.byte	0x5
 3776 0073 92000000 		.4byte	.LASF9
 3777 0077 02       		.uleb128 0x2
 3778 0078 08       		.byte	0x8
 3779 0079 07       		.byte	0x7
 3780 007a 2B000000 		.4byte	.LASF10
 3781 007e 04       		.uleb128 0x4
 3782 007f 04       		.byte	0x4
 3783 0080 05       		.byte	0x5
 3784 0081 696E7400 		.ascii	"int\000"
 3785 0085 02       		.uleb128 0x2
 3786 0086 04       		.byte	0x4
 3787 0087 07       		.byte	0x7
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 113


 3788 0088 F4000000 		.4byte	.LASF11
 3789 008c 03       		.uleb128 0x3
 3790 008d 8A000000 		.4byte	.LASF12
 3791 0091 04       		.byte	0x4
 3792 0092 20       		.byte	0x20
 3793 0093 33000000 		.4byte	0x33
 3794 0097 03       		.uleb128 0x3
 3795 0098 62020000 		.4byte	.LASF13
 3796 009c 04       		.byte	0x4
 3797 009d 2C       		.byte	0x2c
 3798 009e 4C000000 		.4byte	0x4c
 3799 00a2 03       		.uleb128 0x3
 3800 00a3 EE020000 		.4byte	.LASF14
 3801 00a7 04       		.byte	0x4
 3802 00a8 2D       		.byte	0x2d
 3803 00a9 5E000000 		.4byte	0x5e
 3804 00ad 02       		.uleb128 0x2
 3805 00ae 04       		.byte	0x4
 3806 00af 07       		.byte	0x7
 3807 00b0 DD010000 		.4byte	.LASF15
 3808 00b4 02       		.uleb128 0x2
 3809 00b5 01       		.byte	0x1
 3810 00b6 08       		.byte	0x8
 3811 00b7 F7020000 		.4byte	.LASF16
 3812 00bb 02       		.uleb128 0x2
 3813 00bc 08       		.byte	0x8
 3814 00bd 04       		.byte	0x4
 3815 00be CC000000 		.4byte	.LASF17
 3816 00c2 02       		.uleb128 0x2
 3817 00c3 04       		.byte	0x4
 3818 00c4 04       		.byte	0x4
 3819 00c5 18020000 		.4byte	.LASF18
 3820 00c9 02       		.uleb128 0x2
 3821 00ca 08       		.byte	0x8
 3822 00cb 04       		.byte	0x4
 3823 00cc E6010000 		.4byte	.LASF19
 3824 00d0 05       		.uleb128 0x5
 3825 00d1 01       		.byte	0x1
 3826 00d2 02       		.byte	0x2
 3827 00d3 8401     		.2byte	0x184
 3828 00d5 04010000 		.4byte	0x104
 3829 00d9 06       		.uleb128 0x6
 3830 00da 1A000000 		.4byte	.LASF20
 3831 00de 00       		.sleb128 0
 3832 00df 06       		.uleb128 0x6
 3833 00e0 82020000 		.4byte	.LASF21
 3834 00e4 7F       		.sleb128 -1
 3835 00e5 06       		.uleb128 0x6
 3836 00e6 02020000 		.4byte	.LASF22
 3837 00ea 7E       		.sleb128 -2
 3838 00eb 06       		.uleb128 0x6
 3839 00ec FC020000 		.4byte	.LASF23
 3840 00f0 7D       		.sleb128 -3
 3841 00f1 06       		.uleb128 0x6
 3842 00f2 52020000 		.4byte	.LASF24
 3843 00f6 7C       		.sleb128 -4
 3844 00f7 06       		.uleb128 0x6
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 114


 3845 00f8 1E020000 		.4byte	.LASF25
 3846 00fc 7B       		.sleb128 -5
 3847 00fd 06       		.uleb128 0x6
 3848 00fe B8010000 		.4byte	.LASF26
 3849 0102 7A       		.sleb128 -6
 3850 0103 00       		.byte	0
 3851 0104 07       		.uleb128 0x7
 3852 0105 2C030000 		.4byte	.LASF27
 3853 0109 02       		.byte	0x2
 3854 010a 8C01     		.2byte	0x18c
 3855 010c D0000000 		.4byte	0xd0
 3856 0110 07       		.uleb128 0x7
 3857 0111 C0000000 		.4byte	.LASF28
 3858 0115 02       		.byte	0x2
 3859 0116 9601     		.2byte	0x196
 3860 0118 8C000000 		.4byte	0x8c
 3861 011c 07       		.uleb128 0x7
 3862 011d E0020000 		.4byte	.LASF29
 3863 0121 02       		.byte	0x2
 3864 0122 9B01     		.2byte	0x19b
 3865 0124 97000000 		.4byte	0x97
 3866 0128 08       		.uleb128 0x8
 3867 0129 04       		.byte	0x4
 3868 012a 10010000 		.4byte	0x110
 3869 012e 09       		.uleb128 0x9
 3870 012f 1D030000 		.4byte	.LASF30
 3871 0133 02       		.byte	0x2
 3872 0134 B303     		.2byte	0x3b3
 3873 0136 A2000000 		.4byte	0xa2
 3874 013a 03       		.byte	0x3
 3875 013b 60010000 		.4byte	0x160
 3876 013f 0A       		.uleb128 0xa
 3877 0140 7800     		.ascii	"x\000"
 3878 0142 02       		.byte	0x2
 3879 0143 B403     		.2byte	0x3b4
 3880 0145 A2000000 		.4byte	0xa2
 3881 0149 0A       		.uleb128 0xa
 3882 014a 7900     		.ascii	"y\000"
 3883 014c 02       		.byte	0x2
 3884 014d B503     		.2byte	0x3b5
 3885 014f A2000000 		.4byte	0xa2
 3886 0153 0A       		.uleb128 0xa
 3887 0154 73756D00 		.ascii	"sum\000"
 3888 0158 02       		.byte	0x2
 3889 0159 B603     		.2byte	0x3b6
 3890 015b A2000000 		.4byte	0xa2
 3891 015f 00       		.byte	0
 3892 0160 09       		.uleb128 0x9
 3893 0161 37030000 		.4byte	.LASF31
 3894 0165 02       		.byte	0x2
 3895 0166 C103     		.2byte	0x3c1
 3896 0168 A2000000 		.4byte	0xa2
 3897 016c 03       		.byte	0x3
 3898 016d 92010000 		.4byte	0x192
 3899 0171 0A       		.uleb128 0xa
 3900 0172 7800     		.ascii	"x\000"
 3901 0174 02       		.byte	0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 115


 3902 0175 C203     		.2byte	0x3c2
 3903 0177 A2000000 		.4byte	0xa2
 3904 017b 0A       		.uleb128 0xa
 3905 017c 7900     		.ascii	"y\000"
 3906 017e 02       		.byte	0x2
 3907 017f C303     		.2byte	0x3c3
 3908 0181 A2000000 		.4byte	0xa2
 3909 0185 0A       		.uleb128 0xa
 3910 0186 73756D00 		.ascii	"sum\000"
 3911 018a 02       		.byte	0x2
 3912 018b C403     		.2byte	0x3c4
 3913 018d A2000000 		.4byte	0xa2
 3914 0191 00       		.byte	0
 3915 0192 0B       		.uleb128 0xb
 3916 0193 30020000 		.4byte	.LASF58
 3917 0197 01       		.byte	0x1
 3918 0198 37       		.byte	0x37
 3919 0199 04010000 		.4byte	0x104
 3920 019d 00000000 		.4byte	.LFB82
 3921 01a1 F4170000 		.4byte	.LFE82-.LFB82
 3922 01a5 01       		.uleb128 0x1
 3923 01a6 9C       		.byte	0x9c
 3924 01a7 0C       		.uleb128 0xc
 3925 01a8 D3000000 		.4byte	.LASF32
 3926 01ac 01       		.byte	0x1
 3927 01ad 38       		.byte	0x38
 3928 01ae 28010000 		.4byte	0x128
 3929 01b2 03       		.uleb128 0x3
 3930 01b3 91       		.byte	0x91
 3931 01b4 8C7C     		.sleb128 -500
 3932 01b6 0C       		.uleb128 0xc
 3933 01b7 E6020000 		.4byte	.LASF33
 3934 01bb 01       		.byte	0x1
 3935 01bc 39       		.byte	0x39
 3936 01bd A2000000 		.4byte	0xa2
 3937 01c1 03       		.uleb128 0x3
 3938 01c2 91       		.byte	0x91
 3939 01c3 887C     		.sleb128 -504
 3940 01c5 0C       		.uleb128 0xc
 3941 01c6 D9000000 		.4byte	.LASF34
 3942 01ca 01       		.byte	0x1
 3943 01cb 3A       		.byte	0x3a
 3944 01cc 28010000 		.4byte	0x128
 3945 01d0 03       		.uleb128 0x3
 3946 01d1 91       		.byte	0x91
 3947 01d2 847C     		.sleb128 -508
 3948 01d4 0C       		.uleb128 0xc
 3949 01d5 4A020000 		.4byte	.LASF35
 3950 01d9 01       		.byte	0x1
 3951 01da 3B       		.byte	0x3b
 3952 01db A2000000 		.4byte	0xa2
 3953 01df 03       		.uleb128 0x3
 3954 01e0 91       		.byte	0x91
 3955 01e1 807C     		.sleb128 -512
 3956 01e3 0C       		.uleb128 0xc
 3957 01e4 BB000000 		.4byte	.LASF36
 3958 01e8 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 116


 3959 01e9 3C       		.byte	0x3c
 3960 01ea 28010000 		.4byte	0x128
 3961 01ee 02       		.uleb128 0x2
 3962 01ef 91       		.byte	0x91
 3963 01f0 00       		.sleb128 0
 3964 01f1 0C       		.uleb128 0xc
 3965 01f2 49000000 		.4byte	.LASF37
 3966 01f6 01       		.byte	0x1
 3967 01f7 3D       		.byte	0x3d
 3968 01f8 A2000000 		.4byte	0xa2
 3969 01fc 02       		.uleb128 0x2
 3970 01fd 91       		.byte	0x91
 3971 01fe 04       		.sleb128 4
 3972 01ff 0C       		.uleb128 0xc
 3973 0200 D3010000 		.4byte	.LASF38
 3974 0204 01       		.byte	0x1
 3975 0205 3E       		.byte	0x3e
 3976 0206 A2000000 		.4byte	0xa2
 3977 020a 02       		.uleb128 0x2
 3978 020b 91       		.byte	0x91
 3979 020c 08       		.sleb128 8
 3980 020d 0D       		.uleb128 0xd
 3981 020e F2010000 		.4byte	.LASF39
 3982 0212 01       		.byte	0x1
 3983 0213 42       		.byte	0x42
 3984 0214 28010000 		.4byte	0x128
 3985 0218 02       		.uleb128 0x2
 3986 0219 91       		.byte	0x91
 3987 021a 74       		.sleb128 -12
 3988 021b 0D       		.uleb128 0xd
 3989 021c F7010000 		.4byte	.LASF40
 3990 0220 01       		.byte	0x1
 3991 0221 43       		.byte	0x43
 3992 0222 28010000 		.4byte	0x128
 3993 0226 02       		.uleb128 0x2
 3994 0227 91       		.byte	0x91
 3995 0228 70       		.sleb128 -16
 3996 0229 0D       		.uleb128 0xd
 3997 022a CE010000 		.4byte	.LASF41
 3998 022e 01       		.byte	0x1
 3999 022f 44       		.byte	0x44
 4000 0230 28010000 		.4byte	0x128
 4001 0234 03       		.uleb128 0x3
 4002 0235 91       		.byte	0x91
 4003 0236 987C     		.sleb128 -488
 4004 0238 0E       		.uleb128 0xe
 4005 0239 73756D00 		.ascii	"sum\000"
 4006 023d 01       		.byte	0x1
 4007 023e 45       		.byte	0x45
 4008 023f 1C010000 		.4byte	0x11c
 4009 0243 02       		.uleb128 0x2
 4010 0244 91       		.byte	0x91
 4011 0245 6C       		.sleb128 -20
 4012 0246 0D       		.uleb128 0xd
 4013 0247 06000000 		.4byte	.LASF42
 4014 024b 01       		.byte	0x1
 4015 024c 45       		.byte	0x45
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 117


 4016 024d 1C010000 		.4byte	0x11c
 4017 0251 02       		.uleb128 0x2
 4018 0252 91       		.byte	0x91
 4019 0253 68       		.sleb128 -24
 4020 0254 0D       		.uleb128 0xd
 4021 0255 0B000000 		.4byte	.LASF43
 4022 0259 01       		.byte	0x1
 4023 025a 45       		.byte	0x45
 4024 025b 1C010000 		.4byte	0x11c
 4025 025f 02       		.uleb128 0x2
 4026 0260 91       		.byte	0x91
 4027 0261 64       		.sleb128 -28
 4028 0262 0D       		.uleb128 0xd
 4029 0263 10000000 		.4byte	.LASF44
 4030 0267 01       		.byte	0x1
 4031 0268 45       		.byte	0x45
 4032 0269 1C010000 		.4byte	0x11c
 4033 026d 02       		.uleb128 0x2
 4034 026e 91       		.byte	0x91
 4035 026f 60       		.sleb128 -32
 4036 0270 0D       		.uleb128 0xd
 4037 0271 15000000 		.4byte	.LASF45
 4038 0275 01       		.byte	0x1
 4039 0276 45       		.byte	0x45
 4040 0277 1C010000 		.4byte	0x11c
 4041 027b 02       		.uleb128 0x2
 4042 027c 91       		.byte	0x91
 4043 027d 5C       		.sleb128 -36
 4044 027e 0E       		.uleb128 0xe
 4045 027f 707800   		.ascii	"px\000"
 4046 0282 01       		.byte	0x1
 4047 0283 46       		.byte	0x46
 4048 0284 28010000 		.4byte	0x128
 4049 0288 03       		.uleb128 0x3
 4050 0289 91       		.byte	0x91
 4051 028a 947C     		.sleb128 -492
 4052 028c 0E       		.uleb128 0xe
 4053 028d 707900   		.ascii	"py\000"
 4054 0290 01       		.byte	0x1
 4055 0291 47       		.byte	0x47
 4056 0292 28010000 		.4byte	0x128
 4057 0296 03       		.uleb128 0x3
 4058 0297 91       		.byte	0x91
 4059 0298 907C     		.sleb128 -496
 4060 029a 0D       		.uleb128 0xd
 4061 029b FC010000 		.4byte	.LASF46
 4062 029f 01       		.byte	0x1
 4063 02a0 48       		.byte	0x48
 4064 02a1 28010000 		.4byte	0x128
 4065 02a5 02       		.uleb128 0x2
 4066 02a6 91       		.byte	0x91
 4067 02a7 58       		.sleb128 -40
 4068 02a8 0D       		.uleb128 0xd
 4069 02a9 C6000000 		.4byte	.LASF47
 4070 02ad 01       		.byte	0x1
 4071 02ae 48       		.byte	0x48
 4072 02af 28010000 		.4byte	0x128
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 118


 4073 02b3 02       		.uleb128 0x2
 4074 02b4 91       		.byte	0x91
 4075 02b5 54       		.sleb128 -44
 4076 02b6 0E       		.uleb128 0xe
 4077 02b7 783000   		.ascii	"x0\000"
 4078 02ba 01       		.byte	0x1
 4079 02bb 49       		.byte	0x49
 4080 02bc 1C010000 		.4byte	0x11c
 4081 02c0 02       		.uleb128 0x2
 4082 02c1 91       		.byte	0x91
 4083 02c2 50       		.sleb128 -48
 4084 02c3 0E       		.uleb128 0xe
 4085 02c4 783100   		.ascii	"x1\000"
 4086 02c7 01       		.byte	0x1
 4087 02c8 49       		.byte	0x49
 4088 02c9 1C010000 		.4byte	0x11c
 4089 02cd 02       		.uleb128 0x2
 4090 02ce 91       		.byte	0x91
 4091 02cf 4C       		.sleb128 -52
 4092 02d0 0E       		.uleb128 0xe
 4093 02d1 783200   		.ascii	"x2\000"
 4094 02d4 01       		.byte	0x1
 4095 02d5 49       		.byte	0x49
 4096 02d6 1C010000 		.4byte	0x11c
 4097 02da 03       		.uleb128 0x3
 4098 02db 91       		.byte	0x91
 4099 02dc A07F     		.sleb128 -96
 4100 02de 0E       		.uleb128 0xe
 4101 02df 783300   		.ascii	"x3\000"
 4102 02e2 01       		.byte	0x1
 4103 02e3 49       		.byte	0x49
 4104 02e4 1C010000 		.4byte	0x11c
 4105 02e8 03       		.uleb128 0x3
 4106 02e9 91       		.byte	0x91
 4107 02ea 9C7F     		.sleb128 -100
 4108 02ec 0E       		.uleb128 0xe
 4109 02ed 633000   		.ascii	"c0\000"
 4110 02f0 01       		.byte	0x1
 4111 02f1 49       		.byte	0x49
 4112 02f2 1C010000 		.4byte	0x11c
 4113 02f6 03       		.uleb128 0x3
 4114 02f7 91       		.byte	0x91
 4115 02f8 A47F     		.sleb128 -92
 4116 02fa 0E       		.uleb128 0xe
 4117 02fb 6A00     		.ascii	"j\000"
 4118 02fd 01       		.byte	0x1
 4119 02fe 4A       		.byte	0x4a
 4120 02ff A2000000 		.4byte	0xa2
 4121 0303 02       		.uleb128 0x2
 4122 0304 91       		.byte	0x91
 4123 0305 48       		.sleb128 -56
 4124 0306 0E       		.uleb128 0xe
 4125 0307 6B00     		.ascii	"k\000"
 4126 0309 01       		.byte	0x1
 4127 030a 4A       		.byte	0x4a
 4128 030b A2000000 		.4byte	0xa2
 4129 030f 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 119


 4130 0310 91       		.byte	0x91
 4131 0311 44       		.sleb128 -60
 4132 0312 0D       		.uleb128 0xd
 4133 0313 00000000 		.4byte	.LASF48
 4134 0317 01       		.byte	0x1
 4135 0318 4A       		.byte	0x4a
 4136 0319 A2000000 		.4byte	0xa2
 4137 031d 02       		.uleb128 0x2
 4138 031e 91       		.byte	0x91
 4139 031f 40       		.sleb128 -64
 4140 0320 0D       		.uleb128 0xd
 4141 0321 B5000000 		.4byte	.LASF49
 4142 0325 01       		.byte	0x1
 4143 0326 4A       		.byte	0x4a
 4144 0327 A2000000 		.4byte	0xa2
 4145 032b 03       		.uleb128 0x3
 4146 032c 91       		.byte	0x91
 4147 032d AC7F     		.sleb128 -84
 4148 032f 0D       		.uleb128 0xd
 4149 0330 42000000 		.4byte	.LASF50
 4150 0334 01       		.byte	0x1
 4151 0335 4A       		.byte	0x4a
 4152 0336 A2000000 		.4byte	0xa2
 4153 033a 03       		.uleb128 0x3
 4154 033b 91       		.byte	0x91
 4155 033c BC7F     		.sleb128 -68
 4156 033e 0D       		.uleb128 0xd
 4157 033f 40030000 		.4byte	.LASF51
 4158 0343 01       		.byte	0x1
 4159 0344 4B       		.byte	0x4b
 4160 0345 97000000 		.4byte	0x97
 4161 0349 03       		.uleb128 0x3
 4162 034a 91       		.byte	0x91
 4163 034b B87F     		.sleb128 -72
 4164 034d 0D       		.uleb128 0xd
 4165 034e 4B030000 		.4byte	.LASF52
 4166 0352 01       		.byte	0x1
 4167 0353 4B       		.byte	0x4b
 4168 0354 97000000 		.4byte	0x97
 4169 0358 03       		.uleb128 0x3
 4170 0359 91       		.byte	0x91
 4171 035a A87F     		.sleb128 -88
 4172 035c 0D       		.uleb128 0xd
 4173 035d 56030000 		.4byte	.LASF53
 4174 0361 01       		.byte	0x1
 4175 0362 4B       		.byte	0x4b
 4176 0363 97000000 		.4byte	0x97
 4177 0367 03       		.uleb128 0x3
 4178 0368 91       		.byte	0x91
 4179 0369 B47F     		.sleb128 -76
 4180 036b 0D       		.uleb128 0xd
 4181 036c 25030000 		.4byte	.LASF54
 4182 0370 01       		.byte	0x1
 4183 0371 4C       		.byte	0x4c
 4184 0372 04010000 		.4byte	0x104
 4185 0376 03       		.uleb128 0x3
 4186 0377 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 120


 4187 0378 B37F     		.sleb128 -77
 4188 037a 0F       		.uleb128 0xf
 4189 037b 2E010000 		.4byte	0x12e
 4190 037f 44020000 		.4byte	.LBB66
 4191 0383 3C000000 		.4byte	.LBE66-.LBB66
 4192 0387 01       		.byte	0x1
 4193 0388 B5       		.byte	0xb5
 4194 0389 A9030000 		.4byte	0x3a9
 4195 038d 10       		.uleb128 0x10
 4196 038e 53010000 		.4byte	0x153
 4197 0392 03       		.uleb128 0x3
 4198 0393 91       		.byte	0x91
 4199 0394 907F     		.sleb128 -112
 4200 0396 10       		.uleb128 0x10
 4201 0397 49010000 		.4byte	0x149
 4202 039b 03       		.uleb128 0x3
 4203 039c 91       		.byte	0x91
 4204 039d 947F     		.sleb128 -108
 4205 039f 10       		.uleb128 0x10
 4206 03a0 3F010000 		.4byte	0x13f
 4207 03a4 03       		.uleb128 0x3
 4208 03a5 91       		.byte	0x91
 4209 03a6 987F     		.sleb128 -104
 4210 03a8 00       		.byte	0
 4211 03a9 0F       		.uleb128 0xf
 4212 03aa 60010000 		.4byte	0x160
 4213 03ae 80030000 		.4byte	.LBB68
 4214 03b2 3C000000 		.4byte	.LBE68-.LBB68
 4215 03b6 01       		.byte	0x1
 4216 03b7 DD       		.byte	0xdd
 4217 03b8 D8030000 		.4byte	0x3d8
 4218 03bc 10       		.uleb128 0x10
 4219 03bd 85010000 		.4byte	0x185
 4220 03c1 03       		.uleb128 0x3
 4221 03c2 91       		.byte	0x91
 4222 03c3 847F     		.sleb128 -124
 4223 03c5 10       		.uleb128 0x10
 4224 03c6 7B010000 		.4byte	0x17b
 4225 03ca 03       		.uleb128 0x3
 4226 03cb 91       		.byte	0x91
 4227 03cc 887F     		.sleb128 -120
 4228 03ce 10       		.uleb128 0x10
 4229 03cf 71010000 		.4byte	0x171
 4230 03d3 03       		.uleb128 0x3
 4231 03d4 91       		.byte	0x91
 4232 03d5 8C7F     		.sleb128 -116
 4233 03d7 00       		.byte	0
 4234 03d8 0F       		.uleb128 0xf
 4235 03d9 60010000 		.4byte	0x160
 4236 03dd 00040000 		.4byte	.LBB70
 4237 03e1 3C000000 		.4byte	.LBE70-.LBB70
 4238 03e5 01       		.byte	0x1
 4239 03e6 DF       		.byte	0xdf
 4240 03e7 07040000 		.4byte	0x407
 4241 03eb 10       		.uleb128 0x10
 4242 03ec 85010000 		.4byte	0x185
 4243 03f0 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 121


 4244 03f1 91       		.byte	0x91
 4245 03f2 F87E     		.sleb128 -136
 4246 03f4 10       		.uleb128 0x10
 4247 03f5 7B010000 		.4byte	0x17b
 4248 03f9 03       		.uleb128 0x3
 4249 03fa 91       		.byte	0x91
 4250 03fb FC7E     		.sleb128 -132
 4251 03fd 10       		.uleb128 0x10
 4252 03fe 71010000 		.4byte	0x171
 4253 0402 03       		.uleb128 0x3
 4254 0403 91       		.byte	0x91
 4255 0404 807F     		.sleb128 -128
 4256 0406 00       		.byte	0
 4257 0407 0F       		.uleb128 0xf
 4258 0408 2E010000 		.4byte	0x12e
 4259 040c B4040000 		.4byte	.LBB72
 4260 0410 3C000000 		.4byte	.LBE72-.LBB72
 4261 0414 01       		.byte	0x1
 4262 0415 F0       		.byte	0xf0
 4263 0416 36040000 		.4byte	0x436
 4264 041a 10       		.uleb128 0x10
 4265 041b 53010000 		.4byte	0x153
 4266 041f 03       		.uleb128 0x3
 4267 0420 91       		.byte	0x91
 4268 0421 EC7E     		.sleb128 -148
 4269 0423 10       		.uleb128 0x10
 4270 0424 49010000 		.4byte	0x149
 4271 0428 03       		.uleb128 0x3
 4272 0429 91       		.byte	0x91
 4273 042a F07E     		.sleb128 -144
 4274 042c 10       		.uleb128 0x10
 4275 042d 3F010000 		.4byte	0x13f
 4276 0431 03       		.uleb128 0x3
 4277 0432 91       		.byte	0x91
 4278 0433 F47E     		.sleb128 -140
 4279 0435 00       		.byte	0
 4280 0436 11       		.uleb128 0x11
 4281 0437 60010000 		.4byte	0x160
 4282 043b B6060000 		.4byte	.LBB74
 4283 043f 3C000000 		.4byte	.LBE74-.LBB74
 4284 0443 01       		.byte	0x1
 4285 0444 4A01     		.2byte	0x14a
 4286 0446 66040000 		.4byte	0x466
 4287 044a 10       		.uleb128 0x10
 4288 044b 85010000 		.4byte	0x185
 4289 044f 03       		.uleb128 0x3
 4290 0450 91       		.byte	0x91
 4291 0451 E07E     		.sleb128 -160
 4292 0453 10       		.uleb128 0x10
 4293 0454 7B010000 		.4byte	0x17b
 4294 0458 03       		.uleb128 0x3
 4295 0459 91       		.byte	0x91
 4296 045a E47E     		.sleb128 -156
 4297 045c 10       		.uleb128 0x10
 4298 045d 71010000 		.4byte	0x171
 4299 0461 03       		.uleb128 0x3
 4300 0462 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 122


 4301 0463 E87E     		.sleb128 -152
 4302 0465 00       		.byte	0
 4303 0466 11       		.uleb128 0x11
 4304 0467 60010000 		.4byte	0x160
 4305 046b 2A070000 		.4byte	.LBB76
 4306 046f 3C000000 		.4byte	.LBE76-.LBB76
 4307 0473 01       		.byte	0x1
 4308 0474 4D01     		.2byte	0x14d
 4309 0476 96040000 		.4byte	0x496
 4310 047a 10       		.uleb128 0x10
 4311 047b 85010000 		.4byte	0x185
 4312 047f 03       		.uleb128 0x3
 4313 0480 91       		.byte	0x91
 4314 0481 D47E     		.sleb128 -172
 4315 0483 10       		.uleb128 0x10
 4316 0484 7B010000 		.4byte	0x17b
 4317 0488 03       		.uleb128 0x3
 4318 0489 91       		.byte	0x91
 4319 048a D87E     		.sleb128 -168
 4320 048c 10       		.uleb128 0x10
 4321 048d 71010000 		.4byte	0x171
 4322 0491 03       		.uleb128 0x3
 4323 0492 91       		.byte	0x91
 4324 0493 DC7E     		.sleb128 -164
 4325 0495 00       		.byte	0
 4326 0496 11       		.uleb128 0x11
 4327 0497 60010000 		.4byte	0x160
 4328 049b BC070000 		.4byte	.LBB78
 4329 049f 3C000000 		.4byte	.LBE78-.LBB78
 4330 04a3 01       		.byte	0x1
 4331 04a4 5601     		.2byte	0x156
 4332 04a6 C6040000 		.4byte	0x4c6
 4333 04aa 10       		.uleb128 0x10
 4334 04ab 85010000 		.4byte	0x185
 4335 04af 03       		.uleb128 0x3
 4336 04b0 91       		.byte	0x91
 4337 04b1 C87E     		.sleb128 -184
 4338 04b3 10       		.uleb128 0x10
 4339 04b4 7B010000 		.4byte	0x17b
 4340 04b8 03       		.uleb128 0x3
 4341 04b9 91       		.byte	0x91
 4342 04ba CC7E     		.sleb128 -180
 4343 04bc 10       		.uleb128 0x10
 4344 04bd 71010000 		.4byte	0x171
 4345 04c1 03       		.uleb128 0x3
 4346 04c2 91       		.byte	0x91
 4347 04c3 D07E     		.sleb128 -176
 4348 04c5 00       		.byte	0
 4349 04c6 11       		.uleb128 0x11
 4350 04c7 60010000 		.4byte	0x160
 4351 04cb 30080000 		.4byte	.LBB80
 4352 04cf 3C000000 		.4byte	.LBE80-.LBB80
 4353 04d3 01       		.byte	0x1
 4354 04d4 5901     		.2byte	0x159
 4355 04d6 F6040000 		.4byte	0x4f6
 4356 04da 10       		.uleb128 0x10
 4357 04db 85010000 		.4byte	0x185
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 123


 4358 04df 03       		.uleb128 0x3
 4359 04e0 91       		.byte	0x91
 4360 04e1 BC7E     		.sleb128 -196
 4361 04e3 10       		.uleb128 0x10
 4362 04e4 7B010000 		.4byte	0x17b
 4363 04e8 03       		.uleb128 0x3
 4364 04e9 91       		.byte	0x91
 4365 04ea C07E     		.sleb128 -192
 4366 04ec 10       		.uleb128 0x10
 4367 04ed 71010000 		.4byte	0x171
 4368 04f1 03       		.uleb128 0x3
 4369 04f2 91       		.byte	0x91
 4370 04f3 C47E     		.sleb128 -188
 4371 04f5 00       		.byte	0
 4372 04f6 11       		.uleb128 0x11
 4373 04f7 60010000 		.4byte	0x160
 4374 04fb B8080000 		.4byte	.LBB82
 4375 04ff 3C000000 		.4byte	.LBE82-.LBB82
 4376 0503 01       		.byte	0x1
 4377 0504 5F01     		.2byte	0x15f
 4378 0506 26050000 		.4byte	0x526
 4379 050a 10       		.uleb128 0x10
 4380 050b 85010000 		.4byte	0x185
 4381 050f 03       		.uleb128 0x3
 4382 0510 91       		.byte	0x91
 4383 0511 B07E     		.sleb128 -208
 4384 0513 10       		.uleb128 0x10
 4385 0514 7B010000 		.4byte	0x17b
 4386 0518 03       		.uleb128 0x3
 4387 0519 91       		.byte	0x91
 4388 051a B47E     		.sleb128 -204
 4389 051c 10       		.uleb128 0x10
 4390 051d 71010000 		.4byte	0x171
 4391 0521 03       		.uleb128 0x3
 4392 0522 91       		.byte	0x91
 4393 0523 B87E     		.sleb128 -200
 4394 0525 00       		.byte	0
 4395 0526 11       		.uleb128 0x11
 4396 0527 60010000 		.4byte	0x160
 4397 052b 2C090000 		.4byte	.LBB84
 4398 052f 3C000000 		.4byte	.LBE84-.LBB84
 4399 0533 01       		.byte	0x1
 4400 0534 6201     		.2byte	0x162
 4401 0536 56050000 		.4byte	0x556
 4402 053a 10       		.uleb128 0x10
 4403 053b 85010000 		.4byte	0x185
 4404 053f 03       		.uleb128 0x3
 4405 0540 91       		.byte	0x91
 4406 0541 A47E     		.sleb128 -220
 4407 0543 10       		.uleb128 0x10
 4408 0544 7B010000 		.4byte	0x17b
 4409 0548 03       		.uleb128 0x3
 4410 0549 91       		.byte	0x91
 4411 054a A87E     		.sleb128 -216
 4412 054c 10       		.uleb128 0x10
 4413 054d 71010000 		.4byte	0x171
 4414 0551 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 124


 4415 0552 91       		.byte	0x91
 4416 0553 AC7E     		.sleb128 -212
 4417 0555 00       		.byte	0
 4418 0556 11       		.uleb128 0x11
 4419 0557 60010000 		.4byte	0x160
 4420 055b C0090000 		.4byte	.LBB86
 4421 055f 3C000000 		.4byte	.LBE86-.LBB86
 4422 0563 01       		.byte	0x1
 4423 0564 6C01     		.2byte	0x16c
 4424 0566 86050000 		.4byte	0x586
 4425 056a 10       		.uleb128 0x10
 4426 056b 85010000 		.4byte	0x185
 4427 056f 03       		.uleb128 0x3
 4428 0570 91       		.byte	0x91
 4429 0571 987E     		.sleb128 -232
 4430 0573 10       		.uleb128 0x10
 4431 0574 7B010000 		.4byte	0x17b
 4432 0578 03       		.uleb128 0x3
 4433 0579 91       		.byte	0x91
 4434 057a 9C7E     		.sleb128 -228
 4435 057c 10       		.uleb128 0x10
 4436 057d 71010000 		.4byte	0x171
 4437 0581 03       		.uleb128 0x3
 4438 0582 91       		.byte	0x91
 4439 0583 A07E     		.sleb128 -224
 4440 0585 00       		.byte	0
 4441 0586 11       		.uleb128 0x11
 4442 0587 60010000 		.4byte	0x160
 4443 058b 340A0000 		.4byte	.LBB88
 4444 058f 3C000000 		.4byte	.LBE88-.LBB88
 4445 0593 01       		.byte	0x1
 4446 0594 6F01     		.2byte	0x16f
 4447 0596 B6050000 		.4byte	0x5b6
 4448 059a 10       		.uleb128 0x10
 4449 059b 85010000 		.4byte	0x185
 4450 059f 03       		.uleb128 0x3
 4451 05a0 91       		.byte	0x91
 4452 05a1 8C7E     		.sleb128 -244
 4453 05a3 10       		.uleb128 0x10
 4454 05a4 7B010000 		.4byte	0x17b
 4455 05a8 03       		.uleb128 0x3
 4456 05a9 91       		.byte	0x91
 4457 05aa 907E     		.sleb128 -240
 4458 05ac 10       		.uleb128 0x10
 4459 05ad 71010000 		.4byte	0x171
 4460 05b1 03       		.uleb128 0x3
 4461 05b2 91       		.byte	0x91
 4462 05b3 947E     		.sleb128 -236
 4463 05b5 00       		.byte	0
 4464 05b6 11       		.uleb128 0x11
 4465 05b7 2E010000 		.4byte	0x12e
 4466 05bb 1A0B0000 		.4byte	.LBB90
 4467 05bf 36000000 		.4byte	.LBE90-.LBB90
 4468 05c3 01       		.byte	0x1
 4469 05c4 8D01     		.2byte	0x18d
 4470 05c6 E6050000 		.4byte	0x5e6
 4471 05ca 10       		.uleb128 0x10
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 125


 4472 05cb 53010000 		.4byte	0x153
 4473 05cf 03       		.uleb128 0x3
 4474 05d0 91       		.byte	0x91
 4475 05d1 807E     		.sleb128 -256
 4476 05d3 10       		.uleb128 0x10
 4477 05d4 49010000 		.4byte	0x149
 4478 05d8 03       		.uleb128 0x3
 4479 05d9 91       		.byte	0x91
 4480 05da 847E     		.sleb128 -252
 4481 05dc 10       		.uleb128 0x10
 4482 05dd 3F010000 		.4byte	0x13f
 4483 05e1 03       		.uleb128 0x3
 4484 05e2 91       		.byte	0x91
 4485 05e3 887E     		.sleb128 -248
 4486 05e5 00       		.byte	0
 4487 05e6 11       		.uleb128 0x11
 4488 05e7 2E010000 		.4byte	0x12e
 4489 05eb 820B0000 		.4byte	.LBB92
 4490 05ef 32000000 		.4byte	.LBE92-.LBB92
 4491 05f3 01       		.byte	0x1
 4492 05f4 8E01     		.2byte	0x18e
 4493 05f6 16060000 		.4byte	0x616
 4494 05fa 10       		.uleb128 0x10
 4495 05fb 53010000 		.4byte	0x153
 4496 05ff 03       		.uleb128 0x3
 4497 0600 91       		.byte	0x91
 4498 0601 F47D     		.sleb128 -268
 4499 0603 10       		.uleb128 0x10
 4500 0604 49010000 		.4byte	0x149
 4501 0608 03       		.uleb128 0x3
 4502 0609 91       		.byte	0x91
 4503 060a F87D     		.sleb128 -264
 4504 060c 10       		.uleb128 0x10
 4505 060d 3F010000 		.4byte	0x13f
 4506 0611 03       		.uleb128 0x3
 4507 0612 91       		.byte	0x91
 4508 0613 FC7D     		.sleb128 -260
 4509 0615 00       		.byte	0
 4510 0616 11       		.uleb128 0x11
 4511 0617 60010000 		.4byte	0x160
 4512 061b E60B0000 		.4byte	.LBB94
 4513 061f 32000000 		.4byte	.LBE94-.LBB94
 4514 0623 01       		.byte	0x1
 4515 0624 8F01     		.2byte	0x18f
 4516 0626 46060000 		.4byte	0x646
 4517 062a 10       		.uleb128 0x10
 4518 062b 85010000 		.4byte	0x185
 4519 062f 03       		.uleb128 0x3
 4520 0630 91       		.byte	0x91
 4521 0631 E87D     		.sleb128 -280
 4522 0633 10       		.uleb128 0x10
 4523 0634 7B010000 		.4byte	0x17b
 4524 0638 03       		.uleb128 0x3
 4525 0639 91       		.byte	0x91
 4526 063a EC7D     		.sleb128 -276
 4527 063c 10       		.uleb128 0x10
 4528 063d 71010000 		.4byte	0x171
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 126


 4529 0641 03       		.uleb128 0x3
 4530 0642 91       		.byte	0x91
 4531 0643 F07D     		.sleb128 -272
 4532 0645 00       		.byte	0
 4533 0646 11       		.uleb128 0x11
 4534 0647 60010000 		.4byte	0x160
 4535 064b 4A0C0000 		.4byte	.LBB96
 4536 064f 32000000 		.4byte	.LBE96-.LBB96
 4537 0653 01       		.byte	0x1
 4538 0654 9001     		.2byte	0x190
 4539 0656 76060000 		.4byte	0x676
 4540 065a 10       		.uleb128 0x10
 4541 065b 85010000 		.4byte	0x185
 4542 065f 03       		.uleb128 0x3
 4543 0660 91       		.byte	0x91
 4544 0661 DC7D     		.sleb128 -292
 4545 0663 10       		.uleb128 0x10
 4546 0664 7B010000 		.4byte	0x17b
 4547 0668 03       		.uleb128 0x3
 4548 0669 91       		.byte	0x91
 4549 066a E07D     		.sleb128 -288
 4550 066c 10       		.uleb128 0x10
 4551 066d 71010000 		.4byte	0x171
 4552 0671 03       		.uleb128 0x3
 4553 0672 91       		.byte	0x91
 4554 0673 E47D     		.sleb128 -284
 4555 0675 00       		.byte	0
 4556 0676 11       		.uleb128 0x11
 4557 0677 60010000 		.4byte	0x160
 4558 067b EC0C0000 		.4byte	.LBB98
 4559 067f 32000000 		.4byte	.LBE98-.LBB98
 4560 0683 01       		.byte	0x1
 4561 0684 A001     		.2byte	0x1a0
 4562 0686 A6060000 		.4byte	0x6a6
 4563 068a 10       		.uleb128 0x10
 4564 068b 85010000 		.4byte	0x185
 4565 068f 03       		.uleb128 0x3
 4566 0690 91       		.byte	0x91
 4567 0691 D07D     		.sleb128 -304
 4568 0693 10       		.uleb128 0x10
 4569 0694 7B010000 		.4byte	0x17b
 4570 0698 03       		.uleb128 0x3
 4571 0699 91       		.byte	0x91
 4572 069a D47D     		.sleb128 -300
 4573 069c 10       		.uleb128 0x10
 4574 069d 71010000 		.4byte	0x171
 4575 06a1 03       		.uleb128 0x3
 4576 06a2 91       		.byte	0x91
 4577 06a3 D87D     		.sleb128 -296
 4578 06a5 00       		.byte	0
 4579 06a6 11       		.uleb128 0x11
 4580 06a7 60010000 		.4byte	0x160
 4581 06ab 500D0000 		.4byte	.LBB100
 4582 06af 32000000 		.4byte	.LBE100-.LBB100
 4583 06b3 01       		.byte	0x1
 4584 06b4 A101     		.2byte	0x1a1
 4585 06b6 D6060000 		.4byte	0x6d6
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 127


 4586 06ba 10       		.uleb128 0x10
 4587 06bb 85010000 		.4byte	0x185
 4588 06bf 03       		.uleb128 0x3
 4589 06c0 91       		.byte	0x91
 4590 06c1 C47D     		.sleb128 -316
 4591 06c3 10       		.uleb128 0x10
 4592 06c4 7B010000 		.4byte	0x17b
 4593 06c8 03       		.uleb128 0x3
 4594 06c9 91       		.byte	0x91
 4595 06ca C87D     		.sleb128 -312
 4596 06cc 10       		.uleb128 0x10
 4597 06cd 71010000 		.4byte	0x171
 4598 06d1 03       		.uleb128 0x3
 4599 06d2 91       		.byte	0x91
 4600 06d3 CC7D     		.sleb128 -308
 4601 06d5 00       		.byte	0
 4602 06d6 11       		.uleb128 0x11
 4603 06d7 60010000 		.4byte	0x160
 4604 06db B40D0000 		.4byte	.LBB102
 4605 06df 32000000 		.4byte	.LBE102-.LBB102
 4606 06e3 01       		.byte	0x1
 4607 06e4 A201     		.2byte	0x1a2
 4608 06e6 06070000 		.4byte	0x706
 4609 06ea 10       		.uleb128 0x10
 4610 06eb 85010000 		.4byte	0x185
 4611 06ef 03       		.uleb128 0x3
 4612 06f0 91       		.byte	0x91
 4613 06f1 B87D     		.sleb128 -328
 4614 06f3 10       		.uleb128 0x10
 4615 06f4 7B010000 		.4byte	0x17b
 4616 06f8 03       		.uleb128 0x3
 4617 06f9 91       		.byte	0x91
 4618 06fa BC7D     		.sleb128 -324
 4619 06fc 10       		.uleb128 0x10
 4620 06fd 71010000 		.4byte	0x171
 4621 0701 03       		.uleb128 0x3
 4622 0702 91       		.byte	0x91
 4623 0703 C07D     		.sleb128 -320
 4624 0705 00       		.byte	0
 4625 0706 11       		.uleb128 0x11
 4626 0707 60010000 		.4byte	0x160
 4627 070b 180E0000 		.4byte	.LBB104
 4628 070f 32000000 		.4byte	.LBE104-.LBB104
 4629 0713 01       		.byte	0x1
 4630 0714 A301     		.2byte	0x1a3
 4631 0716 36070000 		.4byte	0x736
 4632 071a 10       		.uleb128 0x10
 4633 071b 85010000 		.4byte	0x185
 4634 071f 03       		.uleb128 0x3
 4635 0720 91       		.byte	0x91
 4636 0721 AC7D     		.sleb128 -340
 4637 0723 10       		.uleb128 0x10
 4638 0724 7B010000 		.4byte	0x17b
 4639 0728 03       		.uleb128 0x3
 4640 0729 91       		.byte	0x91
 4641 072a B07D     		.sleb128 -336
 4642 072c 10       		.uleb128 0x10
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 128


 4643 072d 71010000 		.4byte	0x171
 4644 0731 03       		.uleb128 0x3
 4645 0732 91       		.byte	0x91
 4646 0733 B47D     		.sleb128 -332
 4647 0735 00       		.byte	0
 4648 0736 11       		.uleb128 0x11
 4649 0737 60010000 		.4byte	0x160
 4650 073b B40E0000 		.4byte	.LBB106
 4651 073f 32000000 		.4byte	.LBE106-.LBB106
 4652 0743 01       		.byte	0x1
 4653 0744 B201     		.2byte	0x1b2
 4654 0746 66070000 		.4byte	0x766
 4655 074a 10       		.uleb128 0x10
 4656 074b 85010000 		.4byte	0x185
 4657 074f 03       		.uleb128 0x3
 4658 0750 91       		.byte	0x91
 4659 0751 A07D     		.sleb128 -352
 4660 0753 10       		.uleb128 0x10
 4661 0754 7B010000 		.4byte	0x17b
 4662 0758 03       		.uleb128 0x3
 4663 0759 91       		.byte	0x91
 4664 075a A47D     		.sleb128 -348
 4665 075c 10       		.uleb128 0x10
 4666 075d 71010000 		.4byte	0x171
 4667 0761 03       		.uleb128 0x3
 4668 0762 91       		.byte	0x91
 4669 0763 A87D     		.sleb128 -344
 4670 0765 00       		.byte	0
 4671 0766 11       		.uleb128 0x11
 4672 0767 60010000 		.4byte	0x160
 4673 076b 180F0000 		.4byte	.LBB108
 4674 076f 32000000 		.4byte	.LBE108-.LBB108
 4675 0773 01       		.byte	0x1
 4676 0774 B301     		.2byte	0x1b3
 4677 0776 96070000 		.4byte	0x796
 4678 077a 10       		.uleb128 0x10
 4679 077b 85010000 		.4byte	0x185
 4680 077f 03       		.uleb128 0x3
 4681 0780 91       		.byte	0x91
 4682 0781 947D     		.sleb128 -364
 4683 0783 10       		.uleb128 0x10
 4684 0784 7B010000 		.4byte	0x17b
 4685 0788 03       		.uleb128 0x3
 4686 0789 91       		.byte	0x91
 4687 078a 987D     		.sleb128 -360
 4688 078c 10       		.uleb128 0x10
 4689 078d 71010000 		.4byte	0x171
 4690 0791 03       		.uleb128 0x3
 4691 0792 91       		.byte	0x91
 4692 0793 9C7D     		.sleb128 -356
 4693 0795 00       		.byte	0
 4694 0796 11       		.uleb128 0x11
 4695 0797 60010000 		.4byte	0x160
 4696 079b 7C0F0000 		.4byte	.LBB110
 4697 079f 32000000 		.4byte	.LBE110-.LBB110
 4698 07a3 01       		.byte	0x1
 4699 07a4 B401     		.2byte	0x1b4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 129


 4700 07a6 C6070000 		.4byte	0x7c6
 4701 07aa 10       		.uleb128 0x10
 4702 07ab 85010000 		.4byte	0x185
 4703 07af 03       		.uleb128 0x3
 4704 07b0 91       		.byte	0x91
 4705 07b1 887D     		.sleb128 -376
 4706 07b3 10       		.uleb128 0x10
 4707 07b4 7B010000 		.4byte	0x17b
 4708 07b8 03       		.uleb128 0x3
 4709 07b9 91       		.byte	0x91
 4710 07ba 8C7D     		.sleb128 -372
 4711 07bc 10       		.uleb128 0x10
 4712 07bd 71010000 		.4byte	0x171
 4713 07c1 03       		.uleb128 0x3
 4714 07c2 91       		.byte	0x91
 4715 07c3 907D     		.sleb128 -368
 4716 07c5 00       		.byte	0
 4717 07c6 11       		.uleb128 0x11
 4718 07c7 60010000 		.4byte	0x160
 4719 07cb DC0F0000 		.4byte	.LBB112
 4720 07cf 2E000000 		.4byte	.LBE112-.LBB112
 4721 07d3 01       		.byte	0x1
 4722 07d4 B501     		.2byte	0x1b5
 4723 07d6 F6070000 		.4byte	0x7f6
 4724 07da 10       		.uleb128 0x10
 4725 07db 85010000 		.4byte	0x185
 4726 07df 03       		.uleb128 0x3
 4727 07e0 91       		.byte	0x91
 4728 07e1 FC7C     		.sleb128 -388
 4729 07e3 10       		.uleb128 0x10
 4730 07e4 7B010000 		.4byte	0x17b
 4731 07e8 03       		.uleb128 0x3
 4732 07e9 91       		.byte	0x91
 4733 07ea 807D     		.sleb128 -384
 4734 07ec 10       		.uleb128 0x10
 4735 07ed 71010000 		.4byte	0x171
 4736 07f1 03       		.uleb128 0x3
 4737 07f2 91       		.byte	0x91
 4738 07f3 847D     		.sleb128 -380
 4739 07f5 00       		.byte	0
 4740 07f6 11       		.uleb128 0x11
 4741 07f7 60010000 		.4byte	0x160
 4742 07fb 66100000 		.4byte	.LBB114
 4743 07ff 1E000000 		.4byte	.LBE114-.LBB114
 4744 0803 01       		.byte	0x1
 4745 0804 C501     		.2byte	0x1c5
 4746 0806 26080000 		.4byte	0x826
 4747 080a 10       		.uleb128 0x10
 4748 080b 85010000 		.4byte	0x185
 4749 080f 03       		.uleb128 0x3
 4750 0810 91       		.byte	0x91
 4751 0811 F07C     		.sleb128 -400
 4752 0813 10       		.uleb128 0x10
 4753 0814 7B010000 		.4byte	0x17b
 4754 0818 03       		.uleb128 0x3
 4755 0819 91       		.byte	0x91
 4756 081a F47C     		.sleb128 -396
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 130


 4757 081c 10       		.uleb128 0x10
 4758 081d 71010000 		.4byte	0x171
 4759 0821 03       		.uleb128 0x3
 4760 0822 91       		.byte	0x91
 4761 0823 F87C     		.sleb128 -392
 4762 0825 00       		.byte	0
 4763 0826 11       		.uleb128 0x11
 4764 0827 2E010000 		.4byte	0x12e
 4765 082b AA100000 		.4byte	.LBB116
 4766 082f 1E000000 		.4byte	.LBE116-.LBB116
 4767 0833 01       		.byte	0x1
 4768 0834 C601     		.2byte	0x1c6
 4769 0836 56080000 		.4byte	0x856
 4770 083a 10       		.uleb128 0x10
 4771 083b 53010000 		.4byte	0x153
 4772 083f 03       		.uleb128 0x3
 4773 0840 91       		.byte	0x91
 4774 0841 E47C     		.sleb128 -412
 4775 0843 10       		.uleb128 0x10
 4776 0844 49010000 		.4byte	0x149
 4777 0848 03       		.uleb128 0x3
 4778 0849 91       		.byte	0x91
 4779 084a E87C     		.sleb128 -408
 4780 084c 10       		.uleb128 0x10
 4781 084d 3F010000 		.4byte	0x13f
 4782 0851 03       		.uleb128 0x3
 4783 0852 91       		.byte	0x91
 4784 0853 EC7C     		.sleb128 -404
 4785 0855 00       		.byte	0
 4786 0856 11       		.uleb128 0x11
 4787 0857 60010000 		.4byte	0x160
 4788 085b EE100000 		.4byte	.LBB118
 4789 085f 1E000000 		.4byte	.LBE118-.LBB118
 4790 0863 01       		.byte	0x1
 4791 0864 C701     		.2byte	0x1c7
 4792 0866 86080000 		.4byte	0x886
 4793 086a 10       		.uleb128 0x10
 4794 086b 85010000 		.4byte	0x185
 4795 086f 03       		.uleb128 0x3
 4796 0870 91       		.byte	0x91
 4797 0871 D87C     		.sleb128 -424
 4798 0873 10       		.uleb128 0x10
 4799 0874 7B010000 		.4byte	0x17b
 4800 0878 03       		.uleb128 0x3
 4801 0879 91       		.byte	0x91
 4802 087a DC7C     		.sleb128 -420
 4803 087c 10       		.uleb128 0x10
 4804 087d 71010000 		.4byte	0x171
 4805 0881 03       		.uleb128 0x3
 4806 0882 91       		.byte	0x91
 4807 0883 E07C     		.sleb128 -416
 4808 0885 00       		.byte	0
 4809 0886 11       		.uleb128 0x11
 4810 0887 60010000 		.4byte	0x160
 4811 088b 32110000 		.4byte	.LBB120
 4812 088f 1E000000 		.4byte	.LBE120-.LBB120
 4813 0893 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 131


 4814 0894 C801     		.2byte	0x1c8
 4815 0896 B6080000 		.4byte	0x8b6
 4816 089a 10       		.uleb128 0x10
 4817 089b 85010000 		.4byte	0x185
 4818 089f 03       		.uleb128 0x3
 4819 08a0 91       		.byte	0x91
 4820 08a1 CC7C     		.sleb128 -436
 4821 08a3 10       		.uleb128 0x10
 4822 08a4 7B010000 		.4byte	0x17b
 4823 08a8 03       		.uleb128 0x3
 4824 08a9 91       		.byte	0x91
 4825 08aa D07C     		.sleb128 -432
 4826 08ac 10       		.uleb128 0x10
 4827 08ad 71010000 		.4byte	0x171
 4828 08b1 03       		.uleb128 0x3
 4829 08b2 91       		.byte	0x91
 4830 08b3 D47C     		.sleb128 -428
 4831 08b5 00       		.byte	0
 4832 08b6 11       		.uleb128 0x11
 4833 08b7 60010000 		.4byte	0x160
 4834 08bb 3E150000 		.4byte	.LBB122
 4835 08bf 1E000000 		.4byte	.LBE122-.LBB122
 4836 08c3 01       		.byte	0x1
 4837 08c4 7002     		.2byte	0x270
 4838 08c6 E6080000 		.4byte	0x8e6
 4839 08ca 10       		.uleb128 0x10
 4840 08cb 85010000 		.4byte	0x185
 4841 08cf 03       		.uleb128 0x3
 4842 08d0 91       		.byte	0x91
 4843 08d1 C07C     		.sleb128 -448
 4844 08d3 10       		.uleb128 0x10
 4845 08d4 7B010000 		.4byte	0x17b
 4846 08d8 03       		.uleb128 0x3
 4847 08d9 91       		.byte	0x91
 4848 08da C47C     		.sleb128 -444
 4849 08dc 10       		.uleb128 0x10
 4850 08dd 71010000 		.4byte	0x171
 4851 08e1 03       		.uleb128 0x3
 4852 08e2 91       		.byte	0x91
 4853 08e3 C87C     		.sleb128 -440
 4854 08e5 00       		.byte	0
 4855 08e6 11       		.uleb128 0x11
 4856 08e7 60010000 		.4byte	0x160
 4857 08eb 8E150000 		.4byte	.LBB124
 4858 08ef 1E000000 		.4byte	.LBE124-.LBB124
 4859 08f3 01       		.byte	0x1
 4860 08f4 7302     		.2byte	0x273
 4861 08f6 16090000 		.4byte	0x916
 4862 08fa 10       		.uleb128 0x10
 4863 08fb 85010000 		.4byte	0x185
 4864 08ff 03       		.uleb128 0x3
 4865 0900 91       		.byte	0x91
 4866 0901 B47C     		.sleb128 -460
 4867 0903 10       		.uleb128 0x10
 4868 0904 7B010000 		.4byte	0x17b
 4869 0908 03       		.uleb128 0x3
 4870 0909 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 132


 4871 090a B87C     		.sleb128 -456
 4872 090c 10       		.uleb128 0x10
 4873 090d 71010000 		.4byte	0x171
 4874 0911 03       		.uleb128 0x3
 4875 0912 91       		.byte	0x91
 4876 0913 BC7C     		.sleb128 -452
 4877 0915 00       		.byte	0
 4878 0916 11       		.uleb128 0x11
 4879 0917 2E010000 		.4byte	0x12e
 4880 091b 10160000 		.4byte	.LBB126
 4881 091f 1E000000 		.4byte	.LBE126-.LBB126
 4882 0923 01       		.byte	0x1
 4883 0924 8402     		.2byte	0x284
 4884 0926 46090000 		.4byte	0x946
 4885 092a 10       		.uleb128 0x10
 4886 092b 53010000 		.4byte	0x153
 4887 092f 03       		.uleb128 0x3
 4888 0930 91       		.byte	0x91
 4889 0931 A87C     		.sleb128 -472
 4890 0933 10       		.uleb128 0x10
 4891 0934 49010000 		.4byte	0x149
 4892 0938 03       		.uleb128 0x3
 4893 0939 91       		.byte	0x91
 4894 093a AC7C     		.sleb128 -468
 4895 093c 10       		.uleb128 0x10
 4896 093d 3F010000 		.4byte	0x13f
 4897 0941 03       		.uleb128 0x3
 4898 0942 91       		.byte	0x91
 4899 0943 B07C     		.sleb128 -464
 4900 0945 00       		.byte	0
 4901 0946 12       		.uleb128 0x12
 4902 0947 2E010000 		.4byte	0x12e
 4903 094b 24170000 		.4byte	.LBB128
 4904 094f 1E000000 		.4byte	.LBE128-.LBB128
 4905 0953 01       		.byte	0x1
 4906 0954 AB02     		.2byte	0x2ab
 4907 0956 10       		.uleb128 0x10
 4908 0957 53010000 		.4byte	0x153
 4909 095b 03       		.uleb128 0x3
 4910 095c 91       		.byte	0x91
 4911 095d 9C7C     		.sleb128 -484
 4912 095f 10       		.uleb128 0x10
 4913 0960 49010000 		.4byte	0x149
 4914 0964 03       		.uleb128 0x3
 4915 0965 91       		.byte	0x91
 4916 0966 A07C     		.sleb128 -480
 4917 0968 10       		.uleb128 0x10
 4918 0969 3F010000 		.4byte	0x13f
 4919 096d 03       		.uleb128 0x3
 4920 096e 91       		.byte	0x91
 4921 096f A47C     		.sleb128 -476
 4922 0971 00       		.byte	0
 4923 0972 00       		.byte	0
 4924 0973 00       		.byte	0
 4925              		.section	.debug_abbrev,"",%progbits
 4926              	.Ldebug_abbrev0:
 4927 0000 01       		.uleb128 0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 133


 4928 0001 11       		.uleb128 0x11
 4929 0002 01       		.byte	0x1
 4930 0003 25       		.uleb128 0x25
 4931 0004 0E       		.uleb128 0xe
 4932 0005 13       		.uleb128 0x13
 4933 0006 0B       		.uleb128 0xb
 4934 0007 03       		.uleb128 0x3
 4935 0008 0E       		.uleb128 0xe
 4936 0009 1B       		.uleb128 0x1b
 4937 000a 0E       		.uleb128 0xe
 4938 000b 55       		.uleb128 0x55
 4939 000c 17       		.uleb128 0x17
 4940 000d 11       		.uleb128 0x11
 4941 000e 01       		.uleb128 0x1
 4942 000f 10       		.uleb128 0x10
 4943 0010 17       		.uleb128 0x17
 4944 0011 00       		.byte	0
 4945 0012 00       		.byte	0
 4946 0013 02       		.uleb128 0x2
 4947 0014 24       		.uleb128 0x24
 4948 0015 00       		.byte	0
 4949 0016 0B       		.uleb128 0xb
 4950 0017 0B       		.uleb128 0xb
 4951 0018 3E       		.uleb128 0x3e
 4952 0019 0B       		.uleb128 0xb
 4953 001a 03       		.uleb128 0x3
 4954 001b 0E       		.uleb128 0xe
 4955 001c 00       		.byte	0
 4956 001d 00       		.byte	0
 4957 001e 03       		.uleb128 0x3
 4958 001f 16       		.uleb128 0x16
 4959 0020 00       		.byte	0
 4960 0021 03       		.uleb128 0x3
 4961 0022 0E       		.uleb128 0xe
 4962 0023 3A       		.uleb128 0x3a
 4963 0024 0B       		.uleb128 0xb
 4964 0025 3B       		.uleb128 0x3b
 4965 0026 0B       		.uleb128 0xb
 4966 0027 49       		.uleb128 0x49
 4967 0028 13       		.uleb128 0x13
 4968 0029 00       		.byte	0
 4969 002a 00       		.byte	0
 4970 002b 04       		.uleb128 0x4
 4971 002c 24       		.uleb128 0x24
 4972 002d 00       		.byte	0
 4973 002e 0B       		.uleb128 0xb
 4974 002f 0B       		.uleb128 0xb
 4975 0030 3E       		.uleb128 0x3e
 4976 0031 0B       		.uleb128 0xb
 4977 0032 03       		.uleb128 0x3
 4978 0033 08       		.uleb128 0x8
 4979 0034 00       		.byte	0
 4980 0035 00       		.byte	0
 4981 0036 05       		.uleb128 0x5
 4982 0037 04       		.uleb128 0x4
 4983 0038 01       		.byte	0x1
 4984 0039 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 134


 4985 003a 0B       		.uleb128 0xb
 4986 003b 3A       		.uleb128 0x3a
 4987 003c 0B       		.uleb128 0xb
 4988 003d 3B       		.uleb128 0x3b
 4989 003e 05       		.uleb128 0x5
 4990 003f 01       		.uleb128 0x1
 4991 0040 13       		.uleb128 0x13
 4992 0041 00       		.byte	0
 4993 0042 00       		.byte	0
 4994 0043 06       		.uleb128 0x6
 4995 0044 28       		.uleb128 0x28
 4996 0045 00       		.byte	0
 4997 0046 03       		.uleb128 0x3
 4998 0047 0E       		.uleb128 0xe
 4999 0048 1C       		.uleb128 0x1c
 5000 0049 0D       		.uleb128 0xd
 5001 004a 00       		.byte	0
 5002 004b 00       		.byte	0
 5003 004c 07       		.uleb128 0x7
 5004 004d 16       		.uleb128 0x16
 5005 004e 00       		.byte	0
 5006 004f 03       		.uleb128 0x3
 5007 0050 0E       		.uleb128 0xe
 5008 0051 3A       		.uleb128 0x3a
 5009 0052 0B       		.uleb128 0xb
 5010 0053 3B       		.uleb128 0x3b
 5011 0054 05       		.uleb128 0x5
 5012 0055 49       		.uleb128 0x49
 5013 0056 13       		.uleb128 0x13
 5014 0057 00       		.byte	0
 5015 0058 00       		.byte	0
 5016 0059 08       		.uleb128 0x8
 5017 005a 0F       		.uleb128 0xf
 5018 005b 00       		.byte	0
 5019 005c 0B       		.uleb128 0xb
 5020 005d 0B       		.uleb128 0xb
 5021 005e 49       		.uleb128 0x49
 5022 005f 13       		.uleb128 0x13
 5023 0060 00       		.byte	0
 5024 0061 00       		.byte	0
 5025 0062 09       		.uleb128 0x9
 5026 0063 2E       		.uleb128 0x2e
 5027 0064 01       		.byte	0x1
 5028 0065 03       		.uleb128 0x3
 5029 0066 0E       		.uleb128 0xe
 5030 0067 3A       		.uleb128 0x3a
 5031 0068 0B       		.uleb128 0xb
 5032 0069 3B       		.uleb128 0x3b
 5033 006a 05       		.uleb128 0x5
 5034 006b 27       		.uleb128 0x27
 5035 006c 19       		.uleb128 0x19
 5036 006d 49       		.uleb128 0x49
 5037 006e 13       		.uleb128 0x13
 5038 006f 20       		.uleb128 0x20
 5039 0070 0B       		.uleb128 0xb
 5040 0071 01       		.uleb128 0x1
 5041 0072 13       		.uleb128 0x13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 135


 5042 0073 00       		.byte	0
 5043 0074 00       		.byte	0
 5044 0075 0A       		.uleb128 0xa
 5045 0076 05       		.uleb128 0x5
 5046 0077 00       		.byte	0
 5047 0078 03       		.uleb128 0x3
 5048 0079 08       		.uleb128 0x8
 5049 007a 3A       		.uleb128 0x3a
 5050 007b 0B       		.uleb128 0xb
 5051 007c 3B       		.uleb128 0x3b
 5052 007d 05       		.uleb128 0x5
 5053 007e 49       		.uleb128 0x49
 5054 007f 13       		.uleb128 0x13
 5055 0080 00       		.byte	0
 5056 0081 00       		.byte	0
 5057 0082 0B       		.uleb128 0xb
 5058 0083 2E       		.uleb128 0x2e
 5059 0084 01       		.byte	0x1
 5060 0085 3F       		.uleb128 0x3f
 5061 0086 19       		.uleb128 0x19
 5062 0087 03       		.uleb128 0x3
 5063 0088 0E       		.uleb128 0xe
 5064 0089 3A       		.uleb128 0x3a
 5065 008a 0B       		.uleb128 0xb
 5066 008b 3B       		.uleb128 0x3b
 5067 008c 0B       		.uleb128 0xb
 5068 008d 27       		.uleb128 0x27
 5069 008e 19       		.uleb128 0x19
 5070 008f 49       		.uleb128 0x49
 5071 0090 13       		.uleb128 0x13
 5072 0091 11       		.uleb128 0x11
 5073 0092 01       		.uleb128 0x1
 5074 0093 12       		.uleb128 0x12
 5075 0094 06       		.uleb128 0x6
 5076 0095 40       		.uleb128 0x40
 5077 0096 18       		.uleb128 0x18
 5078 0097 9742     		.uleb128 0x2117
 5079 0099 19       		.uleb128 0x19
 5080 009a 00       		.byte	0
 5081 009b 00       		.byte	0
 5082 009c 0C       		.uleb128 0xc
 5083 009d 05       		.uleb128 0x5
 5084 009e 00       		.byte	0
 5085 009f 03       		.uleb128 0x3
 5086 00a0 0E       		.uleb128 0xe
 5087 00a1 3A       		.uleb128 0x3a
 5088 00a2 0B       		.uleb128 0xb
 5089 00a3 3B       		.uleb128 0x3b
 5090 00a4 0B       		.uleb128 0xb
 5091 00a5 49       		.uleb128 0x49
 5092 00a6 13       		.uleb128 0x13
 5093 00a7 02       		.uleb128 0x2
 5094 00a8 18       		.uleb128 0x18
 5095 00a9 00       		.byte	0
 5096 00aa 00       		.byte	0
 5097 00ab 0D       		.uleb128 0xd
 5098 00ac 34       		.uleb128 0x34
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 136


 5099 00ad 00       		.byte	0
 5100 00ae 03       		.uleb128 0x3
 5101 00af 0E       		.uleb128 0xe
 5102 00b0 3A       		.uleb128 0x3a
 5103 00b1 0B       		.uleb128 0xb
 5104 00b2 3B       		.uleb128 0x3b
 5105 00b3 0B       		.uleb128 0xb
 5106 00b4 49       		.uleb128 0x49
 5107 00b5 13       		.uleb128 0x13
 5108 00b6 02       		.uleb128 0x2
 5109 00b7 18       		.uleb128 0x18
 5110 00b8 00       		.byte	0
 5111 00b9 00       		.byte	0
 5112 00ba 0E       		.uleb128 0xe
 5113 00bb 34       		.uleb128 0x34
 5114 00bc 00       		.byte	0
 5115 00bd 03       		.uleb128 0x3
 5116 00be 08       		.uleb128 0x8
 5117 00bf 3A       		.uleb128 0x3a
 5118 00c0 0B       		.uleb128 0xb
 5119 00c1 3B       		.uleb128 0x3b
 5120 00c2 0B       		.uleb128 0xb
 5121 00c3 49       		.uleb128 0x49
 5122 00c4 13       		.uleb128 0x13
 5123 00c5 02       		.uleb128 0x2
 5124 00c6 18       		.uleb128 0x18
 5125 00c7 00       		.byte	0
 5126 00c8 00       		.byte	0
 5127 00c9 0F       		.uleb128 0xf
 5128 00ca 1D       		.uleb128 0x1d
 5129 00cb 01       		.byte	0x1
 5130 00cc 31       		.uleb128 0x31
 5131 00cd 13       		.uleb128 0x13
 5132 00ce 11       		.uleb128 0x11
 5133 00cf 01       		.uleb128 0x1
 5134 00d0 12       		.uleb128 0x12
 5135 00d1 06       		.uleb128 0x6
 5136 00d2 58       		.uleb128 0x58
 5137 00d3 0B       		.uleb128 0xb
 5138 00d4 59       		.uleb128 0x59
 5139 00d5 0B       		.uleb128 0xb
 5140 00d6 01       		.uleb128 0x1
 5141 00d7 13       		.uleb128 0x13
 5142 00d8 00       		.byte	0
 5143 00d9 00       		.byte	0
 5144 00da 10       		.uleb128 0x10
 5145 00db 05       		.uleb128 0x5
 5146 00dc 00       		.byte	0
 5147 00dd 31       		.uleb128 0x31
 5148 00de 13       		.uleb128 0x13
 5149 00df 02       		.uleb128 0x2
 5150 00e0 18       		.uleb128 0x18
 5151 00e1 00       		.byte	0
 5152 00e2 00       		.byte	0
 5153 00e3 11       		.uleb128 0x11
 5154 00e4 1D       		.uleb128 0x1d
 5155 00e5 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 137


 5156 00e6 31       		.uleb128 0x31
 5157 00e7 13       		.uleb128 0x13
 5158 00e8 11       		.uleb128 0x11
 5159 00e9 01       		.uleb128 0x1
 5160 00ea 12       		.uleb128 0x12
 5161 00eb 06       		.uleb128 0x6
 5162 00ec 58       		.uleb128 0x58
 5163 00ed 0B       		.uleb128 0xb
 5164 00ee 59       		.uleb128 0x59
 5165 00ef 05       		.uleb128 0x5
 5166 00f0 01       		.uleb128 0x1
 5167 00f1 13       		.uleb128 0x13
 5168 00f2 00       		.byte	0
 5169 00f3 00       		.byte	0
 5170 00f4 12       		.uleb128 0x12
 5171 00f5 1D       		.uleb128 0x1d
 5172 00f6 01       		.byte	0x1
 5173 00f7 31       		.uleb128 0x31
 5174 00f8 13       		.uleb128 0x13
 5175 00f9 11       		.uleb128 0x11
 5176 00fa 01       		.uleb128 0x1
 5177 00fb 12       		.uleb128 0x12
 5178 00fc 06       		.uleb128 0x6
 5179 00fd 58       		.uleb128 0x58
 5180 00fe 0B       		.uleb128 0xb
 5181 00ff 59       		.uleb128 0x59
 5182 0100 05       		.uleb128 0x5
 5183 0101 00       		.byte	0
 5184 0102 00       		.byte	0
 5185 0103 00       		.byte	0
 5186              		.section	.debug_aranges,"",%progbits
 5187 0000 1C000000 		.4byte	0x1c
 5188 0004 0200     		.2byte	0x2
 5189 0006 00000000 		.4byte	.Ldebug_info0
 5190 000a 04       		.byte	0x4
 5191 000b 00       		.byte	0
 5192 000c 0000     		.2byte	0
 5193 000e 0000     		.2byte	0
 5194 0010 00000000 		.4byte	.LFB82
 5195 0014 F4170000 		.4byte	.LFE82-.LFB82
 5196 0018 00000000 		.4byte	0
 5197 001c 00000000 		.4byte	0
 5198              		.section	.debug_ranges,"",%progbits
 5199              	.Ldebug_ranges0:
 5200 0000 00000000 		.4byte	.LFB82
 5201 0004 F4170000 		.4byte	.LFE82
 5202 0008 00000000 		.4byte	0
 5203 000c 00000000 		.4byte	0
 5204              		.section	.debug_line,"",%progbits
 5205              	.Ldebug_line0:
 5206 0000 10060000 		.section	.debug_str,"MS",%progbits,1
 5206      02005C01 
 5206      00000201 
 5206      FB0E0D00 
 5206      01010101 
 5207              	.LASF48:
 5208 0000 636F756E 		.ascii	"count\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 138


 5208      7400
 5209              	.LASF42:
 5210 0006 61636330 		.ascii	"acc0\000"
 5210      00
 5211              	.LASF43:
 5212 000b 61636331 		.ascii	"acc1\000"
 5212      00
 5213              	.LASF44:
 5214 0010 61636332 		.ascii	"acc2\000"
 5214      00
 5215              	.LASF45:
 5216 0015 61636333 		.ascii	"acc3\000"
 5216      00
 5217              	.LASF20:
 5218 001a 41524D5F 		.ascii	"ARM_MATH_SUCCESS\000"
 5218      4D415448 
 5218      5F535543 
 5218      43455353 
 5218      00
 5219              	.LASF10:
 5220 002b 6C6F6E67 		.ascii	"long long unsigned int\000"
 5220      206C6F6E 
 5220      6720756E 
 5220      7369676E 
 5220      65642069 
 5221              	.LASF50:
 5222 0042 626C6B43 		.ascii	"blkCnt\000"
 5222      6E7400
 5223              	.LASF37:
 5224 0049 66697273 		.ascii	"firstIndex\000"
 5224      74496E64 
 5224      657800
 5225              	.LASF56:
 5226 0054 536F7572 		.ascii	"Source\\FilteringFunctions\\arm_conv_partial_fast_q"
 5226      63655C46 
 5226      696C7465 
 5226      72696E67 
 5226      46756E63 
 5227 0085 31352E63 		.ascii	"15.c\000"
 5227      00
 5228              	.LASF12:
 5229 008a 696E7431 		.ascii	"int16_t\000"
 5229      365F7400 
 5230              	.LASF9:
 5231 0092 6C6F6E67 		.ascii	"long long int\000"
 5231      206C6F6E 
 5231      6720696E 
 5231      7400
 5232              	.LASF0:
 5233 00a0 7369676E 		.ascii	"signed char\000"
 5233      65642063 
 5233      68617200 
 5234              	.LASF6:
 5235 00ac 6C6F6E67 		.ascii	"long int\000"
 5235      20696E74 
 5235      00
 5236              	.LASF49:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 139


 5237 00b5 63686563 		.ascii	"check\000"
 5237      6B00
 5238              	.LASF36:
 5239 00bb 70447374 		.ascii	"pDst\000"
 5239      00
 5240              	.LASF28:
 5241 00c0 7131355F 		.ascii	"q15_t\000"
 5241      7400
 5242              	.LASF47:
 5243 00c6 70537263 		.ascii	"pSrc2\000"
 5243      3200
 5244              	.LASF17:
 5245 00cc 646F7562 		.ascii	"double\000"
 5245      6C6500
 5246              	.LASF32:
 5247 00d3 70537263 		.ascii	"pSrcA\000"
 5247      4100
 5248              	.LASF34:
 5249 00d9 70537263 		.ascii	"pSrcB\000"
 5249      4200
 5250              	.LASF7:
 5251 00df 5F5F7569 		.ascii	"__uint32_t\000"
 5251      6E743332 
 5251      5F7400
 5252              	.LASF4:
 5253 00ea 5F5F696E 		.ascii	"__int16_t\000"
 5253      7431365F 
 5253      7400
 5254              	.LASF11:
 5255 00f4 756E7369 		.ascii	"unsigned int\000"
 5255      676E6564 
 5255      20696E74 
 5255      00
 5256              	.LASF8:
 5257 0101 6C6F6E67 		.ascii	"long unsigned int\000"
 5257      20756E73 
 5257      69676E65 
 5257      6420696E 
 5257      7400
 5258              	.LASF55:
 5259 0113 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 5259      4320342E 
 5259      392E3320 
 5259      32303135 
 5259      30333033 
 5260 0146 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 5260      20726576 
 5260      6973696F 
 5260      6E203232 
 5260      31323230 
 5261 0179 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 5261      30202D66 
 5261      66756E63 
 5261      74696F6E 
 5261      2D736563 
 5262              	.LASF3:
 5263 01a5 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 140


 5263      7420756E 
 5263      7369676E 
 5263      65642069 
 5263      6E7400
 5264              	.LASF26:
 5265 01b8 41524D5F 		.ascii	"ARM_MATH_TEST_FAILURE\000"
 5265      4D415448 
 5265      5F544553 
 5265      545F4641 
 5265      494C5552 
 5266              	.LASF41:
 5267 01ce 704F7574 		.ascii	"pOut\000"
 5267      00
 5268              	.LASF38:
 5269 01d3 6E756D50 		.ascii	"numPoints\000"
 5269      6F696E74 
 5269      7300
 5270              	.LASF15:
 5271 01dd 73697A65 		.ascii	"sizetype\000"
 5271      74797065 
 5271      00
 5272              	.LASF19:
 5273 01e6 6C6F6E67 		.ascii	"long double\000"
 5273      20646F75 
 5273      626C6500 
 5274              	.LASF39:
 5275 01f2 70496E31 		.ascii	"pIn1\000"
 5275      00
 5276              	.LASF40:
 5277 01f7 70496E32 		.ascii	"pIn2\000"
 5277      00
 5278              	.LASF46:
 5279 01fc 70537263 		.ascii	"pSrc1\000"
 5279      3100
 5280              	.LASF22:
 5281 0202 41524D5F 		.ascii	"ARM_MATH_LENGTH_ERROR\000"
 5281      4D415448 
 5281      5F4C454E 
 5281      4754485F 
 5281      4552524F 
 5282              	.LASF18:
 5283 0218 666C6F61 		.ascii	"float\000"
 5283      7400
 5284              	.LASF25:
 5285 021e 41524D5F 		.ascii	"ARM_MATH_SINGULAR\000"
 5285      4D415448 
 5285      5F53494E 
 5285      47554C41 
 5285      5200
 5286              	.LASF58:
 5287 0230 61726D5F 		.ascii	"arm_conv_partial_fast_q15\000"
 5287      636F6E76 
 5287      5F706172 
 5287      7469616C 
 5287      5F666173 
 5288              	.LASF35:
 5289 024a 73726342 		.ascii	"srcBLen\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 141


 5289      4C656E00 
 5290              	.LASF24:
 5291 0252 41524D5F 		.ascii	"ARM_MATH_NANINF\000"
 5291      4D415448 
 5291      5F4E414E 
 5291      494E4600 
 5292              	.LASF13:
 5293 0262 696E7433 		.ascii	"int32_t\000"
 5293      325F7400 
 5294              	.LASF1:
 5295 026a 756E7369 		.ascii	"unsigned char\000"
 5295      676E6564 
 5295      20636861 
 5295      7200
 5296              	.LASF2:
 5297 0278 73686F72 		.ascii	"short int\000"
 5297      7420696E 
 5297      7400
 5298              	.LASF21:
 5299 0282 41524D5F 		.ascii	"ARM_MATH_ARGUMENT_ERROR\000"
 5299      4D415448 
 5299      5F415247 
 5299      554D454E 
 5299      545F4552 
 5300              	.LASF57:
 5301 029a 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 5301      73657273 
 5301      5C666E65 
 5301      7665735C 
 5301      446F6375 
 5302 02c7 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 5302      655F7370 
 5302      6565645F 
 5302      73656E73 
 5302      6F722E63 
 5303              	.LASF29:
 5304 02e0 7133315F 		.ascii	"q31_t\000"
 5304      7400
 5305              	.LASF33:
 5306 02e6 73726341 		.ascii	"srcALen\000"
 5306      4C656E00 
 5307              	.LASF14:
 5308 02ee 75696E74 		.ascii	"uint32_t\000"
 5308      33325F74 
 5308      00
 5309              	.LASF16:
 5310 02f7 63686172 		.ascii	"char\000"
 5310      00
 5311              	.LASF23:
 5312 02fc 41524D5F 		.ascii	"ARM_MATH_SIZE_MISMATCH\000"
 5312      4D415448 
 5312      5F53495A 
 5312      455F4D49 
 5312      534D4154 
 5313              	.LASF5:
 5314 0313 5F5F696E 		.ascii	"__int32_t\000"
 5314      7433325F 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccnUCkoz.s 			page 142


 5314      7400
 5315              	.LASF30:
 5316 031d 5F5F534D 		.ascii	"__SMLAD\000"
 5316      4C414400 
 5317              	.LASF54:
 5318 0325 73746174 		.ascii	"status\000"
 5318      757300
 5319              	.LASF27:
 5320 032c 61726D5F 		.ascii	"arm_status\000"
 5320      73746174 
 5320      757300
 5321              	.LASF31:
 5322 0337 5F5F534D 		.ascii	"__SMLADX\000"
 5322      4C414458 
 5322      00
 5323              	.LASF51:
 5324 0340 626C6F63 		.ascii	"blockSize1\000"
 5324      6B53697A 
 5324      653100
 5325              	.LASF52:
 5326 034b 626C6F63 		.ascii	"blockSize2\000"
 5326      6B53697A 
 5326      653200
 5327              	.LASF53:
 5328 0356 626C6F63 		.ascii	"blockSize3\000"
 5328      6B53697A 
 5328      653300
 5329              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
