ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_rms_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_ldivmod
  18              		.section	.text.arm_rms_q15,"ax",%progbits
  19              		.align	2
  20              		.global	arm_rms_q15
  21              		.code	16
  22              		.thumb_func
  23              		.type	arm_rms_q15, %function
  24              	arm_rms_q15:
  25              	.LFB82:
  26              		.file 1 "Source\\StatisticsFunctions\\arm_rms_q15.c"
   1:Source\StatisticsFunctions/arm_rms_q15.c **** /* ----------------------------------------------------------------------
   2:Source\StatisticsFunctions/arm_rms_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\StatisticsFunctions/arm_rms_q15.c ****  * Title:        arm_rms_q15.c
   4:Source\StatisticsFunctions/arm_rms_q15.c ****  * Description:  Root Mean Square of the elements of a Q15 vector
   5:Source\StatisticsFunctions/arm_rms_q15.c ****  *
   6:Source\StatisticsFunctions/arm_rms_q15.c ****  * $Date:        27. January 2017
   7:Source\StatisticsFunctions/arm_rms_q15.c ****  * $Revision:    V.1.5.1
   8:Source\StatisticsFunctions/arm_rms_q15.c ****  *
   9:Source\StatisticsFunctions/arm_rms_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\StatisticsFunctions/arm_rms_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\StatisticsFunctions/arm_rms_q15.c **** /*
  12:Source\StatisticsFunctions/arm_rms_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\StatisticsFunctions/arm_rms_q15.c ****  *
  14:Source\StatisticsFunctions/arm_rms_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\StatisticsFunctions/arm_rms_q15.c ****  *
  16:Source\StatisticsFunctions/arm_rms_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\StatisticsFunctions/arm_rms_q15.c ****  * not use this file except in compliance with the License.
  18:Source\StatisticsFunctions/arm_rms_q15.c ****  * You may obtain a copy of the License at
  19:Source\StatisticsFunctions/arm_rms_q15.c ****  *
  20:Source\StatisticsFunctions/arm_rms_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\StatisticsFunctions/arm_rms_q15.c ****  *
  22:Source\StatisticsFunctions/arm_rms_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\StatisticsFunctions/arm_rms_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\StatisticsFunctions/arm_rms_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\StatisticsFunctions/arm_rms_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\StatisticsFunctions/arm_rms_q15.c ****  * limitations under the License.
  27:Source\StatisticsFunctions/arm_rms_q15.c ****  */
  28:Source\StatisticsFunctions/arm_rms_q15.c **** 
  29:Source\StatisticsFunctions/arm_rms_q15.c **** #include "arm_math.h"
  30:Source\StatisticsFunctions/arm_rms_q15.c **** 
  31:Source\StatisticsFunctions/arm_rms_q15.c **** /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 2


  32:Source\StatisticsFunctions/arm_rms_q15.c ****  * @addtogroup RMS
  33:Source\StatisticsFunctions/arm_rms_q15.c ****  * @{
  34:Source\StatisticsFunctions/arm_rms_q15.c ****  */
  35:Source\StatisticsFunctions/arm_rms_q15.c **** 
  36:Source\StatisticsFunctions/arm_rms_q15.c **** /**
  37:Source\StatisticsFunctions/arm_rms_q15.c ****  * @brief Root Mean Square of the elements of a Q15 vector.
  38:Source\StatisticsFunctions/arm_rms_q15.c ****  * @param[in]       *pSrc points to the input vector
  39:Source\StatisticsFunctions/arm_rms_q15.c ****  * @param[in]       blockSize length of the input vector
  40:Source\StatisticsFunctions/arm_rms_q15.c ****  * @param[out]      *pResult rms value returned here
  41:Source\StatisticsFunctions/arm_rms_q15.c ****  * @return none.
  42:Source\StatisticsFunctions/arm_rms_q15.c ****  *
  43:Source\StatisticsFunctions/arm_rms_q15.c ****  * @details
  44:Source\StatisticsFunctions/arm_rms_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  45:Source\StatisticsFunctions/arm_rms_q15.c ****  *
  46:Source\StatisticsFunctions/arm_rms_q15.c ****  * \par
  47:Source\StatisticsFunctions/arm_rms_q15.c ****  * The function is implemented using a 64-bit internal accumulator.
  48:Source\StatisticsFunctions/arm_rms_q15.c ****  * The input is represented in 1.15 format.
  49:Source\StatisticsFunctions/arm_rms_q15.c ****  * Intermediate multiplication yields a 2.30 format, and this
  50:Source\StatisticsFunctions/arm_rms_q15.c ****  * result is added without saturation to a 64-bit accumulator in 34.30 format.
  51:Source\StatisticsFunctions/arm_rms_q15.c ****  * With 33 guard bits in the accumulator, there is no risk of overflow, and the
  52:Source\StatisticsFunctions/arm_rms_q15.c ****  * full precision of the intermediate multiplication is preserved.
  53:Source\StatisticsFunctions/arm_rms_q15.c ****  * Finally, the 34.30 result is truncated to 34.15 format by discarding the lower
  54:Source\StatisticsFunctions/arm_rms_q15.c ****  * 15 bits, and then saturated to yield a result in 1.15 format.
  55:Source\StatisticsFunctions/arm_rms_q15.c ****  *
  56:Source\StatisticsFunctions/arm_rms_q15.c ****  */
  57:Source\StatisticsFunctions/arm_rms_q15.c **** 
  58:Source\StatisticsFunctions/arm_rms_q15.c **** void arm_rms_q15(
  59:Source\StatisticsFunctions/arm_rms_q15.c ****   q15_t * pSrc,
  60:Source\StatisticsFunctions/arm_rms_q15.c ****   uint32_t blockSize,
  61:Source\StatisticsFunctions/arm_rms_q15.c ****   q15_t * pResult)
  62:Source\StatisticsFunctions/arm_rms_q15.c **** {
  27              		.loc 1 62 0
  28              		.cfi_startproc
  29 0000 B0B5     		push	{r4, r5, r7, lr}
  30              		.cfi_def_cfa_offset 16
  31              		.cfi_offset 4, -16
  32              		.cfi_offset 5, -12
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 92B0     		sub	sp, sp, #72
  36              		.cfi_def_cfa_offset 88
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 F861     		str	r0, [r7, #28]
  40 0008 B961     		str	r1, [r7, #24]
  41 000a 7A61     		str	r2, [r7, #20]
  63:Source\StatisticsFunctions/arm_rms_q15.c ****   q63_t sum = 0;                                 /* accumulator */
  42              		.loc 1 63 0
  43 000c 0022     		mov	r2, #0
  44 000e 0023     		mov	r3, #0
  45 0010 3A64     		str	r2, [r7, #64]
  46 0012 7B64     		str	r3, [r7, #68]
  64:Source\StatisticsFunctions/arm_rms_q15.c **** 
  65:Source\StatisticsFunctions/arm_rms_q15.c **** #if defined (ARM_MATH_DSP)
  66:Source\StatisticsFunctions/arm_rms_q15.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  67:Source\StatisticsFunctions/arm_rms_q15.c **** 
  68:Source\StatisticsFunctions/arm_rms_q15.c ****   q31_t in;                                      /* temporary variable to store the input value */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 3


  69:Source\StatisticsFunctions/arm_rms_q15.c ****   q15_t in1;                                     /* temporary variable to store the input value */
  70:Source\StatisticsFunctions/arm_rms_q15.c ****   uint32_t blkCnt;                               /* loop counter */
  71:Source\StatisticsFunctions/arm_rms_q15.c **** 
  72:Source\StatisticsFunctions/arm_rms_q15.c ****   /* loop Unrolling */
  73:Source\StatisticsFunctions/arm_rms_q15.c ****   blkCnt = blockSize >> 2u;
  74:Source\StatisticsFunctions/arm_rms_q15.c **** 
  75:Source\StatisticsFunctions/arm_rms_q15.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  76:Source\StatisticsFunctions/arm_rms_q15.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  77:Source\StatisticsFunctions/arm_rms_q15.c ****   while (blkCnt > 0u)
  78:Source\StatisticsFunctions/arm_rms_q15.c ****   {
  79:Source\StatisticsFunctions/arm_rms_q15.c ****     /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
  80:Source\StatisticsFunctions/arm_rms_q15.c ****     /* Compute sum of the squares and then store the results in a temporary variable, sum */
  81:Source\StatisticsFunctions/arm_rms_q15.c ****     in = *__SIMD32(pSrc)++;
  82:Source\StatisticsFunctions/arm_rms_q15.c ****     sum = __SMLALD(in, in, sum);
  83:Source\StatisticsFunctions/arm_rms_q15.c ****     in = *__SIMD32(pSrc)++;
  84:Source\StatisticsFunctions/arm_rms_q15.c ****     sum = __SMLALD(in, in, sum);
  85:Source\StatisticsFunctions/arm_rms_q15.c **** 
  86:Source\StatisticsFunctions/arm_rms_q15.c ****     /* Decrement the loop counter */
  87:Source\StatisticsFunctions/arm_rms_q15.c ****     blkCnt--;
  88:Source\StatisticsFunctions/arm_rms_q15.c ****   }
  89:Source\StatisticsFunctions/arm_rms_q15.c **** 
  90:Source\StatisticsFunctions/arm_rms_q15.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
  91:Source\StatisticsFunctions/arm_rms_q15.c ****    ** No loop unrolling is used. */
  92:Source\StatisticsFunctions/arm_rms_q15.c ****   blkCnt = blockSize % 0x4u;
  93:Source\StatisticsFunctions/arm_rms_q15.c **** 
  94:Source\StatisticsFunctions/arm_rms_q15.c ****   while (blkCnt > 0u)
  95:Source\StatisticsFunctions/arm_rms_q15.c ****   {
  96:Source\StatisticsFunctions/arm_rms_q15.c ****     /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
  97:Source\StatisticsFunctions/arm_rms_q15.c ****     /* Compute sum of the squares and then store the results in a temporary variable, sum */
  98:Source\StatisticsFunctions/arm_rms_q15.c ****     in1 = *pSrc++;
  99:Source\StatisticsFunctions/arm_rms_q15.c ****     sum = __SMLALD(in1, in1, sum);
 100:Source\StatisticsFunctions/arm_rms_q15.c **** 
 101:Source\StatisticsFunctions/arm_rms_q15.c ****     /* Decrement the loop counter */
 102:Source\StatisticsFunctions/arm_rms_q15.c ****     blkCnt--;
 103:Source\StatisticsFunctions/arm_rms_q15.c ****   }
 104:Source\StatisticsFunctions/arm_rms_q15.c **** 
 105:Source\StatisticsFunctions/arm_rms_q15.c ****   /* Truncating and saturating the accumulator to 1.15 format */
 106:Source\StatisticsFunctions/arm_rms_q15.c ****   /* Store the result in the destination */
 107:Source\StatisticsFunctions/arm_rms_q15.c ****   arm_sqrt_q15(__SSAT((sum / (q63_t)blockSize) >> 15, 16), pResult);
 108:Source\StatisticsFunctions/arm_rms_q15.c **** 
 109:Source\StatisticsFunctions/arm_rms_q15.c **** #else
 110:Source\StatisticsFunctions/arm_rms_q15.c ****   /* Run the below code for Cortex-M0 */
 111:Source\StatisticsFunctions/arm_rms_q15.c **** 
 112:Source\StatisticsFunctions/arm_rms_q15.c ****   q15_t in;                                      /* temporary variable to store the input value */
 113:Source\StatisticsFunctions/arm_rms_q15.c ****   uint32_t blkCnt;                               /* loop counter */
 114:Source\StatisticsFunctions/arm_rms_q15.c **** 
 115:Source\StatisticsFunctions/arm_rms_q15.c ****   /* Loop over blockSize number of values */
 116:Source\StatisticsFunctions/arm_rms_q15.c ****   blkCnt = blockSize;
  47              		.loc 1 116 0
  48 0014 BB69     		ldr	r3, [r7, #24]
  49 0016 FB63     		str	r3, [r7, #60]
 117:Source\StatisticsFunctions/arm_rms_q15.c **** 
 118:Source\StatisticsFunctions/arm_rms_q15.c ****   while (blkCnt > 0u)
  50              		.loc 1 118 0
  51 0018 26E0     		b	.L2
  52              	.L3:
 119:Source\StatisticsFunctions/arm_rms_q15.c ****   {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 4


 120:Source\StatisticsFunctions/arm_rms_q15.c ****     /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
 121:Source\StatisticsFunctions/arm_rms_q15.c ****     /* Compute sum of the squares and then store the results in a temporary variable, sum */
 122:Source\StatisticsFunctions/arm_rms_q15.c ****     in = *pSrc++;
  53              		.loc 1 122 0
  54 001a FB69     		ldr	r3, [r7, #28]
  55 001c 9A1C     		add	r2, r3, #2
  56 001e FA61     		str	r2, [r7, #28]
  57 0020 2A22     		mov	r2, #42
  58 0022 1021     		mov	r1, #16
  59 0024 8C46     		mov	ip, r1
  60 0026 BC44     		add	ip, ip, r7
  61 0028 6244     		add	r2, r2, ip
  62 002a 1B88     		ldrh	r3, [r3]
  63 002c 1380     		strh	r3, [r2]
 123:Source\StatisticsFunctions/arm_rms_q15.c ****     sum += ((q31_t) in * in);
  64              		.loc 1 123 0
  65 002e 2A23     		mov	r3, #42
  66 0030 1022     		mov	r2, #16
  67 0032 9446     		mov	ip, r2
  68 0034 BC44     		add	ip, ip, r7
  69 0036 6344     		add	r3, r3, ip
  70 0038 0022     		mov	r2, #0
  71 003a 9B5E     		ldrsh	r3, [r3, r2]
  72 003c 2A22     		mov	r2, #42
  73 003e 1021     		mov	r1, #16
  74 0040 8C46     		mov	ip, r1
  75 0042 BC44     		add	ip, ip, r7
  76 0044 6244     		add	r2, r2, ip
  77 0046 0021     		mov	r1, #0
  78 0048 525E     		ldrsh	r2, [r2, r1]
  79 004a 5343     		mul	r3, r2
  80 004c BB60     		str	r3, [r7, #8]
  81 004e DB17     		asr	r3, r3, #31
  82 0050 FB60     		str	r3, [r7, #12]
  83 0052 3A6C     		ldr	r2, [r7, #64]
  84 0054 7B6C     		ldr	r3, [r7, #68]
  85 0056 B868     		ldr	r0, [r7, #8]
  86 0058 F968     		ldr	r1, [r7, #12]
  87 005a 1218     		add	r2, r2, r0
  88 005c 4B41     		adc	r3, r3, r1
  89 005e 3A64     		str	r2, [r7, #64]
  90 0060 7B64     		str	r3, [r7, #68]
 124:Source\StatisticsFunctions/arm_rms_q15.c **** 
 125:Source\StatisticsFunctions/arm_rms_q15.c ****     /* Decrement the loop counter */
 126:Source\StatisticsFunctions/arm_rms_q15.c ****     blkCnt--;
  91              		.loc 1 126 0
  92 0062 FB6B     		ldr	r3, [r7, #60]
  93 0064 013B     		sub	r3, r3, #1
  94 0066 FB63     		str	r3, [r7, #60]
  95              	.L2:
 118:Source\StatisticsFunctions/arm_rms_q15.c ****   {
  96              		.loc 1 118 0
  97 0068 FB6B     		ldr	r3, [r7, #60]
  98 006a 002B     		cmp	r3, #0
  99 006c D5D1     		bne	.L3
 127:Source\StatisticsFunctions/arm_rms_q15.c ****   }
 128:Source\StatisticsFunctions/arm_rms_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 5


 129:Source\StatisticsFunctions/arm_rms_q15.c ****   /* Truncating and saturating the accumulator to 1.15 format */
 130:Source\StatisticsFunctions/arm_rms_q15.c ****   /* Store the result in the destination */
 131:Source\StatisticsFunctions/arm_rms_q15.c ****   arm_sqrt_q15(__SSAT((sum / (q63_t)blockSize) >> 15, 16), pResult);
 100              		.loc 1 131 0
 101 006e BB69     		ldr	r3, [r7, #24]
 102 0070 3B60     		str	r3, [r7]
 103 0072 0023     		mov	r3, #0
 104 0074 7B60     		str	r3, [r7, #4]
 105 0076 386C     		ldr	r0, [r7, #64]
 106 0078 796C     		ldr	r1, [r7, #68]
 107 007a 3A68     		ldr	r2, [r7]
 108 007c 7B68     		ldr	r3, [r7, #4]
 109 007e FFF7FEFF 		bl	__aeabi_ldivmod
 110 0082 021C     		mov	r2, r0
 111 0084 0B1C     		mov	r3, r1
 112 0086 5904     		lsl	r1, r3, #17
 113 0088 D40B     		lsr	r4, r2, #15
 114 008a 0C43     		orr	r4, r1
 115 008c DD13     		asr	r5, r3, #15
 116 008e 231C     		mov	r3, r4
 117 0090 7B63     		str	r3, [r7, #52]
 118 0092 1023     		mov	r3, #16
 119 0094 3B63     		str	r3, [r7, #48]
 120              	.LBB4:
 121              	.LBB5:
 122              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 6


  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 7


  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 8


 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 9


 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 10


 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 11


 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 12


 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 13


 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 14


 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 15


 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 16


 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 17


 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
 123              		.loc 2 699 0
 124 0096 0123     		mov	r3, #1
 125 0098 FB62     		str	r3, [r7, #44]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 126              		.loc 2 700 0
 127 009a 0023     		mov	r3, #0
 128 009c BB62     		str	r3, [r7, #40]
 129 009e 05E0     		b	.L4
 130              	.L5:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 131              		.loc 2 702 0
 132 00a0 FB6A     		ldr	r3, [r7, #44]
 133 00a2 5B00     		lsl	r3, r3, #1
 134 00a4 FB62     		str	r3, [r7, #44]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 18


 135              		.loc 2 700 0
 136 00a6 BB6A     		ldr	r3, [r7, #40]
 137 00a8 0133     		add	r3, r3, #1
 138 00aa BB62     		str	r3, [r7, #40]
 139              	.L4:
 140 00ac 3B6B     		ldr	r3, [r7, #48]
 141 00ae 013B     		sub	r3, r3, #1
 142 00b0 BA6A     		ldr	r2, [r7, #40]
 143 00b2 9A42     		cmp	r2, r3
 144 00b4 F4D3     		bcc	.L5
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 145              		.loc 2 705 0
 146 00b6 7B6B     		ldr	r3, [r7, #52]
 147 00b8 002B     		cmp	r3, #0
 148 00ba 09DD     		ble	.L6
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 149              		.loc 2 707 0
 150 00bc FB6A     		ldr	r3, [r7, #44]
 151 00be 013B     		sub	r3, r3, #1
 152 00c0 FB62     		str	r3, [r7, #44]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 153              		.loc 2 709 0
 154 00c2 7A6B     		ldr	r2, [r7, #52]
 155 00c4 FB6A     		ldr	r3, [r7, #44]
 156 00c6 9A42     		cmp	r2, r3
 157 00c8 0CDD     		ble	.L10
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 158              		.loc 2 711 0
 159 00ca FB6A     		ldr	r3, [r7, #44]
 160 00cc 7B63     		str	r3, [r7, #52]
 161 00ce 0AE0     		b	.L8
 162              	.L6:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 163              		.loc 2 716 0
 164 00d0 FB6A     		ldr	r3, [r7, #44]
 165 00d2 5B42     		neg	r3, r3
 166 00d4 7B62     		str	r3, [r7, #36]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 167              		.loc 2 718 0
 168 00d6 7A6B     		ldr	r2, [r7, #52]
 169 00d8 7B6A     		ldr	r3, [r7, #36]
 170 00da 9A42     		cmp	r2, r3
 171 00dc 03DA     		bge	.L8
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 172              		.loc 2 720 0
 173 00de 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 19


 174 00e0 7B63     		str	r3, [r7, #52]
 175 00e2 00E0     		b	.L8
 176              	.L10:
 711:.\Include/arm_math.h ****       }
 177              		.loc 2 711 0
 178 00e4 C046     		mov	r8, r8
 179              	.L8:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 180              		.loc 2 723 0
 181 00e6 7B6B     		ldr	r3, [r7, #52]
 182              	.LBE5:
 183              	.LBE4:
 184              		.loc 1 131 0
 185 00e8 9BB2     		uxth	r3, r3
 186 00ea 1AB2     		sxth	r2, r3
 187 00ec 7B69     		ldr	r3, [r7, #20]
 188 00ee 101C     		mov	r0, r2
 189 00f0 191C     		mov	r1, r3
 190 00f2 FFF7FEFF 		bl	arm_sqrt_q15
 132:Source\StatisticsFunctions/arm_rms_q15.c **** 
 133:Source\StatisticsFunctions/arm_rms_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 134:Source\StatisticsFunctions/arm_rms_q15.c **** 
 135:Source\StatisticsFunctions/arm_rms_q15.c **** }
 191              		.loc 1 135 0
 192 00f6 BD46     		mov	sp, r7
 193 00f8 12B0     		add	sp, sp, #72
 194              		@ sp needed
 195 00fa B0BD     		pop	{r4, r5, r7, pc}
 196              		.cfi_endproc
 197              	.LFE82:
 198              		.size	arm_rms_q15, .-arm_rms_q15
 199              		.text
 200              	.Letext0:
 201              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 202              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 203              		.section	.debug_info,"",%progbits
 204              	.Ldebug_info0:
 205 0000 FD010000 		.4byte	0x1fd
 206 0004 0400     		.2byte	0x4
 207 0006 00000000 		.4byte	.Ldebug_abbrev0
 208 000a 04       		.byte	0x4
 209 000b 01       		.uleb128 0x1
 210 000c 26010000 		.4byte	.LASF31
 211 0010 01       		.byte	0x1
 212 0011 6E000000 		.4byte	.LASF32
 213 0015 1C000000 		.4byte	.LASF33
 214 0019 00000000 		.4byte	.Ldebug_ranges0+0
 215 001d 00000000 		.4byte	0
 216 0021 00000000 		.4byte	.Ldebug_line0
 217 0025 02       		.uleb128 0x2
 218 0026 01       		.byte	0x1
 219 0027 06       		.byte	0x6
 220 0028 2A020000 		.4byte	.LASF0
 221 002c 02       		.uleb128 0x2
 222 002d 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 20


 223 002e 08       		.byte	0x8
 224 002f 9D000000 		.4byte	.LASF1
 225 0033 03       		.uleb128 0x3
 226 0034 08000000 		.4byte	.LASF4
 227 0038 03       		.byte	0x3
 228 0039 29       		.byte	0x29
 229 003a 3E000000 		.4byte	0x3e
 230 003e 02       		.uleb128 0x2
 231 003f 02       		.byte	0x2
 232 0040 05       		.byte	0x5
 233 0041 FB010000 		.4byte	.LASF2
 234 0045 02       		.uleb128 0x2
 235 0046 02       		.byte	0x2
 236 0047 07       		.byte	0x7
 237 0048 C4000000 		.4byte	.LASF3
 238 004c 03       		.uleb128 0x3
 239 004d 12000000 		.4byte	.LASF5
 240 0051 03       		.byte	0x3
 241 0052 3F       		.byte	0x3f
 242 0053 57000000 		.4byte	0x57
 243 0057 02       		.uleb128 0x2
 244 0058 04       		.byte	0x4
 245 0059 05       		.byte	0x5
 246 005a 15020000 		.4byte	.LASF6
 247 005e 03       		.uleb128 0x3
 248 005f F7000000 		.4byte	.LASF7
 249 0063 03       		.byte	0x3
 250 0064 41       		.byte	0x41
 251 0065 69000000 		.4byte	0x69
 252 0069 02       		.uleb128 0x2
 253 006a 04       		.byte	0x4
 254 006b 07       		.byte	0x7
 255 006c B2000000 		.4byte	.LASF8
 256 0070 03       		.uleb128 0x3
 257 0071 DE000000 		.4byte	.LASF9
 258 0075 03       		.byte	0x3
 259 0076 59       		.byte	0x59
 260 0077 7B000000 		.4byte	0x7b
 261 007b 02       		.uleb128 0x2
 262 007c 08       		.byte	0x8
 263 007d 05       		.byte	0x5
 264 007e DE010000 		.4byte	.LASF10
 265 0082 02       		.uleb128 0x2
 266 0083 08       		.byte	0x8
 267 0084 07       		.byte	0x7
 268 0085 0F010000 		.4byte	.LASF11
 269 0089 04       		.uleb128 0x4
 270 008a 04       		.byte	0x4
 271 008b 05       		.byte	0x5
 272 008c 696E7400 		.ascii	"int\000"
 273 0090 02       		.uleb128 0x2
 274 0091 04       		.byte	0x4
 275 0092 07       		.byte	0x7
 276 0093 02010000 		.4byte	.LASF12
 277 0097 03       		.uleb128 0x3
 278 0098 BE010000 		.4byte	.LASF13
 279 009c 04       		.byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 21


 280 009d 20       		.byte	0x20
 281 009e 33000000 		.4byte	0x33
 282 00a2 03       		.uleb128 0x3
 283 00a3 CD010000 		.4byte	.LASF14
 284 00a7 04       		.byte	0x4
 285 00a8 2C       		.byte	0x2c
 286 00a9 4C000000 		.4byte	0x4c
 287 00ad 03       		.uleb128 0x3
 288 00ae 0C020000 		.4byte	.LASF15
 289 00b2 04       		.byte	0x4
 290 00b3 2D       		.byte	0x2d
 291 00b4 5E000000 		.4byte	0x5e
 292 00b8 03       		.uleb128 0x3
 293 00b9 00000000 		.4byte	.LASF16
 294 00bd 04       		.byte	0x4
 295 00be 38       		.byte	0x38
 296 00bf 70000000 		.4byte	0x70
 297 00c3 02       		.uleb128 0x2
 298 00c4 04       		.byte	0x4
 299 00c5 07       		.byte	0x7
 300 00c6 D5010000 		.4byte	.LASF17
 301 00ca 02       		.uleb128 0x2
 302 00cb 01       		.byte	0x1
 303 00cc 08       		.byte	0x8
 304 00cd F6010000 		.4byte	.LASF18
 305 00d1 02       		.uleb128 0x2
 306 00d2 08       		.byte	0x8
 307 00d3 04       		.byte	0x4
 308 00d4 F0000000 		.4byte	.LASF19
 309 00d8 02       		.uleb128 0x2
 310 00d9 04       		.byte	0x4
 311 00da 04       		.byte	0x4
 312 00db 68000000 		.4byte	.LASF20
 313 00df 02       		.uleb128 0x2
 314 00e0 08       		.byte	0x8
 315 00e1 04       		.byte	0x4
 316 00e2 1E020000 		.4byte	.LASF21
 317 00e6 05       		.uleb128 0x5
 318 00e7 62000000 		.4byte	.LASF22
 319 00eb 02       		.byte	0x2
 320 00ec 9601     		.2byte	0x196
 321 00ee 97000000 		.4byte	0x97
 322 00f2 05       		.uleb128 0x5
 323 00f3 97000000 		.4byte	.LASF23
 324 00f7 02       		.byte	0x2
 325 00f8 9B01     		.2byte	0x19b
 326 00fa A2000000 		.4byte	0xa2
 327 00fe 05       		.uleb128 0x5
 328 00ff B8010000 		.4byte	.LASF24
 329 0103 02       		.byte	0x2
 330 0104 A001     		.2byte	0x1a0
 331 0106 B8000000 		.4byte	0xb8
 332 010a 06       		.uleb128 0x6
 333 010b 04       		.byte	0x4
 334 010c E6000000 		.4byte	0xe6
 335 0110 07       		.uleb128 0x7
 336 0111 C6010000 		.4byte	.LASF34
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 22


 337 0115 02       		.byte	0x2
 338 0116 B402     		.2byte	0x2b4
 339 0118 F2000000 		.4byte	0xf2
 340 011c 03       		.byte	0x3
 341 011d 58010000 		.4byte	0x158
 342 0121 08       		.uleb128 0x8
 343 0122 7800     		.ascii	"x\000"
 344 0124 02       		.byte	0x2
 345 0125 B502     		.2byte	0x2b5
 346 0127 F2000000 		.4byte	0xf2
 347 012b 08       		.uleb128 0x8
 348 012c 7900     		.ascii	"y\000"
 349 012e 02       		.byte	0x2
 350 012f B602     		.2byte	0x2b6
 351 0131 AD000000 		.4byte	0xad
 352 0135 09       		.uleb128 0x9
 353 0136 05020000 		.4byte	.LASF25
 354 013a 02       		.byte	0x2
 355 013b B802     		.2byte	0x2b8
 356 013d A2000000 		.4byte	0xa2
 357 0141 09       		.uleb128 0x9
 358 0142 D7000000 		.4byte	.LASF26
 359 0146 02       		.byte	0x2
 360 0147 B802     		.2byte	0x2b8
 361 0149 A2000000 		.4byte	0xa2
 362 014d 0A       		.uleb128 0xa
 363 014e 6900     		.ascii	"i\000"
 364 0150 02       		.byte	0x2
 365 0151 B902     		.2byte	0x2b9
 366 0153 AD000000 		.4byte	0xad
 367 0157 00       		.byte	0
 368 0158 0B       		.uleb128 0xb
 369 0159 3B020000 		.4byte	.LASF35
 370 015d 01       		.byte	0x1
 371 015e 3A       		.byte	0x3a
 372 015f 00000000 		.4byte	.LFB82
 373 0163 FC000000 		.4byte	.LFE82-.LFB82
 374 0167 01       		.uleb128 0x1
 375 0168 9C       		.byte	0x9c
 376 0169 0C       		.uleb128 0xc
 377 016a 36020000 		.4byte	.LASF27
 378 016e 01       		.byte	0x1
 379 016f 3B       		.byte	0x3b
 380 0170 0A010000 		.4byte	0x10a
 381 0174 02       		.uleb128 0x2
 382 0175 91       		.byte	0x91
 383 0176 44       		.sleb128 -60
 384 0177 0C       		.uleb128 0xc
 385 0178 EC010000 		.4byte	.LASF28
 386 017c 01       		.byte	0x1
 387 017d 3C       		.byte	0x3c
 388 017e AD000000 		.4byte	0xad
 389 0182 02       		.uleb128 0x2
 390 0183 91       		.byte	0x91
 391 0184 40       		.sleb128 -64
 392 0185 0C       		.uleb128 0xc
 393 0186 E8000000 		.4byte	.LASF29
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 23


 394 018a 01       		.byte	0x1
 395 018b 3D       		.byte	0x3d
 396 018c 0A010000 		.4byte	0x10a
 397 0190 03       		.uleb128 0x3
 398 0191 91       		.byte	0x91
 399 0192 BC7F     		.sleb128 -68
 400 0194 0D       		.uleb128 0xd
 401 0195 73756D00 		.ascii	"sum\000"
 402 0199 01       		.byte	0x1
 403 019a 3F       		.byte	0x3f
 404 019b FE000000 		.4byte	0xfe
 405 019f 02       		.uleb128 0x2
 406 01a0 91       		.byte	0x91
 407 01a1 68       		.sleb128 -24
 408 01a2 0D       		.uleb128 0xd
 409 01a3 696E00   		.ascii	"in\000"
 410 01a6 01       		.byte	0x1
 411 01a7 70       		.byte	0x70
 412 01a8 E6000000 		.4byte	0xe6
 413 01ac 02       		.uleb128 0x2
 414 01ad 91       		.byte	0x91
 415 01ae 62       		.sleb128 -30
 416 01af 0E       		.uleb128 0xe
 417 01b0 AB000000 		.4byte	.LASF30
 418 01b4 01       		.byte	0x1
 419 01b5 71       		.byte	0x71
 420 01b6 AD000000 		.4byte	0xad
 421 01ba 02       		.uleb128 0x2
 422 01bb 91       		.byte	0x91
 423 01bc 64       		.sleb128 -28
 424 01bd 0F       		.uleb128 0xf
 425 01be 10010000 		.4byte	0x110
 426 01c2 96000000 		.4byte	.LBB4
 427 01c6 52000000 		.4byte	.LBE4-.LBB4
 428 01ca 01       		.byte	0x1
 429 01cb 83       		.byte	0x83
 430 01cc 10       		.uleb128 0x10
 431 01cd 2B010000 		.4byte	0x12b
 432 01d1 02       		.uleb128 0x2
 433 01d2 91       		.byte	0x91
 434 01d3 58       		.sleb128 -40
 435 01d4 10       		.uleb128 0x10
 436 01d5 21010000 		.4byte	0x121
 437 01d9 02       		.uleb128 0x2
 438 01da 91       		.byte	0x91
 439 01db 5C       		.sleb128 -36
 440 01dc 11       		.uleb128 0x11
 441 01dd 96000000 		.4byte	.LBB5
 442 01e1 52000000 		.4byte	.LBE5-.LBB5
 443 01e5 12       		.uleb128 0x12
 444 01e6 35010000 		.4byte	0x135
 445 01ea 02       		.uleb128 0x2
 446 01eb 91       		.byte	0x91
 447 01ec 54       		.sleb128 -44
 448 01ed 12       		.uleb128 0x12
 449 01ee 41010000 		.4byte	0x141
 450 01f2 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 24


 451 01f3 91       		.byte	0x91
 452 01f4 4C       		.sleb128 -52
 453 01f5 12       		.uleb128 0x12
 454 01f6 4D010000 		.4byte	0x14d
 455 01fa 02       		.uleb128 0x2
 456 01fb 91       		.byte	0x91
 457 01fc 50       		.sleb128 -48
 458 01fd 00       		.byte	0
 459 01fe 00       		.byte	0
 460 01ff 00       		.byte	0
 461 0200 00       		.byte	0
 462              		.section	.debug_abbrev,"",%progbits
 463              	.Ldebug_abbrev0:
 464 0000 01       		.uleb128 0x1
 465 0001 11       		.uleb128 0x11
 466 0002 01       		.byte	0x1
 467 0003 25       		.uleb128 0x25
 468 0004 0E       		.uleb128 0xe
 469 0005 13       		.uleb128 0x13
 470 0006 0B       		.uleb128 0xb
 471 0007 03       		.uleb128 0x3
 472 0008 0E       		.uleb128 0xe
 473 0009 1B       		.uleb128 0x1b
 474 000a 0E       		.uleb128 0xe
 475 000b 55       		.uleb128 0x55
 476 000c 17       		.uleb128 0x17
 477 000d 11       		.uleb128 0x11
 478 000e 01       		.uleb128 0x1
 479 000f 10       		.uleb128 0x10
 480 0010 17       		.uleb128 0x17
 481 0011 00       		.byte	0
 482 0012 00       		.byte	0
 483 0013 02       		.uleb128 0x2
 484 0014 24       		.uleb128 0x24
 485 0015 00       		.byte	0
 486 0016 0B       		.uleb128 0xb
 487 0017 0B       		.uleb128 0xb
 488 0018 3E       		.uleb128 0x3e
 489 0019 0B       		.uleb128 0xb
 490 001a 03       		.uleb128 0x3
 491 001b 0E       		.uleb128 0xe
 492 001c 00       		.byte	0
 493 001d 00       		.byte	0
 494 001e 03       		.uleb128 0x3
 495 001f 16       		.uleb128 0x16
 496 0020 00       		.byte	0
 497 0021 03       		.uleb128 0x3
 498 0022 0E       		.uleb128 0xe
 499 0023 3A       		.uleb128 0x3a
 500 0024 0B       		.uleb128 0xb
 501 0025 3B       		.uleb128 0x3b
 502 0026 0B       		.uleb128 0xb
 503 0027 49       		.uleb128 0x49
 504 0028 13       		.uleb128 0x13
 505 0029 00       		.byte	0
 506 002a 00       		.byte	0
 507 002b 04       		.uleb128 0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 25


 508 002c 24       		.uleb128 0x24
 509 002d 00       		.byte	0
 510 002e 0B       		.uleb128 0xb
 511 002f 0B       		.uleb128 0xb
 512 0030 3E       		.uleb128 0x3e
 513 0031 0B       		.uleb128 0xb
 514 0032 03       		.uleb128 0x3
 515 0033 08       		.uleb128 0x8
 516 0034 00       		.byte	0
 517 0035 00       		.byte	0
 518 0036 05       		.uleb128 0x5
 519 0037 16       		.uleb128 0x16
 520 0038 00       		.byte	0
 521 0039 03       		.uleb128 0x3
 522 003a 0E       		.uleb128 0xe
 523 003b 3A       		.uleb128 0x3a
 524 003c 0B       		.uleb128 0xb
 525 003d 3B       		.uleb128 0x3b
 526 003e 05       		.uleb128 0x5
 527 003f 49       		.uleb128 0x49
 528 0040 13       		.uleb128 0x13
 529 0041 00       		.byte	0
 530 0042 00       		.byte	0
 531 0043 06       		.uleb128 0x6
 532 0044 0F       		.uleb128 0xf
 533 0045 00       		.byte	0
 534 0046 0B       		.uleb128 0xb
 535 0047 0B       		.uleb128 0xb
 536 0048 49       		.uleb128 0x49
 537 0049 13       		.uleb128 0x13
 538 004a 00       		.byte	0
 539 004b 00       		.byte	0
 540 004c 07       		.uleb128 0x7
 541 004d 2E       		.uleb128 0x2e
 542 004e 01       		.byte	0x1
 543 004f 03       		.uleb128 0x3
 544 0050 0E       		.uleb128 0xe
 545 0051 3A       		.uleb128 0x3a
 546 0052 0B       		.uleb128 0xb
 547 0053 3B       		.uleb128 0x3b
 548 0054 05       		.uleb128 0x5
 549 0055 27       		.uleb128 0x27
 550 0056 19       		.uleb128 0x19
 551 0057 49       		.uleb128 0x49
 552 0058 13       		.uleb128 0x13
 553 0059 20       		.uleb128 0x20
 554 005a 0B       		.uleb128 0xb
 555 005b 01       		.uleb128 0x1
 556 005c 13       		.uleb128 0x13
 557 005d 00       		.byte	0
 558 005e 00       		.byte	0
 559 005f 08       		.uleb128 0x8
 560 0060 05       		.uleb128 0x5
 561 0061 00       		.byte	0
 562 0062 03       		.uleb128 0x3
 563 0063 08       		.uleb128 0x8
 564 0064 3A       		.uleb128 0x3a
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 26


 565 0065 0B       		.uleb128 0xb
 566 0066 3B       		.uleb128 0x3b
 567 0067 05       		.uleb128 0x5
 568 0068 49       		.uleb128 0x49
 569 0069 13       		.uleb128 0x13
 570 006a 00       		.byte	0
 571 006b 00       		.byte	0
 572 006c 09       		.uleb128 0x9
 573 006d 34       		.uleb128 0x34
 574 006e 00       		.byte	0
 575 006f 03       		.uleb128 0x3
 576 0070 0E       		.uleb128 0xe
 577 0071 3A       		.uleb128 0x3a
 578 0072 0B       		.uleb128 0xb
 579 0073 3B       		.uleb128 0x3b
 580 0074 05       		.uleb128 0x5
 581 0075 49       		.uleb128 0x49
 582 0076 13       		.uleb128 0x13
 583 0077 00       		.byte	0
 584 0078 00       		.byte	0
 585 0079 0A       		.uleb128 0xa
 586 007a 34       		.uleb128 0x34
 587 007b 00       		.byte	0
 588 007c 03       		.uleb128 0x3
 589 007d 08       		.uleb128 0x8
 590 007e 3A       		.uleb128 0x3a
 591 007f 0B       		.uleb128 0xb
 592 0080 3B       		.uleb128 0x3b
 593 0081 05       		.uleb128 0x5
 594 0082 49       		.uleb128 0x49
 595 0083 13       		.uleb128 0x13
 596 0084 00       		.byte	0
 597 0085 00       		.byte	0
 598 0086 0B       		.uleb128 0xb
 599 0087 2E       		.uleb128 0x2e
 600 0088 01       		.byte	0x1
 601 0089 3F       		.uleb128 0x3f
 602 008a 19       		.uleb128 0x19
 603 008b 03       		.uleb128 0x3
 604 008c 0E       		.uleb128 0xe
 605 008d 3A       		.uleb128 0x3a
 606 008e 0B       		.uleb128 0xb
 607 008f 3B       		.uleb128 0x3b
 608 0090 0B       		.uleb128 0xb
 609 0091 27       		.uleb128 0x27
 610 0092 19       		.uleb128 0x19
 611 0093 11       		.uleb128 0x11
 612 0094 01       		.uleb128 0x1
 613 0095 12       		.uleb128 0x12
 614 0096 06       		.uleb128 0x6
 615 0097 40       		.uleb128 0x40
 616 0098 18       		.uleb128 0x18
 617 0099 9642     		.uleb128 0x2116
 618 009b 19       		.uleb128 0x19
 619 009c 00       		.byte	0
 620 009d 00       		.byte	0
 621 009e 0C       		.uleb128 0xc
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 27


 622 009f 05       		.uleb128 0x5
 623 00a0 00       		.byte	0
 624 00a1 03       		.uleb128 0x3
 625 00a2 0E       		.uleb128 0xe
 626 00a3 3A       		.uleb128 0x3a
 627 00a4 0B       		.uleb128 0xb
 628 00a5 3B       		.uleb128 0x3b
 629 00a6 0B       		.uleb128 0xb
 630 00a7 49       		.uleb128 0x49
 631 00a8 13       		.uleb128 0x13
 632 00a9 02       		.uleb128 0x2
 633 00aa 18       		.uleb128 0x18
 634 00ab 00       		.byte	0
 635 00ac 00       		.byte	0
 636 00ad 0D       		.uleb128 0xd
 637 00ae 34       		.uleb128 0x34
 638 00af 00       		.byte	0
 639 00b0 03       		.uleb128 0x3
 640 00b1 08       		.uleb128 0x8
 641 00b2 3A       		.uleb128 0x3a
 642 00b3 0B       		.uleb128 0xb
 643 00b4 3B       		.uleb128 0x3b
 644 00b5 0B       		.uleb128 0xb
 645 00b6 49       		.uleb128 0x49
 646 00b7 13       		.uleb128 0x13
 647 00b8 02       		.uleb128 0x2
 648 00b9 18       		.uleb128 0x18
 649 00ba 00       		.byte	0
 650 00bb 00       		.byte	0
 651 00bc 0E       		.uleb128 0xe
 652 00bd 34       		.uleb128 0x34
 653 00be 00       		.byte	0
 654 00bf 03       		.uleb128 0x3
 655 00c0 0E       		.uleb128 0xe
 656 00c1 3A       		.uleb128 0x3a
 657 00c2 0B       		.uleb128 0xb
 658 00c3 3B       		.uleb128 0x3b
 659 00c4 0B       		.uleb128 0xb
 660 00c5 49       		.uleb128 0x49
 661 00c6 13       		.uleb128 0x13
 662 00c7 02       		.uleb128 0x2
 663 00c8 18       		.uleb128 0x18
 664 00c9 00       		.byte	0
 665 00ca 00       		.byte	0
 666 00cb 0F       		.uleb128 0xf
 667 00cc 1D       		.uleb128 0x1d
 668 00cd 01       		.byte	0x1
 669 00ce 31       		.uleb128 0x31
 670 00cf 13       		.uleb128 0x13
 671 00d0 11       		.uleb128 0x11
 672 00d1 01       		.uleb128 0x1
 673 00d2 12       		.uleb128 0x12
 674 00d3 06       		.uleb128 0x6
 675 00d4 58       		.uleb128 0x58
 676 00d5 0B       		.uleb128 0xb
 677 00d6 59       		.uleb128 0x59
 678 00d7 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 28


 679 00d8 00       		.byte	0
 680 00d9 00       		.byte	0
 681 00da 10       		.uleb128 0x10
 682 00db 05       		.uleb128 0x5
 683 00dc 00       		.byte	0
 684 00dd 31       		.uleb128 0x31
 685 00de 13       		.uleb128 0x13
 686 00df 02       		.uleb128 0x2
 687 00e0 18       		.uleb128 0x18
 688 00e1 00       		.byte	0
 689 00e2 00       		.byte	0
 690 00e3 11       		.uleb128 0x11
 691 00e4 0B       		.uleb128 0xb
 692 00e5 01       		.byte	0x1
 693 00e6 11       		.uleb128 0x11
 694 00e7 01       		.uleb128 0x1
 695 00e8 12       		.uleb128 0x12
 696 00e9 06       		.uleb128 0x6
 697 00ea 00       		.byte	0
 698 00eb 00       		.byte	0
 699 00ec 12       		.uleb128 0x12
 700 00ed 34       		.uleb128 0x34
 701 00ee 00       		.byte	0
 702 00ef 31       		.uleb128 0x31
 703 00f0 13       		.uleb128 0x13
 704 00f1 02       		.uleb128 0x2
 705 00f2 18       		.uleb128 0x18
 706 00f3 00       		.byte	0
 707 00f4 00       		.byte	0
 708 00f5 00       		.byte	0
 709              		.section	.debug_aranges,"",%progbits
 710 0000 1C000000 		.4byte	0x1c
 711 0004 0200     		.2byte	0x2
 712 0006 00000000 		.4byte	.Ldebug_info0
 713 000a 04       		.byte	0x4
 714 000b 00       		.byte	0
 715 000c 0000     		.2byte	0
 716 000e 0000     		.2byte	0
 717 0010 00000000 		.4byte	.LFB82
 718 0014 FC000000 		.4byte	.LFE82-.LFB82
 719 0018 00000000 		.4byte	0
 720 001c 00000000 		.4byte	0
 721              		.section	.debug_ranges,"",%progbits
 722              	.Ldebug_ranges0:
 723 0000 00000000 		.4byte	.LFB82
 724 0004 FC000000 		.4byte	.LFE82
 725 0008 00000000 		.4byte	0
 726 000c 00000000 		.4byte	0
 727              		.section	.debug_line,"",%progbits
 728              	.Ldebug_line0:
 729 0000 91010000 		.section	.debug_str,"MS",%progbits,1
 729      02004F01 
 729      00000201 
 729      FB0E0D00 
 729      01010101 
 730              	.LASF16:
 731 0000 696E7436 		.ascii	"int64_t\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 29


 731      345F7400 
 732              	.LASF4:
 733 0008 5F5F696E 		.ascii	"__int16_t\000"
 733      7431365F 
 733      7400
 734              	.LASF5:
 735 0012 5F5F696E 		.ascii	"__int32_t\000"
 735      7433325F 
 735      7400
 736              	.LASF33:
 737 001c 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 737      73657273 
 737      5C666E65 
 737      7665735C 
 737      446F6375 
 738 0049 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 738      655F7370 
 738      6565645F 
 738      73656E73 
 738      6F722E63 
 739              	.LASF22:
 740 0062 7131355F 		.ascii	"q15_t\000"
 740      7400
 741              	.LASF20:
 742 0068 666C6F61 		.ascii	"float\000"
 742      7400
 743              	.LASF32:
 744 006e 536F7572 		.ascii	"Source\\StatisticsFunctions\\arm_rms_q15.c\000"
 744      63655C53 
 744      74617469 
 744      73746963 
 744      7346756E 
 745              	.LASF23:
 746 0097 7133315F 		.ascii	"q31_t\000"
 746      7400
 747              	.LASF1:
 748 009d 756E7369 		.ascii	"unsigned char\000"
 748      676E6564 
 748      20636861 
 748      7200
 749              	.LASF30:
 750 00ab 626C6B43 		.ascii	"blkCnt\000"
 750      6E7400
 751              	.LASF8:
 752 00b2 6C6F6E67 		.ascii	"long unsigned int\000"
 752      20756E73 
 752      69676E65 
 752      6420696E 
 752      7400
 753              	.LASF3:
 754 00c4 73686F72 		.ascii	"short unsigned int\000"
 754      7420756E 
 754      7369676E 
 754      65642069 
 754      6E7400
 755              	.LASF26:
 756 00d7 6E65674D 		.ascii	"negMin\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 30


 756      696E00
 757              	.LASF9:
 758 00de 5F5F696E 		.ascii	"__int64_t\000"
 758      7436345F 
 758      7400
 759              	.LASF29:
 760 00e8 70526573 		.ascii	"pResult\000"
 760      756C7400 
 761              	.LASF19:
 762 00f0 646F7562 		.ascii	"double\000"
 762      6C6500
 763              	.LASF7:
 764 00f7 5F5F7569 		.ascii	"__uint32_t\000"
 764      6E743332 
 764      5F7400
 765              	.LASF12:
 766 0102 756E7369 		.ascii	"unsigned int\000"
 766      676E6564 
 766      20696E74 
 766      00
 767              	.LASF11:
 768 010f 6C6F6E67 		.ascii	"long long unsigned int\000"
 768      206C6F6E 
 768      6720756E 
 768      7369676E 
 768      65642069 
 769              	.LASF31:
 770 0126 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 770      4320342E 
 770      392E3320 
 770      32303135 
 770      30333033 
 771 0159 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 771      20726576 
 771      6973696F 
 771      6E203232 
 771      31323230 
 772 018c 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 772      30202D66 
 772      66756E63 
 772      74696F6E 
 772      2D736563 
 773              	.LASF24:
 774 01b8 7136335F 		.ascii	"q63_t\000"
 774      7400
 775              	.LASF13:
 776 01be 696E7431 		.ascii	"int16_t\000"
 776      365F7400 
 777              	.LASF34:
 778 01c6 5F5F5353 		.ascii	"__SSAT\000"
 778      415400
 779              	.LASF14:
 780 01cd 696E7433 		.ascii	"int32_t\000"
 780      325F7400 
 781              	.LASF17:
 782 01d5 73697A65 		.ascii	"sizetype\000"
 782      74797065 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\cc9EwNZG.s 			page 31


 782      00
 783              	.LASF10:
 784 01de 6C6F6E67 		.ascii	"long long int\000"
 784      206C6F6E 
 784      6720696E 
 784      7400
 785              	.LASF28:
 786 01ec 626C6F63 		.ascii	"blockSize\000"
 786      6B53697A 
 786      6500
 787              	.LASF18:
 788 01f6 63686172 		.ascii	"char\000"
 788      00
 789              	.LASF2:
 790 01fb 73686F72 		.ascii	"short int\000"
 790      7420696E 
 790      7400
 791              	.LASF25:
 792 0205 706F734D 		.ascii	"posMax\000"
 792      617800
 793              	.LASF15:
 794 020c 75696E74 		.ascii	"uint32_t\000"
 794      33325F74 
 794      00
 795              	.LASF6:
 796 0215 6C6F6E67 		.ascii	"long int\000"
 796      20696E74 
 796      00
 797              	.LASF21:
 798 021e 6C6F6E67 		.ascii	"long double\000"
 798      20646F75 
 798      626C6500 
 799              	.LASF0:
 800 022a 7369676E 		.ascii	"signed char\000"
 800      65642063 
 800      68617200 
 801              	.LASF27:
 802 0236 70537263 		.ascii	"pSrc\000"
 802      00
 803              	.LASF35:
 804 023b 61726D5F 		.ascii	"arm_rms_q15\000"
 804      726D735F 
 804      71313500 
 805              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
