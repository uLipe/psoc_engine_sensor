ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_pid_init_q31.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_pid_init_q31,"ax",%progbits
  18              		.align	2
  19              		.global	arm_pid_init_q31
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_pid_init_q31, %function
  23              	arm_pid_init_q31:
  24              	.LFB82:
  25              		.file 1 "Source\\ControllerFunctions\\arm_pid_init_q31.c"
   1:Source\ControllerFunctions/arm_pid_init_q31.c **** /* ----------------------------------------------------------------------
   2:Source\ControllerFunctions/arm_pid_init_q31.c ****  * Project:      CMSIS DSP Library
   3:Source\ControllerFunctions/arm_pid_init_q31.c ****  * Title:        arm_pid_init_q31.c
   4:Source\ControllerFunctions/arm_pid_init_q31.c ****  * Description:  Q31 PID Control initialization function
   5:Source\ControllerFunctions/arm_pid_init_q31.c ****  *
   6:Source\ControllerFunctions/arm_pid_init_q31.c ****  * $Date:        27. January 2017
   7:Source\ControllerFunctions/arm_pid_init_q31.c ****  * $Revision:    V.1.5.1
   8:Source\ControllerFunctions/arm_pid_init_q31.c ****  *
   9:Source\ControllerFunctions/arm_pid_init_q31.c ****  * Target Processor: Cortex-M cores
  10:Source\ControllerFunctions/arm_pid_init_q31.c ****  * -------------------------------------------------------------------- */
  11:Source\ControllerFunctions/arm_pid_init_q31.c **** /*
  12:Source\ControllerFunctions/arm_pid_init_q31.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\ControllerFunctions/arm_pid_init_q31.c ****  *
  14:Source\ControllerFunctions/arm_pid_init_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\ControllerFunctions/arm_pid_init_q31.c ****  *
  16:Source\ControllerFunctions/arm_pid_init_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\ControllerFunctions/arm_pid_init_q31.c ****  * not use this file except in compliance with the License.
  18:Source\ControllerFunctions/arm_pid_init_q31.c ****  * You may obtain a copy of the License at
  19:Source\ControllerFunctions/arm_pid_init_q31.c ****  *
  20:Source\ControllerFunctions/arm_pid_init_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\ControllerFunctions/arm_pid_init_q31.c ****  *
  22:Source\ControllerFunctions/arm_pid_init_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\ControllerFunctions/arm_pid_init_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\ControllerFunctions/arm_pid_init_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\ControllerFunctions/arm_pid_init_q31.c ****  * See the License for the specific language governing permissions and
  26:Source\ControllerFunctions/arm_pid_init_q31.c ****  * limitations under the License.
  27:Source\ControllerFunctions/arm_pid_init_q31.c ****  */
  28:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  29:Source\ControllerFunctions/arm_pid_init_q31.c **** #include "arm_math.h"
  30:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  31:Source\ControllerFunctions/arm_pid_init_q31.c ****  /**
  32:Source\ControllerFunctions/arm_pid_init_q31.c ****  * @addtogroup PID
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 2


  33:Source\ControllerFunctions/arm_pid_init_q31.c ****  * @{
  34:Source\ControllerFunctions/arm_pid_init_q31.c ****  */
  35:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  36:Source\ControllerFunctions/arm_pid_init_q31.c **** /**
  37:Source\ControllerFunctions/arm_pid_init_q31.c ****  * @brief  Initialization function for the Q31 PID Control.
  38:Source\ControllerFunctions/arm_pid_init_q31.c ****  * @param[in,out] *S points to an instance of the Q31 PID structure.
  39:Source\ControllerFunctions/arm_pid_init_q31.c ****  * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the sta
  40:Source\ControllerFunctions/arm_pid_init_q31.c ****  * @return none.
  41:Source\ControllerFunctions/arm_pid_init_q31.c ****  * \par Description:
  42:Source\ControllerFunctions/arm_pid_init_q31.c ****  * \par
  43:Source\ControllerFunctions/arm_pid_init_q31.c ****  * The <code>resetStateFlag</code> specifies whether to set state to zero or not. \n
  44:Source\ControllerFunctions/arm_pid_init_q31.c ****  * The function computes the structure fields: <code>A0</code>, <code>A1</code> <code>A2</code>
  45:Source\ControllerFunctions/arm_pid_init_q31.c ****  * using the proportional gain( \c Kp), integral gain( \c Ki) and derivative gain( \c Kd)
  46:Source\ControllerFunctions/arm_pid_init_q31.c ****  * also sets the state variables to all zeros.
  47:Source\ControllerFunctions/arm_pid_init_q31.c ****  */
  48:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  49:Source\ControllerFunctions/arm_pid_init_q31.c **** void arm_pid_init_q31(
  50:Source\ControllerFunctions/arm_pid_init_q31.c ****   arm_pid_instance_q31 * S,
  51:Source\ControllerFunctions/arm_pid_init_q31.c ****   int32_t resetStateFlag)
  52:Source\ControllerFunctions/arm_pid_init_q31.c **** {
  26              		.loc 1 52 0
  27              		.cfi_startproc
  28 0000 B0B5     		push	{r4, r5, r7, lr}
  29              		.cfi_def_cfa_offset 16
  30              		.cfi_offset 4, -16
  31              		.cfi_offset 5, -12
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 AAB0     		sub	sp, sp, #168
  35              		.cfi_def_cfa_offset 184
  36 0004 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  38 0006 F867     		str	r0, [r7, #124]
  39 0008 B967     		str	r1, [r7, #120]
  53:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  54:Source\ControllerFunctions/arm_pid_init_q31.c **** #if defined (ARM_MATH_DSP)
  55:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  56:Source\ControllerFunctions/arm_pid_init_q31.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  57:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  58:Source\ControllerFunctions/arm_pid_init_q31.c ****   /* Derived coefficient A0 */
  59:Source\ControllerFunctions/arm_pid_init_q31.c ****   S->A0 = __QADD(__QADD(S->Kp, S->Ki), S->Kd);
  60:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  61:Source\ControllerFunctions/arm_pid_init_q31.c ****   /* Derived coefficient A1 */
  62:Source\ControllerFunctions/arm_pid_init_q31.c ****   S->A1 = -__QADD(__QADD(S->Kd, S->Kd), S->Kp);
  63:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  64:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  65:Source\ControllerFunctions/arm_pid_init_q31.c **** #else
  66:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  67:Source\ControllerFunctions/arm_pid_init_q31.c ****   /* Run the below code for Cortex-M0 */
  68:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  69:Source\ControllerFunctions/arm_pid_init_q31.c ****   q31_t temp;
  70:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  71:Source\ControllerFunctions/arm_pid_init_q31.c ****   /* Derived coefficient A0 */
  72:Source\ControllerFunctions/arm_pid_init_q31.c ****   temp = clip_q63_to_q31((q63_t) S->Kp + S->Ki);
  40              		.loc 1 72 0
  41 000a FB6F     		ldr	r3, [r7, #124]
  42 000c 9B69     		ldr	r3, [r3, #24]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 3


  43 000e 3B67     		str	r3, [r7, #112]
  44 0010 DB17     		asr	r3, r3, #31
  45 0012 7B67     		str	r3, [r7, #116]
  46 0014 FB6F     		ldr	r3, [r7, #124]
  47 0016 DB69     		ldr	r3, [r3, #28]
  48 0018 1C1C     		mov	r4, r3
  49 001a DB17     		asr	r3, r3, #31
  50 001c 1D1C     		mov	r5, r3
  51 001e 3A6F     		ldr	r2, [r7, #112]
  52 0020 7B6F     		ldr	r3, [r7, #116]
  53 0022 1219     		add	r2, r2, r4
  54 0024 6B41     		adc	r3, r3, r5
  55 0026 1C1C     		mov	r4, r3
  56 0028 131C     		mov	r3, r2
  57 002a 9822     		mov	r2, #152
  58 002c BA18     		add	r2, r7, r2
  59 002e 1360     		str	r3, [r2]
  60 0030 5460     		str	r4, [r2, #4]
  61              	.LBB10:
  62              	.LBB11:
  63              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 4


  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 5


  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 6


 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 7


 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 8


 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 9


 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 10


 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 11


 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 12


 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
  64              		.loc 2 513 0
  65 0032 9C23     		mov	r3, #156
  66 0034 FB18     		add	r3, r7, r3
  67 0036 1B68     		ldr	r3, [r3]
  68 0038 1B00     		asr	r3, r3, #0
  69 003a BB63     		str	r3, [r7, #56]
  70 003c 9C23     		mov	r3, #156
  71 003e FB18     		add	r3, r7, r3
  72 0040 1B68     		ldr	r3, [r3]
  73 0042 DB17     		asr	r3, r3, #31
  74 0044 FB63     		str	r3, [r7, #60]
  75 0046 BA6B     		ldr	r2, [r7, #56]
  76 0048 9823     		mov	r3, #152
  77 004a FB18     		add	r3, r7, r3
  78 004c 1B68     		ldr	r3, [r3]
  79 004e DB17     		asr	r3, r3, #31
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
  80              		.loc 2 514 0
  81 0050 9A42     		cmp	r2, r3
  82 0052 0DD0     		beq	.L2
  83 0054 9C23     		mov	r3, #156
  84 0056 FB18     		add	r3, r7, r3
  85 0058 1B68     		ldr	r3, [r3]
  86 005a DB17     		asr	r3, r3, #31
  87 005c 3B63     		str	r3, [r7, #48]
  88 005e 9C23     		mov	r3, #156
  89 0060 FB18     		add	r3, r7, r3
  90 0062 1B68     		ldr	r3, [r3]
  91 0064 DB17     		asr	r3, r3, #31
  92 0066 7B63     		str	r3, [r7, #52]
  93 0068 3A6B     		ldr	r2, [r7, #48]
  94 006a 634B     		ldr	r3, .L15
  95 006c 5340     		eor	r3, r2
  96 006e 02E0     		b	.L4
  97              	.L2:
  98 0070 9823     		mov	r3, #152
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 13


  99 0072 FB18     		add	r3, r7, r3
 100 0074 1B68     		ldr	r3, [r3]
 101              	.L4:
 102              	.LBE11:
 103              	.LBE10:
 104              		.loc 1 72 0
 105 0076 A422     		mov	r2, #164
 106 0078 BA18     		add	r2, r7, r2
 107 007a 1360     		str	r3, [r2]
  73:Source\ControllerFunctions/arm_pid_init_q31.c ****   S->A0 = clip_q63_to_q31((q63_t) temp + S->Kd);
 108              		.loc 1 73 0
 109 007c A423     		mov	r3, #164
 110 007e FB18     		add	r3, r7, r3
 111 0080 1B68     		ldr	r3, [r3]
 112 0082 BB66     		str	r3, [r7, #104]
 113 0084 DB17     		asr	r3, r3, #31
 114 0086 FB66     		str	r3, [r7, #108]
 115 0088 FB6F     		ldr	r3, [r7, #124]
 116 008a 1B6A     		ldr	r3, [r3, #32]
 117 008c 3B66     		str	r3, [r7, #96]
 118 008e DB17     		asr	r3, r3, #31
 119 0090 7B66     		str	r3, [r7, #100]
 120 0092 BB6E     		ldr	r3, [r7, #104]
 121 0094 FC6E     		ldr	r4, [r7, #108]
 122 0096 396E     		ldr	r1, [r7, #96]
 123 0098 7A6E     		ldr	r2, [r7, #100]
 124 009a 5B18     		add	r3, r3, r1
 125 009c 5441     		adc	r4, r4, r2
 126 009e 9022     		mov	r2, #144
 127 00a0 BA18     		add	r2, r7, r2
 128 00a2 1360     		str	r3, [r2]
 129 00a4 5460     		str	r4, [r2, #4]
 130              	.LBB12:
 131              	.LBB13:
 513:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 132              		.loc 2 513 0
 133 00a6 9423     		mov	r3, #148
 134 00a8 FB18     		add	r3, r7, r3
 135 00aa 1B68     		ldr	r3, [r3]
 136 00ac 1B00     		asr	r3, r3, #0
 137 00ae BB62     		str	r3, [r7, #40]
 138 00b0 9423     		mov	r3, #148
 139 00b2 FB18     		add	r3, r7, r3
 140 00b4 1B68     		ldr	r3, [r3]
 141 00b6 DB17     		asr	r3, r3, #31
 142 00b8 FB62     		str	r3, [r7, #44]
 143 00ba BA6A     		ldr	r2, [r7, #40]
 144 00bc 9023     		mov	r3, #144
 145 00be FB18     		add	r3, r7, r3
 146 00c0 1B68     		ldr	r3, [r3]
 147 00c2 DB17     		asr	r3, r3, #31
 148              		.loc 2 514 0
 149 00c4 9A42     		cmp	r2, r3
 150 00c6 0DD0     		beq	.L5
 151 00c8 9423     		mov	r3, #148
 152 00ca FB18     		add	r3, r7, r3
 153 00cc 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 14


 154 00ce DB17     		asr	r3, r3, #31
 155 00d0 3B62     		str	r3, [r7, #32]
 156 00d2 9423     		mov	r3, #148
 157 00d4 FB18     		add	r3, r7, r3
 158 00d6 1B68     		ldr	r3, [r3]
 159 00d8 DB17     		asr	r3, r3, #31
 160 00da 7B62     		str	r3, [r7, #36]
 161 00dc 3A6A     		ldr	r2, [r7, #32]
 162 00de 464B     		ldr	r3, .L15
 163 00e0 5A40     		eor	r2, r3
 164 00e2 02E0     		b	.L7
 165              	.L5:
 166 00e4 9023     		mov	r3, #144
 167 00e6 FB18     		add	r3, r7, r3
 168 00e8 1A68     		ldr	r2, [r3]
 169              	.L7:
 170              	.LBE13:
 171              	.LBE12:
 172              		.loc 1 73 0
 173 00ea FB6F     		ldr	r3, [r7, #124]
 174 00ec 1A60     		str	r2, [r3]
  74:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  75:Source\ControllerFunctions/arm_pid_init_q31.c ****   /* Derived coefficient A1 */
  76:Source\ControllerFunctions/arm_pid_init_q31.c ****   temp = clip_q63_to_q31((q63_t) S->Kd + S->Kd);
 175              		.loc 1 76 0
 176 00ee FB6F     		ldr	r3, [r7, #124]
 177 00f0 1B6A     		ldr	r3, [r3, #32]
 178 00f2 BB65     		str	r3, [r7, #88]
 179 00f4 DB17     		asr	r3, r3, #31
 180 00f6 FB65     		str	r3, [r7, #92]
 181 00f8 FB6F     		ldr	r3, [r7, #124]
 182 00fa 1B6A     		ldr	r3, [r3, #32]
 183 00fc 3B65     		str	r3, [r7, #80]
 184 00fe DB17     		asr	r3, r3, #31
 185 0100 7B65     		str	r3, [r7, #84]
 186 0102 BB6D     		ldr	r3, [r7, #88]
 187 0104 FC6D     		ldr	r4, [r7, #92]
 188 0106 396D     		ldr	r1, [r7, #80]
 189 0108 7A6D     		ldr	r2, [r7, #84]
 190 010a 5B18     		add	r3, r3, r1
 191 010c 5441     		adc	r4, r4, r2
 192 010e 8822     		mov	r2, #136
 193 0110 BA18     		add	r2, r7, r2
 194 0112 1360     		str	r3, [r2]
 195 0114 5460     		str	r4, [r2, #4]
 196              	.LBB14:
 197              	.LBB15:
 513:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 198              		.loc 2 513 0
 199 0116 8C23     		mov	r3, #140
 200 0118 FB18     		add	r3, r7, r3
 201 011a 1B68     		ldr	r3, [r3]
 202 011c 1B00     		asr	r3, r3, #0
 203 011e BB61     		str	r3, [r7, #24]
 204 0120 8C23     		mov	r3, #140
 205 0122 FB18     		add	r3, r7, r3
 206 0124 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 15


 207 0126 DB17     		asr	r3, r3, #31
 208 0128 FB61     		str	r3, [r7, #28]
 209 012a BA69     		ldr	r2, [r7, #24]
 210 012c 8823     		mov	r3, #136
 211 012e FB18     		add	r3, r7, r3
 212 0130 1B68     		ldr	r3, [r3]
 213 0132 DB17     		asr	r3, r3, #31
 214              		.loc 2 514 0
 215 0134 9A42     		cmp	r2, r3
 216 0136 0DD0     		beq	.L8
 217 0138 8C23     		mov	r3, #140
 218 013a FB18     		add	r3, r7, r3
 219 013c 1B68     		ldr	r3, [r3]
 220 013e DB17     		asr	r3, r3, #31
 221 0140 3B61     		str	r3, [r7, #16]
 222 0142 8C23     		mov	r3, #140
 223 0144 FB18     		add	r3, r7, r3
 224 0146 1B68     		ldr	r3, [r3]
 225 0148 DB17     		asr	r3, r3, #31
 226 014a 7B61     		str	r3, [r7, #20]
 227 014c 3A69     		ldr	r2, [r7, #16]
 228 014e 2A4B     		ldr	r3, .L15
 229 0150 5340     		eor	r3, r2
 230 0152 02E0     		b	.L10
 231              	.L8:
 232 0154 8823     		mov	r3, #136
 233 0156 FB18     		add	r3, r7, r3
 234 0158 1B68     		ldr	r3, [r3]
 235              	.L10:
 236              	.LBE15:
 237              	.LBE14:
 238              		.loc 1 76 0
 239 015a A422     		mov	r2, #164
 240 015c BA18     		add	r2, r7, r2
 241 015e 1360     		str	r3, [r2]
  77:Source\ControllerFunctions/arm_pid_init_q31.c ****   S->A1 = -clip_q63_to_q31((q63_t) temp + S->Kp);
 242              		.loc 1 77 0
 243 0160 A423     		mov	r3, #164
 244 0162 FB18     		add	r3, r7, r3
 245 0164 1B68     		ldr	r3, [r3]
 246 0166 BB64     		str	r3, [r7, #72]
 247 0168 DB17     		asr	r3, r3, #31
 248 016a FB64     		str	r3, [r7, #76]
 249 016c FB6F     		ldr	r3, [r7, #124]
 250 016e 9B69     		ldr	r3, [r3, #24]
 251 0170 3B64     		str	r3, [r7, #64]
 252 0172 DB17     		asr	r3, r3, #31
 253 0174 7B64     		str	r3, [r7, #68]
 254 0176 BB6C     		ldr	r3, [r7, #72]
 255 0178 FC6C     		ldr	r4, [r7, #76]
 256 017a 396C     		ldr	r1, [r7, #64]
 257 017c 7A6C     		ldr	r2, [r7, #68]
 258 017e 5B18     		add	r3, r3, r1
 259 0180 5441     		adc	r4, r4, r2
 260 0182 8022     		mov	r2, #128
 261 0184 BA18     		add	r2, r7, r2
 262 0186 1360     		str	r3, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 16


 263 0188 5460     		str	r4, [r2, #4]
 264              	.LBB16:
 265              	.LBB17:
 513:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 266              		.loc 2 513 0
 267 018a 8423     		mov	r3, #132
 268 018c FB18     		add	r3, r7, r3
 269 018e 1B68     		ldr	r3, [r3]
 270 0190 1B00     		asr	r3, r3, #0
 271 0192 BB60     		str	r3, [r7, #8]
 272 0194 8423     		mov	r3, #132
 273 0196 FB18     		add	r3, r7, r3
 274 0198 1B68     		ldr	r3, [r3]
 275 019a DB17     		asr	r3, r3, #31
 276 019c FB60     		str	r3, [r7, #12]
 277 019e BA68     		ldr	r2, [r7, #8]
 278 01a0 8023     		mov	r3, #128
 279 01a2 FB18     		add	r3, r7, r3
 280 01a4 1B68     		ldr	r3, [r3]
 281 01a6 DB17     		asr	r3, r3, #31
 282              		.loc 2 514 0
 283 01a8 9A42     		cmp	r2, r3
 284 01aa 0DD0     		beq	.L11
 285 01ac 8423     		mov	r3, #132
 286 01ae FB18     		add	r3, r7, r3
 287 01b0 1B68     		ldr	r3, [r3]
 288 01b2 DB17     		asr	r3, r3, #31
 289 01b4 3B60     		str	r3, [r7]
 290 01b6 8423     		mov	r3, #132
 291 01b8 FB18     		add	r3, r7, r3
 292 01ba 1B68     		ldr	r3, [r3]
 293 01bc DB17     		asr	r3, r3, #31
 294 01be 7B60     		str	r3, [r7, #4]
 295 01c0 3A68     		ldr	r2, [r7]
 296 01c2 0D4B     		ldr	r3, .L15
 297 01c4 5340     		eor	r3, r2
 298 01c6 02E0     		b	.L13
 299              	.L11:
 300 01c8 8023     		mov	r3, #128
 301 01ca FB18     		add	r3, r7, r3
 302 01cc 1B68     		ldr	r3, [r3]
 303              	.L13:
 304              	.LBE17:
 305              	.LBE16:
 306              		.loc 1 77 0
 307 01ce 5A42     		neg	r2, r3
 308 01d0 FB6F     		ldr	r3, [r7, #124]
 309 01d2 5A60     		str	r2, [r3, #4]
  78:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  79:Source\ControllerFunctions/arm_pid_init_q31.c **** #endif /* #if defined (ARM_MATH_DSP) */
  80:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  81:Source\ControllerFunctions/arm_pid_init_q31.c ****   /* Derived coefficient A2 */
  82:Source\ControllerFunctions/arm_pid_init_q31.c ****   S->A2 = S->Kd;
 310              		.loc 1 82 0
 311 01d4 FB6F     		ldr	r3, [r7, #124]
 312 01d6 1A6A     		ldr	r2, [r3, #32]
 313 01d8 FB6F     		ldr	r3, [r7, #124]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 17


 314 01da 9A60     		str	r2, [r3, #8]
  83:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  84:Source\ControllerFunctions/arm_pid_init_q31.c ****   /* Check whether state needs reset or not */
  85:Source\ControllerFunctions/arm_pid_init_q31.c ****   if (resetStateFlag)
 315              		.loc 1 85 0
 316 01dc BB6F     		ldr	r3, [r7, #120]
 317 01de 002B     		cmp	r3, #0
 318 01e0 06D0     		beq	.L1
  86:Source\ControllerFunctions/arm_pid_init_q31.c ****   {
  87:Source\ControllerFunctions/arm_pid_init_q31.c ****     /* Clear the state buffer.  The size will be always 3 samples */
  88:Source\ControllerFunctions/arm_pid_init_q31.c ****     memset(S->state, 0, 3u * sizeof(q31_t));
 319              		.loc 1 88 0
 320 01e2 FB6F     		ldr	r3, [r7, #124]
 321 01e4 0C33     		add	r3, r3, #12
 322 01e6 181C     		mov	r0, r3
 323 01e8 0021     		mov	r1, #0
 324 01ea 0C22     		mov	r2, #12
 325 01ec FFF7FEFF 		bl	memset
 326              	.L1:
  89:Source\ControllerFunctions/arm_pid_init_q31.c ****   }
  90:Source\ControllerFunctions/arm_pid_init_q31.c **** 
  91:Source\ControllerFunctions/arm_pid_init_q31.c **** }
 327              		.loc 1 91 0
 328 01f0 BD46     		mov	sp, r7
 329 01f2 2AB0     		add	sp, sp, #168
 330              		@ sp needed
 331 01f4 B0BD     		pop	{r4, r5, r7, pc}
 332              	.L16:
 333 01f6 C046     		.align	2
 334              	.L15:
 335 01f8 FFFFFF7F 		.word	2147483647
 336              		.cfi_endproc
 337              	.LFE82:
 338              		.size	arm_pid_init_q31, .-arm_pid_init_q31
 339              		.text
 340              	.Letext0:
 341              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 342              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 343              		.section	.debug_info,"",%progbits
 344              	.Ldebug_info0:
 345 0000 16020000 		.4byte	0x216
 346 0004 0400     		.2byte	0x4
 347 0006 00000000 		.4byte	.Ldebug_abbrev0
 348 000a 04       		.byte	0x4
 349 000b 01       		.uleb128 0x1
 350 000c FD000000 		.4byte	.LASF23
 351 0010 01       		.byte	0x1
 352 0011 C3010000 		.4byte	.LASF24
 353 0015 10000000 		.4byte	.LASF25
 354 0019 00000000 		.4byte	.Ldebug_ranges0+0
 355 001d 00000000 		.4byte	0
 356 0021 00000000 		.4byte	.Ldebug_line0
 357 0025 02       		.uleb128 0x2
 358 0026 01       		.byte	0x1
 359 0027 06       		.byte	0x6
 360 0028 25020000 		.4byte	.LASF0
 361 002c 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 18


 362 002d 01       		.byte	0x1
 363 002e 08       		.byte	0x8
 364 002f A5000000 		.4byte	.LASF1
 365 0033 02       		.uleb128 0x2
 366 0034 02       		.byte	0x2
 367 0035 05       		.byte	0x5
 368 0036 06020000 		.4byte	.LASF2
 369 003a 02       		.uleb128 0x2
 370 003b 02       		.byte	0x2
 371 003c 07       		.byte	0x7
 372 003d 92000000 		.4byte	.LASF3
 373 0041 03       		.uleb128 0x3
 374 0042 06000000 		.4byte	.LASF6
 375 0046 03       		.byte	0x3
 376 0047 3F       		.byte	0x3f
 377 0048 4C000000 		.4byte	0x4c
 378 004c 02       		.uleb128 0x2
 379 004d 04       		.byte	0x4
 380 004e 05       		.byte	0x5
 381 004f 10020000 		.4byte	.LASF4
 382 0053 02       		.uleb128 0x2
 383 0054 04       		.byte	0x4
 384 0055 07       		.byte	0x7
 385 0056 7B000000 		.4byte	.LASF5
 386 005a 03       		.uleb128 0x3
 387 005b B3000000 		.4byte	.LASF7
 388 005f 03       		.byte	0x3
 389 0060 59       		.byte	0x59
 390 0061 65000000 		.4byte	0x65
 391 0065 02       		.uleb128 0x2
 392 0066 08       		.byte	0x8
 393 0067 05       		.byte	0x5
 394 0068 B5010000 		.4byte	.LASF8
 395 006c 02       		.uleb128 0x2
 396 006d 08       		.byte	0x8
 397 006e 07       		.byte	0x7
 398 006f E6000000 		.4byte	.LASF9
 399 0073 04       		.uleb128 0x4
 400 0074 04       		.byte	0x4
 401 0075 05       		.byte	0x5
 402 0076 696E7400 		.ascii	"int\000"
 403 007a 02       		.uleb128 0x2
 404 007b 04       		.byte	0x4
 405 007c 07       		.byte	0x7
 406 007d D9000000 		.4byte	.LASF10
 407 0081 03       		.uleb128 0x3
 408 0082 5C000000 		.4byte	.LASF11
 409 0086 04       		.byte	0x4
 410 0087 2C       		.byte	0x2c
 411 0088 41000000 		.4byte	0x41
 412 008c 03       		.uleb128 0x3
 413 008d AD010000 		.4byte	.LASF12
 414 0091 04       		.byte	0x4
 415 0092 38       		.byte	0x38
 416 0093 5A000000 		.4byte	0x5a
 417 0097 02       		.uleb128 0x2
 418 0098 04       		.byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 19


 419 0099 07       		.byte	0x7
 420 009a A4010000 		.4byte	.LASF13
 421 009e 02       		.uleb128 0x2
 422 009f 01       		.byte	0x1
 423 00a0 08       		.byte	0x8
 424 00a1 01020000 		.4byte	.LASF14
 425 00a5 02       		.uleb128 0x2
 426 00a6 08       		.byte	0x8
 427 00a7 04       		.byte	0x4
 428 00a8 BD000000 		.4byte	.LASF15
 429 00ac 02       		.uleb128 0x2
 430 00ad 04       		.byte	0x4
 431 00ae 04       		.byte	0x4
 432 00af 75000000 		.4byte	.LASF16
 433 00b3 02       		.uleb128 0x2
 434 00b4 08       		.byte	0x8
 435 00b5 04       		.byte	0x4
 436 00b6 19020000 		.4byte	.LASF17
 437 00ba 05       		.uleb128 0x5
 438 00bb 56000000 		.4byte	.LASF18
 439 00bf 02       		.byte	0x2
 440 00c0 9B01     		.2byte	0x19b
 441 00c2 81000000 		.4byte	0x81
 442 00c6 05       		.uleb128 0x5
 443 00c7 8F010000 		.4byte	.LASF19
 444 00cb 02       		.byte	0x2
 445 00cc A001     		.2byte	0x1a0
 446 00ce 8C000000 		.4byte	0x8c
 447 00d2 06       		.uleb128 0x6
 448 00d3 24       		.byte	0x24
 449 00d4 02       		.byte	0x2
 450 00d5 1C07     		.2byte	0x71c
 451 00d7 31010000 		.4byte	0x131
 452 00db 07       		.uleb128 0x7
 453 00dc 413000   		.ascii	"A0\000"
 454 00df 02       		.byte	0x2
 455 00e0 1E07     		.2byte	0x71e
 456 00e2 BA000000 		.4byte	0xba
 457 00e6 00       		.byte	0
 458 00e7 07       		.uleb128 0x7
 459 00e8 413100   		.ascii	"A1\000"
 460 00eb 02       		.byte	0x2
 461 00ec 1F07     		.2byte	0x71f
 462 00ee BA000000 		.4byte	0xba
 463 00f2 04       		.byte	0x4
 464 00f3 07       		.uleb128 0x7
 465 00f4 413200   		.ascii	"A2\000"
 466 00f7 02       		.byte	0x2
 467 00f8 2007     		.2byte	0x720
 468 00fa BA000000 		.4byte	0xba
 469 00fe 08       		.byte	0x8
 470 00ff 08       		.uleb128 0x8
 471 0100 00000000 		.4byte	.LASF20
 472 0104 02       		.byte	0x2
 473 0105 2107     		.2byte	0x721
 474 0107 31010000 		.4byte	0x131
 475 010b 0C       		.byte	0xc
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 20


 476 010c 07       		.uleb128 0x7
 477 010d 4B7000   		.ascii	"Kp\000"
 478 0110 02       		.byte	0x2
 479 0111 2207     		.2byte	0x722
 480 0113 BA000000 		.4byte	0xba
 481 0117 18       		.byte	0x18
 482 0118 07       		.uleb128 0x7
 483 0119 4B6900   		.ascii	"Ki\000"
 484 011c 02       		.byte	0x2
 485 011d 2307     		.2byte	0x723
 486 011f BA000000 		.4byte	0xba
 487 0123 1C       		.byte	0x1c
 488 0124 07       		.uleb128 0x7
 489 0125 4B6400   		.ascii	"Kd\000"
 490 0128 02       		.byte	0x2
 491 0129 2407     		.2byte	0x724
 492 012b BA000000 		.4byte	0xba
 493 012f 20       		.byte	0x20
 494 0130 00       		.byte	0
 495 0131 09       		.uleb128 0x9
 496 0132 BA000000 		.4byte	0xba
 497 0136 41010000 		.4byte	0x141
 498 013a 0A       		.uleb128 0xa
 499 013b 97000000 		.4byte	0x97
 500 013f 02       		.byte	0x2
 501 0140 00       		.byte	0
 502 0141 05       		.uleb128 0x5
 503 0142 C4000000 		.4byte	.LASF21
 504 0146 02       		.byte	0x2
 505 0147 2507     		.2byte	0x725
 506 0149 D2000000 		.4byte	0xd2
 507 014d 0B       		.uleb128 0xb
 508 014e F1010000 		.4byte	.LASF26
 509 0152 02       		.byte	0x2
 510 0153 FE01     		.2byte	0x1fe
 511 0155 BA000000 		.4byte	0xba
 512 0159 03       		.byte	0x3
 513 015a 69010000 		.4byte	0x169
 514 015e 0C       		.uleb128 0xc
 515 015f 7800     		.ascii	"x\000"
 516 0161 02       		.byte	0x2
 517 0162 FF01     		.2byte	0x1ff
 518 0164 C6000000 		.4byte	0xc6
 519 0168 00       		.byte	0
 520 0169 0D       		.uleb128 0xd
 521 016a 64000000 		.4byte	.LASF27
 522 016e 01       		.byte	0x1
 523 016f 31       		.byte	0x31
 524 0170 00000000 		.4byte	.LFB82
 525 0174 FC010000 		.4byte	.LFE82-.LFB82
 526 0178 01       		.uleb128 0x1
 527 0179 9C       		.byte	0x9c
 528 017a 13020000 		.4byte	0x213
 529 017e 0E       		.uleb128 0xe
 530 017f 5300     		.ascii	"S\000"
 531 0181 01       		.byte	0x1
 532 0182 32       		.byte	0x32
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 21


 533 0183 13020000 		.4byte	0x213
 534 0187 02       		.uleb128 0x2
 535 0188 91       		.byte	0x91
 536 0189 44       		.sleb128 -60
 537 018a 0F       		.uleb128 0xf
 538 018b 95010000 		.4byte	.LASF22
 539 018f 01       		.byte	0x1
 540 0190 33       		.byte	0x33
 541 0191 81000000 		.4byte	0x81
 542 0195 02       		.uleb128 0x2
 543 0196 91       		.byte	0x91
 544 0197 40       		.sleb128 -64
 545 0198 10       		.uleb128 0x10
 546 0199 8D000000 		.4byte	.LASF28
 547 019d 01       		.byte	0x1
 548 019e 45       		.byte	0x45
 549 019f BA000000 		.4byte	0xba
 550 01a3 02       		.uleb128 0x2
 551 01a4 91       		.byte	0x91
 552 01a5 6C       		.sleb128 -20
 553 01a6 11       		.uleb128 0x11
 554 01a7 4D010000 		.4byte	0x14d
 555 01ab 32000000 		.4byte	.LBB10
 556 01af 44000000 		.4byte	.LBE10-.LBB10
 557 01b3 01       		.byte	0x1
 558 01b4 48       		.byte	0x48
 559 01b5 C2010000 		.4byte	0x1c2
 560 01b9 12       		.uleb128 0x12
 561 01ba 5E010000 		.4byte	0x15e
 562 01be 02       		.uleb128 0x2
 563 01bf 91       		.byte	0x91
 564 01c0 60       		.sleb128 -32
 565 01c1 00       		.byte	0
 566 01c2 11       		.uleb128 0x11
 567 01c3 4D010000 		.4byte	0x14d
 568 01c7 A6000000 		.4byte	.LBB12
 569 01cb 44000000 		.4byte	.LBE12-.LBB12
 570 01cf 01       		.byte	0x1
 571 01d0 49       		.byte	0x49
 572 01d1 DE010000 		.4byte	0x1de
 573 01d5 12       		.uleb128 0x12
 574 01d6 5E010000 		.4byte	0x15e
 575 01da 02       		.uleb128 0x2
 576 01db 91       		.byte	0x91
 577 01dc 58       		.sleb128 -40
 578 01dd 00       		.byte	0
 579 01de 11       		.uleb128 0x11
 580 01df 4D010000 		.4byte	0x14d
 581 01e3 16010000 		.4byte	.LBB14
 582 01e7 44000000 		.4byte	.LBE14-.LBB14
 583 01eb 01       		.byte	0x1
 584 01ec 4C       		.byte	0x4c
 585 01ed FA010000 		.4byte	0x1fa
 586 01f1 12       		.uleb128 0x12
 587 01f2 5E010000 		.4byte	0x15e
 588 01f6 02       		.uleb128 0x2
 589 01f7 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 22


 590 01f8 50       		.sleb128 -48
 591 01f9 00       		.byte	0
 592 01fa 13       		.uleb128 0x13
 593 01fb 4D010000 		.4byte	0x14d
 594 01ff 8A010000 		.4byte	.LBB16
 595 0203 44000000 		.4byte	.LBE16-.LBB16
 596 0207 01       		.byte	0x1
 597 0208 4D       		.byte	0x4d
 598 0209 12       		.uleb128 0x12
 599 020a 5E010000 		.4byte	0x15e
 600 020e 02       		.uleb128 0x2
 601 020f 91       		.byte	0x91
 602 0210 48       		.sleb128 -56
 603 0211 00       		.byte	0
 604 0212 00       		.byte	0
 605 0213 14       		.uleb128 0x14
 606 0214 04       		.byte	0x4
 607 0215 41010000 		.4byte	0x141
 608 0219 00       		.byte	0
 609              		.section	.debug_abbrev,"",%progbits
 610              	.Ldebug_abbrev0:
 611 0000 01       		.uleb128 0x1
 612 0001 11       		.uleb128 0x11
 613 0002 01       		.byte	0x1
 614 0003 25       		.uleb128 0x25
 615 0004 0E       		.uleb128 0xe
 616 0005 13       		.uleb128 0x13
 617 0006 0B       		.uleb128 0xb
 618 0007 03       		.uleb128 0x3
 619 0008 0E       		.uleb128 0xe
 620 0009 1B       		.uleb128 0x1b
 621 000a 0E       		.uleb128 0xe
 622 000b 55       		.uleb128 0x55
 623 000c 17       		.uleb128 0x17
 624 000d 11       		.uleb128 0x11
 625 000e 01       		.uleb128 0x1
 626 000f 10       		.uleb128 0x10
 627 0010 17       		.uleb128 0x17
 628 0011 00       		.byte	0
 629 0012 00       		.byte	0
 630 0013 02       		.uleb128 0x2
 631 0014 24       		.uleb128 0x24
 632 0015 00       		.byte	0
 633 0016 0B       		.uleb128 0xb
 634 0017 0B       		.uleb128 0xb
 635 0018 3E       		.uleb128 0x3e
 636 0019 0B       		.uleb128 0xb
 637 001a 03       		.uleb128 0x3
 638 001b 0E       		.uleb128 0xe
 639 001c 00       		.byte	0
 640 001d 00       		.byte	0
 641 001e 03       		.uleb128 0x3
 642 001f 16       		.uleb128 0x16
 643 0020 00       		.byte	0
 644 0021 03       		.uleb128 0x3
 645 0022 0E       		.uleb128 0xe
 646 0023 3A       		.uleb128 0x3a
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 23


 647 0024 0B       		.uleb128 0xb
 648 0025 3B       		.uleb128 0x3b
 649 0026 0B       		.uleb128 0xb
 650 0027 49       		.uleb128 0x49
 651 0028 13       		.uleb128 0x13
 652 0029 00       		.byte	0
 653 002a 00       		.byte	0
 654 002b 04       		.uleb128 0x4
 655 002c 24       		.uleb128 0x24
 656 002d 00       		.byte	0
 657 002e 0B       		.uleb128 0xb
 658 002f 0B       		.uleb128 0xb
 659 0030 3E       		.uleb128 0x3e
 660 0031 0B       		.uleb128 0xb
 661 0032 03       		.uleb128 0x3
 662 0033 08       		.uleb128 0x8
 663 0034 00       		.byte	0
 664 0035 00       		.byte	0
 665 0036 05       		.uleb128 0x5
 666 0037 16       		.uleb128 0x16
 667 0038 00       		.byte	0
 668 0039 03       		.uleb128 0x3
 669 003a 0E       		.uleb128 0xe
 670 003b 3A       		.uleb128 0x3a
 671 003c 0B       		.uleb128 0xb
 672 003d 3B       		.uleb128 0x3b
 673 003e 05       		.uleb128 0x5
 674 003f 49       		.uleb128 0x49
 675 0040 13       		.uleb128 0x13
 676 0041 00       		.byte	0
 677 0042 00       		.byte	0
 678 0043 06       		.uleb128 0x6
 679 0044 13       		.uleb128 0x13
 680 0045 01       		.byte	0x1
 681 0046 0B       		.uleb128 0xb
 682 0047 0B       		.uleb128 0xb
 683 0048 3A       		.uleb128 0x3a
 684 0049 0B       		.uleb128 0xb
 685 004a 3B       		.uleb128 0x3b
 686 004b 05       		.uleb128 0x5
 687 004c 01       		.uleb128 0x1
 688 004d 13       		.uleb128 0x13
 689 004e 00       		.byte	0
 690 004f 00       		.byte	0
 691 0050 07       		.uleb128 0x7
 692 0051 0D       		.uleb128 0xd
 693 0052 00       		.byte	0
 694 0053 03       		.uleb128 0x3
 695 0054 08       		.uleb128 0x8
 696 0055 3A       		.uleb128 0x3a
 697 0056 0B       		.uleb128 0xb
 698 0057 3B       		.uleb128 0x3b
 699 0058 05       		.uleb128 0x5
 700 0059 49       		.uleb128 0x49
 701 005a 13       		.uleb128 0x13
 702 005b 38       		.uleb128 0x38
 703 005c 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 24


 704 005d 00       		.byte	0
 705 005e 00       		.byte	0
 706 005f 08       		.uleb128 0x8
 707 0060 0D       		.uleb128 0xd
 708 0061 00       		.byte	0
 709 0062 03       		.uleb128 0x3
 710 0063 0E       		.uleb128 0xe
 711 0064 3A       		.uleb128 0x3a
 712 0065 0B       		.uleb128 0xb
 713 0066 3B       		.uleb128 0x3b
 714 0067 05       		.uleb128 0x5
 715 0068 49       		.uleb128 0x49
 716 0069 13       		.uleb128 0x13
 717 006a 38       		.uleb128 0x38
 718 006b 0B       		.uleb128 0xb
 719 006c 00       		.byte	0
 720 006d 00       		.byte	0
 721 006e 09       		.uleb128 0x9
 722 006f 01       		.uleb128 0x1
 723 0070 01       		.byte	0x1
 724 0071 49       		.uleb128 0x49
 725 0072 13       		.uleb128 0x13
 726 0073 01       		.uleb128 0x1
 727 0074 13       		.uleb128 0x13
 728 0075 00       		.byte	0
 729 0076 00       		.byte	0
 730 0077 0A       		.uleb128 0xa
 731 0078 21       		.uleb128 0x21
 732 0079 00       		.byte	0
 733 007a 49       		.uleb128 0x49
 734 007b 13       		.uleb128 0x13
 735 007c 2F       		.uleb128 0x2f
 736 007d 0B       		.uleb128 0xb
 737 007e 00       		.byte	0
 738 007f 00       		.byte	0
 739 0080 0B       		.uleb128 0xb
 740 0081 2E       		.uleb128 0x2e
 741 0082 01       		.byte	0x1
 742 0083 03       		.uleb128 0x3
 743 0084 0E       		.uleb128 0xe
 744 0085 3A       		.uleb128 0x3a
 745 0086 0B       		.uleb128 0xb
 746 0087 3B       		.uleb128 0x3b
 747 0088 05       		.uleb128 0x5
 748 0089 27       		.uleb128 0x27
 749 008a 19       		.uleb128 0x19
 750 008b 49       		.uleb128 0x49
 751 008c 13       		.uleb128 0x13
 752 008d 20       		.uleb128 0x20
 753 008e 0B       		.uleb128 0xb
 754 008f 01       		.uleb128 0x1
 755 0090 13       		.uleb128 0x13
 756 0091 00       		.byte	0
 757 0092 00       		.byte	0
 758 0093 0C       		.uleb128 0xc
 759 0094 05       		.uleb128 0x5
 760 0095 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 25


 761 0096 03       		.uleb128 0x3
 762 0097 08       		.uleb128 0x8
 763 0098 3A       		.uleb128 0x3a
 764 0099 0B       		.uleb128 0xb
 765 009a 3B       		.uleb128 0x3b
 766 009b 05       		.uleb128 0x5
 767 009c 49       		.uleb128 0x49
 768 009d 13       		.uleb128 0x13
 769 009e 00       		.byte	0
 770 009f 00       		.byte	0
 771 00a0 0D       		.uleb128 0xd
 772 00a1 2E       		.uleb128 0x2e
 773 00a2 01       		.byte	0x1
 774 00a3 3F       		.uleb128 0x3f
 775 00a4 19       		.uleb128 0x19
 776 00a5 03       		.uleb128 0x3
 777 00a6 0E       		.uleb128 0xe
 778 00a7 3A       		.uleb128 0x3a
 779 00a8 0B       		.uleb128 0xb
 780 00a9 3B       		.uleb128 0x3b
 781 00aa 0B       		.uleb128 0xb
 782 00ab 27       		.uleb128 0x27
 783 00ac 19       		.uleb128 0x19
 784 00ad 11       		.uleb128 0x11
 785 00ae 01       		.uleb128 0x1
 786 00af 12       		.uleb128 0x12
 787 00b0 06       		.uleb128 0x6
 788 00b1 40       		.uleb128 0x40
 789 00b2 18       		.uleb128 0x18
 790 00b3 9642     		.uleb128 0x2116
 791 00b5 19       		.uleb128 0x19
 792 00b6 01       		.uleb128 0x1
 793 00b7 13       		.uleb128 0x13
 794 00b8 00       		.byte	0
 795 00b9 00       		.byte	0
 796 00ba 0E       		.uleb128 0xe
 797 00bb 05       		.uleb128 0x5
 798 00bc 00       		.byte	0
 799 00bd 03       		.uleb128 0x3
 800 00be 08       		.uleb128 0x8
 801 00bf 3A       		.uleb128 0x3a
 802 00c0 0B       		.uleb128 0xb
 803 00c1 3B       		.uleb128 0x3b
 804 00c2 0B       		.uleb128 0xb
 805 00c3 49       		.uleb128 0x49
 806 00c4 13       		.uleb128 0x13
 807 00c5 02       		.uleb128 0x2
 808 00c6 18       		.uleb128 0x18
 809 00c7 00       		.byte	0
 810 00c8 00       		.byte	0
 811 00c9 0F       		.uleb128 0xf
 812 00ca 05       		.uleb128 0x5
 813 00cb 00       		.byte	0
 814 00cc 03       		.uleb128 0x3
 815 00cd 0E       		.uleb128 0xe
 816 00ce 3A       		.uleb128 0x3a
 817 00cf 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 26


 818 00d0 3B       		.uleb128 0x3b
 819 00d1 0B       		.uleb128 0xb
 820 00d2 49       		.uleb128 0x49
 821 00d3 13       		.uleb128 0x13
 822 00d4 02       		.uleb128 0x2
 823 00d5 18       		.uleb128 0x18
 824 00d6 00       		.byte	0
 825 00d7 00       		.byte	0
 826 00d8 10       		.uleb128 0x10
 827 00d9 34       		.uleb128 0x34
 828 00da 00       		.byte	0
 829 00db 03       		.uleb128 0x3
 830 00dc 0E       		.uleb128 0xe
 831 00dd 3A       		.uleb128 0x3a
 832 00de 0B       		.uleb128 0xb
 833 00df 3B       		.uleb128 0x3b
 834 00e0 0B       		.uleb128 0xb
 835 00e1 49       		.uleb128 0x49
 836 00e2 13       		.uleb128 0x13
 837 00e3 02       		.uleb128 0x2
 838 00e4 18       		.uleb128 0x18
 839 00e5 00       		.byte	0
 840 00e6 00       		.byte	0
 841 00e7 11       		.uleb128 0x11
 842 00e8 1D       		.uleb128 0x1d
 843 00e9 01       		.byte	0x1
 844 00ea 31       		.uleb128 0x31
 845 00eb 13       		.uleb128 0x13
 846 00ec 11       		.uleb128 0x11
 847 00ed 01       		.uleb128 0x1
 848 00ee 12       		.uleb128 0x12
 849 00ef 06       		.uleb128 0x6
 850 00f0 58       		.uleb128 0x58
 851 00f1 0B       		.uleb128 0xb
 852 00f2 59       		.uleb128 0x59
 853 00f3 0B       		.uleb128 0xb
 854 00f4 01       		.uleb128 0x1
 855 00f5 13       		.uleb128 0x13
 856 00f6 00       		.byte	0
 857 00f7 00       		.byte	0
 858 00f8 12       		.uleb128 0x12
 859 00f9 05       		.uleb128 0x5
 860 00fa 00       		.byte	0
 861 00fb 31       		.uleb128 0x31
 862 00fc 13       		.uleb128 0x13
 863 00fd 02       		.uleb128 0x2
 864 00fe 18       		.uleb128 0x18
 865 00ff 00       		.byte	0
 866 0100 00       		.byte	0
 867 0101 13       		.uleb128 0x13
 868 0102 1D       		.uleb128 0x1d
 869 0103 01       		.byte	0x1
 870 0104 31       		.uleb128 0x31
 871 0105 13       		.uleb128 0x13
 872 0106 11       		.uleb128 0x11
 873 0107 01       		.uleb128 0x1
 874 0108 12       		.uleb128 0x12
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 27


 875 0109 06       		.uleb128 0x6
 876 010a 58       		.uleb128 0x58
 877 010b 0B       		.uleb128 0xb
 878 010c 59       		.uleb128 0x59
 879 010d 0B       		.uleb128 0xb
 880 010e 00       		.byte	0
 881 010f 00       		.byte	0
 882 0110 14       		.uleb128 0x14
 883 0111 0F       		.uleb128 0xf
 884 0112 00       		.byte	0
 885 0113 0B       		.uleb128 0xb
 886 0114 0B       		.uleb128 0xb
 887 0115 49       		.uleb128 0x49
 888 0116 13       		.uleb128 0x13
 889 0117 00       		.byte	0
 890 0118 00       		.byte	0
 891 0119 00       		.byte	0
 892              		.section	.debug_aranges,"",%progbits
 893 0000 1C000000 		.4byte	0x1c
 894 0004 0200     		.2byte	0x2
 895 0006 00000000 		.4byte	.Ldebug_info0
 896 000a 04       		.byte	0x4
 897 000b 00       		.byte	0
 898 000c 0000     		.2byte	0
 899 000e 0000     		.2byte	0
 900 0010 00000000 		.4byte	.LFB82
 901 0014 FC010000 		.4byte	.LFE82-.LFB82
 902 0018 00000000 		.4byte	0
 903 001c 00000000 		.4byte	0
 904              		.section	.debug_ranges,"",%progbits
 905              	.Ldebug_ranges0:
 906 0000 00000000 		.4byte	.LFB82
 907 0004 FC010000 		.4byte	.LFE82
 908 0008 00000000 		.4byte	0
 909 000c 00000000 		.4byte	0
 910              		.section	.debug_line,"",%progbits
 911              	.Ldebug_line0:
 912 0000 AF010000 		.section	.debug_str,"MS",%progbits,1
 912      02005401 
 912      00000201 
 912      FB0E0D00 
 912      01010101 
 913              	.LASF20:
 914 0000 73746174 		.ascii	"state\000"
 914      6500
 915              	.LASF6:
 916 0006 5F5F696E 		.ascii	"__int32_t\000"
 916      7433325F 
 916      7400
 917              	.LASF25:
 918 0010 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 918      73657273 
 918      5C666E65 
 918      7665735C 
 918      446F6375 
 919 003d 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 919      655F7370 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 28


 919      6565645F 
 919      73656E73 
 919      6F722E63 
 920              	.LASF18:
 921 0056 7133315F 		.ascii	"q31_t\000"
 921      7400
 922              	.LASF11:
 923 005c 696E7433 		.ascii	"int32_t\000"
 923      325F7400 
 924              	.LASF27:
 925 0064 61726D5F 		.ascii	"arm_pid_init_q31\000"
 925      7069645F 
 925      696E6974 
 925      5F713331 
 925      00
 926              	.LASF16:
 927 0075 666C6F61 		.ascii	"float\000"
 927      7400
 928              	.LASF5:
 929 007b 6C6F6E67 		.ascii	"long unsigned int\000"
 929      20756E73 
 929      69676E65 
 929      6420696E 
 929      7400
 930              	.LASF28:
 931 008d 74656D70 		.ascii	"temp\000"
 931      00
 932              	.LASF3:
 933 0092 73686F72 		.ascii	"short unsigned int\000"
 933      7420756E 
 933      7369676E 
 933      65642069 
 933      6E7400
 934              	.LASF1:
 935 00a5 756E7369 		.ascii	"unsigned char\000"
 935      676E6564 
 935      20636861 
 935      7200
 936              	.LASF7:
 937 00b3 5F5F696E 		.ascii	"__int64_t\000"
 937      7436345F 
 937      7400
 938              	.LASF15:
 939 00bd 646F7562 		.ascii	"double\000"
 939      6C6500
 940              	.LASF21:
 941 00c4 61726D5F 		.ascii	"arm_pid_instance_q31\000"
 941      7069645F 
 941      696E7374 
 941      616E6365 
 941      5F713331 
 942              	.LASF10:
 943 00d9 756E7369 		.ascii	"unsigned int\000"
 943      676E6564 
 943      20696E74 
 943      00
 944              	.LASF9:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 29


 945 00e6 6C6F6E67 		.ascii	"long long unsigned int\000"
 945      206C6F6E 
 945      6720756E 
 945      7369676E 
 945      65642069 
 946              	.LASF23:
 947 00fd 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 947      4320342E 
 947      392E3320 
 947      32303135 
 947      30333033 
 948 0130 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 948      20726576 
 948      6973696F 
 948      6E203232 
 948      31323230 
 949 0163 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 949      30202D66 
 949      66756E63 
 949      74696F6E 
 949      2D736563 
 950              	.LASF19:
 951 018f 7136335F 		.ascii	"q63_t\000"
 951      7400
 952              	.LASF22:
 953 0195 72657365 		.ascii	"resetStateFlag\000"
 953      74537461 
 953      7465466C 
 953      616700
 954              	.LASF13:
 955 01a4 73697A65 		.ascii	"sizetype\000"
 955      74797065 
 955      00
 956              	.LASF12:
 957 01ad 696E7436 		.ascii	"int64_t\000"
 957      345F7400 
 958              	.LASF8:
 959 01b5 6C6F6E67 		.ascii	"long long int\000"
 959      206C6F6E 
 959      6720696E 
 959      7400
 960              	.LASF24:
 961 01c3 536F7572 		.ascii	"Source\\ControllerFunctions\\arm_pid_init_q31.c\000"
 961      63655C43 
 961      6F6E7472 
 961      6F6C6C65 
 961      7246756E 
 962              	.LASF26:
 963 01f1 636C6970 		.ascii	"clip_q63_to_q31\000"
 963      5F713633 
 963      5F746F5F 
 963      71333100 
 964              	.LASF14:
 965 0201 63686172 		.ascii	"char\000"
 965      00
 966              	.LASF2:
 967 0206 73686F72 		.ascii	"short int\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccbfRGQn.s 			page 30


 967      7420696E 
 967      7400
 968              	.LASF4:
 969 0210 6C6F6E67 		.ascii	"long int\000"
 969      20696E74 
 969      00
 970              	.LASF17:
 971 0219 6C6F6E67 		.ascii	"long double\000"
 971      20646F75 
 971      626C6500 
 972              	.LASF0:
 973 0225 7369676E 		.ascii	"signed char\000"
 973      65642063 
 973      68617200 
 974              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
