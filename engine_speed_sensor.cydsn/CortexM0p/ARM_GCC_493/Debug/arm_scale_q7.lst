ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_scale_q7.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_scale_q7,"ax",%progbits
  18              		.align	2
  19              		.global	arm_scale_q7
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_scale_q7, %function
  23              	arm_scale_q7:
  24              	.LFB82:
  25              		.file 1 "Source\\BasicMathFunctions\\arm_scale_q7.c"
   1:Source\BasicMathFunctions/arm_scale_q7.c **** /* ----------------------------------------------------------------------
   2:Source\BasicMathFunctions/arm_scale_q7.c ****  * Project:      CMSIS DSP Library
   3:Source\BasicMathFunctions/arm_scale_q7.c ****  * Title:        arm_scale_q7.c
   4:Source\BasicMathFunctions/arm_scale_q7.c ****  * Description:  Multiplies a Q7 vector by a scalar
   5:Source\BasicMathFunctions/arm_scale_q7.c ****  *
   6:Source\BasicMathFunctions/arm_scale_q7.c ****  * $Date:        27. January 2017
   7:Source\BasicMathFunctions/arm_scale_q7.c ****  * $Revision:    V.1.5.1
   8:Source\BasicMathFunctions/arm_scale_q7.c ****  *
   9:Source\BasicMathFunctions/arm_scale_q7.c ****  * Target Processor: Cortex-M cores
  10:Source\BasicMathFunctions/arm_scale_q7.c ****  * -------------------------------------------------------------------- */
  11:Source\BasicMathFunctions/arm_scale_q7.c **** /*
  12:Source\BasicMathFunctions/arm_scale_q7.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\BasicMathFunctions/arm_scale_q7.c ****  *
  14:Source\BasicMathFunctions/arm_scale_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\BasicMathFunctions/arm_scale_q7.c ****  *
  16:Source\BasicMathFunctions/arm_scale_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\BasicMathFunctions/arm_scale_q7.c ****  * not use this file except in compliance with the License.
  18:Source\BasicMathFunctions/arm_scale_q7.c ****  * You may obtain a copy of the License at
  19:Source\BasicMathFunctions/arm_scale_q7.c ****  *
  20:Source\BasicMathFunctions/arm_scale_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\BasicMathFunctions/arm_scale_q7.c ****  *
  22:Source\BasicMathFunctions/arm_scale_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\BasicMathFunctions/arm_scale_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\BasicMathFunctions/arm_scale_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\BasicMathFunctions/arm_scale_q7.c ****  * See the License for the specific language governing permissions and
  26:Source\BasicMathFunctions/arm_scale_q7.c ****  * limitations under the License.
  27:Source\BasicMathFunctions/arm_scale_q7.c ****  */
  28:Source\BasicMathFunctions/arm_scale_q7.c **** 
  29:Source\BasicMathFunctions/arm_scale_q7.c **** #include "arm_math.h"
  30:Source\BasicMathFunctions/arm_scale_q7.c **** 
  31:Source\BasicMathFunctions/arm_scale_q7.c **** /**
  32:Source\BasicMathFunctions/arm_scale_q7.c ****  * @ingroup groupMath
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 2


  33:Source\BasicMathFunctions/arm_scale_q7.c ****  */
  34:Source\BasicMathFunctions/arm_scale_q7.c **** 
  35:Source\BasicMathFunctions/arm_scale_q7.c **** /**
  36:Source\BasicMathFunctions/arm_scale_q7.c ****  * @addtogroup scale
  37:Source\BasicMathFunctions/arm_scale_q7.c ****  * @{
  38:Source\BasicMathFunctions/arm_scale_q7.c ****  */
  39:Source\BasicMathFunctions/arm_scale_q7.c **** 
  40:Source\BasicMathFunctions/arm_scale_q7.c **** /**
  41:Source\BasicMathFunctions/arm_scale_q7.c ****  * @brief Multiplies a Q7 vector by a scalar.
  42:Source\BasicMathFunctions/arm_scale_q7.c ****  * @param[in]       *pSrc points to the input vector
  43:Source\BasicMathFunctions/arm_scale_q7.c ****  * @param[in]       scaleFract fractional portion of the scale value
  44:Source\BasicMathFunctions/arm_scale_q7.c ****  * @param[in]       shift number of bits to shift the result by
  45:Source\BasicMathFunctions/arm_scale_q7.c ****  * @param[out]      *pDst points to the output vector
  46:Source\BasicMathFunctions/arm_scale_q7.c ****  * @param[in]       blockSize number of samples in the vector
  47:Source\BasicMathFunctions/arm_scale_q7.c ****  * @return none.
  48:Source\BasicMathFunctions/arm_scale_q7.c ****  *
  49:Source\BasicMathFunctions/arm_scale_q7.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:Source\BasicMathFunctions/arm_scale_q7.c ****  * \par
  51:Source\BasicMathFunctions/arm_scale_q7.c ****  * The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.7 format.
  52:Source\BasicMathFunctions/arm_scale_q7.c ****  * These are multiplied to yield a 2.14 intermediate result and this is shifted with saturation to 
  53:Source\BasicMathFunctions/arm_scale_q7.c ****  */
  54:Source\BasicMathFunctions/arm_scale_q7.c **** 
  55:Source\BasicMathFunctions/arm_scale_q7.c **** void arm_scale_q7(
  56:Source\BasicMathFunctions/arm_scale_q7.c ****   q7_t * pSrc,
  57:Source\BasicMathFunctions/arm_scale_q7.c ****   q7_t scaleFract,
  58:Source\BasicMathFunctions/arm_scale_q7.c ****   int8_t shift,
  59:Source\BasicMathFunctions/arm_scale_q7.c ****   q7_t * pDst,
  60:Source\BasicMathFunctions/arm_scale_q7.c ****   uint32_t blockSize)
  61:Source\BasicMathFunctions/arm_scale_q7.c **** {
  26              		.loc 1 61 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 8CB0     		sub	sp, sp, #48
  33              		.cfi_def_cfa_offset 56
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 081C     		mov	r0, r1
  38 000a 111C     		mov	r1, r2
  39 000c 7B60     		str	r3, [r7, #4]
  40 000e 0B23     		mov	r3, #11
  41 0010 FB18     		add	r3, r7, r3
  42 0012 021C     		add	r2, r0, #0
  43 0014 1A70     		strb	r2, [r3]
  44 0016 0A23     		mov	r3, #10
  45 0018 FB18     		add	r3, r7, r3
  46 001a 0A1C     		add	r2, r1, #0
  47 001c 1A70     		strb	r2, [r3]
  62:Source\BasicMathFunctions/arm_scale_q7.c ****   int8_t kShift = 7 - shift;                     /* shift to apply after scaling */
  48              		.loc 1 62 0
  49 001e 0A23     		mov	r3, #10
  50 0020 FB18     		add	r3, r7, r3
  51 0022 1B78     		ldrb	r3, [r3]
  52 0024 0722     		mov	r2, #7
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 3


  53 0026 D31A     		sub	r3, r2, r3
  54 0028 DAB2     		uxtb	r2, r3
  55 002a 2B23     		mov	r3, #43
  56 002c FB18     		add	r3, r7, r3
  57 002e 1A70     		strb	r2, [r3]
  63:Source\BasicMathFunctions/arm_scale_q7.c ****   uint32_t blkCnt;                               /* loop counter */
  64:Source\BasicMathFunctions/arm_scale_q7.c **** 
  65:Source\BasicMathFunctions/arm_scale_q7.c **** #if defined (ARM_MATH_DSP)
  66:Source\BasicMathFunctions/arm_scale_q7.c **** 
  67:Source\BasicMathFunctions/arm_scale_q7.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  68:Source\BasicMathFunctions/arm_scale_q7.c ****   q7_t in1, in2, in3, in4, out1, out2, out3, out4;      /* Temporary variables to store input & out
  69:Source\BasicMathFunctions/arm_scale_q7.c **** 
  70:Source\BasicMathFunctions/arm_scale_q7.c **** 
  71:Source\BasicMathFunctions/arm_scale_q7.c ****   /*loop Unrolling */
  72:Source\BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize >> 2u;
  73:Source\BasicMathFunctions/arm_scale_q7.c **** 
  74:Source\BasicMathFunctions/arm_scale_q7.c **** 
  75:Source\BasicMathFunctions/arm_scale_q7.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  76:Source\BasicMathFunctions/arm_scale_q7.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  77:Source\BasicMathFunctions/arm_scale_q7.c ****   while (blkCnt > 0u)
  78:Source\BasicMathFunctions/arm_scale_q7.c ****   {
  79:Source\BasicMathFunctions/arm_scale_q7.c ****     /* Reading 4 inputs from memory */
  80:Source\BasicMathFunctions/arm_scale_q7.c ****     in1 = *pSrc++;
  81:Source\BasicMathFunctions/arm_scale_q7.c ****     in2 = *pSrc++;
  82:Source\BasicMathFunctions/arm_scale_q7.c ****     in3 = *pSrc++;
  83:Source\BasicMathFunctions/arm_scale_q7.c ****     in4 = *pSrc++;
  84:Source\BasicMathFunctions/arm_scale_q7.c **** 
  85:Source\BasicMathFunctions/arm_scale_q7.c ****     /* C = A * scale */
  86:Source\BasicMathFunctions/arm_scale_q7.c ****     /* Scale the inputs and then store the results in the temporary variables. */
  87:Source\BasicMathFunctions/arm_scale_q7.c ****     out1 = (q7_t) (__SSAT(((in1) * scaleFract) >> kShift, 8));
  88:Source\BasicMathFunctions/arm_scale_q7.c ****     out2 = (q7_t) (__SSAT(((in2) * scaleFract) >> kShift, 8));
  89:Source\BasicMathFunctions/arm_scale_q7.c ****     out3 = (q7_t) (__SSAT(((in3) * scaleFract) >> kShift, 8));
  90:Source\BasicMathFunctions/arm_scale_q7.c ****     out4 = (q7_t) (__SSAT(((in4) * scaleFract) >> kShift, 8));
  91:Source\BasicMathFunctions/arm_scale_q7.c **** 
  92:Source\BasicMathFunctions/arm_scale_q7.c ****     /* Packing the individual outputs into 32bit and storing in
  93:Source\BasicMathFunctions/arm_scale_q7.c ****      * destination buffer in single write */
  94:Source\BasicMathFunctions/arm_scale_q7.c ****     *__SIMD32(pDst)++ = __PACKq7(out1, out2, out3, out4);
  95:Source\BasicMathFunctions/arm_scale_q7.c **** 
  96:Source\BasicMathFunctions/arm_scale_q7.c ****     /* Decrement the loop counter */
  97:Source\BasicMathFunctions/arm_scale_q7.c ****     blkCnt--;
  98:Source\BasicMathFunctions/arm_scale_q7.c ****   }
  99:Source\BasicMathFunctions/arm_scale_q7.c **** 
 100:Source\BasicMathFunctions/arm_scale_q7.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 101:Source\BasicMathFunctions/arm_scale_q7.c ****    ** No loop unrolling is used. */
 102:Source\BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize % 0x4u;
 103:Source\BasicMathFunctions/arm_scale_q7.c **** 
 104:Source\BasicMathFunctions/arm_scale_q7.c ****   while (blkCnt > 0u)
 105:Source\BasicMathFunctions/arm_scale_q7.c ****   {
 106:Source\BasicMathFunctions/arm_scale_q7.c ****     /* C = A * scale */
 107:Source\BasicMathFunctions/arm_scale_q7.c ****     /* Scale the input and then store the result in the destination buffer. */
 108:Source\BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT(((*pSrc++) * scaleFract) >> kShift, 8));
 109:Source\BasicMathFunctions/arm_scale_q7.c **** 
 110:Source\BasicMathFunctions/arm_scale_q7.c ****     /* Decrement the loop counter */
 111:Source\BasicMathFunctions/arm_scale_q7.c ****     blkCnt--;
 112:Source\BasicMathFunctions/arm_scale_q7.c ****   }
 113:Source\BasicMathFunctions/arm_scale_q7.c **** 
 114:Source\BasicMathFunctions/arm_scale_q7.c **** #else
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 4


 115:Source\BasicMathFunctions/arm_scale_q7.c **** 
 116:Source\BasicMathFunctions/arm_scale_q7.c ****   /* Run the below code for Cortex-M0 */
 117:Source\BasicMathFunctions/arm_scale_q7.c **** 
 118:Source\BasicMathFunctions/arm_scale_q7.c ****   /* Initialize blkCnt with number of samples */
 119:Source\BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize;
  58              		.loc 1 119 0
  59 0030 BB6B     		ldr	r3, [r7, #56]
  60 0032 FB62     		str	r3, [r7, #44]
 120:Source\BasicMathFunctions/arm_scale_q7.c **** 
 121:Source\BasicMathFunctions/arm_scale_q7.c ****   while (blkCnt > 0u)
  61              		.loc 1 121 0
  62 0034 43E0     		b	.L2
  63              	.L9:
 122:Source\BasicMathFunctions/arm_scale_q7.c ****   {
 123:Source\BasicMathFunctions/arm_scale_q7.c ****     /* C = A * scale */
 124:Source\BasicMathFunctions/arm_scale_q7.c ****     /* Scale the input and then store the result in the destination buffer. */
 125:Source\BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT((((q15_t) * pSrc++ * scaleFract) >> kShift), 8));
  64              		.loc 1 125 0
  65 0036 7B68     		ldr	r3, [r7, #4]
  66 0038 5A1C     		add	r2, r3, #1
  67 003a 7A60     		str	r2, [r7, #4]
  68 003c FA68     		ldr	r2, [r7, #12]
  69 003e 511C     		add	r1, r2, #1
  70 0040 F960     		str	r1, [r7, #12]
  71 0042 1278     		ldrb	r2, [r2]
  72 0044 52B2     		sxtb	r2, r2
  73 0046 0B21     		mov	r1, #11
  74 0048 7918     		add	r1, r7, r1
  75 004a 0978     		ldrb	r1, [r1]
  76 004c 49B2     		sxtb	r1, r1
  77 004e 5143     		mul	r1, r2
  78 0050 2B22     		mov	r2, #43
  79 0052 BA18     		add	r2, r7, r2
  80 0054 1278     		ldrb	r2, [r2]
  81 0056 52B2     		sxtb	r2, r2
  82 0058 1141     		asr	r1, r1, r2
  83 005a 0A1C     		mov	r2, r1
  84 005c 7A62     		str	r2, [r7, #36]
  85 005e 0822     		mov	r2, #8
  86 0060 3A62     		str	r2, [r7, #32]
  87              	.LBB4:
  88              	.LBB5:
  89              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 5


  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 6


  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 7


 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 8


 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 9


 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 10


 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 11


 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 12


 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 13


 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 14


 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 15


 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 16


 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 17


 699:.\Include/arm_math.h ****     posMax = 1;
  90              		.loc 2 699 0
  91 0062 0122     		mov	r2, #1
  92 0064 FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  93              		.loc 2 700 0
  94 0066 0022     		mov	r2, #0
  95 0068 BA61     		str	r2, [r7, #24]
  96 006a 05E0     		b	.L3
  97              	.L4:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
  98              		.loc 2 702 0
  99 006c FA69     		ldr	r2, [r7, #28]
 100 006e 5200     		lsl	r2, r2, #1
 101 0070 FA61     		str	r2, [r7, #28]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 102              		.loc 2 700 0
 103 0072 BA69     		ldr	r2, [r7, #24]
 104 0074 0132     		add	r2, r2, #1
 105 0076 BA61     		str	r2, [r7, #24]
 106              	.L3:
 107 0078 3A6A     		ldr	r2, [r7, #32]
 108 007a 013A     		sub	r2, r2, #1
 109 007c B969     		ldr	r1, [r7, #24]
 110 007e 9142     		cmp	r1, r2
 111 0080 F4D3     		bcc	.L4
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 112              		.loc 2 705 0
 113 0082 7A6A     		ldr	r2, [r7, #36]
 114 0084 002A     		cmp	r2, #0
 115 0086 09DD     		ble	.L5
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 116              		.loc 2 707 0
 117 0088 FA69     		ldr	r2, [r7, #28]
 118 008a 013A     		sub	r2, r2, #1
 119 008c FA61     		str	r2, [r7, #28]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 120              		.loc 2 709 0
 121 008e 796A     		ldr	r1, [r7, #36]
 122 0090 FA69     		ldr	r2, [r7, #28]
 123 0092 9142     		cmp	r1, r2
 124 0094 0CDD     		ble	.L10
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 125              		.loc 2 711 0
 126 0096 FA69     		ldr	r2, [r7, #28]
 127 0098 7A62     		str	r2, [r7, #36]
 128 009a 0AE0     		b	.L7
 129              	.L5:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 18


 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 130              		.loc 2 716 0
 131 009c FA69     		ldr	r2, [r7, #28]
 132 009e 5242     		neg	r2, r2
 133 00a0 7A61     		str	r2, [r7, #20]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 134              		.loc 2 718 0
 135 00a2 796A     		ldr	r1, [r7, #36]
 136 00a4 7A69     		ldr	r2, [r7, #20]
 137 00a6 9142     		cmp	r1, r2
 138 00a8 03DA     		bge	.L7
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 139              		.loc 2 720 0
 140 00aa 7A69     		ldr	r2, [r7, #20]
 141 00ac 7A62     		str	r2, [r7, #36]
 142 00ae 00E0     		b	.L7
 143              	.L10:
 711:.\Include/arm_math.h ****       }
 144              		.loc 2 711 0
 145 00b0 C046     		mov	r8, r8
 146              	.L7:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 147              		.loc 2 723 0
 148 00b2 7A6A     		ldr	r2, [r7, #36]
 149              	.LBE5:
 150              	.LBE4:
 151              		.loc 1 125 0
 152 00b4 D2B2     		uxtb	r2, r2
 153 00b6 1A70     		strb	r2, [r3]
 126:Source\BasicMathFunctions/arm_scale_q7.c **** 
 127:Source\BasicMathFunctions/arm_scale_q7.c ****     /* Decrement the loop counter */
 128:Source\BasicMathFunctions/arm_scale_q7.c ****     blkCnt--;
 154              		.loc 1 128 0
 155 00b8 FB6A     		ldr	r3, [r7, #44]
 156 00ba 013B     		sub	r3, r3, #1
 157 00bc FB62     		str	r3, [r7, #44]
 158              	.L2:
 121:Source\BasicMathFunctions/arm_scale_q7.c ****   {
 159              		.loc 1 121 0
 160 00be FB6A     		ldr	r3, [r7, #44]
 161 00c0 002B     		cmp	r3, #0
 162 00c2 B8D1     		bne	.L9
 129:Source\BasicMathFunctions/arm_scale_q7.c ****   }
 130:Source\BasicMathFunctions/arm_scale_q7.c **** 
 131:Source\BasicMathFunctions/arm_scale_q7.c **** #endif /* #if defined (ARM_MATH_DSP) */
 132:Source\BasicMathFunctions/arm_scale_q7.c **** 
 133:Source\BasicMathFunctions/arm_scale_q7.c **** }
 163              		.loc 1 133 0
 164 00c4 BD46     		mov	sp, r7
 165 00c6 0CB0     		add	sp, sp, #48
 166              		@ sp needed
 167 00c8 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 19


 168              		.cfi_endproc
 169              	.LFE82:
 170              		.size	arm_scale_q7, .-arm_scale_q7
 171 00ca C046     		.text
 172              	.Letext0:
 173              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 174              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 175              		.section	.debug_info,"",%progbits
 176              	.Ldebug_info0:
 177 0000 0B020000 		.4byte	0x20b
 178 0004 0400     		.2byte	0x4
 179 0006 00000000 		.4byte	.Ldebug_abbrev0
 180 000a 04       		.byte	0x4
 181 000b 01       		.uleb128 0x1
 182 000c 4C010000 		.4byte	.LASF34
 183 0010 01       		.byte	0x1
 184 0011 B0000000 		.4byte	.LASF35
 185 0015 28000000 		.4byte	.LASF36
 186 0019 00000000 		.4byte	.Ldebug_ranges0+0
 187 001d 00000000 		.4byte	0
 188 0021 00000000 		.4byte	.Ldebug_line0
 189 0025 02       		.uleb128 0x2
 190 0026 00000000 		.4byte	.LASF2
 191 002a 03       		.byte	0x3
 192 002b 1B       		.byte	0x1b
 193 002c 30000000 		.4byte	0x30
 194 0030 03       		.uleb128 0x3
 195 0031 01       		.byte	0x1
 196 0032 06       		.byte	0x6
 197 0033 49020000 		.4byte	.LASF0
 198 0037 03       		.uleb128 0x3
 199 0038 01       		.byte	0x1
 200 0039 08       		.byte	0x8
 201 003a 9B000000 		.4byte	.LASF1
 202 003e 02       		.uleb128 0x2
 203 003f 14000000 		.4byte	.LASF3
 204 0043 03       		.byte	0x3
 205 0044 29       		.byte	0x29
 206 0045 49000000 		.4byte	0x49
 207 0049 03       		.uleb128 0x3
 208 004a 02       		.byte	0x2
 209 004b 05       		.byte	0x5
 210 004c 1B020000 		.4byte	.LASF4
 211 0050 03       		.uleb128 0x3
 212 0051 02       		.byte	0x2
 213 0052 07       		.byte	0x7
 214 0053 EB000000 		.4byte	.LASF5
 215 0057 02       		.uleb128 0x2
 216 0058 1E000000 		.4byte	.LASF6
 217 005c 03       		.byte	0x3
 218 005d 3F       		.byte	0x3f
 219 005e 62000000 		.4byte	0x62
 220 0062 03       		.uleb128 0x3
 221 0063 04       		.byte	0x4
 222 0064 05       		.byte	0x5
 223 0065 34020000 		.4byte	.LASF7
 224 0069 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 20


 225 006a 18010000 		.4byte	.LASF8
 226 006e 03       		.byte	0x3
 227 006f 41       		.byte	0x41
 228 0070 74000000 		.4byte	0x74
 229 0074 03       		.uleb128 0x3
 230 0075 04       		.byte	0x4
 231 0076 07       		.byte	0x7
 232 0077 D9000000 		.4byte	.LASF9
 233 007b 03       		.uleb128 0x3
 234 007c 08       		.byte	0x8
 235 007d 05       		.byte	0x5
 236 007e FE010000 		.4byte	.LASF10
 237 0082 03       		.uleb128 0x3
 238 0083 08       		.byte	0x8
 239 0084 07       		.byte	0x7
 240 0085 35010000 		.4byte	.LASF11
 241 0089 04       		.uleb128 0x4
 242 008a 04       		.byte	0x4
 243 008b 05       		.byte	0x5
 244 008c 696E7400 		.ascii	"int\000"
 245 0090 03       		.uleb128 0x3
 246 0091 04       		.byte	0x4
 247 0092 07       		.byte	0x7
 248 0093 28010000 		.4byte	.LASF12
 249 0097 02       		.uleb128 0x2
 250 0098 7B000000 		.4byte	.LASF13
 251 009c 04       		.byte	0x4
 252 009d 14       		.byte	0x14
 253 009e 25000000 		.4byte	0x25
 254 00a2 02       		.uleb128 0x2
 255 00a3 DE010000 		.4byte	.LASF14
 256 00a7 04       		.byte	0x4
 257 00a8 20       		.byte	0x20
 258 00a9 3E000000 		.4byte	0x3e
 259 00ad 02       		.uleb128 0x2
 260 00ae ED010000 		.4byte	.LASF15
 261 00b2 04       		.byte	0x4
 262 00b3 2C       		.byte	0x2c
 263 00b4 57000000 		.4byte	0x57
 264 00b8 02       		.uleb128 0x2
 265 00b9 2B020000 		.4byte	.LASF16
 266 00bd 04       		.byte	0x4
 267 00be 2D       		.byte	0x2d
 268 00bf 69000000 		.4byte	0x69
 269 00c3 03       		.uleb128 0x3
 270 00c4 04       		.byte	0x4
 271 00c5 07       		.byte	0x7
 272 00c6 F5010000 		.4byte	.LASF17
 273 00ca 03       		.uleb128 0x3
 274 00cb 01       		.byte	0x1
 275 00cc 08       		.byte	0x8
 276 00cd 16020000 		.4byte	.LASF18
 277 00d1 03       		.uleb128 0x3
 278 00d2 08       		.byte	0x8
 279 00d3 04       		.byte	0x4
 280 00d4 0A010000 		.4byte	.LASF19
 281 00d8 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 21


 282 00d9 04       		.byte	0x4
 283 00da 04       		.byte	0x4
 284 00db 88000000 		.4byte	.LASF20
 285 00df 03       		.uleb128 0x3
 286 00e0 08       		.byte	0x8
 287 00e1 04       		.byte	0x4
 288 00e2 3D020000 		.4byte	.LASF21
 289 00e6 05       		.uleb128 0x5
 290 00e7 23010000 		.4byte	.LASF22
 291 00eb 02       		.byte	0x2
 292 00ec 9101     		.2byte	0x191
 293 00ee 97000000 		.4byte	0x97
 294 00f2 05       		.uleb128 0x5
 295 00f3 82000000 		.4byte	.LASF23
 296 00f7 02       		.byte	0x2
 297 00f8 9601     		.2byte	0x196
 298 00fa A2000000 		.4byte	0xa2
 299 00fe 05       		.uleb128 0x5
 300 00ff 95000000 		.4byte	.LASF24
 301 0103 02       		.byte	0x2
 302 0104 9B01     		.2byte	0x19b
 303 0106 AD000000 		.4byte	0xad
 304 010a 06       		.uleb128 0x6
 305 010b 04       		.byte	0x4
 306 010c E6000000 		.4byte	0xe6
 307 0110 07       		.uleb128 0x7
 308 0111 E6010000 		.4byte	.LASF37
 309 0115 02       		.byte	0x2
 310 0116 B402     		.2byte	0x2b4
 311 0118 FE000000 		.4byte	0xfe
 312 011c 03       		.byte	0x3
 313 011d 58010000 		.4byte	0x158
 314 0121 08       		.uleb128 0x8
 315 0122 7800     		.ascii	"x\000"
 316 0124 02       		.byte	0x2
 317 0125 B502     		.2byte	0x2b5
 318 0127 FE000000 		.4byte	0xfe
 319 012b 08       		.uleb128 0x8
 320 012c 7900     		.ascii	"y\000"
 321 012e 02       		.byte	0x2
 322 012f B602     		.2byte	0x2b6
 323 0131 B8000000 		.4byte	0xb8
 324 0135 09       		.uleb128 0x9
 325 0136 8E000000 		.4byte	.LASF25
 326 013a 02       		.byte	0x2
 327 013b B802     		.2byte	0x2b8
 328 013d AD000000 		.4byte	0xad
 329 0141 09       		.uleb128 0x9
 330 0142 03010000 		.4byte	.LASF26
 331 0146 02       		.byte	0x2
 332 0147 B802     		.2byte	0x2b8
 333 0149 AD000000 		.4byte	0xad
 334 014d 0A       		.uleb128 0xa
 335 014e 6900     		.ascii	"i\000"
 336 0150 02       		.byte	0x2
 337 0151 B902     		.2byte	0x2b9
 338 0153 B8000000 		.4byte	0xb8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 22


 339 0157 00       		.byte	0
 340 0158 0B       		.uleb128 0xb
 341 0159 6E000000 		.4byte	.LASF38
 342 015d 01       		.byte	0x1
 343 015e 37       		.byte	0x37
 344 015f 00000000 		.4byte	.LFB82
 345 0163 CA000000 		.4byte	.LFE82-.LFB82
 346 0167 01       		.uleb128 0x1
 347 0168 9C       		.byte	0x9c
 348 0169 0C       		.uleb128 0xc
 349 016a 55020000 		.4byte	.LASF27
 350 016e 01       		.byte	0x1
 351 016f 38       		.byte	0x38
 352 0170 0A010000 		.4byte	0x10a
 353 0174 02       		.uleb128 0x2
 354 0175 91       		.byte	0x91
 355 0176 54       		.sleb128 -44
 356 0177 0C       		.uleb128 0xc
 357 0178 09000000 		.4byte	.LASF28
 358 017c 01       		.byte	0x1
 359 017d 39       		.byte	0x39
 360 017e E6000000 		.4byte	0xe6
 361 0182 02       		.uleb128 0x2
 362 0183 91       		.byte	0x91
 363 0184 53       		.sleb128 -45
 364 0185 0C       		.uleb128 0xc
 365 0186 25020000 		.4byte	.LASF29
 366 018a 01       		.byte	0x1
 367 018b 3A       		.byte	0x3a
 368 018c 97000000 		.4byte	0x97
 369 0190 02       		.uleb128 0x2
 370 0191 91       		.byte	0x91
 371 0192 52       		.sleb128 -46
 372 0193 0C       		.uleb128 0xc
 373 0194 FE000000 		.4byte	.LASF30
 374 0198 01       		.byte	0x1
 375 0199 3B       		.byte	0x3b
 376 019a 0A010000 		.4byte	0x10a
 377 019e 02       		.uleb128 0x2
 378 019f 91       		.byte	0x91
 379 01a0 4C       		.sleb128 -52
 380 01a1 0C       		.uleb128 0xc
 381 01a2 0C020000 		.4byte	.LASF31
 382 01a6 01       		.byte	0x1
 383 01a7 3C       		.byte	0x3c
 384 01a8 B8000000 		.4byte	0xb8
 385 01ac 02       		.uleb128 0x2
 386 01ad 91       		.byte	0x91
 387 01ae 00       		.sleb128 0
 388 01af 0D       		.uleb128 0xd
 389 01b0 11010000 		.4byte	.LASF32
 390 01b4 01       		.byte	0x1
 391 01b5 3E       		.byte	0x3e
 392 01b6 97000000 		.4byte	0x97
 393 01ba 02       		.uleb128 0x2
 394 01bb 91       		.byte	0x91
 395 01bc 73       		.sleb128 -13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 23


 396 01bd 0D       		.uleb128 0xd
 397 01be A9000000 		.4byte	.LASF33
 398 01c2 01       		.byte	0x1
 399 01c3 3F       		.byte	0x3f
 400 01c4 B8000000 		.4byte	0xb8
 401 01c8 02       		.uleb128 0x2
 402 01c9 91       		.byte	0x91
 403 01ca 74       		.sleb128 -12
 404 01cb 0E       		.uleb128 0xe
 405 01cc 10010000 		.4byte	0x110
 406 01d0 62000000 		.4byte	.LBB4
 407 01d4 52000000 		.4byte	.LBE4-.LBB4
 408 01d8 01       		.byte	0x1
 409 01d9 7D       		.byte	0x7d
 410 01da 0F       		.uleb128 0xf
 411 01db 2B010000 		.4byte	0x12b
 412 01df 02       		.uleb128 0x2
 413 01e0 91       		.byte	0x91
 414 01e1 68       		.sleb128 -24
 415 01e2 0F       		.uleb128 0xf
 416 01e3 21010000 		.4byte	0x121
 417 01e7 02       		.uleb128 0x2
 418 01e8 91       		.byte	0x91
 419 01e9 6C       		.sleb128 -20
 420 01ea 10       		.uleb128 0x10
 421 01eb 62000000 		.4byte	.LBB5
 422 01ef 52000000 		.4byte	.LBE5-.LBB5
 423 01f3 11       		.uleb128 0x11
 424 01f4 35010000 		.4byte	0x135
 425 01f8 02       		.uleb128 0x2
 426 01f9 91       		.byte	0x91
 427 01fa 64       		.sleb128 -28
 428 01fb 11       		.uleb128 0x11
 429 01fc 41010000 		.4byte	0x141
 430 0200 02       		.uleb128 0x2
 431 0201 91       		.byte	0x91
 432 0202 5C       		.sleb128 -36
 433 0203 11       		.uleb128 0x11
 434 0204 4D010000 		.4byte	0x14d
 435 0208 02       		.uleb128 0x2
 436 0209 91       		.byte	0x91
 437 020a 60       		.sleb128 -32
 438 020b 00       		.byte	0
 439 020c 00       		.byte	0
 440 020d 00       		.byte	0
 441 020e 00       		.byte	0
 442              		.section	.debug_abbrev,"",%progbits
 443              	.Ldebug_abbrev0:
 444 0000 01       		.uleb128 0x1
 445 0001 11       		.uleb128 0x11
 446 0002 01       		.byte	0x1
 447 0003 25       		.uleb128 0x25
 448 0004 0E       		.uleb128 0xe
 449 0005 13       		.uleb128 0x13
 450 0006 0B       		.uleb128 0xb
 451 0007 03       		.uleb128 0x3
 452 0008 0E       		.uleb128 0xe
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 24


 453 0009 1B       		.uleb128 0x1b
 454 000a 0E       		.uleb128 0xe
 455 000b 55       		.uleb128 0x55
 456 000c 17       		.uleb128 0x17
 457 000d 11       		.uleb128 0x11
 458 000e 01       		.uleb128 0x1
 459 000f 10       		.uleb128 0x10
 460 0010 17       		.uleb128 0x17
 461 0011 00       		.byte	0
 462 0012 00       		.byte	0
 463 0013 02       		.uleb128 0x2
 464 0014 16       		.uleb128 0x16
 465 0015 00       		.byte	0
 466 0016 03       		.uleb128 0x3
 467 0017 0E       		.uleb128 0xe
 468 0018 3A       		.uleb128 0x3a
 469 0019 0B       		.uleb128 0xb
 470 001a 3B       		.uleb128 0x3b
 471 001b 0B       		.uleb128 0xb
 472 001c 49       		.uleb128 0x49
 473 001d 13       		.uleb128 0x13
 474 001e 00       		.byte	0
 475 001f 00       		.byte	0
 476 0020 03       		.uleb128 0x3
 477 0021 24       		.uleb128 0x24
 478 0022 00       		.byte	0
 479 0023 0B       		.uleb128 0xb
 480 0024 0B       		.uleb128 0xb
 481 0025 3E       		.uleb128 0x3e
 482 0026 0B       		.uleb128 0xb
 483 0027 03       		.uleb128 0x3
 484 0028 0E       		.uleb128 0xe
 485 0029 00       		.byte	0
 486 002a 00       		.byte	0
 487 002b 04       		.uleb128 0x4
 488 002c 24       		.uleb128 0x24
 489 002d 00       		.byte	0
 490 002e 0B       		.uleb128 0xb
 491 002f 0B       		.uleb128 0xb
 492 0030 3E       		.uleb128 0x3e
 493 0031 0B       		.uleb128 0xb
 494 0032 03       		.uleb128 0x3
 495 0033 08       		.uleb128 0x8
 496 0034 00       		.byte	0
 497 0035 00       		.byte	0
 498 0036 05       		.uleb128 0x5
 499 0037 16       		.uleb128 0x16
 500 0038 00       		.byte	0
 501 0039 03       		.uleb128 0x3
 502 003a 0E       		.uleb128 0xe
 503 003b 3A       		.uleb128 0x3a
 504 003c 0B       		.uleb128 0xb
 505 003d 3B       		.uleb128 0x3b
 506 003e 05       		.uleb128 0x5
 507 003f 49       		.uleb128 0x49
 508 0040 13       		.uleb128 0x13
 509 0041 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 25


 510 0042 00       		.byte	0
 511 0043 06       		.uleb128 0x6
 512 0044 0F       		.uleb128 0xf
 513 0045 00       		.byte	0
 514 0046 0B       		.uleb128 0xb
 515 0047 0B       		.uleb128 0xb
 516 0048 49       		.uleb128 0x49
 517 0049 13       		.uleb128 0x13
 518 004a 00       		.byte	0
 519 004b 00       		.byte	0
 520 004c 07       		.uleb128 0x7
 521 004d 2E       		.uleb128 0x2e
 522 004e 01       		.byte	0x1
 523 004f 03       		.uleb128 0x3
 524 0050 0E       		.uleb128 0xe
 525 0051 3A       		.uleb128 0x3a
 526 0052 0B       		.uleb128 0xb
 527 0053 3B       		.uleb128 0x3b
 528 0054 05       		.uleb128 0x5
 529 0055 27       		.uleb128 0x27
 530 0056 19       		.uleb128 0x19
 531 0057 49       		.uleb128 0x49
 532 0058 13       		.uleb128 0x13
 533 0059 20       		.uleb128 0x20
 534 005a 0B       		.uleb128 0xb
 535 005b 01       		.uleb128 0x1
 536 005c 13       		.uleb128 0x13
 537 005d 00       		.byte	0
 538 005e 00       		.byte	0
 539 005f 08       		.uleb128 0x8
 540 0060 05       		.uleb128 0x5
 541 0061 00       		.byte	0
 542 0062 03       		.uleb128 0x3
 543 0063 08       		.uleb128 0x8
 544 0064 3A       		.uleb128 0x3a
 545 0065 0B       		.uleb128 0xb
 546 0066 3B       		.uleb128 0x3b
 547 0067 05       		.uleb128 0x5
 548 0068 49       		.uleb128 0x49
 549 0069 13       		.uleb128 0x13
 550 006a 00       		.byte	0
 551 006b 00       		.byte	0
 552 006c 09       		.uleb128 0x9
 553 006d 34       		.uleb128 0x34
 554 006e 00       		.byte	0
 555 006f 03       		.uleb128 0x3
 556 0070 0E       		.uleb128 0xe
 557 0071 3A       		.uleb128 0x3a
 558 0072 0B       		.uleb128 0xb
 559 0073 3B       		.uleb128 0x3b
 560 0074 05       		.uleb128 0x5
 561 0075 49       		.uleb128 0x49
 562 0076 13       		.uleb128 0x13
 563 0077 00       		.byte	0
 564 0078 00       		.byte	0
 565 0079 0A       		.uleb128 0xa
 566 007a 34       		.uleb128 0x34
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 26


 567 007b 00       		.byte	0
 568 007c 03       		.uleb128 0x3
 569 007d 08       		.uleb128 0x8
 570 007e 3A       		.uleb128 0x3a
 571 007f 0B       		.uleb128 0xb
 572 0080 3B       		.uleb128 0x3b
 573 0081 05       		.uleb128 0x5
 574 0082 49       		.uleb128 0x49
 575 0083 13       		.uleb128 0x13
 576 0084 00       		.byte	0
 577 0085 00       		.byte	0
 578 0086 0B       		.uleb128 0xb
 579 0087 2E       		.uleb128 0x2e
 580 0088 01       		.byte	0x1
 581 0089 3F       		.uleb128 0x3f
 582 008a 19       		.uleb128 0x19
 583 008b 03       		.uleb128 0x3
 584 008c 0E       		.uleb128 0xe
 585 008d 3A       		.uleb128 0x3a
 586 008e 0B       		.uleb128 0xb
 587 008f 3B       		.uleb128 0x3b
 588 0090 0B       		.uleb128 0xb
 589 0091 27       		.uleb128 0x27
 590 0092 19       		.uleb128 0x19
 591 0093 11       		.uleb128 0x11
 592 0094 01       		.uleb128 0x1
 593 0095 12       		.uleb128 0x12
 594 0096 06       		.uleb128 0x6
 595 0097 40       		.uleb128 0x40
 596 0098 18       		.uleb128 0x18
 597 0099 9742     		.uleb128 0x2117
 598 009b 19       		.uleb128 0x19
 599 009c 00       		.byte	0
 600 009d 00       		.byte	0
 601 009e 0C       		.uleb128 0xc
 602 009f 05       		.uleb128 0x5
 603 00a0 00       		.byte	0
 604 00a1 03       		.uleb128 0x3
 605 00a2 0E       		.uleb128 0xe
 606 00a3 3A       		.uleb128 0x3a
 607 00a4 0B       		.uleb128 0xb
 608 00a5 3B       		.uleb128 0x3b
 609 00a6 0B       		.uleb128 0xb
 610 00a7 49       		.uleb128 0x49
 611 00a8 13       		.uleb128 0x13
 612 00a9 02       		.uleb128 0x2
 613 00aa 18       		.uleb128 0x18
 614 00ab 00       		.byte	0
 615 00ac 00       		.byte	0
 616 00ad 0D       		.uleb128 0xd
 617 00ae 34       		.uleb128 0x34
 618 00af 00       		.byte	0
 619 00b0 03       		.uleb128 0x3
 620 00b1 0E       		.uleb128 0xe
 621 00b2 3A       		.uleb128 0x3a
 622 00b3 0B       		.uleb128 0xb
 623 00b4 3B       		.uleb128 0x3b
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 27


 624 00b5 0B       		.uleb128 0xb
 625 00b6 49       		.uleb128 0x49
 626 00b7 13       		.uleb128 0x13
 627 00b8 02       		.uleb128 0x2
 628 00b9 18       		.uleb128 0x18
 629 00ba 00       		.byte	0
 630 00bb 00       		.byte	0
 631 00bc 0E       		.uleb128 0xe
 632 00bd 1D       		.uleb128 0x1d
 633 00be 01       		.byte	0x1
 634 00bf 31       		.uleb128 0x31
 635 00c0 13       		.uleb128 0x13
 636 00c1 11       		.uleb128 0x11
 637 00c2 01       		.uleb128 0x1
 638 00c3 12       		.uleb128 0x12
 639 00c4 06       		.uleb128 0x6
 640 00c5 58       		.uleb128 0x58
 641 00c6 0B       		.uleb128 0xb
 642 00c7 59       		.uleb128 0x59
 643 00c8 0B       		.uleb128 0xb
 644 00c9 00       		.byte	0
 645 00ca 00       		.byte	0
 646 00cb 0F       		.uleb128 0xf
 647 00cc 05       		.uleb128 0x5
 648 00cd 00       		.byte	0
 649 00ce 31       		.uleb128 0x31
 650 00cf 13       		.uleb128 0x13
 651 00d0 02       		.uleb128 0x2
 652 00d1 18       		.uleb128 0x18
 653 00d2 00       		.byte	0
 654 00d3 00       		.byte	0
 655 00d4 10       		.uleb128 0x10
 656 00d5 0B       		.uleb128 0xb
 657 00d6 01       		.byte	0x1
 658 00d7 11       		.uleb128 0x11
 659 00d8 01       		.uleb128 0x1
 660 00d9 12       		.uleb128 0x12
 661 00da 06       		.uleb128 0x6
 662 00db 00       		.byte	0
 663 00dc 00       		.byte	0
 664 00dd 11       		.uleb128 0x11
 665 00de 34       		.uleb128 0x34
 666 00df 00       		.byte	0
 667 00e0 31       		.uleb128 0x31
 668 00e1 13       		.uleb128 0x13
 669 00e2 02       		.uleb128 0x2
 670 00e3 18       		.uleb128 0x18
 671 00e4 00       		.byte	0
 672 00e5 00       		.byte	0
 673 00e6 00       		.byte	0
 674              		.section	.debug_aranges,"",%progbits
 675 0000 1C000000 		.4byte	0x1c
 676 0004 0200     		.2byte	0x2
 677 0006 00000000 		.4byte	.Ldebug_info0
 678 000a 04       		.byte	0x4
 679 000b 00       		.byte	0
 680 000c 0000     		.2byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 28


 681 000e 0000     		.2byte	0
 682 0010 00000000 		.4byte	.LFB82
 683 0014 CA000000 		.4byte	.LFE82-.LFB82
 684 0018 00000000 		.4byte	0
 685 001c 00000000 		.4byte	0
 686              		.section	.debug_ranges,"",%progbits
 687              	.Ldebug_ranges0:
 688 0000 00000000 		.4byte	.LFB82
 689 0004 CA000000 		.4byte	.LFE82
 690 0008 00000000 		.4byte	0
 691 000c 00000000 		.4byte	0
 692              		.section	.debug_line,"",%progbits
 693              	.Ldebug_line0:
 694 0000 8E010000 		.section	.debug_str,"MS",%progbits,1
 694      02004F01 
 694      00000201 
 694      FB0E0D00 
 694      01010101 
 695              	.LASF2:
 696 0000 5F5F696E 		.ascii	"__int8_t\000"
 696      74385F74 
 696      00
 697              	.LASF28:
 698 0009 7363616C 		.ascii	"scaleFract\000"
 698      65467261 
 698      637400
 699              	.LASF3:
 700 0014 5F5F696E 		.ascii	"__int16_t\000"
 700      7431365F 
 700      7400
 701              	.LASF6:
 702 001e 5F5F696E 		.ascii	"__int32_t\000"
 702      7433325F 
 702      7400
 703              	.LASF36:
 704 0028 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 704      73657273 
 704      5C666E65 
 704      7665735C 
 704      446F6375 
 705 0055 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 705      655F7370 
 705      6565645F 
 705      73656E73 
 705      6F722E63 
 706              	.LASF38:
 707 006e 61726D5F 		.ascii	"arm_scale_q7\000"
 707      7363616C 
 707      655F7137 
 707      00
 708              	.LASF13:
 709 007b 696E7438 		.ascii	"int8_t\000"
 709      5F7400
 710              	.LASF23:
 711 0082 7131355F 		.ascii	"q15_t\000"
 711      7400
 712              	.LASF20:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 29


 713 0088 666C6F61 		.ascii	"float\000"
 713      7400
 714              	.LASF25:
 715 008e 706F734D 		.ascii	"posMax\000"
 715      617800
 716              	.LASF24:
 717 0095 7133315F 		.ascii	"q31_t\000"
 717      7400
 718              	.LASF1:
 719 009b 756E7369 		.ascii	"unsigned char\000"
 719      676E6564 
 719      20636861 
 719      7200
 720              	.LASF33:
 721 00a9 626C6B43 		.ascii	"blkCnt\000"
 721      6E7400
 722              	.LASF35:
 723 00b0 536F7572 		.ascii	"Source\\BasicMathFunctions\\arm_scale_q7.c\000"
 723      63655C42 
 723      61736963 
 723      4D617468 
 723      46756E63 
 724              	.LASF9:
 725 00d9 6C6F6E67 		.ascii	"long unsigned int\000"
 725      20756E73 
 725      69676E65 
 725      6420696E 
 725      7400
 726              	.LASF5:
 727 00eb 73686F72 		.ascii	"short unsigned int\000"
 727      7420756E 
 727      7369676E 
 727      65642069 
 727      6E7400
 728              	.LASF30:
 729 00fe 70447374 		.ascii	"pDst\000"
 729      00
 730              	.LASF26:
 731 0103 6E65674D 		.ascii	"negMin\000"
 731      696E00
 732              	.LASF19:
 733 010a 646F7562 		.ascii	"double\000"
 733      6C6500
 734              	.LASF32:
 735 0111 6B536869 		.ascii	"kShift\000"
 735      667400
 736              	.LASF8:
 737 0118 5F5F7569 		.ascii	"__uint32_t\000"
 737      6E743332 
 737      5F7400
 738              	.LASF22:
 739 0123 71375F74 		.ascii	"q7_t\000"
 739      00
 740              	.LASF12:
 741 0128 756E7369 		.ascii	"unsigned int\000"
 741      676E6564 
 741      20696E74 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 30


 741      00
 742              	.LASF11:
 743 0135 6C6F6E67 		.ascii	"long long unsigned int\000"
 743      206C6F6E 
 743      6720756E 
 743      7369676E 
 743      65642069 
 744              	.LASF34:
 745 014c 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 745      4320342E 
 745      392E3320 
 745      32303135 
 745      30333033 
 746 017f 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 746      20726576 
 746      6973696F 
 746      6E203232 
 746      31323230 
 747 01b2 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 747      30202D66 
 747      66756E63 
 747      74696F6E 
 747      2D736563 
 748              	.LASF14:
 749 01de 696E7431 		.ascii	"int16_t\000"
 749      365F7400 
 750              	.LASF37:
 751 01e6 5F5F5353 		.ascii	"__SSAT\000"
 751      415400
 752              	.LASF15:
 753 01ed 696E7433 		.ascii	"int32_t\000"
 753      325F7400 
 754              	.LASF17:
 755 01f5 73697A65 		.ascii	"sizetype\000"
 755      74797065 
 755      00
 756              	.LASF10:
 757 01fe 6C6F6E67 		.ascii	"long long int\000"
 757      206C6F6E 
 757      6720696E 
 757      7400
 758              	.LASF31:
 759 020c 626C6F63 		.ascii	"blockSize\000"
 759      6B53697A 
 759      6500
 760              	.LASF18:
 761 0216 63686172 		.ascii	"char\000"
 761      00
 762              	.LASF4:
 763 021b 73686F72 		.ascii	"short int\000"
 763      7420696E 
 763      7400
 764              	.LASF29:
 765 0225 73686966 		.ascii	"shift\000"
 765      7400
 766              	.LASF16:
 767 022b 75696E74 		.ascii	"uint32_t\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccO3GfGg.s 			page 31


 767      33325F74 
 767      00
 768              	.LASF7:
 769 0234 6C6F6E67 		.ascii	"long int\000"
 769      20696E74 
 769      00
 770              	.LASF21:
 771 023d 6C6F6E67 		.ascii	"long double\000"
 771      20646F75 
 771      626C6500 
 772              	.LASF0:
 773 0249 7369676E 		.ascii	"signed char\000"
 773      65642063 
 773      68617200 
 774              	.LASF27:
 775 0255 70537263 		.ascii	"pSrc\000"
 775      00
 776              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
