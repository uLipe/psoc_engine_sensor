ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_mat_sub_q31.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_mat_sub_q31,"ax",%progbits
  18              		.align	2
  19              		.global	arm_mat_sub_q31
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_mat_sub_q31, %function
  23              	arm_mat_sub_q31:
  24              	.LFB82:
  25              		.file 1 "Source\\MatrixFunctions\\arm_mat_sub_q31.c"
   1:Source\MatrixFunctions/arm_mat_sub_q31.c **** /* ----------------------------------------------------------------------
   2:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * Project:      CMSIS DSP Library
   3:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * Title:        arm_mat_sub_q31.c
   4:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * Description:  Q31 matrix subtraction
   5:Source\MatrixFunctions/arm_mat_sub_q31.c ****  *
   6:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * $Date:        27. January 2017
   7:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * $Revision:    V.1.5.1
   8:Source\MatrixFunctions/arm_mat_sub_q31.c ****  *
   9:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * Target Processor: Cortex-M cores
  10:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * -------------------------------------------------------------------- */
  11:Source\MatrixFunctions/arm_mat_sub_q31.c **** /*
  12:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\MatrixFunctions/arm_mat_sub_q31.c ****  *
  14:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\MatrixFunctions/arm_mat_sub_q31.c ****  *
  16:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * not use this file except in compliance with the License.
  18:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * You may obtain a copy of the License at
  19:Source\MatrixFunctions/arm_mat_sub_q31.c ****  *
  20:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\MatrixFunctions/arm_mat_sub_q31.c ****  *
  22:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * See the License for the specific language governing permissions and
  26:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * limitations under the License.
  27:Source\MatrixFunctions/arm_mat_sub_q31.c ****  */
  28:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  29:Source\MatrixFunctions/arm_mat_sub_q31.c **** #include "arm_math.h"
  30:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  31:Source\MatrixFunctions/arm_mat_sub_q31.c **** /**
  32:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * @ingroup groupMatrix
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 2


  33:Source\MatrixFunctions/arm_mat_sub_q31.c ****  */
  34:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  35:Source\MatrixFunctions/arm_mat_sub_q31.c **** /**
  36:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * @addtogroup MatrixSub
  37:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * @{
  38:Source\MatrixFunctions/arm_mat_sub_q31.c ****  */
  39:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  40:Source\MatrixFunctions/arm_mat_sub_q31.c **** /**
  41:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * @brief Q31 matrix subtraction.
  42:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * @param[in]       *pSrcA points to the first input matrix structure
  43:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * @param[in]       *pSrcB points to the second input matrix structure
  44:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * @param[out]      *pDst points to output matrix structure
  45:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * @return     		The function returns either
  46:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  47:Source\MatrixFunctions/arm_mat_sub_q31.c ****  *
  48:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * <b>Scaling and Overflow Behavior:</b>
  49:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * \par
  50:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * The function uses saturating arithmetic.
  51:Source\MatrixFunctions/arm_mat_sub_q31.c ****  * Results outside of the allowable Q31 range [0x80000000 0x7FFFFFFF] will be saturated.
  52:Source\MatrixFunctions/arm_mat_sub_q31.c ****  */
  53:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  54:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  55:Source\MatrixFunctions/arm_mat_sub_q31.c **** arm_status arm_mat_sub_q31(
  56:Source\MatrixFunctions/arm_mat_sub_q31.c ****   const arm_matrix_instance_q31 * pSrcA,
  57:Source\MatrixFunctions/arm_mat_sub_q31.c ****   const arm_matrix_instance_q31 * pSrcB,
  58:Source\MatrixFunctions/arm_mat_sub_q31.c ****   arm_matrix_instance_q31 * pDst)
  59:Source\MatrixFunctions/arm_mat_sub_q31.c **** {
  26              		.loc 1 59 0
  27              		.cfi_startproc
  28 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  29              		.cfi_def_cfa_offset 20
  30              		.cfi_offset 4, -20
  31              		.cfi_offset 5, -16
  32              		.cfi_offset 6, -12
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 97B0     		sub	sp, sp, #92
  36              		.cfi_def_cfa_offset 112
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7862     		str	r0, [r7, #36]
  40 0008 3962     		str	r1, [r7, #32]
  41 000a FA61     		str	r2, [r7, #28]
  60:Source\MatrixFunctions/arm_mat_sub_q31.c ****   q31_t *pIn1 = pSrcA->pData;                    /* input data matrix pointer A */
  42              		.loc 1 60 0
  43 000c 7B6A     		ldr	r3, [r7, #36]
  44 000e 5B68     		ldr	r3, [r3, #4]
  45 0010 7B65     		str	r3, [r7, #84]
  61:Source\MatrixFunctions/arm_mat_sub_q31.c ****   q31_t *pIn2 = pSrcB->pData;                    /* input data matrix pointer B */
  46              		.loc 1 61 0
  47 0012 3B6A     		ldr	r3, [r7, #32]
  48 0014 5B68     		ldr	r3, [r3, #4]
  49 0016 3B65     		str	r3, [r7, #80]
  62:Source\MatrixFunctions/arm_mat_sub_q31.c ****   q31_t *pOut = pDst->pData;                     /* output data matrix pointer */
  50              		.loc 1 62 0
  51 0018 FB69     		ldr	r3, [r7, #28]
  52 001a 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 3


  53 001c FB64     		str	r3, [r7, #76]
  63:Source\MatrixFunctions/arm_mat_sub_q31.c ****   q31_t inA1, inB1;                              /* temporary variables */
  64:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  65:Source\MatrixFunctions/arm_mat_sub_q31.c **** #if defined (ARM_MATH_DSP)
  66:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  67:Source\MatrixFunctions/arm_mat_sub_q31.c ****   q31_t inA2, inB2;                              /* temporary variables */
  68:Source\MatrixFunctions/arm_mat_sub_q31.c ****   q31_t out1, out2;                              /* temporary variables */
  69:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  70:Source\MatrixFunctions/arm_mat_sub_q31.c **** #endif //      #if defined (ARM_MATH_DSP)
  71:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  72:Source\MatrixFunctions/arm_mat_sub_q31.c ****   uint32_t numSamples;                           /* total number of elements in the matrix  */
  73:Source\MatrixFunctions/arm_mat_sub_q31.c ****   uint32_t blkCnt;                               /* loop counters */
  74:Source\MatrixFunctions/arm_mat_sub_q31.c ****   arm_status status;                             /* status of matrix subtraction */
  75:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  76:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  77:Source\MatrixFunctions/arm_mat_sub_q31.c **** #ifdef ARM_MATH_MATRIX_CHECK
  78:Source\MatrixFunctions/arm_mat_sub_q31.c ****   /* Check for matrix mismatch condition  */
  79:Source\MatrixFunctions/arm_mat_sub_q31.c ****   if ((pSrcA->numRows != pSrcB->numRows) ||
  80:Source\MatrixFunctions/arm_mat_sub_q31.c ****      (pSrcA->numCols != pSrcB->numCols) ||
  81:Source\MatrixFunctions/arm_mat_sub_q31.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcA->numCols != pDst->numCols))
  82:Source\MatrixFunctions/arm_mat_sub_q31.c ****   {
  83:Source\MatrixFunctions/arm_mat_sub_q31.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  84:Source\MatrixFunctions/arm_mat_sub_q31.c ****     status = ARM_MATH_SIZE_MISMATCH;
  85:Source\MatrixFunctions/arm_mat_sub_q31.c ****   }
  86:Source\MatrixFunctions/arm_mat_sub_q31.c ****   else
  87:Source\MatrixFunctions/arm_mat_sub_q31.c **** #endif
  88:Source\MatrixFunctions/arm_mat_sub_q31.c ****   {
  89:Source\MatrixFunctions/arm_mat_sub_q31.c ****     /* Total number of samples in the input matrix */
  90:Source\MatrixFunctions/arm_mat_sub_q31.c ****     numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
  54              		.loc 1 90 0
  55 001e 7B6A     		ldr	r3, [r7, #36]
  56 0020 1B88     		ldrh	r3, [r3]
  57 0022 1A1C     		mov	r2, r3
  58 0024 7B6A     		ldr	r3, [r7, #36]
  59 0026 5B88     		ldrh	r3, [r3, #2]
  60 0028 5343     		mul	r3, r2
  61 002a 7B64     		str	r3, [r7, #68]
  91:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  92:Source\MatrixFunctions/arm_mat_sub_q31.c **** #if defined (ARM_MATH_DSP)
  93:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  94:Source\MatrixFunctions/arm_mat_sub_q31.c ****     /* Run the below code for Cortex-M4 and Cortex-M3 */
  95:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  96:Source\MatrixFunctions/arm_mat_sub_q31.c ****     /* Loop Unrolling */
  97:Source\MatrixFunctions/arm_mat_sub_q31.c ****     blkCnt = numSamples >> 2u;
  98:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
  99:Source\MatrixFunctions/arm_mat_sub_q31.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 100:Source\MatrixFunctions/arm_mat_sub_q31.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 101:Source\MatrixFunctions/arm_mat_sub_q31.c ****     while (blkCnt > 0u)
 102:Source\MatrixFunctions/arm_mat_sub_q31.c ****     {
 103:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* C(m,n) = A(m,n) - B(m,n) */
 104:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Subtract, saturate and then store the results in the destination buffer. */
 105:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Read values from source A */
 106:Source\MatrixFunctions/arm_mat_sub_q31.c ****       inA1 = pIn1[0];
 107:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 108:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Read values from source B */
 109:Source\MatrixFunctions/arm_mat_sub_q31.c ****       inB1 = pIn2[0];
 110:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 4


 111:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Read values from source A */
 112:Source\MatrixFunctions/arm_mat_sub_q31.c ****       inA2 = pIn1[1];
 113:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 114:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Subtract and saturate */
 115:Source\MatrixFunctions/arm_mat_sub_q31.c ****       out1 = __QSUB(inA1, inB1);
 116:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 117:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Read values from source B */
 118:Source\MatrixFunctions/arm_mat_sub_q31.c ****       inB2 = pIn2[1];
 119:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 120:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Read values from source A */
 121:Source\MatrixFunctions/arm_mat_sub_q31.c ****       inA1 = pIn1[2];
 122:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 123:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Subtract and saturate */
 124:Source\MatrixFunctions/arm_mat_sub_q31.c ****       out2 = __QSUB(inA2, inB2);
 125:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 126:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Read values from source B */
 127:Source\MatrixFunctions/arm_mat_sub_q31.c ****       inB1 = pIn2[2];
 128:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 129:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Store result in destination */
 130:Source\MatrixFunctions/arm_mat_sub_q31.c ****       pOut[0] = out1;
 131:Source\MatrixFunctions/arm_mat_sub_q31.c ****       pOut[1] = out2;
 132:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 133:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Read values from source A */
 134:Source\MatrixFunctions/arm_mat_sub_q31.c ****       inA2 = pIn1[3];
 135:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 136:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Read values from source B */
 137:Source\MatrixFunctions/arm_mat_sub_q31.c ****       inB2 = pIn2[3];
 138:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 139:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Subtract and saturate */
 140:Source\MatrixFunctions/arm_mat_sub_q31.c ****       out1 = __QSUB(inA1, inB1);
 141:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 142:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Subtract and saturate */
 143:Source\MatrixFunctions/arm_mat_sub_q31.c ****       out2 = __QSUB(inA2, inB2);
 144:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 145:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Store result in destination */
 146:Source\MatrixFunctions/arm_mat_sub_q31.c ****       pOut[2] = out1;
 147:Source\MatrixFunctions/arm_mat_sub_q31.c ****       pOut[3] = out2;
 148:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 149:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* update pointers to process next samples */
 150:Source\MatrixFunctions/arm_mat_sub_q31.c ****       pIn1 += 4u;
 151:Source\MatrixFunctions/arm_mat_sub_q31.c ****       pIn2 += 4u;
 152:Source\MatrixFunctions/arm_mat_sub_q31.c ****       pOut += 4u;
 153:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 154:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Decrement the loop counter */
 155:Source\MatrixFunctions/arm_mat_sub_q31.c ****       blkCnt--;
 156:Source\MatrixFunctions/arm_mat_sub_q31.c ****     }
 157:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 158:Source\MatrixFunctions/arm_mat_sub_q31.c ****     /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
 159:Source\MatrixFunctions/arm_mat_sub_q31.c ****      ** No loop unrolling is used. */
 160:Source\MatrixFunctions/arm_mat_sub_q31.c ****     blkCnt = numSamples % 0x4u;
 161:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 162:Source\MatrixFunctions/arm_mat_sub_q31.c **** #else
 163:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 164:Source\MatrixFunctions/arm_mat_sub_q31.c ****     /* Run the below code for Cortex-M0 */
 165:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 166:Source\MatrixFunctions/arm_mat_sub_q31.c ****     /* Initialize blkCnt with number of samples */
 167:Source\MatrixFunctions/arm_mat_sub_q31.c ****     blkCnt = numSamples;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 5


  62              		.loc 1 167 0
  63 002c 7B6C     		ldr	r3, [r7, #68]
  64 002e BB64     		str	r3, [r7, #72]
 168:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 169:Source\MatrixFunctions/arm_mat_sub_q31.c **** #endif /* #if defined (ARM_MATH_DSP) */
 170:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 171:Source\MatrixFunctions/arm_mat_sub_q31.c ****     while (blkCnt > 0u)
  65              		.loc 1 171 0
  66 0030 3CE0     		b	.L2
  67              	.L7:
 172:Source\MatrixFunctions/arm_mat_sub_q31.c ****     {
 173:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* C(m,n) = A(m,n) - B(m,n) */
 174:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Subtract, saturate and then store the results in the destination buffer. */
 175:Source\MatrixFunctions/arm_mat_sub_q31.c ****       inA1 = *pIn1++;
  68              		.loc 1 175 0
  69 0032 7B6D     		ldr	r3, [r7, #84]
  70 0034 1A1D     		add	r2, r3, #4
  71 0036 7A65     		str	r2, [r7, #84]
  72 0038 1B68     		ldr	r3, [r3]
  73 003a 3B64     		str	r3, [r7, #64]
 176:Source\MatrixFunctions/arm_mat_sub_q31.c ****       inB1 = *pIn2++;
  74              		.loc 1 176 0
  75 003c 3B6D     		ldr	r3, [r7, #80]
  76 003e 1A1D     		add	r2, r3, #4
  77 0040 3A65     		str	r2, [r7, #80]
  78 0042 1B68     		ldr	r3, [r3]
  79 0044 FB63     		str	r3, [r7, #60]
  80 0046 3B6C     		ldr	r3, [r7, #64]
  81 0048 7B63     		str	r3, [r7, #52]
  82 004a FB6B     		ldr	r3, [r7, #60]
  83 004c 3B63     		str	r3, [r7, #48]
  84              	.LBB8:
  85              	.LBB9:
  86              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 6


  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 7


  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 8


 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 9


 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 10


 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 11


 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 12


 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 13


 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 14


 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 15


 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 16


 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 17


 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 18


 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 724:.\Include/arm_math.h ****   }
 725:.\Include/arm_math.h **** #endif /* end of ARM_MATH_CM0_FAMILY */
 726:.\Include/arm_math.h **** 
 727:.\Include/arm_math.h **** 
 728:.\Include/arm_math.h ****   /*
 729:.\Include/arm_math.h ****    * @brief C custom defined intrinsic function for M3 and M0 processors
 730:.\Include/arm_math.h ****    */
 731:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 732:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 733:.\Include/arm_math.h **** 
 734:.\Include/arm_math.h ****   /*
 735:.\Include/arm_math.h ****    * @brief C custom defined QADD8 for M3 and M0 processors
 736:.\Include/arm_math.h ****    */
 737:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD8(
 738:.\Include/arm_math.h ****   uint32_t x,
 739:.\Include/arm_math.h ****   uint32_t y)
 740:.\Include/arm_math.h ****   {
 741:.\Include/arm_math.h ****     q31_t r, s, t, u;
 742:.\Include/arm_math.h **** 
 743:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) + (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 744:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) + (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 745:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) + (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 746:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) + (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 747:.\Include/arm_math.h **** 
 748:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 749:.\Include/arm_math.h ****   }
 750:.\Include/arm_math.h **** 
 751:.\Include/arm_math.h **** 
 752:.\Include/arm_math.h ****   /*
 753:.\Include/arm_math.h ****    * @brief C custom defined QSUB8 for M3 and M0 processors
 754:.\Include/arm_math.h ****    */
 755:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB8(
 756:.\Include/arm_math.h ****   uint32_t x,
 757:.\Include/arm_math.h ****   uint32_t y)
 758:.\Include/arm_math.h ****   {
 759:.\Include/arm_math.h ****     q31_t r, s, t, u;
 760:.\Include/arm_math.h **** 
 761:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) - (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 762:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) - (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 763:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) - (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 764:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) - (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 19


 765:.\Include/arm_math.h **** 
 766:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 767:.\Include/arm_math.h ****   }
 768:.\Include/arm_math.h **** 
 769:.\Include/arm_math.h **** 
 770:.\Include/arm_math.h ****   /*
 771:.\Include/arm_math.h ****    * @brief C custom defined QADD16 for M3 and M0 processors
 772:.\Include/arm_math.h ****    */
 773:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD16(
 774:.\Include/arm_math.h ****   uint32_t x,
 775:.\Include/arm_math.h ****   uint32_t y)
 776:.\Include/arm_math.h ****   {
 777:.\Include/arm_math.h **** /*  q31_t r,     s;  without initialisation 'arm_offset_q15 test' fails  but 'intrinsic' tests pass
 778:.\Include/arm_math.h ****     q31_t r = 0, s = 0;
 779:.\Include/arm_math.h **** 
 780:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 781:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 782:.\Include/arm_math.h **** 
 783:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 784:.\Include/arm_math.h ****   }
 785:.\Include/arm_math.h **** 
 786:.\Include/arm_math.h **** 
 787:.\Include/arm_math.h ****   /*
 788:.\Include/arm_math.h ****    * @brief C custom defined SHADD16 for M3 and M0 processors
 789:.\Include/arm_math.h ****    */
 790:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHADD16(
 791:.\Include/arm_math.h ****   uint32_t x,
 792:.\Include/arm_math.h ****   uint32_t y)
 793:.\Include/arm_math.h ****   {
 794:.\Include/arm_math.h ****     q31_t r, s;
 795:.\Include/arm_math.h **** 
 796:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 797:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 798:.\Include/arm_math.h **** 
 799:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 800:.\Include/arm_math.h ****   }
 801:.\Include/arm_math.h **** 
 802:.\Include/arm_math.h **** 
 803:.\Include/arm_math.h ****   /*
 804:.\Include/arm_math.h ****    * @brief C custom defined QSUB16 for M3 and M0 processors
 805:.\Include/arm_math.h ****    */
 806:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB16(
 807:.\Include/arm_math.h ****   uint32_t x,
 808:.\Include/arm_math.h ****   uint32_t y)
 809:.\Include/arm_math.h ****   {
 810:.\Include/arm_math.h ****     q31_t r, s;
 811:.\Include/arm_math.h **** 
 812:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 813:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 814:.\Include/arm_math.h **** 
 815:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 816:.\Include/arm_math.h ****   }
 817:.\Include/arm_math.h **** 
 818:.\Include/arm_math.h **** 
 819:.\Include/arm_math.h ****   /*
 820:.\Include/arm_math.h ****    * @brief C custom defined SHSUB16 for M3 and M0 processors
 821:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 20


 822:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSUB16(
 823:.\Include/arm_math.h ****   uint32_t x,
 824:.\Include/arm_math.h ****   uint32_t y)
 825:.\Include/arm_math.h ****   {
 826:.\Include/arm_math.h ****     q31_t r, s;
 827:.\Include/arm_math.h **** 
 828:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 829:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 830:.\Include/arm_math.h **** 
 831:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 832:.\Include/arm_math.h ****   }
 833:.\Include/arm_math.h **** 
 834:.\Include/arm_math.h **** 
 835:.\Include/arm_math.h ****   /*
 836:.\Include/arm_math.h ****    * @brief C custom defined QASX for M3 and M0 processors
 837:.\Include/arm_math.h ****    */
 838:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QASX(
 839:.\Include/arm_math.h ****   uint32_t x,
 840:.\Include/arm_math.h ****   uint32_t y)
 841:.\Include/arm_math.h ****   {
 842:.\Include/arm_math.h ****     q31_t r, s;
 843:.\Include/arm_math.h **** 
 844:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 845:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 846:.\Include/arm_math.h **** 
 847:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 848:.\Include/arm_math.h ****   }
 849:.\Include/arm_math.h **** 
 850:.\Include/arm_math.h **** 
 851:.\Include/arm_math.h ****   /*
 852:.\Include/arm_math.h ****    * @brief C custom defined SHASX for M3 and M0 processors
 853:.\Include/arm_math.h ****    */
 854:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHASX(
 855:.\Include/arm_math.h ****   uint32_t x,
 856:.\Include/arm_math.h ****   uint32_t y)
 857:.\Include/arm_math.h ****   {
 858:.\Include/arm_math.h ****     q31_t r, s;
 859:.\Include/arm_math.h **** 
 860:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 861:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 862:.\Include/arm_math.h **** 
 863:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 864:.\Include/arm_math.h ****   }
 865:.\Include/arm_math.h **** 
 866:.\Include/arm_math.h **** 
 867:.\Include/arm_math.h ****   /*
 868:.\Include/arm_math.h ****    * @brief C custom defined QSAX for M3 and M0 processors
 869:.\Include/arm_math.h ****    */
 870:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSAX(
 871:.\Include/arm_math.h ****   uint32_t x,
 872:.\Include/arm_math.h ****   uint32_t y)
 873:.\Include/arm_math.h ****   {
 874:.\Include/arm_math.h ****     q31_t r, s;
 875:.\Include/arm_math.h **** 
 876:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 877:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 878:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 21


 879:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 880:.\Include/arm_math.h ****   }
 881:.\Include/arm_math.h **** 
 882:.\Include/arm_math.h **** 
 883:.\Include/arm_math.h ****   /*
 884:.\Include/arm_math.h ****    * @brief C custom defined SHSAX for M3 and M0 processors
 885:.\Include/arm_math.h ****    */
 886:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSAX(
 887:.\Include/arm_math.h ****   uint32_t x,
 888:.\Include/arm_math.h ****   uint32_t y)
 889:.\Include/arm_math.h ****   {
 890:.\Include/arm_math.h ****     q31_t r, s;
 891:.\Include/arm_math.h **** 
 892:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 893:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 894:.\Include/arm_math.h **** 
 895:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 896:.\Include/arm_math.h ****   }
 897:.\Include/arm_math.h **** 
 898:.\Include/arm_math.h **** 
 899:.\Include/arm_math.h ****   /*
 900:.\Include/arm_math.h ****    * @brief C custom defined SMUSDX for M3 and M0 processors
 901:.\Include/arm_math.h ****    */
 902:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUSDX(
 903:.\Include/arm_math.h ****   uint32_t x,
 904:.\Include/arm_math.h ****   uint32_t y)
 905:.\Include/arm_math.h ****   {
 906:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 907:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 908:.\Include/arm_math.h ****   }
 909:.\Include/arm_math.h **** 
 910:.\Include/arm_math.h ****   /*
 911:.\Include/arm_math.h ****    * @brief C custom defined SMUADX for M3 and M0 processors
 912:.\Include/arm_math.h ****    */
 913:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUADX(
 914:.\Include/arm_math.h ****   uint32_t x,
 915:.\Include/arm_math.h ****   uint32_t y)
 916:.\Include/arm_math.h ****   {
 917:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 918:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 919:.\Include/arm_math.h ****   }
 920:.\Include/arm_math.h **** 
 921:.\Include/arm_math.h **** 
 922:.\Include/arm_math.h ****   /*
 923:.\Include/arm_math.h ****    * @brief C custom defined QADD for M3 and M0 processors
 924:.\Include/arm_math.h ****    */
 925:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QADD(
 926:.\Include/arm_math.h ****   int32_t x,
 927:.\Include/arm_math.h ****   int32_t y)
 928:.\Include/arm_math.h ****   {
 929:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x + (q31_t)y)));
 930:.\Include/arm_math.h ****   }
 931:.\Include/arm_math.h **** 
 932:.\Include/arm_math.h **** 
 933:.\Include/arm_math.h ****   /*
 934:.\Include/arm_math.h ****    * @brief C custom defined QSUB for M3 and M0 processors
 935:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 22


 936:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QSUB(
 937:.\Include/arm_math.h ****   int32_t x,
 938:.\Include/arm_math.h ****   int32_t y)
 939:.\Include/arm_math.h ****   {
 940:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x - (q31_t)y)));
  87              		.loc 2 940 0
  88 004e 7B6B     		ldr	r3, [r7, #52]
  89 0050 1D1C     		mov	r5, r3
  90 0052 DB17     		asr	r3, r3, #31
  91 0054 1E1C     		mov	r6, r3
  92 0056 3B6B     		ldr	r3, [r7, #48]
  93 0058 3B61     		str	r3, [r7, #16]
  94 005a DB17     		asr	r3, r3, #31
  95 005c 7B61     		str	r3, [r7, #20]
  96 005e 2B1C     		mov	r3, r5
  97 0060 341C     		mov	r4, r6
  98 0062 3969     		ldr	r1, [r7, #16]
  99 0064 7A69     		ldr	r2, [r7, #20]
 100 0066 5B1A     		sub	r3, r3, r1
 101 0068 9441     		sbc	r4, r4, r2
 102 006a BB62     		str	r3, [r7, #40]
 103 006c FC62     		str	r4, [r7, #44]
 104              	.LBB10:
 105              	.LBB11:
 513:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 106              		.loc 2 513 0
 107 006e FB6A     		ldr	r3, [r7, #44]
 108 0070 1B00     		asr	r3, r3, #0
 109 0072 BB60     		str	r3, [r7, #8]
 110 0074 FB6A     		ldr	r3, [r7, #44]
 111 0076 DB17     		asr	r3, r3, #31
 112 0078 FB60     		str	r3, [r7, #12]
 113 007a BA68     		ldr	r2, [r7, #8]
 114 007c BB6A     		ldr	r3, [r7, #40]
 115 007e DB17     		asr	r3, r3, #31
 514:.\Include/arm_math.h ****   }
 116              		.loc 2 514 0
 117 0080 9A42     		cmp	r2, r3
 118 0082 09D0     		beq	.L3
 119 0084 FB6A     		ldr	r3, [r7, #44]
 120 0086 DB17     		asr	r3, r3, #31
 121 0088 3B60     		str	r3, [r7]
 122 008a FB6A     		ldr	r3, [r7, #44]
 123 008c DB17     		asr	r3, r3, #31
 124 008e 7B60     		str	r3, [r7, #4]
 125 0090 3A68     		ldr	r2, [r7]
 126 0092 114B     		ldr	r3, .L10
 127 0094 5340     		eor	r3, r2
 128 0096 00E0     		b	.L9
 129              	.L3:
 130 0098 BB6A     		ldr	r3, [r7, #40]
 131              	.L9:
 132              	.LBE11:
 133              	.LBE10:
 134              	.LBE9:
 135              	.LBE8:
 177:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 23


 178:Source\MatrixFunctions/arm_mat_sub_q31.c ****       inA1 = __QSUB(inA1, inB1);
 136              		.loc 1 178 0
 137 009a 3B64     		str	r3, [r7, #64]
 179:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 180:Source\MatrixFunctions/arm_mat_sub_q31.c ****       *pOut++ = inA1;
 138              		.loc 1 180 0
 139 009c FB6C     		ldr	r3, [r7, #76]
 140 009e 1A1D     		add	r2, r3, #4
 141 00a0 FA64     		str	r2, [r7, #76]
 142 00a2 3A6C     		ldr	r2, [r7, #64]
 143 00a4 1A60     		str	r2, [r3]
 181:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 182:Source\MatrixFunctions/arm_mat_sub_q31.c ****       /* Decrement the loop counter */
 183:Source\MatrixFunctions/arm_mat_sub_q31.c ****       blkCnt--;
 144              		.loc 1 183 0
 145 00a6 BB6C     		ldr	r3, [r7, #72]
 146 00a8 013B     		sub	r3, r3, #1
 147 00aa BB64     		str	r3, [r7, #72]
 148              	.L2:
 171:Source\MatrixFunctions/arm_mat_sub_q31.c ****     {
 149              		.loc 1 171 0
 150 00ac BB6C     		ldr	r3, [r7, #72]
 151 00ae 002B     		cmp	r3, #0
 152 00b0 BFD1     		bne	.L7
 184:Source\MatrixFunctions/arm_mat_sub_q31.c ****     }
 185:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 186:Source\MatrixFunctions/arm_mat_sub_q31.c ****     /* Set status as ARM_MATH_SUCCESS */
 187:Source\MatrixFunctions/arm_mat_sub_q31.c ****     status = ARM_MATH_SUCCESS;
 153              		.loc 1 187 0
 154 00b2 2323     		mov	r3, #35
 155 00b4 1822     		mov	r2, #24
 156 00b6 9446     		mov	ip, r2
 157 00b8 BC44     		add	ip, ip, r7
 158 00ba 6344     		add	r3, r3, ip
 159 00bc 0022     		mov	r2, #0
 160 00be 1A70     		strb	r2, [r3]
 188:Source\MatrixFunctions/arm_mat_sub_q31.c ****   }
 189:Source\MatrixFunctions/arm_mat_sub_q31.c **** 
 190:Source\MatrixFunctions/arm_mat_sub_q31.c ****   /* Return to application */
 191:Source\MatrixFunctions/arm_mat_sub_q31.c ****   return (status);
 161              		.loc 1 191 0
 162 00c0 2323     		mov	r3, #35
 163 00c2 1822     		mov	r2, #24
 164 00c4 9446     		mov	ip, r2
 165 00c6 BC44     		add	ip, ip, r7
 166 00c8 6344     		add	r3, r3, ip
 167 00ca 1B78     		ldrb	r3, [r3]
 168 00cc 5BB2     		sxtb	r3, r3
 192:Source\MatrixFunctions/arm_mat_sub_q31.c **** }
 169              		.loc 1 192 0
 170 00ce 181C     		mov	r0, r3
 171 00d0 BD46     		mov	sp, r7
 172 00d2 17B0     		add	sp, sp, #92
 173              		@ sp needed
 174 00d4 F0BD     		pop	{r4, r5, r6, r7, pc}
 175              	.L11:
 176 00d6 C046     		.align	2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 24


 177              	.L10:
 178 00d8 FFFFFF7F 		.word	2147483647
 179              		.cfi_endproc
 180              	.LFE82:
 181              		.size	arm_mat_sub_q31, .-arm_mat_sub_q31
 182              		.text
 183              	.Letext0:
 184              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 185              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 186              		.section	.debug_info,"",%progbits
 187              	.Ldebug_info0:
 188 0000 C2020000 		.4byte	0x2c2
 189 0004 0400     		.2byte	0x4
 190 0006 00000000 		.4byte	.Ldebug_abbrev0
 191 000a 04       		.byte	0x4
 192 000b 01       		.uleb128 0x1
 193 000c 54010000 		.4byte	.LASF49
 194 0010 01       		.byte	0x1
 195 0011 DD020000 		.4byte	.LASF50
 196 0015 34000000 		.4byte	.LASF51
 197 0019 00000000 		.4byte	.Ldebug_ranges0+0
 198 001d 00000000 		.4byte	0
 199 0021 00000000 		.4byte	.Ldebug_line0
 200 0025 02       		.uleb128 0x2
 201 0026 01       		.byte	0x1
 202 0027 06       		.byte	0x6
 203 0028 C9020000 		.4byte	.LASF0
 204 002c 02       		.uleb128 0x2
 205 002d 01       		.byte	0x1
 206 002e 08       		.byte	0x8
 207 002f 97000000 		.4byte	.LASF1
 208 0033 02       		.uleb128 0x2
 209 0034 02       		.byte	0x2
 210 0035 05       		.byte	0x5
 211 0036 87020000 		.4byte	.LASF2
 212 003a 03       		.uleb128 0x3
 213 003b F6000000 		.4byte	.LASF4
 214 003f 03       		.byte	0x3
 215 0040 2B       		.byte	0x2b
 216 0041 45000000 		.4byte	0x45
 217 0045 02       		.uleb128 0x2
 218 0046 02       		.byte	0x2
 219 0047 07       		.byte	0x7
 220 0048 D4000000 		.4byte	.LASF3
 221 004c 03       		.uleb128 0x3
 222 004d 2A000000 		.4byte	.LASF5
 223 0051 03       		.byte	0x3
 224 0052 3F       		.byte	0x3f
 225 0053 57000000 		.4byte	0x57
 226 0057 02       		.uleb128 0x2
 227 0058 04       		.byte	0x4
 228 0059 05       		.byte	0x5
 229 005a AE020000 		.4byte	.LASF6
 230 005e 03       		.uleb128 0x3
 231 005f 08010000 		.4byte	.LASF7
 232 0063 03       		.byte	0x3
 233 0064 41       		.byte	0x41
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 25


 234 0065 69000000 		.4byte	0x69
 235 0069 02       		.uleb128 0x2
 236 006a 04       		.byte	0x4
 237 006b 07       		.byte	0x7
 238 006c C2000000 		.4byte	.LASF8
 239 0070 03       		.uleb128 0x3
 240 0071 EC000000 		.4byte	.LASF9
 241 0075 03       		.byte	0x3
 242 0076 59       		.byte	0x59
 243 0077 7B000000 		.4byte	0x7b
 244 007b 02       		.uleb128 0x2
 245 007c 08       		.byte	0x8
 246 007d 05       		.byte	0x5
 247 007e 43020000 		.4byte	.LASF10
 248 0082 02       		.uleb128 0x2
 249 0083 08       		.byte	0x8
 250 0084 07       		.byte	0x7
 251 0085 3D010000 		.4byte	.LASF11
 252 0089 04       		.uleb128 0x4
 253 008a 04       		.byte	0x4
 254 008b 05       		.byte	0x5
 255 008c 696E7400 		.ascii	"int\000"
 256 0090 02       		.uleb128 0x2
 257 0091 04       		.byte	0x4
 258 0092 07       		.byte	0x7
 259 0093 30010000 		.4byte	.LASF12
 260 0097 03       		.uleb128 0x3
 261 0098 91020000 		.4byte	.LASF13
 262 009c 04       		.byte	0x4
 263 009d 21       		.byte	0x21
 264 009e 3A000000 		.4byte	0x3a
 265 00a2 03       		.uleb128 0x3
 266 00a3 1A020000 		.4byte	.LASF14
 267 00a7 04       		.byte	0x4
 268 00a8 2C       		.byte	0x2c
 269 00a9 4C000000 		.4byte	0x4c
 270 00ad 03       		.uleb128 0x3
 271 00ae A5020000 		.4byte	.LASF15
 272 00b2 04       		.byte	0x4
 273 00b3 2D       		.byte	0x2d
 274 00b4 5E000000 		.4byte	0x5e
 275 00b8 03       		.uleb128 0x3
 276 00b9 00000000 		.4byte	.LASF16
 277 00bd 04       		.byte	0x4
 278 00be 38       		.byte	0x38
 279 00bf 70000000 		.4byte	0x70
 280 00c3 02       		.uleb128 0x2
 281 00c4 04       		.byte	0x4
 282 00c5 07       		.byte	0x7
 283 00c6 22020000 		.4byte	.LASF17
 284 00ca 02       		.uleb128 0x2
 285 00cb 01       		.byte	0x1
 286 00cc 08       		.byte	0x8
 287 00cd 61020000 		.4byte	.LASF18
 288 00d1 02       		.uleb128 0x2
 289 00d2 08       		.byte	0x8
 290 00d3 04       		.byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 26


 291 00d4 01010000 		.4byte	.LASF19
 292 00d8 02       		.uleb128 0x2
 293 00d9 04       		.byte	0x4
 294 00da 04       		.byte	0x4
 295 00db C3020000 		.4byte	.LASF20
 296 00df 02       		.uleb128 0x2
 297 00e0 08       		.byte	0x8
 298 00e1 04       		.byte	0x4
 299 00e2 B7020000 		.4byte	.LASF21
 300 00e6 05       		.uleb128 0x5
 301 00e7 01       		.byte	0x1
 302 00e8 02       		.byte	0x2
 303 00e9 8401     		.2byte	0x184
 304 00eb 1A010000 		.4byte	0x11a
 305 00ef 06       		.uleb128 0x6
 306 00f0 76020000 		.4byte	.LASF22
 307 00f4 00       		.sleb128 0
 308 00f5 06       		.uleb128 0x6
 309 00f6 13010000 		.4byte	.LASF23
 310 00fa 7F       		.sleb128 -1
 311 00fb 06       		.uleb128 0x6
 312 00fc 08000000 		.4byte	.LASF24
 313 0100 7E       		.sleb128 -2
 314 0101 06       		.uleb128 0x6
 315 0102 E6010000 		.4byte	.LASF25
 316 0106 7D       		.sleb128 -3
 317 0107 06       		.uleb128 0x6
 318 0108 66020000 		.4byte	.LASF26
 319 010c 7C       		.sleb128 -4
 320 010d 06       		.uleb128 0x6
 321 010e 23030000 		.4byte	.LASF27
 322 0112 7B       		.sleb128 -5
 323 0113 06       		.uleb128 0x6
 324 0114 AC000000 		.4byte	.LASF28
 325 0118 7A       		.sleb128 -6
 326 0119 00       		.byte	0
 327 011a 07       		.uleb128 0x7
 328 011b 9A020000 		.4byte	.LASF29
 329 011f 02       		.byte	0x2
 330 0120 8C01     		.2byte	0x18c
 331 0122 E6000000 		.4byte	0xe6
 332 0126 07       		.uleb128 0x7
 333 0127 91000000 		.4byte	.LASF30
 334 012b 02       		.byte	0x2
 335 012c 9B01     		.2byte	0x19b
 336 012e A2000000 		.4byte	0xa2
 337 0132 07       		.uleb128 0x7
 338 0133 0D020000 		.4byte	.LASF31
 339 0137 02       		.byte	0x2
 340 0138 A001     		.2byte	0x1a0
 341 013a B8000000 		.4byte	0xb8
 342 013e 08       		.uleb128 0x8
 343 013f 04       		.byte	0x4
 344 0140 26010000 		.4byte	0x126
 345 0144 09       		.uleb128 0x9
 346 0145 08       		.byte	0x8
 347 0146 02       		.byte	0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 27


 348 0147 B905     		.2byte	0x5b9
 349 0149 75010000 		.4byte	0x175
 350 014d 0A       		.uleb128 0xa
 351 014e D5020000 		.4byte	.LASF32
 352 0152 02       		.byte	0x2
 353 0153 BB05     		.2byte	0x5bb
 354 0155 97000000 		.4byte	0x97
 355 0159 00       		.byte	0
 356 015a 0A       		.uleb128 0xa
 357 015b 1B030000 		.4byte	.LASF33
 358 015f 02       		.byte	0x2
 359 0160 BC05     		.2byte	0x5bc
 360 0162 97000000 		.4byte	0x97
 361 0166 02       		.byte	0x2
 362 0167 0A       		.uleb128 0xa
 363 0168 86000000 		.4byte	.LASF34
 364 016c 02       		.byte	0x2
 365 016d BD05     		.2byte	0x5bd
 366 016f 3E010000 		.4byte	0x13e
 367 0173 04       		.byte	0x4
 368 0174 00       		.byte	0
 369 0175 07       		.uleb128 0x7
 370 0176 2B020000 		.4byte	.LASF35
 371 017a 02       		.byte	0x2
 372 017b BE05     		.2byte	0x5be
 373 017d 44010000 		.4byte	0x144
 374 0181 0B       		.uleb128 0xb
 375 0182 51020000 		.4byte	.LASF36
 376 0186 02       		.byte	0x2
 377 0187 FE01     		.2byte	0x1fe
 378 0189 26010000 		.4byte	0x126
 379 018d 03       		.byte	0x3
 380 018e 9D010000 		.4byte	0x19d
 381 0192 0C       		.uleb128 0xc
 382 0193 7800     		.ascii	"x\000"
 383 0195 02       		.byte	0x2
 384 0196 FF01     		.2byte	0x1ff
 385 0198 32010000 		.4byte	0x132
 386 019c 00       		.byte	0
 387 019d 0B       		.uleb128 0xb
 388 019e 13020000 		.4byte	.LASF37
 389 01a2 02       		.byte	0x2
 390 01a3 A803     		.2byte	0x3a8
 391 01a5 A2000000 		.4byte	0xa2
 392 01a9 03       		.byte	0x3
 393 01aa C3010000 		.4byte	0x1c3
 394 01ae 0C       		.uleb128 0xc
 395 01af 7800     		.ascii	"x\000"
 396 01b1 02       		.byte	0x2
 397 01b2 A903     		.2byte	0x3a9
 398 01b4 A2000000 		.4byte	0xa2
 399 01b8 0C       		.uleb128 0xc
 400 01b9 7900     		.ascii	"y\000"
 401 01bb 02       		.byte	0x2
 402 01bc AA03     		.2byte	0x3aa
 403 01be A2000000 		.4byte	0xa2
 404 01c2 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 28


 405 01c3 0D       		.uleb128 0xd
 406 01c4 FD010000 		.4byte	.LASF52
 407 01c8 01       		.byte	0x1
 408 01c9 37       		.byte	0x37
 409 01ca 1A010000 		.4byte	0x11a
 410 01ce 00000000 		.4byte	.LFB82
 411 01d2 DC000000 		.4byte	.LFE82-.LFB82
 412 01d6 01       		.uleb128 0x1
 413 01d7 9C       		.byte	0x9c
 414 01d8 B4020000 		.4byte	0x2b4
 415 01dc 0E       		.uleb128 0xe
 416 01dd 1E000000 		.4byte	.LASF38
 417 01e1 01       		.byte	0x1
 418 01e2 38       		.byte	0x38
 419 01e3 B4020000 		.4byte	0x2b4
 420 01e7 03       		.uleb128 0x3
 421 01e8 91       		.byte	0x91
 422 01e9 B47F     		.sleb128 -76
 423 01eb 0E       		.uleb128 0xe
 424 01ec 24000000 		.4byte	.LASF39
 425 01f0 01       		.byte	0x1
 426 01f1 39       		.byte	0x39
 427 01f2 B4020000 		.4byte	0x2b4
 428 01f6 03       		.uleb128 0x3
 429 01f7 91       		.byte	0x91
 430 01f8 B07F     		.sleb128 -80
 431 01fa 0E       		.uleb128 0xe
 432 01fb E7000000 		.4byte	.LASF40
 433 01ff 01       		.byte	0x1
 434 0200 3A       		.byte	0x3a
 435 0201 BF020000 		.4byte	0x2bf
 436 0205 03       		.uleb128 0x3
 437 0206 91       		.byte	0x91
 438 0207 AC7F     		.sleb128 -84
 439 0209 0F       		.uleb128 0xf
 440 020a 11030000 		.4byte	.LASF41
 441 020e 01       		.byte	0x1
 442 020f 3C       		.byte	0x3c
 443 0210 3E010000 		.4byte	0x13e
 444 0214 02       		.uleb128 0x2
 445 0215 91       		.byte	0x91
 446 0216 64       		.sleb128 -28
 447 0217 0F       		.uleb128 0xf
 448 0218 16030000 		.4byte	.LASF42
 449 021c 01       		.byte	0x1
 450 021d 3D       		.byte	0x3d
 451 021e 3E010000 		.4byte	0x13e
 452 0222 02       		.uleb128 0x2
 453 0223 91       		.byte	0x91
 454 0224 60       		.sleb128 -32
 455 0225 0F       		.uleb128 0xf
 456 0226 8C000000 		.4byte	.LASF43
 457 022a 01       		.byte	0x1
 458 022b 3E       		.byte	0x3e
 459 022c 3E010000 		.4byte	0x13e
 460 0230 02       		.uleb128 0x2
 461 0231 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 29


 462 0232 5C       		.sleb128 -36
 463 0233 0F       		.uleb128 0xf
 464 0234 2B010000 		.4byte	.LASF44
 465 0238 01       		.byte	0x1
 466 0239 3F       		.byte	0x3f
 467 023a 26010000 		.4byte	0x126
 468 023e 02       		.uleb128 0x2
 469 023f 91       		.byte	0x91
 470 0240 50       		.sleb128 -48
 471 0241 0F       		.uleb128 0xf
 472 0242 7A000000 		.4byte	.LASF45
 473 0246 01       		.byte	0x1
 474 0247 3F       		.byte	0x3f
 475 0248 26010000 		.4byte	0x126
 476 024c 02       		.uleb128 0x2
 477 024d 91       		.byte	0x91
 478 024e 4C       		.sleb128 -52
 479 024f 0F       		.uleb128 0xf
 480 0250 06030000 		.4byte	.LASF46
 481 0254 01       		.byte	0x1
 482 0255 48       		.byte	0x48
 483 0256 AD000000 		.4byte	0xad
 484 025a 02       		.uleb128 0x2
 485 025b 91       		.byte	0x91
 486 025c 54       		.sleb128 -44
 487 025d 0F       		.uleb128 0xf
 488 025e A5000000 		.4byte	.LASF47
 489 0262 01       		.byte	0x1
 490 0263 49       		.byte	0x49
 491 0264 AD000000 		.4byte	0xad
 492 0268 02       		.uleb128 0x2
 493 0269 91       		.byte	0x91
 494 026a 58       		.sleb128 -40
 495 026b 0F       		.uleb128 0xf
 496 026c 7F000000 		.4byte	.LASF48
 497 0270 01       		.byte	0x1
 498 0271 4A       		.byte	0x4a
 499 0272 1A010000 		.4byte	0x11a
 500 0276 02       		.uleb128 0x2
 501 0277 91       		.byte	0x91
 502 0278 4B       		.sleb128 -53
 503 0279 10       		.uleb128 0x10
 504 027a 9D010000 		.4byte	0x19d
 505 027e 4E000000 		.4byte	.LBB8
 506 0282 4C000000 		.4byte	.LBE8-.LBB8
 507 0286 01       		.byte	0x1
 508 0287 B2       		.byte	0xb2
 509 0288 11       		.uleb128 0x11
 510 0289 B8010000 		.4byte	0x1b8
 511 028d 02       		.uleb128 0x2
 512 028e 91       		.byte	0x91
 513 028f 40       		.sleb128 -64
 514 0290 11       		.uleb128 0x11
 515 0291 AE010000 		.4byte	0x1ae
 516 0295 02       		.uleb128 0x2
 517 0296 91       		.byte	0x91
 518 0297 44       		.sleb128 -60
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 30


 519 0298 12       		.uleb128 0x12
 520 0299 81010000 		.4byte	0x181
 521 029d 6E000000 		.4byte	.LBB10
 522 02a1 2C000000 		.4byte	.LBE10-.LBB10
 523 02a5 02       		.byte	0x2
 524 02a6 AC03     		.2byte	0x3ac
 525 02a8 11       		.uleb128 0x11
 526 02a9 92010000 		.4byte	0x192
 527 02ad 03       		.uleb128 0x3
 528 02ae 91       		.byte	0x91
 529 02af B87F     		.sleb128 -72
 530 02b1 00       		.byte	0
 531 02b2 00       		.byte	0
 532 02b3 00       		.byte	0
 533 02b4 08       		.uleb128 0x8
 534 02b5 04       		.byte	0x4
 535 02b6 BA020000 		.4byte	0x2ba
 536 02ba 13       		.uleb128 0x13
 537 02bb 75010000 		.4byte	0x175
 538 02bf 08       		.uleb128 0x8
 539 02c0 04       		.byte	0x4
 540 02c1 75010000 		.4byte	0x175
 541 02c5 00       		.byte	0
 542              		.section	.debug_abbrev,"",%progbits
 543              	.Ldebug_abbrev0:
 544 0000 01       		.uleb128 0x1
 545 0001 11       		.uleb128 0x11
 546 0002 01       		.byte	0x1
 547 0003 25       		.uleb128 0x25
 548 0004 0E       		.uleb128 0xe
 549 0005 13       		.uleb128 0x13
 550 0006 0B       		.uleb128 0xb
 551 0007 03       		.uleb128 0x3
 552 0008 0E       		.uleb128 0xe
 553 0009 1B       		.uleb128 0x1b
 554 000a 0E       		.uleb128 0xe
 555 000b 55       		.uleb128 0x55
 556 000c 17       		.uleb128 0x17
 557 000d 11       		.uleb128 0x11
 558 000e 01       		.uleb128 0x1
 559 000f 10       		.uleb128 0x10
 560 0010 17       		.uleb128 0x17
 561 0011 00       		.byte	0
 562 0012 00       		.byte	0
 563 0013 02       		.uleb128 0x2
 564 0014 24       		.uleb128 0x24
 565 0015 00       		.byte	0
 566 0016 0B       		.uleb128 0xb
 567 0017 0B       		.uleb128 0xb
 568 0018 3E       		.uleb128 0x3e
 569 0019 0B       		.uleb128 0xb
 570 001a 03       		.uleb128 0x3
 571 001b 0E       		.uleb128 0xe
 572 001c 00       		.byte	0
 573 001d 00       		.byte	0
 574 001e 03       		.uleb128 0x3
 575 001f 16       		.uleb128 0x16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 31


 576 0020 00       		.byte	0
 577 0021 03       		.uleb128 0x3
 578 0022 0E       		.uleb128 0xe
 579 0023 3A       		.uleb128 0x3a
 580 0024 0B       		.uleb128 0xb
 581 0025 3B       		.uleb128 0x3b
 582 0026 0B       		.uleb128 0xb
 583 0027 49       		.uleb128 0x49
 584 0028 13       		.uleb128 0x13
 585 0029 00       		.byte	0
 586 002a 00       		.byte	0
 587 002b 04       		.uleb128 0x4
 588 002c 24       		.uleb128 0x24
 589 002d 00       		.byte	0
 590 002e 0B       		.uleb128 0xb
 591 002f 0B       		.uleb128 0xb
 592 0030 3E       		.uleb128 0x3e
 593 0031 0B       		.uleb128 0xb
 594 0032 03       		.uleb128 0x3
 595 0033 08       		.uleb128 0x8
 596 0034 00       		.byte	0
 597 0035 00       		.byte	0
 598 0036 05       		.uleb128 0x5
 599 0037 04       		.uleb128 0x4
 600 0038 01       		.byte	0x1
 601 0039 0B       		.uleb128 0xb
 602 003a 0B       		.uleb128 0xb
 603 003b 3A       		.uleb128 0x3a
 604 003c 0B       		.uleb128 0xb
 605 003d 3B       		.uleb128 0x3b
 606 003e 05       		.uleb128 0x5
 607 003f 01       		.uleb128 0x1
 608 0040 13       		.uleb128 0x13
 609 0041 00       		.byte	0
 610 0042 00       		.byte	0
 611 0043 06       		.uleb128 0x6
 612 0044 28       		.uleb128 0x28
 613 0045 00       		.byte	0
 614 0046 03       		.uleb128 0x3
 615 0047 0E       		.uleb128 0xe
 616 0048 1C       		.uleb128 0x1c
 617 0049 0D       		.uleb128 0xd
 618 004a 00       		.byte	0
 619 004b 00       		.byte	0
 620 004c 07       		.uleb128 0x7
 621 004d 16       		.uleb128 0x16
 622 004e 00       		.byte	0
 623 004f 03       		.uleb128 0x3
 624 0050 0E       		.uleb128 0xe
 625 0051 3A       		.uleb128 0x3a
 626 0052 0B       		.uleb128 0xb
 627 0053 3B       		.uleb128 0x3b
 628 0054 05       		.uleb128 0x5
 629 0055 49       		.uleb128 0x49
 630 0056 13       		.uleb128 0x13
 631 0057 00       		.byte	0
 632 0058 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 32


 633 0059 08       		.uleb128 0x8
 634 005a 0F       		.uleb128 0xf
 635 005b 00       		.byte	0
 636 005c 0B       		.uleb128 0xb
 637 005d 0B       		.uleb128 0xb
 638 005e 49       		.uleb128 0x49
 639 005f 13       		.uleb128 0x13
 640 0060 00       		.byte	0
 641 0061 00       		.byte	0
 642 0062 09       		.uleb128 0x9
 643 0063 13       		.uleb128 0x13
 644 0064 01       		.byte	0x1
 645 0065 0B       		.uleb128 0xb
 646 0066 0B       		.uleb128 0xb
 647 0067 3A       		.uleb128 0x3a
 648 0068 0B       		.uleb128 0xb
 649 0069 3B       		.uleb128 0x3b
 650 006a 05       		.uleb128 0x5
 651 006b 01       		.uleb128 0x1
 652 006c 13       		.uleb128 0x13
 653 006d 00       		.byte	0
 654 006e 00       		.byte	0
 655 006f 0A       		.uleb128 0xa
 656 0070 0D       		.uleb128 0xd
 657 0071 00       		.byte	0
 658 0072 03       		.uleb128 0x3
 659 0073 0E       		.uleb128 0xe
 660 0074 3A       		.uleb128 0x3a
 661 0075 0B       		.uleb128 0xb
 662 0076 3B       		.uleb128 0x3b
 663 0077 05       		.uleb128 0x5
 664 0078 49       		.uleb128 0x49
 665 0079 13       		.uleb128 0x13
 666 007a 38       		.uleb128 0x38
 667 007b 0B       		.uleb128 0xb
 668 007c 00       		.byte	0
 669 007d 00       		.byte	0
 670 007e 0B       		.uleb128 0xb
 671 007f 2E       		.uleb128 0x2e
 672 0080 01       		.byte	0x1
 673 0081 03       		.uleb128 0x3
 674 0082 0E       		.uleb128 0xe
 675 0083 3A       		.uleb128 0x3a
 676 0084 0B       		.uleb128 0xb
 677 0085 3B       		.uleb128 0x3b
 678 0086 05       		.uleb128 0x5
 679 0087 27       		.uleb128 0x27
 680 0088 19       		.uleb128 0x19
 681 0089 49       		.uleb128 0x49
 682 008a 13       		.uleb128 0x13
 683 008b 20       		.uleb128 0x20
 684 008c 0B       		.uleb128 0xb
 685 008d 01       		.uleb128 0x1
 686 008e 13       		.uleb128 0x13
 687 008f 00       		.byte	0
 688 0090 00       		.byte	0
 689 0091 0C       		.uleb128 0xc
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 33


 690 0092 05       		.uleb128 0x5
 691 0093 00       		.byte	0
 692 0094 03       		.uleb128 0x3
 693 0095 08       		.uleb128 0x8
 694 0096 3A       		.uleb128 0x3a
 695 0097 0B       		.uleb128 0xb
 696 0098 3B       		.uleb128 0x3b
 697 0099 05       		.uleb128 0x5
 698 009a 49       		.uleb128 0x49
 699 009b 13       		.uleb128 0x13
 700 009c 00       		.byte	0
 701 009d 00       		.byte	0
 702 009e 0D       		.uleb128 0xd
 703 009f 2E       		.uleb128 0x2e
 704 00a0 01       		.byte	0x1
 705 00a1 3F       		.uleb128 0x3f
 706 00a2 19       		.uleb128 0x19
 707 00a3 03       		.uleb128 0x3
 708 00a4 0E       		.uleb128 0xe
 709 00a5 3A       		.uleb128 0x3a
 710 00a6 0B       		.uleb128 0xb
 711 00a7 3B       		.uleb128 0x3b
 712 00a8 0B       		.uleb128 0xb
 713 00a9 27       		.uleb128 0x27
 714 00aa 19       		.uleb128 0x19
 715 00ab 49       		.uleb128 0x49
 716 00ac 13       		.uleb128 0x13
 717 00ad 11       		.uleb128 0x11
 718 00ae 01       		.uleb128 0x1
 719 00af 12       		.uleb128 0x12
 720 00b0 06       		.uleb128 0x6
 721 00b1 40       		.uleb128 0x40
 722 00b2 18       		.uleb128 0x18
 723 00b3 9742     		.uleb128 0x2117
 724 00b5 19       		.uleb128 0x19
 725 00b6 01       		.uleb128 0x1
 726 00b7 13       		.uleb128 0x13
 727 00b8 00       		.byte	0
 728 00b9 00       		.byte	0
 729 00ba 0E       		.uleb128 0xe
 730 00bb 05       		.uleb128 0x5
 731 00bc 00       		.byte	0
 732 00bd 03       		.uleb128 0x3
 733 00be 0E       		.uleb128 0xe
 734 00bf 3A       		.uleb128 0x3a
 735 00c0 0B       		.uleb128 0xb
 736 00c1 3B       		.uleb128 0x3b
 737 00c2 0B       		.uleb128 0xb
 738 00c3 49       		.uleb128 0x49
 739 00c4 13       		.uleb128 0x13
 740 00c5 02       		.uleb128 0x2
 741 00c6 18       		.uleb128 0x18
 742 00c7 00       		.byte	0
 743 00c8 00       		.byte	0
 744 00c9 0F       		.uleb128 0xf
 745 00ca 34       		.uleb128 0x34
 746 00cb 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 34


 747 00cc 03       		.uleb128 0x3
 748 00cd 0E       		.uleb128 0xe
 749 00ce 3A       		.uleb128 0x3a
 750 00cf 0B       		.uleb128 0xb
 751 00d0 3B       		.uleb128 0x3b
 752 00d1 0B       		.uleb128 0xb
 753 00d2 49       		.uleb128 0x49
 754 00d3 13       		.uleb128 0x13
 755 00d4 02       		.uleb128 0x2
 756 00d5 18       		.uleb128 0x18
 757 00d6 00       		.byte	0
 758 00d7 00       		.byte	0
 759 00d8 10       		.uleb128 0x10
 760 00d9 1D       		.uleb128 0x1d
 761 00da 01       		.byte	0x1
 762 00db 31       		.uleb128 0x31
 763 00dc 13       		.uleb128 0x13
 764 00dd 11       		.uleb128 0x11
 765 00de 01       		.uleb128 0x1
 766 00df 12       		.uleb128 0x12
 767 00e0 06       		.uleb128 0x6
 768 00e1 58       		.uleb128 0x58
 769 00e2 0B       		.uleb128 0xb
 770 00e3 59       		.uleb128 0x59
 771 00e4 0B       		.uleb128 0xb
 772 00e5 00       		.byte	0
 773 00e6 00       		.byte	0
 774 00e7 11       		.uleb128 0x11
 775 00e8 05       		.uleb128 0x5
 776 00e9 00       		.byte	0
 777 00ea 31       		.uleb128 0x31
 778 00eb 13       		.uleb128 0x13
 779 00ec 02       		.uleb128 0x2
 780 00ed 18       		.uleb128 0x18
 781 00ee 00       		.byte	0
 782 00ef 00       		.byte	0
 783 00f0 12       		.uleb128 0x12
 784 00f1 1D       		.uleb128 0x1d
 785 00f2 01       		.byte	0x1
 786 00f3 31       		.uleb128 0x31
 787 00f4 13       		.uleb128 0x13
 788 00f5 11       		.uleb128 0x11
 789 00f6 01       		.uleb128 0x1
 790 00f7 12       		.uleb128 0x12
 791 00f8 06       		.uleb128 0x6
 792 00f9 58       		.uleb128 0x58
 793 00fa 0B       		.uleb128 0xb
 794 00fb 59       		.uleb128 0x59
 795 00fc 05       		.uleb128 0x5
 796 00fd 00       		.byte	0
 797 00fe 00       		.byte	0
 798 00ff 13       		.uleb128 0x13
 799 0100 26       		.uleb128 0x26
 800 0101 00       		.byte	0
 801 0102 49       		.uleb128 0x49
 802 0103 13       		.uleb128 0x13
 803 0104 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 35


 804 0105 00       		.byte	0
 805 0106 00       		.byte	0
 806              		.section	.debug_aranges,"",%progbits
 807 0000 1C000000 		.4byte	0x1c
 808 0004 0200     		.2byte	0x2
 809 0006 00000000 		.4byte	.Ldebug_info0
 810 000a 04       		.byte	0x4
 811 000b 00       		.byte	0
 812 000c 0000     		.2byte	0
 813 000e 0000     		.2byte	0
 814 0010 00000000 		.4byte	.LFB82
 815 0014 DC000000 		.4byte	.LFE82-.LFB82
 816 0018 00000000 		.4byte	0
 817 001c 00000000 		.4byte	0
 818              		.section	.debug_ranges,"",%progbits
 819              	.Ldebug_ranges0:
 820 0000 00000000 		.4byte	.LFB82
 821 0004 DC000000 		.4byte	.LFE82
 822 0008 00000000 		.4byte	0
 823 000c 00000000 		.4byte	0
 824              		.section	.debug_line,"",%progbits
 825              	.Ldebug_line0:
 826 0000 8C010000 		.section	.debug_str,"MS",%progbits,1
 826      02004F01 
 826      00000201 
 826      FB0E0D00 
 826      01010101 
 827              	.LASF16:
 828 0000 696E7436 		.ascii	"int64_t\000"
 828      345F7400 
 829              	.LASF24:
 830 0008 41524D5F 		.ascii	"ARM_MATH_LENGTH_ERROR\000"
 830      4D415448 
 830      5F4C454E 
 830      4754485F 
 830      4552524F 
 831              	.LASF38:
 832 001e 70537263 		.ascii	"pSrcA\000"
 832      4100
 833              	.LASF39:
 834 0024 70537263 		.ascii	"pSrcB\000"
 834      4200
 835              	.LASF5:
 836 002a 5F5F696E 		.ascii	"__int32_t\000"
 836      7433325F 
 836      7400
 837              	.LASF51:
 838 0034 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 838      73657273 
 838      5C666E65 
 838      7665735C 
 838      446F6375 
 839 0061 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 839      655F7370 
 839      6565645F 
 839      73656E73 
 839      6F722E63 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 36


 840              	.LASF45:
 841 007a 696E4231 		.ascii	"inB1\000"
 841      00
 842              	.LASF48:
 843 007f 73746174 		.ascii	"status\000"
 843      757300
 844              	.LASF34:
 845 0086 70446174 		.ascii	"pData\000"
 845      6100
 846              	.LASF43:
 847 008c 704F7574 		.ascii	"pOut\000"
 847      00
 848              	.LASF30:
 849 0091 7133315F 		.ascii	"q31_t\000"
 849      7400
 850              	.LASF1:
 851 0097 756E7369 		.ascii	"unsigned char\000"
 851      676E6564 
 851      20636861 
 851      7200
 852              	.LASF47:
 853 00a5 626C6B43 		.ascii	"blkCnt\000"
 853      6E7400
 854              	.LASF28:
 855 00ac 41524D5F 		.ascii	"ARM_MATH_TEST_FAILURE\000"
 855      4D415448 
 855      5F544553 
 855      545F4641 
 855      494C5552 
 856              	.LASF8:
 857 00c2 6C6F6E67 		.ascii	"long unsigned int\000"
 857      20756E73 
 857      69676E65 
 857      6420696E 
 857      7400
 858              	.LASF3:
 859 00d4 73686F72 		.ascii	"short unsigned int\000"
 859      7420756E 
 859      7369676E 
 859      65642069 
 859      6E7400
 860              	.LASF40:
 861 00e7 70447374 		.ascii	"pDst\000"
 861      00
 862              	.LASF9:
 863 00ec 5F5F696E 		.ascii	"__int64_t\000"
 863      7436345F 
 863      7400
 864              	.LASF4:
 865 00f6 5F5F7569 		.ascii	"__uint16_t\000"
 865      6E743136 
 865      5F7400
 866              	.LASF19:
 867 0101 646F7562 		.ascii	"double\000"
 867      6C6500
 868              	.LASF7:
 869 0108 5F5F7569 		.ascii	"__uint32_t\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 37


 869      6E743332 
 869      5F7400
 870              	.LASF23:
 871 0113 41524D5F 		.ascii	"ARM_MATH_ARGUMENT_ERROR\000"
 871      4D415448 
 871      5F415247 
 871      554D454E 
 871      545F4552 
 872              	.LASF44:
 873 012b 696E4131 		.ascii	"inA1\000"
 873      00
 874              	.LASF12:
 875 0130 756E7369 		.ascii	"unsigned int\000"
 875      676E6564 
 875      20696E74 
 875      00
 876              	.LASF11:
 877 013d 6C6F6E67 		.ascii	"long long unsigned int\000"
 877      206C6F6E 
 877      6720756E 
 877      7369676E 
 877      65642069 
 878              	.LASF49:
 879 0154 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 879      4320342E 
 879      392E3320 
 879      32303135 
 879      30333033 
 880 0187 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 880      20726576 
 880      6973696F 
 880      6E203232 
 880      31323230 
 881 01ba 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 881      30202D66 
 881      66756E63 
 881      74696F6E 
 881      2D736563 
 882              	.LASF25:
 883 01e6 41524D5F 		.ascii	"ARM_MATH_SIZE_MISMATCH\000"
 883      4D415448 
 883      5F53495A 
 883      455F4D49 
 883      534D4154 
 884              	.LASF52:
 885 01fd 61726D5F 		.ascii	"arm_mat_sub_q31\000"
 885      6D61745F 
 885      7375625F 
 885      71333100 
 886              	.LASF31:
 887 020d 7136335F 		.ascii	"q63_t\000"
 887      7400
 888              	.LASF37:
 889 0213 5F5F5153 		.ascii	"__QSUB\000"
 889      554200
 890              	.LASF14:
 891 021a 696E7433 		.ascii	"int32_t\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 38


 891      325F7400 
 892              	.LASF17:
 893 0222 73697A65 		.ascii	"sizetype\000"
 893      74797065 
 893      00
 894              	.LASF35:
 895 022b 61726D5F 		.ascii	"arm_matrix_instance_q31\000"
 895      6D617472 
 895      69785F69 
 895      6E737461 
 895      6E63655F 
 896              	.LASF10:
 897 0243 6C6F6E67 		.ascii	"long long int\000"
 897      206C6F6E 
 897      6720696E 
 897      7400
 898              	.LASF36:
 899 0251 636C6970 		.ascii	"clip_q63_to_q31\000"
 899      5F713633 
 899      5F746F5F 
 899      71333100 
 900              	.LASF18:
 901 0261 63686172 		.ascii	"char\000"
 901      00
 902              	.LASF26:
 903 0266 41524D5F 		.ascii	"ARM_MATH_NANINF\000"
 903      4D415448 
 903      5F4E414E 
 903      494E4600 
 904              	.LASF22:
 905 0276 41524D5F 		.ascii	"ARM_MATH_SUCCESS\000"
 905      4D415448 
 905      5F535543 
 905      43455353 
 905      00
 906              	.LASF2:
 907 0287 73686F72 		.ascii	"short int\000"
 907      7420696E 
 907      7400
 908              	.LASF13:
 909 0291 75696E74 		.ascii	"uint16_t\000"
 909      31365F74 
 909      00
 910              	.LASF29:
 911 029a 61726D5F 		.ascii	"arm_status\000"
 911      73746174 
 911      757300
 912              	.LASF15:
 913 02a5 75696E74 		.ascii	"uint32_t\000"
 913      33325F74 
 913      00
 914              	.LASF6:
 915 02ae 6C6F6E67 		.ascii	"long int\000"
 915      20696E74 
 915      00
 916              	.LASF21:
 917 02b7 6C6F6E67 		.ascii	"long double\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs2UGuo.s 			page 39


 917      20646F75 
 917      626C6500 
 918              	.LASF20:
 919 02c3 666C6F61 		.ascii	"float\000"
 919      7400
 920              	.LASF0:
 921 02c9 7369676E 		.ascii	"signed char\000"
 921      65642063 
 921      68617200 
 922              	.LASF32:
 923 02d5 6E756D52 		.ascii	"numRows\000"
 923      6F777300 
 924              	.LASF50:
 925 02dd 536F7572 		.ascii	"Source\\MatrixFunctions\\arm_mat_sub_q31.c\000"
 925      63655C4D 
 925      61747269 
 925      7846756E 
 925      6374696F 
 926              	.LASF46:
 927 0306 6E756D53 		.ascii	"numSamples\000"
 927      616D706C 
 927      657300
 928              	.LASF41:
 929 0311 70496E31 		.ascii	"pIn1\000"
 929      00
 930              	.LASF42:
 931 0316 70496E32 		.ascii	"pIn2\000"
 931      00
 932              	.LASF33:
 933 031b 6E756D43 		.ascii	"numCols\000"
 933      6F6C7300 
 934              	.LASF27:
 935 0323 41524D5F 		.ascii	"ARM_MATH_SINGULAR\000"
 935      4D415448 
 935      5F53494E 
 935      47554C41 
 935      5200
 936              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
