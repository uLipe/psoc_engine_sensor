ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_fir_q7.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_fir_q7,"ax",%progbits
  18              		.align	2
  19              		.global	arm_fir_q7
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_fir_q7, %function
  23              	arm_fir_q7:
  24              	.LFB82:
  25              		.file 1 "Source\\FilteringFunctions\\arm_fir_q7.c"
   1:Source\FilteringFunctions/arm_fir_q7.c **** /* ----------------------------------------------------------------------
   2:Source\FilteringFunctions/arm_fir_q7.c ****  * Project:      CMSIS DSP Library
   3:Source\FilteringFunctions/arm_fir_q7.c ****  * Title:        arm_fir_q7.c
   4:Source\FilteringFunctions/arm_fir_q7.c ****  * Description:  Q7 FIR filter processing function
   5:Source\FilteringFunctions/arm_fir_q7.c ****  *
   6:Source\FilteringFunctions/arm_fir_q7.c ****  * $Date:        27. January 2017
   7:Source\FilteringFunctions/arm_fir_q7.c ****  * $Revision:    V.1.5.1
   8:Source\FilteringFunctions/arm_fir_q7.c ****  *
   9:Source\FilteringFunctions/arm_fir_q7.c ****  * Target Processor: Cortex-M cores
  10:Source\FilteringFunctions/arm_fir_q7.c ****  * -------------------------------------------------------------------- */
  11:Source\FilteringFunctions/arm_fir_q7.c **** /*
  12:Source\FilteringFunctions/arm_fir_q7.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\FilteringFunctions/arm_fir_q7.c ****  *
  14:Source\FilteringFunctions/arm_fir_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\FilteringFunctions/arm_fir_q7.c ****  *
  16:Source\FilteringFunctions/arm_fir_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\FilteringFunctions/arm_fir_q7.c ****  * not use this file except in compliance with the License.
  18:Source\FilteringFunctions/arm_fir_q7.c ****  * You may obtain a copy of the License at
  19:Source\FilteringFunctions/arm_fir_q7.c ****  *
  20:Source\FilteringFunctions/arm_fir_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\FilteringFunctions/arm_fir_q7.c ****  *
  22:Source\FilteringFunctions/arm_fir_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\FilteringFunctions/arm_fir_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\FilteringFunctions/arm_fir_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\FilteringFunctions/arm_fir_q7.c ****  * See the License for the specific language governing permissions and
  26:Source\FilteringFunctions/arm_fir_q7.c ****  * limitations under the License.
  27:Source\FilteringFunctions/arm_fir_q7.c ****  */
  28:Source\FilteringFunctions/arm_fir_q7.c **** 
  29:Source\FilteringFunctions/arm_fir_q7.c **** #include "arm_math.h"
  30:Source\FilteringFunctions/arm_fir_q7.c **** 
  31:Source\FilteringFunctions/arm_fir_q7.c **** /**
  32:Source\FilteringFunctions/arm_fir_q7.c ****  * @ingroup groupFilters
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 2


  33:Source\FilteringFunctions/arm_fir_q7.c ****  */
  34:Source\FilteringFunctions/arm_fir_q7.c **** 
  35:Source\FilteringFunctions/arm_fir_q7.c **** /**
  36:Source\FilteringFunctions/arm_fir_q7.c ****  * @addtogroup FIR
  37:Source\FilteringFunctions/arm_fir_q7.c ****  * @{
  38:Source\FilteringFunctions/arm_fir_q7.c ****  */
  39:Source\FilteringFunctions/arm_fir_q7.c **** 
  40:Source\FilteringFunctions/arm_fir_q7.c **** /**
  41:Source\FilteringFunctions/arm_fir_q7.c ****  * @param[in]   *S points to an instance of the Q7 FIR filter structure.
  42:Source\FilteringFunctions/arm_fir_q7.c ****  * @param[in]   *pSrc points to the block of input data.
  43:Source\FilteringFunctions/arm_fir_q7.c ****  * @param[out]  *pDst points to the block of output data.
  44:Source\FilteringFunctions/arm_fir_q7.c ****  * @param[in]   blockSize number of samples to process per call.
  45:Source\FilteringFunctions/arm_fir_q7.c ****  * @return 	none.
  46:Source\FilteringFunctions/arm_fir_q7.c ****  *
  47:Source\FilteringFunctions/arm_fir_q7.c ****  * <b>Scaling and Overflow Behavior:</b>
  48:Source\FilteringFunctions/arm_fir_q7.c ****  * \par
  49:Source\FilteringFunctions/arm_fir_q7.c ****  * The function is implemented using a 32-bit internal accumulator.
  50:Source\FilteringFunctions/arm_fir_q7.c ****  * Both coefficients and state variables are represented in 1.7 format and multiplications yield a 
  51:Source\FilteringFunctions/arm_fir_q7.c ****  * The 2.14 intermediate results are accumulated in a 32-bit accumulator in 18.14 format.
  52:Source\FilteringFunctions/arm_fir_q7.c ****  * There is no risk of internal overflow with this approach and the full precision of intermediate 
  53:Source\FilteringFunctions/arm_fir_q7.c ****  * The accumulator is converted to 18.7 format by discarding the low 7 bits.
  54:Source\FilteringFunctions/arm_fir_q7.c ****  * Finally, the result is truncated to 1.7 format.
  55:Source\FilteringFunctions/arm_fir_q7.c ****  */
  56:Source\FilteringFunctions/arm_fir_q7.c **** 
  57:Source\FilteringFunctions/arm_fir_q7.c **** void arm_fir_q7(
  58:Source\FilteringFunctions/arm_fir_q7.c ****   const arm_fir_instance_q7 * S,
  59:Source\FilteringFunctions/arm_fir_q7.c ****   q7_t * pSrc,
  60:Source\FilteringFunctions/arm_fir_q7.c ****   q7_t * pDst,
  61:Source\FilteringFunctions/arm_fir_q7.c ****   uint32_t blockSize)
  62:Source\FilteringFunctions/arm_fir_q7.c **** {
  26              		.loc 1 62 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 92B0     		sub	sp, sp, #72
  33              		.cfi_def_cfa_offset 80
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 B960     		str	r1, [r7, #8]
  38 000a 7A60     		str	r2, [r7, #4]
  39 000c 3B60     		str	r3, [r7]
  63:Source\FilteringFunctions/arm_fir_q7.c **** 
  64:Source\FilteringFunctions/arm_fir_q7.c **** #if defined (ARM_MATH_DSP)
  65:Source\FilteringFunctions/arm_fir_q7.c **** 
  66:Source\FilteringFunctions/arm_fir_q7.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  67:Source\FilteringFunctions/arm_fir_q7.c **** 
  68:Source\FilteringFunctions/arm_fir_q7.c ****   q7_t *pState = S->pState;                      /* State pointer */
  69:Source\FilteringFunctions/arm_fir_q7.c ****   q7_t *pCoeffs = S->pCoeffs;                    /* Coefficient pointer */
  70:Source\FilteringFunctions/arm_fir_q7.c ****   q7_t *pStateCurnt;                             /* Points to the current sample of the state */
  71:Source\FilteringFunctions/arm_fir_q7.c ****   q7_t x0, x1, x2, x3;                           /* Temporary variables to hold state */
  72:Source\FilteringFunctions/arm_fir_q7.c ****   q7_t c0;                                       /* Temporary variable to hold coefficient value */
  73:Source\FilteringFunctions/arm_fir_q7.c ****   q7_t *px;                                      /* Temporary pointer for state */
  74:Source\FilteringFunctions/arm_fir_q7.c ****   q7_t *pb;                                      /* Temporary pointer for coefficient buffer */
  75:Source\FilteringFunctions/arm_fir_q7.c ****   q31_t acc0, acc1, acc2, acc3;                  /* Accumulators */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 3


  76:Source\FilteringFunctions/arm_fir_q7.c ****   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
  77:Source\FilteringFunctions/arm_fir_q7.c ****   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */
  78:Source\FilteringFunctions/arm_fir_q7.c **** 
  79:Source\FilteringFunctions/arm_fir_q7.c ****   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  80:Source\FilteringFunctions/arm_fir_q7.c ****   /* pStateCurnt points to the location where the new input data should be written */
  81:Source\FilteringFunctions/arm_fir_q7.c ****   pStateCurnt = &(S->pState[(numTaps - 1u)]);
  82:Source\FilteringFunctions/arm_fir_q7.c **** 
  83:Source\FilteringFunctions/arm_fir_q7.c ****   /* Apply loop unrolling and compute 4 output values simultaneously.
  84:Source\FilteringFunctions/arm_fir_q7.c ****    * The variables acc0 ... acc3 hold output values that are being computed:
  85:Source\FilteringFunctions/arm_fir_q7.c ****    *
  86:Source\FilteringFunctions/arm_fir_q7.c ****    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-
  87:Source\FilteringFunctions/arm_fir_q7.c ****    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-
  88:Source\FilteringFunctions/arm_fir_q7.c ****    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-
  89:Source\FilteringFunctions/arm_fir_q7.c ****    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-
  90:Source\FilteringFunctions/arm_fir_q7.c ****    */
  91:Source\FilteringFunctions/arm_fir_q7.c ****   blkCnt = blockSize >> 2;
  92:Source\FilteringFunctions/arm_fir_q7.c **** 
  93:Source\FilteringFunctions/arm_fir_q7.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  94:Source\FilteringFunctions/arm_fir_q7.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  95:Source\FilteringFunctions/arm_fir_q7.c ****   while (blkCnt > 0u)
  96:Source\FilteringFunctions/arm_fir_q7.c ****   {
  97:Source\FilteringFunctions/arm_fir_q7.c ****     /* Copy four new input samples into the state buffer */
  98:Source\FilteringFunctions/arm_fir_q7.c ****     *pStateCurnt++ = *pSrc++;
  99:Source\FilteringFunctions/arm_fir_q7.c ****     *pStateCurnt++ = *pSrc++;
 100:Source\FilteringFunctions/arm_fir_q7.c ****     *pStateCurnt++ = *pSrc++;
 101:Source\FilteringFunctions/arm_fir_q7.c ****     *pStateCurnt++ = *pSrc++;
 102:Source\FilteringFunctions/arm_fir_q7.c **** 
 103:Source\FilteringFunctions/arm_fir_q7.c ****     /* Set all accumulators to zero */
 104:Source\FilteringFunctions/arm_fir_q7.c ****     acc0 = 0;
 105:Source\FilteringFunctions/arm_fir_q7.c ****     acc1 = 0;
 106:Source\FilteringFunctions/arm_fir_q7.c ****     acc2 = 0;
 107:Source\FilteringFunctions/arm_fir_q7.c ****     acc3 = 0;
 108:Source\FilteringFunctions/arm_fir_q7.c **** 
 109:Source\FilteringFunctions/arm_fir_q7.c ****     /* Initialize state pointer */
 110:Source\FilteringFunctions/arm_fir_q7.c ****     px = pState;
 111:Source\FilteringFunctions/arm_fir_q7.c **** 
 112:Source\FilteringFunctions/arm_fir_q7.c ****     /* Initialize coefficient pointer */
 113:Source\FilteringFunctions/arm_fir_q7.c ****     pb = pCoeffs;
 114:Source\FilteringFunctions/arm_fir_q7.c **** 
 115:Source\FilteringFunctions/arm_fir_q7.c ****     /* Read the first three samples from the state buffer:
 116:Source\FilteringFunctions/arm_fir_q7.c ****      *  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
 117:Source\FilteringFunctions/arm_fir_q7.c ****     x0 = *(px++);
 118:Source\FilteringFunctions/arm_fir_q7.c ****     x1 = *(px++);
 119:Source\FilteringFunctions/arm_fir_q7.c ****     x2 = *(px++);
 120:Source\FilteringFunctions/arm_fir_q7.c **** 
 121:Source\FilteringFunctions/arm_fir_q7.c ****     /* Loop unrolling.  Process 4 taps at a time. */
 122:Source\FilteringFunctions/arm_fir_q7.c ****     tapCnt = numTaps >> 2;
 123:Source\FilteringFunctions/arm_fir_q7.c ****     i = tapCnt;
 124:Source\FilteringFunctions/arm_fir_q7.c **** 
 125:Source\FilteringFunctions/arm_fir_q7.c ****     while (i > 0u)
 126:Source\FilteringFunctions/arm_fir_q7.c ****     {
 127:Source\FilteringFunctions/arm_fir_q7.c ****       /* Read the b[numTaps] coefficient */
 128:Source\FilteringFunctions/arm_fir_q7.c ****       c0 = *pb;
 129:Source\FilteringFunctions/arm_fir_q7.c **** 
 130:Source\FilteringFunctions/arm_fir_q7.c ****       /* Read x[n-numTaps-3] sample */
 131:Source\FilteringFunctions/arm_fir_q7.c ****       x3 = *px;
 132:Source\FilteringFunctions/arm_fir_q7.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 4


 133:Source\FilteringFunctions/arm_fir_q7.c ****       /* acc0 +=  b[numTaps] * x[n-numTaps] */
 134:Source\FilteringFunctions/arm_fir_q7.c ****       acc0 += ((q15_t) x0 * c0);
 135:Source\FilteringFunctions/arm_fir_q7.c **** 
 136:Source\FilteringFunctions/arm_fir_q7.c ****       /* acc1 +=  b[numTaps] * x[n-numTaps-1] */
 137:Source\FilteringFunctions/arm_fir_q7.c ****       acc1 += ((q15_t) x1 * c0);
 138:Source\FilteringFunctions/arm_fir_q7.c **** 
 139:Source\FilteringFunctions/arm_fir_q7.c ****       /* acc2 +=  b[numTaps] * x[n-numTaps-2] */
 140:Source\FilteringFunctions/arm_fir_q7.c ****       acc2 += ((q15_t) x2 * c0);
 141:Source\FilteringFunctions/arm_fir_q7.c **** 
 142:Source\FilteringFunctions/arm_fir_q7.c ****       /* acc3 +=  b[numTaps] * x[n-numTaps-3] */
 143:Source\FilteringFunctions/arm_fir_q7.c ****       acc3 += ((q15_t) x3 * c0);
 144:Source\FilteringFunctions/arm_fir_q7.c **** 
 145:Source\FilteringFunctions/arm_fir_q7.c ****       /* Read the b[numTaps-1] coefficient */
 146:Source\FilteringFunctions/arm_fir_q7.c ****       c0 = *(pb + 1u);
 147:Source\FilteringFunctions/arm_fir_q7.c **** 
 148:Source\FilteringFunctions/arm_fir_q7.c ****       /* Read x[n-numTaps-4] sample */
 149:Source\FilteringFunctions/arm_fir_q7.c ****       x0 = *(px + 1u);
 150:Source\FilteringFunctions/arm_fir_q7.c **** 
 151:Source\FilteringFunctions/arm_fir_q7.c ****       /* Perform the multiply-accumulates */
 152:Source\FilteringFunctions/arm_fir_q7.c ****       acc0 += ((q15_t) x1 * c0);
 153:Source\FilteringFunctions/arm_fir_q7.c ****       acc1 += ((q15_t) x2 * c0);
 154:Source\FilteringFunctions/arm_fir_q7.c ****       acc2 += ((q15_t) x3 * c0);
 155:Source\FilteringFunctions/arm_fir_q7.c ****       acc3 += ((q15_t) x0 * c0);
 156:Source\FilteringFunctions/arm_fir_q7.c **** 
 157:Source\FilteringFunctions/arm_fir_q7.c ****       /* Read the b[numTaps-2] coefficient */
 158:Source\FilteringFunctions/arm_fir_q7.c ****       c0 = *(pb + 2u);
 159:Source\FilteringFunctions/arm_fir_q7.c **** 
 160:Source\FilteringFunctions/arm_fir_q7.c ****       /* Read x[n-numTaps-5] sample */
 161:Source\FilteringFunctions/arm_fir_q7.c ****       x1 = *(px + 2u);
 162:Source\FilteringFunctions/arm_fir_q7.c **** 
 163:Source\FilteringFunctions/arm_fir_q7.c ****       /* Perform the multiply-accumulates */
 164:Source\FilteringFunctions/arm_fir_q7.c ****       acc0 += ((q15_t) x2 * c0);
 165:Source\FilteringFunctions/arm_fir_q7.c ****       acc1 += ((q15_t) x3 * c0);
 166:Source\FilteringFunctions/arm_fir_q7.c ****       acc2 += ((q15_t) x0 * c0);
 167:Source\FilteringFunctions/arm_fir_q7.c ****       acc3 += ((q15_t) x1 * c0);
 168:Source\FilteringFunctions/arm_fir_q7.c **** 
 169:Source\FilteringFunctions/arm_fir_q7.c ****       /* Read the b[numTaps-3] coefficients */
 170:Source\FilteringFunctions/arm_fir_q7.c ****       c0 = *(pb + 3u);
 171:Source\FilteringFunctions/arm_fir_q7.c **** 
 172:Source\FilteringFunctions/arm_fir_q7.c ****       /* Read x[n-numTaps-6] sample */
 173:Source\FilteringFunctions/arm_fir_q7.c ****       x2 = *(px + 3u);
 174:Source\FilteringFunctions/arm_fir_q7.c **** 
 175:Source\FilteringFunctions/arm_fir_q7.c ****       /* Perform the multiply-accumulates */
 176:Source\FilteringFunctions/arm_fir_q7.c ****       acc0 += ((q15_t) x3 * c0);
 177:Source\FilteringFunctions/arm_fir_q7.c ****       acc1 += ((q15_t) x0 * c0);
 178:Source\FilteringFunctions/arm_fir_q7.c ****       acc2 += ((q15_t) x1 * c0);
 179:Source\FilteringFunctions/arm_fir_q7.c ****       acc3 += ((q15_t) x2 * c0);
 180:Source\FilteringFunctions/arm_fir_q7.c **** 
 181:Source\FilteringFunctions/arm_fir_q7.c ****       /* update coefficient pointer */
 182:Source\FilteringFunctions/arm_fir_q7.c ****       pb += 4u;
 183:Source\FilteringFunctions/arm_fir_q7.c ****       px += 4u;
 184:Source\FilteringFunctions/arm_fir_q7.c **** 
 185:Source\FilteringFunctions/arm_fir_q7.c ****       /* Decrement the loop counter */
 186:Source\FilteringFunctions/arm_fir_q7.c ****       i--;
 187:Source\FilteringFunctions/arm_fir_q7.c ****     }
 188:Source\FilteringFunctions/arm_fir_q7.c **** 
 189:Source\FilteringFunctions/arm_fir_q7.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 5


 190:Source\FilteringFunctions/arm_fir_q7.c **** 
 191:Source\FilteringFunctions/arm_fir_q7.c ****     i = numTaps - (tapCnt * 4u);
 192:Source\FilteringFunctions/arm_fir_q7.c ****     while (i > 0u)
 193:Source\FilteringFunctions/arm_fir_q7.c ****     {
 194:Source\FilteringFunctions/arm_fir_q7.c ****       /* Read coefficients */
 195:Source\FilteringFunctions/arm_fir_q7.c ****       c0 = *(pb++);
 196:Source\FilteringFunctions/arm_fir_q7.c **** 
 197:Source\FilteringFunctions/arm_fir_q7.c ****       /* Fetch 1 state variable */
 198:Source\FilteringFunctions/arm_fir_q7.c ****       x3 = *(px++);
 199:Source\FilteringFunctions/arm_fir_q7.c **** 
 200:Source\FilteringFunctions/arm_fir_q7.c ****       /* Perform the multiply-accumulates */
 201:Source\FilteringFunctions/arm_fir_q7.c ****       acc0 += ((q15_t) x0 * c0);
 202:Source\FilteringFunctions/arm_fir_q7.c ****       acc1 += ((q15_t) x1 * c0);
 203:Source\FilteringFunctions/arm_fir_q7.c ****       acc2 += ((q15_t) x2 * c0);
 204:Source\FilteringFunctions/arm_fir_q7.c ****       acc3 += ((q15_t) x3 * c0);
 205:Source\FilteringFunctions/arm_fir_q7.c **** 
 206:Source\FilteringFunctions/arm_fir_q7.c ****       /* Reuse the present sample states for next sample */
 207:Source\FilteringFunctions/arm_fir_q7.c ****       x0 = x1;
 208:Source\FilteringFunctions/arm_fir_q7.c ****       x1 = x2;
 209:Source\FilteringFunctions/arm_fir_q7.c ****       x2 = x3;
 210:Source\FilteringFunctions/arm_fir_q7.c **** 
 211:Source\FilteringFunctions/arm_fir_q7.c ****       /* Decrement the loop counter */
 212:Source\FilteringFunctions/arm_fir_q7.c ****       i--;
 213:Source\FilteringFunctions/arm_fir_q7.c ****     }
 214:Source\FilteringFunctions/arm_fir_q7.c **** 
 215:Source\FilteringFunctions/arm_fir_q7.c ****     /* Advance the state pointer by 4 to process the next group of 4 samples */
 216:Source\FilteringFunctions/arm_fir_q7.c ****     pState = pState + 4;
 217:Source\FilteringFunctions/arm_fir_q7.c **** 
 218:Source\FilteringFunctions/arm_fir_q7.c ****     /* The results in the 4 accumulators are in 2.62 format.  Convert to 1.31
 219:Source\FilteringFunctions/arm_fir_q7.c ****      ** Then store the 4 outputs in the destination buffer. */
 220:Source\FilteringFunctions/arm_fir_q7.c ****     acc0 = __SSAT((acc0 >> 7u), 8);
 221:Source\FilteringFunctions/arm_fir_q7.c ****     *pDst++ = acc0;
 222:Source\FilteringFunctions/arm_fir_q7.c ****     acc1 = __SSAT((acc1 >> 7u), 8);
 223:Source\FilteringFunctions/arm_fir_q7.c ****     *pDst++ = acc1;
 224:Source\FilteringFunctions/arm_fir_q7.c ****     acc2 = __SSAT((acc2 >> 7u), 8);
 225:Source\FilteringFunctions/arm_fir_q7.c ****     *pDst++ = acc2;
 226:Source\FilteringFunctions/arm_fir_q7.c ****     acc3 = __SSAT((acc3 >> 7u), 8);
 227:Source\FilteringFunctions/arm_fir_q7.c ****     *pDst++ = acc3;
 228:Source\FilteringFunctions/arm_fir_q7.c **** 
 229:Source\FilteringFunctions/arm_fir_q7.c ****     /* Decrement the samples loop counter */
 230:Source\FilteringFunctions/arm_fir_q7.c ****     blkCnt--;
 231:Source\FilteringFunctions/arm_fir_q7.c ****   }
 232:Source\FilteringFunctions/arm_fir_q7.c **** 
 233:Source\FilteringFunctions/arm_fir_q7.c **** 
 234:Source\FilteringFunctions/arm_fir_q7.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 235:Source\FilteringFunctions/arm_fir_q7.c ****    ** No loop unrolling is used. */
 236:Source\FilteringFunctions/arm_fir_q7.c ****   blkCnt = blockSize % 4u;
 237:Source\FilteringFunctions/arm_fir_q7.c **** 
 238:Source\FilteringFunctions/arm_fir_q7.c ****   while (blkCnt > 0u)
 239:Source\FilteringFunctions/arm_fir_q7.c ****   {
 240:Source\FilteringFunctions/arm_fir_q7.c ****     /* Copy one sample at a time into state buffer */
 241:Source\FilteringFunctions/arm_fir_q7.c ****     *pStateCurnt++ = *pSrc++;
 242:Source\FilteringFunctions/arm_fir_q7.c **** 
 243:Source\FilteringFunctions/arm_fir_q7.c ****     /* Set the accumulator to zero */
 244:Source\FilteringFunctions/arm_fir_q7.c ****     acc0 = 0;
 245:Source\FilteringFunctions/arm_fir_q7.c **** 
 246:Source\FilteringFunctions/arm_fir_q7.c ****     /* Initialize state pointer */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 6


 247:Source\FilteringFunctions/arm_fir_q7.c ****     px = pState;
 248:Source\FilteringFunctions/arm_fir_q7.c **** 
 249:Source\FilteringFunctions/arm_fir_q7.c ****     /* Initialize Coefficient pointer */
 250:Source\FilteringFunctions/arm_fir_q7.c ****     pb = (pCoeffs);
 251:Source\FilteringFunctions/arm_fir_q7.c **** 
 252:Source\FilteringFunctions/arm_fir_q7.c ****     i = numTaps;
 253:Source\FilteringFunctions/arm_fir_q7.c **** 
 254:Source\FilteringFunctions/arm_fir_q7.c ****     /* Perform the multiply-accumulates */
 255:Source\FilteringFunctions/arm_fir_q7.c ****     do
 256:Source\FilteringFunctions/arm_fir_q7.c ****     {
 257:Source\FilteringFunctions/arm_fir_q7.c ****       acc0 += (q15_t) * (px++) * (*(pb++));
 258:Source\FilteringFunctions/arm_fir_q7.c ****       i--;
 259:Source\FilteringFunctions/arm_fir_q7.c ****     } while (i > 0u);
 260:Source\FilteringFunctions/arm_fir_q7.c **** 
 261:Source\FilteringFunctions/arm_fir_q7.c ****     /* The result is in 2.14 format.  Convert to 1.7
 262:Source\FilteringFunctions/arm_fir_q7.c ****      ** Then store the output in the destination buffer. */
 263:Source\FilteringFunctions/arm_fir_q7.c ****     *pDst++ = __SSAT((acc0 >> 7u), 8);
 264:Source\FilteringFunctions/arm_fir_q7.c **** 
 265:Source\FilteringFunctions/arm_fir_q7.c ****     /* Advance state pointer by 1 for the next sample */
 266:Source\FilteringFunctions/arm_fir_q7.c ****     pState = pState + 1;
 267:Source\FilteringFunctions/arm_fir_q7.c **** 
 268:Source\FilteringFunctions/arm_fir_q7.c ****     /* Decrement the samples loop counter */
 269:Source\FilteringFunctions/arm_fir_q7.c ****     blkCnt--;
 270:Source\FilteringFunctions/arm_fir_q7.c ****   }
 271:Source\FilteringFunctions/arm_fir_q7.c **** 
 272:Source\FilteringFunctions/arm_fir_q7.c ****   /* Processing is complete.
 273:Source\FilteringFunctions/arm_fir_q7.c ****    ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.
 274:Source\FilteringFunctions/arm_fir_q7.c ****    ** This prepares the state buffer for the next function call. */
 275:Source\FilteringFunctions/arm_fir_q7.c **** 
 276:Source\FilteringFunctions/arm_fir_q7.c ****   /* Points to the start of the state buffer */
 277:Source\FilteringFunctions/arm_fir_q7.c ****   pStateCurnt = S->pState;
 278:Source\FilteringFunctions/arm_fir_q7.c **** 
 279:Source\FilteringFunctions/arm_fir_q7.c ****   tapCnt = (numTaps - 1u) >> 2u;
 280:Source\FilteringFunctions/arm_fir_q7.c **** 
 281:Source\FilteringFunctions/arm_fir_q7.c ****   /* copy data */
 282:Source\FilteringFunctions/arm_fir_q7.c ****   while (tapCnt > 0u)
 283:Source\FilteringFunctions/arm_fir_q7.c ****   {
 284:Source\FilteringFunctions/arm_fir_q7.c ****     *pStateCurnt++ = *pState++;
 285:Source\FilteringFunctions/arm_fir_q7.c ****     *pStateCurnt++ = *pState++;
 286:Source\FilteringFunctions/arm_fir_q7.c ****     *pStateCurnt++ = *pState++;
 287:Source\FilteringFunctions/arm_fir_q7.c ****     *pStateCurnt++ = *pState++;
 288:Source\FilteringFunctions/arm_fir_q7.c **** 
 289:Source\FilteringFunctions/arm_fir_q7.c ****     /* Decrement the loop counter */
 290:Source\FilteringFunctions/arm_fir_q7.c ****     tapCnt--;
 291:Source\FilteringFunctions/arm_fir_q7.c ****   }
 292:Source\FilteringFunctions/arm_fir_q7.c **** 
 293:Source\FilteringFunctions/arm_fir_q7.c ****   /* Calculate remaining number of copies */
 294:Source\FilteringFunctions/arm_fir_q7.c ****   tapCnt = (numTaps - 1u) % 0x4u;
 295:Source\FilteringFunctions/arm_fir_q7.c **** 
 296:Source\FilteringFunctions/arm_fir_q7.c ****   /* Copy the remaining q31_t data */
 297:Source\FilteringFunctions/arm_fir_q7.c ****   while (tapCnt > 0u)
 298:Source\FilteringFunctions/arm_fir_q7.c ****   {
 299:Source\FilteringFunctions/arm_fir_q7.c ****     *pStateCurnt++ = *pState++;
 300:Source\FilteringFunctions/arm_fir_q7.c **** 
 301:Source\FilteringFunctions/arm_fir_q7.c ****     /* Decrement the loop counter */
 302:Source\FilteringFunctions/arm_fir_q7.c ****     tapCnt--;
 303:Source\FilteringFunctions/arm_fir_q7.c ****   }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 7


 304:Source\FilteringFunctions/arm_fir_q7.c **** 
 305:Source\FilteringFunctions/arm_fir_q7.c **** #else
 306:Source\FilteringFunctions/arm_fir_q7.c **** 
 307:Source\FilteringFunctions/arm_fir_q7.c **** /* Run the below code for Cortex-M0 */
 308:Source\FilteringFunctions/arm_fir_q7.c **** 
 309:Source\FilteringFunctions/arm_fir_q7.c ****   uint32_t numTaps = S->numTaps;                 /* Number of taps in the filter */
  40              		.loc 1 309 0
  41 000e FB68     		ldr	r3, [r7, #12]
  42 0010 1B88     		ldrh	r3, [r3]
  43 0012 BB62     		str	r3, [r7, #40]
 310:Source\FilteringFunctions/arm_fir_q7.c ****   uint32_t i, blkCnt;                            /* Loop counters */
 311:Source\FilteringFunctions/arm_fir_q7.c ****   q7_t *pState = S->pState;                      /* State pointer */
  44              		.loc 1 311 0
  45 0014 FB68     		ldr	r3, [r7, #12]
  46 0016 5B68     		ldr	r3, [r3, #4]
  47 0018 FB63     		str	r3, [r7, #60]
 312:Source\FilteringFunctions/arm_fir_q7.c ****   q7_t *pCoeffs = S->pCoeffs;                    /* Coefficient pointer */
  48              		.loc 1 312 0
  49 001a FB68     		ldr	r3, [r7, #12]
  50 001c 9B68     		ldr	r3, [r3, #8]
  51 001e 7B62     		str	r3, [r7, #36]
 313:Source\FilteringFunctions/arm_fir_q7.c ****   q7_t *px, *pb;                                 /* Temporary pointers to state and coeff */
 314:Source\FilteringFunctions/arm_fir_q7.c ****   q31_t acc = 0;                                 /* Accumlator */
  52              		.loc 1 314 0
  53 0020 0023     		mov	r3, #0
  54 0022 3B63     		str	r3, [r7, #48]
 315:Source\FilteringFunctions/arm_fir_q7.c ****   q7_t *pStateCurnt;                             /* Points to the current sample of the state */
 316:Source\FilteringFunctions/arm_fir_q7.c **** 
 317:Source\FilteringFunctions/arm_fir_q7.c **** 
 318:Source\FilteringFunctions/arm_fir_q7.c ****   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
 319:Source\FilteringFunctions/arm_fir_q7.c ****   /* pStateCurnt points to the location where the new input data should be written */
 320:Source\FilteringFunctions/arm_fir_q7.c ****   pStateCurnt = S->pState + (numTaps - 1u);
  55              		.loc 1 320 0
  56 0024 FB68     		ldr	r3, [r7, #12]
  57 0026 5A68     		ldr	r2, [r3, #4]
  58 0028 BB6A     		ldr	r3, [r7, #40]
  59 002a 013B     		sub	r3, r3, #1
  60 002c D318     		add	r3, r2, r3
  61 002e FB62     		str	r3, [r7, #44]
 321:Source\FilteringFunctions/arm_fir_q7.c **** 
 322:Source\FilteringFunctions/arm_fir_q7.c ****   /* Initialize blkCnt with blockSize */
 323:Source\FilteringFunctions/arm_fir_q7.c ****   blkCnt = blockSize;
  62              		.loc 1 323 0
  63 0030 3B68     		ldr	r3, [r7]
  64 0032 3B64     		str	r3, [r7, #64]
 324:Source\FilteringFunctions/arm_fir_q7.c **** 
 325:Source\FilteringFunctions/arm_fir_q7.c ****   /* Perform filtering upto BlockSize - BlockSize%4  */
 326:Source\FilteringFunctions/arm_fir_q7.c ****   while (blkCnt > 0u)
  65              		.loc 1 326 0
  66 0034 5DE0     		b	.L2
  67              	.L11:
 327:Source\FilteringFunctions/arm_fir_q7.c ****   {
 328:Source\FilteringFunctions/arm_fir_q7.c ****     /* Copy one sample at a time into state buffer */
 329:Source\FilteringFunctions/arm_fir_q7.c ****     *pStateCurnt++ = *pSrc++;
  68              		.loc 1 329 0
  69 0036 FB6A     		ldr	r3, [r7, #44]
  70 0038 5A1C     		add	r2, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 8


  71 003a FA62     		str	r2, [r7, #44]
  72 003c BA68     		ldr	r2, [r7, #8]
  73 003e 511C     		add	r1, r2, #1
  74 0040 B960     		str	r1, [r7, #8]
  75 0042 1278     		ldrb	r2, [r2]
  76 0044 1A70     		strb	r2, [r3]
 330:Source\FilteringFunctions/arm_fir_q7.c **** 
 331:Source\FilteringFunctions/arm_fir_q7.c ****     /* Set accumulator to zero */
 332:Source\FilteringFunctions/arm_fir_q7.c ****     acc = 0;
  77              		.loc 1 332 0
  78 0046 0023     		mov	r3, #0
  79 0048 3B63     		str	r3, [r7, #48]
 333:Source\FilteringFunctions/arm_fir_q7.c **** 
 334:Source\FilteringFunctions/arm_fir_q7.c ****     /* Initialize state pointer of type q7 */
 335:Source\FilteringFunctions/arm_fir_q7.c ****     px = pState;
  80              		.loc 1 335 0
  81 004a FB6B     		ldr	r3, [r7, #60]
  82 004c BB63     		str	r3, [r7, #56]
 336:Source\FilteringFunctions/arm_fir_q7.c **** 
 337:Source\FilteringFunctions/arm_fir_q7.c ****     /* Initialize coeff pointer of type q7 */
 338:Source\FilteringFunctions/arm_fir_q7.c ****     pb = pCoeffs;
  83              		.loc 1 338 0
  84 004e 7B6A     		ldr	r3, [r7, #36]
  85 0050 7B63     		str	r3, [r7, #52]
 339:Source\FilteringFunctions/arm_fir_q7.c **** 
 340:Source\FilteringFunctions/arm_fir_q7.c **** 
 341:Source\FilteringFunctions/arm_fir_q7.c ****     i = numTaps;
  86              		.loc 1 341 0
  87 0052 BB6A     		ldr	r3, [r7, #40]
  88 0054 7B64     		str	r3, [r7, #68]
 342:Source\FilteringFunctions/arm_fir_q7.c **** 
 343:Source\FilteringFunctions/arm_fir_q7.c ****     while (i > 0u)
  89              		.loc 1 343 0
  90 0056 10E0     		b	.L3
  91              	.L4:
 344:Source\FilteringFunctions/arm_fir_q7.c ****     {
 345:Source\FilteringFunctions/arm_fir_q7.c ****       /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-
 346:Source\FilteringFunctions/arm_fir_q7.c ****       acc += (q15_t) * px++ * *pb++;
  92              		.loc 1 346 0
  93 0058 BB6B     		ldr	r3, [r7, #56]
  94 005a 5A1C     		add	r2, r3, #1
  95 005c BA63     		str	r2, [r7, #56]
  96 005e 1B78     		ldrb	r3, [r3]
  97 0060 5AB2     		sxtb	r2, r3
  98 0062 7B6B     		ldr	r3, [r7, #52]
  99 0064 591C     		add	r1, r3, #1
 100 0066 7963     		str	r1, [r7, #52]
 101 0068 1B78     		ldrb	r3, [r3]
 102 006a 5BB2     		sxtb	r3, r3
 103 006c 5343     		mul	r3, r2
 104 006e 3A6B     		ldr	r2, [r7, #48]
 105 0070 D318     		add	r3, r2, r3
 106 0072 3B63     		str	r3, [r7, #48]
 347:Source\FilteringFunctions/arm_fir_q7.c ****       i--;
 107              		.loc 1 347 0
 108 0074 7B6C     		ldr	r3, [r7, #68]
 109 0076 013B     		sub	r3, r3, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 9


 110 0078 7B64     		str	r3, [r7, #68]
 111              	.L3:
 343:Source\FilteringFunctions/arm_fir_q7.c ****     {
 112              		.loc 1 343 0
 113 007a 7B6C     		ldr	r3, [r7, #68]
 114 007c 002B     		cmp	r3, #0
 115 007e EBD1     		bne	.L4
 348:Source\FilteringFunctions/arm_fir_q7.c ****     }
 349:Source\FilteringFunctions/arm_fir_q7.c **** 
 350:Source\FilteringFunctions/arm_fir_q7.c ****     /* Store the 1.7 format filter output in destination buffer */
 351:Source\FilteringFunctions/arm_fir_q7.c ****     *pDst++ = (q7_t) __SSAT((acc >> 7), 8);
 116              		.loc 1 351 0
 117 0080 7B68     		ldr	r3, [r7, #4]
 118 0082 5A1C     		add	r2, r3, #1
 119 0084 7A60     		str	r2, [r7, #4]
 120 0086 3A6B     		ldr	r2, [r7, #48]
 121 0088 D211     		asr	r2, r2, #7
 122 008a 3A62     		str	r2, [r7, #32]
 123 008c 0822     		mov	r2, #8
 124 008e FA61     		str	r2, [r7, #28]
 125              	.LBB4:
 126              	.LBB5:
 127              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 10


  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 11


  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 12


 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 13


 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 14


 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 15


 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 16


 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 17


 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 18


 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 19


 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 20


 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 21


 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
 128              		.loc 2 699 0
 129 0090 0122     		mov	r2, #1
 130 0092 BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 131              		.loc 2 700 0
 132 0094 0022     		mov	r2, #0
 133 0096 7A61     		str	r2, [r7, #20]
 134 0098 05E0     		b	.L5
 135              	.L6:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 136              		.loc 2 702 0
 137 009a BA69     		ldr	r2, [r7, #24]
 138 009c 5200     		lsl	r2, r2, #1
 139 009e BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 140              		.loc 2 700 0
 141 00a0 7A69     		ldr	r2, [r7, #20]
 142 00a2 0132     		add	r2, r2, #1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 22


 143 00a4 7A61     		str	r2, [r7, #20]
 144              	.L5:
 145 00a6 FA69     		ldr	r2, [r7, #28]
 146 00a8 013A     		sub	r2, r2, #1
 147 00aa 7969     		ldr	r1, [r7, #20]
 148 00ac 9142     		cmp	r1, r2
 149 00ae F4D3     		bcc	.L6
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 150              		.loc 2 705 0
 151 00b0 3A6A     		ldr	r2, [r7, #32]
 152 00b2 002A     		cmp	r2, #0
 153 00b4 09DD     		ble	.L7
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 154              		.loc 2 707 0
 155 00b6 BA69     		ldr	r2, [r7, #24]
 156 00b8 013A     		sub	r2, r2, #1
 157 00ba BA61     		str	r2, [r7, #24]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 158              		.loc 2 709 0
 159 00bc 396A     		ldr	r1, [r7, #32]
 160 00be BA69     		ldr	r2, [r7, #24]
 161 00c0 9142     		cmp	r1, r2
 162 00c2 0CDD     		ble	.L14
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 163              		.loc 2 711 0
 164 00c4 BA69     		ldr	r2, [r7, #24]
 165 00c6 3A62     		str	r2, [r7, #32]
 166 00c8 0AE0     		b	.L9
 167              	.L7:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 168              		.loc 2 716 0
 169 00ca BA69     		ldr	r2, [r7, #24]
 170 00cc 5242     		neg	r2, r2
 171 00ce 3A61     		str	r2, [r7, #16]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 172              		.loc 2 718 0
 173 00d0 396A     		ldr	r1, [r7, #32]
 174 00d2 3A69     		ldr	r2, [r7, #16]
 175 00d4 9142     		cmp	r1, r2
 176 00d6 03DA     		bge	.L9
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 177              		.loc 2 720 0
 178 00d8 3A69     		ldr	r2, [r7, #16]
 179 00da 3A62     		str	r2, [r7, #32]
 180 00dc 00E0     		b	.L9
 181              	.L14:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 23


 711:.\Include/arm_math.h ****       }
 182              		.loc 2 711 0
 183 00de C046     		mov	r8, r8
 184              	.L9:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 185              		.loc 2 723 0
 186 00e0 3A6A     		ldr	r2, [r7, #32]
 187              	.LBE5:
 188              	.LBE4:
 189              		.loc 1 351 0
 190 00e2 D2B2     		uxtb	r2, r2
 191 00e4 1A70     		strb	r2, [r3]
 352:Source\FilteringFunctions/arm_fir_q7.c **** 
 353:Source\FilteringFunctions/arm_fir_q7.c ****     /* Advance the state pointer by 1 to process the next sample */
 354:Source\FilteringFunctions/arm_fir_q7.c ****     pState = pState + 1;
 192              		.loc 1 354 0
 193 00e6 FB6B     		ldr	r3, [r7, #60]
 194 00e8 0133     		add	r3, r3, #1
 195 00ea FB63     		str	r3, [r7, #60]
 355:Source\FilteringFunctions/arm_fir_q7.c **** 
 356:Source\FilteringFunctions/arm_fir_q7.c ****     /* Decrement the loop counter */
 357:Source\FilteringFunctions/arm_fir_q7.c ****     blkCnt--;
 196              		.loc 1 357 0
 197 00ec 3B6C     		ldr	r3, [r7, #64]
 198 00ee 013B     		sub	r3, r3, #1
 199 00f0 3B64     		str	r3, [r7, #64]
 200              	.L2:
 326:Source\FilteringFunctions/arm_fir_q7.c ****   {
 201              		.loc 1 326 0
 202 00f2 3B6C     		ldr	r3, [r7, #64]
 203 00f4 002B     		cmp	r3, #0
 204 00f6 9ED1     		bne	.L11
 358:Source\FilteringFunctions/arm_fir_q7.c ****   }
 359:Source\FilteringFunctions/arm_fir_q7.c **** 
 360:Source\FilteringFunctions/arm_fir_q7.c ****   /* Processing is complete.
 361:Source\FilteringFunctions/arm_fir_q7.c ****    ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.
 362:Source\FilteringFunctions/arm_fir_q7.c ****    ** This prepares the state buffer for the next function call. */
 363:Source\FilteringFunctions/arm_fir_q7.c **** 
 364:Source\FilteringFunctions/arm_fir_q7.c **** 
 365:Source\FilteringFunctions/arm_fir_q7.c ****   /* Points to the start of the state buffer */
 366:Source\FilteringFunctions/arm_fir_q7.c ****   pStateCurnt = S->pState;
 205              		.loc 1 366 0
 206 00f8 FB68     		ldr	r3, [r7, #12]
 207 00fa 5B68     		ldr	r3, [r3, #4]
 208 00fc FB62     		str	r3, [r7, #44]
 367:Source\FilteringFunctions/arm_fir_q7.c **** 
 368:Source\FilteringFunctions/arm_fir_q7.c **** 
 369:Source\FilteringFunctions/arm_fir_q7.c ****   /* Copy numTaps number of values */
 370:Source\FilteringFunctions/arm_fir_q7.c ****   i = (numTaps - 1u);
 209              		.loc 1 370 0
 210 00fe BB6A     		ldr	r3, [r7, #40]
 211 0100 013B     		sub	r3, r3, #1
 212 0102 7B64     		str	r3, [r7, #68]
 371:Source\FilteringFunctions/arm_fir_q7.c **** 
 372:Source\FilteringFunctions/arm_fir_q7.c ****   /* Copy q7_t data */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 24


 373:Source\FilteringFunctions/arm_fir_q7.c ****   while (i > 0u)
 213              		.loc 1 373 0
 214 0104 0AE0     		b	.L12
 215              	.L13:
 374:Source\FilteringFunctions/arm_fir_q7.c ****   {
 375:Source\FilteringFunctions/arm_fir_q7.c ****     *pStateCurnt++ = *pState++;
 216              		.loc 1 375 0
 217 0106 FB6A     		ldr	r3, [r7, #44]
 218 0108 5A1C     		add	r2, r3, #1
 219 010a FA62     		str	r2, [r7, #44]
 220 010c FA6B     		ldr	r2, [r7, #60]
 221 010e 511C     		add	r1, r2, #1
 222 0110 F963     		str	r1, [r7, #60]
 223 0112 1278     		ldrb	r2, [r2]
 224 0114 1A70     		strb	r2, [r3]
 376:Source\FilteringFunctions/arm_fir_q7.c ****     i--;
 225              		.loc 1 376 0
 226 0116 7B6C     		ldr	r3, [r7, #68]
 227 0118 013B     		sub	r3, r3, #1
 228 011a 7B64     		str	r3, [r7, #68]
 229              	.L12:
 373:Source\FilteringFunctions/arm_fir_q7.c ****   {
 230              		.loc 1 373 0
 231 011c 7B6C     		ldr	r3, [r7, #68]
 232 011e 002B     		cmp	r3, #0
 233 0120 F1D1     		bne	.L13
 377:Source\FilteringFunctions/arm_fir_q7.c ****   }
 378:Source\FilteringFunctions/arm_fir_q7.c **** 
 379:Source\FilteringFunctions/arm_fir_q7.c **** #endif /*   #if defined (ARM_MATH_DSP) */
 380:Source\FilteringFunctions/arm_fir_q7.c **** 
 381:Source\FilteringFunctions/arm_fir_q7.c **** }
 234              		.loc 1 381 0
 235 0122 BD46     		mov	sp, r7
 236 0124 12B0     		add	sp, sp, #72
 237              		@ sp needed
 238 0126 80BD     		pop	{r7, pc}
 239              		.cfi_endproc
 240              	.LFE82:
 241              		.size	arm_fir_q7, .-arm_fir_q7
 242              		.text
 243              	.Letext0:
 244              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 245              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 246              		.section	.debug_info,"",%progbits
 247              	.Ldebug_info0:
 248 0000 C9020000 		.4byte	0x2c9
 249 0004 0400     		.2byte	0x4
 250 0006 00000000 		.4byte	.Ldebug_abbrev0
 251 000a 04       		.byte	0x4
 252 000b 01       		.uleb128 0x1
 253 000c 4A010000 		.4byte	.LASF38
 254 0010 01       		.byte	0x1
 255 0011 98000000 		.4byte	.LASF39
 256 0015 24000000 		.4byte	.LASF40
 257 0019 00000000 		.4byte	.Ldebug_ranges0+0
 258 001d 00000000 		.4byte	0
 259 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 25


 260 0025 02       		.uleb128 0x2
 261 0026 00000000 		.4byte	.LASF2
 262 002a 03       		.byte	0x3
 263 002b 1B       		.byte	0x1b
 264 002c 30000000 		.4byte	0x30
 265 0030 03       		.uleb128 0x3
 266 0031 01       		.byte	0x1
 267 0032 06       		.byte	0x6
 268 0033 6D020000 		.4byte	.LASF0
 269 0037 03       		.uleb128 0x3
 270 0038 01       		.byte	0x1
 271 0039 08       		.byte	0x8
 272 003a 83000000 		.4byte	.LASF1
 273 003e 02       		.uleb128 0x2
 274 003f 10000000 		.4byte	.LASF3
 275 0043 03       		.byte	0x3
 276 0044 29       		.byte	0x29
 277 0045 49000000 		.4byte	0x49
 278 0049 03       		.uleb128 0x3
 279 004a 02       		.byte	0x2
 280 004b 05       		.byte	0x5
 281 004c 25020000 		.4byte	.LASF4
 282 0050 02       		.uleb128 0x2
 283 0051 F0000000 		.4byte	.LASF5
 284 0055 03       		.byte	0x3
 285 0056 2B       		.byte	0x2b
 286 0057 5B000000 		.4byte	0x5b
 287 005b 03       		.uleb128 0x3
 288 005c 02       		.byte	0x2
 289 005d 07       		.byte	0x7
 290 005e D1000000 		.4byte	.LASF6
 291 0062 02       		.uleb128 0x2
 292 0063 1A000000 		.4byte	.LASF7
 293 0067 03       		.byte	0x3
 294 0068 3F       		.byte	0x3f
 295 0069 6D000000 		.4byte	0x6d
 296 006d 03       		.uleb128 0x3
 297 006e 04       		.byte	0x4
 298 006f 05       		.byte	0x5
 299 0070 58020000 		.4byte	.LASF8
 300 0074 02       		.uleb128 0x2
 301 0075 02010000 		.4byte	.LASF9
 302 0079 03       		.byte	0x3
 303 007a 41       		.byte	0x41
 304 007b 7F000000 		.4byte	0x7f
 305 007f 03       		.uleb128 0x3
 306 0080 04       		.byte	0x4
 307 0081 07       		.byte	0x7
 308 0082 BF000000 		.4byte	.LASF10
 309 0086 03       		.uleb128 0x3
 310 0087 08       		.byte	0x8
 311 0088 05       		.byte	0x5
 312 0089 08020000 		.4byte	.LASF11
 313 008d 03       		.uleb128 0x3
 314 008e 08       		.byte	0x8
 315 008f 07       		.byte	0x7
 316 0090 33010000 		.4byte	.LASF12
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 26


 317 0094 04       		.uleb128 0x4
 318 0095 04       		.byte	0x4
 319 0096 05       		.byte	0x5
 320 0097 696E7400 		.ascii	"int\000"
 321 009b 03       		.uleb128 0x3
 322 009c 04       		.byte	0x4
 323 009d 07       		.byte	0x7
 324 009e 12010000 		.4byte	.LASF13
 325 00a2 02       		.uleb128 0x2
 326 00a3 6A000000 		.4byte	.LASF14
 327 00a7 04       		.byte	0x4
 328 00a8 14       		.byte	0x14
 329 00a9 25000000 		.4byte	0x25
 330 00ad 02       		.uleb128 0x2
 331 00ae E8010000 		.4byte	.LASF15
 332 00b2 04       		.byte	0x4
 333 00b3 20       		.byte	0x20
 334 00b4 3E000000 		.4byte	0x3e
 335 00b8 02       		.uleb128 0x2
 336 00b9 37020000 		.4byte	.LASF16
 337 00bd 04       		.byte	0x4
 338 00be 21       		.byte	0x21
 339 00bf 50000000 		.4byte	0x50
 340 00c3 02       		.uleb128 0x2
 341 00c4 F7010000 		.4byte	.LASF17
 342 00c8 04       		.byte	0x4
 343 00c9 2C       		.byte	0x2c
 344 00ca 62000000 		.4byte	0x62
 345 00ce 02       		.uleb128 0x2
 346 00cf 4F020000 		.4byte	.LASF18
 347 00d3 04       		.byte	0x4
 348 00d4 2D       		.byte	0x2d
 349 00d5 74000000 		.4byte	0x74
 350 00d9 03       		.uleb128 0x3
 351 00da 04       		.byte	0x4
 352 00db 07       		.byte	0x7
 353 00dc FF010000 		.4byte	.LASF19
 354 00e0 03       		.uleb128 0x3
 355 00e1 01       		.byte	0x1
 356 00e2 08       		.byte	0x8
 357 00e3 20020000 		.4byte	.LASF20
 358 00e7 03       		.uleb128 0x3
 359 00e8 08       		.byte	0x8
 360 00e9 04       		.byte	0x4
 361 00ea FB000000 		.4byte	.LASF21
 362 00ee 03       		.uleb128 0x3
 363 00ef 04       		.byte	0x4
 364 00f0 04       		.byte	0x4
 365 00f1 77000000 		.4byte	.LASF22
 366 00f5 03       		.uleb128 0x3
 367 00f6 08       		.byte	0x8
 368 00f7 04       		.byte	0x4
 369 00f8 61020000 		.4byte	.LASF23
 370 00fc 05       		.uleb128 0x5
 371 00fd 0D010000 		.4byte	.LASF24
 372 0101 02       		.byte	0x2
 373 0102 9101     		.2byte	0x191
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 27


 374 0104 A2000000 		.4byte	0xa2
 375 0108 05       		.uleb128 0x5
 376 0109 71000000 		.4byte	.LASF25
 377 010d 02       		.byte	0x2
 378 010e 9601     		.2byte	0x196
 379 0110 AD000000 		.4byte	0xad
 380 0114 05       		.uleb128 0x5
 381 0115 7D000000 		.4byte	.LASF26
 382 0119 02       		.byte	0x2
 383 011a 9B01     		.2byte	0x19b
 384 011c C3000000 		.4byte	0xc3
 385 0120 06       		.uleb128 0x6
 386 0121 0C       		.byte	0xc
 387 0122 02       		.byte	0x2
 388 0123 4604     		.2byte	0x446
 389 0125 51010000 		.4byte	0x151
 390 0129 07       		.uleb128 0x7
 391 012a 2F020000 		.4byte	.LASF27
 392 012e 02       		.byte	0x2
 393 012f 4804     		.2byte	0x448
 394 0131 B8000000 		.4byte	0xb8
 395 0135 00       		.byte	0
 396 0136 07       		.uleb128 0x7
 397 0137 09000000 		.4byte	.LASF28
 398 013b 02       		.byte	0x2
 399 013c 4904     		.2byte	0x449
 400 013e 51010000 		.4byte	0x151
 401 0142 04       		.byte	0x4
 402 0143 07       		.uleb128 0x7
 403 0144 47020000 		.4byte	.LASF29
 404 0148 02       		.byte	0x2
 405 0149 4A04     		.2byte	0x44a
 406 014b 51010000 		.4byte	0x151
 407 014f 08       		.byte	0x8
 408 0150 00       		.byte	0
 409 0151 08       		.uleb128 0x8
 410 0152 04       		.byte	0x4
 411 0153 FC000000 		.4byte	0xfc
 412 0157 05       		.uleb128 0x5
 413 0158 1F010000 		.4byte	.LASF30
 414 015c 02       		.byte	0x2
 415 015d 4B04     		.2byte	0x44b
 416 015f 20010000 		.4byte	0x120
 417 0163 09       		.uleb128 0x9
 418 0164 F0010000 		.4byte	.LASF41
 419 0168 02       		.byte	0x2
 420 0169 B402     		.2byte	0x2b4
 421 016b 14010000 		.4byte	0x114
 422 016f 03       		.byte	0x3
 423 0170 AB010000 		.4byte	0x1ab
 424 0174 0A       		.uleb128 0xa
 425 0175 7800     		.ascii	"x\000"
 426 0177 02       		.byte	0x2
 427 0178 B502     		.2byte	0x2b5
 428 017a 14010000 		.4byte	0x114
 429 017e 0A       		.uleb128 0xa
 430 017f 7900     		.ascii	"y\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 28


 431 0181 02       		.byte	0x2
 432 0182 B602     		.2byte	0x2b6
 433 0184 CE000000 		.4byte	0xce
 434 0188 0B       		.uleb128 0xb
 435 0189 40020000 		.4byte	.LASF31
 436 018d 02       		.byte	0x2
 437 018e B802     		.2byte	0x2b8
 438 0190 C3000000 		.4byte	0xc3
 439 0194 0B       		.uleb128 0xb
 440 0195 E9000000 		.4byte	.LASF32
 441 0199 02       		.byte	0x2
 442 019a B802     		.2byte	0x2b8
 443 019c C3000000 		.4byte	0xc3
 444 01a0 0C       		.uleb128 0xc
 445 01a1 6900     		.ascii	"i\000"
 446 01a3 02       		.byte	0x2
 447 01a4 B902     		.2byte	0x2b9
 448 01a6 CE000000 		.4byte	0xce
 449 01aa 00       		.byte	0
 450 01ab 0D       		.uleb128 0xd
 451 01ac 7E020000 		.4byte	.LASF42
 452 01b0 01       		.byte	0x1
 453 01b1 39       		.byte	0x39
 454 01b2 00000000 		.4byte	.LFB82
 455 01b6 28010000 		.4byte	.LFE82-.LFB82
 456 01ba 01       		.uleb128 0x1
 457 01bb 9C       		.byte	0x9c
 458 01bc C1020000 		.4byte	0x2c1
 459 01c0 0E       		.uleb128 0xe
 460 01c1 5300     		.ascii	"S\000"
 461 01c3 01       		.byte	0x1
 462 01c4 3A       		.byte	0x3a
 463 01c5 C1020000 		.4byte	0x2c1
 464 01c9 03       		.uleb128 0x3
 465 01ca 91       		.byte	0x91
 466 01cb BC7F     		.sleb128 -68
 467 01cd 0F       		.uleb128 0xf
 468 01ce 79020000 		.4byte	.LASF33
 469 01d2 01       		.byte	0x1
 470 01d3 3B       		.byte	0x3b
 471 01d4 51010000 		.4byte	0x151
 472 01d8 03       		.uleb128 0x3
 473 01d9 91       		.byte	0x91
 474 01da B87F     		.sleb128 -72
 475 01dc 0F       		.uleb128 0xf
 476 01dd E4000000 		.4byte	.LASF34
 477 01e1 01       		.byte	0x1
 478 01e2 3C       		.byte	0x3c
 479 01e3 51010000 		.4byte	0x151
 480 01e7 03       		.uleb128 0x3
 481 01e8 91       		.byte	0x91
 482 01e9 B47F     		.sleb128 -76
 483 01eb 0F       		.uleb128 0xf
 484 01ec 16020000 		.4byte	.LASF35
 485 01f0 01       		.byte	0x1
 486 01f1 3D       		.byte	0x3d
 487 01f2 CE000000 		.4byte	0xce
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 29


 488 01f6 03       		.uleb128 0x3
 489 01f7 91       		.byte	0x91
 490 01f8 B07F     		.sleb128 -80
 491 01fa 10       		.uleb128 0x10
 492 01fb 2F020000 		.4byte	.LASF27
 493 01ff 01       		.byte	0x1
 494 0200 3501     		.2byte	0x135
 495 0202 CE000000 		.4byte	0xce
 496 0206 02       		.uleb128 0x2
 497 0207 91       		.byte	0x91
 498 0208 58       		.sleb128 -40
 499 0209 11       		.uleb128 0x11
 500 020a 6900     		.ascii	"i\000"
 501 020c 01       		.byte	0x1
 502 020d 3601     		.2byte	0x136
 503 020f CE000000 		.4byte	0xce
 504 0213 02       		.uleb128 0x2
 505 0214 91       		.byte	0x91
 506 0215 74       		.sleb128 -12
 507 0216 10       		.uleb128 0x10
 508 0217 91000000 		.4byte	.LASF36
 509 021b 01       		.byte	0x1
 510 021c 3601     		.2byte	0x136
 511 021e CE000000 		.4byte	0xce
 512 0222 02       		.uleb128 0x2
 513 0223 91       		.byte	0x91
 514 0224 70       		.sleb128 -16
 515 0225 10       		.uleb128 0x10
 516 0226 09000000 		.4byte	.LASF28
 517 022a 01       		.byte	0x1
 518 022b 3701     		.2byte	0x137
 519 022d 51010000 		.4byte	0x151
 520 0231 02       		.uleb128 0x2
 521 0232 91       		.byte	0x91
 522 0233 6C       		.sleb128 -20
 523 0234 10       		.uleb128 0x10
 524 0235 47020000 		.4byte	.LASF29
 525 0239 01       		.byte	0x1
 526 023a 3801     		.2byte	0x138
 527 023c 51010000 		.4byte	0x151
 528 0240 02       		.uleb128 0x2
 529 0241 91       		.byte	0x91
 530 0242 54       		.sleb128 -44
 531 0243 11       		.uleb128 0x11
 532 0244 707800   		.ascii	"px\000"
 533 0247 01       		.byte	0x1
 534 0248 3901     		.2byte	0x139
 535 024a 51010000 		.4byte	0x151
 536 024e 02       		.uleb128 0x2
 537 024f 91       		.byte	0x91
 538 0250 68       		.sleb128 -24
 539 0251 11       		.uleb128 0x11
 540 0252 706200   		.ascii	"pb\000"
 541 0255 01       		.byte	0x1
 542 0256 3901     		.2byte	0x139
 543 0258 51010000 		.4byte	0x151
 544 025c 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 30


 545 025d 91       		.byte	0x91
 546 025e 64       		.sleb128 -28
 547 025f 11       		.uleb128 0x11
 548 0260 61636300 		.ascii	"acc\000"
 549 0264 01       		.byte	0x1
 550 0265 3A01     		.2byte	0x13a
 551 0267 14010000 		.4byte	0x114
 552 026b 02       		.uleb128 0x2
 553 026c 91       		.byte	0x91
 554 026d 60       		.sleb128 -32
 555 026e 10       		.uleb128 0x10
 556 026f DC010000 		.4byte	.LASF37
 557 0273 01       		.byte	0x1
 558 0274 3B01     		.2byte	0x13b
 559 0276 51010000 		.4byte	0x151
 560 027a 02       		.uleb128 0x2
 561 027b 91       		.byte	0x91
 562 027c 5C       		.sleb128 -36
 563 027d 12       		.uleb128 0x12
 564 027e 63010000 		.4byte	0x163
 565 0282 90000000 		.4byte	.LBB4
 566 0286 52000000 		.4byte	.LBE4-.LBB4
 567 028a 01       		.byte	0x1
 568 028b 5F01     		.2byte	0x15f
 569 028d 13       		.uleb128 0x13
 570 028e 7E010000 		.4byte	0x17e
 571 0292 02       		.uleb128 0x2
 572 0293 91       		.byte	0x91
 573 0294 4C       		.sleb128 -52
 574 0295 13       		.uleb128 0x13
 575 0296 74010000 		.4byte	0x174
 576 029a 02       		.uleb128 0x2
 577 029b 91       		.byte	0x91
 578 029c 50       		.sleb128 -48
 579 029d 14       		.uleb128 0x14
 580 029e 90000000 		.4byte	.LBB5
 581 02a2 52000000 		.4byte	.LBE5-.LBB5
 582 02a6 15       		.uleb128 0x15
 583 02a7 88010000 		.4byte	0x188
 584 02ab 02       		.uleb128 0x2
 585 02ac 91       		.byte	0x91
 586 02ad 48       		.sleb128 -56
 587 02ae 15       		.uleb128 0x15
 588 02af 94010000 		.4byte	0x194
 589 02b3 02       		.uleb128 0x2
 590 02b4 91       		.byte	0x91
 591 02b5 40       		.sleb128 -64
 592 02b6 15       		.uleb128 0x15
 593 02b7 A0010000 		.4byte	0x1a0
 594 02bb 02       		.uleb128 0x2
 595 02bc 91       		.byte	0x91
 596 02bd 44       		.sleb128 -60
 597 02be 00       		.byte	0
 598 02bf 00       		.byte	0
 599 02c0 00       		.byte	0
 600 02c1 08       		.uleb128 0x8
 601 02c2 04       		.byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 31


 602 02c3 C7020000 		.4byte	0x2c7
 603 02c7 16       		.uleb128 0x16
 604 02c8 57010000 		.4byte	0x157
 605 02cc 00       		.byte	0
 606              		.section	.debug_abbrev,"",%progbits
 607              	.Ldebug_abbrev0:
 608 0000 01       		.uleb128 0x1
 609 0001 11       		.uleb128 0x11
 610 0002 01       		.byte	0x1
 611 0003 25       		.uleb128 0x25
 612 0004 0E       		.uleb128 0xe
 613 0005 13       		.uleb128 0x13
 614 0006 0B       		.uleb128 0xb
 615 0007 03       		.uleb128 0x3
 616 0008 0E       		.uleb128 0xe
 617 0009 1B       		.uleb128 0x1b
 618 000a 0E       		.uleb128 0xe
 619 000b 55       		.uleb128 0x55
 620 000c 17       		.uleb128 0x17
 621 000d 11       		.uleb128 0x11
 622 000e 01       		.uleb128 0x1
 623 000f 10       		.uleb128 0x10
 624 0010 17       		.uleb128 0x17
 625 0011 00       		.byte	0
 626 0012 00       		.byte	0
 627 0013 02       		.uleb128 0x2
 628 0014 16       		.uleb128 0x16
 629 0015 00       		.byte	0
 630 0016 03       		.uleb128 0x3
 631 0017 0E       		.uleb128 0xe
 632 0018 3A       		.uleb128 0x3a
 633 0019 0B       		.uleb128 0xb
 634 001a 3B       		.uleb128 0x3b
 635 001b 0B       		.uleb128 0xb
 636 001c 49       		.uleb128 0x49
 637 001d 13       		.uleb128 0x13
 638 001e 00       		.byte	0
 639 001f 00       		.byte	0
 640 0020 03       		.uleb128 0x3
 641 0021 24       		.uleb128 0x24
 642 0022 00       		.byte	0
 643 0023 0B       		.uleb128 0xb
 644 0024 0B       		.uleb128 0xb
 645 0025 3E       		.uleb128 0x3e
 646 0026 0B       		.uleb128 0xb
 647 0027 03       		.uleb128 0x3
 648 0028 0E       		.uleb128 0xe
 649 0029 00       		.byte	0
 650 002a 00       		.byte	0
 651 002b 04       		.uleb128 0x4
 652 002c 24       		.uleb128 0x24
 653 002d 00       		.byte	0
 654 002e 0B       		.uleb128 0xb
 655 002f 0B       		.uleb128 0xb
 656 0030 3E       		.uleb128 0x3e
 657 0031 0B       		.uleb128 0xb
 658 0032 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 32


 659 0033 08       		.uleb128 0x8
 660 0034 00       		.byte	0
 661 0035 00       		.byte	0
 662 0036 05       		.uleb128 0x5
 663 0037 16       		.uleb128 0x16
 664 0038 00       		.byte	0
 665 0039 03       		.uleb128 0x3
 666 003a 0E       		.uleb128 0xe
 667 003b 3A       		.uleb128 0x3a
 668 003c 0B       		.uleb128 0xb
 669 003d 3B       		.uleb128 0x3b
 670 003e 05       		.uleb128 0x5
 671 003f 49       		.uleb128 0x49
 672 0040 13       		.uleb128 0x13
 673 0041 00       		.byte	0
 674 0042 00       		.byte	0
 675 0043 06       		.uleb128 0x6
 676 0044 13       		.uleb128 0x13
 677 0045 01       		.byte	0x1
 678 0046 0B       		.uleb128 0xb
 679 0047 0B       		.uleb128 0xb
 680 0048 3A       		.uleb128 0x3a
 681 0049 0B       		.uleb128 0xb
 682 004a 3B       		.uleb128 0x3b
 683 004b 05       		.uleb128 0x5
 684 004c 01       		.uleb128 0x1
 685 004d 13       		.uleb128 0x13
 686 004e 00       		.byte	0
 687 004f 00       		.byte	0
 688 0050 07       		.uleb128 0x7
 689 0051 0D       		.uleb128 0xd
 690 0052 00       		.byte	0
 691 0053 03       		.uleb128 0x3
 692 0054 0E       		.uleb128 0xe
 693 0055 3A       		.uleb128 0x3a
 694 0056 0B       		.uleb128 0xb
 695 0057 3B       		.uleb128 0x3b
 696 0058 05       		.uleb128 0x5
 697 0059 49       		.uleb128 0x49
 698 005a 13       		.uleb128 0x13
 699 005b 38       		.uleb128 0x38
 700 005c 0B       		.uleb128 0xb
 701 005d 00       		.byte	0
 702 005e 00       		.byte	0
 703 005f 08       		.uleb128 0x8
 704 0060 0F       		.uleb128 0xf
 705 0061 00       		.byte	0
 706 0062 0B       		.uleb128 0xb
 707 0063 0B       		.uleb128 0xb
 708 0064 49       		.uleb128 0x49
 709 0065 13       		.uleb128 0x13
 710 0066 00       		.byte	0
 711 0067 00       		.byte	0
 712 0068 09       		.uleb128 0x9
 713 0069 2E       		.uleb128 0x2e
 714 006a 01       		.byte	0x1
 715 006b 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 33


 716 006c 0E       		.uleb128 0xe
 717 006d 3A       		.uleb128 0x3a
 718 006e 0B       		.uleb128 0xb
 719 006f 3B       		.uleb128 0x3b
 720 0070 05       		.uleb128 0x5
 721 0071 27       		.uleb128 0x27
 722 0072 19       		.uleb128 0x19
 723 0073 49       		.uleb128 0x49
 724 0074 13       		.uleb128 0x13
 725 0075 20       		.uleb128 0x20
 726 0076 0B       		.uleb128 0xb
 727 0077 01       		.uleb128 0x1
 728 0078 13       		.uleb128 0x13
 729 0079 00       		.byte	0
 730 007a 00       		.byte	0
 731 007b 0A       		.uleb128 0xa
 732 007c 05       		.uleb128 0x5
 733 007d 00       		.byte	0
 734 007e 03       		.uleb128 0x3
 735 007f 08       		.uleb128 0x8
 736 0080 3A       		.uleb128 0x3a
 737 0081 0B       		.uleb128 0xb
 738 0082 3B       		.uleb128 0x3b
 739 0083 05       		.uleb128 0x5
 740 0084 49       		.uleb128 0x49
 741 0085 13       		.uleb128 0x13
 742 0086 00       		.byte	0
 743 0087 00       		.byte	0
 744 0088 0B       		.uleb128 0xb
 745 0089 34       		.uleb128 0x34
 746 008a 00       		.byte	0
 747 008b 03       		.uleb128 0x3
 748 008c 0E       		.uleb128 0xe
 749 008d 3A       		.uleb128 0x3a
 750 008e 0B       		.uleb128 0xb
 751 008f 3B       		.uleb128 0x3b
 752 0090 05       		.uleb128 0x5
 753 0091 49       		.uleb128 0x49
 754 0092 13       		.uleb128 0x13
 755 0093 00       		.byte	0
 756 0094 00       		.byte	0
 757 0095 0C       		.uleb128 0xc
 758 0096 34       		.uleb128 0x34
 759 0097 00       		.byte	0
 760 0098 03       		.uleb128 0x3
 761 0099 08       		.uleb128 0x8
 762 009a 3A       		.uleb128 0x3a
 763 009b 0B       		.uleb128 0xb
 764 009c 3B       		.uleb128 0x3b
 765 009d 05       		.uleb128 0x5
 766 009e 49       		.uleb128 0x49
 767 009f 13       		.uleb128 0x13
 768 00a0 00       		.byte	0
 769 00a1 00       		.byte	0
 770 00a2 0D       		.uleb128 0xd
 771 00a3 2E       		.uleb128 0x2e
 772 00a4 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 34


 773 00a5 3F       		.uleb128 0x3f
 774 00a6 19       		.uleb128 0x19
 775 00a7 03       		.uleb128 0x3
 776 00a8 0E       		.uleb128 0xe
 777 00a9 3A       		.uleb128 0x3a
 778 00aa 0B       		.uleb128 0xb
 779 00ab 3B       		.uleb128 0x3b
 780 00ac 0B       		.uleb128 0xb
 781 00ad 27       		.uleb128 0x27
 782 00ae 19       		.uleb128 0x19
 783 00af 11       		.uleb128 0x11
 784 00b0 01       		.uleb128 0x1
 785 00b1 12       		.uleb128 0x12
 786 00b2 06       		.uleb128 0x6
 787 00b3 40       		.uleb128 0x40
 788 00b4 18       		.uleb128 0x18
 789 00b5 9742     		.uleb128 0x2117
 790 00b7 19       		.uleb128 0x19
 791 00b8 01       		.uleb128 0x1
 792 00b9 13       		.uleb128 0x13
 793 00ba 00       		.byte	0
 794 00bb 00       		.byte	0
 795 00bc 0E       		.uleb128 0xe
 796 00bd 05       		.uleb128 0x5
 797 00be 00       		.byte	0
 798 00bf 03       		.uleb128 0x3
 799 00c0 08       		.uleb128 0x8
 800 00c1 3A       		.uleb128 0x3a
 801 00c2 0B       		.uleb128 0xb
 802 00c3 3B       		.uleb128 0x3b
 803 00c4 0B       		.uleb128 0xb
 804 00c5 49       		.uleb128 0x49
 805 00c6 13       		.uleb128 0x13
 806 00c7 02       		.uleb128 0x2
 807 00c8 18       		.uleb128 0x18
 808 00c9 00       		.byte	0
 809 00ca 00       		.byte	0
 810 00cb 0F       		.uleb128 0xf
 811 00cc 05       		.uleb128 0x5
 812 00cd 00       		.byte	0
 813 00ce 03       		.uleb128 0x3
 814 00cf 0E       		.uleb128 0xe
 815 00d0 3A       		.uleb128 0x3a
 816 00d1 0B       		.uleb128 0xb
 817 00d2 3B       		.uleb128 0x3b
 818 00d3 0B       		.uleb128 0xb
 819 00d4 49       		.uleb128 0x49
 820 00d5 13       		.uleb128 0x13
 821 00d6 02       		.uleb128 0x2
 822 00d7 18       		.uleb128 0x18
 823 00d8 00       		.byte	0
 824 00d9 00       		.byte	0
 825 00da 10       		.uleb128 0x10
 826 00db 34       		.uleb128 0x34
 827 00dc 00       		.byte	0
 828 00dd 03       		.uleb128 0x3
 829 00de 0E       		.uleb128 0xe
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 35


 830 00df 3A       		.uleb128 0x3a
 831 00e0 0B       		.uleb128 0xb
 832 00e1 3B       		.uleb128 0x3b
 833 00e2 05       		.uleb128 0x5
 834 00e3 49       		.uleb128 0x49
 835 00e4 13       		.uleb128 0x13
 836 00e5 02       		.uleb128 0x2
 837 00e6 18       		.uleb128 0x18
 838 00e7 00       		.byte	0
 839 00e8 00       		.byte	0
 840 00e9 11       		.uleb128 0x11
 841 00ea 34       		.uleb128 0x34
 842 00eb 00       		.byte	0
 843 00ec 03       		.uleb128 0x3
 844 00ed 08       		.uleb128 0x8
 845 00ee 3A       		.uleb128 0x3a
 846 00ef 0B       		.uleb128 0xb
 847 00f0 3B       		.uleb128 0x3b
 848 00f1 05       		.uleb128 0x5
 849 00f2 49       		.uleb128 0x49
 850 00f3 13       		.uleb128 0x13
 851 00f4 02       		.uleb128 0x2
 852 00f5 18       		.uleb128 0x18
 853 00f6 00       		.byte	0
 854 00f7 00       		.byte	0
 855 00f8 12       		.uleb128 0x12
 856 00f9 1D       		.uleb128 0x1d
 857 00fa 01       		.byte	0x1
 858 00fb 31       		.uleb128 0x31
 859 00fc 13       		.uleb128 0x13
 860 00fd 11       		.uleb128 0x11
 861 00fe 01       		.uleb128 0x1
 862 00ff 12       		.uleb128 0x12
 863 0100 06       		.uleb128 0x6
 864 0101 58       		.uleb128 0x58
 865 0102 0B       		.uleb128 0xb
 866 0103 59       		.uleb128 0x59
 867 0104 05       		.uleb128 0x5
 868 0105 00       		.byte	0
 869 0106 00       		.byte	0
 870 0107 13       		.uleb128 0x13
 871 0108 05       		.uleb128 0x5
 872 0109 00       		.byte	0
 873 010a 31       		.uleb128 0x31
 874 010b 13       		.uleb128 0x13
 875 010c 02       		.uleb128 0x2
 876 010d 18       		.uleb128 0x18
 877 010e 00       		.byte	0
 878 010f 00       		.byte	0
 879 0110 14       		.uleb128 0x14
 880 0111 0B       		.uleb128 0xb
 881 0112 01       		.byte	0x1
 882 0113 11       		.uleb128 0x11
 883 0114 01       		.uleb128 0x1
 884 0115 12       		.uleb128 0x12
 885 0116 06       		.uleb128 0x6
 886 0117 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 36


 887 0118 00       		.byte	0
 888 0119 15       		.uleb128 0x15
 889 011a 34       		.uleb128 0x34
 890 011b 00       		.byte	0
 891 011c 31       		.uleb128 0x31
 892 011d 13       		.uleb128 0x13
 893 011e 02       		.uleb128 0x2
 894 011f 18       		.uleb128 0x18
 895 0120 00       		.byte	0
 896 0121 00       		.byte	0
 897 0122 16       		.uleb128 0x16
 898 0123 26       		.uleb128 0x26
 899 0124 00       		.byte	0
 900 0125 49       		.uleb128 0x49
 901 0126 13       		.uleb128 0x13
 902 0127 00       		.byte	0
 903 0128 00       		.byte	0
 904 0129 00       		.byte	0
 905              		.section	.debug_aranges,"",%progbits
 906 0000 1C000000 		.4byte	0x1c
 907 0004 0200     		.2byte	0x2
 908 0006 00000000 		.4byte	.Ldebug_info0
 909 000a 04       		.byte	0x4
 910 000b 00       		.byte	0
 911 000c 0000     		.2byte	0
 912 000e 0000     		.2byte	0
 913 0010 00000000 		.4byte	.LFB82
 914 0014 28010000 		.4byte	.LFE82-.LFB82
 915 0018 00000000 		.4byte	0
 916 001c 00000000 		.4byte	0
 917              		.section	.debug_ranges,"",%progbits
 918              	.Ldebug_ranges0:
 919 0000 00000000 		.4byte	.LFB82
 920 0004 28010000 		.4byte	.LFE82
 921 0008 00000000 		.4byte	0
 922 000c 00000000 		.4byte	0
 923              		.section	.debug_line,"",%progbits
 924              	.Ldebug_line0:
 925 0000 A0010000 		.section	.debug_str,"MS",%progbits,1
 925      02004D01 
 925      00000201 
 925      FB0E0D00 
 925      01010101 
 926              	.LASF2:
 927 0000 5F5F696E 		.ascii	"__int8_t\000"
 927      74385F74 
 927      00
 928              	.LASF28:
 929 0009 70537461 		.ascii	"pState\000"
 929      746500
 930              	.LASF3:
 931 0010 5F5F696E 		.ascii	"__int16_t\000"
 931      7431365F 
 931      7400
 932              	.LASF7:
 933 001a 5F5F696E 		.ascii	"__int32_t\000"
 933      7433325F 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 37


 933      7400
 934              	.LASF40:
 935 0024 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 935      73657273 
 935      5C666E65 
 935      7665735C 
 935      446F6375 
 936 0051 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 936      655F7370 
 936      6565645F 
 936      73656E73 
 936      6F722E63 
 937              	.LASF14:
 938 006a 696E7438 		.ascii	"int8_t\000"
 938      5F7400
 939              	.LASF25:
 940 0071 7131355F 		.ascii	"q15_t\000"
 940      7400
 941              	.LASF22:
 942 0077 666C6F61 		.ascii	"float\000"
 942      7400
 943              	.LASF26:
 944 007d 7133315F 		.ascii	"q31_t\000"
 944      7400
 945              	.LASF1:
 946 0083 756E7369 		.ascii	"unsigned char\000"
 946      676E6564 
 946      20636861 
 946      7200
 947              	.LASF36:
 948 0091 626C6B43 		.ascii	"blkCnt\000"
 948      6E7400
 949              	.LASF39:
 950 0098 536F7572 		.ascii	"Source\\FilteringFunctions\\arm_fir_q7.c\000"
 950      63655C46 
 950      696C7465 
 950      72696E67 
 950      46756E63 
 951              	.LASF10:
 952 00bf 6C6F6E67 		.ascii	"long unsigned int\000"
 952      20756E73 
 952      69676E65 
 952      6420696E 
 952      7400
 953              	.LASF6:
 954 00d1 73686F72 		.ascii	"short unsigned int\000"
 954      7420756E 
 954      7369676E 
 954      65642069 
 954      6E7400
 955              	.LASF34:
 956 00e4 70447374 		.ascii	"pDst\000"
 956      00
 957              	.LASF32:
 958 00e9 6E65674D 		.ascii	"negMin\000"
 958      696E00
 959              	.LASF5:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 38


 960 00f0 5F5F7569 		.ascii	"__uint16_t\000"
 960      6E743136 
 960      5F7400
 961              	.LASF21:
 962 00fb 646F7562 		.ascii	"double\000"
 962      6C6500
 963              	.LASF9:
 964 0102 5F5F7569 		.ascii	"__uint32_t\000"
 964      6E743332 
 964      5F7400
 965              	.LASF24:
 966 010d 71375F74 		.ascii	"q7_t\000"
 966      00
 967              	.LASF13:
 968 0112 756E7369 		.ascii	"unsigned int\000"
 968      676E6564 
 968      20696E74 
 968      00
 969              	.LASF30:
 970 011f 61726D5F 		.ascii	"arm_fir_instance_q7\000"
 970      6669725F 
 970      696E7374 
 970      616E6365 
 970      5F713700 
 971              	.LASF12:
 972 0133 6C6F6E67 		.ascii	"long long unsigned int\000"
 972      206C6F6E 
 972      6720756E 
 972      7369676E 
 972      65642069 
 973              	.LASF38:
 974 014a 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 974      4320342E 
 974      392E3320 
 974      32303135 
 974      30333033 
 975 017d 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 975      20726576 
 975      6973696F 
 975      6E203232 
 975      31323230 
 976 01b0 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 976      30202D66 
 976      66756E63 
 976      74696F6E 
 976      2D736563 
 977              	.LASF37:
 978 01dc 70537461 		.ascii	"pStateCurnt\000"
 978      74654375 
 978      726E7400 
 979              	.LASF15:
 980 01e8 696E7431 		.ascii	"int16_t\000"
 980      365F7400 
 981              	.LASF41:
 982 01f0 5F5F5353 		.ascii	"__SSAT\000"
 982      415400
 983              	.LASF17:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 39


 984 01f7 696E7433 		.ascii	"int32_t\000"
 984      325F7400 
 985              	.LASF19:
 986 01ff 73697A65 		.ascii	"sizetype\000"
 986      74797065 
 986      00
 987              	.LASF11:
 988 0208 6C6F6E67 		.ascii	"long long int\000"
 988      206C6F6E 
 988      6720696E 
 988      7400
 989              	.LASF35:
 990 0216 626C6F63 		.ascii	"blockSize\000"
 990      6B53697A 
 990      6500
 991              	.LASF20:
 992 0220 63686172 		.ascii	"char\000"
 992      00
 993              	.LASF4:
 994 0225 73686F72 		.ascii	"short int\000"
 994      7420696E 
 994      7400
 995              	.LASF27:
 996 022f 6E756D54 		.ascii	"numTaps\000"
 996      61707300 
 997              	.LASF16:
 998 0237 75696E74 		.ascii	"uint16_t\000"
 998      31365F74 
 998      00
 999              	.LASF31:
 1000 0240 706F734D 		.ascii	"posMax\000"
 1000      617800
 1001              	.LASF29:
 1002 0247 70436F65 		.ascii	"pCoeffs\000"
 1002      66667300 
 1003              	.LASF18:
 1004 024f 75696E74 		.ascii	"uint32_t\000"
 1004      33325F74 
 1004      00
 1005              	.LASF8:
 1006 0258 6C6F6E67 		.ascii	"long int\000"
 1006      20696E74 
 1006      00
 1007              	.LASF23:
 1008 0261 6C6F6E67 		.ascii	"long double\000"
 1008      20646F75 
 1008      626C6500 
 1009              	.LASF0:
 1010 026d 7369676E 		.ascii	"signed char\000"
 1010      65642063 
 1010      68617200 
 1011              	.LASF33:
 1012 0279 70537263 		.ascii	"pSrc\000"
 1012      00
 1013              	.LASF42:
 1014 027e 61726D5F 		.ascii	"arm_fir_q7\000"
 1014      6669725F 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccwdqe5r.s 			page 40


 1014      713700
 1015              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
