ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_float_to_q31.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_fmul
  18              		.global	__aeabi_f2lz
  19              		.section	.text.arm_float_to_q31,"ax",%progbits
  20              		.align	2
  21              		.global	arm_float_to_q31
  22              		.code	16
  23              		.thumb_func
  24              		.type	arm_float_to_q31, %function
  25              	arm_float_to_q31:
  26              	.LFB82:
  27              		.file 1 "Source\\SupportFunctions\\arm_float_to_q31.c"
   1:Source\SupportFunctions/arm_float_to_q31.c **** /* ----------------------------------------------------------------------
   2:Source\SupportFunctions/arm_float_to_q31.c ****  * Project:      CMSIS DSP Library
   3:Source\SupportFunctions/arm_float_to_q31.c ****  * Title:        arm_float_to_q31.c
   4:Source\SupportFunctions/arm_float_to_q31.c ****  * Description:  Converts the elements of the floating-point vector to Q31 vector
   5:Source\SupportFunctions/arm_float_to_q31.c ****  *
   6:Source\SupportFunctions/arm_float_to_q31.c ****  * $Date:        27. January 2017
   7:Source\SupportFunctions/arm_float_to_q31.c ****  * $Revision:    V.1.5.1
   8:Source\SupportFunctions/arm_float_to_q31.c ****  *
   9:Source\SupportFunctions/arm_float_to_q31.c ****  * Target Processor: Cortex-M cores
  10:Source\SupportFunctions/arm_float_to_q31.c ****  * -------------------------------------------------------------------- */
  11:Source\SupportFunctions/arm_float_to_q31.c **** /*
  12:Source\SupportFunctions/arm_float_to_q31.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\SupportFunctions/arm_float_to_q31.c ****  *
  14:Source\SupportFunctions/arm_float_to_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\SupportFunctions/arm_float_to_q31.c ****  *
  16:Source\SupportFunctions/arm_float_to_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\SupportFunctions/arm_float_to_q31.c ****  * not use this file except in compliance with the License.
  18:Source\SupportFunctions/arm_float_to_q31.c ****  * You may obtain a copy of the License at
  19:Source\SupportFunctions/arm_float_to_q31.c ****  *
  20:Source\SupportFunctions/arm_float_to_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\SupportFunctions/arm_float_to_q31.c ****  *
  22:Source\SupportFunctions/arm_float_to_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\SupportFunctions/arm_float_to_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\SupportFunctions/arm_float_to_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\SupportFunctions/arm_float_to_q31.c ****  * See the License for the specific language governing permissions and
  26:Source\SupportFunctions/arm_float_to_q31.c ****  * limitations under the License.
  27:Source\SupportFunctions/arm_float_to_q31.c ****  */
  28:Source\SupportFunctions/arm_float_to_q31.c **** 
  29:Source\SupportFunctions/arm_float_to_q31.c **** #include "arm_math.h"
  30:Source\SupportFunctions/arm_float_to_q31.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 2


  31:Source\SupportFunctions/arm_float_to_q31.c **** /**
  32:Source\SupportFunctions/arm_float_to_q31.c ****  * @ingroup groupSupport
  33:Source\SupportFunctions/arm_float_to_q31.c ****  */
  34:Source\SupportFunctions/arm_float_to_q31.c **** 
  35:Source\SupportFunctions/arm_float_to_q31.c **** /**
  36:Source\SupportFunctions/arm_float_to_q31.c ****  * @defgroup float_to_x  Convert 32-bit floating point value
  37:Source\SupportFunctions/arm_float_to_q31.c ****  */
  38:Source\SupportFunctions/arm_float_to_q31.c **** 
  39:Source\SupportFunctions/arm_float_to_q31.c **** /**
  40:Source\SupportFunctions/arm_float_to_q31.c ****  * @addtogroup float_to_x
  41:Source\SupportFunctions/arm_float_to_q31.c ****  * @{
  42:Source\SupportFunctions/arm_float_to_q31.c ****  */
  43:Source\SupportFunctions/arm_float_to_q31.c **** 
  44:Source\SupportFunctions/arm_float_to_q31.c **** /**
  45:Source\SupportFunctions/arm_float_to_q31.c ****  * @brief Converts the elements of the floating-point vector to Q31 vector.
  46:Source\SupportFunctions/arm_float_to_q31.c ****  * @param[in]       *pSrc points to the floating-point input vector
  47:Source\SupportFunctions/arm_float_to_q31.c ****  * @param[out]      *pDst points to the Q31 output vector
  48:Source\SupportFunctions/arm_float_to_q31.c ****  * @param[in]       blockSize length of the input vector
  49:Source\SupportFunctions/arm_float_to_q31.c ****  * @return none.
  50:Source\SupportFunctions/arm_float_to_q31.c ****  *
  51:Source\SupportFunctions/arm_float_to_q31.c ****  *\par Description:
  52:Source\SupportFunctions/arm_float_to_q31.c ****  * \par
  53:Source\SupportFunctions/arm_float_to_q31.c ****  * The equation used for the conversion process is:
  54:Source\SupportFunctions/arm_float_to_q31.c ****  *
  55:Source\SupportFunctions/arm_float_to_q31.c ****  * <pre>
  56:Source\SupportFunctions/arm_float_to_q31.c ****  * 	pDst[n] = (q31_t)(pSrc[n] * 2147483648);   0 <= n < blockSize.
  57:Source\SupportFunctions/arm_float_to_q31.c ****  * </pre>
  58:Source\SupportFunctions/arm_float_to_q31.c ****  * <b>Scaling and Overflow Behavior:</b>
  59:Source\SupportFunctions/arm_float_to_q31.c ****  * \par
  60:Source\SupportFunctions/arm_float_to_q31.c ****  * The function uses saturating arithmetic.
  61:Source\SupportFunctions/arm_float_to_q31.c ****  * Results outside of the allowable Q31 range[0x80000000 0x7FFFFFFF] will be saturated.
  62:Source\SupportFunctions/arm_float_to_q31.c ****  *
  63:Source\SupportFunctions/arm_float_to_q31.c ****  * \note In order to apply rounding, the library should be rebuilt with the ROUNDING macro
  64:Source\SupportFunctions/arm_float_to_q31.c ****  * defined in the preprocessor section of project options.
  65:Source\SupportFunctions/arm_float_to_q31.c ****  */
  66:Source\SupportFunctions/arm_float_to_q31.c **** 
  67:Source\SupportFunctions/arm_float_to_q31.c **** 
  68:Source\SupportFunctions/arm_float_to_q31.c **** void arm_float_to_q31(
  69:Source\SupportFunctions/arm_float_to_q31.c ****   float32_t * pSrc,
  70:Source\SupportFunctions/arm_float_to_q31.c ****   q31_t * pDst,
  71:Source\SupportFunctions/arm_float_to_q31.c ****   uint32_t blockSize)
  72:Source\SupportFunctions/arm_float_to_q31.c **** {
  28              		.loc 1 72 0
  29              		.cfi_startproc
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 8BB0     		sub	sp, sp, #44
  38              		.cfi_def_cfa_offset 64
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 7861     		str	r0, [r7, #20]
  42 0008 3961     		str	r1, [r7, #16]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 3


  43 000a FA60     		str	r2, [r7, #12]
  73:Source\SupportFunctions/arm_float_to_q31.c ****   float32_t *pIn = pSrc;                         /* Src pointer */
  44              		.loc 1 73 0
  45 000c 7B69     		ldr	r3, [r7, #20]
  46 000e 7B62     		str	r3, [r7, #36]
  74:Source\SupportFunctions/arm_float_to_q31.c ****   uint32_t blkCnt;                               /* loop counter */
  75:Source\SupportFunctions/arm_float_to_q31.c **** 
  76:Source\SupportFunctions/arm_float_to_q31.c **** #ifdef ARM_MATH_ROUNDING
  77:Source\SupportFunctions/arm_float_to_q31.c **** 
  78:Source\SupportFunctions/arm_float_to_q31.c ****   float32_t in;
  79:Source\SupportFunctions/arm_float_to_q31.c **** 
  80:Source\SupportFunctions/arm_float_to_q31.c **** #endif /*      #ifdef ARM_MATH_ROUNDING        */
  81:Source\SupportFunctions/arm_float_to_q31.c **** 
  82:Source\SupportFunctions/arm_float_to_q31.c **** #if defined (ARM_MATH_DSP)
  83:Source\SupportFunctions/arm_float_to_q31.c **** 
  84:Source\SupportFunctions/arm_float_to_q31.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  85:Source\SupportFunctions/arm_float_to_q31.c **** 
  86:Source\SupportFunctions/arm_float_to_q31.c ****   /*loop Unrolling */
  87:Source\SupportFunctions/arm_float_to_q31.c ****   blkCnt = blockSize >> 2u;
  88:Source\SupportFunctions/arm_float_to_q31.c **** 
  89:Source\SupportFunctions/arm_float_to_q31.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  90:Source\SupportFunctions/arm_float_to_q31.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  91:Source\SupportFunctions/arm_float_to_q31.c ****   while (blkCnt > 0u)
  92:Source\SupportFunctions/arm_float_to_q31.c ****   {
  93:Source\SupportFunctions/arm_float_to_q31.c **** 
  94:Source\SupportFunctions/arm_float_to_q31.c **** #ifdef ARM_MATH_ROUNDING
  95:Source\SupportFunctions/arm_float_to_q31.c **** 
  96:Source\SupportFunctions/arm_float_to_q31.c ****     /* C = A * 32768 */
  97:Source\SupportFunctions/arm_float_to_q31.c ****     /* convert from float to Q31 and then store the results in the destination buffer */
  98:Source\SupportFunctions/arm_float_to_q31.c ****     in = *pIn++;
  99:Source\SupportFunctions/arm_float_to_q31.c ****     in = (in * 2147483648.0f);
 100:Source\SupportFunctions/arm_float_to_q31.c ****     in += in > 0.0f ? 0.5f : -0.5f;
 101:Source\SupportFunctions/arm_float_to_q31.c ****     *pDst++ = clip_q63_to_q31((q63_t) (in));
 102:Source\SupportFunctions/arm_float_to_q31.c **** 
 103:Source\SupportFunctions/arm_float_to_q31.c ****     in = *pIn++;
 104:Source\SupportFunctions/arm_float_to_q31.c ****     in = (in * 2147483648.0f);
 105:Source\SupportFunctions/arm_float_to_q31.c ****     in += in > 0.0f ? 0.5f : -0.5f;
 106:Source\SupportFunctions/arm_float_to_q31.c ****     *pDst++ = clip_q63_to_q31((q63_t) (in));
 107:Source\SupportFunctions/arm_float_to_q31.c **** 
 108:Source\SupportFunctions/arm_float_to_q31.c ****     in = *pIn++;
 109:Source\SupportFunctions/arm_float_to_q31.c ****     in = (in * 2147483648.0f);
 110:Source\SupportFunctions/arm_float_to_q31.c ****     in += in > 0.0f ? 0.5f : -0.5f;
 111:Source\SupportFunctions/arm_float_to_q31.c ****     *pDst++ = clip_q63_to_q31((q63_t) (in));
 112:Source\SupportFunctions/arm_float_to_q31.c **** 
 113:Source\SupportFunctions/arm_float_to_q31.c ****     in = *pIn++;
 114:Source\SupportFunctions/arm_float_to_q31.c ****     in = (in * 2147483648.0f);
 115:Source\SupportFunctions/arm_float_to_q31.c ****     in += in > 0.0f ? 0.5f : -0.5f;
 116:Source\SupportFunctions/arm_float_to_q31.c ****     *pDst++ = clip_q63_to_q31((q63_t) (in));
 117:Source\SupportFunctions/arm_float_to_q31.c **** 
 118:Source\SupportFunctions/arm_float_to_q31.c **** #else
 119:Source\SupportFunctions/arm_float_to_q31.c **** 
 120:Source\SupportFunctions/arm_float_to_q31.c ****     /* C = A * 2147483648 */
 121:Source\SupportFunctions/arm_float_to_q31.c ****     /* convert from float to Q31 and then store the results in the destination buffer */
 122:Source\SupportFunctions/arm_float_to_q31.c ****     *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));
 123:Source\SupportFunctions/arm_float_to_q31.c ****     *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));
 124:Source\SupportFunctions/arm_float_to_q31.c ****     *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));
 125:Source\SupportFunctions/arm_float_to_q31.c ****     *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 4


 126:Source\SupportFunctions/arm_float_to_q31.c **** 
 127:Source\SupportFunctions/arm_float_to_q31.c **** #endif /*      #ifdef ARM_MATH_ROUNDING        */
 128:Source\SupportFunctions/arm_float_to_q31.c **** 
 129:Source\SupportFunctions/arm_float_to_q31.c ****     /* Decrement the loop counter */
 130:Source\SupportFunctions/arm_float_to_q31.c ****     blkCnt--;
 131:Source\SupportFunctions/arm_float_to_q31.c ****   }
 132:Source\SupportFunctions/arm_float_to_q31.c **** 
 133:Source\SupportFunctions/arm_float_to_q31.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 134:Source\SupportFunctions/arm_float_to_q31.c ****    ** No loop unrolling is used. */
 135:Source\SupportFunctions/arm_float_to_q31.c ****   blkCnt = blockSize % 0x4u;
 136:Source\SupportFunctions/arm_float_to_q31.c **** 
 137:Source\SupportFunctions/arm_float_to_q31.c ****   while (blkCnt > 0u)
 138:Source\SupportFunctions/arm_float_to_q31.c ****   {
 139:Source\SupportFunctions/arm_float_to_q31.c **** 
 140:Source\SupportFunctions/arm_float_to_q31.c **** #ifdef ARM_MATH_ROUNDING
 141:Source\SupportFunctions/arm_float_to_q31.c **** 
 142:Source\SupportFunctions/arm_float_to_q31.c ****     /* C = A * 2147483648 */
 143:Source\SupportFunctions/arm_float_to_q31.c ****     /* convert from float to Q31 and then store the results in the destination buffer */
 144:Source\SupportFunctions/arm_float_to_q31.c ****     in = *pIn++;
 145:Source\SupportFunctions/arm_float_to_q31.c ****     in = (in * 2147483648.0f);
 146:Source\SupportFunctions/arm_float_to_q31.c ****     in += in > 0.0f ? 0.5f : -0.5f;
 147:Source\SupportFunctions/arm_float_to_q31.c ****     *pDst++ = clip_q63_to_q31((q63_t) (in));
 148:Source\SupportFunctions/arm_float_to_q31.c **** 
 149:Source\SupportFunctions/arm_float_to_q31.c **** #else
 150:Source\SupportFunctions/arm_float_to_q31.c **** 
 151:Source\SupportFunctions/arm_float_to_q31.c ****     /* C = A * 2147483648 */
 152:Source\SupportFunctions/arm_float_to_q31.c ****     /* convert from float to Q31 and then store the results in the destination buffer */
 153:Source\SupportFunctions/arm_float_to_q31.c ****     *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));
 154:Source\SupportFunctions/arm_float_to_q31.c **** 
 155:Source\SupportFunctions/arm_float_to_q31.c **** #endif /*      #ifdef ARM_MATH_ROUNDING        */
 156:Source\SupportFunctions/arm_float_to_q31.c **** 
 157:Source\SupportFunctions/arm_float_to_q31.c ****     /* Decrement the loop counter */
 158:Source\SupportFunctions/arm_float_to_q31.c ****     blkCnt--;
 159:Source\SupportFunctions/arm_float_to_q31.c ****   }
 160:Source\SupportFunctions/arm_float_to_q31.c **** 
 161:Source\SupportFunctions/arm_float_to_q31.c **** 
 162:Source\SupportFunctions/arm_float_to_q31.c **** #else
 163:Source\SupportFunctions/arm_float_to_q31.c **** 
 164:Source\SupportFunctions/arm_float_to_q31.c ****   /* Run the below code for Cortex-M0 */
 165:Source\SupportFunctions/arm_float_to_q31.c **** 
 166:Source\SupportFunctions/arm_float_to_q31.c ****   /* Loop over blockSize number of values */
 167:Source\SupportFunctions/arm_float_to_q31.c ****   blkCnt = blockSize;
  47              		.loc 1 167 0
  48 0010 FB68     		ldr	r3, [r7, #12]
  49 0012 3B62     		str	r3, [r7, #32]
 168:Source\SupportFunctions/arm_float_to_q31.c **** 
 169:Source\SupportFunctions/arm_float_to_q31.c ****   while (blkCnt > 0u)
  50              		.loc 1 169 0
  51 0014 2BE0     		b	.L2
  52              	.L6:
 170:Source\SupportFunctions/arm_float_to_q31.c ****   {
 171:Source\SupportFunctions/arm_float_to_q31.c **** 
 172:Source\SupportFunctions/arm_float_to_q31.c **** #ifdef ARM_MATH_ROUNDING
 173:Source\SupportFunctions/arm_float_to_q31.c **** 
 174:Source\SupportFunctions/arm_float_to_q31.c ****     /* C = A * 2147483648 */
 175:Source\SupportFunctions/arm_float_to_q31.c ****     /* convert from float to Q31 and then store the results in the destination buffer */
 176:Source\SupportFunctions/arm_float_to_q31.c ****     in = *pIn++;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 5


 177:Source\SupportFunctions/arm_float_to_q31.c ****     in = (in * 2147483648.0f);
 178:Source\SupportFunctions/arm_float_to_q31.c ****     in += in > 0 ? 0.5f : -0.5f;
 179:Source\SupportFunctions/arm_float_to_q31.c ****     *pDst++ = clip_q63_to_q31((q63_t) (in));
 180:Source\SupportFunctions/arm_float_to_q31.c **** 
 181:Source\SupportFunctions/arm_float_to_q31.c **** #else
 182:Source\SupportFunctions/arm_float_to_q31.c **** 
 183:Source\SupportFunctions/arm_float_to_q31.c ****     /* C = A * 2147483648 */
 184:Source\SupportFunctions/arm_float_to_q31.c ****     /* convert from float to Q31 and then store the results in the destination buffer */
 185:Source\SupportFunctions/arm_float_to_q31.c ****     *pDst++ = clip_q63_to_q31((q63_t) (*pIn++ * 2147483648.0f));
  53              		.loc 1 185 0
  54 0016 3E69     		ldr	r6, [r7, #16]
  55 0018 331D     		add	r3, r6, #4
  56 001a 3B61     		str	r3, [r7, #16]
  57 001c 7B6A     		ldr	r3, [r7, #36]
  58 001e 1A1D     		add	r2, r3, #4
  59 0020 7A62     		str	r2, [r7, #36]
  60 0022 1B68     		ldr	r3, [r3]
  61 0024 181C     		add	r0, r3, #0
  62 0026 9E21     		mov	r1, #158
  63 0028 C905     		lsl	r1, r1, #23
  64 002a FFF7FEFF 		bl	__aeabi_fmul
  65 002e 031C     		add	r3, r0, #0
  66 0030 181C     		add	r0, r3, #0
  67 0032 FFF7FEFF 		bl	__aeabi_f2lz
  68 0036 021C     		mov	r2, r0
  69 0038 0B1C     		mov	r3, r1
  70 003a BA61     		str	r2, [r7, #24]
  71 003c FB61     		str	r3, [r7, #28]
  72              	.LBB4:
  73              	.LBB5:
  74              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 6


  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 7


  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 8


 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 9


 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 10


 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 11


 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 12


 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 13


 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 14


 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
  75              		.loc 2 513 0
  76 003e FB69     		ldr	r3, [r7, #28]
  77 0040 1C00     		asr	r4, r3, #0
  78 0042 FB69     		ldr	r3, [r7, #28]
  79 0044 DD17     		asr	r5, r3, #31
  80 0046 221C     		mov	r2, r4
  81 0048 BB69     		ldr	r3, [r7, #24]
  82 004a DB17     		asr	r3, r3, #31
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
  83              		.loc 2 514 0
  84 004c 9A42     		cmp	r2, r3
  85 004e 09D0     		beq	.L3
  86 0050 FB69     		ldr	r3, [r7, #28]
  87 0052 DB17     		asr	r3, r3, #31
  88 0054 3B60     		str	r3, [r7]
  89 0056 FB69     		ldr	r3, [r7, #28]
  90 0058 DB17     		asr	r3, r3, #31
  91 005a 7B60     		str	r3, [r7, #4]
  92 005c 3A68     		ldr	r2, [r7]
  93 005e 074B     		ldr	r3, .L8
  94 0060 5340     		eor	r3, r2
  95 0062 00E0     		b	.L7
  96              	.L3:
  97 0064 BB69     		ldr	r3, [r7, #24]
  98              	.L7:
  99              	.LBE5:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 15


 100              	.LBE4:
 101              		.loc 1 185 0
 102 0066 3360     		str	r3, [r6]
 186:Source\SupportFunctions/arm_float_to_q31.c **** 
 187:Source\SupportFunctions/arm_float_to_q31.c **** #endif /*      #ifdef ARM_MATH_ROUNDING        */
 188:Source\SupportFunctions/arm_float_to_q31.c **** 
 189:Source\SupportFunctions/arm_float_to_q31.c ****     /* Decrement the loop counter */
 190:Source\SupportFunctions/arm_float_to_q31.c ****     blkCnt--;
 103              		.loc 1 190 0
 104 0068 3B6A     		ldr	r3, [r7, #32]
 105 006a 013B     		sub	r3, r3, #1
 106 006c 3B62     		str	r3, [r7, #32]
 107              	.L2:
 169:Source\SupportFunctions/arm_float_to_q31.c ****   {
 108              		.loc 1 169 0
 109 006e 3B6A     		ldr	r3, [r7, #32]
 110 0070 002B     		cmp	r3, #0
 111 0072 D0D1     		bne	.L6
 191:Source\SupportFunctions/arm_float_to_q31.c ****   }
 192:Source\SupportFunctions/arm_float_to_q31.c **** 
 193:Source\SupportFunctions/arm_float_to_q31.c **** #endif /* #if defined (ARM_MATH_DSP) */
 194:Source\SupportFunctions/arm_float_to_q31.c **** 
 195:Source\SupportFunctions/arm_float_to_q31.c **** }
 112              		.loc 1 195 0
 113 0074 BD46     		mov	sp, r7
 114 0076 0BB0     		add	sp, sp, #44
 115              		@ sp needed
 116 0078 F0BD     		pop	{r4, r5, r6, r7, pc}
 117              	.L9:
 118 007a C046     		.align	2
 119              	.L8:
 120 007c FFFFFF7F 		.word	2147483647
 121              		.cfi_endproc
 122              	.LFE82:
 123              		.size	arm_float_to_q31, .-arm_float_to_q31
 124              		.text
 125              	.Letext0:
 126              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 127              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 128              		.section	.debug_info,"",%progbits
 129              	.Ldebug_info0:
 130 0000 89010000 		.4byte	0x189
 131 0004 0400     		.2byte	0x4
 132 0006 00000000 		.4byte	.Ldebug_abbrev0
 133 000a 04       		.byte	0x4
 134 000b 01       		.uleb128 0x1
 135 000c 1F010000 		.4byte	.LASF27
 136 0010 01       		.byte	0x1
 137 0011 69000000 		.4byte	.LASF28
 138 0015 23000000 		.4byte	.LASF29
 139 0019 00000000 		.4byte	.Ldebug_ranges0+0
 140 001d 00000000 		.4byte	0
 141 0021 00000000 		.4byte	.Ldebug_line0
 142 0025 02       		.uleb128 0x2
 143 0026 01       		.byte	0x1
 144 0027 06       		.byte	0x6
 145 0028 27020000 		.4byte	.LASF0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 16


 146 002c 02       		.uleb128 0x2
 147 002d 01       		.byte	0x1
 148 002e 08       		.byte	0x8
 149 002f A0000000 		.4byte	.LASF1
 150 0033 02       		.uleb128 0x2
 151 0034 02       		.byte	0x2
 152 0035 05       		.byte	0x5
 153 0036 FF010000 		.4byte	.LASF2
 154 003a 02       		.uleb128 0x2
 155 003b 02       		.byte	0x2
 156 003c 07       		.byte	0x7
 157 003d C7000000 		.4byte	.LASF3
 158 0041 03       		.uleb128 0x3
 159 0042 19000000 		.4byte	.LASF5
 160 0046 03       		.byte	0x3
 161 0047 3F       		.byte	0x3f
 162 0048 4C000000 		.4byte	0x4c
 163 004c 02       		.uleb128 0x2
 164 004d 04       		.byte	0x4
 165 004e 05       		.byte	0x5
 166 004f 12020000 		.4byte	.LASF4
 167 0053 03       		.uleb128 0x3
 168 0054 F0000000 		.4byte	.LASF6
 169 0058 03       		.byte	0x3
 170 0059 41       		.byte	0x41
 171 005a 5E000000 		.4byte	0x5e
 172 005e 02       		.uleb128 0x2
 173 005f 04       		.byte	0x4
 174 0060 07       		.byte	0x7
 175 0061 B5000000 		.4byte	.LASF7
 176 0065 03       		.uleb128 0x3
 177 0066 DF000000 		.4byte	.LASF8
 178 006a 03       		.byte	0x3
 179 006b 59       		.byte	0x59
 180 006c 70000000 		.4byte	0x70
 181 0070 02       		.uleb128 0x2
 182 0071 08       		.byte	0x8
 183 0072 05       		.byte	0x5
 184 0073 C8010000 		.4byte	.LASF9
 185 0077 02       		.uleb128 0x2
 186 0078 08       		.byte	0x8
 187 0079 07       		.byte	0x7
 188 007a 08010000 		.4byte	.LASF10
 189 007e 04       		.uleb128 0x4
 190 007f 04       		.byte	0x4
 191 0080 05       		.byte	0x5
 192 0081 696E7400 		.ascii	"int\000"
 193 0085 02       		.uleb128 0x2
 194 0086 04       		.byte	0x4
 195 0087 07       		.byte	0x7
 196 0088 FB000000 		.4byte	.LASF11
 197 008c 03       		.uleb128 0x3
 198 008d B7010000 		.4byte	.LASF12
 199 0091 04       		.byte	0x4
 200 0092 2C       		.byte	0x2c
 201 0093 41000000 		.4byte	0x41
 202 0097 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 17


 203 0098 09020000 		.4byte	.LASF13
 204 009c 04       		.byte	0x4
 205 009d 2D       		.byte	0x2d
 206 009e 53000000 		.4byte	0x53
 207 00a2 03       		.uleb128 0x3
 208 00a3 11000000 		.4byte	.LASF14
 209 00a7 04       		.byte	0x4
 210 00a8 38       		.byte	0x38
 211 00a9 65000000 		.4byte	0x65
 212 00ad 02       		.uleb128 0x2
 213 00ae 04       		.byte	0x4
 214 00af 07       		.byte	0x7
 215 00b0 BF010000 		.4byte	.LASF15
 216 00b4 02       		.uleb128 0x2
 217 00b5 01       		.byte	0x1
 218 00b6 08       		.byte	0x8
 219 00b7 F0010000 		.4byte	.LASF16
 220 00bb 02       		.uleb128 0x2
 221 00bc 08       		.byte	0x8
 222 00bd 04       		.byte	0x4
 223 00be E9000000 		.4byte	.LASF17
 224 00c2 02       		.uleb128 0x2
 225 00c3 04       		.byte	0x4
 226 00c4 04       		.byte	0x4
 227 00c5 94000000 		.4byte	.LASF18
 228 00c9 02       		.uleb128 0x2
 229 00ca 08       		.byte	0x8
 230 00cb 04       		.byte	0x4
 231 00cc 1B020000 		.4byte	.LASF19
 232 00d0 05       		.uleb128 0x5
 233 00d1 9A000000 		.4byte	.LASF20
 234 00d5 02       		.byte	0x2
 235 00d6 9B01     		.2byte	0x19b
 236 00d8 8C000000 		.4byte	0x8c
 237 00dc 05       		.uleb128 0x5
 238 00dd B1010000 		.4byte	.LASF21
 239 00e1 02       		.byte	0x2
 240 00e2 A001     		.2byte	0x1a0
 241 00e4 A2000000 		.4byte	0xa2
 242 00e8 05       		.uleb128 0x5
 243 00e9 F5010000 		.4byte	.LASF22
 244 00ed 02       		.byte	0x2
 245 00ee A501     		.2byte	0x1a5
 246 00f0 C2000000 		.4byte	0xc2
 247 00f4 06       		.uleb128 0x6
 248 00f5 04       		.byte	0x4
 249 00f6 D0000000 		.4byte	0xd0
 250 00fa 06       		.uleb128 0x6
 251 00fb 04       		.byte	0x4
 252 00fc E8000000 		.4byte	0xe8
 253 0100 07       		.uleb128 0x7
 254 0101 E0010000 		.4byte	.LASF30
 255 0105 02       		.byte	0x2
 256 0106 FE01     		.2byte	0x1fe
 257 0108 D0000000 		.4byte	0xd0
 258 010c 03       		.byte	0x3
 259 010d 1C010000 		.4byte	0x11c
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 18


 260 0111 08       		.uleb128 0x8
 261 0112 7800     		.ascii	"x\000"
 262 0114 02       		.byte	0x2
 263 0115 FF01     		.2byte	0x1ff
 264 0117 DC000000 		.4byte	0xdc
 265 011b 00       		.byte	0
 266 011c 09       		.uleb128 0x9
 267 011d 00000000 		.4byte	.LASF31
 268 0121 01       		.byte	0x1
 269 0122 44       		.byte	0x44
 270 0123 00000000 		.4byte	.LFB82
 271 0127 80000000 		.4byte	.LFE82-.LFB82
 272 012b 01       		.uleb128 0x1
 273 012c 9C       		.byte	0x9c
 274 012d 0A       		.uleb128 0xa
 275 012e 33020000 		.4byte	.LASF23
 276 0132 01       		.byte	0x1
 277 0133 45       		.byte	0x45
 278 0134 FA000000 		.4byte	0xfa
 279 0138 02       		.uleb128 0x2
 280 0139 91       		.byte	0x91
 281 013a 54       		.sleb128 -44
 282 013b 0A       		.uleb128 0xa
 283 013c DA000000 		.4byte	.LASF24
 284 0140 01       		.byte	0x1
 285 0141 46       		.byte	0x46
 286 0142 F4000000 		.4byte	0xf4
 287 0146 02       		.uleb128 0x2
 288 0147 91       		.byte	0x91
 289 0148 50       		.sleb128 -48
 290 0149 0A       		.uleb128 0xa
 291 014a D6010000 		.4byte	.LASF25
 292 014e 01       		.byte	0x1
 293 014f 47       		.byte	0x47
 294 0150 97000000 		.4byte	0x97
 295 0154 02       		.uleb128 0x2
 296 0155 91       		.byte	0x91
 297 0156 4C       		.sleb128 -52
 298 0157 0B       		.uleb128 0xb
 299 0158 70496E00 		.ascii	"pIn\000"
 300 015c 01       		.byte	0x1
 301 015d 49       		.byte	0x49
 302 015e FA000000 		.4byte	0xfa
 303 0162 02       		.uleb128 0x2
 304 0163 91       		.byte	0x91
 305 0164 64       		.sleb128 -28
 306 0165 0C       		.uleb128 0xc
 307 0166 AE000000 		.4byte	.LASF26
 308 016a 01       		.byte	0x1
 309 016b 4A       		.byte	0x4a
 310 016c 97000000 		.4byte	0x97
 311 0170 02       		.uleb128 0x2
 312 0171 91       		.byte	0x91
 313 0172 60       		.sleb128 -32
 314 0173 0D       		.uleb128 0xd
 315 0174 00010000 		.4byte	0x100
 316 0178 3E000000 		.4byte	.LBB4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 19


 317 017c 28000000 		.4byte	.LBE4-.LBB4
 318 0180 01       		.byte	0x1
 319 0181 B9       		.byte	0xb9
 320 0182 0E       		.uleb128 0xe
 321 0183 11010000 		.4byte	0x111
 322 0187 02       		.uleb128 0x2
 323 0188 91       		.byte	0x91
 324 0189 58       		.sleb128 -40
 325 018a 00       		.byte	0
 326 018b 00       		.byte	0
 327 018c 00       		.byte	0
 328              		.section	.debug_abbrev,"",%progbits
 329              	.Ldebug_abbrev0:
 330 0000 01       		.uleb128 0x1
 331 0001 11       		.uleb128 0x11
 332 0002 01       		.byte	0x1
 333 0003 25       		.uleb128 0x25
 334 0004 0E       		.uleb128 0xe
 335 0005 13       		.uleb128 0x13
 336 0006 0B       		.uleb128 0xb
 337 0007 03       		.uleb128 0x3
 338 0008 0E       		.uleb128 0xe
 339 0009 1B       		.uleb128 0x1b
 340 000a 0E       		.uleb128 0xe
 341 000b 55       		.uleb128 0x55
 342 000c 17       		.uleb128 0x17
 343 000d 11       		.uleb128 0x11
 344 000e 01       		.uleb128 0x1
 345 000f 10       		.uleb128 0x10
 346 0010 17       		.uleb128 0x17
 347 0011 00       		.byte	0
 348 0012 00       		.byte	0
 349 0013 02       		.uleb128 0x2
 350 0014 24       		.uleb128 0x24
 351 0015 00       		.byte	0
 352 0016 0B       		.uleb128 0xb
 353 0017 0B       		.uleb128 0xb
 354 0018 3E       		.uleb128 0x3e
 355 0019 0B       		.uleb128 0xb
 356 001a 03       		.uleb128 0x3
 357 001b 0E       		.uleb128 0xe
 358 001c 00       		.byte	0
 359 001d 00       		.byte	0
 360 001e 03       		.uleb128 0x3
 361 001f 16       		.uleb128 0x16
 362 0020 00       		.byte	0
 363 0021 03       		.uleb128 0x3
 364 0022 0E       		.uleb128 0xe
 365 0023 3A       		.uleb128 0x3a
 366 0024 0B       		.uleb128 0xb
 367 0025 3B       		.uleb128 0x3b
 368 0026 0B       		.uleb128 0xb
 369 0027 49       		.uleb128 0x49
 370 0028 13       		.uleb128 0x13
 371 0029 00       		.byte	0
 372 002a 00       		.byte	0
 373 002b 04       		.uleb128 0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 20


 374 002c 24       		.uleb128 0x24
 375 002d 00       		.byte	0
 376 002e 0B       		.uleb128 0xb
 377 002f 0B       		.uleb128 0xb
 378 0030 3E       		.uleb128 0x3e
 379 0031 0B       		.uleb128 0xb
 380 0032 03       		.uleb128 0x3
 381 0033 08       		.uleb128 0x8
 382 0034 00       		.byte	0
 383 0035 00       		.byte	0
 384 0036 05       		.uleb128 0x5
 385 0037 16       		.uleb128 0x16
 386 0038 00       		.byte	0
 387 0039 03       		.uleb128 0x3
 388 003a 0E       		.uleb128 0xe
 389 003b 3A       		.uleb128 0x3a
 390 003c 0B       		.uleb128 0xb
 391 003d 3B       		.uleb128 0x3b
 392 003e 05       		.uleb128 0x5
 393 003f 49       		.uleb128 0x49
 394 0040 13       		.uleb128 0x13
 395 0041 00       		.byte	0
 396 0042 00       		.byte	0
 397 0043 06       		.uleb128 0x6
 398 0044 0F       		.uleb128 0xf
 399 0045 00       		.byte	0
 400 0046 0B       		.uleb128 0xb
 401 0047 0B       		.uleb128 0xb
 402 0048 49       		.uleb128 0x49
 403 0049 13       		.uleb128 0x13
 404 004a 00       		.byte	0
 405 004b 00       		.byte	0
 406 004c 07       		.uleb128 0x7
 407 004d 2E       		.uleb128 0x2e
 408 004e 01       		.byte	0x1
 409 004f 03       		.uleb128 0x3
 410 0050 0E       		.uleb128 0xe
 411 0051 3A       		.uleb128 0x3a
 412 0052 0B       		.uleb128 0xb
 413 0053 3B       		.uleb128 0x3b
 414 0054 05       		.uleb128 0x5
 415 0055 27       		.uleb128 0x27
 416 0056 19       		.uleb128 0x19
 417 0057 49       		.uleb128 0x49
 418 0058 13       		.uleb128 0x13
 419 0059 20       		.uleb128 0x20
 420 005a 0B       		.uleb128 0xb
 421 005b 01       		.uleb128 0x1
 422 005c 13       		.uleb128 0x13
 423 005d 00       		.byte	0
 424 005e 00       		.byte	0
 425 005f 08       		.uleb128 0x8
 426 0060 05       		.uleb128 0x5
 427 0061 00       		.byte	0
 428 0062 03       		.uleb128 0x3
 429 0063 08       		.uleb128 0x8
 430 0064 3A       		.uleb128 0x3a
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 21


 431 0065 0B       		.uleb128 0xb
 432 0066 3B       		.uleb128 0x3b
 433 0067 05       		.uleb128 0x5
 434 0068 49       		.uleb128 0x49
 435 0069 13       		.uleb128 0x13
 436 006a 00       		.byte	0
 437 006b 00       		.byte	0
 438 006c 09       		.uleb128 0x9
 439 006d 2E       		.uleb128 0x2e
 440 006e 01       		.byte	0x1
 441 006f 3F       		.uleb128 0x3f
 442 0070 19       		.uleb128 0x19
 443 0071 03       		.uleb128 0x3
 444 0072 0E       		.uleb128 0xe
 445 0073 3A       		.uleb128 0x3a
 446 0074 0B       		.uleb128 0xb
 447 0075 3B       		.uleb128 0x3b
 448 0076 0B       		.uleb128 0xb
 449 0077 27       		.uleb128 0x27
 450 0078 19       		.uleb128 0x19
 451 0079 11       		.uleb128 0x11
 452 007a 01       		.uleb128 0x1
 453 007b 12       		.uleb128 0x12
 454 007c 06       		.uleb128 0x6
 455 007d 40       		.uleb128 0x40
 456 007e 18       		.uleb128 0x18
 457 007f 9642     		.uleb128 0x2116
 458 0081 19       		.uleb128 0x19
 459 0082 00       		.byte	0
 460 0083 00       		.byte	0
 461 0084 0A       		.uleb128 0xa
 462 0085 05       		.uleb128 0x5
 463 0086 00       		.byte	0
 464 0087 03       		.uleb128 0x3
 465 0088 0E       		.uleb128 0xe
 466 0089 3A       		.uleb128 0x3a
 467 008a 0B       		.uleb128 0xb
 468 008b 3B       		.uleb128 0x3b
 469 008c 0B       		.uleb128 0xb
 470 008d 49       		.uleb128 0x49
 471 008e 13       		.uleb128 0x13
 472 008f 02       		.uleb128 0x2
 473 0090 18       		.uleb128 0x18
 474 0091 00       		.byte	0
 475 0092 00       		.byte	0
 476 0093 0B       		.uleb128 0xb
 477 0094 34       		.uleb128 0x34
 478 0095 00       		.byte	0
 479 0096 03       		.uleb128 0x3
 480 0097 08       		.uleb128 0x8
 481 0098 3A       		.uleb128 0x3a
 482 0099 0B       		.uleb128 0xb
 483 009a 3B       		.uleb128 0x3b
 484 009b 0B       		.uleb128 0xb
 485 009c 49       		.uleb128 0x49
 486 009d 13       		.uleb128 0x13
 487 009e 02       		.uleb128 0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 22


 488 009f 18       		.uleb128 0x18
 489 00a0 00       		.byte	0
 490 00a1 00       		.byte	0
 491 00a2 0C       		.uleb128 0xc
 492 00a3 34       		.uleb128 0x34
 493 00a4 00       		.byte	0
 494 00a5 03       		.uleb128 0x3
 495 00a6 0E       		.uleb128 0xe
 496 00a7 3A       		.uleb128 0x3a
 497 00a8 0B       		.uleb128 0xb
 498 00a9 3B       		.uleb128 0x3b
 499 00aa 0B       		.uleb128 0xb
 500 00ab 49       		.uleb128 0x49
 501 00ac 13       		.uleb128 0x13
 502 00ad 02       		.uleb128 0x2
 503 00ae 18       		.uleb128 0x18
 504 00af 00       		.byte	0
 505 00b0 00       		.byte	0
 506 00b1 0D       		.uleb128 0xd
 507 00b2 1D       		.uleb128 0x1d
 508 00b3 01       		.byte	0x1
 509 00b4 31       		.uleb128 0x31
 510 00b5 13       		.uleb128 0x13
 511 00b6 11       		.uleb128 0x11
 512 00b7 01       		.uleb128 0x1
 513 00b8 12       		.uleb128 0x12
 514 00b9 06       		.uleb128 0x6
 515 00ba 58       		.uleb128 0x58
 516 00bb 0B       		.uleb128 0xb
 517 00bc 59       		.uleb128 0x59
 518 00bd 0B       		.uleb128 0xb
 519 00be 00       		.byte	0
 520 00bf 00       		.byte	0
 521 00c0 0E       		.uleb128 0xe
 522 00c1 05       		.uleb128 0x5
 523 00c2 00       		.byte	0
 524 00c3 31       		.uleb128 0x31
 525 00c4 13       		.uleb128 0x13
 526 00c5 02       		.uleb128 0x2
 527 00c6 18       		.uleb128 0x18
 528 00c7 00       		.byte	0
 529 00c8 00       		.byte	0
 530 00c9 00       		.byte	0
 531              		.section	.debug_aranges,"",%progbits
 532 0000 1C000000 		.4byte	0x1c
 533 0004 0200     		.2byte	0x2
 534 0006 00000000 		.4byte	.Ldebug_info0
 535 000a 04       		.byte	0x4
 536 000b 00       		.byte	0
 537 000c 0000     		.2byte	0
 538 000e 0000     		.2byte	0
 539 0010 00000000 		.4byte	.LFB82
 540 0014 80000000 		.4byte	.LFE82-.LFB82
 541 0018 00000000 		.4byte	0
 542 001c 00000000 		.4byte	0
 543              		.section	.debug_ranges,"",%progbits
 544              	.Ldebug_ranges0:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 23


 545 0000 00000000 		.4byte	.LFB82
 546 0004 80000000 		.4byte	.LFE82
 547 0008 00000000 		.4byte	0
 548 000c 00000000 		.4byte	0
 549              		.section	.debug_line,"",%progbits
 550              	.Ldebug_line0:
 551 0000 85010000 		.section	.debug_str,"MS",%progbits,1
 551      02005101 
 551      00000201 
 551      FB0E0D00 
 551      01010101 
 552              	.LASF31:
 553 0000 61726D5F 		.ascii	"arm_float_to_q31\000"
 553      666C6F61 
 553      745F746F 
 553      5F713331 
 553      00
 554              	.LASF14:
 555 0011 696E7436 		.ascii	"int64_t\000"
 555      345F7400 
 556              	.LASF5:
 557 0019 5F5F696E 		.ascii	"__int32_t\000"
 557      7433325F 
 557      7400
 558              	.LASF29:
 559 0023 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 559      73657273 
 559      5C666E65 
 559      7665735C 
 559      446F6375 
 560 0050 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 560      655F7370 
 560      6565645F 
 560      73656E73 
 560      6F722E63 
 561              	.LASF28:
 562 0069 536F7572 		.ascii	"Source\\SupportFunctions\\arm_float_to_q31.c\000"
 562      63655C53 
 562      7570706F 
 562      72744675 
 562      6E637469 
 563              	.LASF18:
 564 0094 666C6F61 		.ascii	"float\000"
 564      7400
 565              	.LASF20:
 566 009a 7133315F 		.ascii	"q31_t\000"
 566      7400
 567              	.LASF1:
 568 00a0 756E7369 		.ascii	"unsigned char\000"
 568      676E6564 
 568      20636861 
 568      7200
 569              	.LASF26:
 570 00ae 626C6B43 		.ascii	"blkCnt\000"
 570      6E7400
 571              	.LASF7:
 572 00b5 6C6F6E67 		.ascii	"long unsigned int\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 24


 572      20756E73 
 572      69676E65 
 572      6420696E 
 572      7400
 573              	.LASF3:
 574 00c7 73686F72 		.ascii	"short unsigned int\000"
 574      7420756E 
 574      7369676E 
 574      65642069 
 574      6E7400
 575              	.LASF24:
 576 00da 70447374 		.ascii	"pDst\000"
 576      00
 577              	.LASF8:
 578 00df 5F5F696E 		.ascii	"__int64_t\000"
 578      7436345F 
 578      7400
 579              	.LASF17:
 580 00e9 646F7562 		.ascii	"double\000"
 580      6C6500
 581              	.LASF6:
 582 00f0 5F5F7569 		.ascii	"__uint32_t\000"
 582      6E743332 
 582      5F7400
 583              	.LASF11:
 584 00fb 756E7369 		.ascii	"unsigned int\000"
 584      676E6564 
 584      20696E74 
 584      00
 585              	.LASF10:
 586 0108 6C6F6E67 		.ascii	"long long unsigned int\000"
 586      206C6F6E 
 586      6720756E 
 586      7369676E 
 586      65642069 
 587              	.LASF27:
 588 011f 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 588      4320342E 
 588      392E3320 
 588      32303135 
 588      30333033 
 589 0152 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 589      20726576 
 589      6973696F 
 589      6E203232 
 589      31323230 
 590 0185 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 590      30202D66 
 590      66756E63 
 590      74696F6E 
 590      2D736563 
 591              	.LASF21:
 592 01b1 7136335F 		.ascii	"q63_t\000"
 592      7400
 593              	.LASF12:
 594 01b7 696E7433 		.ascii	"int32_t\000"
 594      325F7400 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccQpQaTM.s 			page 25


 595              	.LASF15:
 596 01bf 73697A65 		.ascii	"sizetype\000"
 596      74797065 
 596      00
 597              	.LASF9:
 598 01c8 6C6F6E67 		.ascii	"long long int\000"
 598      206C6F6E 
 598      6720696E 
 598      7400
 599              	.LASF25:
 600 01d6 626C6F63 		.ascii	"blockSize\000"
 600      6B53697A 
 600      6500
 601              	.LASF30:
 602 01e0 636C6970 		.ascii	"clip_q63_to_q31\000"
 602      5F713633 
 602      5F746F5F 
 602      71333100 
 603              	.LASF16:
 604 01f0 63686172 		.ascii	"char\000"
 604      00
 605              	.LASF22:
 606 01f5 666C6F61 		.ascii	"float32_t\000"
 606      7433325F 
 606      7400
 607              	.LASF2:
 608 01ff 73686F72 		.ascii	"short int\000"
 608      7420696E 
 608      7400
 609              	.LASF13:
 610 0209 75696E74 		.ascii	"uint32_t\000"
 610      33325F74 
 610      00
 611              	.LASF4:
 612 0212 6C6F6E67 		.ascii	"long int\000"
 612      20696E74 
 612      00
 613              	.LASF19:
 614 021b 6C6F6E67 		.ascii	"long double\000"
 614      20646F75 
 614      626C6500 
 615              	.LASF0:
 616 0227 7369676E 		.ascii	"signed char\000"
 616      65642063 
 616      68617200 
 617              	.LASF23:
 618 0233 70537263 		.ascii	"pSrc\000"
 618      00
 619              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
