ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_pid_init_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_pid_init_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_pid_init_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_pid_init_q15, %function
  23              	arm_pid_init_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\ControllerFunctions\\arm_pid_init_q15.c"
   1:Source\ControllerFunctions/arm_pid_init_q15.c **** /* ----------------------------------------------------------------------
   2:Source\ControllerFunctions/arm_pid_init_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\ControllerFunctions/arm_pid_init_q15.c ****  * Title:        arm_pid_init_q15.c
   4:Source\ControllerFunctions/arm_pid_init_q15.c ****  * Description:  Q15 PID Control initialization function
   5:Source\ControllerFunctions/arm_pid_init_q15.c ****  *
   6:Source\ControllerFunctions/arm_pid_init_q15.c ****  * $Date:        27. January 2017
   7:Source\ControllerFunctions/arm_pid_init_q15.c ****  * $Revision:    V.1.5.1
   8:Source\ControllerFunctions/arm_pid_init_q15.c ****  *
   9:Source\ControllerFunctions/arm_pid_init_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\ControllerFunctions/arm_pid_init_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\ControllerFunctions/arm_pid_init_q15.c **** /*
  12:Source\ControllerFunctions/arm_pid_init_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\ControllerFunctions/arm_pid_init_q15.c ****  *
  14:Source\ControllerFunctions/arm_pid_init_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\ControllerFunctions/arm_pid_init_q15.c ****  *
  16:Source\ControllerFunctions/arm_pid_init_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\ControllerFunctions/arm_pid_init_q15.c ****  * not use this file except in compliance with the License.
  18:Source\ControllerFunctions/arm_pid_init_q15.c ****  * You may obtain a copy of the License at
  19:Source\ControllerFunctions/arm_pid_init_q15.c ****  *
  20:Source\ControllerFunctions/arm_pid_init_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\ControllerFunctions/arm_pid_init_q15.c ****  *
  22:Source\ControllerFunctions/arm_pid_init_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\ControllerFunctions/arm_pid_init_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\ControllerFunctions/arm_pid_init_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\ControllerFunctions/arm_pid_init_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\ControllerFunctions/arm_pid_init_q15.c ****  * limitations under the License.
  27:Source\ControllerFunctions/arm_pid_init_q15.c ****  */
  28:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  29:Source\ControllerFunctions/arm_pid_init_q15.c **** #include "arm_math.h"
  30:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  31:Source\ControllerFunctions/arm_pid_init_q15.c ****  /**
  32:Source\ControllerFunctions/arm_pid_init_q15.c ****  * @addtogroup PID
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 2


  33:Source\ControllerFunctions/arm_pid_init_q15.c ****  * @{
  34:Source\ControllerFunctions/arm_pid_init_q15.c ****  */
  35:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  36:Source\ControllerFunctions/arm_pid_init_q15.c **** /**
  37:Source\ControllerFunctions/arm_pid_init_q15.c ****  * @details
  38:Source\ControllerFunctions/arm_pid_init_q15.c ****  * @param[in,out] *S points to an instance of the Q15 PID structure.
  39:Source\ControllerFunctions/arm_pid_init_q15.c ****  * @param[in]     resetStateFlag  flag to reset the state. 0 = no change in state 1 = reset the sta
  40:Source\ControllerFunctions/arm_pid_init_q15.c ****  * @return none.
  41:Source\ControllerFunctions/arm_pid_init_q15.c ****  * \par Description:
  42:Source\ControllerFunctions/arm_pid_init_q15.c ****  * \par
  43:Source\ControllerFunctions/arm_pid_init_q15.c ****  * The <code>resetStateFlag</code> specifies whether to set state to zero or not. \n
  44:Source\ControllerFunctions/arm_pid_init_q15.c ****  * The function computes the structure fields: <code>A0</code>, <code>A1</code> <code>A2</code>
  45:Source\ControllerFunctions/arm_pid_init_q15.c ****  * using the proportional gain( \c Kp), integral gain( \c Ki) and derivative gain( \c Kd)
  46:Source\ControllerFunctions/arm_pid_init_q15.c ****  * also sets the state variables to all zeros.
  47:Source\ControllerFunctions/arm_pid_init_q15.c ****  */
  48:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  49:Source\ControllerFunctions/arm_pid_init_q15.c **** void arm_pid_init_q15(
  50:Source\ControllerFunctions/arm_pid_init_q15.c ****   arm_pid_instance_q15 * S,
  51:Source\ControllerFunctions/arm_pid_init_q15.c ****   int32_t resetStateFlag)
  52:Source\ControllerFunctions/arm_pid_init_q15.c **** {
  26              		.loc 1 52 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 8EB0     		sub	sp, sp, #56
  33              		.cfi_def_cfa_offset 64
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 7860     		str	r0, [r7, #4]
  37 0008 3960     		str	r1, [r7]
  53:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  54:Source\ControllerFunctions/arm_pid_init_q15.c **** #if defined (ARM_MATH_DSP)
  55:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  56:Source\ControllerFunctions/arm_pid_init_q15.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  57:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  58:Source\ControllerFunctions/arm_pid_init_q15.c ****   /* Derived coefficient A0 */
  59:Source\ControllerFunctions/arm_pid_init_q15.c ****   S->A0 = __QADD16(__QADD16(S->Kp, S->Ki), S->Kd);
  60:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  61:Source\ControllerFunctions/arm_pid_init_q15.c ****   /* Derived coefficients and pack into A1 */
  62:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  63:Source\ControllerFunctions/arm_pid_init_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
  64:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  65:Source\ControllerFunctions/arm_pid_init_q15.c ****   S->A1 = __PKHBT(-__QADD16(__QADD16(S->Kd, S->Kd), S->Kp), S->Kd, 16);
  66:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  67:Source\ControllerFunctions/arm_pid_init_q15.c **** #else
  68:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  69:Source\ControllerFunctions/arm_pid_init_q15.c ****   S->A1 = __PKHBT(S->Kd, -__QADD16(__QADD16(S->Kd, S->Kd), S->Kp), 16);
  70:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  71:Source\ControllerFunctions/arm_pid_init_q15.c **** #endif /*      #ifndef  ARM_MATH_BIG_ENDIAN    */
  72:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  73:Source\ControllerFunctions/arm_pid_init_q15.c ****   /* Check whether state needs reset or not */
  74:Source\ControllerFunctions/arm_pid_init_q15.c ****   if (resetStateFlag)
  75:Source\ControllerFunctions/arm_pid_init_q15.c ****   {
  76:Source\ControllerFunctions/arm_pid_init_q15.c ****     /* Clear the state buffer.  The size will be always 3 samples */
  77:Source\ControllerFunctions/arm_pid_init_q15.c ****     memset(S->state, 0, 3u * sizeof(q15_t));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 3


  78:Source\ControllerFunctions/arm_pid_init_q15.c ****   }
  79:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  80:Source\ControllerFunctions/arm_pid_init_q15.c **** #else
  81:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  82:Source\ControllerFunctions/arm_pid_init_q15.c ****   /* Run the below code for Cortex-M0 */
  83:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  84:Source\ControllerFunctions/arm_pid_init_q15.c ****   q31_t temp;                                    /*to store the sum */
  85:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  86:Source\ControllerFunctions/arm_pid_init_q15.c ****   /* Derived coefficient A0 */
  87:Source\ControllerFunctions/arm_pid_init_q15.c ****   temp = S->Kp + S->Ki + S->Kd;
  38              		.loc 1 87 0
  39 000a 7B68     		ldr	r3, [r7, #4]
  40 000c 9B89     		ldrh	r3, [r3, #12]
  41 000e 1AB2     		sxth	r2, r3
  42 0010 7B68     		ldr	r3, [r7, #4]
  43 0012 DB89     		ldrh	r3, [r3, #14]
  44 0014 1BB2     		sxth	r3, r3
  45 0016 D218     		add	r2, r2, r3
  46 0018 7B68     		ldr	r3, [r7, #4]
  47 001a 1B8A     		ldrh	r3, [r3, #16]
  48 001c 1BB2     		sxth	r3, r3
  49 001e D318     		add	r3, r2, r3
  50 0020 7B63     		str	r3, [r7, #52]
  51 0022 7B6B     		ldr	r3, [r7, #52]
  52 0024 3B63     		str	r3, [r7, #48]
  53 0026 1023     		mov	r3, #16
  54 0028 FB62     		str	r3, [r7, #44]
  55              	.LBB6:
  56              	.LBB7:
  57              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 4


  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 5


  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 6


 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 7


 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 8


 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 9


 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 10


 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 11


 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 12


 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 13


 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 14


 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 15


 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
  58              		.loc 2 699 0
  59 002a 0123     		mov	r3, #1
  60 002c BB62     		str	r3, [r7, #40]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  61              		.loc 2 700 0
  62 002e 0023     		mov	r3, #0
  63 0030 7B62     		str	r3, [r7, #36]
  64 0032 05E0     		b	.L2
  65              	.L3:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
  66              		.loc 2 702 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 16


  67 0034 BB6A     		ldr	r3, [r7, #40]
  68 0036 5B00     		lsl	r3, r3, #1
  69 0038 BB62     		str	r3, [r7, #40]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  70              		.loc 2 700 0
  71 003a 7B6A     		ldr	r3, [r7, #36]
  72 003c 0133     		add	r3, r3, #1
  73 003e 7B62     		str	r3, [r7, #36]
  74              	.L2:
  75 0040 FB6A     		ldr	r3, [r7, #44]
  76 0042 013B     		sub	r3, r3, #1
  77 0044 7A6A     		ldr	r2, [r7, #36]
  78 0046 9A42     		cmp	r2, r3
  79 0048 F4D3     		bcc	.L3
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
  80              		.loc 2 705 0
  81 004a 3B6B     		ldr	r3, [r7, #48]
  82 004c 002B     		cmp	r3, #0
  83 004e 09DD     		ble	.L4
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
  84              		.loc 2 707 0
  85 0050 BB6A     		ldr	r3, [r7, #40]
  86 0052 013B     		sub	r3, r3, #1
  87 0054 BB62     		str	r3, [r7, #40]
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
  88              		.loc 2 709 0
  89 0056 3A6B     		ldr	r2, [r7, #48]
  90 0058 BB6A     		ldr	r3, [r7, #40]
  91 005a 9A42     		cmp	r2, r3
  92 005c 0CDD     		ble	.L15
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
  93              		.loc 2 711 0
  94 005e BB6A     		ldr	r3, [r7, #40]
  95 0060 3B63     		str	r3, [r7, #48]
  96 0062 0AE0     		b	.L6
  97              	.L4:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
  98              		.loc 2 716 0
  99 0064 BB6A     		ldr	r3, [r7, #40]
 100 0066 5B42     		neg	r3, r3
 101 0068 3B62     		str	r3, [r7, #32]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 102              		.loc 2 718 0
 103 006a 3A6B     		ldr	r2, [r7, #48]
 104 006c 3B6A     		ldr	r3, [r7, #32]
 105 006e 9A42     		cmp	r2, r3
 106 0070 03DA     		bge	.L6
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 17


 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 107              		.loc 2 720 0
 108 0072 3B6A     		ldr	r3, [r7, #32]
 109 0074 3B63     		str	r3, [r7, #48]
 110 0076 00E0     		b	.L6
 111              	.L15:
 711:.\Include/arm_math.h ****       }
 112              		.loc 2 711 0
 113 0078 C046     		mov	r8, r8
 114              	.L6:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 115              		.loc 2 723 0
 116 007a 3B6B     		ldr	r3, [r7, #48]
 117              	.LBE7:
 118              	.LBE6:
  88:Source\ControllerFunctions/arm_pid_init_q15.c ****   S->A0 = (q15_t) __SSAT(temp, 16);
 119              		.loc 1 88 0
 120 007c 9AB2     		uxth	r2, r3
 121 007e 7B68     		ldr	r3, [r7, #4]
 122 0080 1A80     		strh	r2, [r3]
  89:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  90:Source\ControllerFunctions/arm_pid_init_q15.c ****   /* Derived coefficients and pack into A1 */
  91:Source\ControllerFunctions/arm_pid_init_q15.c ****   temp = -(S->Kd + S->Kd + S->Kp);
 123              		.loc 1 91 0
 124 0082 7B68     		ldr	r3, [r7, #4]
 125 0084 1B8A     		ldrh	r3, [r3, #16]
 126 0086 1AB2     		sxth	r2, r3
 127 0088 7B68     		ldr	r3, [r7, #4]
 128 008a 1B8A     		ldrh	r3, [r3, #16]
 129 008c 1BB2     		sxth	r3, r3
 130 008e D218     		add	r2, r2, r3
 131 0090 7B68     		ldr	r3, [r7, #4]
 132 0092 9B89     		ldrh	r3, [r3, #12]
 133 0094 1BB2     		sxth	r3, r3
 134 0096 D318     		add	r3, r2, r3
 135 0098 5B42     		neg	r3, r3
 136 009a 7B63     		str	r3, [r7, #52]
 137 009c 7B6B     		ldr	r3, [r7, #52]
 138 009e FB61     		str	r3, [r7, #28]
 139 00a0 1023     		mov	r3, #16
 140 00a2 BB61     		str	r3, [r7, #24]
 141              	.LBB8:
 142              	.LBB9:
 699:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 143              		.loc 2 699 0
 144 00a4 0123     		mov	r3, #1
 145 00a6 7B61     		str	r3, [r7, #20]
 700:.\Include/arm_math.h ****     {
 146              		.loc 2 700 0
 147 00a8 0023     		mov	r3, #0
 148 00aa 3B61     		str	r3, [r7, #16]
 149 00ac 05E0     		b	.L8
 150              	.L9:
 702:.\Include/arm_math.h ****     }
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 18


 151              		.loc 2 702 0
 152 00ae 7B69     		ldr	r3, [r7, #20]
 153 00b0 5B00     		lsl	r3, r3, #1
 154 00b2 7B61     		str	r3, [r7, #20]
 700:.\Include/arm_math.h ****     {
 155              		.loc 2 700 0
 156 00b4 3B69     		ldr	r3, [r7, #16]
 157 00b6 0133     		add	r3, r3, #1
 158 00b8 3B61     		str	r3, [r7, #16]
 159              	.L8:
 160 00ba BB69     		ldr	r3, [r7, #24]
 161 00bc 013B     		sub	r3, r3, #1
 162 00be 3A69     		ldr	r2, [r7, #16]
 163 00c0 9A42     		cmp	r2, r3
 164 00c2 F4D3     		bcc	.L9
 705:.\Include/arm_math.h ****     {
 165              		.loc 2 705 0
 166 00c4 FB69     		ldr	r3, [r7, #28]
 167 00c6 002B     		cmp	r3, #0
 168 00c8 09DD     		ble	.L10
 707:.\Include/arm_math.h **** 
 169              		.loc 2 707 0
 170 00ca 7B69     		ldr	r3, [r7, #20]
 171 00cc 013B     		sub	r3, r3, #1
 172 00ce 7B61     		str	r3, [r7, #20]
 709:.\Include/arm_math.h ****       {
 173              		.loc 2 709 0
 174 00d0 FA69     		ldr	r2, [r7, #28]
 175 00d2 7B69     		ldr	r3, [r7, #20]
 176 00d4 9A42     		cmp	r2, r3
 177 00d6 0CDD     		ble	.L16
 711:.\Include/arm_math.h ****       }
 178              		.loc 2 711 0
 179 00d8 7B69     		ldr	r3, [r7, #20]
 180 00da FB61     		str	r3, [r7, #28]
 181 00dc 0AE0     		b	.L12
 182              	.L10:
 716:.\Include/arm_math.h **** 
 183              		.loc 2 716 0
 184 00de 7B69     		ldr	r3, [r7, #20]
 185 00e0 5B42     		neg	r3, r3
 186 00e2 FB60     		str	r3, [r7, #12]
 718:.\Include/arm_math.h ****       {
 187              		.loc 2 718 0
 188 00e4 FA69     		ldr	r2, [r7, #28]
 189 00e6 FB68     		ldr	r3, [r7, #12]
 190 00e8 9A42     		cmp	r2, r3
 191 00ea 03DA     		bge	.L12
 720:.\Include/arm_math.h ****       }
 192              		.loc 2 720 0
 193 00ec FB68     		ldr	r3, [r7, #12]
 194 00ee FB61     		str	r3, [r7, #28]
 195 00f0 00E0     		b	.L12
 196              	.L16:
 711:.\Include/arm_math.h ****       }
 197              		.loc 2 711 0
 198 00f2 C046     		mov	r8, r8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 19


 199              	.L12:
 200              		.loc 2 723 0
 201 00f4 FB69     		ldr	r3, [r7, #28]
 202              	.LBE9:
 203              	.LBE8:
  92:Source\ControllerFunctions/arm_pid_init_q15.c ****   S->A1 = (q15_t) __SSAT(temp, 16);
 204              		.loc 1 92 0
 205 00f6 9AB2     		uxth	r2, r3
 206 00f8 7B68     		ldr	r3, [r7, #4]
 207 00fa 5A80     		strh	r2, [r3, #2]
  93:Source\ControllerFunctions/arm_pid_init_q15.c ****   S->A2 = S->Kd;
 208              		.loc 1 93 0
 209 00fc 7B68     		ldr	r3, [r7, #4]
 210 00fe 1A8A     		ldrh	r2, [r3, #16]
 211 0100 7B68     		ldr	r3, [r7, #4]
 212 0102 9A80     		strh	r2, [r3, #4]
  94:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  95:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  96:Source\ControllerFunctions/arm_pid_init_q15.c **** 
  97:Source\ControllerFunctions/arm_pid_init_q15.c ****   /* Check whether state needs reset or not */
  98:Source\ControllerFunctions/arm_pid_init_q15.c ****   if (resetStateFlag)
 213              		.loc 1 98 0
 214 0104 3B68     		ldr	r3, [r7]
 215 0106 002B     		cmp	r3, #0
 216 0108 06D0     		beq	.L1
  99:Source\ControllerFunctions/arm_pid_init_q15.c ****   {
 100:Source\ControllerFunctions/arm_pid_init_q15.c ****     /* Clear the state buffer.  The size will be always 3 samples */
 101:Source\ControllerFunctions/arm_pid_init_q15.c ****     memset(S->state, 0, 3u * sizeof(q15_t));
 217              		.loc 1 101 0
 218 010a 7B68     		ldr	r3, [r7, #4]
 219 010c 0633     		add	r3, r3, #6
 220 010e 181C     		mov	r0, r3
 221 0110 0021     		mov	r1, #0
 222 0112 0622     		mov	r2, #6
 223 0114 FFF7FEFF 		bl	memset
 224              	.L1:
 102:Source\ControllerFunctions/arm_pid_init_q15.c ****   }
 103:Source\ControllerFunctions/arm_pid_init_q15.c **** 
 104:Source\ControllerFunctions/arm_pid_init_q15.c **** #endif /* #if defined (ARM_MATH_DSP) */
 105:Source\ControllerFunctions/arm_pid_init_q15.c **** 
 106:Source\ControllerFunctions/arm_pid_init_q15.c **** }
 225              		.loc 1 106 0
 226 0118 BD46     		mov	sp, r7
 227 011a 0EB0     		add	sp, sp, #56
 228              		@ sp needed
 229 011c 80BD     		pop	{r7, pc}
 230              		.cfi_endproc
 231              	.LFE82:
 232              		.size	arm_pid_init_q15, .-arm_pid_init_q15
 233 011e C046     		.text
 234              	.Letext0:
 235              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 236              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 237              		.section	.debug_info,"",%progbits
 238              	.Ldebug_info0:
 239 0000 74020000 		.4byte	0x274
 240 0004 0400     		.2byte	0x4
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 20


 241 0006 00000000 		.4byte	.Ldebug_abbrev0
 242 000a 04       		.byte	0x4
 243 000b 01       		.uleb128 0x1
 244 000c 26010000 		.4byte	.LASF27
 245 0010 01       		.byte	0x1
 246 0011 AA000000 		.4byte	.LASF28
 247 0015 10000000 		.4byte	.LASF29
 248 0019 00000000 		.4byte	.Ldebug_ranges0+0
 249 001d 00000000 		.4byte	0
 250 0021 00000000 		.4byte	.Ldebug_line0
 251 0025 02       		.uleb128 0x2
 252 0026 01       		.byte	0x1
 253 0027 06       		.byte	0x6
 254 0028 29020000 		.4byte	.LASF0
 255 002c 02       		.uleb128 0x2
 256 002d 01       		.byte	0x1
 257 002e 08       		.byte	0x8
 258 002f F4000000 		.4byte	.LASF1
 259 0033 03       		.uleb128 0x3
 260 0034 EA000000 		.4byte	.LASF4
 261 0038 03       		.byte	0x3
 262 0039 29       		.byte	0x29
 263 003a 3E000000 		.4byte	0x3e
 264 003e 02       		.uleb128 0x2
 265 003f 02       		.byte	0x2
 266 0040 05       		.byte	0x5
 267 0041 FA010000 		.4byte	.LASF2
 268 0045 02       		.uleb128 0x2
 269 0046 02       		.byte	0x2
 270 0047 07       		.byte	0x7
 271 0048 90000000 		.4byte	.LASF3
 272 004c 03       		.uleb128 0x3
 273 004d 06000000 		.4byte	.LASF5
 274 0051 03       		.byte	0x3
 275 0052 3F       		.byte	0x3f
 276 0053 57000000 		.4byte	0x57
 277 0057 02       		.uleb128 0x2
 278 0058 04       		.byte	0x4
 279 0059 05       		.byte	0x5
 280 005a 14020000 		.4byte	.LASF6
 281 005e 03       		.uleb128 0x3
 282 005f DF000000 		.4byte	.LASF7
 283 0063 03       		.byte	0x3
 284 0064 41       		.byte	0x41
 285 0065 69000000 		.4byte	0x69
 286 0069 02       		.uleb128 0x2
 287 006a 04       		.byte	0x4
 288 006b 07       		.byte	0x7
 289 006c 79000000 		.4byte	.LASF8
 290 0070 02       		.uleb128 0x2
 291 0071 08       		.byte	0x8
 292 0072 05       		.byte	0x5
 293 0073 DF010000 		.4byte	.LASF9
 294 0077 02       		.uleb128 0x2
 295 0078 08       		.byte	0x8
 296 0079 07       		.byte	0x7
 297 007a 0F010000 		.4byte	.LASF10
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 21


 298 007e 04       		.uleb128 0x4
 299 007f 04       		.byte	0x4
 300 0080 05       		.byte	0x5
 301 0081 696E7400 		.ascii	"int\000"
 302 0085 02       		.uleb128 0x2
 303 0086 04       		.byte	0x4
 304 0087 07       		.byte	0x7
 305 0088 02010000 		.4byte	.LASF11
 306 008c 03       		.uleb128 0x3
 307 008d B8010000 		.4byte	.LASF12
 308 0091 04       		.byte	0x4
 309 0092 20       		.byte	0x20
 310 0093 33000000 		.4byte	0x33
 311 0097 03       		.uleb128 0x3
 312 0098 F2010000 		.4byte	.LASF13
 313 009c 04       		.byte	0x4
 314 009d 2C       		.byte	0x2c
 315 009e 4C000000 		.4byte	0x4c
 316 00a2 03       		.uleb128 0x3
 317 00a3 0B020000 		.4byte	.LASF14
 318 00a7 04       		.byte	0x4
 319 00a8 2D       		.byte	0x2d
 320 00a9 5E000000 		.4byte	0x5e
 321 00ad 02       		.uleb128 0x2
 322 00ae 04       		.byte	0x4
 323 00af 07       		.byte	0x7
 324 00b0 D6010000 		.4byte	.LASF15
 325 00b4 02       		.uleb128 0x2
 326 00b5 01       		.byte	0x1
 327 00b6 08       		.byte	0x8
 328 00b7 ED010000 		.4byte	.LASF16
 329 00bb 02       		.uleb128 0x2
 330 00bc 08       		.byte	0x8
 331 00bd 04       		.byte	0x4
 332 00be D8000000 		.4byte	.LASF17
 333 00c2 02       		.uleb128 0x2
 334 00c3 04       		.byte	0x4
 335 00c4 04       		.byte	0x4
 336 00c5 73000000 		.4byte	.LASF18
 337 00c9 02       		.uleb128 0x2
 338 00ca 08       		.byte	0x8
 339 00cb 04       		.byte	0x4
 340 00cc 1D020000 		.4byte	.LASF19
 341 00d0 05       		.uleb128 0x5
 342 00d1 6D000000 		.4byte	.LASF20
 343 00d5 02       		.byte	0x2
 344 00d6 9601     		.2byte	0x196
 345 00d8 8C000000 		.4byte	0x8c
 346 00dc 05       		.uleb128 0x5
 347 00dd 56000000 		.4byte	.LASF21
 348 00e1 02       		.byte	0x2
 349 00e2 9B01     		.2byte	0x19b
 350 00e4 97000000 		.4byte	0x97
 351 00e8 06       		.uleb128 0x6
 352 00e9 12       		.byte	0x12
 353 00ea 02       		.byte	0x2
 354 00eb 0A07     		.2byte	0x70a
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 22


 355 00ed 47010000 		.4byte	0x147
 356 00f1 07       		.uleb128 0x7
 357 00f2 413000   		.ascii	"A0\000"
 358 00f5 02       		.byte	0x2
 359 00f6 0C07     		.2byte	0x70c
 360 00f8 D0000000 		.4byte	0xd0
 361 00fc 00       		.byte	0
 362 00fd 07       		.uleb128 0x7
 363 00fe 413100   		.ascii	"A1\000"
 364 0101 02       		.byte	0x2
 365 0102 0E07     		.2byte	0x70e
 366 0104 D0000000 		.4byte	0xd0
 367 0108 02       		.byte	0x2
 368 0109 07       		.uleb128 0x7
 369 010a 413200   		.ascii	"A2\000"
 370 010d 02       		.byte	0x2
 371 010e 0F07     		.2byte	0x70f
 372 0110 D0000000 		.4byte	0xd0
 373 0114 04       		.byte	0x4
 374 0115 08       		.uleb128 0x8
 375 0116 00000000 		.4byte	.LASF22
 376 011a 02       		.byte	0x2
 377 011b 1307     		.2byte	0x713
 378 011d 47010000 		.4byte	0x147
 379 0121 06       		.byte	0x6
 380 0122 07       		.uleb128 0x7
 381 0123 4B7000   		.ascii	"Kp\000"
 382 0126 02       		.byte	0x2
 383 0127 1407     		.2byte	0x714
 384 0129 D0000000 		.4byte	0xd0
 385 012d 0C       		.byte	0xc
 386 012e 07       		.uleb128 0x7
 387 012f 4B6900   		.ascii	"Ki\000"
 388 0132 02       		.byte	0x2
 389 0133 1507     		.2byte	0x715
 390 0135 D0000000 		.4byte	0xd0
 391 0139 0E       		.byte	0xe
 392 013a 07       		.uleb128 0x7
 393 013b 4B6400   		.ascii	"Kd\000"
 394 013e 02       		.byte	0x2
 395 013f 1607     		.2byte	0x716
 396 0141 D0000000 		.4byte	0xd0
 397 0145 10       		.byte	0x10
 398 0146 00       		.byte	0
 399 0147 09       		.uleb128 0x9
 400 0148 D0000000 		.4byte	0xd0
 401 014c 57010000 		.4byte	0x157
 402 0150 0A       		.uleb128 0xa
 403 0151 AD000000 		.4byte	0xad
 404 0155 02       		.byte	0x2
 405 0156 00       		.byte	0
 406 0157 05       		.uleb128 0x5
 407 0158 35020000 		.4byte	.LASF23
 408 015c 02       		.byte	0x2
 409 015d 1707     		.2byte	0x717
 410 015f E8000000 		.4byte	0xe8
 411 0163 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 23


 412 0164 C0010000 		.4byte	.LASF30
 413 0168 02       		.byte	0x2
 414 0169 B402     		.2byte	0x2b4
 415 016b DC000000 		.4byte	0xdc
 416 016f 03       		.byte	0x3
 417 0170 AB010000 		.4byte	0x1ab
 418 0174 0C       		.uleb128 0xc
 419 0175 7800     		.ascii	"x\000"
 420 0177 02       		.byte	0x2
 421 0178 B502     		.2byte	0x2b5
 422 017a DC000000 		.4byte	0xdc
 423 017e 0C       		.uleb128 0xc
 424 017f 7900     		.ascii	"y\000"
 425 0181 02       		.byte	0x2
 426 0182 B602     		.2byte	0x2b6
 427 0184 A2000000 		.4byte	0xa2
 428 0188 0D       		.uleb128 0xd
 429 0189 04020000 		.4byte	.LASF24
 430 018d 02       		.byte	0x2
 431 018e B802     		.2byte	0x2b8
 432 0190 97000000 		.4byte	0x97
 433 0194 0D       		.uleb128 0xd
 434 0195 A3000000 		.4byte	.LASF25
 435 0199 02       		.byte	0x2
 436 019a B802     		.2byte	0x2b8
 437 019c 97000000 		.4byte	0x97
 438 01a0 0E       		.uleb128 0xe
 439 01a1 6900     		.ascii	"i\000"
 440 01a3 02       		.byte	0x2
 441 01a4 B902     		.2byte	0x2b9
 442 01a6 A2000000 		.4byte	0xa2
 443 01aa 00       		.byte	0
 444 01ab 0F       		.uleb128 0xf
 445 01ac 5C000000 		.4byte	.LASF31
 446 01b0 01       		.byte	0x1
 447 01b1 31       		.byte	0x31
 448 01b2 00000000 		.4byte	.LFB82
 449 01b6 1E010000 		.4byte	.LFE82-.LFB82
 450 01ba 01       		.uleb128 0x1
 451 01bb 9C       		.byte	0x9c
 452 01bc 71020000 		.4byte	0x271
 453 01c0 10       		.uleb128 0x10
 454 01c1 5300     		.ascii	"S\000"
 455 01c3 01       		.byte	0x1
 456 01c4 32       		.byte	0x32
 457 01c5 71020000 		.4byte	0x271
 458 01c9 02       		.uleb128 0x2
 459 01ca 91       		.byte	0x91
 460 01cb 44       		.sleb128 -60
 461 01cc 11       		.uleb128 0x11
 462 01cd C7010000 		.4byte	.LASF26
 463 01d1 01       		.byte	0x1
 464 01d2 33       		.byte	0x33
 465 01d3 97000000 		.4byte	0x97
 466 01d7 02       		.uleb128 0x2
 467 01d8 91       		.byte	0x91
 468 01d9 40       		.sleb128 -64
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 24


 469 01da 12       		.uleb128 0x12
 470 01db 8B000000 		.4byte	.LASF32
 471 01df 01       		.byte	0x1
 472 01e0 54       		.byte	0x54
 473 01e1 DC000000 		.4byte	0xdc
 474 01e5 02       		.uleb128 0x2
 475 01e6 91       		.byte	0x91
 476 01e7 74       		.sleb128 -12
 477 01e8 13       		.uleb128 0x13
 478 01e9 63010000 		.4byte	0x163
 479 01ed 2A000000 		.4byte	.LBB6
 480 01f1 52000000 		.4byte	.LBE6-.LBB6
 481 01f5 01       		.byte	0x1
 482 01f6 58       		.byte	0x58
 483 01f7 2E020000 		.4byte	0x22e
 484 01fb 14       		.uleb128 0x14
 485 01fc 7E010000 		.4byte	0x17e
 486 0200 02       		.uleb128 0x2
 487 0201 91       		.byte	0x91
 488 0202 6C       		.sleb128 -20
 489 0203 14       		.uleb128 0x14
 490 0204 74010000 		.4byte	0x174
 491 0208 02       		.uleb128 0x2
 492 0209 91       		.byte	0x91
 493 020a 70       		.sleb128 -16
 494 020b 15       		.uleb128 0x15
 495 020c 2A000000 		.4byte	.LBB7
 496 0210 52000000 		.4byte	.LBE7-.LBB7
 497 0214 16       		.uleb128 0x16
 498 0215 88010000 		.4byte	0x188
 499 0219 02       		.uleb128 0x2
 500 021a 91       		.byte	0x91
 501 021b 68       		.sleb128 -24
 502 021c 16       		.uleb128 0x16
 503 021d 94010000 		.4byte	0x194
 504 0221 02       		.uleb128 0x2
 505 0222 91       		.byte	0x91
 506 0223 60       		.sleb128 -32
 507 0224 16       		.uleb128 0x16
 508 0225 A0010000 		.4byte	0x1a0
 509 0229 02       		.uleb128 0x2
 510 022a 91       		.byte	0x91
 511 022b 64       		.sleb128 -28
 512 022c 00       		.byte	0
 513 022d 00       		.byte	0
 514 022e 17       		.uleb128 0x17
 515 022f 63010000 		.4byte	0x163
 516 0233 A4000000 		.4byte	.LBB8
 517 0237 52000000 		.4byte	.LBE8-.LBB8
 518 023b 01       		.byte	0x1
 519 023c 5C       		.byte	0x5c
 520 023d 14       		.uleb128 0x14
 521 023e 7E010000 		.4byte	0x17e
 522 0242 02       		.uleb128 0x2
 523 0243 91       		.byte	0x91
 524 0244 58       		.sleb128 -40
 525 0245 14       		.uleb128 0x14
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 25


 526 0246 74010000 		.4byte	0x174
 527 024a 02       		.uleb128 0x2
 528 024b 91       		.byte	0x91
 529 024c 5C       		.sleb128 -36
 530 024d 15       		.uleb128 0x15
 531 024e A4000000 		.4byte	.LBB9
 532 0252 52000000 		.4byte	.LBE9-.LBB9
 533 0256 16       		.uleb128 0x16
 534 0257 88010000 		.4byte	0x188
 535 025b 02       		.uleb128 0x2
 536 025c 91       		.byte	0x91
 537 025d 54       		.sleb128 -44
 538 025e 16       		.uleb128 0x16
 539 025f 94010000 		.4byte	0x194
 540 0263 02       		.uleb128 0x2
 541 0264 91       		.byte	0x91
 542 0265 4C       		.sleb128 -52
 543 0266 16       		.uleb128 0x16
 544 0267 A0010000 		.4byte	0x1a0
 545 026b 02       		.uleb128 0x2
 546 026c 91       		.byte	0x91
 547 026d 50       		.sleb128 -48
 548 026e 00       		.byte	0
 549 026f 00       		.byte	0
 550 0270 00       		.byte	0
 551 0271 18       		.uleb128 0x18
 552 0272 04       		.byte	0x4
 553 0273 57010000 		.4byte	0x157
 554 0277 00       		.byte	0
 555              		.section	.debug_abbrev,"",%progbits
 556              	.Ldebug_abbrev0:
 557 0000 01       		.uleb128 0x1
 558 0001 11       		.uleb128 0x11
 559 0002 01       		.byte	0x1
 560 0003 25       		.uleb128 0x25
 561 0004 0E       		.uleb128 0xe
 562 0005 13       		.uleb128 0x13
 563 0006 0B       		.uleb128 0xb
 564 0007 03       		.uleb128 0x3
 565 0008 0E       		.uleb128 0xe
 566 0009 1B       		.uleb128 0x1b
 567 000a 0E       		.uleb128 0xe
 568 000b 55       		.uleb128 0x55
 569 000c 17       		.uleb128 0x17
 570 000d 11       		.uleb128 0x11
 571 000e 01       		.uleb128 0x1
 572 000f 10       		.uleb128 0x10
 573 0010 17       		.uleb128 0x17
 574 0011 00       		.byte	0
 575 0012 00       		.byte	0
 576 0013 02       		.uleb128 0x2
 577 0014 24       		.uleb128 0x24
 578 0015 00       		.byte	0
 579 0016 0B       		.uleb128 0xb
 580 0017 0B       		.uleb128 0xb
 581 0018 3E       		.uleb128 0x3e
 582 0019 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 26


 583 001a 03       		.uleb128 0x3
 584 001b 0E       		.uleb128 0xe
 585 001c 00       		.byte	0
 586 001d 00       		.byte	0
 587 001e 03       		.uleb128 0x3
 588 001f 16       		.uleb128 0x16
 589 0020 00       		.byte	0
 590 0021 03       		.uleb128 0x3
 591 0022 0E       		.uleb128 0xe
 592 0023 3A       		.uleb128 0x3a
 593 0024 0B       		.uleb128 0xb
 594 0025 3B       		.uleb128 0x3b
 595 0026 0B       		.uleb128 0xb
 596 0027 49       		.uleb128 0x49
 597 0028 13       		.uleb128 0x13
 598 0029 00       		.byte	0
 599 002a 00       		.byte	0
 600 002b 04       		.uleb128 0x4
 601 002c 24       		.uleb128 0x24
 602 002d 00       		.byte	0
 603 002e 0B       		.uleb128 0xb
 604 002f 0B       		.uleb128 0xb
 605 0030 3E       		.uleb128 0x3e
 606 0031 0B       		.uleb128 0xb
 607 0032 03       		.uleb128 0x3
 608 0033 08       		.uleb128 0x8
 609 0034 00       		.byte	0
 610 0035 00       		.byte	0
 611 0036 05       		.uleb128 0x5
 612 0037 16       		.uleb128 0x16
 613 0038 00       		.byte	0
 614 0039 03       		.uleb128 0x3
 615 003a 0E       		.uleb128 0xe
 616 003b 3A       		.uleb128 0x3a
 617 003c 0B       		.uleb128 0xb
 618 003d 3B       		.uleb128 0x3b
 619 003e 05       		.uleb128 0x5
 620 003f 49       		.uleb128 0x49
 621 0040 13       		.uleb128 0x13
 622 0041 00       		.byte	0
 623 0042 00       		.byte	0
 624 0043 06       		.uleb128 0x6
 625 0044 13       		.uleb128 0x13
 626 0045 01       		.byte	0x1
 627 0046 0B       		.uleb128 0xb
 628 0047 0B       		.uleb128 0xb
 629 0048 3A       		.uleb128 0x3a
 630 0049 0B       		.uleb128 0xb
 631 004a 3B       		.uleb128 0x3b
 632 004b 05       		.uleb128 0x5
 633 004c 01       		.uleb128 0x1
 634 004d 13       		.uleb128 0x13
 635 004e 00       		.byte	0
 636 004f 00       		.byte	0
 637 0050 07       		.uleb128 0x7
 638 0051 0D       		.uleb128 0xd
 639 0052 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 27


 640 0053 03       		.uleb128 0x3
 641 0054 08       		.uleb128 0x8
 642 0055 3A       		.uleb128 0x3a
 643 0056 0B       		.uleb128 0xb
 644 0057 3B       		.uleb128 0x3b
 645 0058 05       		.uleb128 0x5
 646 0059 49       		.uleb128 0x49
 647 005a 13       		.uleb128 0x13
 648 005b 38       		.uleb128 0x38
 649 005c 0B       		.uleb128 0xb
 650 005d 00       		.byte	0
 651 005e 00       		.byte	0
 652 005f 08       		.uleb128 0x8
 653 0060 0D       		.uleb128 0xd
 654 0061 00       		.byte	0
 655 0062 03       		.uleb128 0x3
 656 0063 0E       		.uleb128 0xe
 657 0064 3A       		.uleb128 0x3a
 658 0065 0B       		.uleb128 0xb
 659 0066 3B       		.uleb128 0x3b
 660 0067 05       		.uleb128 0x5
 661 0068 49       		.uleb128 0x49
 662 0069 13       		.uleb128 0x13
 663 006a 38       		.uleb128 0x38
 664 006b 0B       		.uleb128 0xb
 665 006c 00       		.byte	0
 666 006d 00       		.byte	0
 667 006e 09       		.uleb128 0x9
 668 006f 01       		.uleb128 0x1
 669 0070 01       		.byte	0x1
 670 0071 49       		.uleb128 0x49
 671 0072 13       		.uleb128 0x13
 672 0073 01       		.uleb128 0x1
 673 0074 13       		.uleb128 0x13
 674 0075 00       		.byte	0
 675 0076 00       		.byte	0
 676 0077 0A       		.uleb128 0xa
 677 0078 21       		.uleb128 0x21
 678 0079 00       		.byte	0
 679 007a 49       		.uleb128 0x49
 680 007b 13       		.uleb128 0x13
 681 007c 2F       		.uleb128 0x2f
 682 007d 0B       		.uleb128 0xb
 683 007e 00       		.byte	0
 684 007f 00       		.byte	0
 685 0080 0B       		.uleb128 0xb
 686 0081 2E       		.uleb128 0x2e
 687 0082 01       		.byte	0x1
 688 0083 03       		.uleb128 0x3
 689 0084 0E       		.uleb128 0xe
 690 0085 3A       		.uleb128 0x3a
 691 0086 0B       		.uleb128 0xb
 692 0087 3B       		.uleb128 0x3b
 693 0088 05       		.uleb128 0x5
 694 0089 27       		.uleb128 0x27
 695 008a 19       		.uleb128 0x19
 696 008b 49       		.uleb128 0x49
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 28


 697 008c 13       		.uleb128 0x13
 698 008d 20       		.uleb128 0x20
 699 008e 0B       		.uleb128 0xb
 700 008f 01       		.uleb128 0x1
 701 0090 13       		.uleb128 0x13
 702 0091 00       		.byte	0
 703 0092 00       		.byte	0
 704 0093 0C       		.uleb128 0xc
 705 0094 05       		.uleb128 0x5
 706 0095 00       		.byte	0
 707 0096 03       		.uleb128 0x3
 708 0097 08       		.uleb128 0x8
 709 0098 3A       		.uleb128 0x3a
 710 0099 0B       		.uleb128 0xb
 711 009a 3B       		.uleb128 0x3b
 712 009b 05       		.uleb128 0x5
 713 009c 49       		.uleb128 0x49
 714 009d 13       		.uleb128 0x13
 715 009e 00       		.byte	0
 716 009f 00       		.byte	0
 717 00a0 0D       		.uleb128 0xd
 718 00a1 34       		.uleb128 0x34
 719 00a2 00       		.byte	0
 720 00a3 03       		.uleb128 0x3
 721 00a4 0E       		.uleb128 0xe
 722 00a5 3A       		.uleb128 0x3a
 723 00a6 0B       		.uleb128 0xb
 724 00a7 3B       		.uleb128 0x3b
 725 00a8 05       		.uleb128 0x5
 726 00a9 49       		.uleb128 0x49
 727 00aa 13       		.uleb128 0x13
 728 00ab 00       		.byte	0
 729 00ac 00       		.byte	0
 730 00ad 0E       		.uleb128 0xe
 731 00ae 34       		.uleb128 0x34
 732 00af 00       		.byte	0
 733 00b0 03       		.uleb128 0x3
 734 00b1 08       		.uleb128 0x8
 735 00b2 3A       		.uleb128 0x3a
 736 00b3 0B       		.uleb128 0xb
 737 00b4 3B       		.uleb128 0x3b
 738 00b5 05       		.uleb128 0x5
 739 00b6 49       		.uleb128 0x49
 740 00b7 13       		.uleb128 0x13
 741 00b8 00       		.byte	0
 742 00b9 00       		.byte	0
 743 00ba 0F       		.uleb128 0xf
 744 00bb 2E       		.uleb128 0x2e
 745 00bc 01       		.byte	0x1
 746 00bd 3F       		.uleb128 0x3f
 747 00be 19       		.uleb128 0x19
 748 00bf 03       		.uleb128 0x3
 749 00c0 0E       		.uleb128 0xe
 750 00c1 3A       		.uleb128 0x3a
 751 00c2 0B       		.uleb128 0xb
 752 00c3 3B       		.uleb128 0x3b
 753 00c4 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 29


 754 00c5 27       		.uleb128 0x27
 755 00c6 19       		.uleb128 0x19
 756 00c7 11       		.uleb128 0x11
 757 00c8 01       		.uleb128 0x1
 758 00c9 12       		.uleb128 0x12
 759 00ca 06       		.uleb128 0x6
 760 00cb 40       		.uleb128 0x40
 761 00cc 18       		.uleb128 0x18
 762 00cd 9642     		.uleb128 0x2116
 763 00cf 19       		.uleb128 0x19
 764 00d0 01       		.uleb128 0x1
 765 00d1 13       		.uleb128 0x13
 766 00d2 00       		.byte	0
 767 00d3 00       		.byte	0
 768 00d4 10       		.uleb128 0x10
 769 00d5 05       		.uleb128 0x5
 770 00d6 00       		.byte	0
 771 00d7 03       		.uleb128 0x3
 772 00d8 08       		.uleb128 0x8
 773 00d9 3A       		.uleb128 0x3a
 774 00da 0B       		.uleb128 0xb
 775 00db 3B       		.uleb128 0x3b
 776 00dc 0B       		.uleb128 0xb
 777 00dd 49       		.uleb128 0x49
 778 00de 13       		.uleb128 0x13
 779 00df 02       		.uleb128 0x2
 780 00e0 18       		.uleb128 0x18
 781 00e1 00       		.byte	0
 782 00e2 00       		.byte	0
 783 00e3 11       		.uleb128 0x11
 784 00e4 05       		.uleb128 0x5
 785 00e5 00       		.byte	0
 786 00e6 03       		.uleb128 0x3
 787 00e7 0E       		.uleb128 0xe
 788 00e8 3A       		.uleb128 0x3a
 789 00e9 0B       		.uleb128 0xb
 790 00ea 3B       		.uleb128 0x3b
 791 00eb 0B       		.uleb128 0xb
 792 00ec 49       		.uleb128 0x49
 793 00ed 13       		.uleb128 0x13
 794 00ee 02       		.uleb128 0x2
 795 00ef 18       		.uleb128 0x18
 796 00f0 00       		.byte	0
 797 00f1 00       		.byte	0
 798 00f2 12       		.uleb128 0x12
 799 00f3 34       		.uleb128 0x34
 800 00f4 00       		.byte	0
 801 00f5 03       		.uleb128 0x3
 802 00f6 0E       		.uleb128 0xe
 803 00f7 3A       		.uleb128 0x3a
 804 00f8 0B       		.uleb128 0xb
 805 00f9 3B       		.uleb128 0x3b
 806 00fa 0B       		.uleb128 0xb
 807 00fb 49       		.uleb128 0x49
 808 00fc 13       		.uleb128 0x13
 809 00fd 02       		.uleb128 0x2
 810 00fe 18       		.uleb128 0x18
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 30


 811 00ff 00       		.byte	0
 812 0100 00       		.byte	0
 813 0101 13       		.uleb128 0x13
 814 0102 1D       		.uleb128 0x1d
 815 0103 01       		.byte	0x1
 816 0104 31       		.uleb128 0x31
 817 0105 13       		.uleb128 0x13
 818 0106 11       		.uleb128 0x11
 819 0107 01       		.uleb128 0x1
 820 0108 12       		.uleb128 0x12
 821 0109 06       		.uleb128 0x6
 822 010a 58       		.uleb128 0x58
 823 010b 0B       		.uleb128 0xb
 824 010c 59       		.uleb128 0x59
 825 010d 0B       		.uleb128 0xb
 826 010e 01       		.uleb128 0x1
 827 010f 13       		.uleb128 0x13
 828 0110 00       		.byte	0
 829 0111 00       		.byte	0
 830 0112 14       		.uleb128 0x14
 831 0113 05       		.uleb128 0x5
 832 0114 00       		.byte	0
 833 0115 31       		.uleb128 0x31
 834 0116 13       		.uleb128 0x13
 835 0117 02       		.uleb128 0x2
 836 0118 18       		.uleb128 0x18
 837 0119 00       		.byte	0
 838 011a 00       		.byte	0
 839 011b 15       		.uleb128 0x15
 840 011c 0B       		.uleb128 0xb
 841 011d 01       		.byte	0x1
 842 011e 11       		.uleb128 0x11
 843 011f 01       		.uleb128 0x1
 844 0120 12       		.uleb128 0x12
 845 0121 06       		.uleb128 0x6
 846 0122 00       		.byte	0
 847 0123 00       		.byte	0
 848 0124 16       		.uleb128 0x16
 849 0125 34       		.uleb128 0x34
 850 0126 00       		.byte	0
 851 0127 31       		.uleb128 0x31
 852 0128 13       		.uleb128 0x13
 853 0129 02       		.uleb128 0x2
 854 012a 18       		.uleb128 0x18
 855 012b 00       		.byte	0
 856 012c 00       		.byte	0
 857 012d 17       		.uleb128 0x17
 858 012e 1D       		.uleb128 0x1d
 859 012f 01       		.byte	0x1
 860 0130 31       		.uleb128 0x31
 861 0131 13       		.uleb128 0x13
 862 0132 11       		.uleb128 0x11
 863 0133 01       		.uleb128 0x1
 864 0134 12       		.uleb128 0x12
 865 0135 06       		.uleb128 0x6
 866 0136 58       		.uleb128 0x58
 867 0137 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 31


 868 0138 59       		.uleb128 0x59
 869 0139 0B       		.uleb128 0xb
 870 013a 00       		.byte	0
 871 013b 00       		.byte	0
 872 013c 18       		.uleb128 0x18
 873 013d 0F       		.uleb128 0xf
 874 013e 00       		.byte	0
 875 013f 0B       		.uleb128 0xb
 876 0140 0B       		.uleb128 0xb
 877 0141 49       		.uleb128 0x49
 878 0142 13       		.uleb128 0x13
 879 0143 00       		.byte	0
 880 0144 00       		.byte	0
 881 0145 00       		.byte	0
 882              		.section	.debug_aranges,"",%progbits
 883 0000 1C000000 		.4byte	0x1c
 884 0004 0200     		.2byte	0x2
 885 0006 00000000 		.4byte	.Ldebug_info0
 886 000a 04       		.byte	0x4
 887 000b 00       		.byte	0
 888 000c 0000     		.2byte	0
 889 000e 0000     		.2byte	0
 890 0010 00000000 		.4byte	.LFB82
 891 0014 1E010000 		.4byte	.LFE82-.LFB82
 892 0018 00000000 		.4byte	0
 893 001c 00000000 		.4byte	0
 894              		.section	.debug_ranges,"",%progbits
 895              	.Ldebug_ranges0:
 896 0000 00000000 		.4byte	.LFB82
 897 0004 1E010000 		.4byte	.LFE82
 898 0008 00000000 		.4byte	0
 899 000c 00000000 		.4byte	0
 900              		.section	.debug_line,"",%progbits
 901              	.Ldebug_line0:
 902 0000 AA010000 		.section	.debug_str,"MS",%progbits,1
 902      02005401 
 902      00000201 
 902      FB0E0D00 
 902      01010101 
 903              	.LASF22:
 904 0000 73746174 		.ascii	"state\000"
 904      6500
 905              	.LASF5:
 906 0006 5F5F696E 		.ascii	"__int32_t\000"
 906      7433325F 
 906      7400
 907              	.LASF29:
 908 0010 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 908      73657273 
 908      5C666E65 
 908      7665735C 
 908      446F6375 
 909 003d 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 909      655F7370 
 909      6565645F 
 909      73656E73 
 909      6F722E63 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 32


 910              	.LASF21:
 911 0056 7133315F 		.ascii	"q31_t\000"
 911      7400
 912              	.LASF31:
 913 005c 61726D5F 		.ascii	"arm_pid_init_q15\000"
 913      7069645F 
 913      696E6974 
 913      5F713135 
 913      00
 914              	.LASF20:
 915 006d 7131355F 		.ascii	"q15_t\000"
 915      7400
 916              	.LASF18:
 917 0073 666C6F61 		.ascii	"float\000"
 917      7400
 918              	.LASF8:
 919 0079 6C6F6E67 		.ascii	"long unsigned int\000"
 919      20756E73 
 919      69676E65 
 919      6420696E 
 919      7400
 920              	.LASF32:
 921 008b 74656D70 		.ascii	"temp\000"
 921      00
 922              	.LASF3:
 923 0090 73686F72 		.ascii	"short unsigned int\000"
 923      7420756E 
 923      7369676E 
 923      65642069 
 923      6E7400
 924              	.LASF25:
 925 00a3 6E65674D 		.ascii	"negMin\000"
 925      696E00
 926              	.LASF28:
 927 00aa 536F7572 		.ascii	"Source\\ControllerFunctions\\arm_pid_init_q15.c\000"
 927      63655C43 
 927      6F6E7472 
 927      6F6C6C65 
 927      7246756E 
 928              	.LASF17:
 929 00d8 646F7562 		.ascii	"double\000"
 929      6C6500
 930              	.LASF7:
 931 00df 5F5F7569 		.ascii	"__uint32_t\000"
 931      6E743332 
 931      5F7400
 932              	.LASF4:
 933 00ea 5F5F696E 		.ascii	"__int16_t\000"
 933      7431365F 
 933      7400
 934              	.LASF1:
 935 00f4 756E7369 		.ascii	"unsigned char\000"
 935      676E6564 
 935      20636861 
 935      7200
 936              	.LASF11:
 937 0102 756E7369 		.ascii	"unsigned int\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 33


 937      676E6564 
 937      20696E74 
 937      00
 938              	.LASF10:
 939 010f 6C6F6E67 		.ascii	"long long unsigned int\000"
 939      206C6F6E 
 939      6720756E 
 939      7369676E 
 939      65642069 
 940              	.LASF27:
 941 0126 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 941      4320342E 
 941      392E3320 
 941      32303135 
 941      30333033 
 942 0159 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 942      20726576 
 942      6973696F 
 942      6E203232 
 942      31323230 
 943 018c 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 943      30202D66 
 943      66756E63 
 943      74696F6E 
 943      2D736563 
 944              	.LASF12:
 945 01b8 696E7431 		.ascii	"int16_t\000"
 945      365F7400 
 946              	.LASF30:
 947 01c0 5F5F5353 		.ascii	"__SSAT\000"
 947      415400
 948              	.LASF26:
 949 01c7 72657365 		.ascii	"resetStateFlag\000"
 949      74537461 
 949      7465466C 
 949      616700
 950              	.LASF15:
 951 01d6 73697A65 		.ascii	"sizetype\000"
 951      74797065 
 951      00
 952              	.LASF9:
 953 01df 6C6F6E67 		.ascii	"long long int\000"
 953      206C6F6E 
 953      6720696E 
 953      7400
 954              	.LASF16:
 955 01ed 63686172 		.ascii	"char\000"
 955      00
 956              	.LASF13:
 957 01f2 696E7433 		.ascii	"int32_t\000"
 957      325F7400 
 958              	.LASF2:
 959 01fa 73686F72 		.ascii	"short int\000"
 959      7420696E 
 959      7400
 960              	.LASF24:
 961 0204 706F734D 		.ascii	"posMax\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccCngsof.s 			page 34


 961      617800
 962              	.LASF14:
 963 020b 75696E74 		.ascii	"uint32_t\000"
 963      33325F74 
 963      00
 964              	.LASF6:
 965 0214 6C6F6E67 		.ascii	"long int\000"
 965      20696E74 
 965      00
 966              	.LASF19:
 967 021d 6C6F6E67 		.ascii	"long double\000"
 967      20646F75 
 967      626C6500 
 968              	.LASF0:
 969 0229 7369676E 		.ascii	"signed char\000"
 969      65642063 
 969      68617200 
 970              	.LASF23:
 971 0235 61726D5F 		.ascii	"arm_pid_instance_q15\000"
 971      7069645F 
 971      696E7374 
 971      616E6365 
 971      5F713135 
 972              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
