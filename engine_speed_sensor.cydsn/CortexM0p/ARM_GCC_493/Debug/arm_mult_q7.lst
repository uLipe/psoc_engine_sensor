ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_mult_q7.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_mult_q7,"ax",%progbits
  18              		.align	2
  19              		.global	arm_mult_q7
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_mult_q7, %function
  23              	arm_mult_q7:
  24              	.LFB82:
  25              		.file 1 "Source\\BasicMathFunctions\\arm_mult_q7.c"
   1:Source\BasicMathFunctions/arm_mult_q7.c **** /* ----------------------------------------------------------------------
   2:Source\BasicMathFunctions/arm_mult_q7.c ****  * Project:      CMSIS DSP Library
   3:Source\BasicMathFunctions/arm_mult_q7.c ****  * Title:        arm_mult_q7.c
   4:Source\BasicMathFunctions/arm_mult_q7.c ****  * Description:  Q7 vector multiplication
   5:Source\BasicMathFunctions/arm_mult_q7.c ****  *
   6:Source\BasicMathFunctions/arm_mult_q7.c ****  * $Date:        27. January 2017
   7:Source\BasicMathFunctions/arm_mult_q7.c ****  * $Revision:    V.1.5.1
   8:Source\BasicMathFunctions/arm_mult_q7.c ****  *
   9:Source\BasicMathFunctions/arm_mult_q7.c ****  * Target Processor: Cortex-M cores
  10:Source\BasicMathFunctions/arm_mult_q7.c ****  * -------------------------------------------------------------------- */
  11:Source\BasicMathFunctions/arm_mult_q7.c **** /*
  12:Source\BasicMathFunctions/arm_mult_q7.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\BasicMathFunctions/arm_mult_q7.c ****  *
  14:Source\BasicMathFunctions/arm_mult_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\BasicMathFunctions/arm_mult_q7.c ****  *
  16:Source\BasicMathFunctions/arm_mult_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\BasicMathFunctions/arm_mult_q7.c ****  * not use this file except in compliance with the License.
  18:Source\BasicMathFunctions/arm_mult_q7.c ****  * You may obtain a copy of the License at
  19:Source\BasicMathFunctions/arm_mult_q7.c ****  *
  20:Source\BasicMathFunctions/arm_mult_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\BasicMathFunctions/arm_mult_q7.c ****  *
  22:Source\BasicMathFunctions/arm_mult_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\BasicMathFunctions/arm_mult_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\BasicMathFunctions/arm_mult_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\BasicMathFunctions/arm_mult_q7.c ****  * See the License for the specific language governing permissions and
  26:Source\BasicMathFunctions/arm_mult_q7.c ****  * limitations under the License.
  27:Source\BasicMathFunctions/arm_mult_q7.c ****  */
  28:Source\BasicMathFunctions/arm_mult_q7.c **** 
  29:Source\BasicMathFunctions/arm_mult_q7.c **** #include "arm_math.h"
  30:Source\BasicMathFunctions/arm_mult_q7.c **** 
  31:Source\BasicMathFunctions/arm_mult_q7.c **** /**
  32:Source\BasicMathFunctions/arm_mult_q7.c ****  * @ingroup groupMath
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 2


  33:Source\BasicMathFunctions/arm_mult_q7.c ****  */
  34:Source\BasicMathFunctions/arm_mult_q7.c **** 
  35:Source\BasicMathFunctions/arm_mult_q7.c **** /**
  36:Source\BasicMathFunctions/arm_mult_q7.c ****  * @addtogroup BasicMult
  37:Source\BasicMathFunctions/arm_mult_q7.c ****  * @{
  38:Source\BasicMathFunctions/arm_mult_q7.c ****  */
  39:Source\BasicMathFunctions/arm_mult_q7.c **** 
  40:Source\BasicMathFunctions/arm_mult_q7.c **** /**
  41:Source\BasicMathFunctions/arm_mult_q7.c ****  * @brief           Q7 vector multiplication
  42:Source\BasicMathFunctions/arm_mult_q7.c ****  * @param[in]       *pSrcA points to the first input vector
  43:Source\BasicMathFunctions/arm_mult_q7.c ****  * @param[in]       *pSrcB points to the second input vector
  44:Source\BasicMathFunctions/arm_mult_q7.c ****  * @param[out]      *pDst points to the output vector
  45:Source\BasicMathFunctions/arm_mult_q7.c ****  * @param[in]       blockSize number of samples in each vector
  46:Source\BasicMathFunctions/arm_mult_q7.c ****  * @return none.
  47:Source\BasicMathFunctions/arm_mult_q7.c ****  *
  48:Source\BasicMathFunctions/arm_mult_q7.c ****  * <b>Scaling and Overflow Behavior:</b>
  49:Source\BasicMathFunctions/arm_mult_q7.c ****  * \par
  50:Source\BasicMathFunctions/arm_mult_q7.c ****  * The function uses saturating arithmetic.
  51:Source\BasicMathFunctions/arm_mult_q7.c ****  * Results outside of the allowable Q7 range [0x80 0x7F] will be saturated.
  52:Source\BasicMathFunctions/arm_mult_q7.c ****  */
  53:Source\BasicMathFunctions/arm_mult_q7.c **** 
  54:Source\BasicMathFunctions/arm_mult_q7.c **** void arm_mult_q7(
  55:Source\BasicMathFunctions/arm_mult_q7.c ****   q7_t * pSrcA,
  56:Source\BasicMathFunctions/arm_mult_q7.c ****   q7_t * pSrcB,
  57:Source\BasicMathFunctions/arm_mult_q7.c ****   q7_t * pDst,
  58:Source\BasicMathFunctions/arm_mult_q7.c ****   uint32_t blockSize)
  59:Source\BasicMathFunctions/arm_mult_q7.c **** {
  26              		.loc 1 59 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 8AB0     		sub	sp, sp, #40
  33              		.cfi_def_cfa_offset 48
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
  37 0008 B960     		str	r1, [r7, #8]
  38 000a 7A60     		str	r2, [r7, #4]
  39 000c 3B60     		str	r3, [r7]
  60:Source\BasicMathFunctions/arm_mult_q7.c ****   uint32_t blkCnt;                               /* loop counters */
  61:Source\BasicMathFunctions/arm_mult_q7.c **** 
  62:Source\BasicMathFunctions/arm_mult_q7.c **** #if defined (ARM_MATH_DSP)
  63:Source\BasicMathFunctions/arm_mult_q7.c **** 
  64:Source\BasicMathFunctions/arm_mult_q7.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  65:Source\BasicMathFunctions/arm_mult_q7.c ****   q7_t out1, out2, out3, out4;                   /* Temporary variables to store the product */
  66:Source\BasicMathFunctions/arm_mult_q7.c **** 
  67:Source\BasicMathFunctions/arm_mult_q7.c ****   /* loop Unrolling */
  68:Source\BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize >> 2u;
  69:Source\BasicMathFunctions/arm_mult_q7.c **** 
  70:Source\BasicMathFunctions/arm_mult_q7.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  71:Source\BasicMathFunctions/arm_mult_q7.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  72:Source\BasicMathFunctions/arm_mult_q7.c ****   while (blkCnt > 0u)
  73:Source\BasicMathFunctions/arm_mult_q7.c ****   {
  74:Source\BasicMathFunctions/arm_mult_q7.c ****     /* C = A * B */
  75:Source\BasicMathFunctions/arm_mult_q7.c ****     /* Multiply the inputs and store the results in temporary variables */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 3


  76:Source\BasicMathFunctions/arm_mult_q7.c ****     out1 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  77:Source\BasicMathFunctions/arm_mult_q7.c ****     out2 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  78:Source\BasicMathFunctions/arm_mult_q7.c ****     out3 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  79:Source\BasicMathFunctions/arm_mult_q7.c ****     out4 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  80:Source\BasicMathFunctions/arm_mult_q7.c **** 
  81:Source\BasicMathFunctions/arm_mult_q7.c ****     /* Store the results of 4 inputs in the destination buffer in single cycle by packing */
  82:Source\BasicMathFunctions/arm_mult_q7.c ****     *__SIMD32(pDst)++ = __PACKq7(out1, out2, out3, out4);
  83:Source\BasicMathFunctions/arm_mult_q7.c **** 
  84:Source\BasicMathFunctions/arm_mult_q7.c ****     /* Decrement the blockSize loop counter */
  85:Source\BasicMathFunctions/arm_mult_q7.c ****     blkCnt--;
  86:Source\BasicMathFunctions/arm_mult_q7.c ****   }
  87:Source\BasicMathFunctions/arm_mult_q7.c **** 
  88:Source\BasicMathFunctions/arm_mult_q7.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
  89:Source\BasicMathFunctions/arm_mult_q7.c ****    ** No loop unrolling is used. */
  90:Source\BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize % 0x4u;
  91:Source\BasicMathFunctions/arm_mult_q7.c **** 
  92:Source\BasicMathFunctions/arm_mult_q7.c **** #else
  93:Source\BasicMathFunctions/arm_mult_q7.c **** 
  94:Source\BasicMathFunctions/arm_mult_q7.c ****   /* Run the below code for Cortex-M0 */
  95:Source\BasicMathFunctions/arm_mult_q7.c **** 
  96:Source\BasicMathFunctions/arm_mult_q7.c ****   /* Initialize blkCnt with number of samples */
  97:Source\BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize;
  40              		.loc 1 97 0
  41 000e 3B68     		ldr	r3, [r7]
  42 0010 7B62     		str	r3, [r7, #36]
  98:Source\BasicMathFunctions/arm_mult_q7.c **** 
  99:Source\BasicMathFunctions/arm_mult_q7.c **** #endif /* #if defined (ARM_MATH_DSP) */
 100:Source\BasicMathFunctions/arm_mult_q7.c **** 
 101:Source\BasicMathFunctions/arm_mult_q7.c **** 
 102:Source\BasicMathFunctions/arm_mult_q7.c ****   while (blkCnt > 0u)
  43              		.loc 1 102 0
  44 0012 3FE0     		b	.L2
  45              	.L9:
 103:Source\BasicMathFunctions/arm_mult_q7.c ****   {
 104:Source\BasicMathFunctions/arm_mult_q7.c ****     /* C = A * B */
 105:Source\BasicMathFunctions/arm_mult_q7.c ****     /* Multiply the inputs and store the result in the destination buffer */
 106:Source\BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  46              		.loc 1 106 0
  47 0014 7B68     		ldr	r3, [r7, #4]
  48 0016 5A1C     		add	r2, r3, #1
  49 0018 7A60     		str	r2, [r7, #4]
  50 001a FA68     		ldr	r2, [r7, #12]
  51 001c 511C     		add	r1, r2, #1
  52 001e F960     		str	r1, [r7, #12]
  53 0020 1278     		ldrb	r2, [r2]
  54 0022 51B2     		sxtb	r1, r2
  55 0024 BA68     		ldr	r2, [r7, #8]
  56 0026 501C     		add	r0, r2, #1
  57 0028 B860     		str	r0, [r7, #8]
  58 002a 1278     		ldrb	r2, [r2]
  59 002c 52B2     		sxtb	r2, r2
  60 002e 4A43     		mul	r2, r1
  61 0030 D211     		asr	r2, r2, #7
  62 0032 3A62     		str	r2, [r7, #32]
  63 0034 0822     		mov	r2, #8
  64 0036 FA61     		str	r2, [r7, #28]
  65              	.LBB4:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 4


  66              	.LBB5:
  67              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 5


  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 6


 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 7


 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 8


 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 9


 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 10


 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 11


 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 12


 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 13


 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 14


 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 15


 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 16


 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
  68              		.loc 2 699 0
  69 0038 0122     		mov	r2, #1
  70 003a BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  71              		.loc 2 700 0
  72 003c 0022     		mov	r2, #0
  73 003e 7A61     		str	r2, [r7, #20]
  74 0040 05E0     		b	.L3
  75              	.L4:
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
  76              		.loc 2 702 0
  77 0042 BA69     		ldr	r2, [r7, #24]
  78 0044 5200     		lsl	r2, r2, #1
  79 0046 BA61     		str	r2, [r7, #24]
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
  80              		.loc 2 700 0
  81 0048 7A69     		ldr	r2, [r7, #20]
  82 004a 0132     		add	r2, r2, #1
  83 004c 7A61     		str	r2, [r7, #20]
  84              	.L3:
  85 004e FA69     		ldr	r2, [r7, #28]
  86 0050 013A     		sub	r2, r2, #1
  87 0052 7969     		ldr	r1, [r7, #20]
  88 0054 9142     		cmp	r1, r2
  89 0056 F4D3     		bcc	.L4
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
  90              		.loc 2 705 0
  91 0058 3A6A     		ldr	r2, [r7, #32]
  92 005a 002A     		cmp	r2, #0
  93 005c 09DD     		ble	.L5
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
  94              		.loc 2 707 0
  95 005e BA69     		ldr	r2, [r7, #24]
  96 0060 013A     		sub	r2, r2, #1
  97 0062 BA61     		str	r2, [r7, #24]
 708:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 17


 709:.\Include/arm_math.h ****       if (x > posMax)
  98              		.loc 2 709 0
  99 0064 396A     		ldr	r1, [r7, #32]
 100 0066 BA69     		ldr	r2, [r7, #24]
 101 0068 9142     		cmp	r1, r2
 102 006a 0CDD     		ble	.L10
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 103              		.loc 2 711 0
 104 006c BA69     		ldr	r2, [r7, #24]
 105 006e 3A62     		str	r2, [r7, #32]
 106 0070 0AE0     		b	.L7
 107              	.L5:
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
 716:.\Include/arm_math.h ****       negMin = -posMax;
 108              		.loc 2 716 0
 109 0072 BA69     		ldr	r2, [r7, #24]
 110 0074 5242     		neg	r2, r2
 111 0076 3A61     		str	r2, [r7, #16]
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 112              		.loc 2 718 0
 113 0078 396A     		ldr	r1, [r7, #32]
 114 007a 3A69     		ldr	r2, [r7, #16]
 115 007c 9142     		cmp	r1, r2
 116 007e 03DA     		bge	.L7
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 117              		.loc 2 720 0
 118 0080 3A69     		ldr	r2, [r7, #16]
 119 0082 3A62     		str	r2, [r7, #32]
 120 0084 00E0     		b	.L7
 121              	.L10:
 711:.\Include/arm_math.h ****       }
 122              		.loc 2 711 0
 123 0086 C046     		mov	r8, r8
 124              	.L7:
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 125              		.loc 2 723 0
 126 0088 3A6A     		ldr	r2, [r7, #32]
 127              	.LBE5:
 128              	.LBE4:
 129              		.loc 1 106 0
 130 008a D2B2     		uxtb	r2, r2
 131 008c 1A70     		strb	r2, [r3]
 107:Source\BasicMathFunctions/arm_mult_q7.c **** 
 108:Source\BasicMathFunctions/arm_mult_q7.c ****     /* Decrement the blockSize loop counter */
 109:Source\BasicMathFunctions/arm_mult_q7.c ****     blkCnt--;
 132              		.loc 1 109 0
 133 008e 7B6A     		ldr	r3, [r7, #36]
 134 0090 013B     		sub	r3, r3, #1
 135 0092 7B62     		str	r3, [r7, #36]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 18


 136              	.L2:
 102:Source\BasicMathFunctions/arm_mult_q7.c ****   {
 137              		.loc 1 102 0
 138 0094 7B6A     		ldr	r3, [r7, #36]
 139 0096 002B     		cmp	r3, #0
 140 0098 BCD1     		bne	.L9
 110:Source\BasicMathFunctions/arm_mult_q7.c ****   }
 111:Source\BasicMathFunctions/arm_mult_q7.c **** }
 141              		.loc 1 111 0
 142 009a BD46     		mov	sp, r7
 143 009c 0AB0     		add	sp, sp, #40
 144              		@ sp needed
 145 009e 80BD     		pop	{r7, pc}
 146              		.cfi_endproc
 147              	.LFE82:
 148              		.size	arm_mult_q7, .-arm_mult_q7
 149              		.text
 150              	.Letext0:
 151              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 152              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 153              		.section	.debug_info,"",%progbits
 154              	.Ldebug_info0:
 155 0000 EF010000 		.4byte	0x1ef
 156 0004 0400     		.2byte	0x4
 157 0006 00000000 		.4byte	.Ldebug_abbrev0
 158 000a 04       		.byte	0x4
 159 000b 01       		.uleb128 0x1
 160 000c 31010000 		.4byte	.LASF31
 161 0010 01       		.byte	0x1
 162 0011 00000000 		.4byte	.LASF32
 163 0015 51000000 		.4byte	.LASF33
 164 0019 00000000 		.4byte	.Ldebug_ranges0+0
 165 001d 00000000 		.4byte	0
 166 0021 00000000 		.4byte	.Ldebug_line0
 167 0025 02       		.uleb128 0x2
 168 0026 28000000 		.4byte	.LASF2
 169 002a 03       		.byte	0x3
 170 002b 1B       		.byte	0x1b
 171 002c 30000000 		.4byte	0x30
 172 0030 03       		.uleb128 0x3
 173 0031 01       		.byte	0x1
 174 0032 06       		.byte	0x6
 175 0033 3B020000 		.4byte	.LASF0
 176 0037 03       		.uleb128 0x3
 177 0038 01       		.byte	0x1
 178 0039 08       		.byte	0x8
 179 003a B0000000 		.4byte	.LASF1
 180 003e 02       		.uleb128 0x2
 181 003f 31000000 		.4byte	.LASF3
 182 0043 03       		.byte	0x3
 183 0044 29       		.byte	0x29
 184 0045 49000000 		.4byte	0x49
 185 0049 03       		.uleb128 0x3
 186 004a 02       		.byte	0x2
 187 004b 05       		.byte	0x5
 188 004c 00020000 		.4byte	.LASF4
 189 0050 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 19


 190 0051 02       		.byte	0x2
 191 0052 07       		.byte	0x7
 192 0053 D7000000 		.4byte	.LASF5
 193 0057 02       		.uleb128 0x2
 194 0058 47000000 		.4byte	.LASF6
 195 005c 03       		.byte	0x3
 196 005d 3F       		.byte	0x3f
 197 005e 62000000 		.4byte	0x62
 198 0062 03       		.uleb128 0x3
 199 0063 04       		.byte	0x4
 200 0064 05       		.byte	0x5
 201 0065 26020000 		.4byte	.LASF7
 202 0069 02       		.uleb128 0x2
 203 006a FD000000 		.4byte	.LASF8
 204 006e 03       		.byte	0x3
 205 006f 41       		.byte	0x41
 206 0070 74000000 		.4byte	0x74
 207 0074 03       		.uleb128 0x3
 208 0075 04       		.byte	0x4
 209 0076 07       		.byte	0x7
 210 0077 C5000000 		.4byte	.LASF9
 211 007b 03       		.uleb128 0x3
 212 007c 08       		.byte	0x8
 213 007d 05       		.byte	0x5
 214 007e E3010000 		.4byte	.LASF10
 215 0082 03       		.uleb128 0x3
 216 0083 08       		.byte	0x8
 217 0084 07       		.byte	0x7
 218 0085 1A010000 		.4byte	.LASF11
 219 0089 04       		.uleb128 0x4
 220 008a 04       		.byte	0x4
 221 008b 05       		.byte	0x5
 222 008c 696E7400 		.ascii	"int\000"
 223 0090 03       		.uleb128 0x3
 224 0091 04       		.byte	0x4
 225 0092 07       		.byte	0x7
 226 0093 0D010000 		.4byte	.LASF12
 227 0097 02       		.uleb128 0x2
 228 0098 97000000 		.4byte	.LASF13
 229 009c 04       		.byte	0x4
 230 009d 14       		.byte	0x14
 231 009e 25000000 		.4byte	0x25
 232 00a2 02       		.uleb128 0x2
 233 00a3 C3010000 		.4byte	.LASF14
 234 00a7 04       		.byte	0x4
 235 00a8 20       		.byte	0x20
 236 00a9 3E000000 		.4byte	0x3e
 237 00ad 02       		.uleb128 0x2
 238 00ae D2010000 		.4byte	.LASF15
 239 00b2 04       		.byte	0x4
 240 00b3 2C       		.byte	0x2c
 241 00b4 57000000 		.4byte	0x57
 242 00b8 02       		.uleb128 0x2
 243 00b9 1D020000 		.4byte	.LASF16
 244 00bd 04       		.byte	0x4
 245 00be 2D       		.byte	0x2d
 246 00bf 69000000 		.4byte	0x69
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 20


 247 00c3 03       		.uleb128 0x3
 248 00c4 04       		.byte	0x4
 249 00c5 07       		.byte	0x7
 250 00c6 DA010000 		.4byte	.LASF17
 251 00ca 03       		.uleb128 0x3
 252 00cb 01       		.byte	0x1
 253 00cc 08       		.byte	0x8
 254 00cd FB010000 		.4byte	.LASF18
 255 00d1 03       		.uleb128 0x3
 256 00d2 08       		.byte	0x8
 257 00d3 04       		.byte	0x4
 258 00d4 F6000000 		.4byte	.LASF19
 259 00d8 03       		.uleb128 0x3
 260 00d9 04       		.byte	0x4
 261 00da 04       		.byte	0x4
 262 00db A4000000 		.4byte	.LASF20
 263 00df 03       		.uleb128 0x3
 264 00e0 08       		.byte	0x8
 265 00e1 04       		.byte	0x4
 266 00e2 2F020000 		.4byte	.LASF21
 267 00e6 05       		.uleb128 0x5
 268 00e7 08010000 		.4byte	.LASF22
 269 00eb 02       		.byte	0x2
 270 00ec 9101     		.2byte	0x191
 271 00ee 97000000 		.4byte	0x97
 272 00f2 05       		.uleb128 0x5
 273 00f3 9E000000 		.4byte	.LASF23
 274 00f7 02       		.byte	0x2
 275 00f8 9601     		.2byte	0x196
 276 00fa A2000000 		.4byte	0xa2
 277 00fe 05       		.uleb128 0x5
 278 00ff AA000000 		.4byte	.LASF24
 279 0103 02       		.byte	0x2
 280 0104 9B01     		.2byte	0x19b
 281 0106 AD000000 		.4byte	0xad
 282 010a 06       		.uleb128 0x6
 283 010b 04       		.byte	0x4
 284 010c E6000000 		.4byte	0xe6
 285 0110 07       		.uleb128 0x7
 286 0111 CB010000 		.4byte	.LASF34
 287 0115 02       		.byte	0x2
 288 0116 B402     		.2byte	0x2b4
 289 0118 FE000000 		.4byte	0xfe
 290 011c 03       		.byte	0x3
 291 011d 58010000 		.4byte	0x158
 292 0121 08       		.uleb128 0x8
 293 0122 7800     		.ascii	"x\000"
 294 0124 02       		.byte	0x2
 295 0125 B502     		.2byte	0x2b5
 296 0127 FE000000 		.4byte	0xfe
 297 012b 08       		.uleb128 0x8
 298 012c 7900     		.ascii	"y\000"
 299 012e 02       		.byte	0x2
 300 012f B602     		.2byte	0x2b6
 301 0131 B8000000 		.4byte	0xb8
 302 0135 09       		.uleb128 0x9
 303 0136 16020000 		.4byte	.LASF25
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 21


 304 013a 02       		.byte	0x2
 305 013b B802     		.2byte	0x2b8
 306 013d AD000000 		.4byte	0xad
 307 0141 09       		.uleb128 0x9
 308 0142 EF000000 		.4byte	.LASF26
 309 0146 02       		.byte	0x2
 310 0147 B802     		.2byte	0x2b8
 311 0149 AD000000 		.4byte	0xad
 312 014d 0A       		.uleb128 0xa
 313 014e 6900     		.ascii	"i\000"
 314 0150 02       		.byte	0x2
 315 0151 B902     		.2byte	0x2b9
 316 0153 B8000000 		.4byte	0xb8
 317 0157 00       		.byte	0
 318 0158 0B       		.uleb128 0xb
 319 0159 0A020000 		.4byte	.LASF35
 320 015d 01       		.byte	0x1
 321 015e 36       		.byte	0x36
 322 015f 00000000 		.4byte	.LFB82
 323 0163 A0000000 		.4byte	.LFE82-.LFB82
 324 0167 01       		.uleb128 0x1
 325 0168 9C       		.byte	0x9c
 326 0169 0C       		.uleb128 0xc
 327 016a 3B000000 		.4byte	.LASF27
 328 016e 01       		.byte	0x1
 329 016f 37       		.byte	0x37
 330 0170 0A010000 		.4byte	0x10a
 331 0174 02       		.uleb128 0x2
 332 0175 91       		.byte	0x91
 333 0176 5C       		.sleb128 -36
 334 0177 0C       		.uleb128 0xc
 335 0178 41000000 		.4byte	.LASF28
 336 017c 01       		.byte	0x1
 337 017d 38       		.byte	0x38
 338 017e 0A010000 		.4byte	0x10a
 339 0182 02       		.uleb128 0x2
 340 0183 91       		.byte	0x91
 341 0184 58       		.sleb128 -40
 342 0185 0C       		.uleb128 0xc
 343 0186 EA000000 		.4byte	.LASF29
 344 018a 01       		.byte	0x1
 345 018b 39       		.byte	0x39
 346 018c 0A010000 		.4byte	0x10a
 347 0190 02       		.uleb128 0x2
 348 0191 91       		.byte	0x91
 349 0192 54       		.sleb128 -44
 350 0193 0C       		.uleb128 0xc
 351 0194 F1010000 		.4byte	.LASF30
 352 0198 01       		.byte	0x1
 353 0199 3A       		.byte	0x3a
 354 019a B8000000 		.4byte	0xb8
 355 019e 02       		.uleb128 0x2
 356 019f 91       		.byte	0x91
 357 01a0 50       		.sleb128 -48
 358 01a1 0D       		.uleb128 0xd
 359 01a2 BE000000 		.4byte	.LASF36
 360 01a6 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 22


 361 01a7 3C       		.byte	0x3c
 362 01a8 B8000000 		.4byte	0xb8
 363 01ac 02       		.uleb128 0x2
 364 01ad 91       		.byte	0x91
 365 01ae 74       		.sleb128 -12
 366 01af 0E       		.uleb128 0xe
 367 01b0 10010000 		.4byte	0x110
 368 01b4 38000000 		.4byte	.LBB4
 369 01b8 52000000 		.4byte	.LBE4-.LBB4
 370 01bc 01       		.byte	0x1
 371 01bd 6A       		.byte	0x6a
 372 01be 0F       		.uleb128 0xf
 373 01bf 2B010000 		.4byte	0x12b
 374 01c3 02       		.uleb128 0x2
 375 01c4 91       		.byte	0x91
 376 01c5 6C       		.sleb128 -20
 377 01c6 0F       		.uleb128 0xf
 378 01c7 21010000 		.4byte	0x121
 379 01cb 02       		.uleb128 0x2
 380 01cc 91       		.byte	0x91
 381 01cd 70       		.sleb128 -16
 382 01ce 10       		.uleb128 0x10
 383 01cf 38000000 		.4byte	.LBB5
 384 01d3 52000000 		.4byte	.LBE5-.LBB5
 385 01d7 11       		.uleb128 0x11
 386 01d8 35010000 		.4byte	0x135
 387 01dc 02       		.uleb128 0x2
 388 01dd 91       		.byte	0x91
 389 01de 68       		.sleb128 -24
 390 01df 11       		.uleb128 0x11
 391 01e0 41010000 		.4byte	0x141
 392 01e4 02       		.uleb128 0x2
 393 01e5 91       		.byte	0x91
 394 01e6 60       		.sleb128 -32
 395 01e7 11       		.uleb128 0x11
 396 01e8 4D010000 		.4byte	0x14d
 397 01ec 02       		.uleb128 0x2
 398 01ed 91       		.byte	0x91
 399 01ee 64       		.sleb128 -28
 400 01ef 00       		.byte	0
 401 01f0 00       		.byte	0
 402 01f1 00       		.byte	0
 403 01f2 00       		.byte	0
 404              		.section	.debug_abbrev,"",%progbits
 405              	.Ldebug_abbrev0:
 406 0000 01       		.uleb128 0x1
 407 0001 11       		.uleb128 0x11
 408 0002 01       		.byte	0x1
 409 0003 25       		.uleb128 0x25
 410 0004 0E       		.uleb128 0xe
 411 0005 13       		.uleb128 0x13
 412 0006 0B       		.uleb128 0xb
 413 0007 03       		.uleb128 0x3
 414 0008 0E       		.uleb128 0xe
 415 0009 1B       		.uleb128 0x1b
 416 000a 0E       		.uleb128 0xe
 417 000b 55       		.uleb128 0x55
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 23


 418 000c 17       		.uleb128 0x17
 419 000d 11       		.uleb128 0x11
 420 000e 01       		.uleb128 0x1
 421 000f 10       		.uleb128 0x10
 422 0010 17       		.uleb128 0x17
 423 0011 00       		.byte	0
 424 0012 00       		.byte	0
 425 0013 02       		.uleb128 0x2
 426 0014 16       		.uleb128 0x16
 427 0015 00       		.byte	0
 428 0016 03       		.uleb128 0x3
 429 0017 0E       		.uleb128 0xe
 430 0018 3A       		.uleb128 0x3a
 431 0019 0B       		.uleb128 0xb
 432 001a 3B       		.uleb128 0x3b
 433 001b 0B       		.uleb128 0xb
 434 001c 49       		.uleb128 0x49
 435 001d 13       		.uleb128 0x13
 436 001e 00       		.byte	0
 437 001f 00       		.byte	0
 438 0020 03       		.uleb128 0x3
 439 0021 24       		.uleb128 0x24
 440 0022 00       		.byte	0
 441 0023 0B       		.uleb128 0xb
 442 0024 0B       		.uleb128 0xb
 443 0025 3E       		.uleb128 0x3e
 444 0026 0B       		.uleb128 0xb
 445 0027 03       		.uleb128 0x3
 446 0028 0E       		.uleb128 0xe
 447 0029 00       		.byte	0
 448 002a 00       		.byte	0
 449 002b 04       		.uleb128 0x4
 450 002c 24       		.uleb128 0x24
 451 002d 00       		.byte	0
 452 002e 0B       		.uleb128 0xb
 453 002f 0B       		.uleb128 0xb
 454 0030 3E       		.uleb128 0x3e
 455 0031 0B       		.uleb128 0xb
 456 0032 03       		.uleb128 0x3
 457 0033 08       		.uleb128 0x8
 458 0034 00       		.byte	0
 459 0035 00       		.byte	0
 460 0036 05       		.uleb128 0x5
 461 0037 16       		.uleb128 0x16
 462 0038 00       		.byte	0
 463 0039 03       		.uleb128 0x3
 464 003a 0E       		.uleb128 0xe
 465 003b 3A       		.uleb128 0x3a
 466 003c 0B       		.uleb128 0xb
 467 003d 3B       		.uleb128 0x3b
 468 003e 05       		.uleb128 0x5
 469 003f 49       		.uleb128 0x49
 470 0040 13       		.uleb128 0x13
 471 0041 00       		.byte	0
 472 0042 00       		.byte	0
 473 0043 06       		.uleb128 0x6
 474 0044 0F       		.uleb128 0xf
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 24


 475 0045 00       		.byte	0
 476 0046 0B       		.uleb128 0xb
 477 0047 0B       		.uleb128 0xb
 478 0048 49       		.uleb128 0x49
 479 0049 13       		.uleb128 0x13
 480 004a 00       		.byte	0
 481 004b 00       		.byte	0
 482 004c 07       		.uleb128 0x7
 483 004d 2E       		.uleb128 0x2e
 484 004e 01       		.byte	0x1
 485 004f 03       		.uleb128 0x3
 486 0050 0E       		.uleb128 0xe
 487 0051 3A       		.uleb128 0x3a
 488 0052 0B       		.uleb128 0xb
 489 0053 3B       		.uleb128 0x3b
 490 0054 05       		.uleb128 0x5
 491 0055 27       		.uleb128 0x27
 492 0056 19       		.uleb128 0x19
 493 0057 49       		.uleb128 0x49
 494 0058 13       		.uleb128 0x13
 495 0059 20       		.uleb128 0x20
 496 005a 0B       		.uleb128 0xb
 497 005b 01       		.uleb128 0x1
 498 005c 13       		.uleb128 0x13
 499 005d 00       		.byte	0
 500 005e 00       		.byte	0
 501 005f 08       		.uleb128 0x8
 502 0060 05       		.uleb128 0x5
 503 0061 00       		.byte	0
 504 0062 03       		.uleb128 0x3
 505 0063 08       		.uleb128 0x8
 506 0064 3A       		.uleb128 0x3a
 507 0065 0B       		.uleb128 0xb
 508 0066 3B       		.uleb128 0x3b
 509 0067 05       		.uleb128 0x5
 510 0068 49       		.uleb128 0x49
 511 0069 13       		.uleb128 0x13
 512 006a 00       		.byte	0
 513 006b 00       		.byte	0
 514 006c 09       		.uleb128 0x9
 515 006d 34       		.uleb128 0x34
 516 006e 00       		.byte	0
 517 006f 03       		.uleb128 0x3
 518 0070 0E       		.uleb128 0xe
 519 0071 3A       		.uleb128 0x3a
 520 0072 0B       		.uleb128 0xb
 521 0073 3B       		.uleb128 0x3b
 522 0074 05       		.uleb128 0x5
 523 0075 49       		.uleb128 0x49
 524 0076 13       		.uleb128 0x13
 525 0077 00       		.byte	0
 526 0078 00       		.byte	0
 527 0079 0A       		.uleb128 0xa
 528 007a 34       		.uleb128 0x34
 529 007b 00       		.byte	0
 530 007c 03       		.uleb128 0x3
 531 007d 08       		.uleb128 0x8
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 25


 532 007e 3A       		.uleb128 0x3a
 533 007f 0B       		.uleb128 0xb
 534 0080 3B       		.uleb128 0x3b
 535 0081 05       		.uleb128 0x5
 536 0082 49       		.uleb128 0x49
 537 0083 13       		.uleb128 0x13
 538 0084 00       		.byte	0
 539 0085 00       		.byte	0
 540 0086 0B       		.uleb128 0xb
 541 0087 2E       		.uleb128 0x2e
 542 0088 01       		.byte	0x1
 543 0089 3F       		.uleb128 0x3f
 544 008a 19       		.uleb128 0x19
 545 008b 03       		.uleb128 0x3
 546 008c 0E       		.uleb128 0xe
 547 008d 3A       		.uleb128 0x3a
 548 008e 0B       		.uleb128 0xb
 549 008f 3B       		.uleb128 0x3b
 550 0090 0B       		.uleb128 0xb
 551 0091 27       		.uleb128 0x27
 552 0092 19       		.uleb128 0x19
 553 0093 11       		.uleb128 0x11
 554 0094 01       		.uleb128 0x1
 555 0095 12       		.uleb128 0x12
 556 0096 06       		.uleb128 0x6
 557 0097 40       		.uleb128 0x40
 558 0098 18       		.uleb128 0x18
 559 0099 9742     		.uleb128 0x2117
 560 009b 19       		.uleb128 0x19
 561 009c 00       		.byte	0
 562 009d 00       		.byte	0
 563 009e 0C       		.uleb128 0xc
 564 009f 05       		.uleb128 0x5
 565 00a0 00       		.byte	0
 566 00a1 03       		.uleb128 0x3
 567 00a2 0E       		.uleb128 0xe
 568 00a3 3A       		.uleb128 0x3a
 569 00a4 0B       		.uleb128 0xb
 570 00a5 3B       		.uleb128 0x3b
 571 00a6 0B       		.uleb128 0xb
 572 00a7 49       		.uleb128 0x49
 573 00a8 13       		.uleb128 0x13
 574 00a9 02       		.uleb128 0x2
 575 00aa 18       		.uleb128 0x18
 576 00ab 00       		.byte	0
 577 00ac 00       		.byte	0
 578 00ad 0D       		.uleb128 0xd
 579 00ae 34       		.uleb128 0x34
 580 00af 00       		.byte	0
 581 00b0 03       		.uleb128 0x3
 582 00b1 0E       		.uleb128 0xe
 583 00b2 3A       		.uleb128 0x3a
 584 00b3 0B       		.uleb128 0xb
 585 00b4 3B       		.uleb128 0x3b
 586 00b5 0B       		.uleb128 0xb
 587 00b6 49       		.uleb128 0x49
 588 00b7 13       		.uleb128 0x13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 26


 589 00b8 02       		.uleb128 0x2
 590 00b9 18       		.uleb128 0x18
 591 00ba 00       		.byte	0
 592 00bb 00       		.byte	0
 593 00bc 0E       		.uleb128 0xe
 594 00bd 1D       		.uleb128 0x1d
 595 00be 01       		.byte	0x1
 596 00bf 31       		.uleb128 0x31
 597 00c0 13       		.uleb128 0x13
 598 00c1 11       		.uleb128 0x11
 599 00c2 01       		.uleb128 0x1
 600 00c3 12       		.uleb128 0x12
 601 00c4 06       		.uleb128 0x6
 602 00c5 58       		.uleb128 0x58
 603 00c6 0B       		.uleb128 0xb
 604 00c7 59       		.uleb128 0x59
 605 00c8 0B       		.uleb128 0xb
 606 00c9 00       		.byte	0
 607 00ca 00       		.byte	0
 608 00cb 0F       		.uleb128 0xf
 609 00cc 05       		.uleb128 0x5
 610 00cd 00       		.byte	0
 611 00ce 31       		.uleb128 0x31
 612 00cf 13       		.uleb128 0x13
 613 00d0 02       		.uleb128 0x2
 614 00d1 18       		.uleb128 0x18
 615 00d2 00       		.byte	0
 616 00d3 00       		.byte	0
 617 00d4 10       		.uleb128 0x10
 618 00d5 0B       		.uleb128 0xb
 619 00d6 01       		.byte	0x1
 620 00d7 11       		.uleb128 0x11
 621 00d8 01       		.uleb128 0x1
 622 00d9 12       		.uleb128 0x12
 623 00da 06       		.uleb128 0x6
 624 00db 00       		.byte	0
 625 00dc 00       		.byte	0
 626 00dd 11       		.uleb128 0x11
 627 00de 34       		.uleb128 0x34
 628 00df 00       		.byte	0
 629 00e0 31       		.uleb128 0x31
 630 00e1 13       		.uleb128 0x13
 631 00e2 02       		.uleb128 0x2
 632 00e3 18       		.uleb128 0x18
 633 00e4 00       		.byte	0
 634 00e5 00       		.byte	0
 635 00e6 00       		.byte	0
 636              		.section	.debug_aranges,"",%progbits
 637 0000 1C000000 		.4byte	0x1c
 638 0004 0200     		.2byte	0x2
 639 0006 00000000 		.4byte	.Ldebug_info0
 640 000a 04       		.byte	0x4
 641 000b 00       		.byte	0
 642 000c 0000     		.2byte	0
 643 000e 0000     		.2byte	0
 644 0010 00000000 		.4byte	.LFB82
 645 0014 A0000000 		.4byte	.LFE82-.LFB82
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 27


 646 0018 00000000 		.4byte	0
 647 001c 00000000 		.4byte	0
 648              		.section	.debug_ranges,"",%progbits
 649              	.Ldebug_ranges0:
 650 0000 00000000 		.4byte	.LFB82
 651 0004 A0000000 		.4byte	.LFE82
 652 0008 00000000 		.4byte	0
 653 000c 00000000 		.4byte	0
 654              		.section	.debug_line,"",%progbits
 655              	.Ldebug_line0:
 656 0000 8C010000 		.section	.debug_str,"MS",%progbits,1
 656      02004E01 
 656      00000201 
 656      FB0E0D00 
 656      01010101 
 657              	.LASF32:
 658 0000 536F7572 		.ascii	"Source\\BasicMathFunctions\\arm_mult_q7.c\000"
 658      63655C42 
 658      61736963 
 658      4D617468 
 658      46756E63 
 659              	.LASF2:
 660 0028 5F5F696E 		.ascii	"__int8_t\000"
 660      74385F74 
 660      00
 661              	.LASF3:
 662 0031 5F5F696E 		.ascii	"__int16_t\000"
 662      7431365F 
 662      7400
 663              	.LASF27:
 664 003b 70537263 		.ascii	"pSrcA\000"
 664      4100
 665              	.LASF28:
 666 0041 70537263 		.ascii	"pSrcB\000"
 666      4200
 667              	.LASF6:
 668 0047 5F5F696E 		.ascii	"__int32_t\000"
 668      7433325F 
 668      7400
 669              	.LASF33:
 670 0051 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 670      73657273 
 670      5C666E65 
 670      7665735C 
 670      446F6375 
 671 007e 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 671      655F7370 
 671      6565645F 
 671      73656E73 
 671      6F722E63 
 672              	.LASF13:
 673 0097 696E7438 		.ascii	"int8_t\000"
 673      5F7400
 674              	.LASF23:
 675 009e 7131355F 		.ascii	"q15_t\000"
 675      7400
 676              	.LASF20:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 28


 677 00a4 666C6F61 		.ascii	"float\000"
 677      7400
 678              	.LASF24:
 679 00aa 7133315F 		.ascii	"q31_t\000"
 679      7400
 680              	.LASF1:
 681 00b0 756E7369 		.ascii	"unsigned char\000"
 681      676E6564 
 681      20636861 
 681      7200
 682              	.LASF36:
 683 00be 626C6B43 		.ascii	"blkCnt\000"
 683      6E7400
 684              	.LASF9:
 685 00c5 6C6F6E67 		.ascii	"long unsigned int\000"
 685      20756E73 
 685      69676E65 
 685      6420696E 
 685      7400
 686              	.LASF5:
 687 00d7 73686F72 		.ascii	"short unsigned int\000"
 687      7420756E 
 687      7369676E 
 687      65642069 
 687      6E7400
 688              	.LASF29:
 689 00ea 70447374 		.ascii	"pDst\000"
 689      00
 690              	.LASF26:
 691 00ef 6E65674D 		.ascii	"negMin\000"
 691      696E00
 692              	.LASF19:
 693 00f6 646F7562 		.ascii	"double\000"
 693      6C6500
 694              	.LASF8:
 695 00fd 5F5F7569 		.ascii	"__uint32_t\000"
 695      6E743332 
 695      5F7400
 696              	.LASF22:
 697 0108 71375F74 		.ascii	"q7_t\000"
 697      00
 698              	.LASF12:
 699 010d 756E7369 		.ascii	"unsigned int\000"
 699      676E6564 
 699      20696E74 
 699      00
 700              	.LASF11:
 701 011a 6C6F6E67 		.ascii	"long long unsigned int\000"
 701      206C6F6E 
 701      6720756E 
 701      7369676E 
 701      65642069 
 702              	.LASF31:
 703 0131 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 703      4320342E 
 703      392E3320 
 703      32303135 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 29


 703      30333033 
 704 0164 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 704      20726576 
 704      6973696F 
 704      6E203232 
 704      31323230 
 705 0197 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 705      30202D66 
 705      66756E63 
 705      74696F6E 
 705      2D736563 
 706              	.LASF14:
 707 01c3 696E7431 		.ascii	"int16_t\000"
 707      365F7400 
 708              	.LASF34:
 709 01cb 5F5F5353 		.ascii	"__SSAT\000"
 709      415400
 710              	.LASF15:
 711 01d2 696E7433 		.ascii	"int32_t\000"
 711      325F7400 
 712              	.LASF17:
 713 01da 73697A65 		.ascii	"sizetype\000"
 713      74797065 
 713      00
 714              	.LASF10:
 715 01e3 6C6F6E67 		.ascii	"long long int\000"
 715      206C6F6E 
 715      6720696E 
 715      7400
 716              	.LASF30:
 717 01f1 626C6F63 		.ascii	"blockSize\000"
 717      6B53697A 
 717      6500
 718              	.LASF18:
 719 01fb 63686172 		.ascii	"char\000"
 719      00
 720              	.LASF4:
 721 0200 73686F72 		.ascii	"short int\000"
 721      7420696E 
 721      7400
 722              	.LASF35:
 723 020a 61726D5F 		.ascii	"arm_mult_q7\000"
 723      6D756C74 
 723      5F713700 
 724              	.LASF25:
 725 0216 706F734D 		.ascii	"posMax\000"
 725      617800
 726              	.LASF16:
 727 021d 75696E74 		.ascii	"uint32_t\000"
 727      33325F74 
 727      00
 728              	.LASF7:
 729 0226 6C6F6E67 		.ascii	"long int\000"
 729      20696E74 
 729      00
 730              	.LASF21:
 731 022f 6C6F6E67 		.ascii	"long double\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccFiQsyr.s 			page 30


 731      20646F75 
 731      626C6500 
 732              	.LASF0:
 733 023b 7369676E 		.ascii	"signed char\000"
 733      65642063 
 733      68617200 
 734              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
