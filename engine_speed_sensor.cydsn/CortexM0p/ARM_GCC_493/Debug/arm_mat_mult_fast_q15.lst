ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"arm_mat_mult_fast_q15.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_mat_mult_fast_q15,"ax",%progbits
  18              		.align	2
  19              		.global	arm_mat_mult_fast_q15
  20              		.code	16
  21              		.thumb_func
  22              		.type	arm_mat_mult_fast_q15, %function
  23              	arm_mat_mult_fast_q15:
  24              	.LFB82:
  25              		.file 1 "Source\\MatrixFunctions\\arm_mat_mult_fast_q15.c"
   1:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** /* ----------------------------------------------------------------------
   2:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Project:      CMSIS DSP Library
   3:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Title:        arm_mat_mult_fast_q15.c
   4:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Description:  Q15 matrix multiplication (fast variant)
   5:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
   6:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * $Date:        27. January 2017
   7:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * $Revision:    V.1.5.1
   8:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
   9:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Target Processor: Cortex-M cores
  10:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * -------------------------------------------------------------------- */
  11:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** /*
  12:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
  14:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
  16:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * not use this file except in compliance with the License.
  18:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * You may obtain a copy of the License at
  19:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
  20:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
  22:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * See the License for the specific language governing permissions and
  26:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * limitations under the License.
  27:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  */
  28:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  29:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #include "arm_math.h"
  30:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  31:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** /**
  32:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * @ingroup groupMatrix
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 2


  33:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  */
  34:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  35:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** /**
  36:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * @addtogroup MatrixMult
  37:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * @{
  38:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  */
  39:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  40:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  41:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** /**
  42:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * @brief Q15 matrix multiplication (fast variant) for Cortex-M3 and Cortex-M4
  43:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * @param[in]       *pSrcA points to the first input matrix structure
  44:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * @param[in]       *pSrcB points to the second input matrix structure
  45:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * @param[out]      *pDst points to output matrix structure
  46:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * @param[in]       *pState points to the array for storing intermediate results
  47:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * @return          The function returns either
  48:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  49:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
  50:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * @details
  51:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  52:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
  53:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * \par
  54:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * The difference between the function arm_mat_mult_q15() and this fast variant is that
  55:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * the fast variant use a 32-bit rather than a 64-bit accumulator.
  56:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * The result of each 1.15 x 1.15 multiplication is truncated to
  57:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * 2.30 format. These intermediate results are accumulated in a 32-bit register in 2.30
  58:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * format. Finally, the accumulator is saturated and converted to a 1.15 result.
  59:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
  60:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * \par
  61:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * The fast version has the same overflow behavior as the standard version but provides
  62:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * less precision since it discards the low 16 bits of each multiplication result.
  63:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * In order to avoid overflows completely the input signals must be scaled down.
  64:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * Scale down one of the input matrices by log2(numColsA) bits to
  65:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * avoid overflows, as a total of numColsA additions are computed internally for each
  66:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * output element.
  67:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  *
  68:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * \par
  69:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * See <code>arm_mat_mult_q15()</code> for a slower implementation of this function
  70:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  * which uses 64-bit accumulation to provide higher precision.
  71:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****  */
  72:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  73:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** arm_status arm_mat_mult_fast_q15(
  74:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   const arm_matrix_instance_q15 * pSrcA,
  75:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   const arm_matrix_instance_q15 * pSrcB,
  76:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   arm_matrix_instance_q15 * pDst,
  77:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   q15_t * pState)
  78:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** {
  26              		.loc 1 78 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 B4B0     		sub	sp, sp, #208
  33              		.cfi_def_cfa_offset 216
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 3


  37 0008 B960     		str	r1, [r7, #8]
  38 000a 7A60     		str	r2, [r7, #4]
  39 000c 3B60     		str	r3, [r7]
  79:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   q31_t sum;                                     /* accumulator */
  80:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   q15_t *pSrcBT = pState;                        /* input data matrix pointer for transpose */
  40              		.loc 1 80 0
  41 000e 3B68     		ldr	r3, [r7]
  42 0010 A022     		mov	r2, #160
  43 0012 BA18     		add	r2, r7, r2
  44 0014 1360     		str	r3, [r2]
  81:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   q15_t *pInA = pSrcA->pData;                    /* input data matrix pointer A of Q15 type */
  45              		.loc 1 81 0
  46 0016 FB68     		ldr	r3, [r7, #12]
  47 0018 5B68     		ldr	r3, [r3, #4]
  48 001a FB61     		str	r3, [r7, #28]
  82:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   q15_t *pInB = pSrcB->pData;                    /* input data matrix pointer B of Q15 type */
  49              		.loc 1 82 0
  50 001c BB68     		ldr	r3, [r7, #8]
  51 001e 5B68     		ldr	r3, [r3, #4]
  52 0020 BB61     		str	r3, [r7, #24]
  83:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   q15_t *px;                                     /* Temporary output data matrix pointer */
  84:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
  53              		.loc 1 84 0
  54 0022 9E23     		mov	r3, #158
  55 0024 FB18     		add	r3, r7, r3
  56 0026 FA68     		ldr	r2, [r7, #12]
  57 0028 1288     		ldrh	r2, [r2]
  58 002a 1A80     		strh	r2, [r3]
  85:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  59              		.loc 1 85 0
  60 002c 9C23     		mov	r3, #156
  61 002e FB18     		add	r3, r7, r3
  62 0030 BA68     		ldr	r2, [r7, #8]
  63 0032 5288     		ldrh	r2, [r2, #2]
  64 0034 1A80     		strh	r2, [r3]
  86:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
  65              		.loc 1 86 0
  66 0036 9A23     		mov	r3, #154
  67 0038 FB18     		add	r3, r7, r3
  68 003a FA68     		ldr	r2, [r7, #12]
  69 003c 5288     		ldrh	r2, [r2, #2]
  70 003e 1A80     		strh	r2, [r3]
  87:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   uint16_t numRowsB = pSrcB->numRows;            /* number of rows of input matrix A    */
  71              		.loc 1 87 0
  72 0040 9823     		mov	r3, #152
  73 0042 FB18     		add	r3, r7, r3
  74 0044 BA68     		ldr	r2, [r7, #8]
  75 0046 1288     		ldrh	r2, [r2]
  76 0048 1A80     		strh	r2, [r3]
  88:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   uint32_t col, i = 0u, row = numRowsB, colCnt;  /* loop counters */
  77              		.loc 1 88 0
  78 004a 0023     		mov	r3, #0
  79 004c C022     		mov	r2, #192
  80 004e BA18     		add	r2, r7, r2
  81 0050 1360     		str	r3, [r2]
  82 0052 9823     		mov	r3, #152
  83 0054 FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 4


  84 0056 1B88     		ldrh	r3, [r3]
  85 0058 BC22     		mov	r2, #188
  86 005a BA18     		add	r2, r7, r2
  87 005c 1360     		str	r3, [r2]
  89:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   arm_status status;                             /* status of matrix multiplication */
  90:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  91:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef UNALIGNED_SUPPORT_DISABLE
  92:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  93:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   q31_t in;                                      /* Temporary variable to hold the input value */
  94:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   q31_t inA1, inA2, inB1, inB2;
  95:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   q31_t sum2, sum3, sum4;
  96:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   q15_t *pInA2, *pInB2, *px2;
  97:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   uint32_t j = 0;
  88              		.loc 1 97 0
  89 005e 0023     		mov	r3, #0
  90 0060 A422     		mov	r2, #164
  91 0062 BA18     		add	r2, r7, r2
  92 0064 1360     		str	r3, [r2]
  93              	.L6:
  98:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
  99:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 100:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 101:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   q15_t in;                                      /* Temporary variable to hold the input value */
 102:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   q15_t inA1, inA2, inB1, inB2;
 103:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 104:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 105:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 106:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifdef ARM_MATH_MATRIX_CHECK
 107:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   /* Check for matrix mismatch condition */
 108:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
 109:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
 110:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   {
 111:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 112:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     status = ARM_MATH_SIZE_MISMATCH;
 113:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   }
 114:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   else
 115:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif
 116:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   {
 117:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Matrix transpose */
 118:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     do
 119:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     {
 120:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* Apply loop unrolling and exchange the columns with row elements */
 121:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       col = numColsB >> 2;
  94              		.loc 1 121 0
  95 0066 9C23     		mov	r3, #156
  96 0068 FB18     		add	r3, r7, r3
  97 006a 1B88     		ldrh	r3, [r3]
  98 006c 9B08     		lsr	r3, r3, #2
  99 006e 9BB2     		uxth	r3, r3
 100 0070 C422     		mov	r2, #196
 101 0072 BA18     		add	r2, r7, r2
 102 0074 1360     		str	r3, [r2]
 122:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 123:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* The pointer px is set to starting address of the column being processed */
 124:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       px = pSrcBT + i;
 103              		.loc 1 124 0
 104 0076 C023     		mov	r3, #192
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 5


 105 0078 FB18     		add	r3, r7, r3
 106 007a 1B68     		ldr	r3, [r3]
 107 007c 5B00     		lsl	r3, r3, #1
 108 007e A022     		mov	r2, #160
 109 0080 BA18     		add	r2, r7, r2
 110 0082 1268     		ldr	r2, [r2]
 111 0084 D318     		add	r3, r2, r3
 112 0086 C822     		mov	r2, #200
 113 0088 BA18     		add	r2, r7, r2
 114 008a 1360     		str	r3, [r2]
 125:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 126:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 127:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****        ** a second loop below computes the remaining 1 to 3 samples. */
 128:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       while (col > 0u)
 115              		.loc 1 128 0
 116 008c 66E0     		b	.L2
 117              	.L3:
 129:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 130:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef UNALIGNED_SUPPORT_DISABLE
 131:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Read two elements from the row */
 132:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         in = *__SIMD32(pInB)++;
 118              		.loc 1 132 0
 119 008e 1823     		mov	r3, #24
 120 0090 FB18     		add	r3, r7, r3
 121 0092 1A68     		ldr	r2, [r3]
 122 0094 111D     		add	r1, r2, #4
 123 0096 1960     		str	r1, [r3]
 124 0098 1368     		ldr	r3, [r2]
 125 009a 9422     		mov	r2, #148
 126 009c BA18     		add	r2, r7, r2
 127 009e 1360     		str	r3, [r2]
 133:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 134:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Unpack and store one element in the destination */
 135:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 136:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 137:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) in;
 128              		.loc 1 137 0
 129 00a0 9423     		mov	r3, #148
 130 00a2 FB18     		add	r3, r7, r3
 131 00a4 1B68     		ldr	r3, [r3]
 132 00a6 9AB2     		uxth	r2, r3
 133 00a8 C823     		mov	r3, #200
 134 00aa FB18     		add	r3, r7, r3
 135 00ac 1B68     		ldr	r3, [r3]
 136 00ae 1A80     		strh	r2, [r3]
 138:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 139:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 140:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 141:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) ((in & (q31_t) 0xffff0000) >> 16);
 142:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 143:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /*    #ifndef ARM_MATH_BIG_ENDIAN    */
 144:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 145:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 146:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 137              		.loc 1 146 0
 138 00b0 9823     		mov	r3, #152
 139 00b2 FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 6


 140 00b4 1B88     		ldrh	r3, [r3]
 141 00b6 5B00     		lsl	r3, r3, #1
 142 00b8 C822     		mov	r2, #200
 143 00ba BA18     		add	r2, r7, r2
 144 00bc 1268     		ldr	r2, [r2]
 145 00be D318     		add	r3, r2, r3
 146 00c0 C822     		mov	r2, #200
 147 00c2 BA18     		add	r2, r7, r2
 148 00c4 1360     		str	r3, [r2]
 147:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 148:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Unpack and store the second element in the destination */
 149:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 150:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 151:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) ((in & (q31_t) 0xffff0000) >> 16);
 149              		.loc 1 151 0
 150 00c6 9423     		mov	r3, #148
 151 00c8 FB18     		add	r3, r7, r3
 152 00ca 1B68     		ldr	r3, [r3]
 153 00cc 1B14     		asr	r3, r3, #16
 154 00ce 9AB2     		uxth	r2, r3
 155 00d0 C823     		mov	r3, #200
 156 00d2 FB18     		add	r3, r7, r3
 157 00d4 1B68     		ldr	r3, [r3]
 158 00d6 1A80     		strh	r2, [r3]
 152:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 153:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 154:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 155:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) in;
 156:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 157:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /*    #ifndef ARM_MATH_BIG_ENDIAN    */
 158:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 159:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 160:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 159              		.loc 1 160 0
 160 00d8 9823     		mov	r3, #152
 161 00da FB18     		add	r3, r7, r3
 162 00dc 1B88     		ldrh	r3, [r3]
 163 00de 5B00     		lsl	r3, r3, #1
 164 00e0 C822     		mov	r2, #200
 165 00e2 BA18     		add	r2, r7, r2
 166 00e4 1268     		ldr	r2, [r2]
 167 00e6 D318     		add	r3, r2, r3
 168 00e8 C822     		mov	r2, #200
 169 00ea BA18     		add	r2, r7, r2
 170 00ec 1360     		str	r3, [r2]
 161:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 162:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Read two elements from the row */
 163:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         in = *__SIMD32(pInB)++;
 171              		.loc 1 163 0
 172 00ee 1823     		mov	r3, #24
 173 00f0 FB18     		add	r3, r7, r3
 174 00f2 1A68     		ldr	r2, [r3]
 175 00f4 111D     		add	r1, r2, #4
 176 00f6 1960     		str	r1, [r3]
 177 00f8 1368     		ldr	r3, [r2]
 178 00fa 9422     		mov	r2, #148
 179 00fc BA18     		add	r2, r7, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 7


 180 00fe 1360     		str	r3, [r2]
 164:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 165:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Unpack and store one element in the destination */
 166:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 167:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 168:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) in;
 181              		.loc 1 168 0
 182 0100 9423     		mov	r3, #148
 183 0102 FB18     		add	r3, r7, r3
 184 0104 1B68     		ldr	r3, [r3]
 185 0106 9AB2     		uxth	r2, r3
 186 0108 C823     		mov	r3, #200
 187 010a FB18     		add	r3, r7, r3
 188 010c 1B68     		ldr	r3, [r3]
 189 010e 1A80     		strh	r2, [r3]
 169:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 170:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 171:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 172:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) ((in & (q31_t) 0xffff0000) >> 16);
 173:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 174:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /*    #ifndef ARM_MATH_BIG_ENDIAN    */
 175:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 176:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 177:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 190              		.loc 1 177 0
 191 0110 9823     		mov	r3, #152
 192 0112 FB18     		add	r3, r7, r3
 193 0114 1B88     		ldrh	r3, [r3]
 194 0116 5B00     		lsl	r3, r3, #1
 195 0118 C822     		mov	r2, #200
 196 011a BA18     		add	r2, r7, r2
 197 011c 1268     		ldr	r2, [r2]
 198 011e D318     		add	r3, r2, r3
 199 0120 C822     		mov	r2, #200
 200 0122 BA18     		add	r2, r7, r2
 201 0124 1360     		str	r3, [r2]
 178:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 179:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Unpack and store the second element in the destination */
 180:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 181:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 182:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 183:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) ((in & (q31_t) 0xffff0000) >> 16);
 202              		.loc 1 183 0
 203 0126 9423     		mov	r3, #148
 204 0128 FB18     		add	r3, r7, r3
 205 012a 1B68     		ldr	r3, [r3]
 206 012c 1B14     		asr	r3, r3, #16
 207 012e 9AB2     		uxth	r2, r3
 208 0130 C823     		mov	r3, #200
 209 0132 FB18     		add	r3, r7, r3
 210 0134 1B68     		ldr	r3, [r3]
 211 0136 1A80     		strh	r2, [r3]
 184:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 185:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 186:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 187:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = (q15_t) in;
 188:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 8


 189:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /*    #ifndef ARM_MATH_BIG_ENDIAN    */
 190:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 191:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 192:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 193:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Read one element from the row */
 194:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         in = *pInB++;
 195:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 196:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Store one element in the destination */
 197:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = in;
 198:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 199:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 200:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 201:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 202:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Read one element from the row */
 203:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         in = *pInB++;
 204:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 205:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Store one element in the destination */
 206:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = in;
 207:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 208:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 209:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 210:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 211:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Read one element from the row */
 212:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         in = *pInB++;
 213:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 214:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Store one element in the destination */
 215:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = in;
 216:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 217:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 218:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 219:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 220:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Read one element from the row */
 221:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         in = *pInB++;
 222:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 223:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Store one element in the destination */
 224:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = in;
 225:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 226:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 227:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 228:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 229:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 212              		.loc 1 229 0
 213 0138 9823     		mov	r3, #152
 214 013a FB18     		add	r3, r7, r3
 215 013c 1B88     		ldrh	r3, [r3]
 216 013e 5B00     		lsl	r3, r3, #1
 217 0140 C822     		mov	r2, #200
 218 0142 BA18     		add	r2, r7, r2
 219 0144 1268     		ldr	r2, [r2]
 220 0146 D318     		add	r3, r2, r3
 221 0148 C822     		mov	r2, #200
 222 014a BA18     		add	r2, r7, r2
 223 014c 1360     		str	r3, [r2]
 230:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 231:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Decrement the column loop counter */
 232:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         col--;
 224              		.loc 1 232 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 9


 225 014e C423     		mov	r3, #196
 226 0150 FB18     		add	r3, r7, r3
 227 0152 1B68     		ldr	r3, [r3]
 228 0154 013B     		sub	r3, r3, #1
 229 0156 C422     		mov	r2, #196
 230 0158 BA18     		add	r2, r7, r2
 231 015a 1360     		str	r3, [r2]
 232              	.L2:
 128:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 233              		.loc 1 128 0
 234 015c C423     		mov	r3, #196
 235 015e FB18     		add	r3, r7, r3
 236 0160 1B68     		ldr	r3, [r3]
 237 0162 002B     		cmp	r3, #0
 238 0164 93D1     		bne	.L3
 233:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       }
 234:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 235:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* If the columns of pSrcB is not a multiple of 4, compute any remaining output samples here.
 236:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****        ** No loop unrolling is used. */
 237:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       col = numColsB % 0x4u;
 239              		.loc 1 237 0
 240 0166 9C23     		mov	r3, #156
 241 0168 FB18     		add	r3, r7, r3
 242 016a 1B88     		ldrh	r3, [r3]
 243 016c 0322     		mov	r2, #3
 244 016e 1340     		and	r3, r2
 245 0170 C422     		mov	r2, #196
 246 0172 BA18     		add	r2, r7, r2
 247 0174 1360     		str	r3, [r2]
 238:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 239:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       while (col > 0u)
 248              		.loc 1 239 0
 249 0176 19E0     		b	.L4
 250              	.L5:
 240:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 241:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Read and store the input element in the destination */
 242:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px = *pInB++;
 251              		.loc 1 242 0
 252 0178 BB69     		ldr	r3, [r7, #24]
 253 017a 9A1C     		add	r2, r3, #2
 254 017c BA61     		str	r2, [r7, #24]
 255 017e 1A88     		ldrh	r2, [r3]
 256 0180 C823     		mov	r3, #200
 257 0182 FB18     		add	r3, r7, r3
 258 0184 1B68     		ldr	r3, [r3]
 259 0186 1A80     		strh	r2, [r3]
 243:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 244:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Update the pointer px to point to the next row of the transposed matrix */
 245:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numRowsB;
 260              		.loc 1 245 0
 261 0188 9823     		mov	r3, #152
 262 018a FB18     		add	r3, r7, r3
 263 018c 1B88     		ldrh	r3, [r3]
 264 018e 5B00     		lsl	r3, r3, #1
 265 0190 C822     		mov	r2, #200
 266 0192 BA18     		add	r2, r7, r2
 267 0194 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 10


 268 0196 D318     		add	r3, r2, r3
 269 0198 C822     		mov	r2, #200
 270 019a BA18     		add	r2, r7, r2
 271 019c 1360     		str	r3, [r2]
 246:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 247:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Decrement the column loop counter */
 248:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         col--;
 272              		.loc 1 248 0
 273 019e C423     		mov	r3, #196
 274 01a0 FB18     		add	r3, r7, r3
 275 01a2 1B68     		ldr	r3, [r3]
 276 01a4 013B     		sub	r3, r3, #1
 277 01a6 C422     		mov	r2, #196
 278 01a8 BA18     		add	r2, r7, r2
 279 01aa 1360     		str	r3, [r2]
 280              	.L4:
 239:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 281              		.loc 1 239 0
 282 01ac C423     		mov	r3, #196
 283 01ae FB18     		add	r3, r7, r3
 284 01b0 1B68     		ldr	r3, [r3]
 285 01b2 002B     		cmp	r3, #0
 286 01b4 E0D1     		bne	.L5
 249:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       }
 250:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 251:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       i++;
 287              		.loc 1 251 0
 288 01b6 C023     		mov	r3, #192
 289 01b8 FB18     		add	r3, r7, r3
 290 01ba 1B68     		ldr	r3, [r3]
 291 01bc 0133     		add	r3, r3, #1
 292 01be C022     		mov	r2, #192
 293 01c0 BA18     		add	r2, r7, r2
 294 01c2 1360     		str	r3, [r2]
 252:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 253:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* Decrement the row loop counter */
 254:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       row--;
 295              		.loc 1 254 0
 296 01c4 BC23     		mov	r3, #188
 297 01c6 FB18     		add	r3, r7, r3
 298 01c8 1B68     		ldr	r3, [r3]
 299 01ca 013B     		sub	r3, r3, #1
 300 01cc BC22     		mov	r2, #188
 301 01ce BA18     		add	r2, r7, r2
 302 01d0 1360     		str	r3, [r2]
 255:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 256:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     } while (row > 0u);
 303              		.loc 1 256 0
 304 01d2 BC23     		mov	r3, #188
 305 01d4 FB18     		add	r3, r7, r3
 306 01d6 1B68     		ldr	r3, [r3]
 307 01d8 002B     		cmp	r3, #0
 308 01da 00D0     		beq	.LCB258
 309 01dc 43E7     		b	.L6	@long jump
 310              	.LCB258:
 257:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 258:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Reset the variables for the usage in the following multiplication process */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 11


 259:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     row = numRowsA;
 311              		.loc 1 259 0
 312 01de 9E23     		mov	r3, #158
 313 01e0 FB18     		add	r3, r7, r3
 314 01e2 1B88     		ldrh	r3, [r3]
 315 01e4 BC22     		mov	r2, #188
 316 01e6 BA18     		add	r2, r7, r2
 317 01e8 1360     		str	r3, [r2]
 260:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     i = 0u;
 318              		.loc 1 260 0
 319 01ea 0023     		mov	r3, #0
 320 01ec C022     		mov	r2, #192
 321 01ee BA18     		add	r2, r7, r2
 322 01f0 1360     		str	r3, [r2]
 261:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     px = pDst->pData;
 323              		.loc 1 261 0
 324 01f2 7B68     		ldr	r3, [r7, #4]
 325 01f4 5B68     		ldr	r3, [r3, #4]
 326 01f6 C822     		mov	r2, #200
 327 01f8 BA18     		add	r2, r7, r2
 328 01fa 1360     		str	r3, [r2]
 262:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 263:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef UNALIGNED_SUPPORT_DISABLE
 264:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Process two rows from matrix A at a time and output two rows at a time */
 265:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     row = row >> 1;
 329              		.loc 1 265 0
 330 01fc BC23     		mov	r3, #188
 331 01fe FB18     		add	r3, r7, r3
 332 0200 1B68     		ldr	r3, [r3]
 333 0202 5B08     		lsr	r3, r3, #1
 334 0204 BC22     		mov	r2, #188
 335 0206 BA18     		add	r2, r7, r2
 336 0208 1360     		str	r3, [r2]
 266:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     px2 = px + numColsB;
 337              		.loc 1 266 0
 338 020a 9C23     		mov	r3, #156
 339 020c FB18     		add	r3, r7, r3
 340 020e 1B88     		ldrh	r3, [r3]
 341 0210 5B00     		lsl	r3, r3, #1
 342 0212 C822     		mov	r2, #200
 343 0214 BA18     		add	r2, r7, r2
 344 0216 1268     		ldr	r2, [r2]
 345 0218 D318     		add	r3, r2, r3
 346 021a A822     		mov	r2, #168
 347 021c BA18     		add	r2, r7, r2
 348 021e 1360     		str	r3, [r2]
 267:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif
 268:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 269:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 270:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* row loop */
 271:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     while (row > 0u)
 349              		.loc 1 271 0
 350 0220 D4E1     		b	.L7
 351              	.L17:
 272:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     {
 273:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* For every row wise process, the column loop counter is to be initiated */
 274:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       col = numColsB;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 12


 352              		.loc 1 274 0
 353 0222 9C23     		mov	r3, #156
 354 0224 FB18     		add	r3, r7, r3
 355 0226 1B88     		ldrh	r3, [r3]
 356 0228 C422     		mov	r2, #196
 357 022a BA18     		add	r2, r7, r2
 358 022c 1360     		str	r3, [r2]
 275:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 276:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* For every row wise process, the pIn2 pointer is set
 277:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****        ** to the starting address of the transposed pSrcB data */
 278:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       pInB = pSrcBT;
 359              		.loc 1 278 0
 360 022e A023     		mov	r3, #160
 361 0230 FB18     		add	r3, r7, r3
 362 0232 1B68     		ldr	r3, [r3]
 363 0234 BB61     		str	r3, [r7, #24]
 279:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 280:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef UNALIGNED_SUPPORT_DISABLE
 281:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* Process two (transposed) columns from matrix B at a time */
 282:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       col = col >> 1;
 364              		.loc 1 282 0
 365 0236 C423     		mov	r3, #196
 366 0238 FB18     		add	r3, r7, r3
 367 023a 1B68     		ldr	r3, [r3]
 368 023c 5B08     		lsr	r3, r3, #1
 369 023e C422     		mov	r2, #196
 370 0240 BA18     		add	r2, r7, r2
 371 0242 1360     		str	r3, [r2]
 283:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       j = 0;
 372              		.loc 1 283 0
 373 0244 0023     		mov	r3, #0
 374 0246 A422     		mov	r2, #164
 375 0248 BA18     		add	r2, r7, r2
 376 024a 1360     		str	r3, [r2]
 284:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif
 285:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 286:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* column loop */
 287:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       while (col > 0u)
 377              		.loc 1 287 0
 378 024c 85E1     		b	.L8
 379              	.L16:
 288:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 289:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 290:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         sum = 0;
 380              		.loc 1 290 0
 381 024e 0023     		mov	r3, #0
 382 0250 CC22     		mov	r2, #204
 383 0252 BA18     		add	r2, r7, r2
 384 0254 1360     		str	r3, [r2]
 291:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 292:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Initiate the pointer pInA to point to the starting address of the column being processed
 293:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         pInA = pSrcA->pData + i;
 385              		.loc 1 293 0
 386 0256 FB68     		ldr	r3, [r7, #12]
 387 0258 5A68     		ldr	r2, [r3, #4]
 388 025a C023     		mov	r3, #192
 389 025c FB18     		add	r3, r7, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 13


 390 025e 1B68     		ldr	r3, [r3]
 391 0260 5B00     		lsl	r3, r3, #1
 392 0262 D318     		add	r3, r2, r3
 393 0264 FB61     		str	r3, [r7, #28]
 294:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 295:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef UNALIGNED_SUPPORT_DISABLE
 296:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         sum2 = 0;
 394              		.loc 1 296 0
 395 0266 0023     		mov	r3, #0
 396 0268 B422     		mov	r2, #180
 397 026a BA18     		add	r2, r7, r2
 398 026c 1360     		str	r3, [r2]
 297:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         sum3 = 0;
 399              		.loc 1 297 0
 400 026e 0023     		mov	r3, #0
 401 0270 B022     		mov	r2, #176
 402 0272 BA18     		add	r2, r7, r2
 403 0274 1360     		str	r3, [r2]
 298:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         sum4 = 0;
 404              		.loc 1 298 0
 405 0276 0023     		mov	r3, #0
 406 0278 AC22     		mov	r2, #172
 407 027a BA18     		add	r2, r7, r2
 408 027c 1360     		str	r3, [r2]
 299:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         pInB  = pSrcBT + j;
 409              		.loc 1 299 0
 410 027e A423     		mov	r3, #164
 411 0280 FB18     		add	r3, r7, r3
 412 0282 1B68     		ldr	r3, [r3]
 413 0284 5B00     		lsl	r3, r3, #1
 414 0286 A022     		mov	r2, #160
 415 0288 BA18     		add	r2, r7, r2
 416 028a 1268     		ldr	r2, [r2]
 417 028c D318     		add	r3, r2, r3
 418 028e BB61     		str	r3, [r7, #24]
 300:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         pInA2 = pInA + numColsA;
 419              		.loc 1 300 0
 420 0290 FA69     		ldr	r2, [r7, #28]
 421 0292 9A23     		mov	r3, #154
 422 0294 FB18     		add	r3, r7, r3
 423 0296 1B88     		ldrh	r3, [r3]
 424 0298 5B00     		lsl	r3, r3, #1
 425 029a D318     		add	r3, r2, r3
 426 029c 7B61     		str	r3, [r7, #20]
 301:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         pInB2 = pInB + numRowsB;
 427              		.loc 1 301 0
 428 029e BA69     		ldr	r2, [r7, #24]
 429 02a0 9823     		mov	r3, #152
 430 02a2 FB18     		add	r3, r7, r3
 431 02a4 1B88     		ldrh	r3, [r3]
 432 02a6 5B00     		lsl	r3, r3, #1
 433 02a8 D318     		add	r3, r2, r3
 434 02aa 3B61     		str	r3, [r7, #16]
 302:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 303:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Read in two elements at once - alows dual MAC instruction */
 304:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA >> 1;
 435              		.loc 1 304 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 14


 436 02ac 9A23     		mov	r3, #154
 437 02ae FB18     		add	r3, r7, r3
 438 02b0 1B88     		ldrh	r3, [r3]
 439 02b2 5B08     		lsr	r3, r3, #1
 440 02b4 9BB2     		uxth	r3, r3
 441 02b6 B822     		mov	r2, #184
 442 02b8 BA18     		add	r2, r7, r2
 443 02ba 1360     		str	r3, [r2]
 305:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 306:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA >> 2;
 307:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif
 308:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 309:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* matrix multiplication */
 310:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0u)
 444              		.loc 1 310 0
 445 02bc A2E0     		b	.L9
 446              	.L14:
 311:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 312:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 313:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef UNALIGNED_SUPPORT_DISABLE
 314:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 315:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA1 = *__SIMD32(pInA)++;
 447              		.loc 1 315 0
 448 02be 1C23     		mov	r3, #28
 449 02c0 FB18     		add	r3, r7, r3
 450 02c2 1A68     		ldr	r2, [r3]
 451 02c4 111D     		add	r1, r2, #4
 452 02c6 1960     		str	r1, [r3]
 453 02c8 1368     		ldr	r3, [r2]
 454 02ca 9022     		mov	r2, #144
 455 02cc BA18     		add	r2, r7, r2
 456 02ce 1360     		str	r3, [r2]
 316:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB1 = *__SIMD32(pInB)++;
 457              		.loc 1 316 0
 458 02d0 1823     		mov	r3, #24
 459 02d2 FB18     		add	r3, r7, r3
 460 02d4 1A68     		ldr	r2, [r3]
 461 02d6 111D     		add	r1, r2, #4
 462 02d8 1960     		str	r1, [r3]
 463 02da 1368     		ldr	r3, [r2]
 464 02dc 8C22     		mov	r2, #140
 465 02de BA18     		add	r2, r7, r2
 466 02e0 1360     		str	r3, [r2]
 317:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA2 = *__SIMD32(pInA2)++;
 467              		.loc 1 317 0
 468 02e2 1423     		mov	r3, #20
 469 02e4 FB18     		add	r3, r7, r3
 470 02e6 1A68     		ldr	r2, [r3]
 471 02e8 111D     		add	r1, r2, #4
 472 02ea 1960     		str	r1, [r3]
 473 02ec 1368     		ldr	r3, [r2]
 474 02ee 8822     		mov	r2, #136
 475 02f0 BA18     		add	r2, r7, r2
 476 02f2 1360     		str	r3, [r2]
 318:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB2 = *__SIMD32(pInB2)++;
 477              		.loc 1 318 0
 478 02f4 1023     		mov	r3, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 15


 479 02f6 FB18     		add	r3, r7, r3
 480 02f8 1A68     		ldr	r2, [r3]
 481 02fa 111D     		add	r1, r2, #4
 482 02fc 1960     		str	r1, [r3]
 483 02fe 1368     		ldr	r3, [r2]
 484 0300 8422     		mov	r2, #132
 485 0302 BA18     		add	r2, r7, r2
 486 0304 1360     		str	r3, [r2]
 319:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 320:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum  = __SMLAD(inA1, inB1, sum);
 487              		.loc 1 320 0
 488 0306 9023     		mov	r3, #144
 489 0308 FB18     		add	r3, r7, r3
 490 030a 1968     		ldr	r1, [r3]
 491 030c 8C23     		mov	r3, #140
 492 030e FB18     		add	r3, r7, r3
 493 0310 1A68     		ldr	r2, [r3]
 494 0312 CC23     		mov	r3, #204
 495 0314 FB18     		add	r3, r7, r3
 496 0316 1B68     		ldr	r3, [r3]
 497 0318 F967     		str	r1, [r7, #124]
 498 031a BA67     		str	r2, [r7, #120]
 499 031c 7B67     		str	r3, [r7, #116]
 500              	.LBB18:
 501              	.LBB19:
 502              		.file 2 ".\\Include/arm_math.h"
   1:.\Include/arm_math.h **** /* ----------------------------------------------------------------------
   2:.\Include/arm_math.h ****  * Project:      CMSIS DSP Library
   3:.\Include/arm_math.h ****  * Title:        arm_math.h
   4:.\Include/arm_math.h ****  * Description:  Public header file for CMSIS DSP Library
   5:.\Include/arm_math.h ****  *
   6:.\Include/arm_math.h ****  * $Date:        27. January 2017
   7:.\Include/arm_math.h ****  * $Revision:    V.1.5.1
   8:.\Include/arm_math.h ****  *
   9:.\Include/arm_math.h ****  * Target Processor: Cortex-M cores
  10:.\Include/arm_math.h ****  * -------------------------------------------------------------------- */
  11:.\Include/arm_math.h **** /*
  12:.\Include/arm_math.h ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:.\Include/arm_math.h ****  *
  14:.\Include/arm_math.h ****  * SPDX-License-Identifier: Apache-2.0
  15:.\Include/arm_math.h ****  *
  16:.\Include/arm_math.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:.\Include/arm_math.h ****  * not use this file except in compliance with the License.
  18:.\Include/arm_math.h ****  * You may obtain a copy of the License at
  19:.\Include/arm_math.h ****  *
  20:.\Include/arm_math.h ****  * www.apache.org/licenses/LICENSE-2.0
  21:.\Include/arm_math.h ****  *
  22:.\Include/arm_math.h ****  * Unless required by applicable law or agreed to in writing, software
  23:.\Include/arm_math.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:.\Include/arm_math.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:.\Include/arm_math.h ****  * See the License for the specific language governing permissions and
  26:.\Include/arm_math.h ****  * limitations under the License.
  27:.\Include/arm_math.h ****  */
  28:.\Include/arm_math.h **** 
  29:.\Include/arm_math.h **** /**
  30:.\Include/arm_math.h ****    \mainpage CMSIS DSP Software Library
  31:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 16


  32:.\Include/arm_math.h ****    * Introduction
  33:.\Include/arm_math.h ****    * ------------
  34:.\Include/arm_math.h ****    *
  35:.\Include/arm_math.h ****    * This user manual describes the CMSIS DSP software library,
  36:.\Include/arm_math.h ****    * a suite of common signal processing functions for use on Cortex-M processor based devices.
  37:.\Include/arm_math.h ****    *
  38:.\Include/arm_math.h ****    * The library is divided into a number of functions each covering a specific category:
  39:.\Include/arm_math.h ****    * - Basic math functions
  40:.\Include/arm_math.h ****    * - Fast math functions
  41:.\Include/arm_math.h ****    * - Complex math functions
  42:.\Include/arm_math.h ****    * - Filters
  43:.\Include/arm_math.h ****    * - Matrix functions
  44:.\Include/arm_math.h ****    * - Transforms
  45:.\Include/arm_math.h ****    * - Motor control functions
  46:.\Include/arm_math.h ****    * - Statistical functions
  47:.\Include/arm_math.h ****    * - Support functions
  48:.\Include/arm_math.h ****    * - Interpolation functions
  49:.\Include/arm_math.h ****    *
  50:.\Include/arm_math.h ****    * The library has separate functions for operating on 8-bit integers, 16-bit integers,
  51:.\Include/arm_math.h ****    * 32-bit integer and 32-bit floating-point values.
  52:.\Include/arm_math.h ****    *
  53:.\Include/arm_math.h ****    * Using the Library
  54:.\Include/arm_math.h ****    * ------------
  55:.\Include/arm_math.h ****    *
  56:.\Include/arm_math.h ****    * The library installer contains prebuilt versions of the libraries in the <code>Lib</code> fold
  57:.\Include/arm_math.h ****    * - arm_cortexM7lfdp_math.lib (Cortex-M7, Little endian, Double Precision Floating Point Unit)
  58:.\Include/arm_math.h ****    * - arm_cortexM7bfdp_math.lib (Cortex-M7, Big endian, Double Precision Floating Point Unit)
  59:.\Include/arm_math.h ****    * - arm_cortexM7lfsp_math.lib (Cortex-M7, Little endian, Single Precision Floating Point Unit)
  60:.\Include/arm_math.h ****    * - arm_cortexM7bfsp_math.lib (Cortex-M7, Big endian and Single Precision Floating Point Unit on
  61:.\Include/arm_math.h ****    * - arm_cortexM7l_math.lib (Cortex-M7, Little endian)
  62:.\Include/arm_math.h ****    * - arm_cortexM7b_math.lib (Cortex-M7, Big endian)
  63:.\Include/arm_math.h ****    * - arm_cortexM4lf_math.lib (Cortex-M4, Little endian, Floating Point Unit)
  64:.\Include/arm_math.h ****    * - arm_cortexM4bf_math.lib (Cortex-M4, Big endian, Floating Point Unit)
  65:.\Include/arm_math.h ****    * - arm_cortexM4l_math.lib (Cortex-M4, Little endian)
  66:.\Include/arm_math.h ****    * - arm_cortexM4b_math.lib (Cortex-M4, Big endian)
  67:.\Include/arm_math.h ****    * - arm_cortexM3l_math.lib (Cortex-M3, Little endian)
  68:.\Include/arm_math.h ****    * - arm_cortexM3b_math.lib (Cortex-M3, Big endian)
  69:.\Include/arm_math.h ****    * - arm_cortexM0l_math.lib (Cortex-M0 / Cortex-M0+, Little endian)
  70:.\Include/arm_math.h ****    * - arm_cortexM0b_math.lib (Cortex-M0 / Cortex-M0+, Big endian)
  71:.\Include/arm_math.h ****    * - arm_ARMv8MBLl_math.lib (ARMv8M Baseline, Little endian)
  72:.\Include/arm_math.h ****    * - arm_ARMv8MMLl_math.lib (ARMv8M Mainline, Little endian)
  73:.\Include/arm_math.h ****    * - arm_ARMv8MMLlfsp_math.lib (ARMv8M Mainline, Little endian, Single Precision Floating Point U
  74:.\Include/arm_math.h ****    * - arm_ARMv8MMLld_math.lib (ARMv8M Mainline, Little endian, DSP instructions)
  75:.\Include/arm_math.h ****    * - arm_ARMv8MMLldfsp_math.lib (ARMv8M Mainline, Little endian, DSP instructions, Single Precisi
  76:.\Include/arm_math.h ****    *
  77:.\Include/arm_math.h ****    * The library functions are declared in the public file <code>arm_math.h</code> which is placed 
  78:.\Include/arm_math.h ****    * Simply include this file and link the appropriate library in the application and begin calling
  79:.\Include/arm_math.h ****    * public header file <code> arm_math.h</code> for Cortex-M cores with little endian and big endi
  80:.\Include/arm_math.h ****    * Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or  ARM_MATH_CM3 or
  81:.\Include/arm_math.h ****    * ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.
  82:.\Include/arm_math.h ****    * For ARMv8M cores define pre processor MACRO ARM_MATH_ARMV8MBL or ARM_MATH_ARMV8MML.
  83:.\Include/arm_math.h ****    * Set Pre processor MACRO __DSP_PRESENT if ARMv8M Mainline core supports DSP instructions.
  84:.\Include/arm_math.h ****    * 
  85:.\Include/arm_math.h ****    *
  86:.\Include/arm_math.h ****    * Examples
  87:.\Include/arm_math.h ****    * --------
  88:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 17


  89:.\Include/arm_math.h ****    * The library ships with a number of examples which demonstrate how to use the library functions
  90:.\Include/arm_math.h ****    *
  91:.\Include/arm_math.h ****    * Toolchain Support
  92:.\Include/arm_math.h ****    * ------------
  93:.\Include/arm_math.h ****    *
  94:.\Include/arm_math.h ****    * The library has been developed and tested with MDK-ARM version 5.14.0.0
  95:.\Include/arm_math.h ****    * The library is being tested in GCC and IAR toolchains and updates on this activity will be mad
  96:.\Include/arm_math.h ****    *
  97:.\Include/arm_math.h ****    * Building the Library
  98:.\Include/arm_math.h ****    * ------------
  99:.\Include/arm_math.h ****    *
 100:.\Include/arm_math.h ****    * The library installer contains a project file to re build libraries on MDK-ARM Tool chain in t
 101:.\Include/arm_math.h ****    * - arm_cortexM_math.uvprojx
 102:.\Include/arm_math.h ****    *
 103:.\Include/arm_math.h ****    *
 104:.\Include/arm_math.h ****    * The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecti
 105:.\Include/arm_math.h ****    *
 106:.\Include/arm_math.h ****    * Pre-processor Macros
 107:.\Include/arm_math.h ****    * ------------
 108:.\Include/arm_math.h ****    *
 109:.\Include/arm_math.h ****    * Each library project have differant pre-processor macros.
 110:.\Include/arm_math.h ****    *
 111:.\Include/arm_math.h ****    * - UNALIGNED_SUPPORT_DISABLE:
 112:.\Include/arm_math.h ****    *
 113:.\Include/arm_math.h ****    * Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory acces
 114:.\Include/arm_math.h ****    *
 115:.\Include/arm_math.h ****    * - ARM_MATH_BIG_ENDIAN:
 116:.\Include/arm_math.h ****    *
 117:.\Include/arm_math.h ****    * Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default libra
 118:.\Include/arm_math.h ****    *
 119:.\Include/arm_math.h ****    * - ARM_MATH_MATRIX_CHECK:
 120:.\Include/arm_math.h ****    *
 121:.\Include/arm_math.h ****    * Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices
 122:.\Include/arm_math.h ****    *
 123:.\Include/arm_math.h ****    * - ARM_MATH_ROUNDING:
 124:.\Include/arm_math.h ****    *
 125:.\Include/arm_math.h ****    * Define macro ARM_MATH_ROUNDING for rounding on support functions
 126:.\Include/arm_math.h ****    *
 127:.\Include/arm_math.h ****    * - ARM_MATH_CMx:
 128:.\Include/arm_math.h ****    *
 129:.\Include/arm_math.h ****    * Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for build
 130:.\Include/arm_math.h ****    * and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building libra
 131:.\Include/arm_math.h ****    * ARM_MATH_CM7 for building the library on cortex-M7.
 132:.\Include/arm_math.h ****    *
 133:.\Include/arm_math.h ****    * - ARM_MATH_ARMV8MxL:
 134:.\Include/arm_math.h ****    *
 135:.\Include/arm_math.h ****    * Define macro ARM_MATH_ARMV8MBL for building the library on ARMv8M Baseline target, ARM_MATH_AR
 136:.\Include/arm_math.h ****    * on ARMv8M Mainline target.
 137:.\Include/arm_math.h ****    *
 138:.\Include/arm_math.h ****    * - __FPU_PRESENT:
 139:.\Include/arm_math.h ****    *
 140:.\Include/arm_math.h ****    * Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro f
 141:.\Include/arm_math.h ****    *
 142:.\Include/arm_math.h ****    * - __DSP_PRESENT:
 143:.\Include/arm_math.h ****    *
 144:.\Include/arm_math.h ****    * Initialize macro __DSP_PRESENT = 1 when ARMv8M Mainline core supports DSP instructions.
 145:.\Include/arm_math.h ****    *
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 18


 146:.\Include/arm_math.h ****    * <hr>
 147:.\Include/arm_math.h ****    * CMSIS-DSP in ARM::CMSIS Pack
 148:.\Include/arm_math.h ****    * -----------------------------
 149:.\Include/arm_math.h ****    *
 150:.\Include/arm_math.h ****    * The following files relevant to CMSIS-DSP are present in the <b>ARM::CMSIS</b> Pack directorie
 151:.\Include/arm_math.h ****    * |File/Folder                   |Content                                                       
 152:.\Include/arm_math.h ****    * |------------------------------|--------------------------------------------------------------
 153:.\Include/arm_math.h ****    * |\b CMSIS\\Documentation\\DSP  | This documentation                                           
 154:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib             | Software license agreement (license.txt)                     
 155:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Examples   | Example projects demonstrating the usage of the library funct
 156:.\Include/arm_math.h ****    * |\b CMSIS\\DSP_Lib\\Source     | Source files for rebuilding the library                      
 157:.\Include/arm_math.h ****    *
 158:.\Include/arm_math.h ****    * <hr>
 159:.\Include/arm_math.h ****    * Revision History of CMSIS-DSP
 160:.\Include/arm_math.h ****    * ------------
 161:.\Include/arm_math.h ****    * Please refer to \ref ChangeLog_pg.
 162:.\Include/arm_math.h ****    *
 163:.\Include/arm_math.h ****    * Copyright Notice
 164:.\Include/arm_math.h ****    * ------------
 165:.\Include/arm_math.h ****    *
 166:.\Include/arm_math.h ****    * Copyright (C) 2010-2015 ARM Limited. All rights reserved.
 167:.\Include/arm_math.h ****    */
 168:.\Include/arm_math.h **** 
 169:.\Include/arm_math.h **** 
 170:.\Include/arm_math.h **** /**
 171:.\Include/arm_math.h ****  * @defgroup groupMath Basic Math Functions
 172:.\Include/arm_math.h ****  */
 173:.\Include/arm_math.h **** 
 174:.\Include/arm_math.h **** /**
 175:.\Include/arm_math.h ****  * @defgroup groupFastMath Fast Math Functions
 176:.\Include/arm_math.h ****  * This set of functions provides a fast approximation to sine, cosine, and square root.
 177:.\Include/arm_math.h ****  * As compared to most of the other functions in the CMSIS math library, the fast math functions
 178:.\Include/arm_math.h ****  * operate on individual values and not arrays.
 179:.\Include/arm_math.h ****  * There are separate functions for Q15, Q31, and floating-point data.
 180:.\Include/arm_math.h ****  *
 181:.\Include/arm_math.h ****  */
 182:.\Include/arm_math.h **** 
 183:.\Include/arm_math.h **** /**
 184:.\Include/arm_math.h ****  * @defgroup groupCmplxMath Complex Math Functions
 185:.\Include/arm_math.h ****  * This set of functions operates on complex data vectors.
 186:.\Include/arm_math.h ****  * The data in the complex arrays is stored in an interleaved fashion
 187:.\Include/arm_math.h ****  * (real, imag, real, imag, ...).
 188:.\Include/arm_math.h ****  * In the API functions, the number of samples in a complex array refers
 189:.\Include/arm_math.h ****  * to the number of complex values; the array contains twice this number of
 190:.\Include/arm_math.h ****  * real values.
 191:.\Include/arm_math.h ****  */
 192:.\Include/arm_math.h **** 
 193:.\Include/arm_math.h **** /**
 194:.\Include/arm_math.h ****  * @defgroup groupFilters Filtering Functions
 195:.\Include/arm_math.h ****  */
 196:.\Include/arm_math.h **** 
 197:.\Include/arm_math.h **** /**
 198:.\Include/arm_math.h ****  * @defgroup groupMatrix Matrix Functions
 199:.\Include/arm_math.h ****  *
 200:.\Include/arm_math.h ****  * This set of functions provides basic matrix math operations.
 201:.\Include/arm_math.h ****  * The functions operate on matrix data structures.  For example,
 202:.\Include/arm_math.h ****  * the type
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 19


 203:.\Include/arm_math.h ****  * definition for the floating-point matrix structure is shown
 204:.\Include/arm_math.h ****  * below:
 205:.\Include/arm_math.h ****  * <pre>
 206:.\Include/arm_math.h ****  *     typedef struct
 207:.\Include/arm_math.h ****  *     {
 208:.\Include/arm_math.h ****  *       uint16_t numRows;     // number of rows of the matrix.
 209:.\Include/arm_math.h ****  *       uint16_t numCols;     // number of columns of the matrix.
 210:.\Include/arm_math.h ****  *       float32_t *pData;     // points to the data of the matrix.
 211:.\Include/arm_math.h ****  *     } arm_matrix_instance_f32;
 212:.\Include/arm_math.h ****  * </pre>
 213:.\Include/arm_math.h ****  * There are similar definitions for Q15 and Q31 data types.
 214:.\Include/arm_math.h ****  *
 215:.\Include/arm_math.h ****  * The structure specifies the size of the matrix and then points to
 216:.\Include/arm_math.h ****  * an array of data.  The array is of size <code>numRows X numCols</code>
 217:.\Include/arm_math.h ****  * and the values are arranged in row order.  That is, the
 218:.\Include/arm_math.h ****  * matrix element (i, j) is stored at:
 219:.\Include/arm_math.h ****  * <pre>
 220:.\Include/arm_math.h ****  *     pData[i*numCols + j]
 221:.\Include/arm_math.h ****  * </pre>
 222:.\Include/arm_math.h ****  *
 223:.\Include/arm_math.h ****  * \par Init Functions
 224:.\Include/arm_math.h ****  * There is an associated initialization function for each type of matrix
 225:.\Include/arm_math.h ****  * data structure.
 226:.\Include/arm_math.h ****  * The initialization function sets the values of the internal structure fields.
 227:.\Include/arm_math.h ****  * Refer to the function <code>arm_mat_init_f32()</code>, <code>arm_mat_init_q31()</code>
 228:.\Include/arm_math.h ****  * and <code>arm_mat_init_q15()</code> for floating-point, Q31 and Q15 types,  respectively.
 229:.\Include/arm_math.h ****  *
 230:.\Include/arm_math.h ****  * \par
 231:.\Include/arm_math.h ****  * Use of the initialization function is optional. However, if initialization function is used
 232:.\Include/arm_math.h ****  * then the instance structure cannot be placed into a const data section.
 233:.\Include/arm_math.h ****  * To place the instance structure in a const data
 234:.\Include/arm_math.h ****  * section, manually initialize the data structure.  For example:
 235:.\Include/arm_math.h ****  * <pre>
 236:.\Include/arm_math.h ****  * <code>arm_matrix_instance_f32 S = {nRows, nColumns, pData};</code>
 237:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q31 S = {nRows, nColumns, pData};</code>
 238:.\Include/arm_math.h ****  * <code>arm_matrix_instance_q15 S = {nRows, nColumns, pData};</code>
 239:.\Include/arm_math.h ****  * </pre>
 240:.\Include/arm_math.h ****  * where <code>nRows</code> specifies the number of rows, <code>nColumns</code>
 241:.\Include/arm_math.h ****  * specifies the number of columns, and <code>pData</code> points to the
 242:.\Include/arm_math.h ****  * data array.
 243:.\Include/arm_math.h ****  *
 244:.\Include/arm_math.h ****  * \par Size Checking
 245:.\Include/arm_math.h ****  * By default all of the matrix functions perform size checking on the input and
 246:.\Include/arm_math.h ****  * output matrices.  For example, the matrix addition function verifies that the
 247:.\Include/arm_math.h ****  * two input matrices and the output matrix all have the same number of rows and
 248:.\Include/arm_math.h ****  * columns.  If the size check fails the functions return:
 249:.\Include/arm_math.h ****  * <pre>
 250:.\Include/arm_math.h ****  *     ARM_MATH_SIZE_MISMATCH
 251:.\Include/arm_math.h ****  * </pre>
 252:.\Include/arm_math.h ****  * Otherwise the functions return
 253:.\Include/arm_math.h ****  * <pre>
 254:.\Include/arm_math.h ****  *     ARM_MATH_SUCCESS
 255:.\Include/arm_math.h ****  * </pre>
 256:.\Include/arm_math.h ****  * There is some overhead associated with this matrix size checking.
 257:.\Include/arm_math.h ****  * The matrix size checking is enabled via the \#define
 258:.\Include/arm_math.h ****  * <pre>
 259:.\Include/arm_math.h ****  *     ARM_MATH_MATRIX_CHECK
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 20


 260:.\Include/arm_math.h ****  * </pre>
 261:.\Include/arm_math.h ****  * within the library project settings.  By default this macro is defined
 262:.\Include/arm_math.h ****  * and size checking is enabled.  By changing the project settings and
 263:.\Include/arm_math.h ****  * undefining this macro size checking is eliminated and the functions
 264:.\Include/arm_math.h ****  * run a bit faster.  With size checking disabled the functions always
 265:.\Include/arm_math.h ****  * return <code>ARM_MATH_SUCCESS</code>.
 266:.\Include/arm_math.h ****  */
 267:.\Include/arm_math.h **** 
 268:.\Include/arm_math.h **** /**
 269:.\Include/arm_math.h ****  * @defgroup groupTransforms Transform Functions
 270:.\Include/arm_math.h ****  */
 271:.\Include/arm_math.h **** 
 272:.\Include/arm_math.h **** /**
 273:.\Include/arm_math.h ****  * @defgroup groupController Controller Functions
 274:.\Include/arm_math.h ****  */
 275:.\Include/arm_math.h **** 
 276:.\Include/arm_math.h **** /**
 277:.\Include/arm_math.h ****  * @defgroup groupStats Statistics Functions
 278:.\Include/arm_math.h ****  */
 279:.\Include/arm_math.h **** /**
 280:.\Include/arm_math.h ****  * @defgroup groupSupport Support Functions
 281:.\Include/arm_math.h ****  */
 282:.\Include/arm_math.h **** 
 283:.\Include/arm_math.h **** /**
 284:.\Include/arm_math.h ****  * @defgroup groupInterpolation Interpolation Functions
 285:.\Include/arm_math.h ****  * These functions perform 1- and 2-dimensional interpolation of data.
 286:.\Include/arm_math.h ****  * Linear interpolation is used for 1-dimensional data and
 287:.\Include/arm_math.h ****  * bilinear interpolation is used for 2-dimensional data.
 288:.\Include/arm_math.h ****  */
 289:.\Include/arm_math.h **** 
 290:.\Include/arm_math.h **** /**
 291:.\Include/arm_math.h ****  * @defgroup groupExamples Examples
 292:.\Include/arm_math.h ****  */
 293:.\Include/arm_math.h **** #ifndef _ARM_MATH_H
 294:.\Include/arm_math.h **** #define _ARM_MATH_H
 295:.\Include/arm_math.h **** 
 296:.\Include/arm_math.h **** /* ignore some GCC warnings */
 297:.\Include/arm_math.h **** #if defined ( __GNUC__ )
 298:.\Include/arm_math.h **** #pragma GCC diagnostic push
 299:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
 300:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wconversion"
 301:.\Include/arm_math.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
 302:.\Include/arm_math.h **** #endif
 303:.\Include/arm_math.h **** 
 304:.\Include/arm_math.h **** #define __CMSIS_GENERIC         /* disable NVIC and Systick functions */
 305:.\Include/arm_math.h **** 
 306:.\Include/arm_math.h **** #if defined(ARM_MATH_CM7)
 307:.\Include/arm_math.h ****   #include "core_cm7.h"
 308:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 309:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM4)
 310:.\Include/arm_math.h ****   #include "core_cm4.h"
 311:.\Include/arm_math.h ****   #define ARM_MATH_DSP
 312:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM3)
 313:.\Include/arm_math.h ****   #include "core_cm3.h"
 314:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0)
 315:.\Include/arm_math.h ****   #include "core_cm0.h"
 316:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 21


 317:.\Include/arm_math.h **** #elif defined (ARM_MATH_CM0PLUS)
 318:.\Include/arm_math.h ****   #include "core_cm0plus.h"
 319:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 320:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MBL)
 321:.\Include/arm_math.h ****   #include "core_armv8mbl.h"
 322:.\Include/arm_math.h ****   #define ARM_MATH_CM0_FAMILY
 323:.\Include/arm_math.h **** #elif defined (ARM_MATH_ARMV8MML)
 324:.\Include/arm_math.h ****   #include "core_armv8mml.h"
 325:.\Include/arm_math.h ****   #if (defined (__DSP_PRESENT) && (__DSP_PRESENT == 1))
 326:.\Include/arm_math.h ****     #define ARM_MATH_DSP
 327:.\Include/arm_math.h ****   #endif
 328:.\Include/arm_math.h **** #else
 329:.\Include/arm_math.h ****   #error "Define according the used Cortex core ARM_MATH_CM7, ARM_MATH_CM4, ARM_MATH_CM3, ARM_MATH_
 330:.\Include/arm_math.h **** #endif
 331:.\Include/arm_math.h **** 
 332:.\Include/arm_math.h **** #undef  __CMSIS_GENERIC         /* enable NVIC and Systick functions */
 333:.\Include/arm_math.h **** #include "string.h"
 334:.\Include/arm_math.h **** #include "math.h"
 335:.\Include/arm_math.h **** #ifdef   __cplusplus
 336:.\Include/arm_math.h **** extern "C"
 337:.\Include/arm_math.h **** {
 338:.\Include/arm_math.h **** #endif
 339:.\Include/arm_math.h **** 
 340:.\Include/arm_math.h **** 
 341:.\Include/arm_math.h ****   /**
 342:.\Include/arm_math.h ****    * @brief Macros required for reciprocal calculation in Normalized LMS
 343:.\Include/arm_math.h ****    */
 344:.\Include/arm_math.h **** 
 345:.\Include/arm_math.h **** #define DELTA_Q31          (0x100)
 346:.\Include/arm_math.h **** #define DELTA_Q15          0x5
 347:.\Include/arm_math.h **** #define INDEX_MASK         0x0000003F
 348:.\Include/arm_math.h **** #ifndef PI
 349:.\Include/arm_math.h ****   #define PI               3.14159265358979f
 350:.\Include/arm_math.h **** #endif
 351:.\Include/arm_math.h **** 
 352:.\Include/arm_math.h ****   /**
 353:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Fast math approximations
 354:.\Include/arm_math.h ****    */
 355:.\Include/arm_math.h **** 
 356:.\Include/arm_math.h **** #define FAST_MATH_TABLE_SIZE  512
 357:.\Include/arm_math.h **** #define FAST_MATH_Q31_SHIFT   (32 - 10)
 358:.\Include/arm_math.h **** #define FAST_MATH_Q15_SHIFT   (16 - 10)
 359:.\Include/arm_math.h **** #define CONTROLLER_Q31_SHIFT  (32 - 9)
 360:.\Include/arm_math.h **** #define TABLE_SPACING_Q31     0x400000
 361:.\Include/arm_math.h **** #define TABLE_SPACING_Q15     0x80
 362:.\Include/arm_math.h **** 
 363:.\Include/arm_math.h ****   /**
 364:.\Include/arm_math.h ****    * @brief Macros required for SINE and COSINE Controller functions
 365:.\Include/arm_math.h ****    */
 366:.\Include/arm_math.h ****   /* 1.31(q31) Fixed value of 2/360 */
 367:.\Include/arm_math.h ****   /* -1 to +1 is divided into 360 values so total spacing is (2/360) */
 368:.\Include/arm_math.h **** #define INPUT_SPACING         0xB60B61
 369:.\Include/arm_math.h **** 
 370:.\Include/arm_math.h ****   /**
 371:.\Include/arm_math.h ****    * @brief Macro for Unaligned Support
 372:.\Include/arm_math.h ****    */
 373:.\Include/arm_math.h **** #ifndef UNALIGNED_SUPPORT_DISABLE
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 22


 374:.\Include/arm_math.h ****     #define ALIGN4
 375:.\Include/arm_math.h **** #else
 376:.\Include/arm_math.h ****   #if defined  (__GNUC__)
 377:.\Include/arm_math.h ****     #define ALIGN4 __attribute__((aligned(4)))
 378:.\Include/arm_math.h ****   #else
 379:.\Include/arm_math.h ****     #define ALIGN4 __align(4)
 380:.\Include/arm_math.h ****   #endif
 381:.\Include/arm_math.h **** #endif   /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 382:.\Include/arm_math.h **** 
 383:.\Include/arm_math.h ****   /**
 384:.\Include/arm_math.h ****    * @brief Error status returned by some functions in the library.
 385:.\Include/arm_math.h ****    */
 386:.\Include/arm_math.h **** 
 387:.\Include/arm_math.h ****   typedef enum
 388:.\Include/arm_math.h ****   {
 389:.\Include/arm_math.h ****     ARM_MATH_SUCCESS = 0,                /**< No error */
 390:.\Include/arm_math.h ****     ARM_MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
 391:.\Include/arm_math.h ****     ARM_MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
 392:.\Include/arm_math.h ****     ARM_MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation
 393:.\Include/arm_math.h ****     ARM_MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
 394:.\Include/arm_math.h ****     ARM_MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is 
 395:.\Include/arm_math.h ****     ARM_MATH_TEST_FAILURE = -6           /**< Test Failed  */
 396:.\Include/arm_math.h ****   } arm_status;
 397:.\Include/arm_math.h **** 
 398:.\Include/arm_math.h ****   /**
 399:.\Include/arm_math.h ****    * @brief 8-bit fractional data type in 1.7 format.
 400:.\Include/arm_math.h ****    */
 401:.\Include/arm_math.h ****   typedef int8_t q7_t;
 402:.\Include/arm_math.h **** 
 403:.\Include/arm_math.h ****   /**
 404:.\Include/arm_math.h ****    * @brief 16-bit fractional data type in 1.15 format.
 405:.\Include/arm_math.h ****    */
 406:.\Include/arm_math.h ****   typedef int16_t q15_t;
 407:.\Include/arm_math.h **** 
 408:.\Include/arm_math.h ****   /**
 409:.\Include/arm_math.h ****    * @brief 32-bit fractional data type in 1.31 format.
 410:.\Include/arm_math.h ****    */
 411:.\Include/arm_math.h ****   typedef int32_t q31_t;
 412:.\Include/arm_math.h **** 
 413:.\Include/arm_math.h ****   /**
 414:.\Include/arm_math.h ****    * @brief 64-bit fractional data type in 1.63 format.
 415:.\Include/arm_math.h ****    */
 416:.\Include/arm_math.h ****   typedef int64_t q63_t;
 417:.\Include/arm_math.h **** 
 418:.\Include/arm_math.h ****   /**
 419:.\Include/arm_math.h ****    * @brief 32-bit floating-point type definition.
 420:.\Include/arm_math.h ****    */
 421:.\Include/arm_math.h ****   typedef float float32_t;
 422:.\Include/arm_math.h **** 
 423:.\Include/arm_math.h ****   /**
 424:.\Include/arm_math.h ****    * @brief 64-bit floating-point type definition.
 425:.\Include/arm_math.h ****    */
 426:.\Include/arm_math.h ****   typedef double float64_t;
 427:.\Include/arm_math.h **** 
 428:.\Include/arm_math.h ****   /**
 429:.\Include/arm_math.h ****    * @brief definition to read/write two 16 bit values.
 430:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 23


 431:.\Include/arm_math.h **** #if   defined ( __CC_ARM )
 432:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 433:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 434:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 435:.\Include/arm_math.h **** 
 436:.\Include/arm_math.h **** #elif defined ( __ARMCC_VERSION ) && ( __ARMCC_VERSION >= 6010050 )
 437:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 438:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 439:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 440:.\Include/arm_math.h **** 
 441:.\Include/arm_math.h **** #elif defined ( __GNUC__ )
 442:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 443:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 444:.\Include/arm_math.h ****   #define CMSIS_INLINE __attribute__((always_inline))
 445:.\Include/arm_math.h **** 
 446:.\Include/arm_math.h **** #elif defined ( __ICCARM__ )
 447:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t __packed
 448:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 449:.\Include/arm_math.h ****   #define CMSIS_INLINE
 450:.\Include/arm_math.h **** 
 451:.\Include/arm_math.h **** #elif defined ( __TI_ARM__ )
 452:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 453:.\Include/arm_math.h ****   #define CMSIS_UNUSED __attribute__((unused))
 454:.\Include/arm_math.h ****   #define CMSIS_INLINE
 455:.\Include/arm_math.h **** 
 456:.\Include/arm_math.h **** #elif defined ( __CSMC__ )
 457:.\Include/arm_math.h ****   #define __SIMD32_TYPE int32_t
 458:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 459:.\Include/arm_math.h ****   #define CMSIS_INLINE
 460:.\Include/arm_math.h **** 
 461:.\Include/arm_math.h **** #elif defined ( __TASKING__ )
 462:.\Include/arm_math.h ****   #define __SIMD32_TYPE __unaligned int32_t
 463:.\Include/arm_math.h ****   #define CMSIS_UNUSED
 464:.\Include/arm_math.h ****   #define CMSIS_INLINE
 465:.\Include/arm_math.h **** 
 466:.\Include/arm_math.h **** #else
 467:.\Include/arm_math.h ****   #error Unknown compiler
 468:.\Include/arm_math.h **** #endif
 469:.\Include/arm_math.h **** 
 470:.\Include/arm_math.h **** #define __SIMD32(addr)        (*(__SIMD32_TYPE **) & (addr))
 471:.\Include/arm_math.h **** #define __SIMD32_CONST(addr)  ((__SIMD32_TYPE *)(addr))
 472:.\Include/arm_math.h **** #define _SIMD32_OFFSET(addr)  (*(__SIMD32_TYPE *)  (addr))
 473:.\Include/arm_math.h **** #define __SIMD64(addr)        (*(int64_t **) & (addr))
 474:.\Include/arm_math.h **** 
 475:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 476:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 477:.\Include/arm_math.h ****   /**
 478:.\Include/arm_math.h ****    * @brief definition to pack two 16 bit values.
 479:.\Include/arm_math.h ****    */
 480:.\Include/arm_math.h **** #define __PKHBT(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0x0000FFFF) | \
 481:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) << ARG3) & (int32_t)0xFFFF0000)  )
 482:.\Include/arm_math.h **** #define __PKHTB(ARG1, ARG2, ARG3) ( (((int32_t)(ARG1) <<    0) & (int32_t)0xFFFF0000) | \
 483:.\Include/arm_math.h ****                                     (((int32_t)(ARG2) >> ARG3) & (int32_t)0x0000FFFF)  )
 484:.\Include/arm_math.h **** 
 485:.\Include/arm_math.h **** /* #endif // defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 486:.\Include/arm_math.h **** #endif /* !defined (ARM_MATH_DSP) */
 487:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 24


 488:.\Include/arm_math.h ****    /**
 489:.\Include/arm_math.h ****    * @brief definition to pack four 8 bit values.
 490:.\Include/arm_math.h ****    */
 491:.\Include/arm_math.h **** #ifndef ARM_MATH_BIG_ENDIAN
 492:.\Include/arm_math.h **** 
 493:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v0) <<  0) & (int32_t)0x000000FF) | \
 494:.\Include/arm_math.h ****                                 (((int32_t)(v1) <<  8) & (int32_t)0x0000FF00) | \
 495:.\Include/arm_math.h ****                                 (((int32_t)(v2) << 16) & (int32_t)0x00FF0000) | \
 496:.\Include/arm_math.h ****                                 (((int32_t)(v3) << 24) & (int32_t)0xFF000000)  )
 497:.\Include/arm_math.h **** #else
 498:.\Include/arm_math.h **** 
 499:.\Include/arm_math.h **** #define __PACKq7(v0,v1,v2,v3) ( (((int32_t)(v3) <<  0) & (int32_t)0x000000FF) | \
 500:.\Include/arm_math.h ****                                 (((int32_t)(v2) <<  8) & (int32_t)0x0000FF00) | \
 501:.\Include/arm_math.h ****                                 (((int32_t)(v1) << 16) & (int32_t)0x00FF0000) | \
 502:.\Include/arm_math.h ****                                 (((int32_t)(v0) << 24) & (int32_t)0xFF000000)  )
 503:.\Include/arm_math.h **** 
 504:.\Include/arm_math.h **** #endif
 505:.\Include/arm_math.h **** 
 506:.\Include/arm_math.h **** 
 507:.\Include/arm_math.h ****   /**
 508:.\Include/arm_math.h ****    * @brief Clips Q63 to Q31 values.
 509:.\Include/arm_math.h ****    */
 510:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t clip_q63_to_q31(
 511:.\Include/arm_math.h ****   q63_t x)
 512:.\Include/arm_math.h ****   {
 513:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 514:.\Include/arm_math.h ****       ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 515:.\Include/arm_math.h ****   }
 516:.\Include/arm_math.h **** 
 517:.\Include/arm_math.h ****   /**
 518:.\Include/arm_math.h ****    * @brief Clips Q63 to Q15 values.
 519:.\Include/arm_math.h ****    */
 520:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q63_to_q15(
 521:.\Include/arm_math.h ****   q63_t x)
 522:.\Include/arm_math.h ****   {
 523:.\Include/arm_math.h ****     return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 524:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
 525:.\Include/arm_math.h ****   }
 526:.\Include/arm_math.h **** 
 527:.\Include/arm_math.h ****   /**
 528:.\Include/arm_math.h ****    * @brief Clips Q31 to Q7 values.
 529:.\Include/arm_math.h ****    */
 530:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q7_t clip_q31_to_q7(
 531:.\Include/arm_math.h ****   q31_t x)
 532:.\Include/arm_math.h ****   {
 533:.\Include/arm_math.h ****     return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
 534:.\Include/arm_math.h ****       ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
 535:.\Include/arm_math.h ****   }
 536:.\Include/arm_math.h **** 
 537:.\Include/arm_math.h ****   /**
 538:.\Include/arm_math.h ****    * @brief Clips Q31 to Q15 values.
 539:.\Include/arm_math.h ****    */
 540:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q15_t clip_q31_to_q15(
 541:.\Include/arm_math.h ****   q31_t x)
 542:.\Include/arm_math.h ****   {
 543:.\Include/arm_math.h ****     return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
 544:.\Include/arm_math.h ****       ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 25


 545:.\Include/arm_math.h ****   }
 546:.\Include/arm_math.h **** 
 547:.\Include/arm_math.h ****   /**
 548:.\Include/arm_math.h ****    * @brief Multiplies 32 X 64 and returns 32 bit result in 2.30 format.
 549:.\Include/arm_math.h ****    */
 550:.\Include/arm_math.h **** 
 551:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q63_t mult32x64(
 552:.\Include/arm_math.h ****   q63_t x,
 553:.\Include/arm_math.h ****   q31_t y)
 554:.\Include/arm_math.h ****   {
 555:.\Include/arm_math.h ****     return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
 556:.\Include/arm_math.h ****             (((q63_t) (x >> 32) * y)));
 557:.\Include/arm_math.h ****   }
 558:.\Include/arm_math.h **** 
 559:.\Include/arm_math.h **** /*
 560:.\Include/arm_math.h ****   #if defined (ARM_MATH_CM0_FAMILY) && defined ( __CC_ARM   )
 561:.\Include/arm_math.h ****   #define __CLZ __clz
 562:.\Include/arm_math.h ****   #endif
 563:.\Include/arm_math.h ****  */
 564:.\Include/arm_math.h **** /* note: function can be removed when all toolchain support __CLZ for Cortex-M0 */
 565:.\Include/arm_math.h **** #if defined (ARM_MATH_CM0_FAMILY) && ((defined (__ICCARM__))  )
 566:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 567:.\Include/arm_math.h ****   q31_t data);
 568:.\Include/arm_math.h **** 
 569:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __CLZ(
 570:.\Include/arm_math.h ****   q31_t data)
 571:.\Include/arm_math.h ****   {
 572:.\Include/arm_math.h ****     uint32_t count = 0;
 573:.\Include/arm_math.h ****     uint32_t mask = 0x80000000;
 574:.\Include/arm_math.h **** 
 575:.\Include/arm_math.h ****     while ((data & mask) == 0)
 576:.\Include/arm_math.h ****     {
 577:.\Include/arm_math.h ****       count += 1u;
 578:.\Include/arm_math.h ****       mask = mask >> 1u;
 579:.\Include/arm_math.h ****     }
 580:.\Include/arm_math.h **** 
 581:.\Include/arm_math.h ****     return (count);
 582:.\Include/arm_math.h ****   }
 583:.\Include/arm_math.h **** #endif
 584:.\Include/arm_math.h **** 
 585:.\Include/arm_math.h ****   /**
 586:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q31 Data type.
 587:.\Include/arm_math.h ****    */
 588:.\Include/arm_math.h **** 
 589:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q31(
 590:.\Include/arm_math.h ****   q31_t in,
 591:.\Include/arm_math.h ****   q31_t * dst,
 592:.\Include/arm_math.h ****   q31_t * pRecipTable)
 593:.\Include/arm_math.h ****   {
 594:.\Include/arm_math.h ****     q31_t out;
 595:.\Include/arm_math.h ****     uint32_t tempVal;
 596:.\Include/arm_math.h ****     uint32_t index, i;
 597:.\Include/arm_math.h ****     uint32_t signBits;
 598:.\Include/arm_math.h **** 
 599:.\Include/arm_math.h ****     if (in > 0)
 600:.\Include/arm_math.h ****     {
 601:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ( in) - 1));
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 26


 602:.\Include/arm_math.h ****     }
 603:.\Include/arm_math.h ****     else
 604:.\Include/arm_math.h ****     {
 605:.\Include/arm_math.h ****       signBits = ((uint32_t) (__CLZ(-in) - 1));
 606:.\Include/arm_math.h ****     }
 607:.\Include/arm_math.h **** 
 608:.\Include/arm_math.h ****     /* Convert input sample to 1.31 format */
 609:.\Include/arm_math.h ****     in = (in << signBits);
 610:.\Include/arm_math.h **** 
 611:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 612:.\Include/arm_math.h ****     index = (uint32_t)(in >> 24);
 613:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 614:.\Include/arm_math.h **** 
 615:.\Include/arm_math.h ****     /* 1.31 with exp 1 */
 616:.\Include/arm_math.h ****     out = pRecipTable[index];
 617:.\Include/arm_math.h **** 
 618:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 619:.\Include/arm_math.h ****     /* running approximation for two iterations */
 620:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 621:.\Include/arm_math.h ****     {
 622:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q63_t) in * out) >> 31);
 623:.\Include/arm_math.h ****       tempVal = 0x7FFFFFFFu - tempVal;
 624:.\Include/arm_math.h ****       /*      1.31 with exp 1 */
 625:.\Include/arm_math.h ****       /* out = (q31_t) (((q63_t) out * tempVal) >> 30); */
 626:.\Include/arm_math.h ****       out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
 627:.\Include/arm_math.h ****     }
 628:.\Include/arm_math.h **** 
 629:.\Include/arm_math.h ****     /* write output */
 630:.\Include/arm_math.h ****     *dst = out;
 631:.\Include/arm_math.h **** 
 632:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 633:.\Include/arm_math.h ****     return (signBits + 1u);
 634:.\Include/arm_math.h ****   }
 635:.\Include/arm_math.h **** 
 636:.\Include/arm_math.h **** 
 637:.\Include/arm_math.h ****   /**
 638:.\Include/arm_math.h ****    * @brief Function to Calculates 1/in (reciprocal) value of Q15 Data type.
 639:.\Include/arm_math.h ****    */
 640:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t arm_recip_q15(
 641:.\Include/arm_math.h ****   q15_t in,
 642:.\Include/arm_math.h ****   q15_t * dst,
 643:.\Include/arm_math.h ****   q15_t * pRecipTable)
 644:.\Include/arm_math.h ****   {
 645:.\Include/arm_math.h ****     q15_t out = 0;
 646:.\Include/arm_math.h ****     uint32_t tempVal = 0;
 647:.\Include/arm_math.h ****     uint32_t index = 0, i = 0;
 648:.\Include/arm_math.h ****     uint32_t signBits = 0;
 649:.\Include/arm_math.h **** 
 650:.\Include/arm_math.h ****     if (in > 0)
 651:.\Include/arm_math.h ****     {
 652:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ( in) - 17));
 653:.\Include/arm_math.h ****     }
 654:.\Include/arm_math.h ****     else
 655:.\Include/arm_math.h ****     {
 656:.\Include/arm_math.h ****       signBits = ((uint32_t)(__CLZ(-in) - 17));
 657:.\Include/arm_math.h ****     }
 658:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 27


 659:.\Include/arm_math.h ****     /* Convert input sample to 1.15 format */
 660:.\Include/arm_math.h ****     in = (in << signBits);
 661:.\Include/arm_math.h **** 
 662:.\Include/arm_math.h ****     /* calculation of index for initial approximated Val */
 663:.\Include/arm_math.h ****     index = (uint32_t)(in >>  8);
 664:.\Include/arm_math.h ****     index = (index & INDEX_MASK);
 665:.\Include/arm_math.h **** 
 666:.\Include/arm_math.h ****     /*      1.15 with exp 1  */
 667:.\Include/arm_math.h ****     out = pRecipTable[index];
 668:.\Include/arm_math.h **** 
 669:.\Include/arm_math.h ****     /* calculation of reciprocal value */
 670:.\Include/arm_math.h ****     /* running approximation for two iterations */
 671:.\Include/arm_math.h ****     for (i = 0u; i < 2u; i++)
 672:.\Include/arm_math.h ****     {
 673:.\Include/arm_math.h ****       tempVal = (uint32_t) (((q31_t) in * out) >> 15);
 674:.\Include/arm_math.h ****       tempVal = 0x7FFFu - tempVal;
 675:.\Include/arm_math.h ****       /*      1.15 with exp 1 */
 676:.\Include/arm_math.h ****       out = (q15_t) (((q31_t) out * tempVal) >> 14);
 677:.\Include/arm_math.h ****       /* out = clip_q31_to_q15(((q31_t) out * tempVal) >> 14); */
 678:.\Include/arm_math.h ****     }
 679:.\Include/arm_math.h **** 
 680:.\Include/arm_math.h ****     /* write output */
 681:.\Include/arm_math.h ****     *dst = out;
 682:.\Include/arm_math.h **** 
 683:.\Include/arm_math.h ****     /* return num of signbits of out = 1/in value */
 684:.\Include/arm_math.h ****     return (signBits + 1);
 685:.\Include/arm_math.h ****   }
 686:.\Include/arm_math.h **** 
 687:.\Include/arm_math.h **** 
 688:.\Include/arm_math.h ****   /*
 689:.\Include/arm_math.h ****    * @brief C custom defined intrinisic function for only M0 processors
 690:.\Include/arm_math.h ****    */
 691:.\Include/arm_math.h **** #if defined(ARM_MATH_CM0_FAMILY)
 692:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE q31_t __SSAT(
 693:.\Include/arm_math.h ****   q31_t x,
 694:.\Include/arm_math.h ****   uint32_t y)
 695:.\Include/arm_math.h ****   {
 696:.\Include/arm_math.h ****     int32_t posMax, negMin;
 697:.\Include/arm_math.h ****     uint32_t i;
 698:.\Include/arm_math.h **** 
 699:.\Include/arm_math.h ****     posMax = 1;
 700:.\Include/arm_math.h ****     for (i = 0; i < (y - 1); i++)
 701:.\Include/arm_math.h ****     {
 702:.\Include/arm_math.h ****       posMax = posMax * 2;
 703:.\Include/arm_math.h ****     }
 704:.\Include/arm_math.h **** 
 705:.\Include/arm_math.h ****     if (x > 0)
 706:.\Include/arm_math.h ****     {
 707:.\Include/arm_math.h ****       posMax = (posMax - 1);
 708:.\Include/arm_math.h **** 
 709:.\Include/arm_math.h ****       if (x > posMax)
 710:.\Include/arm_math.h ****       {
 711:.\Include/arm_math.h ****         x = posMax;
 712:.\Include/arm_math.h ****       }
 713:.\Include/arm_math.h ****     }
 714:.\Include/arm_math.h ****     else
 715:.\Include/arm_math.h ****     {
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 28


 716:.\Include/arm_math.h ****       negMin = -posMax;
 717:.\Include/arm_math.h **** 
 718:.\Include/arm_math.h ****       if (x < negMin)
 719:.\Include/arm_math.h ****       {
 720:.\Include/arm_math.h ****         x = negMin;
 721:.\Include/arm_math.h ****       }
 722:.\Include/arm_math.h ****     }
 723:.\Include/arm_math.h ****     return (x);
 724:.\Include/arm_math.h ****   }
 725:.\Include/arm_math.h **** #endif /* end of ARM_MATH_CM0_FAMILY */
 726:.\Include/arm_math.h **** 
 727:.\Include/arm_math.h **** 
 728:.\Include/arm_math.h ****   /*
 729:.\Include/arm_math.h ****    * @brief C custom defined intrinsic function for M3 and M0 processors
 730:.\Include/arm_math.h ****    */
 731:.\Include/arm_math.h **** /* #if defined (ARM_MATH_CM3) || defined (ARM_MATH_CM0_FAMILY) */
 732:.\Include/arm_math.h **** #if !defined (ARM_MATH_DSP)
 733:.\Include/arm_math.h **** 
 734:.\Include/arm_math.h ****   /*
 735:.\Include/arm_math.h ****    * @brief C custom defined QADD8 for M3 and M0 processors
 736:.\Include/arm_math.h ****    */
 737:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD8(
 738:.\Include/arm_math.h ****   uint32_t x,
 739:.\Include/arm_math.h ****   uint32_t y)
 740:.\Include/arm_math.h ****   {
 741:.\Include/arm_math.h ****     q31_t r, s, t, u;
 742:.\Include/arm_math.h **** 
 743:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) + (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 744:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) + (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 745:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) + (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 746:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) + (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 747:.\Include/arm_math.h **** 
 748:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 749:.\Include/arm_math.h ****   }
 750:.\Include/arm_math.h **** 
 751:.\Include/arm_math.h **** 
 752:.\Include/arm_math.h ****   /*
 753:.\Include/arm_math.h ****    * @brief C custom defined QSUB8 for M3 and M0 processors
 754:.\Include/arm_math.h ****    */
 755:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB8(
 756:.\Include/arm_math.h ****   uint32_t x,
 757:.\Include/arm_math.h ****   uint32_t y)
 758:.\Include/arm_math.h ****   {
 759:.\Include/arm_math.h ****     q31_t r, s, t, u;
 760:.\Include/arm_math.h **** 
 761:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 24) >> 24) - (((q31_t)y << 24) >> 24)), 8) & (int32_t)0x000000FF;
 762:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x << 16) >> 24) - (((q31_t)y << 16) >> 24)), 8) & (int32_t)0x000000FF;
 763:.\Include/arm_math.h ****     t = __SSAT(((((q31_t)x <<  8) >> 24) - (((q31_t)y <<  8) >> 24)), 8) & (int32_t)0x000000FF;
 764:.\Include/arm_math.h ****     u = __SSAT(((((q31_t)x      ) >> 24) - (((q31_t)y      ) >> 24)), 8) & (int32_t)0x000000FF;
 765:.\Include/arm_math.h **** 
 766:.\Include/arm_math.h ****     return ((uint32_t)((u << 24) | (t << 16) | (s <<  8) | (r      )));
 767:.\Include/arm_math.h ****   }
 768:.\Include/arm_math.h **** 
 769:.\Include/arm_math.h **** 
 770:.\Include/arm_math.h ****   /*
 771:.\Include/arm_math.h ****    * @brief C custom defined QADD16 for M3 and M0 processors
 772:.\Include/arm_math.h ****    */
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 29


 773:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QADD16(
 774:.\Include/arm_math.h ****   uint32_t x,
 775:.\Include/arm_math.h ****   uint32_t y)
 776:.\Include/arm_math.h ****   {
 777:.\Include/arm_math.h **** /*  q31_t r,     s;  without initialisation 'arm_offset_q15 test' fails  but 'intrinsic' tests pass
 778:.\Include/arm_math.h ****     q31_t r = 0, s = 0;
 779:.\Include/arm_math.h **** 
 780:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 781:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 782:.\Include/arm_math.h **** 
 783:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 784:.\Include/arm_math.h ****   }
 785:.\Include/arm_math.h **** 
 786:.\Include/arm_math.h **** 
 787:.\Include/arm_math.h ****   /*
 788:.\Include/arm_math.h ****    * @brief C custom defined SHADD16 for M3 and M0 processors
 789:.\Include/arm_math.h ****    */
 790:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHADD16(
 791:.\Include/arm_math.h ****   uint32_t x,
 792:.\Include/arm_math.h ****   uint32_t y)
 793:.\Include/arm_math.h ****   {
 794:.\Include/arm_math.h ****     q31_t r, s;
 795:.\Include/arm_math.h **** 
 796:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 797:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 798:.\Include/arm_math.h **** 
 799:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 800:.\Include/arm_math.h ****   }
 801:.\Include/arm_math.h **** 
 802:.\Include/arm_math.h **** 
 803:.\Include/arm_math.h ****   /*
 804:.\Include/arm_math.h ****    * @brief C custom defined QSUB16 for M3 and M0 processors
 805:.\Include/arm_math.h ****    */
 806:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSUB16(
 807:.\Include/arm_math.h ****   uint32_t x,
 808:.\Include/arm_math.h ****   uint32_t y)
 809:.\Include/arm_math.h ****   {
 810:.\Include/arm_math.h ****     q31_t r, s;
 811:.\Include/arm_math.h **** 
 812:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 813:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 814:.\Include/arm_math.h **** 
 815:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 816:.\Include/arm_math.h ****   }
 817:.\Include/arm_math.h **** 
 818:.\Include/arm_math.h **** 
 819:.\Include/arm_math.h ****   /*
 820:.\Include/arm_math.h ****    * @brief C custom defined SHSUB16 for M3 and M0 processors
 821:.\Include/arm_math.h ****    */
 822:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSUB16(
 823:.\Include/arm_math.h ****   uint32_t x,
 824:.\Include/arm_math.h ****   uint32_t y)
 825:.\Include/arm_math.h ****   {
 826:.\Include/arm_math.h ****     q31_t r, s;
 827:.\Include/arm_math.h **** 
 828:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 829:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 30


 830:.\Include/arm_math.h **** 
 831:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 832:.\Include/arm_math.h ****   }
 833:.\Include/arm_math.h **** 
 834:.\Include/arm_math.h **** 
 835:.\Include/arm_math.h ****   /*
 836:.\Include/arm_math.h ****    * @brief C custom defined QASX for M3 and M0 processors
 837:.\Include/arm_math.h ****    */
 838:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QASX(
 839:.\Include/arm_math.h ****   uint32_t x,
 840:.\Include/arm_math.h ****   uint32_t y)
 841:.\Include/arm_math.h ****   {
 842:.\Include/arm_math.h ****     q31_t r, s;
 843:.\Include/arm_math.h **** 
 844:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 845:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 846:.\Include/arm_math.h **** 
 847:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 848:.\Include/arm_math.h ****   }
 849:.\Include/arm_math.h **** 
 850:.\Include/arm_math.h **** 
 851:.\Include/arm_math.h ****   /*
 852:.\Include/arm_math.h ****    * @brief C custom defined SHASX for M3 and M0 processors
 853:.\Include/arm_math.h ****    */
 854:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHASX(
 855:.\Include/arm_math.h ****   uint32_t x,
 856:.\Include/arm_math.h ****   uint32_t y)
 857:.\Include/arm_math.h ****   {
 858:.\Include/arm_math.h ****     q31_t r, s;
 859:.\Include/arm_math.h **** 
 860:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) - (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 861:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) + (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 862:.\Include/arm_math.h **** 
 863:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 864:.\Include/arm_math.h ****   }
 865:.\Include/arm_math.h **** 
 866:.\Include/arm_math.h **** 
 867:.\Include/arm_math.h ****   /*
 868:.\Include/arm_math.h ****    * @brief C custom defined QSAX for M3 and M0 processors
 869:.\Include/arm_math.h ****    */
 870:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __QSAX(
 871:.\Include/arm_math.h ****   uint32_t x,
 872:.\Include/arm_math.h ****   uint32_t y)
 873:.\Include/arm_math.h ****   {
 874:.\Include/arm_math.h ****     q31_t r, s;
 875:.\Include/arm_math.h **** 
 876:.\Include/arm_math.h ****     r = __SSAT(((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)), 16) & (int32_t)0x0000FFFF;
 877:.\Include/arm_math.h ****     s = __SSAT(((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)), 16) & (int32_t)0x0000FFFF;
 878:.\Include/arm_math.h **** 
 879:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 880:.\Include/arm_math.h ****   }
 881:.\Include/arm_math.h **** 
 882:.\Include/arm_math.h **** 
 883:.\Include/arm_math.h ****   /*
 884:.\Include/arm_math.h ****    * @brief C custom defined SHSAX for M3 and M0 processors
 885:.\Include/arm_math.h ****    */
 886:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SHSAX(
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 31


 887:.\Include/arm_math.h ****   uint32_t x,
 888:.\Include/arm_math.h ****   uint32_t y)
 889:.\Include/arm_math.h ****   {
 890:.\Include/arm_math.h ****     q31_t r, s;
 891:.\Include/arm_math.h **** 
 892:.\Include/arm_math.h ****     r = (((((q31_t)x << 16) >> 16) + (((q31_t)y      ) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 893:.\Include/arm_math.h ****     s = (((((q31_t)x      ) >> 16) - (((q31_t)y << 16) >> 16)) >> 1) & (int32_t)0x0000FFFF;
 894:.\Include/arm_math.h **** 
 895:.\Include/arm_math.h ****     return ((uint32_t)((s << 16) | (r      )));
 896:.\Include/arm_math.h ****   }
 897:.\Include/arm_math.h **** 
 898:.\Include/arm_math.h **** 
 899:.\Include/arm_math.h ****   /*
 900:.\Include/arm_math.h ****    * @brief C custom defined SMUSDX for M3 and M0 processors
 901:.\Include/arm_math.h ****    */
 902:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUSDX(
 903:.\Include/arm_math.h ****   uint32_t x,
 904:.\Include/arm_math.h ****   uint32_t y)
 905:.\Include/arm_math.h ****   {
 906:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) -
 907:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 908:.\Include/arm_math.h ****   }
 909:.\Include/arm_math.h **** 
 910:.\Include/arm_math.h ****   /*
 911:.\Include/arm_math.h ****    * @brief C custom defined SMUADX for M3 and M0 processors
 912:.\Include/arm_math.h ****    */
 913:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMUADX(
 914:.\Include/arm_math.h ****   uint32_t x,
 915:.\Include/arm_math.h ****   uint32_t y)
 916:.\Include/arm_math.h ****   {
 917:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y      ) >> 16)) +
 918:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y << 16) >> 16))   ));
 919:.\Include/arm_math.h ****   }
 920:.\Include/arm_math.h **** 
 921:.\Include/arm_math.h **** 
 922:.\Include/arm_math.h ****   /*
 923:.\Include/arm_math.h ****    * @brief C custom defined QADD for M3 and M0 processors
 924:.\Include/arm_math.h ****    */
 925:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QADD(
 926:.\Include/arm_math.h ****   int32_t x,
 927:.\Include/arm_math.h ****   int32_t y)
 928:.\Include/arm_math.h ****   {
 929:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x + (q31_t)y)));
 930:.\Include/arm_math.h ****   }
 931:.\Include/arm_math.h **** 
 932:.\Include/arm_math.h **** 
 933:.\Include/arm_math.h ****   /*
 934:.\Include/arm_math.h ****    * @brief C custom defined QSUB for M3 and M0 processors
 935:.\Include/arm_math.h ****    */
 936:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE int32_t __QSUB(
 937:.\Include/arm_math.h ****   int32_t x,
 938:.\Include/arm_math.h ****   int32_t y)
 939:.\Include/arm_math.h ****   {
 940:.\Include/arm_math.h ****     return ((int32_t)(clip_q63_to_q31((q63_t)x - (q31_t)y)));
 941:.\Include/arm_math.h ****   }
 942:.\Include/arm_math.h **** 
 943:.\Include/arm_math.h **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 32


 944:.\Include/arm_math.h ****   /*
 945:.\Include/arm_math.h ****    * @brief C custom defined SMLAD for M3 and M0 processors
 946:.\Include/arm_math.h ****    */
 947:.\Include/arm_math.h ****   CMSIS_INLINE __STATIC_INLINE uint32_t __SMLAD(
 948:.\Include/arm_math.h ****   uint32_t x,
 949:.\Include/arm_math.h ****   uint32_t y,
 950:.\Include/arm_math.h ****   uint32_t sum)
 951:.\Include/arm_math.h ****   {
 952:.\Include/arm_math.h ****     return ((uint32_t)(((((q31_t)x << 16) >> 16) * (((q31_t)y << 16) >> 16)) +
 503              		.loc 2 952 0
 504 031e FB6F     		ldr	r3, [r7, #124]
 505 0320 1B04     		lsl	r3, r3, #16
 506 0322 1B14     		asr	r3, r3, #16
 507 0324 BA6F     		ldr	r2, [r7, #120]
 508 0326 1204     		lsl	r2, r2, #16
 509 0328 1214     		asr	r2, r2, #16
 510 032a 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 511              		.loc 2 953 0
 512 032c FB6F     		ldr	r3, [r7, #124]
 513 032e 1B14     		asr	r3, r3, #16
 514 0330 B96F     		ldr	r1, [r7, #120]
 515 0332 0914     		asr	r1, r1, #16
 516 0334 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 517              		.loc 2 952 0
 518 0336 D218     		add	r2, r2, r3
 954:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 519              		.loc 2 954 0
 520 0338 7B6F     		ldr	r3, [r7, #116]
 953:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 521              		.loc 2 953 0
 522 033a D318     		add	r3, r2, r3
 523              	.LBE19:
 524              	.LBE18:
 525              		.loc 1 320 0
 526 033c CC22     		mov	r2, #204
 527 033e BA18     		add	r2, r7, r2
 528 0340 1360     		str	r3, [r2]
 321:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum2 = __SMLAD(inA1, inB2, sum2);
 529              		.loc 1 321 0
 530 0342 9023     		mov	r3, #144
 531 0344 FB18     		add	r3, r7, r3
 532 0346 1968     		ldr	r1, [r3]
 533 0348 8423     		mov	r3, #132
 534 034a FB18     		add	r3, r7, r3
 535 034c 1A68     		ldr	r2, [r3]
 536 034e B423     		mov	r3, #180
 537 0350 FB18     		add	r3, r7, r3
 538 0352 1B68     		ldr	r3, [r3]
 539 0354 3967     		str	r1, [r7, #112]
 540 0356 FA66     		str	r2, [r7, #108]
 541 0358 BB66     		str	r3, [r7, #104]
 542              	.LBB20:
 543              	.LBB21:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 544              		.loc 2 952 0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 33


 545 035a 3B6F     		ldr	r3, [r7, #112]
 546 035c 1B04     		lsl	r3, r3, #16
 547 035e 1B14     		asr	r3, r3, #16
 548 0360 FA6E     		ldr	r2, [r7, #108]
 549 0362 1204     		lsl	r2, r2, #16
 550 0364 1214     		asr	r2, r2, #16
 551 0366 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 552              		.loc 2 953 0
 553 0368 3B6F     		ldr	r3, [r7, #112]
 554 036a 1B14     		asr	r3, r3, #16
 555 036c F96E     		ldr	r1, [r7, #108]
 556 036e 0914     		asr	r1, r1, #16
 557 0370 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 558              		.loc 2 952 0
 559 0372 D218     		add	r2, r2, r3
 560              		.loc 2 954 0
 561 0374 BB6E     		ldr	r3, [r7, #104]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 562              		.loc 2 953 0
 563 0376 D318     		add	r3, r2, r3
 564              	.LBE21:
 565              	.LBE20:
 566              		.loc 1 321 0
 567 0378 B422     		mov	r2, #180
 568 037a BA18     		add	r2, r7, r2
 569 037c 1360     		str	r3, [r2]
 322:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum3 = __SMLAD(inA2, inB1, sum3);
 570              		.loc 1 322 0
 571 037e 8823     		mov	r3, #136
 572 0380 FB18     		add	r3, r7, r3
 573 0382 1968     		ldr	r1, [r3]
 574 0384 8C23     		mov	r3, #140
 575 0386 FB18     		add	r3, r7, r3
 576 0388 1A68     		ldr	r2, [r3]
 577 038a B023     		mov	r3, #176
 578 038c FB18     		add	r3, r7, r3
 579 038e 1B68     		ldr	r3, [r3]
 580 0390 7966     		str	r1, [r7, #100]
 581 0392 3A66     		str	r2, [r7, #96]
 582 0394 FB65     		str	r3, [r7, #92]
 583              	.LBB22:
 584              	.LBB23:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 585              		.loc 2 952 0
 586 0396 7B6E     		ldr	r3, [r7, #100]
 587 0398 1B04     		lsl	r3, r3, #16
 588 039a 1B14     		asr	r3, r3, #16
 589 039c 3A6E     		ldr	r2, [r7, #96]
 590 039e 1204     		lsl	r2, r2, #16
 591 03a0 1214     		asr	r2, r2, #16
 592 03a2 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 593              		.loc 2 953 0
 594 03a4 7B6E     		ldr	r3, [r7, #100]
 595 03a6 1B14     		asr	r3, r3, #16
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 34


 596 03a8 396E     		ldr	r1, [r7, #96]
 597 03aa 0914     		asr	r1, r1, #16
 598 03ac 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 599              		.loc 2 952 0
 600 03ae D218     		add	r2, r2, r3
 601              		.loc 2 954 0
 602 03b0 FB6D     		ldr	r3, [r7, #92]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 603              		.loc 2 953 0
 604 03b2 D318     		add	r3, r2, r3
 605              	.LBE23:
 606              	.LBE22:
 607              		.loc 1 322 0
 608 03b4 B022     		mov	r2, #176
 609 03b6 BA18     		add	r2, r7, r2
 610 03b8 1360     		str	r3, [r2]
 323:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum4 = __SMLAD(inA2, inB2, sum4);
 611              		.loc 1 323 0
 612 03ba 8823     		mov	r3, #136
 613 03bc FB18     		add	r3, r7, r3
 614 03be 1968     		ldr	r1, [r3]
 615 03c0 8423     		mov	r3, #132
 616 03c2 FB18     		add	r3, r7, r3
 617 03c4 1A68     		ldr	r2, [r3]
 618 03c6 AC23     		mov	r3, #172
 619 03c8 FB18     		add	r3, r7, r3
 620 03ca 1B68     		ldr	r3, [r3]
 621 03cc B965     		str	r1, [r7, #88]
 622 03ce 7A65     		str	r2, [r7, #84]
 623 03d0 3B65     		str	r3, [r7, #80]
 624              	.LBB24:
 625              	.LBB25:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 626              		.loc 2 952 0
 627 03d2 BB6D     		ldr	r3, [r7, #88]
 628 03d4 1B04     		lsl	r3, r3, #16
 629 03d6 1B14     		asr	r3, r3, #16
 630 03d8 7A6D     		ldr	r2, [r7, #84]
 631 03da 1204     		lsl	r2, r2, #16
 632 03dc 1214     		asr	r2, r2, #16
 633 03de 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 634              		.loc 2 953 0
 635 03e0 BB6D     		ldr	r3, [r7, #88]
 636 03e2 1B14     		asr	r3, r3, #16
 637 03e4 796D     		ldr	r1, [r7, #84]
 638 03e6 0914     		asr	r1, r1, #16
 639 03e8 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 640              		.loc 2 952 0
 641 03ea D218     		add	r2, r2, r3
 642              		.loc 2 954 0
 643 03ec 3B6D     		ldr	r3, [r7, #80]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 644              		.loc 2 953 0
 645 03ee D318     		add	r3, r2, r3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 35


 646              	.LBE25:
 647              	.LBE24:
 648              		.loc 1 323 0
 649 03f0 AC22     		mov	r2, #172
 650 03f2 BA18     		add	r2, r7, r2
 651 03f4 1360     		str	r3, [r2]
 324:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 325:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 326:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 327:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA1 = *pInA;
 328:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB1 = *pInB;
 329:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += inA1 * inB1;
 330:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 331:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA2 = pInA[1];
 332:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB2 = pInB[1];
 333:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += inA2 * inB2;
 334:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 335:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA1 = pInA[2];
 336:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB1 = pInB[2];
 337:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += inA1 * inB1;
 338:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 339:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA2 = pInA[3];
 340:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB2 = pInB[3];
 341:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += inA2 * inB2;
 342:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 343:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           pInA += 4;
 344:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           pInB += 4;
 345:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 346:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 347:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 348:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* Decrement the loop counter */
 349:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           colCnt--;
 652              		.loc 1 349 0
 653 03f6 B823     		mov	r3, #184
 654 03f8 FB18     		add	r3, r7, r3
 655 03fa 1B68     		ldr	r3, [r3]
 656 03fc 013B     		sub	r3, r3, #1
 657 03fe B822     		mov	r2, #184
 658 0400 BA18     		add	r2, r7, r2
 659 0402 1360     		str	r3, [r2]
 660              	.L9:
 310:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 661              		.loc 1 310 0
 662 0404 B823     		mov	r3, #184
 663 0406 FB18     		add	r3, r7, r3
 664 0408 1B68     		ldr	r3, [r3]
 665 040a 002B     		cmp	r3, #0
 666 040c 00D0     		beq	.LCB565
 667 040e 56E7     		b	.L14	@long jump
 668              	.LCB565:
 350:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
 351:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 352:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* process odd column samples */
 353:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef UNALIGNED_SUPPORT_DISABLE
 354:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         if (numColsA & 1u) {
 669              		.loc 1 354 0
 670 0410 9A23     		mov	r3, #154
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 36


 671 0412 FB18     		add	r3, r7, r3
 672 0414 1B88     		ldrh	r3, [r3]
 673 0416 0122     		mov	r2, #1
 674 0418 1340     		and	r3, r2
 675 041a 57D0     		beq	.L15
 355:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA1 = *pInA++;
 676              		.loc 1 355 0
 677 041c FB69     		ldr	r3, [r7, #28]
 678 041e 9A1C     		add	r2, r3, #2
 679 0420 FA61     		str	r2, [r7, #28]
 680 0422 1B88     		ldrh	r3, [r3]
 681 0424 1BB2     		sxth	r3, r3
 682 0426 9022     		mov	r2, #144
 683 0428 BA18     		add	r2, r7, r2
 684 042a 1360     		str	r3, [r2]
 356:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB1 = *pInB++;
 685              		.loc 1 356 0
 686 042c BB69     		ldr	r3, [r7, #24]
 687 042e 9A1C     		add	r2, r3, #2
 688 0430 BA61     		str	r2, [r7, #24]
 689 0432 1B88     		ldrh	r3, [r3]
 690 0434 1BB2     		sxth	r3, r3
 691 0436 8C22     		mov	r2, #140
 692 0438 BA18     		add	r2, r7, r2
 693 043a 1360     		str	r3, [r2]
 357:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA2 = *pInA2++;
 694              		.loc 1 357 0
 695 043c 7B69     		ldr	r3, [r7, #20]
 696 043e 9A1C     		add	r2, r3, #2
 697 0440 7A61     		str	r2, [r7, #20]
 698 0442 1B88     		ldrh	r3, [r3]
 699 0444 1BB2     		sxth	r3, r3
 700 0446 8822     		mov	r2, #136
 701 0448 BA18     		add	r2, r7, r2
 702 044a 1360     		str	r3, [r2]
 358:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB2 = *pInB2++;
 703              		.loc 1 358 0
 704 044c 3B69     		ldr	r3, [r7, #16]
 705 044e 9A1C     		add	r2, r3, #2
 706 0450 3A61     		str	r2, [r7, #16]
 707 0452 1B88     		ldrh	r3, [r3]
 708 0454 1BB2     		sxth	r3, r3
 709 0456 8422     		mov	r2, #132
 710 0458 BA18     		add	r2, r7, r2
 711 045a 1360     		str	r3, [r2]
 359:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum  += inA1 * inB1;
 712              		.loc 1 359 0
 713 045c 9023     		mov	r3, #144
 714 045e FB18     		add	r3, r7, r3
 715 0460 1B68     		ldr	r3, [r3]
 716 0462 8C22     		mov	r2, #140
 717 0464 BA18     		add	r2, r7, r2
 718 0466 1268     		ldr	r2, [r2]
 719 0468 5343     		mul	r3, r2
 720 046a CC22     		mov	r2, #204
 721 046c BA18     		add	r2, r7, r2
 722 046e 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 37


 723 0470 D318     		add	r3, r2, r3
 724 0472 CC22     		mov	r2, #204
 725 0474 BA18     		add	r2, r7, r2
 726 0476 1360     		str	r3, [r2]
 360:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum2 += inA1 * inB2;
 727              		.loc 1 360 0
 728 0478 9023     		mov	r3, #144
 729 047a FB18     		add	r3, r7, r3
 730 047c 1B68     		ldr	r3, [r3]
 731 047e 8422     		mov	r2, #132
 732 0480 BA18     		add	r2, r7, r2
 733 0482 1268     		ldr	r2, [r2]
 734 0484 5343     		mul	r3, r2
 735 0486 B422     		mov	r2, #180
 736 0488 BA18     		add	r2, r7, r2
 737 048a 1268     		ldr	r2, [r2]
 738 048c D318     		add	r3, r2, r3
 739 048e B422     		mov	r2, #180
 740 0490 BA18     		add	r2, r7, r2
 741 0492 1360     		str	r3, [r2]
 361:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum3 += inA2 * inB1;
 742              		.loc 1 361 0
 743 0494 8823     		mov	r3, #136
 744 0496 FB18     		add	r3, r7, r3
 745 0498 1B68     		ldr	r3, [r3]
 746 049a 8C22     		mov	r2, #140
 747 049c BA18     		add	r2, r7, r2
 748 049e 1268     		ldr	r2, [r2]
 749 04a0 5343     		mul	r3, r2
 750 04a2 B022     		mov	r2, #176
 751 04a4 BA18     		add	r2, r7, r2
 752 04a6 1268     		ldr	r2, [r2]
 753 04a8 D318     		add	r3, r2, r3
 754 04aa B022     		mov	r2, #176
 755 04ac BA18     		add	r2, r7, r2
 756 04ae 1360     		str	r3, [r2]
 362:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum4 += inA2 * inB2;
 757              		.loc 1 362 0
 758 04b0 8823     		mov	r3, #136
 759 04b2 FB18     		add	r3, r7, r3
 760 04b4 1B68     		ldr	r3, [r3]
 761 04b6 8422     		mov	r2, #132
 762 04b8 BA18     		add	r2, r7, r2
 763 04ba 1268     		ldr	r2, [r2]
 764 04bc 5343     		mul	r3, r2
 765 04be AC22     		mov	r2, #172
 766 04c0 BA18     		add	r2, r7, r2
 767 04c2 1268     		ldr	r2, [r2]
 768 04c4 D318     		add	r3, r2, r3
 769 04c6 AC22     		mov	r2, #172
 770 04c8 BA18     		add	r2, r7, r2
 771 04ca 1360     		str	r3, [r2]
 772              	.L15:
 363:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
 364:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #else
 365:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA % 0x4u;
 366:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 38


 367:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0u)
 368:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 369:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 370:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += (q31_t) (*pInA++) * (*pInB++);
 371:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 372:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           colCnt--;
 373:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
 374:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif
 375:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 376:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Saturate and store the result in the destination buffer */
 377:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px++  = (q15_t) (sum >> 15);
 773              		.loc 1 377 0
 774 04cc C823     		mov	r3, #200
 775 04ce FB18     		add	r3, r7, r3
 776 04d0 1B68     		ldr	r3, [r3]
 777 04d2 9A1C     		add	r2, r3, #2
 778 04d4 C821     		mov	r1, #200
 779 04d6 7918     		add	r1, r7, r1
 780 04d8 0A60     		str	r2, [r1]
 781 04da CC22     		mov	r2, #204
 782 04dc BA18     		add	r2, r7, r2
 783 04de 1268     		ldr	r2, [r2]
 784 04e0 D213     		asr	r2, r2, #15
 785 04e2 92B2     		uxth	r2, r2
 786 04e4 1A80     		strh	r2, [r3]
 378:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 379:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef UNALIGNED_SUPPORT_DISABLE
 380:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px++  = (q15_t) (sum2 >> 15);
 787              		.loc 1 380 0
 788 04e6 C823     		mov	r3, #200
 789 04e8 FB18     		add	r3, r7, r3
 790 04ea 1B68     		ldr	r3, [r3]
 791 04ec 9A1C     		add	r2, r3, #2
 792 04ee C821     		mov	r1, #200
 793 04f0 7918     		add	r1, r7, r1
 794 04f2 0A60     		str	r2, [r1]
 795 04f4 B422     		mov	r2, #180
 796 04f6 BA18     		add	r2, r7, r2
 797 04f8 1268     		ldr	r2, [r2]
 798 04fa D213     		asr	r2, r2, #15
 799 04fc 92B2     		uxth	r2, r2
 800 04fe 1A80     		strh	r2, [r3]
 381:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px2++ = (q15_t) (sum3 >> 15);
 801              		.loc 1 381 0
 802 0500 A823     		mov	r3, #168
 803 0502 FB18     		add	r3, r7, r3
 804 0504 1B68     		ldr	r3, [r3]
 805 0506 9A1C     		add	r2, r3, #2
 806 0508 A821     		mov	r1, #168
 807 050a 7918     		add	r1, r7, r1
 808 050c 0A60     		str	r2, [r1]
 809 050e B022     		mov	r2, #176
 810 0510 BA18     		add	r2, r7, r2
 811 0512 1268     		ldr	r2, [r2]
 812 0514 D213     		asr	r2, r2, #15
 813 0516 92B2     		uxth	r2, r2
 814 0518 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 39


 382:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px2++ = (q15_t) (sum4 >> 15);
 815              		.loc 1 382 0
 816 051a A823     		mov	r3, #168
 817 051c FB18     		add	r3, r7, r3
 818 051e 1B68     		ldr	r3, [r3]
 819 0520 9A1C     		add	r2, r3, #2
 820 0522 A821     		mov	r1, #168
 821 0524 7918     		add	r1, r7, r1
 822 0526 0A60     		str	r2, [r1]
 823 0528 AC22     		mov	r2, #172
 824 052a BA18     		add	r2, r7, r2
 825 052c 1268     		ldr	r2, [r2]
 826 052e D213     		asr	r2, r2, #15
 827 0530 92B2     		uxth	r2, r2
 828 0532 1A80     		strh	r2, [r3]
 383:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         j += numRowsB * 2;
 829              		.loc 1 383 0
 830 0534 9823     		mov	r3, #152
 831 0536 FB18     		add	r3, r7, r3
 832 0538 1B88     		ldrh	r3, [r3]
 833 053a 5B00     		lsl	r3, r3, #1
 834 053c 1A1C     		mov	r2, r3
 835 053e A423     		mov	r3, #164
 836 0540 FB18     		add	r3, r7, r3
 837 0542 1B68     		ldr	r3, [r3]
 838 0544 9B18     		add	r3, r3, r2
 839 0546 A422     		mov	r2, #164
 840 0548 BA18     		add	r2, r7, r2
 841 054a 1360     		str	r3, [r2]
 384:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif
 385:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 386:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Decrement the column loop counter */
 387:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         col--;
 842              		.loc 1 387 0
 843 054c C423     		mov	r3, #196
 844 054e FB18     		add	r3, r7, r3
 845 0550 1B68     		ldr	r3, [r3]
 846 0552 013B     		sub	r3, r3, #1
 847 0554 C422     		mov	r2, #196
 848 0556 BA18     		add	r2, r7, r2
 849 0558 1360     		str	r3, [r2]
 850              	.L8:
 287:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 851              		.loc 1 287 0
 852 055a C423     		mov	r3, #196
 853 055c FB18     		add	r3, r7, r3
 854 055e 1B68     		ldr	r3, [r3]
 855 0560 002B     		cmp	r3, #0
 856 0562 00D0     		beq	.LCB740
 857 0564 73E6     		b	.L16	@long jump
 858              	.LCB740:
 388:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 389:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       }
 390:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 391:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       i = i + numColsA;
 859              		.loc 1 391 0
 860 0566 9A23     		mov	r3, #154
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 40


 861 0568 FB18     		add	r3, r7, r3
 862 056a 1B88     		ldrh	r3, [r3]
 863 056c C022     		mov	r2, #192
 864 056e BA18     		add	r2, r7, r2
 865 0570 1268     		ldr	r2, [r2]
 866 0572 D318     		add	r3, r2, r3
 867 0574 C022     		mov	r2, #192
 868 0576 BA18     		add	r2, r7, r2
 869 0578 1360     		str	r3, [r2]
 392:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 393:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef UNALIGNED_SUPPORT_DISABLE
 394:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       i = i + numColsA;
 870              		.loc 1 394 0
 871 057a 9A23     		mov	r3, #154
 872 057c FB18     		add	r3, r7, r3
 873 057e 1B88     		ldrh	r3, [r3]
 874 0580 C022     		mov	r2, #192
 875 0582 BA18     		add	r2, r7, r2
 876 0584 1268     		ldr	r2, [r2]
 877 0586 D318     		add	r3, r2, r3
 878 0588 C022     		mov	r2, #192
 879 058a BA18     		add	r2, r7, r2
 880 058c 1360     		str	r3, [r2]
 395:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       px = px2 + (numColsB & 1u);
 881              		.loc 1 395 0
 882 058e 9C23     		mov	r3, #156
 883 0590 FB18     		add	r3, r7, r3
 884 0592 1B88     		ldrh	r3, [r3]
 885 0594 0122     		mov	r2, #1
 886 0596 1340     		and	r3, r2
 887 0598 5B00     		lsl	r3, r3, #1
 888 059a A822     		mov	r2, #168
 889 059c BA18     		add	r2, r7, r2
 890 059e 1268     		ldr	r2, [r2]
 891 05a0 D318     		add	r3, r2, r3
 892 05a2 C822     		mov	r2, #200
 893 05a4 BA18     		add	r2, r7, r2
 894 05a6 1360     		str	r3, [r2]
 396:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       px2 = px + numColsB;
 895              		.loc 1 396 0
 896 05a8 9C23     		mov	r3, #156
 897 05aa FB18     		add	r3, r7, r3
 898 05ac 1B88     		ldrh	r3, [r3]
 899 05ae 5B00     		lsl	r3, r3, #1
 900 05b0 C822     		mov	r2, #200
 901 05b2 BA18     		add	r2, r7, r2
 902 05b4 1268     		ldr	r2, [r2]
 903 05b6 D318     		add	r3, r2, r3
 904 05b8 A822     		mov	r2, #168
 905 05ba BA18     		add	r2, r7, r2
 906 05bc 1360     		str	r3, [r2]
 397:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif
 398:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 399:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* Decrement the row loop counter */
 400:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       row--;
 907              		.loc 1 400 0
 908 05be BC23     		mov	r3, #188
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 41


 909 05c0 FB18     		add	r3, r7, r3
 910 05c2 1B68     		ldr	r3, [r3]
 911 05c4 013B     		sub	r3, r3, #1
 912 05c6 BC22     		mov	r2, #188
 913 05c8 BA18     		add	r2, r7, r2
 914 05ca 1360     		str	r3, [r2]
 915              	.L7:
 271:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     {
 916              		.loc 1 271 0
 917 05cc BC23     		mov	r3, #188
 918 05ce FB18     		add	r3, r7, r3
 919 05d0 1B68     		ldr	r3, [r3]
 920 05d2 002B     		cmp	r3, #0
 921 05d4 00D0     		beq	.LCB798
 922 05d6 24E6     		b	.L17	@long jump
 923              	.LCB798:
 401:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 402:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     }
 403:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 404:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Compute any remaining odd row/column below */
 405:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 406:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #ifndef UNALIGNED_SUPPORT_DISABLE
 407:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 408:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Compute remaining output column */
 409:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     if (numColsB & 1u) {
 924              		.loc 1 409 0
 925 05d8 9C23     		mov	r3, #156
 926 05da FB18     		add	r3, r7, r3
 927 05dc 1B88     		ldrh	r3, [r3]
 928 05de 0122     		mov	r2, #1
 929 05e0 1340     		and	r3, r2
 930 05e2 00D1     		bne	.LCB805
 931 05e4 E7E0     		b	.L18	@long jump
 932              	.LCB805:
 410:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 411:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* Avoid redundant computation of last element */
 412:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       row = numRowsA & (~0x1);
 933              		.loc 1 412 0
 934 05e6 9E23     		mov	r3, #158
 935 05e8 FB18     		add	r3, r7, r3
 936 05ea 1B88     		ldrh	r3, [r3]
 937 05ec 0122     		mov	r2, #1
 938 05ee 9343     		bic	r3, r2
 939 05f0 BC22     		mov	r2, #188
 940 05f2 BA18     		add	r2, r7, r2
 941 05f4 1360     		str	r3, [r2]
 413:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 414:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* Point to remaining unfilled column in output matrix */
 415:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       px = pDst->pData+numColsB-1;
 942              		.loc 1 415 0
 943 05f6 7B68     		ldr	r3, [r7, #4]
 944 05f8 5A68     		ldr	r2, [r3, #4]
 945 05fa 9C23     		mov	r3, #156
 946 05fc FB18     		add	r3, r7, r3
 947 05fe 1B88     		ldrh	r3, [r3]
 948 0600 C749     		ldr	r1, .L37
 949 0602 8C46     		mov	ip, r1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 42


 950 0604 6344     		add	r3, r3, ip
 951 0606 5B00     		lsl	r3, r3, #1
 952 0608 D318     		add	r3, r2, r3
 953 060a C822     		mov	r2, #200
 954 060c BA18     		add	r2, r7, r2
 955 060e 1360     		str	r3, [r2]
 416:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       pInA = pSrcA->pData;
 956              		.loc 1 416 0
 957 0610 FB68     		ldr	r3, [r7, #12]
 958 0612 5B68     		ldr	r3, [r3, #4]
 959 0614 FB61     		str	r3, [r7, #28]
 417:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 418:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* row loop */
 419:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       while (row > 0)
 960              		.loc 1 419 0
 961 0616 C8E0     		b	.L19
 962              	.L26:
 420:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 421:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 422:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* point to last column in matrix B */
 423:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         pInB  = pSrcBT + numRowsB*(numColsB-1);
 963              		.loc 1 423 0
 964 0618 9823     		mov	r3, #152
 965 061a FB18     		add	r3, r7, r3
 966 061c 1B88     		ldrh	r3, [r3]
 967 061e 9C22     		mov	r2, #156
 968 0620 BA18     		add	r2, r7, r2
 969 0622 1288     		ldrh	r2, [r2]
 970 0624 013A     		sub	r2, r2, #1
 971 0626 5343     		mul	r3, r2
 972 0628 5B00     		lsl	r3, r3, #1
 973 062a A022     		mov	r2, #160
 974 062c BA18     		add	r2, r7, r2
 975 062e 1268     		ldr	r2, [r2]
 976 0630 D318     		add	r3, r2, r3
 977 0632 BB61     		str	r3, [r7, #24]
 424:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 425:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 426:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         sum  = 0;
 978              		.loc 1 426 0
 979 0634 0023     		mov	r3, #0
 980 0636 CC22     		mov	r2, #204
 981 0638 BA18     		add	r2, r7, r2
 982 063a 1360     		str	r3, [r2]
 427:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 428:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Compute 4 columns at once */
 429:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA >> 2;
 983              		.loc 1 429 0
 984 063c 9A23     		mov	r3, #154
 985 063e FB18     		add	r3, r7, r3
 986 0640 1B88     		ldrh	r3, [r3]
 987 0642 9B08     		lsr	r3, r3, #2
 988 0644 9BB2     		uxth	r3, r3
 989 0646 B822     		mov	r2, #184
 990 0648 BA18     		add	r2, r7, r2
 991 064a 1360     		str	r3, [r2]
 430:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 43


 431:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* matrix multiplication */
 432:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0u)
 992              		.loc 1 432 0
 993 064c 66E0     		b	.L20
 994              	.L23:
 433:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 434:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA1 = *__SIMD32(pInA)++;
 995              		.loc 1 434 0
 996 064e 1C23     		mov	r3, #28
 997 0650 FB18     		add	r3, r7, r3
 998 0652 1A68     		ldr	r2, [r3]
 999 0654 111D     		add	r1, r2, #4
 1000 0656 1960     		str	r1, [r3]
 1001 0658 1368     		ldr	r3, [r2]
 1002 065a 9022     		mov	r2, #144
 1003 065c BA18     		add	r2, r7, r2
 1004 065e 1360     		str	r3, [r2]
 435:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA2 = *__SIMD32(pInA)++;
 1005              		.loc 1 435 0
 1006 0660 1C23     		mov	r3, #28
 1007 0662 FB18     		add	r3, r7, r3
 1008 0664 1A68     		ldr	r2, [r3]
 1009 0666 111D     		add	r1, r2, #4
 1010 0668 1960     		str	r1, [r3]
 1011 066a 1368     		ldr	r3, [r2]
 1012 066c 8822     		mov	r2, #136
 1013 066e BA18     		add	r2, r7, r2
 1014 0670 1360     		str	r3, [r2]
 436:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB1 = *__SIMD32(pInB)++;
 1015              		.loc 1 436 0
 1016 0672 1823     		mov	r3, #24
 1017 0674 FB18     		add	r3, r7, r3
 1018 0676 1A68     		ldr	r2, [r3]
 1019 0678 111D     		add	r1, r2, #4
 1020 067a 1960     		str	r1, [r3]
 1021 067c 1368     		ldr	r3, [r2]
 1022 067e 8C22     		mov	r2, #140
 1023 0680 BA18     		add	r2, r7, r2
 1024 0682 1360     		str	r3, [r2]
 437:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB2 = *__SIMD32(pInB)++;
 1025              		.loc 1 437 0
 1026 0684 1823     		mov	r3, #24
 1027 0686 FB18     		add	r3, r7, r3
 1028 0688 1A68     		ldr	r2, [r3]
 1029 068a 111D     		add	r1, r2, #4
 1030 068c 1960     		str	r1, [r3]
 1031 068e 1368     		ldr	r3, [r2]
 1032 0690 8422     		mov	r2, #132
 1033 0692 BA18     		add	r2, r7, r2
 1034 0694 1360     		str	r3, [r2]
 438:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 439:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum  = __SMLAD(inA1, inB1, sum);
 1035              		.loc 1 439 0
 1036 0696 9023     		mov	r3, #144
 1037 0698 FB18     		add	r3, r7, r3
 1038 069a 1968     		ldr	r1, [r3]
 1039 069c 8C23     		mov	r3, #140
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 44


 1040 069e FB18     		add	r3, r7, r3
 1041 06a0 1A68     		ldr	r2, [r3]
 1042 06a2 CC23     		mov	r3, #204
 1043 06a4 FB18     		add	r3, r7, r3
 1044 06a6 1B68     		ldr	r3, [r3]
 1045 06a8 F964     		str	r1, [r7, #76]
 1046 06aa BA64     		str	r2, [r7, #72]
 1047 06ac 7B64     		str	r3, [r7, #68]
 1048              	.LBB26:
 1049              	.LBB27:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1050              		.loc 2 952 0
 1051 06ae FB6C     		ldr	r3, [r7, #76]
 1052 06b0 1B04     		lsl	r3, r3, #16
 1053 06b2 1B14     		asr	r3, r3, #16
 1054 06b4 BA6C     		ldr	r2, [r7, #72]
 1055 06b6 1204     		lsl	r2, r2, #16
 1056 06b8 1214     		asr	r2, r2, #16
 1057 06ba 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1058              		.loc 2 953 0
 1059 06bc FB6C     		ldr	r3, [r7, #76]
 1060 06be 1B14     		asr	r3, r3, #16
 1061 06c0 B96C     		ldr	r1, [r7, #72]
 1062 06c2 0914     		asr	r1, r1, #16
 1063 06c4 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1064              		.loc 2 952 0
 1065 06c6 D218     		add	r2, r2, r3
 1066              		.loc 2 954 0
 1067 06c8 7B6C     		ldr	r3, [r7, #68]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1068              		.loc 2 953 0
 1069 06ca D318     		add	r3, r2, r3
 1070              	.LBE27:
 1071              	.LBE26:
 1072              		.loc 1 439 0
 1073 06cc CC22     		mov	r2, #204
 1074 06ce BA18     		add	r2, r7, r2
 1075 06d0 1360     		str	r3, [r2]
 440:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum  = __SMLAD(inA2, inB2, sum);
 1076              		.loc 1 440 0
 1077 06d2 8823     		mov	r3, #136
 1078 06d4 FB18     		add	r3, r7, r3
 1079 06d6 1968     		ldr	r1, [r3]
 1080 06d8 8423     		mov	r3, #132
 1081 06da FB18     		add	r3, r7, r3
 1082 06dc 1A68     		ldr	r2, [r3]
 1083 06de CC23     		mov	r3, #204
 1084 06e0 FB18     		add	r3, r7, r3
 1085 06e2 1B68     		ldr	r3, [r3]
 1086 06e4 3964     		str	r1, [r7, #64]
 1087 06e6 FA63     		str	r2, [r7, #60]
 1088 06e8 BB63     		str	r3, [r7, #56]
 1089              	.LBB28:
 1090              	.LBB29:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 45


 1091              		.loc 2 952 0
 1092 06ea 3B6C     		ldr	r3, [r7, #64]
 1093 06ec 1B04     		lsl	r3, r3, #16
 1094 06ee 1B14     		asr	r3, r3, #16
 1095 06f0 FA6B     		ldr	r2, [r7, #60]
 1096 06f2 1204     		lsl	r2, r2, #16
 1097 06f4 1214     		asr	r2, r2, #16
 1098 06f6 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1099              		.loc 2 953 0
 1100 06f8 3B6C     		ldr	r3, [r7, #64]
 1101 06fa 1B14     		asr	r3, r3, #16
 1102 06fc F96B     		ldr	r1, [r7, #60]
 1103 06fe 0914     		asr	r1, r1, #16
 1104 0700 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1105              		.loc 2 952 0
 1106 0702 D218     		add	r2, r2, r3
 1107              		.loc 2 954 0
 1108 0704 BB6B     		ldr	r3, [r7, #56]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1109              		.loc 2 953 0
 1110 0706 D318     		add	r3, r2, r3
 1111              	.LBE29:
 1112              	.LBE28:
 1113              		.loc 1 440 0
 1114 0708 CC22     		mov	r2, #204
 1115 070a BA18     		add	r2, r7, r2
 1116 070c 1360     		str	r3, [r2]
 441:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 442:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* Decrement the loop counter */
 443:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           colCnt--;
 1117              		.loc 1 443 0
 1118 070e B823     		mov	r3, #184
 1119 0710 FB18     		add	r3, r7, r3
 1120 0712 1B68     		ldr	r3, [r3]
 1121 0714 013B     		sub	r3, r3, #1
 1122 0716 B822     		mov	r2, #184
 1123 0718 BA18     		add	r2, r7, r2
 1124 071a 1360     		str	r3, [r2]
 1125              	.L20:
 432:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 1126              		.loc 1 432 0
 1127 071c B823     		mov	r3, #184
 1128 071e FB18     		add	r3, r7, r3
 1129 0720 1B68     		ldr	r3, [r3]
 1130 0722 002B     		cmp	r3, #0
 1131 0724 93D1     		bne	.L23
 444:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
 445:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 446:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA & 3u;
 1132              		.loc 1 446 0
 1133 0726 9A23     		mov	r3, #154
 1134 0728 FB18     		add	r3, r7, r3
 1135 072a 1B88     		ldrh	r3, [r3]
 1136 072c 0322     		mov	r2, #3
 1137 072e 1340     		and	r3, r2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 46


 1138 0730 B822     		mov	r2, #184
 1139 0732 BA18     		add	r2, r7, r2
 1140 0734 1360     		str	r3, [r2]
 447:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0u) {
 1141              		.loc 1 447 0
 1142 0736 18E0     		b	.L24
 1143              	.L25:
 448:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += (q31_t) (*pInA++) * (*pInB++);
 1144              		.loc 1 448 0
 1145 0738 FB69     		ldr	r3, [r7, #28]
 1146 073a 9A1C     		add	r2, r3, #2
 1147 073c FA61     		str	r2, [r7, #28]
 1148 073e 1B88     		ldrh	r3, [r3]
 1149 0740 1AB2     		sxth	r2, r3
 1150 0742 BB69     		ldr	r3, [r7, #24]
 1151 0744 991C     		add	r1, r3, #2
 1152 0746 B961     		str	r1, [r7, #24]
 1153 0748 1B88     		ldrh	r3, [r3]
 1154 074a 1BB2     		sxth	r3, r3
 1155 074c 5343     		mul	r3, r2
 1156 074e CC22     		mov	r2, #204
 1157 0750 BA18     		add	r2, r7, r2
 1158 0752 1268     		ldr	r2, [r2]
 1159 0754 D318     		add	r3, r2, r3
 1160 0756 CC22     		mov	r2, #204
 1161 0758 BA18     		add	r2, r7, r2
 1162 075a 1360     		str	r3, [r2]
 449:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           colCnt--;
 1163              		.loc 1 449 0
 1164 075c B823     		mov	r3, #184
 1165 075e FB18     		add	r3, r7, r3
 1166 0760 1B68     		ldr	r3, [r3]
 1167 0762 013B     		sub	r3, r3, #1
 1168 0764 B822     		mov	r2, #184
 1169 0766 BA18     		add	r2, r7, r2
 1170 0768 1360     		str	r3, [r2]
 1171              	.L24:
 447:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0u) {
 1172              		.loc 1 447 0
 1173 076a B823     		mov	r3, #184
 1174 076c FB18     		add	r3, r7, r3
 1175 076e 1B68     		ldr	r3, [r3]
 1176 0770 002B     		cmp	r3, #0
 1177 0772 E1D1     		bne	.L25
 450:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
 451:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 452:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Store the result in the destination buffer */
 453:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px  = (q15_t) (sum  >> 15);
 1178              		.loc 1 453 0
 1179 0774 CC23     		mov	r3, #204
 1180 0776 FB18     		add	r3, r7, r3
 1181 0778 1B68     		ldr	r3, [r3]
 1182 077a DB13     		asr	r3, r3, #15
 1183 077c 9AB2     		uxth	r2, r3
 1184 077e C823     		mov	r3, #200
 1185 0780 FB18     		add	r3, r7, r3
 1186 0782 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 47


 1187 0784 1A80     		strh	r2, [r3]
 454:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         px += numColsB;
 1188              		.loc 1 454 0
 1189 0786 9C23     		mov	r3, #156
 1190 0788 FB18     		add	r3, r7, r3
 1191 078a 1B88     		ldrh	r3, [r3]
 1192 078c 5B00     		lsl	r3, r3, #1
 1193 078e C822     		mov	r2, #200
 1194 0790 BA18     		add	r2, r7, r2
 1195 0792 1268     		ldr	r2, [r2]
 1196 0794 D318     		add	r3, r2, r3
 1197 0796 C822     		mov	r2, #200
 1198 0798 BA18     		add	r2, r7, r2
 1199 079a 1360     		str	r3, [r2]
 455:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 456:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Decrement the row loop counter */
 457:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         row--;
 1200              		.loc 1 457 0
 1201 079c BC23     		mov	r3, #188
 1202 079e FB18     		add	r3, r7, r3
 1203 07a0 1B68     		ldr	r3, [r3]
 1204 07a2 013B     		sub	r3, r3, #1
 1205 07a4 BC22     		mov	r2, #188
 1206 07a6 BA18     		add	r2, r7, r2
 1207 07a8 1360     		str	r3, [r2]
 1208              	.L19:
 419:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 1209              		.loc 1 419 0
 1210 07aa BC23     		mov	r3, #188
 1211 07ac FB18     		add	r3, r7, r3
 1212 07ae 1B68     		ldr	r3, [r3]
 1213 07b0 002B     		cmp	r3, #0
 1214 07b2 00D0     		beq	.LCB1059
 1215 07b4 30E7     		b	.L26	@long jump
 1216              	.LCB1059:
 1217              	.L18:
 458:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       }
 459:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     }
 460:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 461:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* Compute remaining output row */
 462:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     if (numRowsA & 1u) {
 1218              		.loc 1 462 0
 1219 07b6 9E23     		mov	r3, #158
 1220 07b8 FB18     		add	r3, r7, r3
 1221 07ba 1B88     		ldrh	r3, [r3]
 1222 07bc 0122     		mov	r2, #1
 1223 07be 1340     		and	r3, r2
 1224 07c0 00D1     		bne	.LCB1067
 1225 07c2 E7E0     		b	.L27	@long jump
 1226              	.LCB1067:
 463:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 464:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* point to last row in output matrix */
 465:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       px = pDst->pData+(numColsB)*(numRowsA-1);
 1227              		.loc 1 465 0
 1228 07c4 7B68     		ldr	r3, [r7, #4]
 1229 07c6 5A68     		ldr	r2, [r3, #4]
 1230 07c8 9C23     		mov	r3, #156
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 48


 1231 07ca FB18     		add	r3, r7, r3
 1232 07cc 1B88     		ldrh	r3, [r3]
 1233 07ce 9E21     		mov	r1, #158
 1234 07d0 7918     		add	r1, r7, r1
 1235 07d2 0988     		ldrh	r1, [r1]
 1236 07d4 0139     		sub	r1, r1, #1
 1237 07d6 4B43     		mul	r3, r1
 1238 07d8 5B00     		lsl	r3, r3, #1
 1239 07da D318     		add	r3, r2, r3
 1240 07dc C822     		mov	r2, #200
 1241 07de BA18     		add	r2, r7, r2
 1242 07e0 1360     		str	r3, [r2]
 466:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 467:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       pInB  = pSrcBT;
 1243              		.loc 1 467 0
 1244 07e2 A023     		mov	r3, #160
 1245 07e4 FB18     		add	r3, r7, r3
 1246 07e6 1B68     		ldr	r3, [r3]
 1247 07e8 BB61     		str	r3, [r7, #24]
 468:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       col = numColsB;
 1248              		.loc 1 468 0
 1249 07ea 9C23     		mov	r3, #156
 1250 07ec FB18     		add	r3, r7, r3
 1251 07ee 1B88     		ldrh	r3, [r3]
 1252 07f0 C422     		mov	r2, #196
 1253 07f2 BA18     		add	r2, r7, r2
 1254 07f4 1360     		str	r3, [r2]
 469:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       i = 0u;
 1255              		.loc 1 469 0
 1256 07f6 0023     		mov	r3, #0
 1257 07f8 C022     		mov	r2, #192
 1258 07fa BA18     		add	r2, r7, r2
 1259 07fc 1360     		str	r3, [r2]
 470:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 471:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       /* col loop */
 472:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       while (col > 0)
 1260              		.loc 1 472 0
 1261 07fe C3E0     		b	.L28
 1262              	.L35:
 473:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 474:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 475:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* point to last row in matrix A */
 476:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         pInA = pSrcA->pData + (numRowsA-1)*numColsA;
 1263              		.loc 1 476 0
 1264 0800 FB68     		ldr	r3, [r7, #12]
 1265 0802 5A68     		ldr	r2, [r3, #4]
 1266 0804 9E23     		mov	r3, #158
 1267 0806 FB18     		add	r3, r7, r3
 1268 0808 1B88     		ldrh	r3, [r3]
 1269 080a 013B     		sub	r3, r3, #1
 1270 080c 9A21     		mov	r1, #154
 1271 080e 7918     		add	r1, r7, r1
 1272 0810 0988     		ldrh	r1, [r1]
 1273 0812 4B43     		mul	r3, r1
 1274 0814 5B00     		lsl	r3, r3, #1
 1275 0816 D318     		add	r3, r2, r3
 1276 0818 FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 49


 477:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 478:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 479:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         sum  = 0;
 1277              		.loc 1 479 0
 1278 081a 0023     		mov	r3, #0
 1279 081c CC22     		mov	r2, #204
 1280 081e BA18     		add	r2, r7, r2
 1281 0820 1360     		str	r3, [r2]
 480:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 481:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Compute 4 columns at once */
 482:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA >> 2;
 1282              		.loc 1 482 0
 1283 0822 9A23     		mov	r3, #154
 1284 0824 FB18     		add	r3, r7, r3
 1285 0826 1B88     		ldrh	r3, [r3]
 1286 0828 9B08     		lsr	r3, r3, #2
 1287 082a 9BB2     		uxth	r3, r3
 1288 082c B822     		mov	r2, #184
 1289 082e BA18     		add	r2, r7, r2
 1290 0830 1360     		str	r3, [r2]
 483:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 484:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* matrix multiplication */
 485:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0u)
 1291              		.loc 1 485 0
 1292 0832 66E0     		b	.L29
 1293              	.L32:
 486:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 487:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA1 = *__SIMD32(pInA)++;
 1294              		.loc 1 487 0
 1295 0834 1C23     		mov	r3, #28
 1296 0836 FB18     		add	r3, r7, r3
 1297 0838 1A68     		ldr	r2, [r3]
 1298 083a 111D     		add	r1, r2, #4
 1299 083c 1960     		str	r1, [r3]
 1300 083e 1368     		ldr	r3, [r2]
 1301 0840 9022     		mov	r2, #144
 1302 0842 BA18     		add	r2, r7, r2
 1303 0844 1360     		str	r3, [r2]
 488:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inA2 = *__SIMD32(pInA)++;
 1304              		.loc 1 488 0
 1305 0846 1C23     		mov	r3, #28
 1306 0848 FB18     		add	r3, r7, r3
 1307 084a 1A68     		ldr	r2, [r3]
 1308 084c 111D     		add	r1, r2, #4
 1309 084e 1960     		str	r1, [r3]
 1310 0850 1368     		ldr	r3, [r2]
 1311 0852 8822     		mov	r2, #136
 1312 0854 BA18     		add	r2, r7, r2
 1313 0856 1360     		str	r3, [r2]
 489:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB1 = *__SIMD32(pInB)++;
 1314              		.loc 1 489 0
 1315 0858 1823     		mov	r3, #24
 1316 085a FB18     		add	r3, r7, r3
 1317 085c 1A68     		ldr	r2, [r3]
 1318 085e 111D     		add	r1, r2, #4
 1319 0860 1960     		str	r1, [r3]
 1320 0862 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 50


 1321 0864 8C22     		mov	r2, #140
 1322 0866 BA18     		add	r2, r7, r2
 1323 0868 1360     		str	r3, [r2]
 490:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           inB2 = *__SIMD32(pInB)++;
 1324              		.loc 1 490 0
 1325 086a 1823     		mov	r3, #24
 1326 086c FB18     		add	r3, r7, r3
 1327 086e 1A68     		ldr	r2, [r3]
 1328 0870 111D     		add	r1, r2, #4
 1329 0872 1960     		str	r1, [r3]
 1330 0874 1368     		ldr	r3, [r2]
 1331 0876 8422     		mov	r2, #132
 1332 0878 BA18     		add	r2, r7, r2
 1333 087a 1360     		str	r3, [r2]
 491:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 492:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum  = __SMLAD(inA1, inB1, sum);
 1334              		.loc 1 492 0
 1335 087c 9023     		mov	r3, #144
 1336 087e FB18     		add	r3, r7, r3
 1337 0880 1968     		ldr	r1, [r3]
 1338 0882 8C23     		mov	r3, #140
 1339 0884 FB18     		add	r3, r7, r3
 1340 0886 1A68     		ldr	r2, [r3]
 1341 0888 CC23     		mov	r3, #204
 1342 088a FB18     		add	r3, r7, r3
 1343 088c 1B68     		ldr	r3, [r3]
 1344 088e 7963     		str	r1, [r7, #52]
 1345 0890 3A63     		str	r2, [r7, #48]
 1346 0892 FB62     		str	r3, [r7, #44]
 1347              	.LBB30:
 1348              	.LBB31:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1349              		.loc 2 952 0
 1350 0894 7B6B     		ldr	r3, [r7, #52]
 1351 0896 1B04     		lsl	r3, r3, #16
 1352 0898 1B14     		asr	r3, r3, #16
 1353 089a 3A6B     		ldr	r2, [r7, #48]
 1354 089c 1204     		lsl	r2, r2, #16
 1355 089e 1214     		asr	r2, r2, #16
 1356 08a0 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1357              		.loc 2 953 0
 1358 08a2 7B6B     		ldr	r3, [r7, #52]
 1359 08a4 1B14     		asr	r3, r3, #16
 1360 08a6 396B     		ldr	r1, [r7, #48]
 1361 08a8 0914     		asr	r1, r1, #16
 1362 08aa 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1363              		.loc 2 952 0
 1364 08ac D218     		add	r2, r2, r3
 1365              		.loc 2 954 0
 1366 08ae FB6A     		ldr	r3, [r7, #44]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1367              		.loc 2 953 0
 1368 08b0 D318     		add	r3, r2, r3
 1369              	.LBE31:
 1370              	.LBE30:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 51


 1371              		.loc 1 492 0
 1372 08b2 CC22     		mov	r2, #204
 1373 08b4 BA18     		add	r2, r7, r2
 1374 08b6 1360     		str	r3, [r2]
 493:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum  = __SMLAD(inA2, inB2, sum);
 1375              		.loc 1 493 0
 1376 08b8 8823     		mov	r3, #136
 1377 08ba FB18     		add	r3, r7, r3
 1378 08bc 1968     		ldr	r1, [r3]
 1379 08be 8423     		mov	r3, #132
 1380 08c0 FB18     		add	r3, r7, r3
 1381 08c2 1A68     		ldr	r2, [r3]
 1382 08c4 CC23     		mov	r3, #204
 1383 08c6 FB18     		add	r3, r7, r3
 1384 08c8 1B68     		ldr	r3, [r3]
 1385 08ca B962     		str	r1, [r7, #40]
 1386 08cc 7A62     		str	r2, [r7, #36]
 1387 08ce 3B62     		str	r3, [r7, #32]
 1388              	.LBB32:
 1389              	.LBB33:
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1390              		.loc 2 952 0
 1391 08d0 BB6A     		ldr	r3, [r7, #40]
 1392 08d2 1B04     		lsl	r3, r3, #16
 1393 08d4 1B14     		asr	r3, r3, #16
 1394 08d6 7A6A     		ldr	r2, [r7, #36]
 1395 08d8 1204     		lsl	r2, r2, #16
 1396 08da 1214     		asr	r2, r2, #16
 1397 08dc 5A43     		mul	r2, r3
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1398              		.loc 2 953 0
 1399 08de BB6A     		ldr	r3, [r7, #40]
 1400 08e0 1B14     		asr	r3, r3, #16
 1401 08e2 796A     		ldr	r1, [r7, #36]
 1402 08e4 0914     		asr	r1, r1, #16
 1403 08e6 4B43     		mul	r3, r1
 952:.\Include/arm_math.h ****                        ((((q31_t)x      ) >> 16) * (((q31_t)y      ) >> 16)) +
 1404              		.loc 2 952 0
 1405 08e8 D218     		add	r2, r2, r3
 1406              		.loc 2 954 0
 1407 08ea 3B6A     		ldr	r3, [r7, #32]
 953:.\Include/arm_math.h ****                        ( ((q31_t)sum    )                                  )   ));
 1408              		.loc 2 953 0
 1409 08ec D318     		add	r3, r2, r3
 1410              	.LBE33:
 1411              	.LBE32:
 1412              		.loc 1 493 0
 1413 08ee CC22     		mov	r2, #204
 1414 08f0 BA18     		add	r2, r7, r2
 1415 08f2 1360     		str	r3, [r2]
 494:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 495:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           /* Decrement the loop counter */
 496:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           colCnt--;
 1416              		.loc 1 496 0
 1417 08f4 B823     		mov	r3, #184
 1418 08f6 FB18     		add	r3, r7, r3
 1419 08f8 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 52


 1420 08fa 013B     		sub	r3, r3, #1
 1421 08fc B822     		mov	r2, #184
 1422 08fe BA18     		add	r2, r7, r2
 1423 0900 1360     		str	r3, [r2]
 1424              	.L29:
 485:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         {
 1425              		.loc 1 485 0
 1426 0902 B823     		mov	r3, #184
 1427 0904 FB18     		add	r3, r7, r3
 1428 0906 1B68     		ldr	r3, [r3]
 1429 0908 002B     		cmp	r3, #0
 1430 090a 93D1     		bne	.L32
 497:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
 498:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 499:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         colCnt = numColsA & 3u;
 1431              		.loc 1 499 0
 1432 090c 9A23     		mov	r3, #154
 1433 090e FB18     		add	r3, r7, r3
 1434 0910 1B88     		ldrh	r3, [r3]
 1435 0912 0322     		mov	r2, #3
 1436 0914 1340     		and	r3, r2
 1437 0916 B822     		mov	r2, #184
 1438 0918 BA18     		add	r2, r7, r2
 1439 091a 1360     		str	r3, [r2]
 500:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0u) {
 1440              		.loc 1 500 0
 1441 091c 1BE0     		b	.L33
 1442              	.L38:
 1443 091e C046     		.align	2
 1444              	.L37:
 1445 0920 FFFFFF7F 		.word	2147483647
 1446              	.L34:
 501:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           sum += (q31_t) (*pInA++) * (*pInB++);
 1447              		.loc 1 501 0
 1448 0924 FB69     		ldr	r3, [r7, #28]
 1449 0926 9A1C     		add	r2, r3, #2
 1450 0928 FA61     		str	r2, [r7, #28]
 1451 092a 1B88     		ldrh	r3, [r3]
 1452 092c 1AB2     		sxth	r2, r3
 1453 092e BB69     		ldr	r3, [r7, #24]
 1454 0930 991C     		add	r1, r3, #2
 1455 0932 B961     		str	r1, [r7, #24]
 1456 0934 1B88     		ldrh	r3, [r3]
 1457 0936 1BB2     		sxth	r3, r3
 1458 0938 5343     		mul	r3, r2
 1459 093a CC22     		mov	r2, #204
 1460 093c BA18     		add	r2, r7, r2
 1461 093e 1268     		ldr	r2, [r2]
 1462 0940 D318     		add	r3, r2, r3
 1463 0942 CC22     		mov	r2, #204
 1464 0944 BA18     		add	r2, r7, r2
 1465 0946 1360     		str	r3, [r2]
 502:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****           colCnt--;
 1466              		.loc 1 502 0
 1467 0948 B823     		mov	r3, #184
 1468 094a FB18     		add	r3, r7, r3
 1469 094c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 53


 1470 094e 013B     		sub	r3, r3, #1
 1471 0950 B822     		mov	r2, #184
 1472 0952 BA18     		add	r2, r7, r2
 1473 0954 1360     		str	r3, [r2]
 1474              	.L33:
 500:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         while (colCnt > 0u) {
 1475              		.loc 1 500 0
 1476 0956 B823     		mov	r3, #184
 1477 0958 FB18     		add	r3, r7, r3
 1478 095a 1B68     		ldr	r3, [r3]
 1479 095c 002B     		cmp	r3, #0
 1480 095e E1D1     		bne	.L34
 503:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         }
 504:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 505:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Store the result in the destination buffer */
 506:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         *px++  = (q15_t) (sum  >> 15);
 1481              		.loc 1 506 0
 1482 0960 C823     		mov	r3, #200
 1483 0962 FB18     		add	r3, r7, r3
 1484 0964 1B68     		ldr	r3, [r3]
 1485 0966 9A1C     		add	r2, r3, #2
 1486 0968 C821     		mov	r1, #200
 1487 096a 7918     		add	r1, r7, r1
 1488 096c 0A60     		str	r2, [r1]
 1489 096e CC22     		mov	r2, #204
 1490 0970 BA18     		add	r2, r7, r2
 1491 0972 1268     		ldr	r2, [r2]
 1492 0974 D213     		asr	r2, r2, #15
 1493 0976 92B2     		uxth	r2, r2
 1494 0978 1A80     		strh	r2, [r3]
 507:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 508:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         /* Decrement the col loop counter */
 509:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****         col--;
 1495              		.loc 1 509 0
 1496 097a C423     		mov	r3, #196
 1497 097c FB18     		add	r3, r7, r3
 1498 097e 1B68     		ldr	r3, [r3]
 1499 0980 013B     		sub	r3, r3, #1
 1500 0982 C422     		mov	r2, #196
 1501 0984 BA18     		add	r2, r7, r2
 1502 0986 1360     		str	r3, [r2]
 1503              	.L28:
 472:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       {
 1504              		.loc 1 472 0
 1505 0988 C423     		mov	r3, #196
 1506 098a FB18     		add	r3, r7, r3
 1507 098c 1B68     		ldr	r3, [r3]
 1508 098e 002B     		cmp	r3, #0
 1509 0990 00D0     		beq	.LCB1324
 1510 0992 35E7     		b	.L35	@long jump
 1511              	.LCB1324:
 1512              	.L27:
 510:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****       }
 511:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     }
 512:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 513:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** #endif /* #ifndef UNALIGNED_SUPPORT_DISABLE */
 514:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 54


 515:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     /* set status as ARM_MATH_SUCCESS */
 516:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****     status = ARM_MATH_SUCCESS;
 1513              		.loc 1 516 0
 1514 0994 8323     		mov	r3, #131
 1515 0996 FB18     		add	r3, r7, r3
 1516 0998 0022     		mov	r2, #0
 1517 099a 1A70     		strb	r2, [r3]
 517:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   }
 518:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** 
 519:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   /* Return to application */
 520:Source\MatrixFunctions/arm_mat_mult_fast_q15.c ****   return (status);
 1518              		.loc 1 520 0
 1519 099c 8323     		mov	r3, #131
 1520 099e FB18     		add	r3, r7, r3
 1521 09a0 1B78     		ldrb	r3, [r3]
 1522 09a2 5BB2     		sxtb	r3, r3
 521:Source\MatrixFunctions/arm_mat_mult_fast_q15.c **** }
 1523              		.loc 1 521 0
 1524 09a4 181C     		mov	r0, r3
 1525 09a6 BD46     		mov	sp, r7
 1526 09a8 34B0     		add	sp, sp, #208
 1527              		@ sp needed
 1528 09aa 80BD     		pop	{r7, pc}
 1529              		.cfi_endproc
 1530              	.LFE82:
 1531              		.size	arm_mat_mult_fast_q15, .-arm_mat_mult_fast_q15
 1532              		.text
 1533              	.Letext0:
 1534              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1535              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1536              		.section	.debug_info,"",%progbits
 1537              	.Ldebug_info0:
 1538 0000 03050000 		.4byte	0x503
 1539 0004 0400     		.2byte	0x4
 1540 0006 00000000 		.4byte	.Ldebug_abbrev0
 1541 000a 04       		.byte	0x4
 1542 000b 01       		.uleb128 0x1
 1543 000c D5000000 		.4byte	.LASF58
 1544 0010 01       		.byte	0x1
 1545 0011 C8020000 		.4byte	.LASF59
 1546 0015 5F020000 		.4byte	.LASF60
 1547 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1548 001d 00000000 		.4byte	0
 1549 0021 00000000 		.4byte	.Ldebug_line0
 1550 0025 02       		.uleb128 0x2
 1551 0026 01       		.byte	0x1
 1552 0027 06       		.byte	0x6
 1553 0028 45000000 		.4byte	.LASF0
 1554 002c 02       		.uleb128 0x2
 1555 002d 01       		.byte	0x1
 1556 002e 08       		.byte	0x8
 1557 002f 28020000 		.4byte	.LASF1
 1558 0033 03       		.uleb128 0x3
 1559 0034 A4000000 		.4byte	.LASF3
 1560 0038 03       		.byte	0x3
 1561 0039 29       		.byte	0x29
 1562 003a 3E000000 		.4byte	0x3e
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 55


 1563 003e 02       		.uleb128 0x2
 1564 003f 02       		.byte	0x2
 1565 0040 05       		.byte	0x5
 1566 0041 3D020000 		.4byte	.LASF2
 1567 0045 03       		.uleb128 0x3
 1568 0046 0A030000 		.4byte	.LASF4
 1569 004a 03       		.byte	0x3
 1570 004b 2B       		.byte	0x2b
 1571 004c 50000000 		.4byte	0x50
 1572 0050 02       		.uleb128 0x2
 1573 0051 02       		.byte	0x2
 1574 0052 07       		.byte	0x7
 1575 0053 67010000 		.4byte	.LASF5
 1576 0057 03       		.uleb128 0x3
 1577 0058 2C030000 		.4byte	.LASF6
 1578 005c 03       		.byte	0x3
 1579 005d 3F       		.byte	0x3f
 1580 005e 62000000 		.4byte	0x62
 1581 0062 02       		.uleb128 0x2
 1582 0063 04       		.byte	0x4
 1583 0064 05       		.byte	0x5
 1584 0065 51000000 		.4byte	.LASF7
 1585 0069 03       		.uleb128 0x3
 1586 006a 99000000 		.4byte	.LASF8
 1587 006e 03       		.byte	0x3
 1588 006f 41       		.byte	0x41
 1589 0070 74000000 		.4byte	0x74
 1590 0074 02       		.uleb128 0x2
 1591 0075 04       		.byte	0x4
 1592 0076 07       		.byte	0x7
 1593 0077 C3000000 		.4byte	.LASF9
 1594 007b 02       		.uleb128 0x2
 1595 007c 08       		.byte	0x8
 1596 007d 05       		.byte	0x5
 1597 007e 37000000 		.4byte	.LASF10
 1598 0082 02       		.uleb128 0x2
 1599 0083 08       		.byte	0x8
 1600 0084 07       		.byte	0x7
 1601 0085 18000000 		.4byte	.LASF11
 1602 0089 04       		.uleb128 0x4
 1603 008a 04       		.byte	0x4
 1604 008b 05       		.byte	0x5
 1605 008c 696E7400 		.ascii	"int\000"
 1606 0090 02       		.uleb128 0x2
 1607 0091 04       		.byte	0x4
 1608 0092 07       		.byte	0x7
 1609 0093 B6000000 		.4byte	.LASF12
 1610 0097 03       		.uleb128 0x3
 1611 0098 2F000000 		.4byte	.LASF13
 1612 009c 04       		.byte	0x4
 1613 009d 20       		.byte	0x20
 1614 009e 33000000 		.4byte	0x33
 1615 00a2 03       		.uleb128 0x3
 1616 00a3 65000000 		.4byte	.LASF14
 1617 00a7 04       		.byte	0x4
 1618 00a8 21       		.byte	0x21
 1619 00a9 45000000 		.4byte	0x45
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 56


 1620 00ad 03       		.uleb128 0x3
 1621 00ae 20020000 		.4byte	.LASF15
 1622 00b2 04       		.byte	0x4
 1623 00b3 2C       		.byte	0x2c
 1624 00b4 57000000 		.4byte	0x57
 1625 00b8 03       		.uleb128 0x3
 1626 00b9 F7020000 		.4byte	.LASF16
 1627 00bd 04       		.byte	0x4
 1628 00be 2D       		.byte	0x2d
 1629 00bf 69000000 		.4byte	0x69
 1630 00c3 02       		.uleb128 0x2
 1631 00c4 04       		.byte	0x4
 1632 00c5 07       		.byte	0x7
 1633 00c6 A7010000 		.4byte	.LASF17
 1634 00ca 02       		.uleb128 0x2
 1635 00cb 01       		.byte	0x1
 1636 00cc 08       		.byte	0x8
 1637 00cd 00030000 		.4byte	.LASF18
 1638 00d1 02       		.uleb128 0x2
 1639 00d2 08       		.byte	0x8
 1640 00d3 04       		.byte	0x4
 1641 00d4 6E000000 		.4byte	.LASF19
 1642 00d8 02       		.uleb128 0x2
 1643 00d9 04       		.byte	0x4
 1644 00da 04       		.byte	0x4
 1645 00db E2010000 		.4byte	.LASF20
 1646 00df 02       		.uleb128 0x2
 1647 00e0 08       		.byte	0x8
 1648 00e1 04       		.byte	0x4
 1649 00e2 B0010000 		.4byte	.LASF21
 1650 00e6 05       		.uleb128 0x5
 1651 00e7 01       		.byte	0x1
 1652 00e8 02       		.byte	0x2
 1653 00e9 8401     		.2byte	0x184
 1654 00eb 1A010000 		.4byte	0x11a
 1655 00ef 06       		.uleb128 0x6
 1656 00f0 07000000 		.4byte	.LASF22
 1657 00f4 00       		.sleb128 0
 1658 00f5 06       		.uleb128 0x6
 1659 00f6 47020000 		.4byte	.LASF23
 1660 00fa 7F       		.sleb128 -1
 1661 00fb 06       		.uleb128 0x6
 1662 00fc CC010000 		.4byte	.LASF24
 1663 0100 7E       		.sleb128 -2
 1664 0101 06       		.uleb128 0x6
 1665 0102 15030000 		.4byte	.LASF25
 1666 0106 7D       		.sleb128 -3
 1667 0107 06       		.uleb128 0x6
 1668 0108 10020000 		.4byte	.LASF26
 1669 010c 7C       		.sleb128 -4
 1670 010d 06       		.uleb128 0x6
 1671 010e E8010000 		.4byte	.LASF27
 1672 0112 7B       		.sleb128 -5
 1673 0113 06       		.uleb128 0x6
 1674 0114 89010000 		.4byte	.LASF28
 1675 0118 7A       		.sleb128 -6
 1676 0119 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 57


 1677 011a 07       		.uleb128 0x7
 1678 011b 6E030000 		.4byte	.LASF29
 1679 011f 02       		.byte	0x2
 1680 0120 8C01     		.2byte	0x18c
 1681 0122 E6000000 		.4byte	0xe6
 1682 0126 07       		.uleb128 0x7
 1683 0127 5F000000 		.4byte	.LASF30
 1684 012b 02       		.byte	0x2
 1685 012c 9601     		.2byte	0x196
 1686 012e 97000000 		.4byte	0x97
 1687 0132 07       		.uleb128 0x7
 1688 0133 C2020000 		.4byte	.LASF31
 1689 0137 02       		.byte	0x2
 1690 0138 9B01     		.2byte	0x19b
 1691 013a AD000000 		.4byte	0xad
 1692 013e 08       		.uleb128 0x8
 1693 013f 04       		.byte	0x4
 1694 0140 26010000 		.4byte	0x126
 1695 0144 09       		.uleb128 0x9
 1696 0145 08       		.byte	0x8
 1697 0146 02       		.byte	0x2
 1698 0147 AF05     		.2byte	0x5af
 1699 0149 75010000 		.4byte	0x175
 1700 014d 0A       		.uleb128 0xa
 1701 014e AE000000 		.4byte	.LASF32
 1702 0152 02       		.byte	0x2
 1703 0153 B105     		.2byte	0x5b1
 1704 0155 A2000000 		.4byte	0xa2
 1705 0159 00       		.byte	0
 1706 015a 0A       		.uleb128 0xa
 1707 015b 9F010000 		.4byte	.LASF33
 1708 015f 02       		.byte	0x2
 1709 0160 B205     		.2byte	0x5b2
 1710 0162 A2000000 		.4byte	0xa2
 1711 0166 02       		.byte	0x2
 1712 0167 0A       		.uleb128 0xa
 1713 0168 93000000 		.4byte	.LASF34
 1714 016c 02       		.byte	0x2
 1715 016d B305     		.2byte	0x5b3
 1716 016f 3E010000 		.4byte	0x13e
 1717 0173 04       		.byte	0x4
 1718 0174 00       		.byte	0
 1719 0175 07       		.uleb128 0x7
 1720 0176 48030000 		.4byte	.LASF35
 1721 017a 02       		.byte	0x2
 1722 017b B405     		.2byte	0x5b4
 1723 017d 44010000 		.4byte	0x144
 1724 0181 0B       		.uleb128 0xb
 1725 0182 36030000 		.4byte	.LASF61
 1726 0186 02       		.byte	0x2
 1727 0187 B303     		.2byte	0x3b3
 1728 0189 B8000000 		.4byte	0xb8
 1729 018d 03       		.byte	0x3
 1730 018e B3010000 		.4byte	0x1b3
 1731 0192 0C       		.uleb128 0xc
 1732 0193 7800     		.ascii	"x\000"
 1733 0195 02       		.byte	0x2
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 58


 1734 0196 B403     		.2byte	0x3b4
 1735 0198 B8000000 		.4byte	0xb8
 1736 019c 0C       		.uleb128 0xc
 1737 019d 7900     		.ascii	"y\000"
 1738 019f 02       		.byte	0x2
 1739 01a0 B503     		.2byte	0x3b5
 1740 01a2 B8000000 		.4byte	0xb8
 1741 01a6 0C       		.uleb128 0xc
 1742 01a7 73756D00 		.ascii	"sum\000"
 1743 01ab 02       		.byte	0x2
 1744 01ac B603     		.2byte	0x3b6
 1745 01ae B8000000 		.4byte	0xb8
 1746 01b2 00       		.byte	0
 1747 01b3 0D       		.uleb128 0xd
 1748 01b4 FA010000 		.4byte	.LASF62
 1749 01b8 01       		.byte	0x1
 1750 01b9 49       		.byte	0x49
 1751 01ba 1A010000 		.4byte	0x11a
 1752 01be 00000000 		.4byte	.LFB82
 1753 01c2 AC090000 		.4byte	.LFE82-.LFB82
 1754 01c6 01       		.uleb128 0x1
 1755 01c7 9C       		.byte	0x9c
 1756 01c8 F5040000 		.4byte	0x4f5
 1757 01cc 0E       		.uleb128 0xe
 1758 01cd 87000000 		.4byte	.LASF36
 1759 01d1 01       		.byte	0x1
 1760 01d2 4A       		.byte	0x4a
 1761 01d3 F5040000 		.4byte	0x4f5
 1762 01d7 03       		.uleb128 0x3
 1763 01d8 91       		.byte	0x91
 1764 01d9 B47E     		.sleb128 -204
 1765 01db 0E       		.uleb128 0xe
 1766 01dc 8D000000 		.4byte	.LASF37
 1767 01e0 01       		.byte	0x1
 1768 01e1 4B       		.byte	0x4b
 1769 01e2 F5040000 		.4byte	0x4f5
 1770 01e6 03       		.uleb128 0x3
 1771 01e7 91       		.byte	0x91
 1772 01e8 B07E     		.sleb128 -208
 1773 01ea 0E       		.uleb128 0xe
 1774 01eb 5A000000 		.4byte	.LASF38
 1775 01ef 01       		.byte	0x1
 1776 01f0 4C       		.byte	0x4c
 1777 01f1 00050000 		.4byte	0x500
 1778 01f5 03       		.uleb128 0x3
 1779 01f6 91       		.byte	0x91
 1780 01f7 AC7E     		.sleb128 -212
 1781 01f9 0E       		.uleb128 0xe
 1782 01fa 36020000 		.4byte	.LASF39
 1783 01fe 01       		.byte	0x1
 1784 01ff 4D       		.byte	0x4d
 1785 0200 3E010000 		.4byte	0x13e
 1786 0204 03       		.uleb128 0x3
 1787 0205 91       		.byte	0x91
 1788 0206 A87E     		.sleb128 -216
 1789 0208 0F       		.uleb128 0xf
 1790 0209 73756D00 		.ascii	"sum\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 59


 1791 020d 01       		.byte	0x1
 1792 020e 4F       		.byte	0x4f
 1793 020f 32010000 		.4byte	0x132
 1794 0213 02       		.uleb128 0x2
 1795 0214 91       		.byte	0x91
 1796 0215 74       		.sleb128 -12
 1797 0216 10       		.uleb128 0x10
 1798 0217 67030000 		.4byte	.LASF40
 1799 021b 01       		.byte	0x1
 1800 021c 50       		.byte	0x50
 1801 021d 3E010000 		.4byte	0x13e
 1802 0221 02       		.uleb128 0x2
 1803 0222 91       		.byte	0x91
 1804 0223 48       		.sleb128 -56
 1805 0224 10       		.uleb128 0x10
 1806 0225 BC010000 		.4byte	.LASF41
 1807 0229 01       		.byte	0x1
 1808 022a 51       		.byte	0x51
 1809 022b 3E010000 		.4byte	0x13e
 1810 022f 03       		.uleb128 0x3
 1811 0230 91       		.byte	0x91
 1812 0231 C47E     		.sleb128 -188
 1813 0233 10       		.uleb128 0x10
 1814 0234 C1010000 		.4byte	.LASF42
 1815 0238 01       		.byte	0x1
 1816 0239 52       		.byte	0x52
 1817 023a 3E010000 		.4byte	0x13e
 1818 023e 03       		.uleb128 0x3
 1819 023f 91       		.byte	0x91
 1820 0240 C07E     		.sleb128 -192
 1821 0242 0F       		.uleb128 0xf
 1822 0243 707800   		.ascii	"px\000"
 1823 0246 01       		.byte	0x1
 1824 0247 53       		.byte	0x53
 1825 0248 3E010000 		.4byte	0x13e
 1826 024c 02       		.uleb128 0x2
 1827 024d 91       		.byte	0x91
 1828 024e 70       		.sleb128 -16
 1829 024f 10       		.uleb128 0x10
 1830 0250 AA020000 		.4byte	.LASF43
 1831 0254 01       		.byte	0x1
 1832 0255 54       		.byte	0x54
 1833 0256 A2000000 		.4byte	0xa2
 1834 025a 02       		.uleb128 0x2
 1835 025b 91       		.byte	0x91
 1836 025c 46       		.sleb128 -58
 1837 025d 10       		.uleb128 0x10
 1838 025e 7E000000 		.4byte	.LASF44
 1839 0262 01       		.byte	0x1
 1840 0263 55       		.byte	0x55
 1841 0264 A2000000 		.4byte	0xa2
 1842 0268 02       		.uleb128 0x2
 1843 0269 91       		.byte	0x91
 1844 026a 44       		.sleb128 -60
 1845 026b 10       		.uleb128 0x10
 1846 026c 75000000 		.4byte	.LASF45
 1847 0270 01       		.byte	0x1
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 60


 1848 0271 56       		.byte	0x56
 1849 0272 A2000000 		.4byte	0xa2
 1850 0276 02       		.uleb128 0x2
 1851 0277 91       		.byte	0x91
 1852 0278 42       		.sleb128 -62
 1853 0279 10       		.uleb128 0x10
 1854 027a B3020000 		.4byte	.LASF46
 1855 027e 01       		.byte	0x1
 1856 027f 57       		.byte	0x57
 1857 0280 A2000000 		.4byte	0xa2
 1858 0284 02       		.uleb128 0x2
 1859 0285 91       		.byte	0x91
 1860 0286 40       		.sleb128 -64
 1861 0287 0F       		.uleb128 0xf
 1862 0288 636F6C00 		.ascii	"col\000"
 1863 028c 01       		.byte	0x1
 1864 028d 58       		.byte	0x58
 1865 028e B8000000 		.4byte	0xb8
 1866 0292 02       		.uleb128 0x2
 1867 0293 91       		.byte	0x91
 1868 0294 6C       		.sleb128 -20
 1869 0295 0F       		.uleb128 0xf
 1870 0296 6900     		.ascii	"i\000"
 1871 0298 01       		.byte	0x1
 1872 0299 58       		.byte	0x58
 1873 029a B8000000 		.4byte	0xb8
 1874 029e 02       		.uleb128 0x2
 1875 029f 91       		.byte	0x91
 1876 02a0 68       		.sleb128 -24
 1877 02a1 0F       		.uleb128 0xf
 1878 02a2 726F7700 		.ascii	"row\000"
 1879 02a6 01       		.byte	0x1
 1880 02a7 58       		.byte	0x58
 1881 02a8 B8000000 		.4byte	0xb8
 1882 02ac 02       		.uleb128 0x2
 1883 02ad 91       		.byte	0x91
 1884 02ae 64       		.sleb128 -28
 1885 02af 10       		.uleb128 0x10
 1886 02b0 00000000 		.4byte	.LASF47
 1887 02b4 01       		.byte	0x1
 1888 02b5 58       		.byte	0x58
 1889 02b6 B8000000 		.4byte	0xb8
 1890 02ba 02       		.uleb128 0x2
 1891 02bb 91       		.byte	0x91
 1892 02bc 60       		.sleb128 -32
 1893 02bd 10       		.uleb128 0x10
 1894 02be 60030000 		.4byte	.LASF48
 1895 02c2 01       		.byte	0x1
 1896 02c3 59       		.byte	0x59
 1897 02c4 1A010000 		.4byte	0x11a
 1898 02c8 03       		.uleb128 0x3
 1899 02c9 91       		.byte	0x91
 1900 02ca AB7F     		.sleb128 -85
 1901 02cc 0F       		.uleb128 0xf
 1902 02cd 696E00   		.ascii	"in\000"
 1903 02d0 01       		.byte	0x1
 1904 02d1 5D       		.byte	0x5d
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 61


 1905 02d2 32010000 		.4byte	0x132
 1906 02d6 03       		.uleb128 0x3
 1907 02d7 91       		.byte	0x91
 1908 02d8 BC7F     		.sleb128 -68
 1909 02da 10       		.uleb128 0x10
 1910 02db 05030000 		.4byte	.LASF49
 1911 02df 01       		.byte	0x1
 1912 02e0 5E       		.byte	0x5e
 1913 02e1 32010000 		.4byte	0x132
 1914 02e5 03       		.uleb128 0x3
 1915 02e6 91       		.byte	0x91
 1916 02e7 B87F     		.sleb128 -72
 1917 02e9 10       		.uleb128 0x10
 1918 02ea A5020000 		.4byte	.LASF50
 1919 02ee 01       		.byte	0x1
 1920 02ef 5E       		.byte	0x5e
 1921 02f0 32010000 		.4byte	0x132
 1922 02f4 03       		.uleb128 0x3
 1923 02f5 91       		.byte	0x91
 1924 02f6 B07F     		.sleb128 -80
 1925 02f8 10       		.uleb128 0x10
 1926 02f9 3E030000 		.4byte	.LASF51
 1927 02fd 01       		.byte	0x1
 1928 02fe 5E       		.byte	0x5e
 1929 02ff 32010000 		.4byte	0x132
 1930 0303 03       		.uleb128 0x3
 1931 0304 91       		.byte	0x91
 1932 0305 B47F     		.sleb128 -76
 1933 0307 10       		.uleb128 0x10
 1934 0308 43030000 		.4byte	.LASF52
 1935 030c 01       		.byte	0x1
 1936 030d 5E       		.byte	0x5e
 1937 030e 32010000 		.4byte	0x132
 1938 0312 03       		.uleb128 0x3
 1939 0313 91       		.byte	0x91
 1940 0314 AC7F     		.sleb128 -84
 1941 0316 10       		.uleb128 0x10
 1942 0317 7A010000 		.4byte	.LASF53
 1943 031b 01       		.byte	0x1
 1944 031c 5F       		.byte	0x5f
 1945 031d 32010000 		.4byte	0x132
 1946 0321 02       		.uleb128 0x2
 1947 0322 91       		.byte	0x91
 1948 0323 5C       		.sleb128 -36
 1949 0324 10       		.uleb128 0x10
 1950 0325 7F010000 		.4byte	.LASF54
 1951 0329 01       		.byte	0x1
 1952 032a 5F       		.byte	0x5f
 1953 032b 32010000 		.4byte	0x132
 1954 032f 02       		.uleb128 0x2
 1955 0330 91       		.byte	0x91
 1956 0331 58       		.sleb128 -40
 1957 0332 10       		.uleb128 0x10
 1958 0333 84010000 		.4byte	.LASF55
 1959 0337 01       		.byte	0x1
 1960 0338 5F       		.byte	0x5f
 1961 0339 32010000 		.4byte	0x132
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 62


 1962 033d 02       		.uleb128 0x2
 1963 033e 91       		.byte	0x91
 1964 033f 54       		.sleb128 -44
 1965 0340 10       		.uleb128 0x10
 1966 0341 C6010000 		.4byte	.LASF56
 1967 0345 01       		.byte	0x1
 1968 0346 60       		.byte	0x60
 1969 0347 3E010000 		.4byte	0x13e
 1970 034b 03       		.uleb128 0x3
 1971 034c 91       		.byte	0x91
 1972 034d BC7E     		.sleb128 -196
 1973 034f 10       		.uleb128 0x10
 1974 0350 BC020000 		.4byte	.LASF57
 1975 0354 01       		.byte	0x1
 1976 0355 60       		.byte	0x60
 1977 0356 3E010000 		.4byte	0x13e
 1978 035a 03       		.uleb128 0x3
 1979 035b 91       		.byte	0x91
 1980 035c B87E     		.sleb128 -200
 1981 035e 0F       		.uleb128 0xf
 1982 035f 70783200 		.ascii	"px2\000"
 1983 0363 01       		.byte	0x1
 1984 0364 60       		.byte	0x60
 1985 0365 3E010000 		.4byte	0x13e
 1986 0369 02       		.uleb128 0x2
 1987 036a 91       		.byte	0x91
 1988 036b 50       		.sleb128 -48
 1989 036c 0F       		.uleb128 0xf
 1990 036d 6A00     		.ascii	"j\000"
 1991 036f 01       		.byte	0x1
 1992 0370 61       		.byte	0x61
 1993 0371 B8000000 		.4byte	0xb8
 1994 0375 02       		.uleb128 0x2
 1995 0376 91       		.byte	0x91
 1996 0377 4C       		.sleb128 -52
 1997 0378 11       		.uleb128 0x11
 1998 0379 81010000 		.4byte	0x181
 1999 037d 1E030000 		.4byte	.LBB18
 2000 0381 1E000000 		.4byte	.LBE18-.LBB18
 2001 0385 01       		.byte	0x1
 2002 0386 4001     		.2byte	0x140
 2003 0388 A8030000 		.4byte	0x3a8
 2004 038c 12       		.uleb128 0x12
 2005 038d A6010000 		.4byte	0x1a6
 2006 0391 03       		.uleb128 0x3
 2007 0392 91       		.byte	0x91
 2008 0393 9C7F     		.sleb128 -100
 2009 0395 12       		.uleb128 0x12
 2010 0396 9C010000 		.4byte	0x19c
 2011 039a 03       		.uleb128 0x3
 2012 039b 91       		.byte	0x91
 2013 039c A07F     		.sleb128 -96
 2014 039e 12       		.uleb128 0x12
 2015 039f 92010000 		.4byte	0x192
 2016 03a3 03       		.uleb128 0x3
 2017 03a4 91       		.byte	0x91
 2018 03a5 A47F     		.sleb128 -92
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 63


 2019 03a7 00       		.byte	0
 2020 03a8 11       		.uleb128 0x11
 2021 03a9 81010000 		.4byte	0x181
 2022 03ad 5A030000 		.4byte	.LBB20
 2023 03b1 1E000000 		.4byte	.LBE20-.LBB20
 2024 03b5 01       		.byte	0x1
 2025 03b6 4101     		.2byte	0x141
 2026 03b8 D8030000 		.4byte	0x3d8
 2027 03bc 12       		.uleb128 0x12
 2028 03bd A6010000 		.4byte	0x1a6
 2029 03c1 03       		.uleb128 0x3
 2030 03c2 91       		.byte	0x91
 2031 03c3 907F     		.sleb128 -112
 2032 03c5 12       		.uleb128 0x12
 2033 03c6 9C010000 		.4byte	0x19c
 2034 03ca 03       		.uleb128 0x3
 2035 03cb 91       		.byte	0x91
 2036 03cc 947F     		.sleb128 -108
 2037 03ce 12       		.uleb128 0x12
 2038 03cf 92010000 		.4byte	0x192
 2039 03d3 03       		.uleb128 0x3
 2040 03d4 91       		.byte	0x91
 2041 03d5 987F     		.sleb128 -104
 2042 03d7 00       		.byte	0
 2043 03d8 11       		.uleb128 0x11
 2044 03d9 81010000 		.4byte	0x181
 2045 03dd 96030000 		.4byte	.LBB22
 2046 03e1 1E000000 		.4byte	.LBE22-.LBB22
 2047 03e5 01       		.byte	0x1
 2048 03e6 4201     		.2byte	0x142
 2049 03e8 08040000 		.4byte	0x408
 2050 03ec 12       		.uleb128 0x12
 2051 03ed A6010000 		.4byte	0x1a6
 2052 03f1 03       		.uleb128 0x3
 2053 03f2 91       		.byte	0x91
 2054 03f3 847F     		.sleb128 -124
 2055 03f5 12       		.uleb128 0x12
 2056 03f6 9C010000 		.4byte	0x19c
 2057 03fa 03       		.uleb128 0x3
 2058 03fb 91       		.byte	0x91
 2059 03fc 887F     		.sleb128 -120
 2060 03fe 12       		.uleb128 0x12
 2061 03ff 92010000 		.4byte	0x192
 2062 0403 03       		.uleb128 0x3
 2063 0404 91       		.byte	0x91
 2064 0405 8C7F     		.sleb128 -116
 2065 0407 00       		.byte	0
 2066 0408 11       		.uleb128 0x11
 2067 0409 81010000 		.4byte	0x181
 2068 040d D2030000 		.4byte	.LBB24
 2069 0411 1E000000 		.4byte	.LBE24-.LBB24
 2070 0415 01       		.byte	0x1
 2071 0416 4301     		.2byte	0x143
 2072 0418 38040000 		.4byte	0x438
 2073 041c 12       		.uleb128 0x12
 2074 041d A6010000 		.4byte	0x1a6
 2075 0421 03       		.uleb128 0x3
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 64


 2076 0422 91       		.byte	0x91
 2077 0423 F87E     		.sleb128 -136
 2078 0425 12       		.uleb128 0x12
 2079 0426 9C010000 		.4byte	0x19c
 2080 042a 03       		.uleb128 0x3
 2081 042b 91       		.byte	0x91
 2082 042c FC7E     		.sleb128 -132
 2083 042e 12       		.uleb128 0x12
 2084 042f 92010000 		.4byte	0x192
 2085 0433 03       		.uleb128 0x3
 2086 0434 91       		.byte	0x91
 2087 0435 807F     		.sleb128 -128
 2088 0437 00       		.byte	0
 2089 0438 11       		.uleb128 0x11
 2090 0439 81010000 		.4byte	0x181
 2091 043d AE060000 		.4byte	.LBB26
 2092 0441 1E000000 		.4byte	.LBE26-.LBB26
 2093 0445 01       		.byte	0x1
 2094 0446 B701     		.2byte	0x1b7
 2095 0448 68040000 		.4byte	0x468
 2096 044c 12       		.uleb128 0x12
 2097 044d A6010000 		.4byte	0x1a6
 2098 0451 03       		.uleb128 0x3
 2099 0452 91       		.byte	0x91
 2100 0453 EC7E     		.sleb128 -148
 2101 0455 12       		.uleb128 0x12
 2102 0456 9C010000 		.4byte	0x19c
 2103 045a 03       		.uleb128 0x3
 2104 045b 91       		.byte	0x91
 2105 045c F07E     		.sleb128 -144
 2106 045e 12       		.uleb128 0x12
 2107 045f 92010000 		.4byte	0x192
 2108 0463 03       		.uleb128 0x3
 2109 0464 91       		.byte	0x91
 2110 0465 F47E     		.sleb128 -140
 2111 0467 00       		.byte	0
 2112 0468 11       		.uleb128 0x11
 2113 0469 81010000 		.4byte	0x181
 2114 046d EA060000 		.4byte	.LBB28
 2115 0471 1E000000 		.4byte	.LBE28-.LBB28
 2116 0475 01       		.byte	0x1
 2117 0476 B801     		.2byte	0x1b8
 2118 0478 98040000 		.4byte	0x498
 2119 047c 12       		.uleb128 0x12
 2120 047d A6010000 		.4byte	0x1a6
 2121 0481 03       		.uleb128 0x3
 2122 0482 91       		.byte	0x91
 2123 0483 E07E     		.sleb128 -160
 2124 0485 12       		.uleb128 0x12
 2125 0486 9C010000 		.4byte	0x19c
 2126 048a 03       		.uleb128 0x3
 2127 048b 91       		.byte	0x91
 2128 048c E47E     		.sleb128 -156
 2129 048e 12       		.uleb128 0x12
 2130 048f 92010000 		.4byte	0x192
 2131 0493 03       		.uleb128 0x3
 2132 0494 91       		.byte	0x91
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 65


 2133 0495 E87E     		.sleb128 -152
 2134 0497 00       		.byte	0
 2135 0498 11       		.uleb128 0x11
 2136 0499 81010000 		.4byte	0x181
 2137 049d 94080000 		.4byte	.LBB30
 2138 04a1 1E000000 		.4byte	.LBE30-.LBB30
 2139 04a5 01       		.byte	0x1
 2140 04a6 EC01     		.2byte	0x1ec
 2141 04a8 C8040000 		.4byte	0x4c8
 2142 04ac 12       		.uleb128 0x12
 2143 04ad A6010000 		.4byte	0x1a6
 2144 04b1 03       		.uleb128 0x3
 2145 04b2 91       		.byte	0x91
 2146 04b3 D47E     		.sleb128 -172
 2147 04b5 12       		.uleb128 0x12
 2148 04b6 9C010000 		.4byte	0x19c
 2149 04ba 03       		.uleb128 0x3
 2150 04bb 91       		.byte	0x91
 2151 04bc D87E     		.sleb128 -168
 2152 04be 12       		.uleb128 0x12
 2153 04bf 92010000 		.4byte	0x192
 2154 04c3 03       		.uleb128 0x3
 2155 04c4 91       		.byte	0x91
 2156 04c5 DC7E     		.sleb128 -164
 2157 04c7 00       		.byte	0
 2158 04c8 13       		.uleb128 0x13
 2159 04c9 81010000 		.4byte	0x181
 2160 04cd D0080000 		.4byte	.LBB32
 2161 04d1 1E000000 		.4byte	.LBE32-.LBB32
 2162 04d5 01       		.byte	0x1
 2163 04d6 ED01     		.2byte	0x1ed
 2164 04d8 12       		.uleb128 0x12
 2165 04d9 A6010000 		.4byte	0x1a6
 2166 04dd 03       		.uleb128 0x3
 2167 04de 91       		.byte	0x91
 2168 04df C87E     		.sleb128 -184
 2169 04e1 12       		.uleb128 0x12
 2170 04e2 9C010000 		.4byte	0x19c
 2171 04e6 03       		.uleb128 0x3
 2172 04e7 91       		.byte	0x91
 2173 04e8 CC7E     		.sleb128 -180
 2174 04ea 12       		.uleb128 0x12
 2175 04eb 92010000 		.4byte	0x192
 2176 04ef 03       		.uleb128 0x3
 2177 04f0 91       		.byte	0x91
 2178 04f1 D07E     		.sleb128 -176
 2179 04f3 00       		.byte	0
 2180 04f4 00       		.byte	0
 2181 04f5 08       		.uleb128 0x8
 2182 04f6 04       		.byte	0x4
 2183 04f7 FB040000 		.4byte	0x4fb
 2184 04fb 14       		.uleb128 0x14
 2185 04fc 75010000 		.4byte	0x175
 2186 0500 08       		.uleb128 0x8
 2187 0501 04       		.byte	0x4
 2188 0502 75010000 		.4byte	0x175
 2189 0506 00       		.byte	0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 66


 2190              		.section	.debug_abbrev,"",%progbits
 2191              	.Ldebug_abbrev0:
 2192 0000 01       		.uleb128 0x1
 2193 0001 11       		.uleb128 0x11
 2194 0002 01       		.byte	0x1
 2195 0003 25       		.uleb128 0x25
 2196 0004 0E       		.uleb128 0xe
 2197 0005 13       		.uleb128 0x13
 2198 0006 0B       		.uleb128 0xb
 2199 0007 03       		.uleb128 0x3
 2200 0008 0E       		.uleb128 0xe
 2201 0009 1B       		.uleb128 0x1b
 2202 000a 0E       		.uleb128 0xe
 2203 000b 55       		.uleb128 0x55
 2204 000c 17       		.uleb128 0x17
 2205 000d 11       		.uleb128 0x11
 2206 000e 01       		.uleb128 0x1
 2207 000f 10       		.uleb128 0x10
 2208 0010 17       		.uleb128 0x17
 2209 0011 00       		.byte	0
 2210 0012 00       		.byte	0
 2211 0013 02       		.uleb128 0x2
 2212 0014 24       		.uleb128 0x24
 2213 0015 00       		.byte	0
 2214 0016 0B       		.uleb128 0xb
 2215 0017 0B       		.uleb128 0xb
 2216 0018 3E       		.uleb128 0x3e
 2217 0019 0B       		.uleb128 0xb
 2218 001a 03       		.uleb128 0x3
 2219 001b 0E       		.uleb128 0xe
 2220 001c 00       		.byte	0
 2221 001d 00       		.byte	0
 2222 001e 03       		.uleb128 0x3
 2223 001f 16       		.uleb128 0x16
 2224 0020 00       		.byte	0
 2225 0021 03       		.uleb128 0x3
 2226 0022 0E       		.uleb128 0xe
 2227 0023 3A       		.uleb128 0x3a
 2228 0024 0B       		.uleb128 0xb
 2229 0025 3B       		.uleb128 0x3b
 2230 0026 0B       		.uleb128 0xb
 2231 0027 49       		.uleb128 0x49
 2232 0028 13       		.uleb128 0x13
 2233 0029 00       		.byte	0
 2234 002a 00       		.byte	0
 2235 002b 04       		.uleb128 0x4
 2236 002c 24       		.uleb128 0x24
 2237 002d 00       		.byte	0
 2238 002e 0B       		.uleb128 0xb
 2239 002f 0B       		.uleb128 0xb
 2240 0030 3E       		.uleb128 0x3e
 2241 0031 0B       		.uleb128 0xb
 2242 0032 03       		.uleb128 0x3
 2243 0033 08       		.uleb128 0x8
 2244 0034 00       		.byte	0
 2245 0035 00       		.byte	0
 2246 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 67


 2247 0037 04       		.uleb128 0x4
 2248 0038 01       		.byte	0x1
 2249 0039 0B       		.uleb128 0xb
 2250 003a 0B       		.uleb128 0xb
 2251 003b 3A       		.uleb128 0x3a
 2252 003c 0B       		.uleb128 0xb
 2253 003d 3B       		.uleb128 0x3b
 2254 003e 05       		.uleb128 0x5
 2255 003f 01       		.uleb128 0x1
 2256 0040 13       		.uleb128 0x13
 2257 0041 00       		.byte	0
 2258 0042 00       		.byte	0
 2259 0043 06       		.uleb128 0x6
 2260 0044 28       		.uleb128 0x28
 2261 0045 00       		.byte	0
 2262 0046 03       		.uleb128 0x3
 2263 0047 0E       		.uleb128 0xe
 2264 0048 1C       		.uleb128 0x1c
 2265 0049 0D       		.uleb128 0xd
 2266 004a 00       		.byte	0
 2267 004b 00       		.byte	0
 2268 004c 07       		.uleb128 0x7
 2269 004d 16       		.uleb128 0x16
 2270 004e 00       		.byte	0
 2271 004f 03       		.uleb128 0x3
 2272 0050 0E       		.uleb128 0xe
 2273 0051 3A       		.uleb128 0x3a
 2274 0052 0B       		.uleb128 0xb
 2275 0053 3B       		.uleb128 0x3b
 2276 0054 05       		.uleb128 0x5
 2277 0055 49       		.uleb128 0x49
 2278 0056 13       		.uleb128 0x13
 2279 0057 00       		.byte	0
 2280 0058 00       		.byte	0
 2281 0059 08       		.uleb128 0x8
 2282 005a 0F       		.uleb128 0xf
 2283 005b 00       		.byte	0
 2284 005c 0B       		.uleb128 0xb
 2285 005d 0B       		.uleb128 0xb
 2286 005e 49       		.uleb128 0x49
 2287 005f 13       		.uleb128 0x13
 2288 0060 00       		.byte	0
 2289 0061 00       		.byte	0
 2290 0062 09       		.uleb128 0x9
 2291 0063 13       		.uleb128 0x13
 2292 0064 01       		.byte	0x1
 2293 0065 0B       		.uleb128 0xb
 2294 0066 0B       		.uleb128 0xb
 2295 0067 3A       		.uleb128 0x3a
 2296 0068 0B       		.uleb128 0xb
 2297 0069 3B       		.uleb128 0x3b
 2298 006a 05       		.uleb128 0x5
 2299 006b 01       		.uleb128 0x1
 2300 006c 13       		.uleb128 0x13
 2301 006d 00       		.byte	0
 2302 006e 00       		.byte	0
 2303 006f 0A       		.uleb128 0xa
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 68


 2304 0070 0D       		.uleb128 0xd
 2305 0071 00       		.byte	0
 2306 0072 03       		.uleb128 0x3
 2307 0073 0E       		.uleb128 0xe
 2308 0074 3A       		.uleb128 0x3a
 2309 0075 0B       		.uleb128 0xb
 2310 0076 3B       		.uleb128 0x3b
 2311 0077 05       		.uleb128 0x5
 2312 0078 49       		.uleb128 0x49
 2313 0079 13       		.uleb128 0x13
 2314 007a 38       		.uleb128 0x38
 2315 007b 0B       		.uleb128 0xb
 2316 007c 00       		.byte	0
 2317 007d 00       		.byte	0
 2318 007e 0B       		.uleb128 0xb
 2319 007f 2E       		.uleb128 0x2e
 2320 0080 01       		.byte	0x1
 2321 0081 03       		.uleb128 0x3
 2322 0082 0E       		.uleb128 0xe
 2323 0083 3A       		.uleb128 0x3a
 2324 0084 0B       		.uleb128 0xb
 2325 0085 3B       		.uleb128 0x3b
 2326 0086 05       		.uleb128 0x5
 2327 0087 27       		.uleb128 0x27
 2328 0088 19       		.uleb128 0x19
 2329 0089 49       		.uleb128 0x49
 2330 008a 13       		.uleb128 0x13
 2331 008b 20       		.uleb128 0x20
 2332 008c 0B       		.uleb128 0xb
 2333 008d 01       		.uleb128 0x1
 2334 008e 13       		.uleb128 0x13
 2335 008f 00       		.byte	0
 2336 0090 00       		.byte	0
 2337 0091 0C       		.uleb128 0xc
 2338 0092 05       		.uleb128 0x5
 2339 0093 00       		.byte	0
 2340 0094 03       		.uleb128 0x3
 2341 0095 08       		.uleb128 0x8
 2342 0096 3A       		.uleb128 0x3a
 2343 0097 0B       		.uleb128 0xb
 2344 0098 3B       		.uleb128 0x3b
 2345 0099 05       		.uleb128 0x5
 2346 009a 49       		.uleb128 0x49
 2347 009b 13       		.uleb128 0x13
 2348 009c 00       		.byte	0
 2349 009d 00       		.byte	0
 2350 009e 0D       		.uleb128 0xd
 2351 009f 2E       		.uleb128 0x2e
 2352 00a0 01       		.byte	0x1
 2353 00a1 3F       		.uleb128 0x3f
 2354 00a2 19       		.uleb128 0x19
 2355 00a3 03       		.uleb128 0x3
 2356 00a4 0E       		.uleb128 0xe
 2357 00a5 3A       		.uleb128 0x3a
 2358 00a6 0B       		.uleb128 0xb
 2359 00a7 3B       		.uleb128 0x3b
 2360 00a8 0B       		.uleb128 0xb
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 69


 2361 00a9 27       		.uleb128 0x27
 2362 00aa 19       		.uleb128 0x19
 2363 00ab 49       		.uleb128 0x49
 2364 00ac 13       		.uleb128 0x13
 2365 00ad 11       		.uleb128 0x11
 2366 00ae 01       		.uleb128 0x1
 2367 00af 12       		.uleb128 0x12
 2368 00b0 06       		.uleb128 0x6
 2369 00b1 40       		.uleb128 0x40
 2370 00b2 18       		.uleb128 0x18
 2371 00b3 9742     		.uleb128 0x2117
 2372 00b5 19       		.uleb128 0x19
 2373 00b6 01       		.uleb128 0x1
 2374 00b7 13       		.uleb128 0x13
 2375 00b8 00       		.byte	0
 2376 00b9 00       		.byte	0
 2377 00ba 0E       		.uleb128 0xe
 2378 00bb 05       		.uleb128 0x5
 2379 00bc 00       		.byte	0
 2380 00bd 03       		.uleb128 0x3
 2381 00be 0E       		.uleb128 0xe
 2382 00bf 3A       		.uleb128 0x3a
 2383 00c0 0B       		.uleb128 0xb
 2384 00c1 3B       		.uleb128 0x3b
 2385 00c2 0B       		.uleb128 0xb
 2386 00c3 49       		.uleb128 0x49
 2387 00c4 13       		.uleb128 0x13
 2388 00c5 02       		.uleb128 0x2
 2389 00c6 18       		.uleb128 0x18
 2390 00c7 00       		.byte	0
 2391 00c8 00       		.byte	0
 2392 00c9 0F       		.uleb128 0xf
 2393 00ca 34       		.uleb128 0x34
 2394 00cb 00       		.byte	0
 2395 00cc 03       		.uleb128 0x3
 2396 00cd 08       		.uleb128 0x8
 2397 00ce 3A       		.uleb128 0x3a
 2398 00cf 0B       		.uleb128 0xb
 2399 00d0 3B       		.uleb128 0x3b
 2400 00d1 0B       		.uleb128 0xb
 2401 00d2 49       		.uleb128 0x49
 2402 00d3 13       		.uleb128 0x13
 2403 00d4 02       		.uleb128 0x2
 2404 00d5 18       		.uleb128 0x18
 2405 00d6 00       		.byte	0
 2406 00d7 00       		.byte	0
 2407 00d8 10       		.uleb128 0x10
 2408 00d9 34       		.uleb128 0x34
 2409 00da 00       		.byte	0
 2410 00db 03       		.uleb128 0x3
 2411 00dc 0E       		.uleb128 0xe
 2412 00dd 3A       		.uleb128 0x3a
 2413 00de 0B       		.uleb128 0xb
 2414 00df 3B       		.uleb128 0x3b
 2415 00e0 0B       		.uleb128 0xb
 2416 00e1 49       		.uleb128 0x49
 2417 00e2 13       		.uleb128 0x13
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 70


 2418 00e3 02       		.uleb128 0x2
 2419 00e4 18       		.uleb128 0x18
 2420 00e5 00       		.byte	0
 2421 00e6 00       		.byte	0
 2422 00e7 11       		.uleb128 0x11
 2423 00e8 1D       		.uleb128 0x1d
 2424 00e9 01       		.byte	0x1
 2425 00ea 31       		.uleb128 0x31
 2426 00eb 13       		.uleb128 0x13
 2427 00ec 11       		.uleb128 0x11
 2428 00ed 01       		.uleb128 0x1
 2429 00ee 12       		.uleb128 0x12
 2430 00ef 06       		.uleb128 0x6
 2431 00f0 58       		.uleb128 0x58
 2432 00f1 0B       		.uleb128 0xb
 2433 00f2 59       		.uleb128 0x59
 2434 00f3 05       		.uleb128 0x5
 2435 00f4 01       		.uleb128 0x1
 2436 00f5 13       		.uleb128 0x13
 2437 00f6 00       		.byte	0
 2438 00f7 00       		.byte	0
 2439 00f8 12       		.uleb128 0x12
 2440 00f9 05       		.uleb128 0x5
 2441 00fa 00       		.byte	0
 2442 00fb 31       		.uleb128 0x31
 2443 00fc 13       		.uleb128 0x13
 2444 00fd 02       		.uleb128 0x2
 2445 00fe 18       		.uleb128 0x18
 2446 00ff 00       		.byte	0
 2447 0100 00       		.byte	0
 2448 0101 13       		.uleb128 0x13
 2449 0102 1D       		.uleb128 0x1d
 2450 0103 01       		.byte	0x1
 2451 0104 31       		.uleb128 0x31
 2452 0105 13       		.uleb128 0x13
 2453 0106 11       		.uleb128 0x11
 2454 0107 01       		.uleb128 0x1
 2455 0108 12       		.uleb128 0x12
 2456 0109 06       		.uleb128 0x6
 2457 010a 58       		.uleb128 0x58
 2458 010b 0B       		.uleb128 0xb
 2459 010c 59       		.uleb128 0x59
 2460 010d 05       		.uleb128 0x5
 2461 010e 00       		.byte	0
 2462 010f 00       		.byte	0
 2463 0110 14       		.uleb128 0x14
 2464 0111 26       		.uleb128 0x26
 2465 0112 00       		.byte	0
 2466 0113 49       		.uleb128 0x49
 2467 0114 13       		.uleb128 0x13
 2468 0115 00       		.byte	0
 2469 0116 00       		.byte	0
 2470 0117 00       		.byte	0
 2471              		.section	.debug_aranges,"",%progbits
 2472 0000 1C000000 		.4byte	0x1c
 2473 0004 0200     		.2byte	0x2
 2474 0006 00000000 		.4byte	.Ldebug_info0
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 71


 2475 000a 04       		.byte	0x4
 2476 000b 00       		.byte	0
 2477 000c 0000     		.2byte	0
 2478 000e 0000     		.2byte	0
 2479 0010 00000000 		.4byte	.LFB82
 2480 0014 AC090000 		.4byte	.LFE82-.LFB82
 2481 0018 00000000 		.4byte	0
 2482 001c 00000000 		.4byte	0
 2483              		.section	.debug_ranges,"",%progbits
 2484              	.Ldebug_ranges0:
 2485 0000 00000000 		.4byte	.LFB82
 2486 0004 AC090000 		.4byte	.LFE82
 2487 0008 00000000 		.4byte	0
 2488 000c 00000000 		.4byte	0
 2489              		.section	.debug_line,"",%progbits
 2490              	.Ldebug_line0:
 2491 0000 B4020000 		.section	.debug_str,"MS",%progbits,1
 2491      02005501 
 2491      00000201 
 2491      FB0E0D00 
 2491      01010101 
 2492              	.LASF47:
 2493 0000 636F6C43 		.ascii	"colCnt\000"
 2493      6E7400
 2494              	.LASF22:
 2495 0007 41524D5F 		.ascii	"ARM_MATH_SUCCESS\000"
 2495      4D415448 
 2495      5F535543 
 2495      43455353 
 2495      00
 2496              	.LASF11:
 2497 0018 6C6F6E67 		.ascii	"long long unsigned int\000"
 2497      206C6F6E 
 2497      6720756E 
 2497      7369676E 
 2497      65642069 
 2498              	.LASF13:
 2499 002f 696E7431 		.ascii	"int16_t\000"
 2499      365F7400 
 2500              	.LASF10:
 2501 0037 6C6F6E67 		.ascii	"long long int\000"
 2501      206C6F6E 
 2501      6720696E 
 2501      7400
 2502              	.LASF0:
 2503 0045 7369676E 		.ascii	"signed char\000"
 2503      65642063 
 2503      68617200 
 2504              	.LASF7:
 2505 0051 6C6F6E67 		.ascii	"long int\000"
 2505      20696E74 
 2505      00
 2506              	.LASF38:
 2507 005a 70447374 		.ascii	"pDst\000"
 2507      00
 2508              	.LASF30:
 2509 005f 7131355F 		.ascii	"q15_t\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 72


 2509      7400
 2510              	.LASF14:
 2511 0065 75696E74 		.ascii	"uint16_t\000"
 2511      31365F74 
 2511      00
 2512              	.LASF19:
 2513 006e 646F7562 		.ascii	"double\000"
 2513      6C6500
 2514              	.LASF45:
 2515 0075 6E756D43 		.ascii	"numColsA\000"
 2515      6F6C7341 
 2515      00
 2516              	.LASF44:
 2517 007e 6E756D43 		.ascii	"numColsB\000"
 2517      6F6C7342 
 2517      00
 2518              	.LASF36:
 2519 0087 70537263 		.ascii	"pSrcA\000"
 2519      4100
 2520              	.LASF37:
 2521 008d 70537263 		.ascii	"pSrcB\000"
 2521      4200
 2522              	.LASF34:
 2523 0093 70446174 		.ascii	"pData\000"
 2523      6100
 2524              	.LASF8:
 2525 0099 5F5F7569 		.ascii	"__uint32_t\000"
 2525      6E743332 
 2525      5F7400
 2526              	.LASF3:
 2527 00a4 5F5F696E 		.ascii	"__int16_t\000"
 2527      7431365F 
 2527      7400
 2528              	.LASF32:
 2529 00ae 6E756D52 		.ascii	"numRows\000"
 2529      6F777300 
 2530              	.LASF12:
 2531 00b6 756E7369 		.ascii	"unsigned int\000"
 2531      676E6564 
 2531      20696E74 
 2531      00
 2532              	.LASF9:
 2533 00c3 6C6F6E67 		.ascii	"long unsigned int\000"
 2533      20756E73 
 2533      69676E65 
 2533      6420696E 
 2533      7400
 2534              	.LASF58:
 2535 00d5 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2535      4320342E 
 2535      392E3320 
 2535      32303135 
 2535      30333033 
 2536 0108 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0plus -mthumb -"
 2536      20726576 
 2536      6973696F 
 2536      6E203232 
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 73


 2536      31323230 
 2537 013b 67202D4F 		.ascii	"g -O0 -ffunction-sections -ffat-lto-objects\000"
 2537      30202D66 
 2537      66756E63 
 2537      74696F6E 
 2537      2D736563 
 2538              	.LASF5:
 2539 0167 73686F72 		.ascii	"short unsigned int\000"
 2539      7420756E 
 2539      7369676E 
 2539      65642069 
 2539      6E7400
 2540              	.LASF53:
 2541 017a 73756D32 		.ascii	"sum2\000"
 2541      00
 2542              	.LASF54:
 2543 017f 73756D33 		.ascii	"sum3\000"
 2543      00
 2544              	.LASF55:
 2545 0184 73756D34 		.ascii	"sum4\000"
 2545      00
 2546              	.LASF28:
 2547 0189 41524D5F 		.ascii	"ARM_MATH_TEST_FAILURE\000"
 2547      4D415448 
 2547      5F544553 
 2547      545F4641 
 2547      494C5552 
 2548              	.LASF33:
 2549 019f 6E756D43 		.ascii	"numCols\000"
 2549      6F6C7300 
 2550              	.LASF17:
 2551 01a7 73697A65 		.ascii	"sizetype\000"
 2551      74797065 
 2551      00
 2552              	.LASF21:
 2553 01b0 6C6F6E67 		.ascii	"long double\000"
 2553      20646F75 
 2553      626C6500 
 2554              	.LASF41:
 2555 01bc 70496E41 		.ascii	"pInA\000"
 2555      00
 2556              	.LASF42:
 2557 01c1 70496E42 		.ascii	"pInB\000"
 2557      00
 2558              	.LASF56:
 2559 01c6 70496E41 		.ascii	"pInA2\000"
 2559      3200
 2560              	.LASF24:
 2561 01cc 41524D5F 		.ascii	"ARM_MATH_LENGTH_ERROR\000"
 2561      4D415448 
 2561      5F4C454E 
 2561      4754485F 
 2561      4552524F 
 2562              	.LASF20:
 2563 01e2 666C6F61 		.ascii	"float\000"
 2563      7400
 2564              	.LASF27:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 74


 2565 01e8 41524D5F 		.ascii	"ARM_MATH_SINGULAR\000"
 2565      4D415448 
 2565      5F53494E 
 2565      47554C41 
 2565      5200
 2566              	.LASF62:
 2567 01fa 61726D5F 		.ascii	"arm_mat_mult_fast_q15\000"
 2567      6D61745F 
 2567      6D756C74 
 2567      5F666173 
 2567      745F7131 
 2568              	.LASF26:
 2569 0210 41524D5F 		.ascii	"ARM_MATH_NANINF\000"
 2569      4D415448 
 2569      5F4E414E 
 2569      494E4600 
 2570              	.LASF15:
 2571 0220 696E7433 		.ascii	"int32_t\000"
 2571      325F7400 
 2572              	.LASF1:
 2573 0228 756E7369 		.ascii	"unsigned char\000"
 2573      676E6564 
 2573      20636861 
 2573      7200
 2574              	.LASF39:
 2575 0236 70537461 		.ascii	"pState\000"
 2575      746500
 2576              	.LASF2:
 2577 023d 73686F72 		.ascii	"short int\000"
 2577      7420696E 
 2577      7400
 2578              	.LASF23:
 2579 0247 41524D5F 		.ascii	"ARM_MATH_ARGUMENT_ERROR\000"
 2579      4D415448 
 2579      5F415247 
 2579      554D454E 
 2579      545F4552 
 2580              	.LASF60:
 2581 025f 433A5C55 		.ascii	"C:\\Users\\fneves\\Documents\\PSoC Creator\\wp_1\\e"
 2581      73657273 
 2581      5C666E65 
 2581      7665735C 
 2581      446F6375 
 2582 028c 6E67696E 		.ascii	"ngine_speed_sensor.cydsn\000"
 2582      655F7370 
 2582      6565645F 
 2582      73656E73 
 2582      6F722E63 
 2583              	.LASF50:
 2584 02a5 696E4132 		.ascii	"inA2\000"
 2584      00
 2585              	.LASF43:
 2586 02aa 6E756D52 		.ascii	"numRowsA\000"
 2586      6F777341 
 2586      00
 2587              	.LASF46:
 2588 02b3 6E756D52 		.ascii	"numRowsB\000"
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 75


 2588      6F777342 
 2588      00
 2589              	.LASF57:
 2590 02bc 70496E42 		.ascii	"pInB2\000"
 2590      3200
 2591              	.LASF31:
 2592 02c2 7133315F 		.ascii	"q31_t\000"
 2592      7400
 2593              	.LASF59:
 2594 02c8 536F7572 		.ascii	"Source\\MatrixFunctions\\arm_mat_mult_fast_q15.c\000"
 2594      63655C4D 
 2594      61747269 
 2594      7846756E 
 2594      6374696F 
 2595              	.LASF16:
 2596 02f7 75696E74 		.ascii	"uint32_t\000"
 2596      33325F74 
 2596      00
 2597              	.LASF18:
 2598 0300 63686172 		.ascii	"char\000"
 2598      00
 2599              	.LASF49:
 2600 0305 696E4131 		.ascii	"inA1\000"
 2600      00
 2601              	.LASF4:
 2602 030a 5F5F7569 		.ascii	"__uint16_t\000"
 2602      6E743136 
 2602      5F7400
 2603              	.LASF25:
 2604 0315 41524D5F 		.ascii	"ARM_MATH_SIZE_MISMATCH\000"
 2604      4D415448 
 2604      5F53495A 
 2604      455F4D49 
 2604      534D4154 
 2605              	.LASF6:
 2606 032c 5F5F696E 		.ascii	"__int32_t\000"
 2606      7433325F 
 2606      7400
 2607              	.LASF61:
 2608 0336 5F5F534D 		.ascii	"__SMLAD\000"
 2608      4C414400 
 2609              	.LASF51:
 2610 033e 696E4231 		.ascii	"inB1\000"
 2610      00
 2611              	.LASF52:
 2612 0343 696E4232 		.ascii	"inB2\000"
 2612      00
 2613              	.LASF35:
 2614 0348 61726D5F 		.ascii	"arm_matrix_instance_q15\000"
 2614      6D617472 
 2614      69785F69 
 2614      6E737461 
 2614      6E63655F 
 2615              	.LASF48:
 2616 0360 73746174 		.ascii	"status\000"
 2616      757300
 2617              	.LASF40:
ARM GAS  C:\Users\fneves\AppData\Local\Temp\ccs3iwmF.s 			page 76


 2618 0367 70537263 		.ascii	"pSrcBT\000"
 2618      425400
 2619              	.LASF29:
 2620 036e 61726D5F 		.ascii	"arm_status\000"
 2620      73746174 
 2620      757300
 2621              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
